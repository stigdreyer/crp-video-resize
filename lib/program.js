function Run(data){

Module = {};
Module['preRun'] = [];

//OUTPUT
Module['return'] = {};
Module['return']['output'] = {};
Module['return']['output']['files'] = {};
Module['return']['output']['stdout'] = '';
Module['return']['output']['stderr'] = '';

//PATH CODE
Module['dirname'] = function dirname(path){

  return path.substring(0,path.lastIndexOf('/')+1);
}

Module['basename'] = function basename(path){

  return path.substring(path.lastIndexOf('/')+1);
}

//COMPRESS CODE
// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// this work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.3.0

var LZString = {

  // private property
  _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  
  compressToBase64 : function (input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;
    
    input = this.compress(input);
    
    while (i < input.length*2) {
      
      if (i%2==0) {
        chr1 = input.charCodeAt(i/2) >> 8;
        chr2 = input.charCodeAt(i/2) & 255;
        if (i/2+1 < input.length) 
          chr3 = input.charCodeAt(i/2+1) >> 8;
        else 
          chr3 = NaN;
      } else {
        chr1 = input.charCodeAt((i-1)/2) & 255;
        if ((i+1)/2 < input.length) {
          chr2 = input.charCodeAt((i+1)/2) >> 8;
          chr3 = input.charCodeAt((i+1)/2) & 255;
        } else 
          chr2=chr3=NaN;
      }
      i+=3;
      
      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;
      
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
      
      output = output +
        this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
          this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
      
    }
    
    return output;
  },
  
  decompressFromBase64 : function (input) {
    var output = "",
        ol = 0, 
        output_,
        chr1, chr2, chr3,
        enc1, enc2, enc3, enc4,
        i = 0;
    
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    
    while (i < input.length) {
      
      enc1 = this._keyStr.indexOf(input.charAt(i++));
      enc2 = this._keyStr.indexOf(input.charAt(i++));
      enc3 = this._keyStr.indexOf(input.charAt(i++));
      enc4 = this._keyStr.indexOf(input.charAt(i++));
      
      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;
      
      if (ol%2==0) {
        output_ = chr1 << 8;
        flush = true;
        
        if (enc3 != 64) {
          output += String.fromCharCode(output_ | chr2);
          flush = false;
        }
        if (enc4 != 64) {
          output_ = chr3 << 8;
          flush = true;
        }
      } else {
        output = output + String.fromCharCode(output_ | chr1);
        flush = false;
        
        if (enc3 != 64) {
          output_ = chr2 << 8;
          flush = true;
        }
        if (enc4 != 64) {
          output += String.fromCharCode(output_ | chr3);
          flush = false;
        }
      }
      ol+=3;
    }
    
    return this.decompress(output);
    
  },

  compressToUTF16 : function (input) {
    var output = "",
        i,c,
        current,
        status = 0;
    
    input = this.compress(input);
    
    for (i=0 ; i<input.length ; i++) {
      c = input.charCodeAt(i);
      switch (status++) {
        case 0:
          output += String.fromCharCode((c >> 1)+32);
          current = (c & 1) << 14;
          break;
        case 1:
          output += String.fromCharCode((current + (c >> 2))+32);
          current = (c & 3) << 13;
          break;
        case 2:
          output += String.fromCharCode((current + (c >> 3))+32);
          current = (c & 7) << 12;
          break;
        case 3:
          output += String.fromCharCode((current + (c >> 4))+32);
          current = (c & 15) << 11;
          break;
        case 4:
          output += String.fromCharCode((current + (c >> 5))+32);
          current = (c & 31) << 10;
          break;
        case 5:
          output += String.fromCharCode((current + (c >> 6))+32);
          current = (c & 63) << 9;
          break;
        case 6:
          output += String.fromCharCode((current + (c >> 7))+32);
          current = (c & 127) << 8;
          break;
        case 7:
          output += String.fromCharCode((current + (c >> 8))+32);
          current = (c & 255) << 7;
          break;
        case 8:
          output += String.fromCharCode((current + (c >> 9))+32);
          current = (c & 511) << 6;
          break;
        case 9:
          output += String.fromCharCode((current + (c >> 10))+32);
          current = (c & 1023) << 5;
          break;
        case 10:
          output += String.fromCharCode((current + (c >> 11))+32);
          current = (c & 2047) << 4;
          break;
        case 11:
          output += String.fromCharCode((current + (c >> 12))+32);
          current = (c & 4095) << 3;
          break;
        case 12:
          output += String.fromCharCode((current + (c >> 13))+32);
          current = (c & 8191) << 2;
          break;
        case 13:
          output += String.fromCharCode((current + (c >> 14))+32);
          current = (c & 16383) << 1;
          break;
        case 14:
          output += String.fromCharCode((current + (c >> 15))+32, (c & 32767)+32);
          status = 0;
          break;
      }
    }
    
    return output + String.fromCharCode(current + 32);
  },
  

  decompressFromUTF16 : function (input) {
    var output = "",
        current,c,
        status=0,
        i = 0;
    
    while (i < input.length) {
      c = input.charCodeAt(i) - 32;
      
      switch (status++) {
        case 0:
          current = c << 1;
          break;
        case 1:
          output += String.fromCharCode(current | (c >> 14));
          current = (c&16383) << 2;
          break;
        case 2:
          output += String.fromCharCode(current | (c >> 13));
          current = (c&8191) << 3;
          break;
        case 3:
          output += String.fromCharCode(current | (c >> 12));
          current = (c&4095) << 4;
          break;
        case 4:
          output += String.fromCharCode(current | (c >> 11));
          current = (c&2047) << 5;
          break;
        case 5:
          output += String.fromCharCode(current | (c >> 10));
          current = (c&1023) << 6;
          break;
        case 6:
          output += String.fromCharCode(current | (c >> 9));
          current = (c&511) << 7;
          break;
        case 7:
          output += String.fromCharCode(current | (c >> 8));
          current = (c&255) << 8;
          break;
        case 8:
          output += String.fromCharCode(current | (c >> 7));
          current = (c&127) << 9;
          break;
        case 9:
          output += String.fromCharCode(current | (c >> 6));
          current = (c&63) << 10;
          break;
        case 10:
          output += String.fromCharCode(current | (c >> 5));
          current = (c&31) << 11;
          break;
        case 11:
          output += String.fromCharCode(current | (c >> 4));
          current = (c&15) << 12;
          break;
        case 12:
          output += String.fromCharCode(current | (c >> 3));
          current = (c&7) << 13;
          break;
        case 13:
          output += String.fromCharCode(current | (c >> 2));
          current = (c&3) << 14;
          break;
        case 14:
          output += String.fromCharCode(current | (c >> 1));
          current = (c&1) << 15;
          break;
        case 15:
          output += String.fromCharCode(current | c);
          status=0;
          break;
      }
      
      
      i++;
    }
    
    return this.decompress(output);
    //return output;
    
  },


  
  compress: function (uncompressed) {
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_result= "",
        context_data_string="", 
        context_data_val=0, 
        context_data_position=0,
        ii;
    
    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!context_dictionary.hasOwnProperty(context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }
      
      context_wc = context_w + context_c;
      if (context_dictionary.hasOwnProperty(context_wc)) {
        context_w = context_wc;
      } else {
        if (context_dictionaryToCreate.hasOwnProperty(context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += String.fromCharCode(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += String.fromCharCode(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += String.fromCharCode(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == 15) {
                context_data_position = 0;
                context_data_string += String.fromCharCode(context_data_val);
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += String.fromCharCode(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          
          
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }
    
    // Output the code for w.
    if (context_w !== "") {
      if (context_dictionaryToCreate.hasOwnProperty(context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += String.fromCharCode(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += String.fromCharCode(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += String.fromCharCode(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == 15) {
              context_data_position = 0;
              context_data_string += String.fromCharCode(context_data_val);
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == 15) {
            context_data_position = 0;
            context_data_string += String.fromCharCode(context_data_val);
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }
        
        
      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }
    
    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == 15) {
        context_data_position = 0;
        context_data_string += String.fromCharCode(context_data_val);
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }
    
    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == 15) {
        context_data_string += String.fromCharCode(context_data_val);
        break;
      }
      else context_data_position++;
    }
    return context_data_string;
  },
  
  decompress: function (compressed) {
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = "",
        i,
        w,
        bits, resb, maxpower, power,
        c,
        errorCount=0,
        literal,
        data = {string:compressed, val:compressed.charCodeAt(0), position:32768, index:1};
    
    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }
    
    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = 32768;
        data.val = data.string.charCodeAt(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }
    
    switch (next = bits) {
      case 0: 
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = 32768;
              data.val = data.string.charCodeAt(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = String.fromCharCode(bits);
        break;
      case 1: 
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = 32768;
              data.val = data.string.charCodeAt(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = String.fromCharCode(bits);
        break;
      case 2: 
        return "";
    }
    dictionary[3] = c;
    w = result = c;
    while (true) {
      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = 32768;
          data.val = data.string.charCodeAt(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0: 
          if (errorCount++ > 10000) return "Error";
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = 32768;
              data.val = data.string.charCodeAt(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = String.fromCharCode(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1: 
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = 32768;
              data.val = data.string.charCodeAt(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = String.fromCharCode(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2: 
          return result;
      }
      
      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }
      
      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result += entry;
      
      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;
      
      w = entry;
      
      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }
      
    }
  }
};

var module = {};
module.exports = {};
module.exports.compress = LZString.compressToBase64.bind(LZString);
module.exports.decompress = LZString.decompressFromBase64.bind(LZString);



Module['compress'] = module.exports.compress;
Module['decompress'] = module.exports.decompress;





Module['preRun'].push(function () {

if((data.input) && (data.input.files)){ 
        var files = data.input.files;
	files.forEach(function(file) {
 
		var dirname = Module['dirname'](file.name);
		var basename = Module['basename'](file.name);
		
	
		var content = ((file.decompress) || (file.compress)) ? Module['decompress'](file.content) : file.content;
		

		Module['FS_createDataFile'](dirname,basename,content,true,true); 
	}); 

}
		
		var dirname = Module['dirname'](Module['dirname']('/facebook.jpg'));
		var basename = Module['basename'](Module['basename']('/facebook.jpg'));
		
		var content = Module['decompress']('');
		
		
		Module['FS_createDataFile'](dirname,basename,content,true,true);
	
		

	Module['print'] = function(text){
		Module['return']['output']['stdout'] += text + '\n';
	};

	Module['printErr'] = function(text){
		Module['return']['output']['stderr'] += text + '\n';
	};
});

//

//EMSCRIPTEN CODE
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module.exports = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (ENVIRONMENT_IS_WEB) {
    Module['print'] = function(x) {
      console.log(x);
    };
    Module['printErr'] = function(x) {
      console.log(x);
    };
    this['Module'] = Module;
  } else if (ENVIRONMENT_IS_WORKER) {
    // We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          alignSize = type.alignSize || QUANTUM_SIZE;
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = ((((STATICTOP)+7)>>3)<<3); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = ((((DYNAMICTOP)+7)>>3)<<3); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addOnPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
}
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 38944;
var _stderr;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a403() } },{ func: function() { __GLOBAL__I_a692() } });
var ___dso_handle;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTVN10__cxxabiv117__class_type_infoE;
var __ZN14CvImageFiltersC1Ev;
var __ZN14CvImageFiltersD1Ev;
var __ZN11GrFmtReaderD1Ev;
var __ZN18GrFmtFactoriesListC1Ev;
var __ZN18GrFmtFactoriesListD1Ev;
var __ZN8GrFmtBmpC1Ev;
var __ZN8GrFmtBmpD1Ev;
var __ZN14GrFmtBmpReaderC1EPKc;
var __ZN14GrFmtBmpReaderD1Ev;
var __ZN14GrFmtBmpWriterC1EPKc;
var __ZN14GrFmtBmpWriterD1Ev;
var __ZN9GrFmtJpegC1Ev;
var __ZN9GrFmtJpegD1Ev;
var __ZN14RJpegBitStreamC1Ev;
var __ZN14RJpegBitStreamD1Ev;
var __ZN15GrFmtJpegReaderC1EPKc;
var __ZN15GrFmtJpegReaderD1Ev;
var __ZN14WJpegBitStreamC1Ev;
var __ZN14WJpegBitStreamD1Ev;
var __ZN15GrFmtJpegWriterC1EPKc;
var __ZN15GrFmtJpegWriterD1Ev;
var __ZN8GrFmtPxMC1Ev;
var __ZN8GrFmtPxMD1Ev;
var __ZN14GrFmtPxMReaderC1EPKc;
var __ZN14GrFmtPxMReaderD1Ev;
var __ZN14GrFmtPxMWriterC1EPKc;
var __ZN14GrFmtPxMWriterD1Ev;
var __ZN14GrFmtSunRasterC1Ev;
var __ZN14GrFmtSunRasterD1Ev;
var __ZN20GrFmtSunRasterReaderC1EPKc;
var __ZN20GrFmtSunRasterReaderD1Ev;
var __ZN20GrFmtSunRasterWriterC1EPKc;
var __ZN20GrFmtSunRasterWriterD1Ev;
var __ZN9GrFmtTiffC1Ev;
var __ZN9GrFmtTiffD1Ev;
var __ZN15GrFmtTiffReaderC1EPKc;
var __ZN15GrFmtTiffReaderD1Ev;
var __ZN15GrFmtTiffWriterC1EPKc;
var __ZN15GrFmtTiffWriterD1Ev;
var __ZN11RBaseStreamD1Ev;
var __ZN12RLByteStreamD1Ev;
var __ZN12RLByteStreamD2Ev;
var __ZN12RMByteStreamD1Ev;
var __ZN12RMByteStreamD2Ev;
var __ZN11RLBitStreamD1Ev;
var __ZN11RLBitStreamD2Ev;
var __ZN11RMBitStreamD1Ev;
var __ZN11RMBitStreamD2Ev;
var __ZN11WBaseStreamD1Ev;
var __ZN12WLByteStreamD1Ev;
var __ZN12WLByteStreamD2Ev;
var __ZN12WMByteStreamD1Ev;
var __ZN12WMByteStreamD2Ev;
var __ZN11WMBitStreamD1Ev;
var __ZN11WMBitStreamD2Ev;
var __ZN6CvTypeC1EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E;
var __ZN6CvTypeD1Ev;
var _stderr = _stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,32,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,48,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,0,1,2,3,255,255,5,4,255,255,255,255,255,255,6,255,0,0,0,0,0,0,110,1,0,0,0,0,0,0,78,1,0,0,0,0,0,0,6,2,0,0,0,0,0,0,78,0,0,0,0,0,0,0,138,1,0,0,0,0,0,0,186,2,0,0,0,0,0,0,28,0,0,0,0,0,0,0,132,1,0,0,0,0,0,0,14,1,0,0,0,0,0,0,8,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,210,2,0,0,0,0,0,0,182,0,0,0,0,0,0,0,228,0,0,0,0,0,0,0,232,2,0,0,0,0,0,0,194,0,0,0,0,0,0,0,142,1,0,0,0,0,0,0,218,2,0,0,0,0,0,0,48,1,0,0,0,0,0,0,84,0,0,0,0,0,0,0,138,2,0,0,0,0,0,0,254,0,0,0,0,0,0,0,108,2,0,0,0,0,0,0,22,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,210,1,0,0,0,0,0,0,72,1,0,0,0,0,0,0,16,2,0,0,0,0,0,0,6,3,0,0,0,0,0,0,212,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,168,2,0,0,0,0,0,0,138,0,0,0,0,0,0,0,202,2,0,0,0,0,0,0,54,2,0,0,0,0,0,0,158,1,0,0,0,0,0,0,104,0,0,0,0,0,0,0,198,2,0,0,0,0,0,0,12,0,0,0,0,0,0,0,170,1,0,0,0,0,0,0,4,1,0,0,0,0,0,0,54,1,0,0,0,0,0,0,196,0,0,0,0,0,0,0,0,0,128,195,0,0,127,195,0,0,126,195,0,0,125,195,0,0,124,195,0,0,123,195,0,0,122,195,0,0,121,195,0,0,120,195,0,0,119,195,0,0,118,195,0,0,117,195,0,0,116,195,0,0,115,195,0,0,114,195,0,0,113,195,0,0,112,195,0,0,111,195,0,0,110,195,0,0,109,195,0,0,108,195,0,0,107,195,0,0,106,195,0,0,105,195,0,0,104,195,0,0,103,195,0,0,102,195,0,0,101,195,0,0,100,195,0,0,99,195,0,0,98,195,0,0,97,195,0,0,96,195,0,0,95,195,0,0,94,195,0,0,93,195,0,0,92,195,0,0,91,195,0,0,90,195,0,0,89,195,0,0,88,195,0,0,87,195,0,0,86,195,0,0,85,195,0,0,84,195,0,0,83,195,0,0,82,195,0,0,81,195,0,0,80,195,0,0,79,195,0,0,78,195,0,0,77,195,0,0,76,195,0,0,75,195,0,0,74,195,0,0,73,195,0,0,72,195,0,0,71,195,0,0,70,195,0,0,69,195,0,0,68,195,0,0,67,195,0,0,66,195,0,0,65,195,0,0,64,195,0,0,63,195,0,0,62,195,0,0,61,195,0,0,60,195,0,0,59,195,0,0,58,195,0,0,57,195,0,0,56,195,0,0,55,195,0,0,54,195,0,0,53,195,0,0,52,195,0,0,51,195,0,0,50,195,0,0,49,195,0,0,48,195,0,0,47,195,0,0,46,195,0,0,45,195,0,0,44,195,0,0,43,195,0,0,42,195,0,0,41,195,0,0,40,195,0,0,39,195,0,0,38,195,0,0,37,195,0,0,36,195,0,0,35,195,0,0,34,195,0,0,33,195,0,0,32,195,0,0,31,195,0,0,30,195,0,0,29,195,0,0,28,195,0,0,27,195,0,0,26,195,0,0,25,195,0,0,24,195,0,0,23,195,0,0,22,195,0,0,21,195,0,0,20,195,0,0,19,195,0,0,18,195,0,0,17,195,0,0,16,195,0,0,15,195,0,0,14,195,0,0,13,195,0,0,12,195,0,0,11,195,0,0,10,195,0,0,9,195,0,0,8,195,0,0,7,195,0,0,6,195,0,0,5,195,0,0,4,195,0,0,3,195,0,0,2,195,0,0,1,195,0,0,0,195,0,0,254,194,0,0,252,194,0,0,250,194,0,0,248,194,0,0,246,194,0,0,244,194,0,0,242,194,0,0,240,194,0,0,238,194,0,0,236,194,0,0,234,194,0,0,232,194,0,0,230,194,0,0,228,194,0,0,226,194,0,0,224,194,0,0,222,194,0,0,220,194,0,0,218,194,0,0,216,194,0,0,214,194,0,0,212,194,0,0,210,194,0,0,208,194,0,0,206,194,0,0,204,194,0,0,202,194,0,0,200,194,0,0,198,194,0,0,196,194,0,0,194,194,0,0,192,194,0,0,190,194,0,0,188,194,0,0,186,194,0,0,184,194,0,0,182,194,0,0,180,194,0,0,178,194,0,0,176,194,0,0,174,194,0,0,172,194,0,0,170,194,0,0,168,194,0,0,166,194,0,0,164,194,0,0,162,194,0,0,160,194,0,0,158,194,0,0,156,194,0,0,154,194,0,0,152,194,0,0,150,194,0,0,148,194,0,0,146,194,0,0,144,194,0,0,142,194,0,0,140,194,0,0,138,194,0,0,136,194,0,0,134,194,0,0,132,194,0,0,130,194,0,0,128,194,0,0,124,194,0,0,120,194,0,0,116,194,0,0,112,194,0,0,108,194,0,0,104,194,0,0,100,194,0,0,96,194,0,0,92,194,0,0,88,194,0,0,84,194,0,0,80,194,0,0,76,194,0,0,72,194,0,0,68,194,0,0,64,194,0,0,60,194,0,0,56,194,0,0,52,194,0,0,48,194,0,0,44,194,0,0,40,194,0,0,36,194,0,0,32,194,0,0,28,194,0,0,24,194,0,0,20,194,0,0,16,194,0,0,12,194,0,0,8,194,0,0,4,194,0,0,0,194,0,0,248,193,0,0,240,193,0,0,232,193,0,0,224,193,0,0,216,193,0,0,208,193,0,0,200,193,0,0,192,193,0,0,184,193,0,0,176,193,0,0,168,193,0,0,160,193,0,0,152,193,0,0,144,193,0,0,136,193,0,0,128,193,0,0,112,193,0,0,96,193,0,0,80,193,0,0,64,193,0,0,48,193,0,0,32,193,0,0,16,193,0,0,0,193,0,0,224,192,0,0,192,192,0,0,160,192,0,0,128,192,0,0,64,192,0,0,0,192,0,0,128,191,0,0,0,0,0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,224,64,0,0,0,65,0,0,16,65,0,0,32,65,0,0,48,65,0,0,64,65,0,0,80,65,0,0,96,65,0,0,112,65,0,0,128,65,0,0,136,65,0,0,144,65,0,0,152,65,0,0,160,65,0,0,168,65,0,0,176,65,0,0,184,65,0,0,192,65,0,0,200,65,0,0,208,65,0,0,216,65,0,0,224,65,0,0,232,65,0,0,240,65,0,0,248,65,0,0,0,66,0,0,4,66,0,0,8,66,0,0,12,66,0,0,16,66,0,0,20,66,0,0,24,66,0,0,28,66,0,0,32,66,0,0,36,66,0,0,40,66,0,0,44,66,0,0,48,66,0,0,52,66,0,0,56,66,0,0,60,66,0,0,64,66,0,0,68,66,0,0,72,66,0,0,76,66,0,0,80,66,0,0,84,66,0,0,88,66,0,0,92,66,0,0,96,66,0,0,100,66,0,0,104,66,0,0,108,66,0,0,112,66,0,0,116,66,0,0,120,66,0,0,124,66,0,0,128,66,0,0,130,66,0,0,132,66,0,0,134,66,0,0,136,66,0,0,138,66,0,0,140,66,0,0,142,66,0,0,144,66,0,0,146,66,0,0,148,66,0,0,150,66,0,0,152,66,0,0,154,66,0,0,156,66,0,0,158,66,0,0,160,66,0,0,162,66,0,0,164,66,0,0,166,66,0,0,168,66,0,0,170,66,0,0,172,66,0,0,174,66,0,0,176,66,0,0,178,66,0,0,180,66,0,0,182,66,0,0,184,66,0,0,186,66,0,0,188,66,0,0,190,66,0,0,192,66,0,0,194,66,0,0,196,66,0,0,198,66,0,0,200,66,0,0,202,66,0,0,204,66,0,0,206,66,0,0,208,66,0,0,210,66,0,0,212,66,0,0,214,66,0,0,216,66,0,0,218,66,0,0,220,66,0,0,222,66,0,0,224,66,0,0,226,66,0,0,228,66,0,0,230,66,0,0,232,66,0,0,234,66,0,0,236,66,0,0,238,66,0,0,240,66,0,0,242,66,0,0,244,66,0,0,246,66,0,0,248,66,0,0,250,66,0,0,252,66,0,0,254,66,0,0,0,67,0,0,1,67,0,0,2,67,0,0,3,67,0,0,4,67,0,0,5,67,0,0,6,67,0,0,7,67,0,0,8,67,0,0,9,67,0,0,10,67,0,0,11,67,0,0,12,67,0,0,13,67,0,0,14,67,0,0,15,67,0,0,16,67,0,0,17,67,0,0,18,67,0,0,19,67,0,0,20,67,0,0,21,67,0,0,22,67,0,0,23,67,0,0,24,67,0,0,25,67,0,0,26,67,0,0,27,67,0,0,28,67,0,0,29,67,0,0,30,67,0,0,31,67,0,0,32,67,0,0,33,67,0,0,34,67,0,0,35,67,0,0,36,67,0,0,37,67,0,0,38,67,0,0,39,67,0,0,40,67,0,0,41,67,0,0,42,67,0,0,43,67,0,0,44,67,0,0,45,67,0,0,46,67,0,0,47,67,0,0,48,67,0,0,49,67,0,0,50,67,0,0,51,67,0,0,52,67,0,0,53,67,0,0,54,67,0,0,55,67,0,0,56,67,0,0,57,67,0,0,58,67,0,0,59,67,0,0,60,67,0,0,61,67,0,0,62,67,0,0,63,67,0,0,64,67,0,0,65,67,0,0,66,67,0,0,67,67,0,0,68,67,0,0,69,67,0,0,70,67,0,0,71,67,0,0,72,67,0,0,73,67,0,0,74,67,0,0,75,67,0,0,76,67,0,0,77,67,0,0,78,67,0,0,79,67,0,0,80,67,0,0,81,67,0,0,82,67,0,0,83,67,0,0,84,67,0,0,85,67,0,0,86,67,0,0,87,67,0,0,88,67,0,0,89,67,0,0,90,67,0,0,91,67,0,0,92,67,0,0,93,67,0,0,94,67,0,0,95,67,0,0,96,67,0,0,97,67,0,0,98,67,0,0,99,67,0,0,100,67,0,0,101,67,0,0,102,67,0,0,103,67,0,0,104,67,0,0,105,67,0,0,106,67,0,0,107,67,0,0,108,67,0,0,109,67,0,0,110,67,0,0,111,67,0,0,112,67,0,0,113,67,0,0,114,67,0,0,115,67,0,0,116,67,0,0,117,67,0,0,118,67,0,0,119,67,0,0,120,67,0,0,121,67,0,0,122,67,0,0,123,67,0,0,124,67,0,0,125,67,0,0,126,67,0,0,127,67,0,0,128,67,0,128,128,67,0,0,129,67,0,128,129,67,0,0,130,67,0,128,130,67,0,0,131,67,0,128,131,67,0,0,132,67,0,128,132,67,0,0,133,67,0,128,133,67,0,0,134,67,0,128,134,67,0,0,135,67,0,128,135,67,0,0,136,67,0,128,136,67,0,0,137,67,0,128,137,67,0,0,138,67,0,128,138,67,0,0,139,67,0,128,139,67,0,0,140,67,0,128,140,67,0,0,141,67,0,128,141,67,0,0,142,67,0,128,142,67,0,0,143,67,0,128,143,67,0,0,144,67,0,128,144,67,0,0,145,67,0,128,145,67,0,0,146,67,0,128,146,67,0,0,147,67,0,128,147,67,0,0,148,67,0,128,148,67,0,0,149,67,0,128,149,67,0,0,150,67,0,128,150,67,0,0,151,67,0,128,151,67,0,0,152,67,0,128,152,67,0,0,153,67,0,128,153,67,0,0,154,67,0,128,154,67,0,0,155,67,0,128,155,67,0,0,156,67,0,128,156,67,0,0,157,67,0,128,157,67,0,0,158,67,0,128,158,67,0,0,159,67,0,128,159,67,0,0,160,67,0,128,160,67,0,0,161,67,0,128,161,67,0,0,162,67,0,128,162,67,0,0,163,67,0,128,163,67,0,0,164,67,0,128,164,67,0,0,165,67,0,128,165,67,0,0,166,67,0,128,166,67,0,0,167,67,0,128,167,67,0,0,168,67,0,128,168,67,0,0,169,67,0,128,169,67,0,0,170,67,0,128,170,67,0,0,171,67,0,128,171,67,0,0,172,67,0,128,172,67,0,0,173,67,0,128,173,67,0,0,174,67,0,128,174,67,0,0,175,67,0,128,175,67,0,0,176,67,0,128,176,67,0,0,177,67,0,128,177,67,0,0,178,67,0,128,178,67,0,0,179,67,0,128,179,67,0,0,180,67,0,128,180,67,0,0,181,67,0,128,181,67,0,0,182,67,0,128,182,67,0,0,183,67,0,128,183,67,0,0,184,67,0,128,184,67,0,0,185,67,0,128,185,67,0,0,186,67,0,128,186,67,0,0,187,67,0,128,187,67,0,0,188,67,0,128,188,67,0,0,189,67,0,128,189,67,0,0,190,67,0,128,190,67,0,0,191,67,0,128,191,67,0,0,192,67,0,128,192,67,0,0,193,67,0,128,193,67,0,0,194,67,0,128,194,67,0,0,195,67,0,128,195,67,0,0,196,67,0,128,196,67,0,0,197,67,0,128,197,67,0,0,198,67,0,128,198,67,0,0,199,67,0,128,199,67,0,0,200,67,0,128,200,67,0,0,201,67,0,128,201,67,0,0,202,67,0,128,202,67,0,0,203,67,0,128,203,67,0,0,204,67,0,128,204,67,0,0,205,67,0,128,205,67,0,0,206,67,0,128,206,67,0,0,207,67,0,128,207,67,0,0,208,67,0,128,208,67,0,0,209,67,0,128,209,67,0,0,210,67,0,128,210,67,0,0,211,67,0,128,211,67,0,0,212,67,0,128,212,67,0,0,213,67,0,128,213,67,0,0,214,67,0,128,214,67,0,0,215,67,0,128,215,67,0,0,216,67,0,128,216,67,0,0,217,67,0,128,217,67,0,0,218,67,0,128,218,67,0,0,219,67,0,128,219,67,0,0,220,67,0,128,220,67,0,0,221,67,0,128,221,67,0,0,222,67,0,128,222,67,0,0,223,67,0,128,223,67,0,0,224,67,0,128,224,67,0,0,225,67,0,128,225,67,0,0,226,67,0,128,226,67,0,0,227,67,0,128,227,67,0,0,228,67,0,128,228,67,0,0,229,67,0,128,229,67,0,0,230,67,0,128,230,67,0,0,231,67,0,128,231,67,0,0,232,67,0,128,232,67,0,0,233,67,0,128,233,67,0,0,234,67,0,128,234,67,0,0,235,67,0,128,235,67,0,0,236,67,0,128,236,67,0,0,237,67,0,128,237,67,0,0,238,67,0,128,238,67,0,0,239,67,0,128,239,67,0,0,240,67,0,128,240,67,0,0,241,67,0,128,241,67,0,0,242,67,0,128,242,67,0,0,243,67,0,128,243,67,0,0,244,67,0,128,244,67,0,0,245,67,0,128,245,67,0,0,246,67,0,128,246,67,0,0,247,67,0,128,247,67,0,0,248,67,0,128,248,67,0,0,249,67,0,128,249,67,0,0,250,67,0,128,250,67,0,0,251,67,0,128,251,67,0,0,252,67,0,128,252,67,0,0,253,67,0,128,253,67,0,0,254,67,0,128,254,67,0,0,255,67,0,128,255,67,0,0,0,195,0,0,254,194,0,0,252,194,0,0,250,194,0,0,248,194,0,0,246,194,0,0,244,194,0,0,242,194,0,0,240,194,0,0,238,194,0,0,236,194,0,0,234,194,0,0,232,194,0,0,230,194,0,0,228,194,0,0,226,194,0,0,224,194,0,0,222,194,0,0,220,194,0,0,218,194,0,0,216,194,0,0,214,194,0,0,212,194,0,0,210,194,0,0,208,194,0,0,206,194,0,0,204,194,0,0,202,194,0,0,200,194,0,0,198,194,0,0,196,194,0,0,194,194,0,0,192,194,0,0,190,194,0,0,188,194,0,0,186,194,0,0,184,194,0,0,182,194,0,0,180,194,0,0,178,194,0,0,176,194,0,0,174,194,0,0,172,194,0,0,170,194,0,0,168,194,0,0,166,194,0,0,164,194,0,0,162,194,0,0,160,194,0,0,158,194,0,0,156,194,0,0,154,194,0,0,152,194,0,0,150,194,0,0,148,194,0,0,146,194,0,0,144,194,0,0,142,194,0,0,140,194,0,0,138,194,0,0,136,194,0,0,134,194,0,0,132,194,0,0,130,194,0,0,128,194,0,0,124,194,0,0,120,194,0,0,116,194,0,0,112,194,0,0,108,194,0,0,104,194,0,0,100,194,0,0,96,194,0,0,92,194,0,0,88,194,0,0,84,194,0,0,80,194,0,0,76,194,0,0,72,194,0,0,68,194,0,0,64,194,0,0,60,194,0,0,56,194,0,0,52,194,0,0,48,194,0,0,44,194,0,0,40,194,0,0,36,194,0,0,32,194,0,0,28,194,0,0,24,194,0,0,20,194,0,0,16,194,0,0,12,194,0,0,8,194,0,0,4,194,0,0,0,194,0,0,248,193,0,0,240,193,0,0,232,193,0,0,224,193,0,0,216,193,0,0,208,193,0,0,200,193,0,0,192,193,0,0,184,193,0,0,176,193,0,0,168,193,0,0,160,193,0,0,152,193,0,0,144,193,0,0,136,193,0,0,128,193,0,0,112,193,0,0,96,193,0,0,80,193,0,0,64,193,0,0,48,193,0,0,32,193,0,0,16,193,0,0,0,193,0,0,224,192,0,0,192,192,0,0,160,192,0,0,128,192,0,0,64,192,0,0,0,192,0,0,128,191,0,0,0,0,0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,224,64,0,0,0,65,0,0,16,65,0,0,32,65,0,0,48,65,0,0,64,65,0,0,80,65,0,0,96,65,0,0,112,65,0,0,128,65,0,0,136,65,0,0,144,65,0,0,152,65,0,0,160,65,0,0,168,65,0,0,176,65,0,0,184,65,0,0,192,65,0,0,200,65,0,0,208,65,0,0,216,65,0,0,224,65,0,0,232,65,0,0,240,65,0,0,248,65,0,0,0,66,0,0,4,66,0,0,8,66,0,0,12,66,0,0,16,66,0,0,20,66,0,0,24,66,0,0,28,66,0,0,32,66,0,0,36,66,0,0,40,66,0,0,44,66,0,0,48,66,0,0,52,66,0,0,56,66,0,0,60,66,0,0,64,66,0,0,68,66,0,0,72,66,0,0,76,66,0,0,80,66,0,0,84,66,0,0,88,66,0,0,92,66,0,0,96,66,0,0,100,66,0,0,104,66,0,0,108,66,0,0,112,66,0,0,116,66,0,0,120,66,0,0,124,66,0,0,128,66,0,0,130,66,0,0,132,66,0,0,134,66,0,0,136,66,0,0,138,66,0,0,140,66,0,0,142,66,0,0,144,66,0,0,146,66,0,0,148,66,0,0,150,66,0,0,152,66,0,0,154,66,0,0,156,66,0,0,158,66,0,0,160,66,0,0,162,66,0,0,164,66,0,0,166,66,0,0,168,66,0,0,170,66,0,0,172,66,0,0,174,66,0,0,176,66,0,0,178,66,0,0,180,66,0,0,182,66,0,0,184,66,0,0,186,66,0,0,188,66,0,0,190,66,0,0,192,66,0,0,194,66,0,0,196,66,0,0,198,66,0,0,200,66,0,0,202,66,0,0,204,66,0,0,206,66,0,0,208,66,0,0,210,66,0,0,212,66,0,0,214,66,0,0,216,66,0,0,218,66,0,0,220,66,0,0,222,66,0,0,224,66,0,0,226,66,0,0,228,66,0,0,230,66,0,0,232,66,0,0,234,66,0,0,236,66,0,0,238,66,0,0,240,66,0,0,242,66,0,0,244,66,0,0,246,66,0,0,248,66,0,0,250,66,0,0,252,66,0,0,254,66,0,0,0,67,0,0,1,67,0,0,2,67,0,0,3,67,0,0,4,67,0,0,5,67,0,0,6,67,0,0,7,67,0,0,8,67,0,0,9,67,0,0,10,67,0,0,11,67,0,0,12,67,0,0,13,67,0,0,14,67,0,0,15,67,0,0,16,67,0,0,17,67,0,0,18,67,0,0,19,67,0,0,20,67,0,0,21,67,0,0,22,67,0,0,23,67,0,0,24,67,0,0,25,67,0,0,26,67,0,0,27,67,0,0,28,67,0,0,29,67,0,0,30,67,0,0,31,67,0,0,32,67,0,0,33,67,0,0,34,67,0,0,35,67,0,0,36,67,0,0,37,67,0,0,38,67,0,0,39,67,0,0,40,67,0,0,41,67,0,0,42,67,0,0,43,67,0,0,44,67,0,0,45,67,0,0,46,67,0,0,47,67,0,0,48,67,0,0,49,67,0,0,50,67,0,0,51,67,0,0,52,67,0,0,53,67,0,0,54,67,0,0,55,67,0,0,56,67,0,0,57,67,0,0,58,67,0,0,59,67,0,0,60,67,0,0,61,67,0,0,62,67,0,0,63,67,0,0,64,67,0,0,65,67,0,0,66,67,0,0,67,67,0,0,68,67,0,0,69,67,0,0,70,67,0,0,71,67,0,0,72,67,0,0,73,67,0,0,74,67,0,0,75,67,0,0,76,67,0,0,77,67,0,0,78,67,0,0,79,67,0,0,80,67,0,0,81,67,0,0,82,67,0,0,83,67,0,0,84,67,0,0,85,67,0,0,86,67,0,0,87,67,0,0,88,67,0,0,89,67,0,0,90,67,0,0,91,67,0,0,92,67,0,0,93,67,0,0,94,67,0,0,95,67,0,0,96,67,0,0,97,67,0,0,98,67,0,0,99,67,0,0,100,67,0,0,101,67,0,0,102,67,0,0,103,67,0,0,104,67,0,0,105,67,0,0,106,67,0,0,107,67,0,0,108,67,0,0,109,67,0,0,110,67,0,0,111,67,0,0,112,67,0,0,113,67,0,0,114,67,0,0,115,67,0,0,116,67,0,0,117,67,0,0,118,67,0,0,119,67,0,0,120,67,0,0,121,67,0,0,122,67,0,0,123,67,0,0,124,67,0,0,125,67,0,0,126,67,0,0,127,67,99,118,78,101,120,116,84,114,101,101,78,111,100,101,0,0,105,99,118,73,110,105,116,84,114,101,101,78,111,100,101,73,116,101,114,97,116,111,114,0,99,118,70,108,105,112,0,0,99,118,67,108,111,110,101,71,114,97,112,104,0,0,0,0,99,118,71,101,116,77,97,116,0,0,0,0,0,0,0,0,99,118,77,101,109,83,116,111,114,97,103,101,65,108,108,111,99,0,0,0,0,0,0,0,99,118,82,101,97,100,0,0,99,118,71,114,97,112,104,65,100,100,69,100,103,101,66,121,80,116,114,0,0,0,0,0,99,118,82,101,115,116,111,114,101,77,101,109,83,116,111,114,97,103,101,80,111,115,0,0,99,118,73,110,105,116,77,97,116,72,101,97,100,101,114,0,99,118,85,110,114,101,103,105,115,116,101,114,84,121,112,101,0,0,0,0,0,0,0,0,99,118,70,105,110,100,71,114,97,112,104,69,100,103,101,66,121,80,116,114,0,0,0,0,99,118,80,116,114,78,68,0,99,118,82,101,103,105,115,116,101,114,84,121,112,101,0,0,99,118,71,114,97,112,104,65,100,100,86,116,120,0,0,0,99,118,80,116,114,50,68,0,99,118,67,108,101,97,116,101,71,114,97,112,104,0,0,0,99,118,83,97,118,101,77,101,109,83,116,111,114,97,103,101,80,111,115,0,0,0,0,0,99,118,67,108,101,97,114,83,101,116,0,0,0,0,0,0,99,118,83,101,116,65,100,100,0,0,0,0,0,0,0,0,99,118,77,101,114,103,101,0,99,118,67,114,101,97,116,101,83,101,116,0,0,0,0,0,99,118,71,101,116,83,105,122,101,0,0,0,0,0,0,0,99,118,83,101,113,83,111,114,116,0,0,0,0,0,0,0,99,118,71,101,116,68,105,109,115,0,0,0,0,0,0,0,99,118,71,101,116,69,108,101,109,84,121,112,101,0,0,0,99,118,70,114,101,101,95,0,99,118,82,101,97,100,82,97,119,68,97,116,97,0,0,0,99,118,82,101,108,101,97,115,101,68,97,116,97,0,0,0,99,118,82,101,97,100,82,97,119,68,97,116,97,83,108,105,99,101,0,0,0,0,0,0,99,118,82,101,108,101,97,115,101,77,101,109,83,116,111,114,97,103,101,0,0,0,0,0,99,118,83,101,113,83,108,105,99,101,0,0,0,0,0,0,99,118,67,114,101,97,116,101,68,97,116,97,0,0,0,0,99,118,83,116,97,114,116,82,101,97,100,82,97,119,68,97,116,97,0,0,0,0,0,0,99,118,67,108,101,97,114,83,101,113,0,0,0,0,0,0,99,118,83,101,113,80,111,112,77,117,108,116,105,0,0,0,99,118,67,114,101,97,116,101,77,97,116,72,101,97,100,101,114,0,0,0,0,0,0,0,99,118,87,114,105,116,101,82,97,119,68,97,116,97,0,0,99,118,67,108,111,110,101,83,112,97,114,115,101,77,97,116,0,0,0,0,0,0,0,0,99,118,83,101,113,80,117,115,104,77,117,108,116,105,0,0,99,118,82,101,108,101,97,115,101,83,112,97,114,115,101,77,97,116,0,0,0,0,0,0,99,118,87,114,105,116,101,83,116,114,105,110,103,0,0,0,99,118,67,114,101,97,116,101,83,112,97,114,115,101,77,97,116,0,0,0,0,0,0,0,99,118,67,111,110,118,101,114,116,73,109,97,103,101,0,0,99,118,87,114,105,116,101,73,110,116,0,0,0,0,0,0,99,118,69,110,100,87,114,105,116,101,83,116,114,117,99,116,0,0,0,0,0,0,0,0,99,118,83,116,97,114,116,87,114,105,116,101,83,116,114,117,99,116,0,0,0,0,0,0,99,118,83,101,113,80,117,115,104,0,0,0,0,0,0,0,99,118,67,114,101,97,116,101,77,101,109,83,116,111,114,97,103,101,0,0,0,0,0,0,99,118,83,101,116,83,101,113,82,101,97,100,101,114,80,111,115,0,0,0,0,0,0,0,99,118,71,101,116,83,101,113,82,101,97,100,101,114,80,111,115,0,0,0,0,0,0,0,99,118,67,111,112,121,0,0,99,118,67,104,97,110,103,101,83,101,113,66,108,111,99,107,0,0,0,0,0,0,0,0,99,118,83,116,97,114,116,82,101,97,100,83,101,113,0,0,99,118,83,112,108,105,116,0,99,118,73,110,105,116,65,114,114,97,121,79,112,0,0,0,99,118,83,97,118,101,73,109,97,103,101,0,0,0,0,0,99,118,67,111,110,118,101,114,116,83,99,97,108,101,0,0,99,118,67,114,101,97,116,101,77,97,116,0,0,0,0,0,99,118,67,108,111,110,101,77,97,116,78,68,0,0,0,0,99,118,67,114,101,97,116,101,77,97,116,78,68,72,101,97,100,101,114,0,0,0,0,0,99,118,67,114,101,97,116,101,77,97,116,78,68,0,0,0,99,118,65,108,108,111,99,0,99,118,83,101,116,83,101,113,66,108,111,99,107,83,105,122,101,0,0,0,0,0,0,0,99,118,67,114,101,97,116,101,83,101,113,0,0,0,0,0,99,118,67,108,111,110,101,73,109,97,103,101,0,0,0,0,99,118,83,101,116,73,109,97,103,101,67,79,73,0,0,0,99,118,73,110,105,116,77,97,116,78,68,72,101,97,100,101,114,0,0,0,0,0,0,0,99,118,83,101,116,73,109,97,103,101,82,79,73,0,0,0,99,118,82,101,108,101,97,115,101,73,109,97,103,101,0,0,99,118,82,101,108,101,97,115,101,73,109,97,103,101,72,101,97,100,101,114,0,0,0,0,99,118,73,110,105,116,73,109,97,103,101,72,101,97,100,101,114,0,0,0,0,0,0,0,99,118,67,114,101,97,116,101,73,109,97,103,101,0,0,0,99,118,67,114,101,97,116,101,73,109,97,103,101,72,101,97,100,101,114,0,0,0,0,0,99,118,67,108,111,110,101,77,97,116,0,0,0,0,0,0,99,118,82,101,115,105,122,101,0,0,0,0,0,0,0,0,99,118,71,101,116,70,105,108,101,78,111,100,101,66,121,78,97,109,101,0,0,0,0,0,99,118,82,101,108,101,97,115,101,77,97,116,0,0,0,0,99,118,67,118,116,67,111,108,111,114,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,255,255,1,0,255,255,3,0,255,255,7,0,255,255,15,0,255,255,31,0,255,255,63,0,255,255,127,0,255,255,255,0,255,255,255,1,255,255,255,3,255,255,255,7,255,255,255,15,255,255,255,31,255,255,255,63,255,255,255,127,255,255,255,255,0,0,0,0,84,104,101,32,109,97,116,114,105,120,32,100,97,116,97,32,105,115,32,110,111,116,32,102,111,117,110,100,32,105,110,32,102,105,108,101,32,115,116,111,114,97,103,101,0,0,0,0,67,111,117,108,100,32,110,111,116,32,100,101,116,101,114,109,105,110,101,32,116,104,101,32,109,97,116,114,105,120,32,100,105,109,101,110,115,105,111,110,97,108,105,116,121,0,0,0,83,111,109,101,32,111,102,32,101,115,115,101,110,116,105,97,108,32,109,97,116,114,105,120,32,97,116,116,114,105,98,117,116,101,115,32,97,114,101,32,97,98,115,101,110,116,0,0,84,104,101,32,115,101,113,117,101,110,99,101,32,104,97,115,32,78,85,76,76,32,115,116,111,114,97,103,101,32,112,111,105,110,116,101,114,0,0,0,37,100,37,99,0,0,0,0,100,97,116,97,0,0,0,0,78,85,76,76,32,105,116,101,114,97,116,111,114,32,112,111,105,110,116,101,114,0,0,0,100,116,0,0,0,0,0,0,85,110,115,112,101,99,105,102,105,101,100,32,101,114,114,111,114,0,0,0,0,0,0,0,78,85,76,76,32,115,116,111,114,97,103,101,32,112,111,105,110,116,101,114,0,0,0,0,105,0,0,0,0,0,0,0,115,105,122,101,115,0,0,0,78,111,110,45,112,111,115,105,116,105,118,101,32,99,111,108,115,32,111,114,32,114,111,119,115,0,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,111,114,32,117,110,115,117,112,112,111,114,116,101,100,32,97,114,114,97,121,32,116,121,112,101,0,0,73,110,112,117,116,32,97,114,114,97,121,32,104,97,115,32,78,85,76,76,32,100,97,116,97,32,112,111,105,110,116,101,114,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,0,0,0,0,0,0,0,0,80,105,120,101,108,32,111,114,100,101,114,32,115,104,111,117,108,100,32,98,101,32,117,115,101,100,32,119,105,116,104,32,99,111,105,32,61,61,32,48,0,0,0,0,0,0,0,0,79,112,101,110,67,86,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,0,0,84,104,101,32,105,109,97,103,101,32,105,115,32,105,110,116,101,114,108,101,97,118,101,100,32,97,110,100,32,104,97,115,32,111,118,101,114,32,67,86,95,67,78,95,77,65,88,32,99,104,97,110,110,101,108,115,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,103,114,97,112,104,32,112,111,105,110,116,101,114,0,0,0,73,109,97,103,101,115,32,119,105,116,104,32,112,108,97,110,97,114,32,100,97,116,97,32,108,97,121,111,117,116,32,115,104,111,117,108,100,32,98,101,32,117,115,101,100,32,119,105,116,104,32,67,79,73,32,115,101,108,101,99,116,101,100,0,84,104,101,32,105,109,97,103,101,32,104,97,115,32,78,85,76,76,32,100,97,116,97,32,112,111,105,110,116,101,114,0,84,104,101,32,109,97,116,114,105,120,32,104,97,115,32,78,85,76,76,32,100,97,116,97,32,112,111,105,110,116,101,114,0,0,0,0,0,0,0,0,84,104,101,32,110,111,100,101,32,105,115,32,110,101,105,116,104,101,114,32,97,32,109,97,112,32,110,111,114,32,97,110,32,101,109,112,116,121,32,99,111,108,108,101,99,116,105,111,110,0,0,0,0,0,0,0,78,85,76,76,32,97,114,114,97,121,32,112,111,105,110,116,101,114,32,105,115,32,112,97,115,115,101,100,0,0,0,0,66,97,99,107,116,114,97,99,101,0,0,0,0,0,0,0,83,117,110,32,114,97,115,116,101,114,32,102,105,108,101,115,32,40,42,46,115,114,59,42,46,114,97,115,41,0,0,0,85,110,107,110,111,119,110,47,117,110,115,117,112,112,111,114,116,101,100,32,99,111,108,111,114,32,99,111,110,118,101,114,115,105,111,110,32,99,111,100,101,0,0,0,0,0,0,0,84,104,101,32,110,111,100,101,32,100,111,101,115,32,110,111,116,32,114,101,112,114,101,115,101,110,116,32,97,32,117,115,101,114,32,111,98,106,101,99,116,32,40,117,110,107,110,111,119,110,32,116,121,112,101,63,41,0,0,0,0,0,0,0,118,101,114,116,101,120,32,112,111,105,110,116,101,114,115,32,99,111,105,110,115,105,100,101,32,40,111,114,32,115,101,116,32,116,111,32,78,85,76,76,41,0,0,0,0,0,0,0,78,111,32,69,114,114,111,114,0,0,0,0,0,0,0,0,99,111,105,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,78,85,76,76,32,100,111,117,98,108,101,32,112,111,105,110,116,101,114,0,0,0,0,0,69,105,116,104,101,114,32,97,108,108,32,105,110,112,117,116,32,112,108,97,110,101,115,32,111,114,32,111,110,108,121,32,111,110,101,32,105,110,112,117,116,32,112,108,97,110,101,32,115,104,111,117,108,100,32,98,101,32,110,111,110,32,122,101,114,111,0,0,0,0,0,0,103,114,97,112,104,32,112,111,105,110,116,101,114,32,105,115,32,78,85,76,76,0,0,0,66,97,121,101,114,32,112,97,116,116,101,114,110,32,99,97,110,32,98,101,32,99,111,110,118,101,114,116,101,100,32,111,110,108,121,32,116,111,32,56,45,98,105,116,32,51,45,99,104,97,110,110,101,108,32,66,71,82,47,82,71,66,32,105,109,97,103,101,0,0,0,0,84,121,112,101,32,110,97,109,101,32,115,104,111,117,108,100,32,99,111,110,116,97,105,110,32,111,110,108,121,32,108,101,116,116,101,114,115,44,32,100,105,103,105,116,115,44,32,45,32,97,110,100,32,95,0,0,78,85,76,76,32,112,111,105,110,116,101,114,32,116,111,32,105,110,100,105,99,101,115,0,255,216,255,0,0,0,0,0,84,121,112,101,32,110,97,109,101,32,115,104,111,117,108,100,32,115,116,97,114,116,32,119,105,116,104,32,97,32,108,101,116,116,101,114,32,111,114,32,95,0,0,0,0,0,0,0,83,111,109,101,32,111,102,32,114,101,113,117,105,114,101,100,32,102,117,110,99,116,105,111,110,32,112,111,105,110,116,101,114,115,32,40,105,115,95,105,110,115,116,97,110,99,101,44,32,114,101,108,101,97,115,101,44,32,114,101,97,100,32,111,114,32,119,114,105,116,101,41,32,97,114,101,32,78,85,76,76,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,116,121,112,101,32,105,110,102,111,0,0,0,0,0,0,0,67,79,73,32,109,117,115,116,32,98,101,32,110,111,110,45,110,117,108,108,32,105,110,32,99,97,115,101,32,111,102,32,112,108,97,110,97,114,32,105,109,97,103,101,115,0,0,0,73,110,118,97,108,105,100,32,112,111,105,110,116,101,114,32,116,111,32,102,105,108,101,32,115,116,111,114,97,103,101,0,87,105,110,100,111,119,115,32,98,105,116,109,97,112,32,40,42,46,98,109,112,59,42,46,100,105,98,41,0,0,0,0,111,112,101,110,99,118,45,110,100,45,109,97,116,114,105,120,0,0,0,0,0,0,0,0,105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,84,101,114,109,105,110,97,116,105,110,103,32,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,46,46,46,10,0,99,111,117,108,100,32,110,111,116,32,115,97,118,101,32,116,104,101,32,105,109,97,103,101,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,109,97,116,114,105,120,32,116,121,112,101,0,0,0,0,0,111,112,101,110,99,118,45,109,97,116,114,105,120,0,0,0,68,101,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,0,0,0,0,0,0,111,112,101,110,99,118,45,105,109,97,103,101,0,0,0,0,114,98,0,0,0,0,0,0,67,111,110,118,101,114,115,105,111,110,32,116,111,47,102,114,111,109,32,49,54,45,98,105,116,32,112,97,99,107,101,100,32,66,71,82,32,102,111,114,109,97,116,32,105,115,32,111,110,108,121,32,112,111,115,115,105,98,108,101,32,102,111,114,32,56,45,98,105,116,32,105,109,97,103,101,115,32,40,56,56,56,32,66,71,82,47,66,71,82,32,111,114,32,56,56,56,56,32,66,71,82,65,47,66,71,82,65,41,0,0,0,111,112,101,110,99,118,45,115,112,97,114,115,101,45,109,97,116,114,105,120,0,0,0,0,111,112,101,110,99,118,45,103,114,97,112,104,0,0,0,0,65,114,114,97,121,32,115,104,111,117,108,100,32,98,101,32,67,118,77,97,116,32,111,114,32,73,112,108,73,109,97,103,101,0,0,0,0,0,0,0,99,118,83,104,111,119,73,109,97,103,101,0,0,0,0,0,111,112,101,110,99,118,45,115,101,113,117,101,110,99,101,45,116,114,101,101,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,99,111,109,98,105,110,97,116,105,111,110,32,111,102,32,105,110,112,117,116,47,111,117,116,112,117,116,32,102,111,114,109,97,116,115,0,78,117,108,108,32,99,111,109,112,97,114,101,32,102,117,110,99,116,105,111,110,0,0,0,66,97,100,32,105,110,112,117,116,32,115,101,113,117,101,110,99,101,0,0,0,0,0,0,99,111,117,108,100,32,110,111,116,32,102,105,110,100,32,97,32,102,105,108,116,101,114,32,102,111,114,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,120,116,101,110,115,105,111,110,0,0,0,0,0,78,111,110,45,112,111,115,105,116,105,118,101,32,119,105,100,116,104,32,111,114,32,104,101,105,103,104,116,0,0,0,0,111,112,101,110,99,118,45,115,101,113,117,101,110,99,101,0,78,117,108,108,32,112,111,105,110,116,101,114,115,32,116,111,32,115,111,117,114,99,101,32,102,105,108,101,32,110,111,100,101,32,111,114,32,100,101,115,116,105,110,97,116,105,111,110,32,97,114,114,97,121,0,0,67,111,110,118,101,114,115,105,111,110,32,116,111,47,102,114,111,109,32,49,54,45,98,105,116,32,112,97,99,107,101,100,32,66,71,82,32,102,111,114,109,97,116,32,105,115,32,111,110,108,121,32,112,111,115,115,105,98,108,101,32,102,111,114,32,56,45,98,105,116,32,105,109,97,103,101,115,32,40,56,45,98,105,116,32,103,114,97,121,115,99,97,108,101,44,32,56,56,56,32,66,71,82,47,66,71,82,32,111,114,32,56,56,56,56,32,66,71,82,65,47,66,71,82,65,41,0,0,79,110,108,121,32,99,111,110,116,105,110,117,111,117,115,32,110,68,32,97,114,114,97,121,115,32,97,114,101,32,115,117,112,112,111,114,116,101,100,32,104,101,114,101,0,0,0,0,84,104,101,32,115,101,113,117,101,110,99,101,32,115,108,105,99,101,32,100,111,101,115,32,110,111,116,32,102,105,116,32,97,110,32,105,110,116,101,103,101,114,32,110,117,109,98,101,114,32,111,102,32,114,101,99,111,114,100,115,0,0,0,0,67,111,110,118,101,114,115,105,111,110,32,116,111,47,102,114,111,109,32,49,54,45,98,105,116,32,112,97,99,107,101,100,32,82,71,66,32,102,111,114,109,97,116,32,105,115,32,111,110,108,121,32,112,111,115,115,105,98,108,101,32,102,111,114,32,56,45,98,105,116,32,105,109,97,103,101,115,32,40,56,45,98,105,116,32,103,114,97,121,115,99,97,108,101,44,32,56,56,56,32,66,71,82,47,82,71,66,32,111,114,32,56,56,56,56,32,66,71,82,65,47,82,71,66,65,41,0,0,84,104,101,32,115,101,113,117,101,110,99,101,32,101,108,101,109,101,110,116,32,105,115,32,110,111,116,32,97,32,110,117,109,101,114,105,99,97,108,32,115,99,97,108,97,114,0,0,84,104,101,32,114,101,97,100,101,100,32,115,101,113,117,101,110,99,101,32,105,115,32,97,32,115,99,97,108,97,114,44,32,116,104,117,115,32,108,101,110,32,109,117,115,116,32,98,101,32,49,0,0,0,0,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,78,117,108,108,32,112,111,105,110,116,101,114,32,116,111,32,114,101,97,100,101,114,32,111,114,32,100,101,115,116,105,110,97,116,105,111,110,32,97,114,114,97,121,0,0,0,0,0,66,97,100,32,115,101,113,117,101,110,99,101,32,115,108,105,99,101,0,0,0,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,111,114,32,117,110,115,117,112,112,111,114,116,101,100,32,97,114,114,97,121,32,116,121,112,101,0,0,68,101,115,116,105,110,97,116,105,111,110,32,105,109,97,103,101,32,109,117,115,116,32,104,97,118,101,32,49,32,111,114].concat([32,51,32,99,104,97,110,110,101,108,115,0,0,0,0,0,60,117,110,107,110,111,119,110,62,0,0,0,0,0,0,0,84,104,101,32,102,105,108,101,32,110,111,100,101,32,115,104,111,117,108,100,32,98,101,32,97,32,110,117,109,101,114,105,99,97,108,32,115,99,97,108,97,114,32,111,114,32,97,32,115,101,113,117,101,110,99,101,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,101,113,117,101,110,99,101,32,104,101,97,100,101,114,0,68,97,116,97,32,105,115,32,97,108,114,101,97,100,121,32,97,108,108,111,99,97,116,101,100,0,0,0,0,0,0,0,79,112,101,110,67,86,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,0,0,78,117,108,108,32,112,111,105,110,116,101,114,32,116,111,32,115,111,117,114,99,101,32,102,105,108,101,32,110,111,100,101,32,111,114,32,114,101,97,100,101,114,0,0,0,0,0,0,69,105,116,104,101,114,32,97,108,108,32,111,117,116,112,117,116,32,112,108,97,110,101,115,32,111,114,32,111,110,108,121,32,111,110,101,32,111,117,116,112,117,116,32,112,108,97,110,101,32,115,104,111,117,108,100,32,98,101,32,110,111,110,32,122,101,114,111,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,85,110,107,110,111,119,110,47,117,110,115,117,112,112,111,114,116,101,100,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,109,101,116,104,111,100,0,0,0,0,0,0,0,0,78,85,76,76,32,105,116,101,114,97,116,111,114,32,112,111,105,110,116,101,114,0,0,0,78,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,111,102,32,101,108,101,109,101,110,116,115,0,0,0,0,0,73,110,118,97,108,105,100,32,115,112,97,114,115,101,32,109,97,116,114,105,120,32,104,101,97,100,101,114,0,0,0,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,78,117,108,108,32,100,97,116,97,32,112,111,105,110,116,101,114,0,0,0,0,0,0,0,110,117,109,98,101,114,32,111,102,32,114,101,109,111,118,101,100,32,101,108,101,109,101,110,116,115,32,105,115,32,110,101,103,97,116,105,118,101,0,0,73,110,118,97,108,105,100,32,115,112,97,114,115,101,32,97,114,114,97,121,32,104,101,97,100,101,114,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,78,85,76,76,32,115,101,113,117,101,110,99,101,32,112,111,105,110,116,101,114,0,0,0,80,37,99,10,37,100,32,37,100,10,50,53,53,10,0,0,73,110,99,111,114,114,101,99,116,32,110,117,109,98,101,114,32,111,102,32,99,104,97,110,110,101,108,115,32,102,111,114,32,116,104,105,115,32,99,111,110,118,101,114,115,105,111,110,32,99,111,100,101,0,0,0,101,114,114,111,114,0,0,0,98,97,100,32,110,117,109,98,101,114,32,111,102,32,100,105,109,101,110,115,105,111,110,115,0,0,0,0,0,0,0,0,9,99,97,108,108,101,100,32,102,114,111,109,32,0,0,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,115,116,97,116,117,115,0,0,85,110,107,110,111,119,110,32,37,115,32,99,111,100,101,32,37,100,0,0,0,0,0,0,68,105,109,101,110,115,105,111,110,32,115,105,122,101,115,32,97,114,101,32,116,104,101,32,115,97,109,101,32,102,111,114,32,97,108,108,32,97,114,114,97,121,115,0,0,0,0,0,68,101,115,116,105,110,97,116,105,111,110,32,105,109,97,103,101,32,109,117,115,116,32,98,101,32,56,117,0,0,0,0,37,115,44,32,37,115,40,37,100,41,10,0,0,0,0,0,77,101,109,111,114,121,32,98,108,111,99,107,32,104,97,115,32,98,101,101,110,32,99,111,114,114,117,112,116,101,100,0,77,97,115,107,32,115,104,111,117,108,100,32,104,97,118,101,32,56,117,67,49,32,111,114,32,56,115,67,49,32,100,97,116,97,32,116,121,112,101,0,67,79,73,32,43,32,109,97,115,107,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,79,112,101,110,67,86,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,0,0,84,104,101,32,102,117,110,99,116,105,111,110,47,102,101,97,116,117,114,101,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,68,101,112,116,104,32,105,115,32,110,111,116,32,116,104,101,32,115,97,109,101,32,102,111,114,32,97,108,108,32,97,114,114,97,121,115,0,0,0,0,78,101,103,97,116,105,118,101,32,111,114,32,116,111,111,32,108,97,114,103,101,32,97,114,103,117,109,101,110,116,32,111,102,32,99,118,65,108,108,111,99,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,84,104,101,32,102,105,108,101,32,115,116,111,114,97,103,101,32,105,115,32,111,112,101,110,101,100,32,102,111,114,32,114,101,97,100,105,110,103,0,0,79,112,101,110,67,86,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,0,0,80,97,114,115,105,110,103,32,101,114,114,111,114,0,0,0,78,117,109,98,101,114,32,111,102,32,99,104,97,110,110,101,108,115,32,105,115,32,110,111,116,32,116,104,101,32,115,97,109,101,32,102,111,114,32,97,108,108,32,97,114,114,97,121,115,0,0,0,0,0,0,0,66,97,100,32,116,121,112,101,32,111,102,32,109,97,115,107,32,97,114,103,117,109,101,110,116,0,0,0,0,0,0,0,68,97,116,97,32,116,121,112,101,32,105,115,32,110,111,116,32,116,104,101,32,115,97,109,101,32,102,111,114,32,97,108,108,32,97,114,114,97,121,115,0,0,0,0,0,0,0,0,83,97,118,101,58,32,37,115,0,0,0,0,0,0,0,0,66,97,100,32,112,97,114,97,109,101,116,101,114,32,111,102,32,116,121,112,101,32,67,118,80,111,105,110,116,0,0,0,119,98,0,0,0,0,0,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,78,117,109,98,101,114,32,111,102,32,100,105,109,101,110,115,105,111,110,115,32,105,115,32,116,104,101,32,115,97,109,101,32,102,111,114,32,97,108,108,32,97,114,114,97,121,115,0,114,43,98,0,0,0,0,0,66,97,100,32,102,108,97,103,32,40,112,97,114,97,109,101,116,101,114,32,111,114,32,115,116,114,117,99,116,117,114,101,32,102,105,101,108,100,41,0,67,79,73,32,115,101,116,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,0,0,0,0,0,37,52,100,0,0,0,0,0,66,97,100,32,110,117,109,98,101,114,32,111,102,32,99,104,97,110,110,101,108,115,0,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,74,70,73,70,0,0,0,0,73,116,101,114,97,116,111,114,32,112,111,105,110,116,101,114,32,105,115,32,78,85,76,76,0,0,0,0,0,0,0,0,73,110,112,117,116,32,67,79,73,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,83,111,109,101,32,111,102,32,114,101,113,117,105,114,101,100,32,97,114,114,97,121,32,112,111,105,110,116,101,114,115,32,105,115,32,78,85,76,76,0,85,110,115,117,112,112,111,114,116,101,100,32,102,111,114,109,97,116,32,111,114,32,99,111,109,98,105,110,97,116,105,111,110,32,111,102,32,102,111,114,109,97,116,115,0,0,0,0,73,110,99,111,114,114,101,99,116,32,110,117,109,98,101,114,32,111,102,32,97,114,114,97,121,115,0,0,0,0,0,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,110,117,108,108,32,102,105,108,101,110,97,109,101,0,0,0,119,105,110,100,111,119,46,99,112,112,0,0,0,0,0,0,79,110,101,32,111,102,32,97,114,103,117,109,101,110,116,115,39,32,118,97,108,117,101,115,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,0,83,111,117,114,99,101,32,105,109,97,103,101,32,109,117,115,116,32,104,97,118,101,32,49,44,32,51,32,111,114,32,52,32,99,104,97,110,110,101,108,115,0,0,0,0,0,0,0,110,111,32,100,101,115,99,114,105,112,116,105,111,110,0,0,83,105,122,101,115,32,111,102,32,105,110,112,117,116,32,97,114,103,117,109,101,110,116,115,32,100,111,32,110,111,116,32,109,97,116,99,104,0,0,0,66,97,100,32,67,118,77,97,116,78,68,32,104,101,97,100,101,114,0,0,0,0,0,0,108,111,97,100,115,97,118,101,46,99,112,112,0,0,0,0,70,111,114,109,97,116,115,32,111,102,32,105,110,112,117,116,32,97,114,103,117,109,101,110,116,115,32,100,111,32,110,111,116,32,109,97,116,99,104,0,73,110,112,117,116,32,105,109,97,103,101,32,100,101,112,116,104,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,102,117,110,99,116,105,111,110,0,0,82,101,113,117,101,115,116,101,100,32,111,98,106,101,99,116,32,119,97,115,32,110,111,116,32,102,111,117,110,100,0,0,103,114,97,121,46,106,112,103,0,0,0,0,0,0,0,0,73,110,112,108,97,99,101,32,111,112,101,114,97,116,105,111,110,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,84,104,101,32,97,114,114,97,121,32,105,115,32,116,111,111,32,98,105,103,0,0,0,0,114,98,0,0,0,0,0,0,84,73,70,70,32,70,105,108,101,115,32,40,42,46,116,105,102,102,59,42,46,116,105,102,41,0,0,0,0,0,0,0,73,109,97,103,101,32,115,116,101,112,32,105,115,32,119,114,111,110,103,0,0,0,0,0,84,111,111,32,108,111,110,103,32,100,97,116,97,32,116,121,112,101,32,115,112,101,99,105,102,105,99,97,116,105,111,110,0,0,0,0,0,0,0,0,111,110,101,32,111,102,32,100,105,109,101,115,105,111,110,32,115,105,122,101,115,32,105,115,32,110,111,110,45,112,111,115,105,116,105,118,101,0,0,0,73,110,118,97,108,105,100,32,100,97,116,97,32,116,121,112,101,32,115,112,101,99,105,102,105,99,97,116,105,111,110,0,37,46,56,102,0,0,0,0,89,166,106,149,0,0,0,0,37,46,56,101,0,0,0,0,46,73,110,102,0,0,0,0,45,46,73,110,102,0,0,0,46,78,97,110,0,0,0,0,37,46,49,54,102,0,0,0,37,46,49,54,101,0,0,0,80,111,114,116,97,98,108,101,32,105,109,97,103,101,32,102,111,114,109,97,116,32,40,42,46,112,98,109,59,42,46,112,103,109,59,42,46,112,112,109,41,0,0,0,0,0,0,0,37,100,46,0,0,0,0,0,68,105,118,105,122,105,111,110,32,98,121,32,122,101,114,111,32,111,99,99,117,114,101,100,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,105,110,32,116,104,101,32,107,101,121,0,0,0,0,75,101,121,32,115,104,111,117,108,100,32,115,116,97,114,116,32,119,105,116,104,32,97,32,108,101,116,116,101,114,32,111,114,32,95,0,0,0,0,0,67,108,111,115,105,110,103,32,116,97,103,32,115,104,111,117,108,100,32,110,111,116,32,105,110,99,108,117,100,101,32,97,110,121,32,97,116,116,114,105,98,117,116,101,115,0,0,0,65,32,115,105,110,103,108,101,32,95,32,105,115,32,97,32,114,101,115,101,114,118,101,100,32,116,97,103,32,110,97,109,101,0,0,0,0,0,0,0,74,80,69,71,32,102,105,108,101,115,32,40,42,46,106,112,101,103,59,42,46,106,112,103,59,42,46,106,112,101,41,0,110,111,110,45,112,111,115,105,116,105,118,101,32,111,114,32,116,111,111,32,108,97,114,103,101,32,110,117,109,98,101,114,32,111,102,32,100,105,109,101,110,115,105,111,110,115,0,0,101,108,101,109,101,110,116,115,32,119,105,116,104,32,107,101,121,115,32,99,97,110,32,110,111,116,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,115,101,113,117,101,110,99,101,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,111,99,99,117,114,115,32,105,110,32,116,104,101,32,107,101,121,0,0,0,0,0,75,101,121,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,97,32,108,101,116,116,101,114,32,111,114,32,95,0,0,0,0,0,0,0,84,104,101,32,107,101,121,32,105,115,32,116,111,111,32,108,111,110,103,0,0,0,0,0,66,77,0,0,0,0,0,0,84,104,101,32,107,101,121,32,105,115,32,97,110,32,101,109,112,116,121,0,0,0,0,0,65,110,32,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,101,108,101,109,101,110,116,32,119,105,116,104,111,117,116,32,97,32,107,101,121,32,116,111,32,97,32,109,97,112,44,32,111,114,32,97,100,100,32,101,108,101,109,101,110,116,32,119,105,116,104,32,107,101,121,32,116,111,32,115,101,113,117,101,110,99,101,0,0,0,78,117,108,108,32,112,111,105,110,116,101,114,0,0,0,0,83,116,111,114,97,103,101,32,98,108,111,99,107,32,115,105,122,101,32,105,115,32,116,111,111,32,115,109,97,108,108,32,116,111,32,102,105,116,32,116,104,101,32,115,101,113,117,101,110,99,101,32,101,108,101,109,101,110,116,115,0,0,0,0,78,85,76,76,32,60,115,105,122,101,115,62,32,112,111,105,110,116,101,114,0,0,0,0,84,104,101,32,110,117,109,98,101,114,32,111,102,32,115,116,111,114,101,100,32,101,108,101,109,101,110,116,115,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,116,111,32,34,99,111,117,110,116,34,0,79,110,108,121,32,111,110,101,32,111,102,32,34,104,101,97,100,101,114,95,117,115,101,114,95,100,97,116,97,34,44,32,34,114,101,99,116,34,32,97,110,100,32,34,111,114,105,103,105,110,34,32,116,97,103,115,32,109,97,121,32,111,99,99,117,114,0,0,0,0,0,0,84,104,101,32,115,101,113,117,101,110,99,101,32,102,108,97,103,115,32,97,114,101,32,105,110,118,97,108,105,100,0,0,99,111,117,110,116,0,0,0,70,65,76,83,69,0,0,0,70,97,108,115,101,0,0,0,102,97,108,115,101,0,0,0,99,120,112,101,114,115,105,115,116,101,110,99,101,46,99,112,112,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,114,101,99,117,114,115,105,118,101,0,0,0,0,0,0,0,73,110,99,111,114,114,101,99,116,32,115,105,122,101,32,111,102,32,105,110,112,117,116,32,97,114,114,97,121,0,0,0,65,108,108,32,116,104,101,32,115,101,113,117,101,110,99,101,32,116,114,101,101,32,110,111,100,101,115,32,115,104,111,117,108,100,32,99,111,110,116,97,105,110,32,34,108,101,118,101,108,34,32,102,105,101,108,100,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,97,114,114,97,121,32,100,97,116,97,32,116,121,112,101,0,108,101,118,101,108,0,0,0,111,112,101,110,99,118,45,115,101,113,117,101,110,99,101,45,116,114,101,101,32,105,110,115,116,97,110,99,101,32,115,104,111,117,108,100,32,99,111,110,116,97,105,110,32,97,32,102,105,101,108,100,32,34,115,101,113,117,101,110,99,101,115,34,32,116,104,97,116,32,115,104,111,117,108,100,32,98,101,32,97,32,115,101,113,117,101,110,99,101,0,0,0,0,0,0,115,101,113,117,101,110,99,101,115,0,0,0,0,0,0,0,99,118,99,111,108,111,114,46,99,112,112,0,0,0,0,0,68,117,112,108,105,99,97,116,101,100,32,101,100,103,101,32,104,97,115,32,111,99,99,117,114,101,100,0,0,0,0,0,83,111,109,101,32,111,102,32,115,116,111,114,101,100,32,118,101,114,116,101,120,32,105,110,100,105,99,101,115,32,97,114,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,78,111,32,118,101,114,116,105,99,101,115,32,100,97,116,97,0,0,0,0,0,0,0,0,78,111,32,101,100,103,101,115,32,100,97,116,97,0,0,0,37,100,102,37,115,0,0,0,84,104,101,32,102,117,110,99,116,105,111,110,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,46,32,82,101,98,117,105,108,100,32,116,104,101,32,108,105,98,114,97,114,121,32,119,105,116,104,32,87,105,110,100,111,119,115,44,32,71,84,75,43,32,50,46,120,32,111,114,32,67,97,114,98,111,110,32,115,117,112,112,111,114,116,0,0,0,71,114,97,112,104,32,101,100,103,101,115,32,115,104,111,117,108,100,32,115,116,97,114,116,32,119,105,116,104,32,50,32,105,110,116,101,103,101,114,115,32,97,110,100,32,97,32,102,108,111,97,116,0,0,0,0,65,117,116,111,116,114,97,99,101,32,99,97,108,108,0,0,79,110,101,32,111,102,32,34,104,101,97,100,101,114,95,100,116,34,32,97,110,100,32,34,104,101,97,100,101,114,95,117,115,101,114,95,100,97,116,97,34,32,105,115,32,116,104,101,114,101,44,32,119,104,105,108,101,32,116,104,101,32,111,116,104,101,114,32,105,115,32,110,111,116,0,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,101,108,101,109,101,110,116,32,115,105,122,101,32,100,111,101,115,110,39,116,32,109,97,116,99,104,32,116,111,32,116,104,101,32,115,105,122,101,32,111,102,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,108,101,109,101,110,116,32,116,121,112,101,32,40,116,114,121,32,116,111,32,117,115,101,32,48,32,102,111,114,32,101,108,101,109,101,110,116,32,116,121,112,101,41,0,0,79,110,101,32,111,102,32,105,110,100,105,99,101,115,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,73,110,118,97,108,105,100,32,103,114,97,112,104,32,115,105,103,110,97,116,117,114,101,0,78,85,76,76,32,109,97,116,114,105,120,32,104,101,97,100,101,114,32,112,111,105,110,116,101,114,0,0,0,0,0,0,66,71,82,65,0,0,0,0,83,111,109,101,32,111,102,32,101,115,115,101,110,116,105,97,108,32,115,101,113,117,101,110,99,101,32,97,116,116,114,105,98,117,116,101,115,32,97,114,101,32,97,98,115,101,110,116,0,0,0,0,0,0,0,0,66,71,82,0,0,0,0,0,83,105,122,101,32,111,102,32,115,101,113,117,101,110,99,101,32,101,108,101,109,101,110,116,32,40,101,108,101,109,95,115,105,122,101,41,32,105,115,32,105,110,99,111,110,115,105,115,116,101,110,116,32,119,105,116,104,32,115,101,113,45,62,102,108,97,103,115,0,0,0,0,82,71,66,0,0,0,0,0,84,104,101,32,115,105,122,101,32,111,102,32,101,108,101,109,101,110,116,32,99,97,108,99,117,108,97,116,101,100,32,102,114,111,109,32,34,100,116,34,32,97,110,100,32,116,104,101,32,101,108,101,109,95,115,105,122,101,32,100,111,32,110,111,116,32,109,97,116,99,104,0,71,82,65,89,0,0,0,0,104,101,97,100,101,114,95,117,115,101,114,95,100,97,116,97,0,0,0,0,0,0,0,0,37,117,117,0,0,0,0,0,117,116,105,108,115,46,99,112,112,0,0,0,0,0,0,0,37,117,105,0,0,0,0,0,79,112,101,110,67,86,32,69,82,82,79,82,58,32,37,115,32,40,37,115,41,10,9,105,110,32,102,117,110,99,116,105,111,110,32,0,0,0,0,0,99,111,108,111,114,0,0,0,114,101,99,116,0,0,0,0,73,116,101,114,97,116,105,111,110,115,32,100,111,32,110,111,116,32,99,111,110,118,101,114,103,101,0,0,0,0,0,0,84,104,101,32,115,105,122,101,32,111,102,32,104,101,97,100,101,114,32,99,97,108,99,117,108,97,116,101,100,32,102,114,111,109,32,34,104,101,97,100,101,114,95,100,116,34,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,104,101,97,100,101,114,95,115,105,122,101,0,0,0,0,0,0,66,97,100,32,105,109,97,103,101,32,104,101,97,100,101,114,0,0,0,0,0,0,0,0,104,101,97,100,101,114,95,100,116,0,0,0,0,0,0,0,101,100,103,101,115,0,0,0,118,101,114,116,105,99,101,115,0,0,0,0,0,0,0,0,99,120,100,97,116,97,115,116,114,117,99,116,115,46,99,112,112,0,0,0,0,0,0,0,50,105,102,37,115,0,0,0,99,120,99,111,112,121,46,99,112,112,0,0,0,0,0,0,101,100,103,101,95,100,116,0,101,100,103,101,95,99,111,117,110,116,0,0,0,0,0,0,99,120,99,111,110,118,101,114,116,46,99,112,112,0,0,0,118,101,114,116,101,120,95,100,116,0,0,0,0,0,0,0,118,101,114,116,101,120,95,99,111,117,110,116,0,0,0,0,66,97,100,32,97,114,103,117,109,101,110,116,0,0,0,0,102,108,97,103,115,0,0,0,66,97,100,32,105,110,112,117,116,32,97,108,105,103,110,0,37,48,56,120,0,0,0,0,66,97,100,32,67,118,77,97,116,32,104,101,97,100,101,114,0,0,0,0,0,0,0,0,66,97,100,32,105,110,112,117,116,32,111,114,105,103,105,110,0,0,0,0,0,0,0,0,83,112,97,114,115,101,32,109,97,116,114,105,120,32,100,97,116,97,32,105,115,32,99,111,114,114,117,112,116,101,100,0,85,110,115,117,112,112,111,114,116,101,100,32,102,111,114,109,97,116,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,100,101,116,101,114,109,105,110,101,32,115,112,97,114,115,101,32,109,97,116,114,105,120,32,100,105,109,101,110,115,105,111,110,97,108,105,116,121,0,0,0,0,0,0,0,0,99,120,97,114,114,97,121,46,99,112,112,0,0,0,0,0,66,97,100,32,105,110,112,117,116,32,114,111,105,0,0,0,73,110,110,101,114,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,46,0,0,84,104,101,32,105,109,97,103,101,32,100,97,116,97,32,105,115,32,110,111,116,32,102,111,117,110,100,32,105,110,32,102,105,108,101,32,115,116,111,114,97,103,101,0,0,0,0,0,99,120,97,108,108,111,99,46,99,112,112,0,0,0,0,0,110,117,108,108,32,112,111,105,110,116,101,114,32,116,111,32,104,101,97,100,101,114,0,0,79,110,108,121,32,105,110,116,101,114,108,101,97,118,101,100,32,105,109,97,103,101,115,32,99,97,110,32,98,101,32,114,101,97,100,0,0,0,0,0,83,111,109,101,32,111,102,32,101,115,115,101,110,116,105,97,108,32,105,109,97,103,101,32,97,116,116,114,105,98,117,116,101,115,32,97,114,101,32,97,98,115,101,110,116,0,0,0,99,111,105,0,0,0,0,0,78,117,108,108,32,101,108,101,109,101,110,116,32,110,97,109,101,0,0,0,0,0,0,0,121,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,0,0,0,0,114,111,105,0,0,0,0,0,114,101,113,117,101,115,116,101,100,32,115,105,122,101,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,116,111,111,32,98,105,103,0,0,0,99,118,105,109,103,119,97,114,112,46,99,112,112,0,0,0,105,110,116,101,114,108,101,97,118,101,100,0,0,0,0,0,112,108,97,110,97,114,0,0,108,97,121,111,117,116,0,0,98,111,116,116,111,109,45,108,101,102,116,0,0,0,0,0,116,111,112,45,108,101,102,116,0,0,0,0,0,0,0,0,111,114,105,103,105,110,0,0,104,101,105,103,104,116,0,0,119,105,100,116,104,0,0,0,73,109,97,103,101,115,32,119,105,116,104,32,112,108,97,110,97,114,32,100,97,116,97,32,108,97,121,111,117,116,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,0,0,99,111,108,115,0,0,0,0,84,111,111,32,108,97,114,103,101,32,109,101,109,111,114,121,32,98,108,111,99,107,32,105,115,32,114,101,113,117,101,115,116,101,100,0,0,0,0,0,114,111,119,115,0,0,0,0,84,111,111,32,99,111,109,112,108,101,120,32,102,111,114,109,97,116,32,102,111,114,32,116,104,101,32,109,97,116,114,105,120,0,0,0,0,0,0,0,84,104,101,32,109,97,116,114,105,120,32,115,105,122,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,116,111,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,115,116,111,114,101,100,32,101,108,101,109,101,110,116,115,0,84,104,101,32,105,109,97,103,101,32,102,111,114,109,97,116,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,80,114,111,99,101,115,115,105,110,103,32,97,32,37,100,120,37,100,32,105,109,97,103,101,32,119,105,116,104,32,37,100,32,99,104,97,110,110,101,108,115,10,0,0,0,0,0,0,80,114,111,99,101,115,115,105,110,103,32,37,115,10,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,40,239,99,61,166,240,80,190,248,85,135,63,41,33,120,191,121,32,240,63,160,54,42,61,2,100,79,64,85,193,196,191,251,63,255,190,0,0,0,0,57,0,0,0,47,255,255,255,59,4,0,0,31,252,255,255,129,7,0,0,43,0,0,0,246,12,0,0,218,249,255,255,2,254,255,255,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,105,99,118,68,101,99,111,100,101,83,105,109,112,108,101,70,111,114,109,97,116,0,0,0,207,192,56,62,186,20,183,62,10,45,211,62,87,205,147,61,186,20,55,63,109,198,89,62,20,66,115,63,118,27,244,61,86,98,158,60,0,0,0,0,185,0,0,0,110,1,0,0,166,1,0,0,74,0,0,0,220,2,0,0,218,0,0,0,205,3,0,0,122,0,0,0,20,0,0,0,0,0,0,0,57,0,0,0,47,255,255,255,59,4,0,0,31,252,255,255,129,7,0,0,43,0,0,0,246,12,0,0,218,249,255,255,2,254,255,255,0,0,0,0,201,200,200,62,0,0,0,0,178,177,177,63,0,0,6,195,129,128,128,63,0,0,12,195,201,200,200,62,0,0,0,0,0,0,128,63,0,0,0,195,0,0,128,63,0,0,0,195,0,0,0,64,0,0,0,0,129,128,128,59,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,64,0,0,0,0,129,128,128,59,0,0,0,0,129,128,128,59,0,0,0,0,105,99,118,68,101,115,116,114,111,121,77,101,109,83,116,111,114,97,103,101,0,0,0,0,185,0,0,0,110,1,0,0,166,1,0,0,74,0,0,0,220,2,0,0,218,0,0,0,205,3,0,0,122,0,0,0,20,0,0,0,0,0,0,0,51,51,35,64,0,0,0,0,35,104,56,63,4,13,193,66,0,0,127,63,0,116,11,67,0,0,0,0,0,240,15,0,0,248,7,0,0,80,5,0,0,252,3,0,0,48,3,0,0,168,2,0,219,70,2,0,0,254,1,0,85,197,1,0,0,152,1,0,233,114,1,0,0,84,1,0,217,57,1,0,110,35,1,0,0,16,1,0,0,255,0,0,0,240,0,0,171,226,0,0,189,214,0,0,0,204,0,0,73,194,0,0,116,185,0,0,100,177,0,0,0,170,0,0,51,163,0,0,236,156,0,0,28,151,0,0,183,145,0,0,177,140,0,0,0,136,0,0,157,131,0,0,128,127,0,0,163,123,0,0,0,120,0,0,146,116,0,0,85,113,0,0,69,110,0,0,94,107,0,0,158,104,0,0,0,102,0,0,131,99,0,0,37,97,0,0,226,94,0,0,186,92,0,0,171,90,0,0,178,88,0,0,207,86,0,0,0,85,0,0,68,83,0,0,154,81,0,0,0,80,0,0,118,78,0,0,251,76,0,0,142,75,0,0,47,74,0,0,219,72,0,0,148,71,0,0,88,70,0,0,39,69,0,0,0,68,0,0,227,66,0,0,206,65,0,0,195,64,0,0,192,63,0,0,197,62,0,0,209,61,0,0,229,60,0,0,0,60,0,0,33,59,0,0,73,58,0,0,119,57,0,0,171,56,0,0,228,55,0,0,35,55,0,0,102,54,0,0,175,53,0,0,253,52,0,0,79,52,0,0,165,51,0,0,0,51,0,0,95,50,0,0,194,49,0,0,40,49,0,0,146,48,0,0,0,48,0,0,113,47,0,0,230,46,0,0,93,46,0,0,216,45,0,0,85,45,0,0,214,44,0,0,89,44,0,0,223,43,0,0,103,43,0,0,243,42,0,0,128,42,0,0,16,42,0,0,162,41,0,0,54,41,0,0,205,40,0,0,101,40,0,0,0,40,0,0,157,39,0,0,59,39,0,0,219,38,0,0,126,38,0,0,33,38,0,0,199,37,0,0,110,37,0,0,23,37,0,0,194,36,0,0,110,36,0,0,27,36,0,0,202,35,0,0,122,35,0,0,44,35,0,0,223,34,0,0,148,34,0,0,73,34,0,0,0,34,0,0,184,33,0,0,113,33,0,0,44,33,0,0,231,32,0,0,164,32,0,0,98,32,0,0,32,32,0,0,224,31,0,0,161,31,0,0,98,31,0,0,37,31,0,0,233,30,0,0,173,30,0,0,115,30,0,0,57,30,0,0,0,30,0,0,200,29,0,0,145,29,0,0,90,29,0,0,37,29,0,0,240,28,0,0,187,28,0,0,136,28,0,0,85,28,0,0,35,28,0,0,242,27,0,0,193,27,0,0,145,27,0,0,98,27,0,0,51,27,0,0,5,27,0,0,216,26,0,0,171,26,0,0,126,26,0,0,83,26,0,0,39,26,0,0,253,25,0,0,211,25,0,0,169,25,0,0,128,25,0,0,87,25,0,0,47,25,0,0,8,25,0,0,225,24,0,0,186,24,0,0,148,24,0,0,110,24,0,0,73,24,0,0,36,24,0,0,0,24,0,0,220,23,0,0,185,23,0,0,149,23,0,0,115,23,0,0,80,23,0,0,47,23,0,0,13,23,0,0,236,22,0,0,203,22,0,0,171,22,0,0,139,22,0,0,107,22,0,0,76,22,0,0,45,22,0,0,14,22,0,0,239,21,0,0,209,21,0,0,180,21,0,0,150,21,0,0,121,21,0,0,92,21,0,0,64,21,0,0,36,21,0,0,8,21,0,0,236,20,0,0,209,20,0,0,182,20,0,0,155,20,0,0,129,20,0,0,102,20,0,0,76,20,0,0,51,20,0,0,25,20,0,0,0,20,0,0,231,19,0,0,206,19,0,0,182,19,0,0,158,19,0,0,134,19,0,0,110,19,0,0,86,19,0,0,63,19,0,0,40,19,0,0,17,19,0,0,250,18,0,0,228,18,0,0,205,18,0,0,183,18,0,0,161,18,0,0,140,18,0,0,118,18,0,0,97,18,0,0,76,18,0,0,55,18,0,0,34,18,0,0,14,18,0,0,249,17,0,0,229,17,0,0,209,17,0,0,189,17,0,0,170,17,0,0,150,17,0,0,131,17,0,0,112,17,0,0,93,17,0,0,74,17,0,0,55,17,0,0,37,17,0,0,18,17,0,0,0,17,0,0,238,16,0,0,220,16,0,0,202,16,0,0,185,16,0,0,167,16,0,0,150,16,0,0,133,16,0,0,116,16,0,0,99,16,0,0,82,16,0,0,65,16,0,0,49,16,0,0,32,16,0,0,16,16,0,0,0,16,0,0,0,0,0,63,0,0,0,0,0,0,127,67,0,0,0,0,0,0,127,67,0,0,0,0,105,99,118,87,114,105,116,101,72,101,97,100,101,114,68,97,116,97,0,0,0,0,0,0,105,99,118,88,77,76,87,114,105,116,101,83,99,97,108,97,114,0,0,0,0,0,0,0,105,99,118,87,114,105,116,101,83,112,97,114,115,101,77,97,116,0,0,0,0,0,0,0,105,99,118,73,110,105,116,77,101,109,83,116,111,114,97,103,101,32,0,0,0,0,0,0,105,99,118,71,111,78,101,120,116,77,101,109,66,108,111,99,107,0,0,0,0,0,0,0,0,50,0,0,248,49,0,0,105,99,118,82,101,97,100,83,112,97,114,115,101,77,97,116,0,0,0,0,0,0,0,0,224,57,0,0,224,57,0,0,240,143,0,0,240,143,0,0,144,57,0,0,64,57,0,0,144,57,0,0,0,57,0,0,216,49,0,0,200,49,0,0,105,99,118,87,114,105,116,101,83,101,113,84,114,101,101,0,105,99,118,82,101,108,101,97,115,101,71,114,97,112,104,0,105,99,118,68,101,99,111,100,101,70,111,114,109,97,116,0,105,99,118,67,97,108,99,69,108,101,109,83,105,122,101,0,105,99,118,88,77,76,87,114,105,116,101,84,97,103,0,0,105,99,118,82,101,97,100,83,101,113,84,114,101,101,0,0,105,99,118,87,114,105,116,101,77,97,116,78,68,0,0,0,105,99,118,87,114,105,116,101,73,109,97,103,101,0,0,0,105,99,118,87,114,105,116,101,71,114,97,112,104,0,0,0,105,99,118,82,101,108,101,97,115,101,83,101,113,0,0,0,105,99,118,71,101,116,78,111,100,101,80,116,114,0,0,0,105,99,118,70,83,68,111,82,101,115,105,122,101,0,0,0,105,99,118,82,101,97,100,77,97,116,78,68,0,0,0,0,105,99,118,82,101,97,100,73,109,97,103,101,0,0,0,0,105,99,118,82,101,97,100,71,114,97,112,104,0,0,0,0,99,118,76,111,97,100,73,109,97,103,101,0,0,0,0,0,105,99,118,87,114,105,116,101,70,111,114,109,97,116,0,0,105,99,118,67,114,101,97,116,101,82,79,73,0,0,0,0,105,99,118,87,114,105,116,101,83,101,113,0,0,0,0,0,105,99,118,87,114,105,116,101,77,97,116,0,0,0,0,0,105,99,118,82,101,97,100,83,101,113,0,0,0,0,0,0,105,99,118,82,101,97,100,77,97,116,0,0,0,0,0,0,105,99,118,71,114,111,119,83,101,113,0,0,0,0,0,0,99,118,71,101,116,77,97,116,78,68,0,0,0,0,0,0,99,118,73,110,105,116,83,112,97,114,115,101,77,97,116,73,116,101,114,97,116,111,114,0,0,0,0,0,16,80,0,0,62,0,0,0,128,1,0,0,126,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,0,0,72,0,0,0,130,0,0,0,22,3,0,0,114,0,0,0,42,2,0,0,16,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,80,0,0,34,0,0,0,206,2,0,0,234,1,0,0,114,0,0,0,68,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,80,0,0,78,2,0,0,150,0,0,0,144,0,0,0,114,0,0,0,64,1,0,0,224,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,80,0,0,30,1,0,0,160,2,0,0,234,1,0,0,114,0,0,0,12,3,0,0,200,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,80,0,0,46,1,0,0,102,1,0,0,6,1,0,0,112,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,80,0,0,108,1,0,0,6,0,0,0,146,1,0,0,208,0,0,0,174,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,80,0,0,116,2,0,0,80,2,0,0,234,1,0,0,114,0,0,0,64,2,0,0,64,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,80,0,0,106,0,0,0,158,0,0,0,142,0,0,0,34,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,80,0,0,136,0,0,0,182,2,0,0,6,1,0,0,252,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,80,0,0,22,2,0,0,18,1,0,0,238,2,0,0,218,1,0,0,52,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,80,0,0,50,2,0,0,58,1,0,0,6,1,0,0,20,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,80,0,0,60,2,0,0,168,1,0,0,68,2,0,0,234,2,0,0,106,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,18,3,0,0,40,1,0,0,178,0,0,0,152,0,0,0,200,2,0,0,4,3,0,0,126,1,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,81,0,0,56,1,0,0,100,1,0,0,42,0,0,0,134,0,0,0,220,1,0,0,148,2,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,81,0,0,118,1,0,0,150,1,0,0,234,1,0,0,114,0,0,0,110,0,0,0,174,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,81,0,0,246,2,0,0,70,1,0,0,6,1,0,0,28,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,81,0,0,50,1,0,0,40,2,0,0,244,2,0,0,192,2,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,81,0,0,188,1,0,0,162,2,0,0,6,1,0,0,250,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,81,0,0,148,1,0,0,104,1,0,0,130,2,0,0,2,3,0,0,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,81,0,0,94,0,0,0,48,0,0,0,156,0,0,0,196,1,0,0,116,1,0,0,4,3,0,0,126,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,81,0,0,24,0,0,0,102,2,0,0,156,0,0,0,196,1,0,0,116,1,0,0,4,3,0,0,126,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,81,0,0,156,2,0,0,108,0,0,0,246,0,0,0,180,2,0,0,132,2,0,0,148,2,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,81,0,0,0,3,0,0,146,0,0,0,246,0,0,0,180,2,0,0,132,2,0,0,148,2,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,81,0,0,180,0,0,0,154,0,0,0,202,0,0,0,190,1,0,0,74,2,0,0,4,3,0,0,126,1,0,0,12,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,81,0,0,100,2,0,0,134,2,0,0,156,0,0,0,196,1,0,0,116,1,0,0,4,3,0,0,126,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,81,0,0,0,2,0,0,236,0,0,0,246,0,0,0,180,2,0,0,120,2,0,0,148,2,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,81,0,0,8,2,0,0,120,0,0,0,246,0,0,0,180,2,0,0,2,1,0,0,148,2,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,81,0,0,22,1,0,0,216,1,0,0,246,0,0,0,180,2,0,0,132,2,0,0,148,2,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,81,0,0,148,0,0,0,154,1,0,0,6,1,0,0,64,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,81,0,0,86,0,0,0,36,0,0,0,64,2,0,0,64,2,0,0,220,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,57,71,114,70,109,116,84,105,102,102,0,0,0,0,0,0,57,71,114,70,109,116,74,112,101,103,0,0,0,0,0,0,56,71,114,70,109,116,80,120,77,0,0,0,0,0,0,0,56,71,114,70,109,116,66,109,112,0,0,0,0,0,0,0,50,48,71,114,70,109,116,83,117,110,82,97,115,116,101,114,87,114,105,116,101,114,0,0,50,48,71,114,70,109,116,83,117,110,82,97,115,116,101,114,82,101,97,100,101,114,0,0,49,56,71,114,70,109,116,70,105,108,116,101,114,70,97,99,116,111,114,121,0,0,0,0,49,56,71,114,70,109,116,70,97,99,116,111,114,105,101,115,76,105,115,116,0,0,0,0,49,53,71,114,70,109,116,84,105,102,102,87,114,105,116,101,114,0,0,0,0,0,0,0,49,53,71,114,70,109,116,84,105,102,102,82,101,97,100,101,114,0,0,0,0,0,0,0,49,53,71,114,70,109,116,74,112,101,103,87,114,105,116,101,114,0,0,0,0,0,0,0,49,53,71,114,70,109,116,74,112,101,103,82,101,97,100,101,114,0,0,0,0,0,0,0,49,52,87,74,112,101,103,66,105,116,83,116,114,101,97,109,0,0,0,0,0,0,0,0,49,52,82,74,112,101,103,66,105,116,83,116,114,101,97,109,0,0,0,0,0,0,0,0,49,52,71,114,70,109,116,83,117,110,82,97,115,116,101,114,0,0,0,0,0,0,0,0,49,52,71,114,70,109,116,80,120,77,87,114,105,116,101,114,0,0,0,0,0,0,0,0,49,52,71,114,70,109,116,80,120,77,82,101,97,100,101,114,0,0,0,0,0,0,0,0,49,52,71,114,70,109,116,66,109,112,87,114,105,116,101,114,0,0,0,0,0,0,0,0,49,52,71,114,70,109,116,66,109,112,82,101,97,100,101,114,0,0,0,0,0,0,0,0,49,50,87,77,66,121,116,101,83,116,114,101,97,109,0,0,49,50,87,76,66,121,116,101,83,116,114,101,97,109,0,0,49,50,82,77,66,121,116,101,83,116,114,101,97,109,0,0,49,50,82,76,66,121,116,101,83,116,114,101,97,109,0,0,49,49,87,77,66,105,116,83,116,114,101,97,109,0,0,0,49,49,87,66,97,115,101,83,116,114,101,97,109,0,0,0,49,49,82,77,66,105,116,83,116,114,101,97,109,0,0,0,49,49,82,76,66,105,116,83,116,114,101,97,109,0,0,0,49,49,82,66,97,115,101,83,116,114,101,97,109,0,0,0,49,49,71,114,70,109,116,87,114,105,116,101,114,0,0,0,49,49,71,114,70,109,116,82,101,97,100,101,114,0,0,0,0,0,0,0,0,77,0,0])
.concat([0,0,0,0,16,77,0,0,0,0,0,0,32,77,0,0,8,80,0,0,0,0,0,0,0,0,0,0,48,77,0,0,48,80,0,0,0,0,0,0,0,0,0,0,88,77,0,0,64,80,0,0,0,0,0,0,0,0,0,0,128,77,0,0,0,80,0,0,0,0,0,0,0,0,0,0,168,77,0,0,176,80,0,0,0,0,0,0,0,0,0,0,184,77,0,0,176,80,0,0,0,0,0,0,0,0,0,0,200,77,0,0,176,80,0,0,0,0,0,0,0,0,0,0,216,77,0,0,176,80,0,0,0,0,0,0,0,0,0,0,232,77,0,0,240,81,0,0,0,0,0,0,0,0,0,0,0,78,0,0,248,81,0,0,0,0,0,0,0,0,0,0,24,78,0,0,0,0,0,0,48,78,0,0,0,0,0,0,72,78,0,0,240,81,0,0,0,0,0,0,0,0,0,0,96,78,0,0,248,81,0,0,0,0,0,0,0,0,0,0,120,78,0,0,240,81,0,0,0,0,0,0,0,0,0,0,144,78,0,0,248,81,0,0,0,0,0,0,0,0,0,0,168,78,0,0,176,81,0,0,0,0,0,0,0,0,0,0,192,78,0,0,200,81,0,0,0,0,0,0,0,0,0,0,216,78,0,0,176,80,0,0,0,0,0,0,0,0,0,0,240,78,0,0,240,81,0,0,0,0,0,0,0,0,0,0,8,79,0,0,248,81,0,0,0,0,0,0,0,0,0,0,32,79,0,0,240,81,0,0,0,0,0,0,0,0,0,0,56,79,0,0,248,81,0,0,0,0,0,0,0,0,0,0,80,79,0,0,128,81,0,0,0,0,0,0,0,0,0,0,96,79,0,0,192,81,0,0,0,0,0,0,0,0,0,0,112,79,0,0,160,81,0,0,0,0,0,0,0,0,0,0,128,79,0,0,232,81,0,0,0,0,0,0,0,0,0,0,144,79,0,0,192,81,0,0,0,0,0,0,0,0,0,0,160,79,0,0,0,0,0,0,176,79,0,0,216,81,0,0,0,0,0,0,0,0,0,0,192,79,0,0,232,81,0,0,0,0,0,0,0,0,0,0,208,79,0,0,0,0,0,0,224,79,0,0,0,0,0,0,240,79,0,0,46,2,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,255,255,255,255,255,0,0,255,255,255,255,0,0,0,0,232,1,0,0,0,0,0,0,0,8,1,2,9,16,24,17,10,3,4,11,18,25,32,40,33,26,19,12,5,6,13,20,27,34,41,48,56,49,42,35,28,21,14,7,15,22,29,36,43,50,57,58,51,44,37,30,23,31,38,45,52,59,60,53,46,39,47,54,61,62,55,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,1,255,2,255,255,255,3,255,255,255,255,255,255,255,4,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,5,0,0,161,0,203,0,232,0,0,1,20,1,37,1,52,1,66,1,79,1,91,1,103,1,113,1,123,1,133,1,142,1,150,1,159,1,167,1,174,1,182,1,189,1,196,1,203,1,209,1,216,1,222,1,228,1,234,1,240,1,245,1,251,1,0,2,5,2,11,2,16,2,21,2,26,2,30,2,35,2,40,2,44,2,49,2,53,2,58,2,62,2,66,2,70,2,74,2,78,2,82,2,86,2,90,2,94,2,98,2,102,2,105,2,109,2,113,2,116,2,120,2,123,2,127,2,130,2,133,2,137,2,140,2,143,2,147,2,150,2,153,2,156,2,159,2,162,2,165,2,168,2,172,2,174,2,177,2,180,2,183,2,186,2,189,2,192,2,195,2,198,2,200,2,203,2,206,2,208,2,211,2,214,2,216,2,219,2,222,2,224,2,227,2,229,2,232,2,235,2,237,2,240,2,242,2,244,2,247,2,249,2,252,2,254,2,1,3,3,3,5,3,8,3,10,3,12,3,14,3,17,3,19,3,21,3,24,3,26,3,28,3,30,3,32,3,35,3,37,3,39,3,41,3,43,3,45,3,47,3,50,3,52,3,54,3,56,3,58,3,60,3,62,3,64,3,66,3,68,3,70,3,72,3,74,3,76,3,78,3,80,3,82,3,84,3,86,3,88,3,89,3,91,3,93,3,95,3,97,3,99,3,101,3,103,3,104,3,106,3,108,3,110,3,112,3,114,3,115,3,117,3,119,3,121,3,123,3,124,3,126,3,128,3,130,3,131,3,133,3,135,3,136,3,138,3,140,3,142,3,143,3,145,3,147,3,148,3,150,3,152,3,153,3,155,3,157,3,158,3,160,3,161,3,163,3,165,3,166,3,168,3,170,3,171,3,173,3,174,3,176,3,177,3,179,3,181,3,182,3,184,3,185,3,187,3,188,3,190,3,191,3,193,3,194,3,196,3,197,3,199,3,200,3,202,3,203,3,205,3,206,3,208,3,209,3,211,3,212,3,214,3,215,3,217,3,218,3,219,3,221,3,222,3,224,3,225,3,227,3,228,3,229,3,231,3,232,3,234,3,235,3,236,3,238,3,239,3,241,3,242,3,243,3,245,3,246,3,247,3,249,3,250,3,251,3,253,3,254,3,0,4,1,4,2,4,4,4,5,4,6,4,7,4,9,4,10,4,11,4,13,4,14,4,15,4,17,4,18,4,19,4,20,4,22,4,23,4,24,4,26,4,27,4,28,4,29,4,31,4,32,4,33,4,34,4,36,4,37,4,38,4,39,4,41,4,42,4,43,4,44,4,46,4,47,4,48,4,49,4,50,4,52,4,53,4,54,4,55,4,57,4,58,4,59,4,60,4,61,4,62,4,64,4,65,4,66,4,67,4,68,4,70,4,71,4,72,4,73,4,74,4,75,4,77,4,78,4,79,4,80,4,81,4,82,4,83,4,85,4,86,4,87,4,88,4,89,4,90,4,91,4,93,4,94,4,95,4,96,4,97,4,98,4,99,4,100,4,101,4,103,4,104,4,105,4,106,4,107,4,108,4,109,4,110,4,111,4,112,4,114,4,115,4,116,4,117,4,118,4,119,4,120,4,121,4,122,4,123,4,124,4,125,4,126,4,127,4,128,4,130,4,131,4,132,4,133,4,134,4,135,4,136,4,137,4,138,4,139,4,140,4,141,4,142,4,143,4,144,4,145,4,146,4,147,4,148,4,149,4,150,4,151,4,152,4,153,4,154,4,155,4,156,4,157,4,158,4,159,4,160,4,161,4,162,4,163,4,164,4,165,4,166,4,167,4,168,4,169,4,170,4,171,4,172,4,173,4,174,4,175,4,176,4,177,4,178,4,179,4,180,4,181,4,182,4,183,4,184,4,185,4,186,4,187,4,188,4,189,4,190,4,191,4,191,4,192,4,193,4,194,4,195,4,196,4,197,4,198,4,199,4,200,4,201,4,202,4,203,4,204,4,205,4,206,4,206,4,207,4,208,4,209,4,210,4,211,4,212,4,213,4,214,4,215,4,216,4,217,4,218,4,218,4,219,4,220,4,221,4,222,4,223,4,224,4,225,4,226,4,227,4,227,4,228,4,229,4,230,4,231,4,232,4,233,4,234,4,235,4,235,4,236,4,237,4,238,4,239,4,240,4,241,4,242,4,242,4,243,4,244,4,245,4,246,4,247,4,248,4,249,4,249,4,250,4,251,4,252,4,253,4,254,4,255,4,255,4,0,5,1,5,2,5,3,5,4,5,5,5,5,5,6,5,7,5,8,5,9,5,10,5,11,5,0,1,1,2,3,4,4,5,6,6,7,8,8,9,10,11,11,12,13,13,14,15,16,16,17,18,18,19,20,20,21,22,23,23,24,25,25,26,27,28,28,29,30,30,31,32,32,33,34,35,35,36,37,37,38,39,40,40,41,42,42,43,44,44,45,46,47,47,48,49,49,50,51,52,52,53,54,54,55,56,56,57,58,59,59,60,61,61,62,63,64,64,65,66,66,67,68,68,69,70,71,71,72,73,73,74,75,76,76,77,78,78,79,80,80,81,82,83,83,84,85,85,86,87,88,88,89,90,90,91,92,92,93,94,95,95,96,97,97,98,99,100,100,101,102,102,103,104,104,105,106,107,107,108,109,109,110,111,112,112,113,114,114,115,116,116,117,118,119,119,120,121,121,122,123,124,124,125,126,126,127,128,128,129,130,131,131,132,133,133,134,135,136,136,137,138,138,139,140,140,141,142,143,143,144,145,145,146,147,148,148,149,150,150,151,152,152,153,154,155,155,156,157,157,158,159,160,160,161,162,162,163,164,164,165,166,167,167,168,169,169,170,171,172,172,173,174,174,175,176,176,177,178,179,179,180,0,1,3,4,6,7,9,10,11,13,14,16,17,18,20,21,23,24,26,27,28,30,31,33,34,35,37,38,40,41,43,44,45,47,48,50,51,52,54,55,57,58,60,61,62,64,65,67,68,69,71,72,74,75,77,78,79,81,82,84,85,86,88,89,91,92,94,95,96,98,99,101,102,103,105,106,108,109,111,112,113,115,116,118,119,120,122,123,125,126,128,129,130,132,133,135,136,137,139,140,142,143,145,146,147,149,150,152,153,154,156,157,159,160,162,163,164,166,167,169,170,171,173,174,176,177,179,180,181,183,184,186,187,188,190,191,193,194,196,197,198,200,201,203,204,205,207,208,210,211,213,214,215,217,218,220,221,222,224,225,227,228,230,231,232,234,235,237,238,239,241,242,244,245,247,248,249,251,252,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,16,12,14,14,18,24,49,72,11,12,13,17,22,35,64,92,10,14,16,22,37,55,78,95,16,19,24,29,56,64,87,98,24,26,40,51,68,81,103,112,40,58,57,87,109,104,121,100,51,60,69,80,103,113,120,103,61,55,56,62,77,92,101,99,0,64,0,0,197,88,0,0,159,83,0,0,66,75,0,0,0,64,0,0,73,50,0,0,163,34,0,0,168,17,0,0,197,88,0,0,33,123,0,0,252,115,0,0,98,104,0,0,197,88,0,0,191,69,0,0,11,48,0,0,126,24,0,0,159,83,0,0,252,115,0,0,65,109,0,0,84,98,0,0,159,83,0,0,179,65,0,0,65,45,0,0,18,23,0,0,66,75,0,0,98,104,0,0,84,98,0,0,126,88,0,0,66,75,0,0,33,59,0,0,186,40,0,0,195,20,0,0,0,64,0,0,197,88,0,0,159,83,0,0,66,75,0,0,0,64,0,0,73,50,0,0,163,34,0,0,168,17,0,0,73,50,0,0,191,69,0,0,179,65,0,0,33,59,0,0,73,50,0,0,130,39,0,0,55,27,0,0,224,13,0,0,163,34,0,0,11,48,0,0,65,45,0,0,186,40,0,0,163,34,0,0,55,27,0,0,191,18,0,0,142,9,0,0,168,17,0,0,126,24,0,0,18,23,0,0,195,20,0,0,168,17,0,0,224,13,0,0,142,9,0,0,223,4,0,0,117,99,119,115,105,102,100,114,0,0,0,0,0,0,0,0,77,77,0,42,0,0,0,0,73,73,42,0,0,0,0,0,208,49,0,0,0,0,0,0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119,0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250,0,0,0,0,0,0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125,1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250,0,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,0,0,0,0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,0,0,0,0,255,216,255,224,0,16,74,70,73,70,0,1,2,0,0,1,0,1,0,0,0,0,0,0,240,51,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(8))>>2)]=(766);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(12))>>2)]=(412);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(16))>>2)]=(184);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(20))>>2)]=(480);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(24))>>2)]=(242);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(28))>>2)]=(96);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(32))>>2)]=(300);
HEAP32[(((__ZTVN10__cxxabiv120__si_class_type_infoE)+(36))>>2)]=(336);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(8))>>2)]=(766);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(12))>>2)]=(760);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(16))>>2)]=(184);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(20))>>2)]=(480);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(24))>>2)]=(242);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(28))>>2)]=(630);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(32))>>2)]=(332);
HEAP32[(((__ZTVN10__cxxabiv117__class_type_infoE)+(36))>>2)]=(498);
HEAP32[((20480)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((20488)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((20496)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20512)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20528)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20544)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20560)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20576)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20592)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20608)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20624)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20640)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20656)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((20664)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((20672)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20688)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20704)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20720)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20736)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20752)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20768)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20784)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20800)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20816)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20832)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20848)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20864)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20880)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20896)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20912)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20928)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((20936)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20952)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((20968)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((20976)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((20984)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:35,EIDRM:36,ECHRNG:37,EL2NSYNC:38,EL3HLT:39,EL3RST:40,ELNRNG:41,EUNATCH:42,ENOCSI:43,EL2HLT:44,EDEADLK:45,ENOLCK:46,EBADE:50,EBADR:51,EXFULL:52,ENOANO:53,EBADRQC:54,EBADSLT:55,EDEADLOCK:56,EBFONT:57,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:74,ELBIN:75,EDOTDOT:76,EBADMSG:77,EFTYPE:79,ENOTUNIQ:80,EBADFD:81,EREMCHG:82,ELIBACC:83,ELIBBAD:84,ELIBSCN:85,ELIBMAX:86,ELIBEXEC:87,ENOSYS:88,ENMFILE:89,ENOTEMPTY:90,ENAMETOOLONG:91,ELOOP:92,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:106,EPROTOTYPE:107,ENOTSOCK:108,ENOPROTOOPT:109,ESHUTDOWN:110,ECONNREFUSED:111,EADDRINUSE:112,ECONNABORTED:113,ENETUNREACH:114,ENETDOWN:115,ETIMEDOUT:116,EHOSTDOWN:117,EHOSTUNREACH:118,EINPROGRESS:119,EALREADY:120,EDESTADDRREQ:121,EMSGSIZE:122,EPROTONOSUPPORT:123,ESOCKTNOSUPPORT:124,EADDRNOTAVAIL:125,ENETRESET:126,EISCONN:127,ENOTCONN:128,ETOOMANYREFS:129,EPROCLIM:130,EUSERS:131,EDQUOT:132,ESTALE:133,ENOTSUP:134,ENOMEDIUM:135,ENOSHARE:136,ECASECLASH:137,EILSEQ:138,EOVERFLOW:139,ECANCELED:140,ENOTRECOVERABLE:141,EOWNERDEAD:142,ESTRPIPE:143};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"No message of desired type",36:"Identifier removed",37:"Channel number out of range",38:"Level 2 not synchronized",39:"Level 3 halted",40:"Level 3 reset",41:"Link number out of range",42:"Protocol driver not attached",43:"No CSI structure available",44:"Level 2 halted",45:"Deadlock condition",46:"No record locks available",50:"Invalid exchange",51:"Invalid request descriptor",52:"Exchange full",53:"No anode",54:"Invalid request code",55:"Invalid slot",56:"File locking deadlock error",57:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",74:"Multihop attempted",75:"Inode is remote (not really error)",76:"Cross mount point (not really error)",77:"Trying to read unreadable message",79:"Inappropriate file type or format",80:"Given log. name not unique",81:"f.d. invalid for this operation",82:"Remote address changed",83:"Can\t access a needed shared lib",84:"Accessing a corrupted shared lib",85:".lib section in a.out corrupted",86:"Attempting to link in too many libs",87:"Attempting to exec a shared library",88:"Function not implemented",89:"No more files",90:"Directory not empty",91:"File or path name too long",92:"Too many symbolic links",95:"Operation not supported on transport endpoint",96:"Protocol family not supported",104:"Connection reset by peer",105:"No buffer space available",106:"Address family not supported by protocol family",107:"Protocol wrong type for socket",108:"Socket operation on non-socket",109:"Protocol not available",110:"Can't send after socket shutdown",111:"Connection refused",112:"Address already in use",113:"Connection aborted",114:"Network is unreachable",115:"Network interface is not configured",116:"Connection timed out",117:"Host is down",118:"Host is unreachable",119:"Connection already in progress",120:"Socket already connected",121:"Destination address required",122:"Message too long",123:"Unknown protocol",124:"Socket type not supported",125:"Address not available",126:"ENETRESET",127:"Socket is already connected",128:"Socket is not connected",129:"TOOMANYREFS",130:"EPROCLIM",131:"EUSERS",132:"EDQUOT",133:"ESTALE",134:"Not supported",135:"No medium (in tape drive)",136:"No such host or network path",137:"Filename exists with different case",138:"EILSEQ",139:"Value too large for defined data type",140:"Operation canceled",141:"State not recoverable",142:"Previous owner died",143:"Streams pipe error"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var VFS={mount:function (type, opts, mountpoint) {
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
        }
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode &= 4095;
        mode |= 0100000;
        return VFS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode &= 511 | 0001000;
        mode |= 0040000;
        return VFS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        mode |= 0020000;
        return VFS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path alreay exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to changews
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_node.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return VFS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        VFS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        VFS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        VFS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        VFS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 3) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        VFS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        path = PATH.normalize(path);
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        if ((flags & 512)) {
          mode = (mode & 4095) | 0100000;
        } else {
          mode = 0;
        }
        var node;
        try {
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 0200000)
          });
          node = lookup.node;
          path = lookup.path;
        } catch (e) {
          // ignore
        }
        // perhaps we need to create the node
        if ((flags & 512)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 2048)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = VFS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~1024;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 1024)) {
          VFS.truncate(node, 0);
        }
        // register the stream with the filesystem
        var stream = FS.createStream({
          path: path,
          node: node,
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },readdir:function (stream) {
        if (!stream.stream_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return stream.stream_ops.readdir(stream);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 3) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 3) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 8) {
          // seek to the end before writing in append mode
          VFS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 3) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write acccess
        if ((stream.flags & 3) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      }};
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path, ext) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var f = PATH.splitPath(path)[2];
        if (ext && f.substr(-1 * ext.length) === ext) {
          f = f.substr(0, f.length - ext.length);
        }
        return f;
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.filter(function(p, index) {
          if (typeof p !== 'string') {
            throw new TypeError('Arguments to path.join must be strings');
          }
          return p;
        }).join('/'));
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          // this wouldn't be required if the library wasn't eval'd at first...
          if (!TTY.utf8) {
            TTY.utf8 = new Runtime.UTF8Processor();
          }
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              if (process.stdin.destroyed) {
                return undefined;
              }
              result = process.stdin.read();
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={mount:function (mount) {
        return MEMFS.create_node(null, '/', 0040000 | 0777, 0);
      },create_node:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        var node = FS.createNode(parent, name, mode, dev);
        node.node_ops = MEMFS.node_ops;
        if (FS.isDir(node.mode)) {
          node.stream_ops = MEMFS.stream_ops;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.stream_ops = MEMFS.stream_ops;
          node.contents = [];
        } else if (FS.isLink(node.mode)) {
          node.stream_ops = MEMFS.stream_ops;
        } else if (FS.isChrdev(node.mode)) {
          node.stream_ops = FS.chrdev_stream_ops;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.create_node(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.create_node(parent, newname, 0777 | 0120000, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{open:function (stream) {
          if (FS.isDir(stream.node.mode)) {
            // cache off the directory entries when open'd
            var entries = ['.', '..']
            for (var key in stream.node.contents) {
              if (!stream.node.contents.hasOwnProperty(key)) {
                continue;
              }
              entries.push(key);
            }
            stream.entries = entries;
          }
        },read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          var size = Math.min(contents.length - position, length);
          if (contents.subarray) { // typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          stream.node.timestamp = Date.now();
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },readdir:function (stream) {
          return stream.entries;
        },allocate:function (stream, offset, length) {
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 0x02)) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            assert(contents.buffer === buffer || contents.buffer === buffer.buffer);
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,nodes:[null],devices:[null],streams:[null],nextInode:1,name_tablecurrentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:function (errno) {
        this.errno = errno;
        for (var key in ERRNO_CODES) {
          if (ERRNO_CODES[key] === errno) {
            this.code = key;
            break;
          }
        }
        this.message = ERRNO_MESSAGES[errno];
      },handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + new Error().stack;
        return ___setErrNo(e.errno);
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return (parentid + hash) % FS.name_table.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.name_table[hash];
        FS.name_table[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.name_table[hash] === node) {
          FS.name_table[hash] = node.name_next;
        } else {
          var current = FS.name_table[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.name_table[hash]; node; node = node.name_next) {
          if (node.parent.id === parent.id && node.name === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return VFS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        var node = {
          id: FS.nextInode++,
          name: name,
          mode: mode,
          node_ops: {},
          stream_ops: {},
          rdev: rdev,
          parent: null,
          mount: null
        };
        if (!parent) {
          parent = node;  // root node sets parent to itself
        }
        node.parent = parent;
        node.mount = parent.mount;
        // compatibility
        var readMode = 292 | 73;
        var writeMode = 146;
        Object.defineProperty(node, 'read', {
          get: function() { return (node.mode & readMode) === readMode; },
          set: function(val) { val ? node.mode |= readMode : node.mode &= ~readMode; }
        });
        Object.defineProperty(node, 'write', {
          get: function() { return (node.mode & writeMode) === writeMode; },
          set: function(val) { val ? node.mode |= writeMode : node.mode &= ~writeMode; }
        });
        // TODO add:
        // isFolder
        // isDevice
        FS.hashAddNode(node);
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 0170000) === 0100000;
      },isDir:function (mode) {
        return (mode & 0170000) === 0040000;
      },isLink:function (mode) {
        return (mode & 0170000) === 0120000;
      },isChrdev:function (mode) {
        return (mode & 0170000) === 0020000;
      },isBlkdev:function (mode) {
        return (mode & 0170000) === 0060000;
      },isFIFO:function (mode) {
        return (mode & 0170000) === 0010000;
      },cwd:function () {
        return FS.currentPath;
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.currentPath, path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = VFS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            return path ? PATH.join(node.mount.mountpoint, path) : node.mount.mountpoint;
          }
          path = path ? PATH.join(node.name, path) : node.name;
          node = node.parent;
        }
      },flagModes:{"r":0,"rs":8192,"r+":2,"w":1537,"wx":3585,"xw":3585,"w+":1538,"wx+":3586,"xw+":3586,"a":521,"ax":2569,"xa":2569,"a+":522,"ax+":2570,"xa+":2570},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 3;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 1024)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayMknod:function (mode) {
        switch (mode & 0170000) {
          case 0100000:
          case 0020000:
          case 0060000:
          case 0010000:
          case 0140000:
            return 0;
          default:
            return ERRNO_CODES.EINVAL;
        }
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.currentPath) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 3) !== 0 ||  // opening for write
              (flags & 1024)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        // compatibility
        Object.defineProperty(stream, 'object', {
          get: function() { return stream.node; },
          set: function(val) { stream.node = val; }
        });
        Object.defineProperty(stream, 'isRead', {
          get: function() { return (stream.flags & 3) !== 1; }
        });
        Object.defineProperty(stream, 'isWrite', {
          get: function() { return (stream.flags & 3) !== 0; }
        });
        Object.defineProperty(stream, 'isAppend', {
          get: function() { return (stream.flags & 8); }
        });
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },createDefaultDirectories:function () {
        VFS.mkdir('/tmp', 0777);
      },createDefaultDevices:function () {
        // create /dev
        VFS.mkdir('/dev', 0777);
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        VFS.mkdev('/dev/null', 0666, FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        VFS.mkdev('/dev/tty', 0666, FS.makedev(5, 0));
        VFS.mkdev('/dev/tty1', 0666, FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        VFS.mkdir('/dev/shm', 0777);
        VFS.mkdir('/dev/shm/tmp', 0777);
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          VFS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          VFS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          VFS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = VFS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = VFS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = VFS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },staticInit:function () {
        FS.root = FS.createNode(null, '/', 0040000 | 0777, 0);
        VFS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          VFS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return VFS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join(parent, part);
          try {
            VFS.mkdir(current, 0777);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return VFS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        var node = VFS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          VFS.chmod(path, mode | 146);
          var stream = VFS.open(path, 'w');
          VFS.write(stream, data, 0, data.length, 0);
          VFS.close(stream);
          VFS.chmod(path, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = input && output ? 0777 : (input ? 0333 : 0555);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return VFS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return VFS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      }};
  function _send(fd, buf, len, flags) {
      var info = FS.getStream(fd);
      if (!info) return -1;
      info.sender(HEAPU8.subarray(buf, buf+len));
      return len;
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return VFS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (stream && ('socket' in stream)) {
        return _send(fildes, buf, nbyte, 0);
      }
      try {
        var slab = HEAP8;
        return VFS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      var pdestEnd = 0;
      pdestEnd = (pdest + (_strlen(pdest)|0))|0;
      do {
        HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  var _fabs=Math.abs;
  function ___gxx_personality_v0() {
    }
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  function _strncpy(pdest, psrc, num) {
      pdest = pdest|0; psrc = psrc|0; num = num|0;
      var padding = 0, curr = 0, i = 0;
      while ((i|0) < (num|0)) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr
        padding = padding ? 1 : (HEAP8[(((psrc)+(i))|0)] == 0);
        i = (i+1)|0;
      }
      return pdest|0;
    }
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }
  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = VFS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _recv(fd, buf, len, flags) {
      var info = FS.getStream(fd);
      if (!info) return -1;
      if (!info.hasData()) {
        ___setErrNo(ERRNO_CODES.EAGAIN); // no data, and all sockets are nonblocking, so this is the right behavior
        return -1;
      }
      var buffer = info.inQueue.shift();
      if (len < buffer.length) {
        if (info.stream) {
          // This is tcp (reliable), so if not all was read, keep it
          info.inQueue.unshift(buffer.subarray(len));
        }
        buffer = buffer.subarray(0, len);
      }
      HEAPU8.set(buffer, buf);
      return buffer.length;
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return VFS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (stream && ('socket' in stream)) {
        return _recv(fildes, buf, nbyte, 0);
      }
      try {
        var slab = HEAP8;
        return VFS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        VFS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);;
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }
  var _setjmp=undefined;
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num) | 0;
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return VFS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }
  var _abs=Math.abs;
  function _pthread_key_create(key, destructor) {
      if (!_pthread_key_create.keys) _pthread_key_create.keys = {};
      // values start at 0
      _pthread_key_create.keys[key] = 0;
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0;
      }
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }
  var _llvm_memset_p0i8_i64=_memset;
  function _abort() {
      Module['abort']();
    }
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZN9GrFmtJpeg9NewWriterEPKc,0,__ZL19icvFlipHorz_16u_C3RPKtiPti6CvSize,0,__ZN20GrFmtSunRasterReaderD0Ev,0,__ZL16icvCopy_8u_C1R_fPKhiPhi6CvSize,0,__ZN14GrFmtPxMReaderD2Ev
,0,__ZL19icvCopy_16s_C3P3R_fPKtiPPti6CvSize,0,__ZL15icvWriteSeqTreeP13CvFileStoragePKcPKv10CvAttrList,0,__ZN8GrFmtBmpC2Ev,0,__ZN14GrFmtBmpReaderC2EPKc,0,__ZL26icvResize_Bilinear_16u_CnRPKti6CvSizePtiS1_iiPK13CvResizeAlphaS5_PfS6_
,0,__ZL19icvCopy_32f_P3C3R_fPPKiiPii6CvSize,0,__ZN11WBaseStreamD2Ev,0,__ZL21icvCvtScaleTo_32s_C1RPKhiPii6CvSizeddi,0,__ZL18icvCopy_8u_C3P3R_fPKhiPPhi6CvSize,0,__ZN9GrFmtJpegC2Ev
,0,__ZL20icvBGRx2XYZ_8u_CnC3RPKhiPhi6CvSizeii,0,__ZN9GrFmtJpegD2Ev,0,__ZN11GrFmtReaderD0Ev,0,__ZL19icvCopy_32f_P2C2R_fPPKiiPii6CvSize,0,__ZL20icvBGRx2BGR_8u_CnC3RPKhiPhi6CvSizeii
,0,__ZN14RJpegBitStream4OpenEPKc,0,__ZL22icvGray2BGRx_16u_C1CnRPKtiPti6CvSizei,0,__ZL8icvIsMatPKv,0,__ZN12WMByteStreamD0Ev,0,__Z17icvCopy_64f_C3P3RPKxiPPxi6CvSize
,0,__ZL11icvCloneSeqPKv,0,__ZL10icvIsGraphPKv,0,__ZL25icvResize_Bilinear_8u_CnRPKhi6CvSizePhiS1_iiPK13CvResizeAlphaS5_PiS6_,0,__ZN14GrFmtPxMReader5CloseEv,0,__ZN11RBaseStreamD2Ev
,0,__ZNSt9bad_allocD2Ev,0,__ZL21icvBGRx2HLS_32f_CnC3RPKfiPfi6CvSizeii,0,__Z16icvCopy_8u_P4C4RPPKhiPhi6CvSize,0,__ZL21icvBGR2BGRx_16u_C3C4RPKtiPti6CvSizei,0,__ZN14WJpegBitStream5FlushEv
,0,__ZN9GrFmtTiffD2Ev,0,__ZL19icvCopy_32f_C2P2R_fPKiiPPii6CvSize,0,__ZL21icvXYZ2BGRx_16u_C3CnRPKtiPti6CvSizeii,0,__ZL19icvCopy_8u_CnC1CR_fPKhiPhi6CvSizeii,0,__ZL21icvBGRx2Lab_32f_CnC3RPKfiPfi6CvSizeii
,0,__ZN20GrFmtSunRasterReaderC2EPKc,0,__ZL19icvCopy_64f_C3P3R_fPKxiPPxi6CvSize,0,__ZN11GrFmtReaderD2Ev,0,__Z17icvCopy_64f_C4P4RPKxiPPxi6CvSize,0,__Z20icvPthreadDestructorPv
,0,__ZL25icvResize_Bicubic_16u_CnRPKti6CvSizePtiS1_iiiPK13CvResizeAlphaPPf,0,__ZN11WBaseStreamD2Ev,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZN15GrFmtTiffReaderC2EPKc,0,__ZN20GrFmtSunRasterReaderD2Ev
,0,__ZL22icvResize_Area_16u_CnRPKti6CvSizePtiS1_iPK15CvDecimateAlphaiPfS6_,0,__ZL19icvCopy_16s_C4P4R_fPKtiPPti6CvSize,0,__ZN18GrFmtFactoriesListD2Ev,0,__ZN12RMByteStreamD0Ev,0,__ZN14GrFmtSunRaster9NewReaderEPKc
,0,__Z17icvCopy_16s_P4C4RPPKtiPti6CvSize,0,__ZN18GrFmtFilterFactory14CheckExtensionEPKc,0,__ZN20GrFmtSunRasterWriterC2EPKc,0,__ZN6CvTypeD2Ev,0,__ZN11RLBitStreamD0Ev
,0,__ZL20icvBGRx2HSV_8u_CnC3RPKhiPhi6CvSizeii,0,_cvCloneMatND,0,__ZL17icvWriteSparseMatP13CvFileStoragePKcPKv10CvAttrList,0,__ZN15GrFmtJpegReaderD2Ev,0,__ZN9GrFmtTiffD0Ev
,0,__Z17icvCopy_32f_P3C3RPPKiiPii6CvSize,0,__ZN14RJpegBitStream5CloseEv,0,__ZN15GrFmtTiffWriterD2Ev,0,__ZL19icvCopy_16s_P4C4R_fPPKtiPti6CvSize,0,__Z16icvCopy_8u_C4P4RPKhiPPhi6CvSize
,0,__ZN18GrFmtFactoriesList10FindReaderEPKc,0,__ZN8GrFmtPxM14CheckSignatureEPKc,0,__ZN12RLByteStreamD0Ev,0,__ZN11GrFmtWriterD1Ev,0,__ZN8GrFmtPxMD0Ev
,0,__ZN14WJpegBitStream5CloseEv,0,__ZN11WMBitStreamD0Ev,0,__ZN11WBaseStream4OpenEPKc,0,__ZN18GrFmtFactoriesListD0Ev,0,__ZL15icvCvtTo_8u_C1RPKhiPhi6CvSizei
,0,__ZN14WJpegBitStreamC2Ev,0,__ZL23icvGray2BGR5x5_8u_C1C2RPKhiPhi6CvSizei,0,_cvCloneMat,0,__ZN14GrFmtBmpWriterD2Ev,0,_cvReleaseMatND
,0,__ZN14GrFmtPxMReaderC2EPKc,0,__ZN14GrFmtSunRaster9NewWriterEPKc,0,__ZL20icvBGRA2RGBA_16u_C4RPKtiPti6CvSize,0,__ZN14WJpegBitStream4OpenEPKc,0,__ZN11WBaseStreamD2Ev
,0,__ZL18icvCopy_64s_C4MR_fPKxiPxi6CvSizePKhi,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__Z16icvCopy_32f_C4MRPKiiPii6CvSizePKhi,0,__ZN11WBaseStreamD2Ev,0,__ZL19icvFlipHorz_32s_C2RPKxiPxi6CvSize
,0,__ZL26icvResize_AreaFast_16u_CnRPKti6CvSizePtiS1_iPKiS4_,0,__ZL19icvCopy_64f_P3C3R_fPPKxiPxi6CvSize,0,__ZL20icvCopy_16s_C1CnCR_fPKtiPti6CvSizeii,0,__ZL21icvLuv2BGRx_32f_C3CnRPKfiPfi6CvSizeii,0,__ZN15GrFmtJpegReaderC2EPKc
,0,__ZN11WMBitStream4OpenEPKc,0,__ZN15GrFmtTiffReaderD2Ev,0,__Z16icvCopy_8u_P2C2RPPKhiPhi6CvSize,0,__ZN20GrFmtSunRasterReader8ReadDataEPhii,0,_cvCloneSparseMat
,0,__ZL18icvCopy_32f_C3MR_fPKiiPii6CvSizePKhi,0,__ZL17icvCopy_8u_C1MR_fPKhiPhi6CvSizeS0_i,0,__ZN14CvImageFiltersD2Ev,0,_cvReleaseSparseMat,0,__ZL23icvBGRx2YCrCb_16u_CnC3RPKtiPti6CvSizeii
,0,__ZL10icvIsMatNDPKv,0,__Z17icvCopy_16s_C4P4RPKtiPPti6CvSize,0,__Z15icvCopy_8u_C3MRPKhiPhi6CvSizeS0_i,0,__ZL18icvCopy_64s_C3MR_fPKxiPxi6CvSizePKhi,0,__ZL16icvCvtTo_16u_C1RPKhiPti6CvSizei
,0,__Z16icvCopy_16s_C1MRPKtiPti6CvSizePKhi,0,__ZL16icvCvtTo_64f_C1RPKhiPdi6CvSizei,0,__ZN11RMBitStreamD0Ev,0,__ZL21icvXYZ2BGRx_32f_C3CnRPKfiPfi6CvSizeii,0,__ZL21icvBGRx2XYZ_16u_CnC3RPKtiPti6CvSizeii
,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZL23icvBGRx2YCrCb_32f_CnC3RPKfiPfi6CvSizeii,0,__ZN11RBaseStream4OpenEPKc,0,__ZN9GrFmtTiffD2Ev,0,__ZL19icvFlipHorz_64s_C4RPKxiPxi6CvSize
,0,__ZN14GrFmtBmpReader5CloseEv,0,__ZL20icvCopy_64f_C1CnCR_fPKxiPxi6CvSizeii,0,__ZL13icvReleaseSeqPPv,0,__ZN11RLBitStream9ReadBlockEv,0,__ZL19icvCopy_16s_C2P2R_fPKtiPPti6CvSize
,0,__ZN11GrFmtWriter17IsFormatSupportedEi,0,__ZL21icvBGR2BGRx_32f_C3C4RPKiiPii6CvSizei,0,__ZL23icvBGRx2BGR5x5_8u_CnC2RPKhiPhi6CvSizeiii,0,_cvLoadImageM,0,__ZL18icvCopy_8u_C2P2R_fPKhiPPhi6CvSize
,0,__ZL21icvCvtScaleTo_64f_C1RPKhiPdi6CvSizeddi,0,__ZN15GrFmtTiffReaderD0Ev,0,__ZN15GrFmtJpegWriter10WriteImageEPKhiiiii,0,__ZN11RBaseStreamD2Ev,0,_cvReleaseMat
,0,__ZL20icvHLS2BGRx_8u_C3CnRPKhiPhi6CvSizeii,0,__Z17icvCopy_16s_C2P2RPKtiPPti6CvSize,0,__ZN8GrFmtBmpD2Ev,0,__Z17icvCopy_32f_C2P2RPKiiPPii6CvSize,0,__ZL16icvReadSparseMatP13CvFileStorageP10CvFileNode
,0,_cvSaveImage,0,__Z18icvCopy_32f_C1CnCRPKiiPii6CvSizeii,0,__ZN14WJpegBitStreamD0Ev,0,__ZN6CvTypeD2Ev,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib
,0,__ZN20GrFmtSunRasterWriterD2Ev,0,__ZL19icvCopy_64f_C4P4R_fPKxiPPxi6CvSize,0,__ZN14GrFmtPxMReaderD2Ev,0,__Z17icvCopy_64f_P4C4RPPKxiPxi6CvSize,0,__ZL18icvCopy_16s_C1MR_fPKtiPti6CvSizePKhi
,0,__ZN14RJpegBitStreamD2Ev,0,__ZN15GrFmtJpegWriterD0Ev,0,__Z15icvCopy_8u_C1MRPKhiPhi6CvSizeS0_i,0,__ZL20icvHSV2BGRx_8u_C3CnRPKhiPhi6CvSizeii,0,__ZN8GrFmtPxM9NewReaderEPKc
,0,__ZL21icvBayer2BGR_8u_C1C3RPKhiPhi6CvSizei,0,__ZN9GrFmtJpeg9NewReaderEPKc,0,__ZN14GrFmtPxMWriterD0Ev,0,__ZL19icvCopy_32f_C4P4R_fPKiiPPii6CvSize,0,__ZL20icvLuv2BGRx_8u_C3CnRPKhiPhi6CvSizeii
,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZL18icvCopy_8u_P3C3R_fPPKhiPhi6CvSize,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZL22icvGray2BGRx_32f_C1CnRPKfiPfi6CvSizei,0,__ZN15GrFmtTiffWriterC2EPKc
,0,__ZL21icvLab2BGRx_32f_C3CnRPKfiPfi6CvSizeii,0,__ZL8icvIsSeqPKv,0,__Z17icvCopy_16s_P2C2RPPKtiPti6CvSize,0,__ZL23icvBGR5x52BGRx_8u_C2CnRPKhiPhi6CvSizeiii,0,__ZN8GrFmtPxMC2Ev
,0,__ZL21icvBGRx2HSV_32f_CnC3RPKfiPfi6CvSizeii,0,__ZN11GrFmtReaderD2Ev,0,__ZN14RJpegBitStreamD0Ev,0,__ZN20GrFmtSunRasterWriterD0Ev,0,__ZN14GrFmtBmpReaderD0Ev
,0,__ZL21icvHSV2BGRx_32f_C3CnRPKfiPfi6CvSizeii,0,__ZN20GrFmtSunRasterReaderD2Ev,0,__ZL18icvCopy_8u_P4C4R_fPPKhiPhi6CvSize,0,__Z17icvCopy_64f_P3C3RPPKxiPxi6CvSize,0,__Z16icvCopy_32f_C3MRPKiiPii6CvSizePKhi
,0,__ZN11WBaseStream10WriteBlockEv,0,__ZN14GrFmtSunRasterD2Ev,0,__ZN15GrFmtTiffWriterD2Ev,0,__ZL13icvCloneGraphPKv,0,__ZN14GrFmtSunRasterC2Ev
,0,__ZN11WBaseStream8AllocateEv,0,__ZNSt9bad_allocD0Ev,0,__ZN11WBaseStreamD2Ev,0,__ZL17icvCopy_8u_C3MR_fPKhiPhi6CvSizeS0_i,0,__ZN14CvImageFiltersC2Ev
,0,__Z17icvCopy_32f_C3P3RPKiiPPii6CvSize,0,__ZL18icvCopy_8u_C4P4R_fPKhiPPhi6CvSize,0,__ZL20icvCvtScaleTo_8s_C1RPKhiPci6CvSizeddi,0,__ZL19icvCopy_64f_P2C2R_fPPKxiPxi6CvSize,0,_cvReleaseImage
,0,__ZN20GrFmtSunRasterReader10ReadHeaderEv,0,__ZN14GrFmtBmpReaderD2Ev,0,__ZN14GrFmtSunRasterD0Ev,0,__Z15icvCopy_8u_C4MRPKiiPii6CvSizePKhi,0,__ZN11GrFmtWriterD0Ev
,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZL20icvCopy_16s_CnC1CR_fPKtiPti6CvSizeii,0,_cvCloneImage,0,__ZL20icvLab2BGRx_8u_C3CnRPKhiPhi6CvSizeii,0,__ZL12icvReadMatNDP13CvFileStorageP10CvFileNode
,0,__ZN9GrFmtJpegD2Ev,0,__ZN15GrFmtJpegReaderD0Ev,0,__ZL18icvCopy_16s_C3MR_fPKtiPti6CvSizePKhi,0,__Z18icvCopy_32f_CnC1CRPKiiPii6CvSizeii,0,__ZN20GrFmtSunRasterReader5CloseEv
,0,__Z16icvCopy_64s_C3MRPKxiPxi6CvSizePKhi,0,__ZL21icvBGRx2XYZ_32f_CnC3RPKfiPfi6CvSizeii,0,__ZN8GrFmtBmpD2Ev,0,__ZL20icvBGRx2Lab_8u_CnC3RPKhiPhi6CvSizeii,0,__Z17icvCopy_8u_CnC1CRPKhiPhi6CvSizeii
,0,__ZL20icvBGRA2RGBA_32f_C4RPKiiPii6CvSize,0,__ZN14GrFmtBmpWriterD2Ev,0,__ZN11WMBitStream5CloseEv,0,__ZN11RBaseStream8AllocateEv,0,__ZL21icvBGRx2BGR_32f_CnC3RPKiiPii6CvSizeii
,0,__ZN11WBaseStream5CloseEv,0,__ZL22icvBGRx2Gray_32f_CnC1RPKfiPfi6CvSizeii,0,__ZN8GrFmtBmp9NewWriterEPKc,0,_cvShowImage,0,__ZN14RJpegBitStreamD2Ev
,0,__ZN20GrFmtSunRasterWriterD2Ev,0,__ZL19icvFlipHorz_64s_C3RPKxiPxi6CvSize,0,__ZL20icvCopy_32f_CnC1CR_fPKiiPii6CvSizeii,0,__ZL22icvBGRx2Gray_16u_CnC1RPKtiPti6CvSizeii,0,__ZL21icvHLS2BGRx_32f_C3CnRPKfiPfi6CvSizeii
,0,__ZN11RBaseStreamD0Ev,0,__ZN15GrFmtTiffReader8ReadDataEPhii,0,__ZN14RJpegBitStream9ReadBlockEv,0,__Z17icvCopy_32f_P2C2RPPKiiPii6CvSize,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev
,0,__ZL10icvIsImagePKv,0,__ZL17icvSortIdxCmpFuncPKvS0_Pv,0,__ZL25icvResize_Bicubic_32f_CnRPKfi6CvSizePfiS1_iiiPK13CvResizeAlphaPS2_,0,__ZL14icvDefaultFreePvS_,0,__ZN18GrFmtFilterFactory14CheckSignatureEPKc
,0,__ZN9GrFmtTiffC2Ev,0,__ZN18GrFmtFactoriesListC2Ev,0,__Z18icvCopy_64f_CnC1CRPKxiPxi6CvSizeii,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__Z17icvCopy_16s_C3P3RPKtiPPti6CvSize
,0,__ZL22icvYCrCb2BGRx_8u_C3CnRPKhiPhi6CvSizeii,0,__ZL21icvGray2BGRx_8u_C1CnRPKhiPhi6CvSizei,0,__ZL16icvCvtTo_32f_C1RPKhiPfi6CvSizei,0,__ZN15GrFmtJpegWriterC2EPKc,0,__ZL11icvWriteMatP13CvFileStoragePKcPKv10CvAttrList
,0,__ZN11RBaseStreamD2Ev,0,__Z18icvCopy_16s_C1CnCRPKtiPti6CvSizeii,0,__ZL19icvBGRA2RGBA_8u_C4RPKhiPhi6CvSize,0,__ZL18icvCopy_8u_P2C2R_fPPKhiPhi6CvSize,0,__ZN11RBaseStreamD2Ev
,0,__ZL21icvBGRx2Gray_8u_CnC1RPKhiPhi6CvSizeii,0,__ZN11WMBitStream5FlushEv,0,__ZL16icvCvtTo_32s_C1RPKhiPii6CvSizei,0,__ZL18icvCopy_32f_C4MR_fPKiiPii6CvSizePKhi,0,__ZN14GrFmtSunRasterD2Ev
,0,__ZL18icvFlipHorz_8u_C2RPKtiPti6CvSize,0,__ZN15GrFmtTiffReaderD2Ev,0,__ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E,0,__ZL14icvReadSeqTreeP13CvFileStorageP10CvFileNode,0,__Z16icvCopy_16s_C3MRPKtiPti6CvSizePKhi
,0,__ZL12icvReadGraphP13CvFileStorageP10CvFileNode,0,__ZL13icvWriteGraphP13CvFileStoragePKcPKv10CvAttrList,0,__ZN18GrFmtFactoriesList10FindWriterEPKc,0,__ZL22icvResize_Area_32f_CnRPKfi6CvSizePfiS1_iPK15CvDecimateAlphaiS2_S2_,0,__ZL14icvIsSparseMatPKv
,0,__ZN14GrFmtPxMReaderD0Ev,0,__ZN9GrFmtTiff9NewReaderEPKc,0,__ZL20icvBGR2BGRx_8u_C3C4RPKhiPhi6CvSizei,0,__ZL15icvDefaultAllocjPv,0,__ZL23icvYCrCb2BGRx_16u_C3CnRPKtiPti6CvSizeii
,0,__ZN15GrFmtJpegWriterD2Ev,0,__ZN15GrFmtTiffReader5CloseEv,0,__ZL19icvCopy_16s_P2C2R_fPPKtiPti6CvSize,0,__ZL23icvYCrCb2BGRx_32f_C3CnRPKfiPfi6CvSizeii,0,__Z16icvCopy_16s_C4MRPKxiPxi6CvSizePKhi
,0,__ZN15GrFmtJpegReaderD2Ev,0,__ZL25icvResize_AreaFast_8u_CnRPKhi6CvSizePhiS1_iPKiS4_,0,___cxa_pure_virtual,0,_cvStdErrReport,0,__ZN15GrFmtJpegReader10ReadHeaderEv
,0,__ZL18icvFlipHorz_8u_C1RPKhiPhi6CvSize,0,__ZL22icvBGRx2YCrCb_8u_CnC3RPKhiPhi6CvSizeii,0,__ZN11WMBitStream10WriteBlockEv,0,__ZL20icvBGRx2Luv_8u_CnC3RPKhiPhi6CvSizeii,0,__ZN8GrFmtPxMD2Ev
,0,__ZN18GrFmtFilterFactoryD0Ev,0,__ZL13icvWriteMatNDP13CvFileStoragePKcPKv10CvAttrList,0,__ZL21icvResize_Area_8u_CnRPKhi6CvSizePhiS1_iPK15CvDecimateAlphaiPfS6_,0,__ZL12icvReadImageP13CvFileStorageP10CvFileNode,0,__Z17icvCopy_32f_C4P4RPKiiPPii6CvSize
,0,__Z17icvCopy_32f_P4C4RPPKiiPii6CvSize,0,__ZL21icvCvtScaleTo_16s_C1RPKhiPsi6CvSizeddi,0,__ZL16icvCvtTo_16s_C1RPKhiPsi6CvSizei,0,__ZL15icvReleaseGraphPPv,0,__Z16icvCopy_64s_C4MRPKxiPxi6CvSizePKhi
,0,__ZN11WBaseStreamD2Ev,0,__ZN12WLByteStreamD0Ev,0,__Z18icvCopy_64f_C1CnCRPKxiPxi6CvSizeii,0,__ZN15GrFmtJpegReader5CloseEv,0,__ZL19icvCopy_32f_P4C4R_fPPKiiPii6CvSize
,0,__ZN11RBaseStreamD2Ev,0,__ZN20GrFmtSunRasterWriter10WriteImageEPKhiiiii,0,__ZN14GrFmtPxMWriterD2Ev,0,__ZN18GrFmtFilterFactoryD1Ev,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib
,0,__ZN11RMBitStream9ReadBlockEv,0,__ZL13icvWriteImageP13CvFileStoragePKcPKv10CvAttrList,0,__ZN14GrFmtBmpReaderD2Ev,0,__ZNKSt9bad_alloc4whatEv,0,_cvLoadImage
,0,__ZN14GrFmtBmpReader10ReadHeaderEv,0,__ZN11RBaseStream9ReadBlockEv,0,__ZN11WBaseStreamD0Ev,0,__ZL23icvBGR5x52Gray_8u_C2C1RPKhiPhi6CvSizei,0,__ZL19icvCopy_64f_C2P2R_fPKxiPPxi6CvSize
,0,__ZL19icvFlipHorz_32s_C3RPKiiPii6CvSize,0,__ZN11RBaseStreamD2Ev,0,__ZN14WJpegBitStreamD2Ev,0,__ZL21icvBGRx2BGR_16u_CnC3RPKtiPti6CvSizeii,0,__ZN11RBaseStream7ReleaseEv
,0,__ZL21icvCvtScaleTo_32f_C1RPKhiPfi6CvSizeddi,0,__ZL26icvResize_Bilinear_32f_CnRPKfi6CvSizePfiS1_iiPK13CvResizeAlphaS5_S2_S2_,0,__Z16icvCopy_8u_C2P2RPKhiPPhi6CvSize,0,__ZN11RBaseStreamD2Ev,0,__ZL20icvCvtScaleTo_8u_C1RPKhiPhi6CvSizeddi
,0,__ZN8GrFmtBmpD0Ev,0,__ZN14GrFmtBmpWriterD0Ev,0,__ZN14RJpegBitStreamC2Ev,0,__ZL18icvFlipHorz_8u_C3RPKhiPhi6CvSize,0,__ZL20icvCopy_32f_C1CnCR_fPKiiPii6CvSizeii
,0,__ZL19icvFlipHorz_16u_C2RPKiiPii6CvSize,0,__Z17icvCopy_64f_C2P2RPKxiPPxi6CvSize,0,__ZN18GrFmtFactoriesListD2Ev,0,__ZN11WBaseStreamD2Ev,0,__ZL21icvCvtScaleTo_16u_C1RPKhiPti6CvSizeddi
,0,__ZN11RBaseStream5CloseEv,0,__ZN15GrFmtTiffWriterD0Ev,0,__Z17icvCopy_8u_C1CnCRPKhiPhi6CvSizeii,0,__ZL17icvCopy_8u_C4MR_fPKiiPii6CvSizePKhi,0,__ZL15icvCvtTo_8s_C1RPKhiPci6CvSizei
,0,__ZL20icvBGRx2HLS_8u_CnC3RPKhiPhi6CvSizeii,0,__ZN14GrFmtPxMReader8ReadDataEPhii,0,__ZL21icvBGRx2Luv_32f_CnC3RPKfiPfi6CvSizeii,0,__ZL10icvReadSeqP13CvFileStorageP10CvFileNode,0,__ZL18icvCopy_16s_C4MR_fPKxiPxi6CvSizePKhi
,0,__ZN14WJpegBitStream10WriteBlockEv,0,__ZL19icvCopy_16s_P3C3R_fPPKtiPti6CvSize,0,__ZN11RBaseStreamD2Ev,0,__ZN9GrFmtJpegD0Ev,0,__ZL10icvReadMatP13CvFileStorageP10CvFileNode
,0,__ZL19icvCopy_8u_C1CnCR_fPKhiPhi6CvSizeii,0,__ZN8GrFmtPxMD2Ev,0,__Z16icvCopy_8u_C3P3RPKhiPPhi6CvSize,0,__Z18icvCopy_16s_CnC1CRPKtiPti6CvSizeii,0,__ZL20icvCopy_64f_CnC1CR_fPKxiPxi6CvSizeii
,0,__ZN11GrFmtReader5CloseEv,0,__ZN11WBaseStreamD2Ev,0,__ZN8GrFmtPxM9NewWriterEPKc,0,__ZL20icvXYZ2BGRx_8u_C3CnRPKhiPhi6CvSizeii,0,__ZN14GrFmtPxMWriterC2EPKc
,0,__ZL26icvResize_AreaFast_32f_CnRPKfi6CvSizePfiS1_iPKiS4_,0,__ZL19icvCopy_64f_P4C4R_fPPKxiPxi6CvSize,0,__ZN15GrFmtJpegReader8ReadDataEPhii,0,__ZL19icvFlipHorz_64s_C2RPKiiPii6CvSize,0,__ZN15GrFmtTiffReader10ReadHeaderEv
,0,__ZL24icvResize_Bicubic_8u_CnRPKhi6CvSizePhiS1_iiiPK13CvResizeAlphaPPf,0,__ZN14CvImageFiltersD2Ev,0,__ZN14GrFmtPxMReader10ReadHeaderEv,0,__ZN14GrFmtPxMWriterD2Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev
,0,__ZN14GrFmtBmpWriter10WriteImageEPKhiiiii,0,__ZN15GrFmtTiffWriter10WriteImageEPKhiiiii,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZN11RBaseStreamD2Ev,0,__ZN14GrFmtBmpReader8ReadDataEPhii
,0,__ZN11WBaseStream7ReleaseEv,0,__ZL19icvCopy_32f_C3P3R_fPKiiPPii6CvSize,0,__Z17icvCopy_16s_P3C3RPPKtiPti6CvSize,0,__Z16icvCopy_8u_P3C3RPPKhiPhi6CvSize,0,__ZN8GrFmtBmp9NewReaderEPKc
,0,__Z17icvCopy_64f_P2C2RPPKxiPxi6CvSize,0,__ZN9GrFmtTiff9NewWriterEPKc,0,__ZN14WJpegBitStreamD2Ev,0,__ZN11RBaseStreamD2Ev,0,__ZN9GrFmtTiff14CheckSignatureEPKc,0,__ZN14GrFmtBmpWriterC2EPKc,0,__ZN15GrFmtJpegWriterD2Ev,0,__ZN14GrFmtPxMWriter10WriteImageEPKhiiiii];
// EMSCRIPTEN_START_FUNCS
function _main($argc, $argv) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $frames;
   var $source;
   var $gimg;
   var $percent;
   var $i;
   var $destination;
   var $4=sp;
   var $5=(sp)+(8);
   var $result=(sp)+(16);
   $1=0;
   $2=$argc;
   $3=$argv;
   var $6=$2;
   $frames=$6;
   var $7=$frames;
   var $8=($7<<2);
   var $9=_malloc($8);
   var $10=$9;
   $source=$10;
   var $11=$frames;
   var $12=($11<<2);
   var $13=_malloc($12);
   var $14=$13;
   $gimg=$14;
   $percent=50;
   $i=1;
   label = 2; break;
  case 2: 
   var $16=$i;
   var $17=$frames;
   var $18=(($16)|(0)) < (($17)|(0));
   if ($18) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $20=$i;
   var $21=$3;
   var $22=(($21+($20<<2))|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=_cvLoadImage($23, 1);
   var $25=$i;
   var $26=((($25)-(1))|0);
   var $27=$source;
   var $28=(($27+($26<<2))|0);
   HEAP32[(($28)>>2)]=$24;
   var $29=$3;
   var $30=(($29+4)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=_printf(((16216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$31,tempInt));
   var $33=$i;
   var $34=((($33)-(1))|0);
   var $35=$source;
   var $36=(($35+($34<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+44)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$i;
   var $41=((($40)-(1))|0);
   var $42=$source;
   var $43=(($42+($41<<2))|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+40)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$i;
   var $48=((($47)-(1))|0);
   var $49=$source;
   var $50=(($49+($48<<2))|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($51+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=_printf(((16168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$39,HEAP32[(((tempInt)+(8))>>2)]=$46,HEAP32[(((tempInt)+(16))>>2)]=$53,tempInt));
   var $55=$i;
   var $56=((($55)-(1))|0);
   var $57=$source;
   var $58=(($57+($56<<2))|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59+40)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$percent;
   var $63=(Math.imul($61,$62)|0);
   var $64=((((($63)|(0)))/(100))&-1);
   var $65=$i;
   var $66=((($65)-(1))|0);
   var $67=$source;
   var $68=(($67+($66<<2))|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+44)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=$percent;
   var $73=(Math.imul($71,$72)|0);
   var $74=((((($73)|(0)))/(100))&-1);
   _cvSize($4, $64, $74);
   var $75=$i;
   var $76=((($75)-(1))|0);
   var $77=$source;
   var $78=(($77+($76<<2))|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$i;
   var $83=((($82)-(1))|0);
   var $84=$source;
   var $85=(($84+($83<<2))|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+8)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=_cvCreateImage($4, $81, $88);
   $destination=$89;
   var $90=$i;
   var $91=((($90)-(1))|0);
   var $92=$source;
   var $93=(($92+($91<<2))|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94+40)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$percent;
   var $98=(Math.imul($96,$97)|0);
   var $99=((((($98)|(0)))/(100))&-1);
   var $100=$i;
   var $101=((($100)-(1))|0);
   var $102=$source;
   var $103=(($102+($101<<2))|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+44)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$percent;
   var $108=(Math.imul($106,$107)|0);
   var $109=((((($108)|(0)))/(100))&-1);
   _cvSize($5, $99, $109);
   var $110=$i;
   var $111=((($110)-(1))|0);
   var $112=$source;
   var $113=(($112+($111<<2))|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=_cvCreateImage($5, $116, 1);
   var $118=$i;
   var $119=((($118)-(1))|0);
   var $120=$gimg;
   var $121=(($120+($119<<2))|0);
   HEAP32[(($121)>>2)]=$117;
   var $122=$i;
   var $123=((($122)-(1))|0);
   var $124=$source;
   var $125=(($124+($123<<2))|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=$126;
   var $128=$destination;
   var $129=$128;
   _cvResize($127, $129, 1);
   var $130=$destination;
   var $131=$130;
   var $132=$i;
   var $133=((($132)-(1))|0);
   var $134=$gimg;
   var $135=(($134+($133<<2))|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=$136;
   _cvCvtColor($131, $137, 6);
   var $138=(($result)|0);
   var $139=$i;
   var $140=$3;
   var $141=(($140+($139<<2))|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=_strcpy($138, $142);
   var $144=(($result)|0);
   var $145=_strcat($144, ((12488)|0));
   var $146=(($result)|0);
   var $147=_printf(((11664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$146,tempInt));
   var $148=(($result)|0);
   var $149=$i;
   var $150=((($149)-(1))|0);
   var $151=$gimg;
   var $152=(($151+($150<<2))|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$153;
   var $155=_cvSaveImage($148, $154);
   label = 4; break;
  case 4: 
   var $157=$i;
   var $158=((($157)+(1))|0);
   $i=$158;
   label = 2; break;
  case 5: 
   var $160=$1;
   STACKTOP = sp;
   return $160;
  default: assert(0, "bad label: " + label);
 }
}
Module["_main"] = _main;
function _cvSize($agg_result, $width, $height) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $s=sp;
 $1=$width;
 $2=$height;
 var $3=$1;
 var $4=(($s)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=$2;
 var $6=(($s+4)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=$agg_result;
 var $8=$s;
 assert(8 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];
 STACKTOP = sp;
 return;
}
function _cvCvtColor($srcarr, $dstarr, $code) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $srcstub=sp;
   var $src;
   var $dststub=(sp)+(32);
   var $dst;
   var $size=(sp)+(64);
   var $src_step;
   var $dst_step;
   var $src_cn;
   var $dst_cn;
   var $depth;
   var $func0;
   var $func1;
   var $func2;
   var $func3;
   var $param=(sp)+(72);
   var $4=(sp)+(88);
   var $ippi_call_result;
   var $5=(sp)+(96);
   var $ippi_call_result1;
   var $6=(sp)+(104);
   var $ippi_call_result2;
   var $7=(sp)+(112);
   var $ippi_call_result3;
   var $8=(sp)+(120);
   $1=$srcarr;
   $2=$dstarr;
   $3=$code;
   var $9=$1;
   var $10=$9;
   $src=$10;
   var $11=$2;
   var $12=$11;
   $dst=$12;
   $func0=0;
   $func1=0;
   $func2=0;
   $func3=0;
   var $13=$param;
   HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0; HEAP32[((($13)+(12))>>2)]=0;
   var $14=$1;
   var $15=_cvGetMat($14, $srcstub, 0, 0);
   $src=$15;
   var $16=_cvGetErrStatus();
   var $17=(($16)|(0)) < 0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((7152)|0), ((10696)|0), ((14000)|0), 2251);
   label = 284; break;
  case 3: 
   var $20=$2;
   var $21=_cvGetMat($20, $dststub, 0, 0);
   $dst=$21;
   var $22=_cvGetErrStatus();
   var $23=(($22)|(0)) < 0;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((7152)|0), ((10696)|0), ((14000)|0), 2252);
   label = 284; break;
  case 5: 
   var $26=$src;
   var $27=(($26+20)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=$dst;
   var $31=(($30+20)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=(($29)|(0))==(($33)|(0));
   if ($34) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $36=$src;
   var $37=(($36+24)|0);
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=$dst;
   var $41=(($40+24)|0);
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($39)|(0))==(($43)|(0));
   if ($44) { label = 8; break; } else { label = 7; break; }
  case 7: 
   _cvError(-209, ((7152)|0), ((36888)|0), ((14000)|0), 2255);
   label = 284; break;
  case 8: 
   var $47=$src;
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$dst;
   var $51=(($50)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$49 ^ $52;
   var $54=$53 & 7;
   var $55=(($54)|(0))==0;
   if ($55) { label = 10; break; } else { label = 9; break; }
  case 9: 
   _cvError(-205, ((7152)|0), ((36888)|0), ((14000)|0), 2258);
   label = 284; break;
  case 10: 
   var $58=$src;
   var $59=(($58)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$60 & 7;
   $depth=$61;
   var $62=$depth;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $65=$depth;
   var $66=(($65)|(0))!=2;
   if ($66) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $68=$depth;
   var $69=(($68)|(0))!=5;
   if ($69) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-210, ((7152)|0), ((36888)|0), ((14000)|0), 2262);
   label = 284; break;
  case 14: 
   var $72=$src;
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$74 & 504;
   var $76=$75 >> 3;
   var $77=((($76)+(1))|0);
   $src_cn=$77;
   var $78=$dst;
   var $79=(($78)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$80 & 504;
   var $82=$81 >> 3;
   var $83=((($82)+(1))|0);
   $dst_cn=$83;
   var $84=$src;
   __Z12cvGetMatSizePK5CvMat($4, $84);
   var $85=$size;
   var $86=$4;
   assert(8 % 1 === 0);HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[((($85)+(4))>>2)]=HEAP32[((($86)+(4))>>2)];
   var $87=$src;
   var $88=(($87+4)|0);
   var $89=HEAP32[(($88)>>2)];
   $src_step=$89;
   var $90=$dst;
   var $91=(($90+4)|0);
   var $92=HEAP32[(($91)>>2)];
   $dst_step=$92;
   var $93=$src;
   var $94=(($93)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=$dst;
   var $97=(($96)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$95 & $98;
   var $100=$99 & 16384;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 15; break; } else { label = 20; break; }
  case 15: 
   var $103=$3;
   var $104=(($103)|(0))!=46;
   if ($104) { label = 16; break; } else { label = 20; break; }
  case 16: 
   var $106=$3;
   var $107=(($106)|(0))!=47;
   if ($107) { label = 17; break; } else { label = 20; break; }
  case 17: 
   var $109=$3;
   var $110=(($109)|(0))!=48;
   if ($110) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $112=$3;
   var $113=(($112)|(0))!=49;
   if ($113) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $115=(($size+4)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($size)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(Math.imul($118,$116)|0);
   HEAP32[(($117)>>2)]=$119;
   var $120=(($size+4)|0);
   HEAP32[(($120)>>2)]=1;
   $dst_step=1073741824;
   $src_step=1073741824;
   label = 20; break;
  case 20: 
   var $122=$3;
   if ((($122)|(0))==0 | (($122)|(0))==2) {
    label = 21; break;
   }
   else if ((($122)|(0))==1 | (($122)|(0))==3 | (($122)|(0))==4) {
    label = 31; break;
   }
   else if ((($122)|(0))==5) {
    label = 42; break;
   }
   else if ((($122)|(0))==12 | (($122)|(0))==22 | (($122)|(0))==13 | (($122)|(0))==23 | (($122)|(0))==16 | (($122)|(0))==26 | (($122)|(0))==17 | (($122)|(0))==27) {
    label = 52; break;
   }
   else if ((($122)|(0))==14 | (($122)|(0))==24 | (($122)|(0))==15 | (($122)|(0))==25 | (($122)|(0))==18 | (($122)|(0))==28 | (($122)|(0))==19 | (($122)|(0))==29) {
    label = 67; break;
   }
   else if ((($122)|(0))==6 | (($122)|(0))==10 | (($122)|(0))==7 | (($122)|(0))==11) {
    label = 82; break;
   }
   else if ((($122)|(0))==21 | (($122)|(0))==31) {
    label = 95; break;
   }
   else if ((($122)|(0))==8 | (($122)|(0))==9) {
    label = 101; break;
   }
   else if ((($122)|(0))==20 | (($122)|(0))==30) {
    label = 112; break;
   }
   else if ((($122)|(0))==36 | (($122)|(0))==37 | (($122)|(0))==32 | (($122)|(0))==33 | (($122)|(0))==40 | (($122)|(0))==41 | (($122)|(0))==44 | (($122)|(0))==45 | (($122)|(0))==50 | (($122)|(0))==51 | (($122)|(0))==52 | (($122)|(0))==53) {
    label = 118; break;
   }
   else if ((($122)|(0))==38 | (($122)|(0))==39 | (($122)|(0))==34 | (($122)|(0))==35 | (($122)|(0))==54 | (($122)|(0))==55 | (($122)|(0))==56 | (($122)|(0))==57 | (($122)|(0))==58 | (($122)|(0))==59 | (($122)|(0))==60 | (($122)|(0))==61) {
    label = 187; break;
   }
   else if ((($122)|(0))==46 | (($122)|(0))==47 | (($122)|(0))==48 | (($122)|(0))==49) {
    label = 256; break;
   }
   else {
   label = 262; break;
   }
  case 21: 
   var $124=$src_cn;
   var $125=(($124)|(0))!=3;
   if ($125) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $127=$dst_cn;
   var $128=(($127)|(0))!=4;
   if ($128) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2285);
   label = 284; break;
  case 24: 
   var $131=$depth;
   var $132=(($131)|(0))==0;
   if ($132) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $145 = 556;label = 30; break;
  case 26: 
   var $135=$depth;
   var $136=(($135)|(0))==2;
   if ($136) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $143 = (68);label = 29; break;
  case 28: 
   var $139=$depth;
   var $140=(($139)|(0))==5;
   var $141=$140 ? ((264)) : 0;
   var $143 = $141;label = 29; break;
  case 29: 
   var $143;
   var $145 = $143;label = 30; break;
  case 30: 
   var $145;
   $func1=$145;
   var $146=$3;
   var $147=(($146)|(0))==0;
   var $148=$147 ? 0 : 2;
   var $149=(($param)|0);
   HEAP32[(($149)>>2)]=$148;
   label = 263; break;
  case 31: 
   var $151=$src_cn;
   var $152=(($151)|(0))!=3;
   if ($152) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $154=$src_cn;
   var $155=(($154)|(0))!=4;
   if ($155) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $157=$dst_cn;
   var $158=(($157)|(0))!=3;
   if ($158) { label = 34; break; } else { label = 35; break; }
  case 34: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2298);
   label = 284; break;
  case 35: 
   var $161=$depth;
   var $162=(($161)|(0))==0;
   if ($162) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $175 = 40;label = 41; break;
  case 37: 
   var $165=$depth;
   var $166=(($165)|(0))==2;
   if ($166) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $173 = (658);label = 40; break;
  case 39: 
   var $169=$depth;
   var $170=(($169)|(0))==5;
   var $171=$170 ? ((450)) : 0;
   var $173 = $171;label = 40; break;
  case 40: 
   var $173;
   var $175 = $173;label = 41; break;
  case 41: 
   var $175;
   $func2=$175;
   var $176=$src_cn;
   var $177=(($param)|0);
   HEAP32[(($177)>>2)]=$176;
   var $178=$3;
   var $179=(($178)|(0))==1;
   var $180=$179 ? 0 : 2;
   var $181=(($param+4)|0);
   HEAP32[(($181)>>2)]=$180;
   label = 263; break;
  case 42: 
   var $183=$src_cn;
   var $184=(($183)|(0))!=4;
   if ($184) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $186=$dst_cn;
   var $187=(($186)|(0))!=4;
   if ($187) { label = 44; break; } else { label = 45; break; }
  case 44: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2310);
   label = 284; break;
  case 45: 
   var $190=$depth;
   var $191=(($190)|(0))==0;
   if ($191) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $204 = 516;label = 51; break;
  case 47: 
   var $194=$depth;
   var $195=(($194)|(0))==2;
   if ($195) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $202 = (176);label = 50; break;
  case 49: 
   var $198=$depth;
   var $199=(($198)|(0))==5;
   var $200=$199 ? ((442)) : 0;
   var $202 = $200;label = 50; break;
  case 50: 
   var $202;
   var $204 = $202;label = 51; break;
  case 51: 
   var $204;
   $func0=$204;
   label = 263; break;
  case 52: 
   var $206=$src_cn;
   var $207=(($206)|(0))!=3;
   if ($207) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $209=$src_cn;
   var $210=(($209)|(0))!=4;
   if ($210) { label = 55; break; } else { label = 54; break; }
  case 54: 
   var $212=$dst_cn;
   var $213=(($212)|(0))!=2;
   if ($213) { label = 55; break; } else { label = 56; break; }
  case 55: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2327);
   label = 284; break;
  case 56: 
   var $216=$depth;
   var $217=(($216)|(0))!=0;
   if ($217) { label = 57; break; } else { label = 58; break; }
  case 57: 
   _cvError(-17, ((7152)|0), ((9848)|0), ((14000)|0), 2332);
   label = 284; break;
  case 58: 
   $func3=266;
   var $220=$src_cn;
   var $221=(($param)|0);
   HEAP32[(($221)>>2)]=$220;
   var $222=$3;
   var $223=(($222)|(0))==12;
   if ($223) { var $234 = 1;label = 62; break; } else { label = 59; break; }
  case 59: 
   var $225=$3;
   var $226=(($225)|(0))==22;
   if ($226) { var $234 = 1;label = 62; break; } else { label = 60; break; }
  case 60: 
   var $228=$3;
   var $229=(($228)|(0))==16;
   if ($229) { var $234 = 1;label = 62; break; } else { label = 61; break; }
  case 61: 
   var $231=$3;
   var $232=(($231)|(0))==26;
   var $234 = $232;label = 62; break;
  case 62: 
   var $234;
   var $235=$234 ? 0 : 2;
   var $236=(($param+4)|0);
   HEAP32[(($236)>>2)]=$235;
   var $237=$3;
   var $238=(($237)|(0))==12;
   if ($238) { var $249 = 1;label = 66; break; } else { label = 63; break; }
  case 63: 
   var $240=$3;
   var $241=(($240)|(0))==13;
   if ($241) { var $249 = 1;label = 66; break; } else { label = 64; break; }
  case 64: 
   var $243=$3;
   var $244=(($243)|(0))==16;
   if ($244) { var $249 = 1;label = 66; break; } else { label = 65; break; }
  case 65: 
   var $246=$3;
   var $247=(($246)|(0))==17;
   var $249 = $247;label = 66; break;
  case 66: 
   var $249;
   var $250=$249 ? 6 : 5;
   var $251=(($param+8)|0);
   HEAP32[(($251)>>2)]=$250;
   label = 263; break;
  case 67: 
   var $253=$src_cn;
   var $254=(($253)|(0))!=2;
   if ($254) { label = 70; break; } else { label = 68; break; }
  case 68: 
   var $256=$dst_cn;
   var $257=(($256)|(0))!=3;
   if ($257) { label = 69; break; } else { label = 71; break; }
  case 69: 
   var $259=$dst_cn;
   var $260=(($259)|(0))!=4;
   if ($260) { label = 70; break; } else { label = 71; break; }
  case 70: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2352);
   label = 284; break;
  case 71: 
   var $263=$depth;
   var $264=(($263)|(0))!=0;
   if ($264) { label = 72; break; } else { label = 73; break; }
  case 72: 
   _cvError(-17, ((7152)|0), ((9608)|0), ((14000)|0), 2357);
   label = 284; break;
  case 73: 
   $func3=348;
   var $267=$dst_cn;
   var $268=(($param)|0);
   HEAP32[(($268)>>2)]=$267;
   var $269=$3;
   var $270=(($269)|(0))==14;
   if ($270) { var $281 = 1;label = 77; break; } else { label = 74; break; }
  case 74: 
   var $272=$3;
   var $273=(($272)|(0))==24;
   if ($273) { var $281 = 1;label = 77; break; } else { label = 75; break; }
  case 75: 
   var $275=$3;
   var $276=(($275)|(0))==18;
   if ($276) { var $281 = 1;label = 77; break; } else { label = 76; break; }
  case 76: 
   var $278=$3;
   var $279=(($278)|(0))==28;
   var $281 = $279;label = 77; break;
  case 77: 
   var $281;
   var $282=$281 ? 0 : 2;
   var $283=(($param+4)|0);
   HEAP32[(($283)>>2)]=$282;
   var $284=$3;
   var $285=(($284)|(0))==14;
   if ($285) { var $296 = 1;label = 81; break; } else { label = 78; break; }
  case 78: 
   var $287=$3;
   var $288=(($287)|(0))==15;
   if ($288) { var $296 = 1;label = 81; break; } else { label = 79; break; }
  case 79: 
   var $290=$3;
   var $291=(($290)|(0))==18;
   if ($291) { var $296 = 1;label = 81; break; } else { label = 80; break; }
  case 80: 
   var $293=$3;
   var $294=(($293)|(0))==19;
   var $296 = $294;label = 81; break;
  case 81: 
   var $296;
   var $297=$296 ? 6 : 5;
   var $298=(($param+8)|0);
   HEAP32[(($298)>>2)]=$297;
   label = 263; break;
  case 82: 
   var $300=$src_cn;
   var $301=(($300)|(0))!=3;
   if ($301) { label = 83; break; } else { label = 84; break; }
  case 83: 
   var $303=$src_cn;
   var $304=(($303)|(0))!=4;
   if ($304) { label = 85; break; } else { label = 84; break; }
  case 84: 
   var $306=$dst_cn;
   var $307=(($306)|(0))!=1;
   if ($307) { label = 85; break; } else { label = 86; break; }
  case 85: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2373);
   label = 284; break;
  case 86: 
   var $310=$depth;
   var $311=(($310)|(0))==0;
   if ($311) { label = 87; break; } else { label = 88; break; }
  case 87: 
   var $324 = 522;label = 92; break;
  case 88: 
   var $314=$depth;
   var $315=(($314)|(0))==2;
   if ($315) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $322 = (468);label = 91; break;
  case 90: 
   var $318=$depth;
   var $319=(($318)|(0))==5;
   var $320=$319 ? ((454)) : 0;
   var $322 = $320;label = 91; break;
  case 91: 
   var $322;
   var $324 = $322;label = 92; break;
  case 92: 
   var $324;
   $func2=$324;
   var $325=$src_cn;
   var $326=(($param)|0);
   HEAP32[(($326)>>2)]=$325;
   var $327=$3;
   var $328=(($327)|(0))==6;
   if ($328) { var $333 = 1;label = 94; break; } else { label = 93; break; }
  case 93: 
   var $330=$3;
   var $331=(($330)|(0))==10;
   var $333 = $331;label = 94; break;
  case 94: 
   var $333;
   var $334=$333 ? 0 : 2;
   var $335=(($param+4)|0);
   HEAP32[(($335)>>2)]=$334;
   label = 263; break;
  case 95: 
   var $337=$src_cn;
   var $338=(($337)|(0))!=2;
   if ($338) { label = 97; break; } else { label = 96; break; }
  case 96: 
   var $340=$dst_cn;
   var $341=(($340)|(0))!=1;
   if ($341) { label = 97; break; } else { label = 98; break; }
  case 97: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2387);
   label = 284; break;
  case 98: 
   var $344=$depth;
   var $345=(($344)|(0))!=0;
   if ($345) { label = 99; break; } else { label = 100; break; }
  case 99: 
   _cvError(-17, ((7152)|0), ((9120)|0), ((14000)|0), 2392);
   label = 284; break;
  case 100: 
   $func2=(648);
   var $348=$3;
   var $349=(($348)|(0))==21;
   var $350=$349 ? 6 : 5;
   var $351=(($param)|0);
   HEAP32[(($351)>>2)]=$350;
   label = 263; break;
  case 101: 
   var $353=$src_cn;
   var $354=(($353)|(0))!=1;
   if ($354) { label = 104; break; } else { label = 102; break; }
  case 102: 
   var $356=$dst_cn;
   var $357=(($356)|(0))!=3;
   if ($357) { label = 103; break; } else { label = 105; break; }
  case 103: 
   var $359=$dst_cn;
   var $360=(($359)|(0))!=4;
   if ($360) { label = 104; break; } else { label = 105; break; }
  case 104: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2403);
   label = 284; break;
  case 105: 
   var $363=$depth;
   var $364=(($363)|(0))==0;
   if ($364) { label = 106; break; } else { label = 107; break; }
  case 106: 
   var $377 = 504;label = 111; break;
  case 107: 
   var $367=$depth;
   var $368=(($367)|(0))==2;
   if ($368) { label = 108; break; } else { label = 109; break; }
  case 108: 
   var $375 = (44);label = 110; break;
  case 109: 
   var $371=$depth;
   var $372=(($371)|(0))==5;
   var $373=$372 ? ((338)) : 0;
   var $375 = $373;label = 110; break;
  case 110: 
   var $375;
   var $377 = $375;label = 111; break;
  case 111: 
   var $377;
   $func1=$377;
   var $378=$dst_cn;
   var $379=(($param)|0);
   HEAP32[(($379)>>2)]=$378;
   label = 263; break;
  case 112: 
   var $381=$src_cn;
   var $382=(($381)|(0))!=1;
   if ($382) { label = 114; break; } else { label = 113; break; }
  case 113: 
   var $384=$dst_cn;
   var $385=(($384)|(0))!=2;
   if ($385) { label = 114; break; } else { label = 115; break; }
  case 114: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2416);
   label = 284; break;
  case 115: 
   var $388=$depth;
   var $389=(($388)|(0))!=0;
   if ($389) { label = 116; break; } else { label = 117; break; }
  case 116: 
   _cvError(-17, ((7152)|0), ((9120)|0), ((14000)|0), 2421);
   label = 284; break;
  case 117: 
   $func2=(164);
   var $392=$3;
   var $393=(($392)|(0))==20;
   var $394=$393 ? 6 : 5;
   var $395=(($param)|0);
   HEAP32[(($395)>>2)]=$394;
   label = 263; break;
  case 118: 
   var $397=$src_cn;
   var $398=(($397)|(0))!=3;
   if ($398) { label = 119; break; } else { label = 120; break; }
  case 119: 
   var $400=$src_cn;
   var $401=(($400)|(0))!=4;
   if ($401) { label = 121; break; } else { label = 120; break; }
  case 120: 
   var $403=$dst_cn;
   var $404=(($403)|(0))!=3;
   if ($404) { label = 121; break; } else { label = 122; break; }
  case 121: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2441);
   label = 284; break;
  case 122: 
   var $407=$depth;
   var $408=(($407)|(0))==0;
   if ($408) { label = 123; break; } else { label = 146; break; }
  case 123: 
   var $410=$3;
   var $411=(($410)|(0))==36;
   if ($411) { label = 125; break; } else { label = 124; break; }
  case 124: 
   var $413=$3;
   var $414=(($413)|(0))==37;
   if ($414) { label = 125; break; } else { label = 126; break; }
  case 125: 
   var $462 = 584;label = 145; break;
  case 126: 
   var $417=$3;
   var $418=(($417)|(0))==32;
   if ($418) { label = 128; break; } else { label = 127; break; }
  case 127: 
   var $420=$3;
   var $421=(($420)|(0))==33;
   if ($421) { label = 128; break; } else { label = 129; break; }
  case 128: 
   var $460 = 32;label = 144; break;
  case 129: 
   var $424=$3;
   var $425=(($424)|(0))==40;
   if ($425) { label = 131; break; } else { label = 130; break; }
  case 130: 
   var $427=$3;
   var $428=(($427)|(0))==41;
   if ($428) { label = 131; break; } else { label = 132; break; }
  case 131: 
   var $458 = 122;label = 143; break;
  case 132: 
   var $431=$3;
   var $432=(($431)|(0))==44;
   if ($432) { label = 134; break; } else { label = 133; break; }
  case 133: 
   var $434=$3;
   var $435=(($434)|(0))==45;
   if ($435) { label = 134; break; } else { label = 135; break; }
  case 134: 
   var $456 = 438;label = 142; break;
  case 135: 
   var $438=$3;
   var $439=(($438)|(0))==50;
   if ($439) { label = 137; break; } else { label = 136; break; }
  case 136: 
   var $441=$3;
   var $442=(($441)|(0))==51;
   if ($442) { label = 137; break; } else { label = 138; break; }
  case 137: 
   var $454 = 588;label = 141; break;
  case 138: 
   var $445=$3;
   var $446=(($445)|(0))==52;
   if ($446) { var $451 = 1;label = 140; break; } else { label = 139; break; }
  case 139: 
   var $448=$3;
   var $449=(($448)|(0))==53;
   var $451 = $449;label = 140; break;
  case 140: 
   var $451;
   var $452=$451 ? (702) : 0;
   var $454 = $452;label = 141; break;
  case 141: 
   var $454;
   var $456 = $454;label = 142; break;
  case 142: 
   var $456;
   var $458 = $456;label = 143; break;
  case 143: 
   var $458;
   var $460 = $458;label = 144; break;
  case 144: 
   var $460;
   var $462 = $460;label = 145; break;
  case 145: 
   var $462;
   $func2=$462;
   label = 180; break;
  case 146: 
   var $464=$depth;
   var $465=(($464)|(0))==2;
   if ($465) { label = 147; break; } else { label = 154; break; }
  case 147: 
   var $467=$3;
   var $468=(($467)|(0))==36;
   if ($468) { label = 149; break; } else { label = 148; break; }
  case 148: 
   var $470=$3;
   var $471=(($470)|(0))==37;
   if ($471) { label = 149; break; } else { label = 150; break; }
  case 149: 
   var $483 = (220);label = 153; break;
  case 150: 
   var $474=$3;
   var $475=(($474)|(0))==32;
   if ($475) { var $480 = 1;label = 152; break; } else { label = 151; break; }
  case 151: 
   var $477=$3;
   var $478=(($477)|(0))==33;
   var $480 = $478;label = 152; break;
  case 152: 
   var $480;
   var $481=$480 ? ((240)) : 0;
   var $483 = $481;label = 153; break;
  case 153: 
   var $483;
   $func2=$483;
   label = 179; break;
  case 154: 
   var $485=$depth;
   var $486=(($485)|(0))==5;
   if ($486) { label = 155; break; } else { label = 178; break; }
  case 155: 
   var $488=$3;
   var $489=(($488)|(0))==36;
   if ($489) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $491=$3;
   var $492=(($491)|(0))==37;
   if ($492) { label = 157; break; } else { label = 158; break; }
  case 157: 
   var $540 = (244);label = 177; break;
  case 158: 
   var $495=$3;
   var $496=(($495)|(0))==32;
   if ($496) { label = 160; break; } else { label = 159; break; }
  case 159: 
   var $498=$3;
   var $499=(($498)|(0))==33;
   if ($499) { label = 160; break; } else { label = 161; break; }
  case 160: 
   var $538 = (434);label = 176; break;
  case 161: 
   var $502=$3;
   var $503=(($502)|(0))==40;
   if ($503) { label = 163; break; } else { label = 162; break; }
  case 162: 
   var $505=$3;
   var $506=(($505)|(0))==41;
   if ($506) { label = 163; break; } else { label = 164; break; }
  case 163: 
   var $536 = (352);label = 175; break;
  case 164: 
   var $509=$3;
   var $510=(($509)|(0))==44;
   if ($510) { label = 166; break; } else { label = 165; break; }
  case 165: 
   var $512=$3;
   var $513=(($512)|(0))==45;
   if ($513) { label = 166; break; } else { label = 167; break; }
  case 166: 
   var $534 = (80);label = 174; break;
  case 167: 
   var $516=$3;
   var $517=(($516)|(0))==50;
   if ($517) { label = 169; break; } else { label = 168; break; }
  case 168: 
   var $519=$3;
   var $520=(($519)|(0))==51;
   if ($520) { label = 169; break; } else { label = 170; break; }
  case 169: 
   var $532 = (706);label = 173; break;
  case 170: 
   var $523=$3;
   var $524=(($523)|(0))==52;
   if ($524) { var $529 = 1;label = 172; break; } else { label = 171; break; }
  case 171: 
   var $526=$3;
   var $527=(($526)|(0))==53;
   var $529 = $527;label = 172; break;
  case 172: 
   var $529;
   var $530=$529 ? ((64)) : 0;
   var $532 = $530;label = 173; break;
  case 173: 
   var $532;
   var $534 = $532;label = 174; break;
  case 174: 
   var $534;
   var $536 = $534;label = 175; break;
  case 175: 
   var $536;
   var $538 = $536;label = 176; break;
  case 176: 
   var $538;
   var $540 = $538;label = 177; break;
  case 177: 
   var $540;
   $func2=$540;
   label = 178; break;
  case 178: 
   label = 179; break;
  case 179: 
   label = 180; break;
  case 180: 
   var $544=$src_cn;
   var $545=(($param)|0);
   HEAP32[(($545)>>2)]=$544;
   var $546=$3;
   var $547=(($546)|(0))==32;
   if ($547) { var $564 = 1;label = 186; break; } else { label = 181; break; }
  case 181: 
   var $549=$3;
   var $550=(($549)|(0))==36;
   if ($550) { var $564 = 1;label = 186; break; } else { label = 182; break; }
  case 182: 
   var $552=$3;
   var $553=(($552)|(0))==40;
   if ($553) { var $564 = 1;label = 186; break; } else { label = 183; break; }
  case 183: 
   var $555=$3;
   var $556=(($555)|(0))==44;
   if ($556) { var $564 = 1;label = 186; break; } else { label = 184; break; }
  case 184: 
   var $558=$3;
   var $559=(($558)|(0))==50;
   if ($559) { var $564 = 1;label = 186; break; } else { label = 185; break; }
  case 185: 
   var $561=$3;
   var $562=(($561)|(0))==52;
   var $564 = $562;label = 186; break;
  case 186: 
   var $564;
   var $565=$564 ? 0 : 2;
   var $566=(($param+4)|0);
   HEAP32[(($566)>>2)]=$565;
   label = 263; break;
  case 187: 
   var $568=$src_cn;
   var $569=(($568)|(0))!=3;
   if ($569) { label = 190; break; } else { label = 188; break; }
  case 188: 
   var $571=$dst_cn;
   var $572=(($571)|(0))!=3;
   if ($572) { label = 189; break; } else { label = 191; break; }
  case 189: 
   var $574=$dst_cn;
   var $575=(($574)|(0))!=4;
   if ($575) { label = 190; break; } else { label = 191; break; }
  case 190: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2480);
   label = 284; break;
  case 191: 
   var $578=$depth;
   var $579=(($578)|(0))==0;
   if ($579) { label = 192; break; } else { label = 215; break; }
  case 192: 
   var $581=$3;
   var $582=(($581)|(0))==38;
   if ($582) { label = 194; break; } else { label = 193; break; }
  case 193: 
   var $584=$3;
   var $585=(($584)|(0))==39;
   if ($585) { label = 194; break; } else { label = 195; break; }
  case 194: 
   var $633 = 502;label = 214; break;
  case 195: 
   var $588=$3;
   var $589=(($588)|(0))==34;
   if ($589) { label = 197; break; } else { label = 196; break; }
  case 196: 
   var $591=$3;
   var $592=(($591)|(0))==35;
   if ($592) { label = 197; break; } else { label = 198; break; }
  case 197: 
   var $631 = 738;label = 213; break;
  case 198: 
   var $595=$3;
   var $596=(($595)|(0))==54;
   if ($596) { label = 200; break; } else { label = 199; break; }
  case 199: 
   var $598=$3;
   var $599=(($598)|(0))==55;
   if ($599) { label = 200; break; } else { label = 201; break; }
  case 200: 
   var $629 = 318;label = 212; break;
  case 201: 
   var $602=$3;
   var $603=(($602)|(0))==60;
   if ($603) { label = 203; break; } else { label = 202; break; }
  case 202: 
   var $605=$3;
   var $606=(($605)|(0))==61;
   if ($606) { label = 203; break; } else { label = 204; break; }
  case 203: 
   var $627 = 282;label = 211; break;
  case 204: 
   var $609=$3;
   var $610=(($609)|(0))==56;
   if ($610) { label = 206; break; } else { label = 205; break; }
  case 205: 
   var $612=$3;
   var $613=(($612)|(0))==57;
   if ($613) { label = 206; break; } else { label = 207; break; }
  case 206: 
   var $625 = 418;label = 210; break;
  case 207: 
   var $616=$3;
   var $617=(($616)|(0))==58;
   if ($617) { var $622 = 1;label = 209; break; } else { label = 208; break; }
  case 208: 
   var $619=$3;
   var $620=(($619)|(0))==59;
   var $622 = $620;label = 209; break;
  case 209: 
   var $622;
   var $623=$622 ? (330) : 0;
   var $625 = $623;label = 210; break;
  case 210: 
   var $625;
   var $627 = $625;label = 211; break;
  case 211: 
   var $627;
   var $629 = $627;label = 212; break;
  case 212: 
   var $629;
   var $631 = $629;label = 213; break;
  case 213: 
   var $631;
   var $633 = $631;label = 214; break;
  case 214: 
   var $633;
   $func2=$633;
   label = 249; break;
  case 215: 
   var $635=$depth;
   var $636=(($635)|(0))==2;
   if ($636) { label = 216; break; } else { label = 223; break; }
  case 216: 
   var $638=$3;
   var $639=(($638)|(0))==38;
   if ($639) { label = 218; break; } else { label = 217; break; }
  case 217: 
   var $641=$3;
   var $642=(($641)|(0))==39;
   if ($642) { label = 218; break; } else { label = 219; break; }
  case 218: 
   var $654 = (560);label = 222; break;
  case 219: 
   var $645=$3;
   var $646=(($645)|(0))==34;
   if ($646) { var $651 = 1;label = 221; break; } else { label = 220; break; }
  case 220: 
   var $648=$3;
   var $649=(($648)|(0))==35;
   var $651 = $649;label = 221; break;
  case 221: 
   var $651;
   var $652=$651 ? ((76)) : 0;
   var $654 = $652;label = 222; break;
  case 222: 
   var $654;
   $func2=$654;
   label = 248; break;
  case 223: 
   var $656=$depth;
   var $657=(($656)|(0))==5;
   if ($657) { label = 224; break; } else { label = 247; break; }
  case 224: 
   var $659=$3;
   var $660=(($659)|(0))==38;
   if ($660) { label = 226; break; } else { label = 225; break; }
  case 225: 
   var $662=$3;
   var $663=(($662)|(0))==39;
   if ($663) { label = 226; break; } else { label = 227; break; }
  case 226: 
   var $711 = (568);label = 246; break;
  case 227: 
   var $666=$3;
   var $667=(($666)|(0))==34;
   if ($667) { label = 229; break; } else { label = 228; break; }
  case 228: 
   var $669=$3;
   var $670=(($669)|(0))==35;
   if ($670) { label = 229; break; } else { label = 230; break; }
  case 229: 
   var $709 = (238);label = 245; break;
  case 230: 
   var $673=$3;
   var $674=(($673)|(0))==54;
   if ($674) { label = 232; break; } else { label = 231; break; }
  case 231: 
   var $676=$3;
   var $677=(($676)|(0))==55;
   if ($677) { label = 232; break; } else { label = 233; break; }
  case 232: 
   var $707 = (362);label = 244; break;
  case 233: 
   var $680=$3;
   var $681=(($680)|(0))==60;
   if ($681) { label = 235; break; } else { label = 234; break; }
  case 234: 
   var $683=$3;
   var $684=(($683)|(0))==61;
   if ($684) { label = 235; break; } else { label = 236; break; }
  case 235: 
   var $705 = (470);label = 243; break;
  case 236: 
   var $687=$3;
   var $688=(($687)|(0))==56;
   if ($688) { label = 238; break; } else { label = 237; break; }
  case 237: 
   var $690=$3;
   var $691=(($690)|(0))==57;
   if ($691) { label = 238; break; } else { label = 239; break; }
  case 238: 
   var $703 = (342);label = 242; break;
  case 239: 
   var $694=$3;
   var $695=(($694)|(0))==58;
   if ($695) { var $700 = 1;label = 241; break; } else { label = 240; break; }
  case 240: 
   var $697=$3;
   var $698=(($697)|(0))==59;
   var $700 = $698;label = 241; break;
  case 241: 
   var $700;
   var $701=$700 ? ((198)) : 0;
   var $703 = $701;label = 242; break;
  case 242: 
   var $703;
   var $705 = $703;label = 243; break;
  case 243: 
   var $705;
   var $707 = $705;label = 244; break;
  case 244: 
   var $707;
   var $709 = $707;label = 245; break;
  case 245: 
   var $709;
   var $711 = $709;label = 246; break;
  case 246: 
   var $711;
   $func2=$711;
   label = 247; break;
  case 247: 
   label = 248; break;
  case 248: 
   label = 249; break;
  case 249: 
   var $715=$dst_cn;
   var $716=(($param)|0);
   HEAP32[(($716)>>2)]=$715;
   var $717=$3;
   var $718=(($717)|(0))==34;
   if ($718) { var $735 = 1;label = 255; break; } else { label = 250; break; }
  case 250: 
   var $720=$3;
   var $721=(($720)|(0))==38;
   if ($721) { var $735 = 1;label = 255; break; } else { label = 251; break; }
  case 251: 
   var $723=$3;
   var $724=(($723)|(0))==54;
   if ($724) { var $735 = 1;label = 255; break; } else { label = 252; break; }
  case 252: 
   var $726=$3;
   var $727=(($726)|(0))==56;
   if ($727) { var $735 = 1;label = 255; break; } else { label = 253; break; }
  case 253: 
   var $729=$3;
   var $730=(($729)|(0))==58;
   if ($730) { var $735 = 1;label = 255; break; } else { label = 254; break; }
  case 254: 
   var $732=$3;
   var $733=(($732)|(0))==60;
   var $735 = $733;label = 255; break;
  case 255: 
   var $735;
   var $736=$735 ? 0 : 2;
   var $737=(($param+4)|0);
   HEAP32[(($737)>>2)]=$736;
   label = 263; break;
  case 256: 
   var $739=$src_cn;
   var $740=(($739)|(0))!=1;
   if ($740) { label = 258; break; } else { label = 257; break; }
  case 257: 
   var $742=$dst_cn;
   var $743=(($742)|(0))!=3;
   if ($743) { label = 258; break; } else { label = 259; break; }
  case 258: 
   _cvError(-15, ((7152)|0), ((10872)|0), ((14000)|0), 2511);
   label = 284; break;
  case 259: 
   var $746=$depth;
   var $747=(($746)|(0))!=0;
   if ($747) { label = 260; break; } else { label = 261; break; }
  case 260: 
   _cvError(-17, ((7152)|0), ((8488)|0), ((14000)|0), 2515);
   label = 284; break;
  case 261: 
   $func1=322;
   var $750=$3;
   var $751=(($param)|0);
   HEAP32[(($751)>>2)]=$750;
   label = 263; break;
  case 262: 
   _cvError(-206, ((7152)|0), ((8168)|0), ((14000)|0), 2521);
   label = 284; break;
  case 263: 
   var $754=$func0;
   var $755=(($754)|(0))!=0;
   if ($755) { label = 264; break; } else { label = 267; break; }
  case 264: 
   var $757=$func0;
   var $758=$src;
   var $759=(($758+16)|0);
   var $760=$759;
   var $761=HEAP32[(($760)>>2)];
   var $762=$src_step;
   var $763=$dst;
   var $764=(($763+16)|0);
   var $765=$764;
   var $766=HEAP32[(($765)>>2)];
   var $767=$dst_step;
   var $768=$5;
   var $769=$size;
   assert(8 % 1 === 0);HEAP32[(($768)>>2)]=HEAP32[(($769)>>2)];HEAP32[((($768)+(4))>>2)]=HEAP32[((($769)+(4))>>2)];
   var $770=FUNCTION_TABLE[$757]($761, $762, $766, $767, $5);
   $ippi_call_result=$770;
   var $771=$ippi_call_result;
   var $772=(($771)|(0)) < 0;
   if ($772) { label = 265; break; } else { label = 266; break; }
  case 265: 
   var $774=$ippi_call_result;
   var $775=_cvErrorFromIppStatus($774);
   _cvError($775, ((7152)|0), ((7776)|0), ((14000)|0), 2526);
   label = 284; break;
  case 266: 
   label = 283; break;
  case 267: 
   var $778=$func1;
   var $779=(($778)|(0))!=0;
   if ($779) { label = 268; break; } else { label = 271; break; }
  case 268: 
   var $781=$func1;
   var $782=$src;
   var $783=(($782+16)|0);
   var $784=$783;
   var $785=HEAP32[(($784)>>2)];
   var $786=$src_step;
   var $787=$dst;
   var $788=(($787+16)|0);
   var $789=$788;
   var $790=HEAP32[(($789)>>2)];
   var $791=$dst_step;
   var $792=$6;
   var $793=$size;
   assert(8 % 1 === 0);HEAP32[(($792)>>2)]=HEAP32[(($793)>>2)];HEAP32[((($792)+(4))>>2)]=HEAP32[((($793)+(4))>>2)];
   var $794=(($param)|0);
   var $795=HEAP32[(($794)>>2)];
   var $796=FUNCTION_TABLE[$781]($785, $786, $790, $791, $6, $795);
   $ippi_call_result1=$796;
   var $797=$ippi_call_result1;
   var $798=(($797)|(0)) < 0;
   if ($798) { label = 269; break; } else { label = 270; break; }
  case 269: 
   var $800=$ippi_call_result1;
   var $801=_cvErrorFromIppStatus($800);
   _cvError($801, ((7152)|0), ((7776)|0), ((14000)|0), 2531);
   label = 284; break;
  case 270: 
   label = 282; break;
  case 271: 
   var $804=$func2;
   var $805=(($804)|(0))!=0;
   if ($805) { label = 272; break; } else { label = 275; break; }
  case 272: 
   var $807=$func2;
   var $808=$src;
   var $809=(($808+16)|0);
   var $810=$809;
   var $811=HEAP32[(($810)>>2)];
   var $812=$src_step;
   var $813=$dst;
   var $814=(($813+16)|0);
   var $815=$814;
   var $816=HEAP32[(($815)>>2)];
   var $817=$dst_step;
   var $818=$7;
   var $819=$size;
   assert(8 % 1 === 0);HEAP32[(($818)>>2)]=HEAP32[(($819)>>2)];HEAP32[((($818)+(4))>>2)]=HEAP32[((($819)+(4))>>2)];
   var $820=(($param)|0);
   var $821=HEAP32[(($820)>>2)];
   var $822=(($param+4)|0);
   var $823=HEAP32[(($822)>>2)];
   var $824=FUNCTION_TABLE[$807]($811, $812, $816, $817, $7, $821, $823);
   $ippi_call_result2=$824;
   var $825=$ippi_call_result2;
   var $826=(($825)|(0)) < 0;
   if ($826) { label = 273; break; } else { label = 274; break; }
  case 273: 
   var $828=$ippi_call_result2;
   var $829=_cvErrorFromIppStatus($828);
   _cvError($829, ((7152)|0), ((7776)|0), ((14000)|0), 2536);
   label = 284; break;
  case 274: 
   label = 281; break;
  case 275: 
   var $832=$func3;
   var $833=(($832)|(0))!=0;
   if ($833) { label = 276; break; } else { label = 279; break; }
  case 276: 
   var $835=$func3;
   var $836=$src;
   var $837=(($836+16)|0);
   var $838=$837;
   var $839=HEAP32[(($838)>>2)];
   var $840=$src_step;
   var $841=$dst;
   var $842=(($841+16)|0);
   var $843=$842;
   var $844=HEAP32[(($843)>>2)];
   var $845=$dst_step;
   var $846=$8;
   var $847=$size;
   assert(8 % 1 === 0);HEAP32[(($846)>>2)]=HEAP32[(($847)>>2)];HEAP32[((($846)+(4))>>2)]=HEAP32[((($847)+(4))>>2)];
   var $848=(($param)|0);
   var $849=HEAP32[(($848)>>2)];
   var $850=(($param+4)|0);
   var $851=HEAP32[(($850)>>2)];
   var $852=(($param+8)|0);
   var $853=HEAP32[(($852)>>2)];
   var $854=FUNCTION_TABLE[$835]($839, $840, $844, $845, $8, $849, $851, $853);
   $ippi_call_result3=$854;
   var $855=$ippi_call_result3;
   var $856=(($855)|(0)) < 0;
   if ($856) { label = 277; break; } else { label = 278; break; }
  case 277: 
   var $858=$ippi_call_result3;
   var $859=_cvErrorFromIppStatus($858);
   _cvError($859, ((7152)|0), ((7776)|0), ((14000)|0), 2541);
   label = 284; break;
  case 278: 
   label = 280; break;
  case 279: 
   _cvError(-210, ((7152)|0), ((16128)|0), ((14000)|0), 2544);
   label = 284; break;
  case 280: 
   label = 281; break;
  case 281: 
   label = 282; break;
  case 282: 
   label = 283; break;
  case 283: 
   label = 284; break;
  case 284: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z12cvGetMatSizePK5CvMat($agg_result, $mat) {
 var label = 0;
 var $1;
 $1=$mat;
 var $2=(($agg_result)|0);
 var $3=$1;
 var $4=(($3+24)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 HEAP32[(($2)>>2)]=$6;
 var $7=(($agg_result+4)|0);
 var $8=$1;
 var $9=(($8+20)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 HEAP32[(($7)>>2)]=$11;
 return;
}
function __ZL20icvBGR2BGRx_8u_C3C4RPKhiPhi6CvSizei($src, $srcstep, $dst, $dststep, $size, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$blue_idx;
   var $6=$2;
   var $7=(((($6)>>>(0)))&-1);
   $2=$7;
   var $8=$4;
   var $9=(((($8)>>>(0)))&-1);
   $4=$9;
   var $10=(($size)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)*(3))&-1);
   var $13=$2;
   var $14=((($13)-($12))|0);
   $2=$14;
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=($16<<2);
   HEAP32[(($15)>>2)]=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $25=$i;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$5;
   var $31=$1;
   var $32=(($31+$30)|0);
   var $33=HEAP8[($32)];
   $t0=$33;
   var $34=$1;
   var $35=(($34+1)|0);
   var $36=HEAP8[($35)];
   $t1=$36;
   var $37=$5;
   var $38=$37 ^ 2;
   var $39=$1;
   var $40=(($39+$38)|0);
   var $41=HEAP8[($40)];
   $t2=$41;
   var $42=$t0;
   var $43=$i;
   var $44=$3;
   var $45=(($44+$43)|0);
   HEAP8[($45)]=$42;
   var $46=$t1;
   var $47=$i;
   var $48=((($47)+(1))|0);
   var $49=$3;
   var $50=(($49+$48)|0);
   HEAP8[($50)]=$46;
   var $51=$t2;
   var $52=$i;
   var $53=((($52)+(2))|0);
   var $54=$3;
   var $55=(($54+$53)|0);
   HEAP8[($55)]=$51;
   var $56=$i;
   var $57=((($56)+(3))|0);
   var $58=$3;
   var $59=(($58+$57)|0);
   HEAP8[($59)]=0;
   label = 6; break;
  case 6: 
   var $61=$i;
   var $62=((($61)+(4))|0);
   $i=$62;
   var $63=$1;
   var $64=(($63+3)|0);
   $1=$64;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $67=$2;
   var $68=$1;
   var $69=(($68+$67)|0);
   $1=$69;
   var $70=$4;
   var $71=$3;
   var $72=(($71+$70)|0);
   $3=$72;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGR2BGRx_16u_C3C4RPKtiPti6CvSizei($src, $srcstep, $dst, $dststep, $size, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$blue_idx;
   var $6=$2;
   var $7=((((($6)>>>(0)))/(2))&-1);
   $2=$7;
   var $8=$4;
   var $9=((((($8)>>>(0)))/(2))&-1);
   $4=$9;
   var $10=(($size)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)*(3))&-1);
   var $13=$2;
   var $14=((($13)-($12))|0);
   $2=$14;
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=($16<<2);
   HEAP32[(($15)>>2)]=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $25=$i;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$5;
   var $31=$1;
   var $32=(($31+($30<<1))|0);
   var $33=HEAP16[(($32)>>1)];
   $t0=$33;
   var $34=$1;
   var $35=(($34+2)|0);
   var $36=HEAP16[(($35)>>1)];
   $t1=$36;
   var $37=$5;
   var $38=$37 ^ 2;
   var $39=$1;
   var $40=(($39+($38<<1))|0);
   var $41=HEAP16[(($40)>>1)];
   $t2=$41;
   var $42=$t0;
   var $43=$i;
   var $44=$3;
   var $45=(($44+($43<<1))|0);
   HEAP16[(($45)>>1)]=$42;
   var $46=$t1;
   var $47=$i;
   var $48=((($47)+(1))|0);
   var $49=$3;
   var $50=(($49+($48<<1))|0);
   HEAP16[(($50)>>1)]=$46;
   var $51=$t2;
   var $52=$i;
   var $53=((($52)+(2))|0);
   var $54=$3;
   var $55=(($54+($53<<1))|0);
   HEAP16[(($55)>>1)]=$51;
   var $56=$i;
   var $57=((($56)+(3))|0);
   var $58=$3;
   var $59=(($58+($57<<1))|0);
   HEAP16[(($59)>>1)]=0;
   label = 6; break;
  case 6: 
   var $61=$i;
   var $62=((($61)+(4))|0);
   $i=$62;
   var $63=$1;
   var $64=(($63+6)|0);
   $1=$64;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $67=$2;
   var $68=$1;
   var $69=(($68+($67<<1))|0);
   $1=$69;
   var $70=$4;
   var $71=$3;
   var $72=(($71+($70<<1))|0);
   $3=$72;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGR2BGRx_32f_C3C4RPKiiPii6CvSizei($src, $srcstep, $dst, $dststep, $size, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$blue_idx;
   var $6=$2;
   var $7=((((($6)>>>(0)))/(4))&-1);
   $2=$7;
   var $8=$4;
   var $9=((((($8)>>>(0)))/(4))&-1);
   $4=$9;
   var $10=(($size)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)*(3))&-1);
   var $13=$2;
   var $14=((($13)-($12))|0);
   $2=$14;
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=($16<<2);
   HEAP32[(($15)>>2)]=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $25=$i;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$5;
   var $31=$1;
   var $32=(($31+($30<<2))|0);
   var $33=HEAP32[(($32)>>2)];
   $t0=$33;
   var $34=$1;
   var $35=(($34+4)|0);
   var $36=HEAP32[(($35)>>2)];
   $t1=$36;
   var $37=$5;
   var $38=$37 ^ 2;
   var $39=$1;
   var $40=(($39+($38<<2))|0);
   var $41=HEAP32[(($40)>>2)];
   $t2=$41;
   var $42=$t0;
   var $43=$i;
   var $44=$3;
   var $45=(($44+($43<<2))|0);
   HEAP32[(($45)>>2)]=$42;
   var $46=$t1;
   var $47=$i;
   var $48=((($47)+(1))|0);
   var $49=$3;
   var $50=(($49+($48<<2))|0);
   HEAP32[(($50)>>2)]=$46;
   var $51=$t2;
   var $52=$i;
   var $53=((($52)+(2))|0);
   var $54=$3;
   var $55=(($54+($53<<2))|0);
   HEAP32[(($55)>>2)]=$51;
   var $56=$i;
   var $57=((($56)+(3))|0);
   var $58=$3;
   var $59=(($58+($57<<2))|0);
   HEAP32[(($59)>>2)]=0;
   label = 6; break;
  case 6: 
   var $61=$i;
   var $62=((($61)+(4))|0);
   $i=$62;
   var $63=$1;
   var $64=(($63+12)|0);
   $1=$64;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $67=$2;
   var $68=$1;
   var $69=(($68+($67<<2))|0);
   $1=$69;
   var $70=$4;
   var $71=$3;
   var $72=(($71+($70<<2))|0);
   $3=$72;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRx2BGR_8u_CnC3RPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=(((($7)>>>(0)))&-1);
   $2=$8;
   var $9=$4;
   var $10=(((($9)>>>(0)))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+$32)|0);
   var $35=HEAP8[($34)];
   $t0=$35;
   var $36=$1;
   var $37=(($36+1)|0);
   var $38=HEAP8[($37)];
   $t1=$38;
   var $39=$6;
   var $40=$39 ^ 2;
   var $41=$1;
   var $42=(($41+$40)|0);
   var $43=HEAP8[($42)];
   $t2=$43;
   var $44=$t0;
   var $45=$i;
   var $46=$3;
   var $47=(($46+$45)|0);
   HEAP8[($47)]=$44;
   var $48=$t1;
   var $49=$i;
   var $50=((($49)+(1))|0);
   var $51=$3;
   var $52=(($51+$50)|0);
   HEAP8[($52)]=$48;
   var $53=$t2;
   var $54=$i;
   var $55=((($54)+(2))|0);
   var $56=$3;
   var $57=(($56+$55)|0);
   HEAP8[($57)]=$53;
   label = 6; break;
  case 6: 
   var $59=$i;
   var $60=((($59)+(3))|0);
   $i=$60;
   var $61=$5;
   var $62=$1;
   var $63=(($62+$61)|0);
   $1=$63;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $66=$2;
   var $67=$1;
   var $68=(($67+$66)|0);
   $1=$68;
   var $69=$4;
   var $70=$3;
   var $71=(($70+$69)|0);
   $3=$71;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2BGR_16u_CnC3RPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+($32<<1))|0);
   var $35=HEAP16[(($34)>>1)];
   $t0=$35;
   var $36=$1;
   var $37=(($36+2)|0);
   var $38=HEAP16[(($37)>>1)];
   $t1=$38;
   var $39=$6;
   var $40=$39 ^ 2;
   var $41=$1;
   var $42=(($41+($40<<1))|0);
   var $43=HEAP16[(($42)>>1)];
   $t2=$43;
   var $44=$t0;
   var $45=$i;
   var $46=$3;
   var $47=(($46+($45<<1))|0);
   HEAP16[(($47)>>1)]=$44;
   var $48=$t1;
   var $49=$i;
   var $50=((($49)+(1))|0);
   var $51=$3;
   var $52=(($51+($50<<1))|0);
   HEAP16[(($52)>>1)]=$48;
   var $53=$t2;
   var $54=$i;
   var $55=((($54)+(2))|0);
   var $56=$3;
   var $57=(($56+($55<<1))|0);
   HEAP16[(($57)>>1)]=$53;
   label = 6; break;
  case 6: 
   var $59=$i;
   var $60=((($59)+(3))|0);
   $i=$60;
   var $61=$5;
   var $62=$1;
   var $63=(($62+($61<<1))|0);
   $1=$63;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $66=$2;
   var $67=$1;
   var $68=(($67+($66<<1))|0);
   $1=$68;
   var $69=$4;
   var $70=$3;
   var $71=(($70+($69<<1))|0);
   $3=$71;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2BGR_32f_CnC3RPKiiPii6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAP32[(($34)>>2)];
   $t0=$35;
   var $36=$1;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   $t1=$38;
   var $39=$6;
   var $40=$39 ^ 2;
   var $41=$1;
   var $42=(($41+($40<<2))|0);
   var $43=HEAP32[(($42)>>2)];
   $t2=$43;
   var $44=$t0;
   var $45=$i;
   var $46=$3;
   var $47=(($46+($45<<2))|0);
   HEAP32[(($47)>>2)]=$44;
   var $48=$t1;
   var $49=$i;
   var $50=((($49)+(1))|0);
   var $51=$3;
   var $52=(($51+($50<<2))|0);
   HEAP32[(($52)>>2)]=$48;
   var $53=$t2;
   var $54=$i;
   var $55=((($54)+(2))|0);
   var $56=$3;
   var $57=(($56+($55<<2))|0);
   HEAP32[(($57)>>2)]=$53;
   label = 6; break;
  case 6: 
   var $59=$i;
   var $60=((($59)+(3))|0);
   $i=$60;
   var $61=$5;
   var $62=$1;
   var $63=(($62+($61<<2))|0);
   $1=$63;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $66=$2;
   var $67=$1;
   var $68=(($67+($66<<2))|0);
   $1=$68;
   var $69=$4;
   var $70=$3;
   var $71=(($70+($69<<2))|0);
   $3=$71;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvBGRA2RGBA_8u_C4RPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   var $t3;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$2;
   var $6=(((($5)>>>(0)))&-1);
   $2=$6;
   var $7=$4;
   var $8=(((($7)>>>(0)))&-1);
   $4=$8;
   var $9=(($size)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=($10<<2);
   HEAP32[(($9)>>2)]=$11;
   label = 2; break;
  case 2: 
   var $13=(($size+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=((($14)-(1))|0);
   HEAP32[(($13)>>2)]=$15;
   var $16=(($14)|(0))!=0;
   if ($16) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $19=$i;
   var $20=(($size)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($19)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$1;
   var $25=(($24+2)|0);
   var $26=HEAP8[($25)];
   $t0=$26;
   var $27=$1;
   var $28=(($27+1)|0);
   var $29=HEAP8[($28)];
   $t1=$29;
   var $30=$1;
   var $31=(($30)|0);
   var $32=HEAP8[($31)];
   $t2=$32;
   var $33=$1;
   var $34=(($33+3)|0);
   var $35=HEAP8[($34)];
   $t3=$35;
   var $36=$t0;
   var $37=$i;
   var $38=$3;
   var $39=(($38+$37)|0);
   HEAP8[($39)]=$36;
   var $40=$t1;
   var $41=$i;
   var $42=((($41)+(1))|0);
   var $43=$3;
   var $44=(($43+$42)|0);
   HEAP8[($44)]=$40;
   var $45=$t2;
   var $46=$i;
   var $47=((($46)+(2))|0);
   var $48=$3;
   var $49=(($48+$47)|0);
   HEAP8[($49)]=$45;
   var $50=$t3;
   var $51=$i;
   var $52=((($51)+(3))|0);
   var $53=$3;
   var $54=(($53+$52)|0);
   HEAP8[($54)]=$50;
   label = 6; break;
  case 6: 
   var $56=$i;
   var $57=((($56)+(4))|0);
   $i=$57;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $60=$2;
   var $61=$1;
   var $62=(($61+$60)|0);
   $1=$62;
   var $63=$4;
   var $64=$3;
   var $65=(($64+$63)|0);
   $3=$65;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRA2RGBA_16u_C4RPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   var $t3;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$2;
   var $6=((((($5)>>>(0)))/(2))&-1);
   $2=$6;
   var $7=$4;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $4=$8;
   var $9=(($size)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=($10<<2);
   HEAP32[(($9)>>2)]=$11;
   label = 2; break;
  case 2: 
   var $13=(($size+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=((($14)-(1))|0);
   HEAP32[(($13)>>2)]=$15;
   var $16=(($14)|(0))!=0;
   if ($16) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $19=$i;
   var $20=(($size)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($19)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$1;
   var $25=(($24+4)|0);
   var $26=HEAP16[(($25)>>1)];
   $t0=$26;
   var $27=$1;
   var $28=(($27+2)|0);
   var $29=HEAP16[(($28)>>1)];
   $t1=$29;
   var $30=$1;
   var $31=(($30)|0);
   var $32=HEAP16[(($31)>>1)];
   $t2=$32;
   var $33=$1;
   var $34=(($33+6)|0);
   var $35=HEAP16[(($34)>>1)];
   $t3=$35;
   var $36=$t0;
   var $37=$i;
   var $38=$3;
   var $39=(($38+($37<<1))|0);
   HEAP16[(($39)>>1)]=$36;
   var $40=$t1;
   var $41=$i;
   var $42=((($41)+(1))|0);
   var $43=$3;
   var $44=(($43+($42<<1))|0);
   HEAP16[(($44)>>1)]=$40;
   var $45=$t2;
   var $46=$i;
   var $47=((($46)+(2))|0);
   var $48=$3;
   var $49=(($48+($47<<1))|0);
   HEAP16[(($49)>>1)]=$45;
   var $50=$t3;
   var $51=$i;
   var $52=((($51)+(3))|0);
   var $53=$3;
   var $54=(($53+($52<<1))|0);
   HEAP16[(($54)>>1)]=$50;
   label = 6; break;
  case 6: 
   var $56=$i;
   var $57=((($56)+(4))|0);
   $i=$57;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $60=$2;
   var $61=$1;
   var $62=(($61+($60<<1))|0);
   $1=$62;
   var $63=$4;
   var $64=$3;
   var $65=(($64+($63<<1))|0);
   $3=$65;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRA2RGBA_32f_C4RPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   var $t3;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$2;
   var $6=((((($5)>>>(0)))/(4))&-1);
   $2=$6;
   var $7=$4;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $4=$8;
   var $9=(($size)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=($10<<2);
   HEAP32[(($9)>>2)]=$11;
   label = 2; break;
  case 2: 
   var $13=(($size+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=((($14)-(1))|0);
   HEAP32[(($13)>>2)]=$15;
   var $16=(($14)|(0))!=0;
   if ($16) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $19=$i;
   var $20=(($size)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($19)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$1;
   var $25=(($24+8)|0);
   var $26=HEAP32[(($25)>>2)];
   $t0=$26;
   var $27=$1;
   var $28=(($27+4)|0);
   var $29=HEAP32[(($28)>>2)];
   $t1=$29;
   var $30=$1;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   $t2=$32;
   var $33=$1;
   var $34=(($33+12)|0);
   var $35=HEAP32[(($34)>>2)];
   $t3=$35;
   var $36=$t0;
   var $37=$i;
   var $38=$3;
   var $39=(($38+($37<<2))|0);
   HEAP32[(($39)>>2)]=$36;
   var $40=$t1;
   var $41=$i;
   var $42=((($41)+(1))|0);
   var $43=$3;
   var $44=(($43+($42<<2))|0);
   HEAP32[(($44)>>2)]=$40;
   var $45=$t2;
   var $46=$i;
   var $47=((($46)+(2))|0);
   var $48=$3;
   var $49=(($48+($47<<2))|0);
   HEAP32[(($49)>>2)]=$45;
   var $50=$t3;
   var $51=$i;
   var $52=((($51)+(3))|0);
   var $53=$3;
   var $54=(($53+($52<<2))|0);
   HEAP32[(($54)>>2)]=$50;
   label = 6; break;
  case 6: 
   var $56=$i;
   var $57=((($56)+(4))|0);
   $i=$57;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $60=$2;
   var $61=$1;
   var $62=(($61+($60<<2))|0);
   $1=$62;
   var $63=$4;
   var $64=$3;
   var $65=(($64+($63<<2))|0);
   $3=$65;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL23icvBGRx2BGR5x5_8u_CnC2RPKhiPhi6CvSizeiii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx, $green_bits) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $t;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   $7=$green_bits;
   var $8=(($size)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$5;
   var $11=(Math.imul($9,$10)|0);
   var $12=$2;
   var $13=((($12)-($11))|0);
   $2=$13;
   label = 2; break;
  case 2: 
   var $15=(($size+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=((($16)-(1))|0);
   HEAP32[(($15)>>2)]=$17;
   var $18=(($16)|(0))!=0;
   if ($18) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $20=$7;
   var $21=(($20)|(0))==6;
   if ($21) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $24=$i;
   var $25=(($size)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($24)|(0)) < (($26)|(0));
   if ($27) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $29=$6;
   var $30=$1;
   var $31=(($30+$29)|0);
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   var $34=$33 >> 3;
   var $35=$1;
   var $36=(($35+1)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   var $39=$38 & -4;
   var $40=$39 << 3;
   var $41=$34 | $40;
   var $42=$6;
   var $43=$42 ^ 2;
   var $44=$1;
   var $45=(($44+$43)|0);
   var $46=HEAP8[($45)];
   var $47=(($46)&(255));
   var $48=$47 & -8;
   var $49=$48 << 8;
   var $50=$41 | $49;
   $t=$50;
   var $51=$t;
   var $52=(($51) & 65535);
   var $53=$i;
   var $54=$3;
   var $55=$54;
   var $56=(($55+($53<<1))|0);
   HEAP16[(($56)>>1)]=$52;
   label = 7; break;
  case 7: 
   var $58=$i;
   var $59=((($58)+(1))|0);
   $i=$59;
   var $60=$5;
   var $61=$1;
   var $62=(($61+$60)|0);
   $1=$62;
   label = 5; break;
  case 8: 
   label = 14; break;
  case 9: 
   $i=0;
   label = 10; break;
  case 10: 
   var $66=$i;
   var $67=(($size)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($66)|(0)) < (($68)|(0));
   if ($69) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $71=$6;
   var $72=$1;
   var $73=(($72+$71)|0);
   var $74=HEAP8[($73)];
   var $75=(($74)&(255));
   var $76=$75 >> 3;
   var $77=$1;
   var $78=(($77+1)|0);
   var $79=HEAP8[($78)];
   var $80=(($79)&(255));
   var $81=$80 & -8;
   var $82=$81 << 2;
   var $83=$76 | $82;
   var $84=$6;
   var $85=$84 ^ 2;
   var $86=$1;
   var $87=(($86+$85)|0);
   var $88=HEAP8[($87)];
   var $89=(($88)&(255));
   var $90=$89 & -8;
   var $91=$90 << 7;
   var $92=$83 | $91;
   $t1=$92;
   var $93=$t1;
   var $94=(($93) & 65535);
   var $95=$i;
   var $96=$3;
   var $97=$96;
   var $98=(($97+($95<<1))|0);
   HEAP16[(($98)>>1)]=$94;
   label = 12; break;
  case 12: 
   var $100=$i;
   var $101=((($100)+(1))|0);
   $i=$101;
   var $102=$5;
   var $103=$1;
   var $104=(($103+$102)|0);
   $1=$104;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $108=$2;
   var $109=$1;
   var $110=(($109+$108)|0);
   $1=$110;
   var $111=$4;
   var $112=$3;
   var $113=(($112+$111)|0);
   $3=$113;
   label = 2; break;
  case 16: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL23icvBGR5x52BGRx_8u_C2CnRPKhiPhi6CvSizeiii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx, $green_bits) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $t;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   $6=$blue_idx;
   $7=$green_bits;
   var $8=(($size)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$5;
   var $11=(Math.imul($9,$10)|0);
   var $12=$4;
   var $13=((($12)-($11))|0);
   $4=$13;
   label = 2; break;
  case 2: 
   var $15=(($size+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=((($16)-(1))|0);
   HEAP32[(($15)>>2)]=$17;
   var $18=(($16)|(0))!=0;
   if ($18) { label = 3; break; } else { label = 20; break; }
  case 3: 
   var $20=$7;
   var $21=(($20)|(0))==6;
   if ($21) { label = 4; break; } else { label = 11; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $24=$i;
   var $25=(($size)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($24)|(0)) < (($26)|(0));
   if ($27) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $29=$i;
   var $30=$1;
   var $31=$30;
   var $32=(($31+($29<<1))|0);
   var $33=HEAP16[(($32)>>1)];
   var $34=(($33)&(65535));
   $t=$34;
   var $35=$t;
   var $36=$35 << 3;
   var $37=(($36) & 255);
   var $38=$6;
   var $39=$3;
   var $40=(($39+$38)|0);
   HEAP8[($40)]=$37;
   var $41=$t;
   var $42=$41 >>> 3;
   var $43=$42 & -4;
   var $44=(($43) & 255);
   var $45=$3;
   var $46=(($45+1)|0);
   HEAP8[($46)]=$44;
   var $47=$t;
   var $48=$47 >>> 8;
   var $49=$48 & -8;
   var $50=(($49) & 255);
   var $51=$6;
   var $52=$51 ^ 2;
   var $53=$3;
   var $54=(($53+$52)|0);
   HEAP8[($54)]=$50;
   var $55=$5;
   var $56=(($55)|(0))==4;
   if ($56) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $58=$3;
   var $59=(($58+3)|0);
   HEAP8[($59)]=0;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $62=$i;
   var $63=((($62)+(1))|0);
   $i=$63;
   var $64=$5;
   var $65=$3;
   var $66=(($65+$64)|0);
   $3=$66;
   label = 5; break;
  case 10: 
   label = 18; break;
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $70=$i;
   var $71=(($size)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($70)|(0)) < (($72)|(0));
   if ($73) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $75=$i;
   var $76=$1;
   var $77=$76;
   var $78=(($77+($75<<1))|0);
   var $79=HEAP16[(($78)>>1)];
   var $80=(($79)&(65535));
   $t1=$80;
   var $81=$t1;
   var $82=$81 << 3;
   var $83=(($82) & 255);
   var $84=$6;
   var $85=$3;
   var $86=(($85+$84)|0);
   HEAP8[($86)]=$83;
   var $87=$t1;
   var $88=$87 >>> 2;
   var $89=$88 & -8;
   var $90=(($89) & 255);
   var $91=$3;
   var $92=(($91+1)|0);
   HEAP8[($92)]=$90;
   var $93=$t1;
   var $94=$93 >>> 7;
   var $95=$94 & -8;
   var $96=(($95) & 255);
   var $97=$6;
   var $98=$97 ^ 2;
   var $99=$3;
   var $100=(($99+$98)|0);
   HEAP8[($100)]=$96;
   var $101=$5;
   var $102=(($101)|(0))==4;
   if ($102) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $104=$3;
   var $105=(($104+3)|0);
   HEAP8[($105)]=0;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $108=$i;
   var $109=((($108)+(1))|0);
   $i=$109;
   var $110=$5;
   var $111=$3;
   var $112=(($111+$110)|0);
   $3=$112;
   label = 12; break;
  case 17: 
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $116=$2;
   var $117=$1;
   var $118=(($117+$116)|0);
   $1=$118;
   var $119=$4;
   var $120=$3;
   var $121=(($120+$119)|0);
   $3=$121;
   label = 2; break;
  case 20: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL22icvBGRx2Gray_16u_CnC1RPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $cb;
   var $cr;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   $cb=1868;
   $cr=4899;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=$6;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $cb=4899;
   $cr=1868;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 5; break; } else { label = 11; break; }
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $28=$i;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $33=$1;
   var $34=(($33)|0);
   var $35=HEAP16[(($34)>>1)];
   var $36=(($35)&(65535));
   var $37=$cb;
   var $38=(Math.imul($36,$37)|0);
   var $39=$1;
   var $40=(($39+2)|0);
   var $41=HEAP16[(($40)>>1)];
   var $42=(($41)&(65535));
   var $43=((($42)*(9617))&-1);
   var $44=((($38)+($43))|0);
   var $45=$1;
   var $46=(($45+4)|0);
   var $47=HEAP16[(($46)>>1)];
   var $48=(($47)&(65535));
   var $49=$cr;
   var $50=(Math.imul($48,$49)|0);
   var $51=((($44)+($50))|0);
   var $52=((($51)+(8192))|0);
   var $53=$52 >>> 14;
   var $54=(($53) & 65535);
   var $55=$i;
   var $56=$3;
   var $57=(($56+($55<<1))|0);
   HEAP16[(($57)>>1)]=$54;
   label = 8; break;
  case 8: 
   var $59=$i;
   var $60=((($59)+(1))|0);
   $i=$60;
   var $61=$5;
   var $62=$1;
   var $63=(($62+($61<<1))|0);
   $1=$63;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $66=$2;
   var $67=$1;
   var $68=(($67+($66<<1))|0);
   $1=$68;
   var $69=$4;
   var $70=$3;
   var $71=(($70+($69<<1))|0);
   $3=$71;
   label = 4; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL22icvBGRx2Gray_32f_CnC1RPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $cb;
   var $cr;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   $cb=0.11400000005960464;
   $cr=0.29899999499320984;
   var $7=$6;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $cb=0.29899999499320984;
   $cr=0.11400000005960464;
   label = 3; break;
  case 3: 
   var $11=$2;
   var $12=((((($11)>>>(0)))/(4))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(4))&-1);
   $4=$14;
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$5;
   var $18=(Math.imul($16,$17)|0);
   var $19=$2;
   var $20=((($19)-($18))|0);
   $2=$20;
   label = 4; break;
  case 4: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 5; break; } else { label = 11; break; }
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $28=$i;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $33=$1;
   var $34=(($33)|0);
   var $35=HEAPF32[(($34)>>2)];
   var $36=$cb;
   var $37=($35)*($36);
   var $38=$1;
   var $39=(($38+4)|0);
   var $40=HEAPF32[(($39)>>2)];
   var $41=($40)*(0.5870000123977661);
   var $42=($37)+($41);
   var $43=$1;
   var $44=(($43+8)|0);
   var $45=HEAPF32[(($44)>>2)];
   var $46=$cr;
   var $47=($45)*($46);
   var $48=($42)+($47);
   var $49=$i;
   var $50=$3;
   var $51=(($50+($49<<2))|0);
   HEAPF32[(($51)>>2)]=$48;
   label = 8; break;
  case 8: 
   var $53=$i;
   var $54=((($53)+(1))|0);
   $i=$54;
   var $55=$5;
   var $56=$1;
   var $57=(($56+($55<<2))|0);
   $1=$57;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $60=$2;
   var $61=$1;
   var $62=(($61+($60<<2))|0);
   $1=$62;
   var $63=$4;
   var $64=$3;
   var $65=(($64+($63<<2))|0);
   $3=$65;
   label = 4; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2Gray_8u_CnC1RPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $tab;
   var $r;
   var $g;
   var $b;
   var $t0;
   var $t01;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=(($size)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$5;
   var $10=(Math.imul($8,$9)|0);
   var $11=$2;
   var $12=((($11)-($10))|0);
   $2=$12;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($size+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(Math.imul($14,$16)|0);
   var $18=(($17)|(0)) >= 1024;
   if ($18) { label = 2; break; } else { label = 18; break; }
  case 2: 
   var $20=STACKTOP;STACKTOP = (STACKTOP + 3104)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $21=__Z10cvAlignPtrPKvi($20, 32);
   var $22=$21;
   $tab=$22;
   $r=0;
   $g=0;
   $b=8192;
   $i=0;
   label = 3; break;
  case 3: 
   var $24=$i;
   var $25=(($24)|(0)) < 256;
   if ($25) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $27=$b;
   var $28=$i;
   var $29=$tab;
   var $30=(($29+($28<<2))|0);
   HEAP32[(($30)>>2)]=$27;
   var $31=$g;
   var $32=$i;
   var $33=((($32)+(256))|0);
   var $34=$tab;
   var $35=(($34+($33<<2))|0);
   HEAP32[(($35)>>2)]=$31;
   var $36=$r;
   var $37=$i;
   var $38=((($37)+(512))|0);
   var $39=$tab;
   var $40=(($39+($38<<2))|0);
   HEAP32[(($40)>>2)]=$36;
   var $41=$g;
   var $42=((($41)+(9617))|0);
   $g=$42;
   var $43=$6;
   var $44=(($43)|(0))!=0;
   if ($44) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $46=$b;
   var $47=((($46)+(1868))|0);
   $b=$47;
   var $48=$r;
   var $49=((($48)+(4899))|0);
   $r=$49;
   label = 7; break;
  case 6: 
   var $51=$b;
   var $52=((($51)+(4899))|0);
   $b=$52;
   var $53=$r;
   var $54=((($53)+(1868))|0);
   $r=$54;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $57=$i;
   var $58=((($57)+(1))|0);
   $i=$58;
   label = 3; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $61=(($size+4)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=((($62)-(1))|0);
   HEAP32[(($61)>>2)]=$63;
   var $64=(($62)|(0))!=0;
   if ($64) { label = 11; break; } else { label = 17; break; }
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $67=$i;
   var $68=(($size)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($67)|(0)) < (($69)|(0));
   if ($70) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $72=$1;
   var $73=(($72)|0);
   var $74=HEAP8[($73)];
   var $75=(($74)&(255));
   var $76=$tab;
   var $77=(($76+($75<<2))|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$1;
   var $80=(($79+1)|0);
   var $81=HEAP8[($80)];
   var $82=(($81)&(255));
   var $83=((($82)+(256))|0);
   var $84=$tab;
   var $85=(($84+($83<<2))|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=((($78)+($86))|0);
   var $88=$1;
   var $89=(($88+2)|0);
   var $90=HEAP8[($89)];
   var $91=(($90)&(255));
   var $92=((($91)+(512))|0);
   var $93=$tab;
   var $94=(($93+($92<<2))|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=((($87)+($95))|0);
   $t0=$96;
   var $97=$t0;
   var $98=$97 >> 14;
   var $99=(($98) & 255);
   var $100=$i;
   var $101=$3;
   var $102=(($101+$100)|0);
   HEAP8[($102)]=$99;
   label = 14; break;
  case 14: 
   var $104=$i;
   var $105=((($104)+(1))|0);
   $i=$105;
   var $106=$5;
   var $107=$1;
   var $108=(($107+$106)|0);
   $1=$108;
   label = 12; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $111=$2;
   var $112=$1;
   var $113=(($112+$111)|0);
   $1=$113;
   var $114=$4;
   var $115=$3;
   var $116=(($115+$114)|0);
   $3=$116;
   label = 10; break;
  case 17: 
   label = 27; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $120=(($size+4)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=((($121)-(1))|0);
   HEAP32[(($120)>>2)]=$122;
   var $123=(($121)|(0))!=0;
   if ($123) { label = 20; break; } else { label = 26; break; }
  case 20: 
   $i=0;
   label = 21; break;
  case 21: 
   var $126=$i;
   var $127=(($size)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($126)|(0)) < (($128)|(0));
   if ($129) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $131=$6;
   var $132=$1;
   var $133=(($132+$131)|0);
   var $134=HEAP8[($133)];
   var $135=(($134)&(255));
   var $136=((($135)*(1868))&-1);
   var $137=$1;
   var $138=(($137+1)|0);
   var $139=HEAP8[($138)];
   var $140=(($139)&(255));
   var $141=((($140)*(9617))&-1);
   var $142=((($136)+($141))|0);
   var $143=$6;
   var $144=$143 ^ 2;
   var $145=$1;
   var $146=(($145+$144)|0);
   var $147=HEAP8[($146)];
   var $148=(($147)&(255));
   var $149=((($148)*(4899))&-1);
   var $150=((($142)+($149))|0);
   $t01=$150;
   var $151=$t01;
   var $152=((($151)+(8192))|0);
   var $153=$152 >> 14;
   var $154=(($153) & 255);
   var $155=$i;
   var $156=$3;
   var $157=(($156+$155)|0);
   HEAP8[($157)]=$154;
   label = 23; break;
  case 23: 
   var $159=$i;
   var $160=((($159)+(1))|0);
   $i=$160;
   var $161=$5;
   var $162=$1;
   var $163=(($162+$161)|0);
   $1=$163;
   label = 21; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $166=$2;
   var $167=$1;
   var $168=(($167+$166)|0);
   $1=$168;
   var $169=$4;
   var $170=$3;
   var $171=(($170+$169)|0);
   $3=$171;
   label = 19; break;
  case 26: 
   label = 27; break;
  case 27: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL23icvBGR5x52Gray_8u_C2C1RPKhiPhi6CvSizei($src, $srcstep, $dst, $dststep, $size, $green_bits) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$green_bits;
   label = 2; break;
  case 2: 
   var $7=(($size+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=((($8)-(1))|0);
   HEAP32[(($7)>>2)]=$9;
   var $10=(($8)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $12=$5;
   var $13=(($12)|(0))==6;
   if ($13) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $16=$i;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($16)|(0)) < (($18)|(0));
   if ($19) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $21=$i;
   var $22=$1;
   var $23=$22;
   var $24=(($23+($21<<1))|0);
   var $25=HEAP16[(($24)>>1)];
   var $26=(($25)&(65535));
   $t=$26;
   var $27=$t;
   var $28=$27 << 3;
   var $29=$28 & 248;
   var $30=((($29)*(1868))&-1);
   var $31=$t;
   var $32=$31 >> 3;
   var $33=$32 & 252;
   var $34=((($33)*(9617))&-1);
   var $35=((($30)+($34))|0);
   var $36=$t;
   var $37=$36 >> 8;
   var $38=$37 & 248;
   var $39=((($38)*(4899))&-1);
   var $40=((($35)+($39))|0);
   $t=$40;
   var $41=$t;
   var $42=((($41)+(8192))|0);
   var $43=$42 >> 14;
   var $44=(($43) & 255);
   var $45=$i;
   var $46=$3;
   var $47=(($46+$45)|0);
   HEAP8[($47)]=$44;
   label = 7; break;
  case 7: 
   var $49=$i;
   var $50=((($49)+(1))|0);
   $i=$50;
   label = 5; break;
  case 8: 
   label = 14; break;
  case 9: 
   $i=0;
   label = 10; break;
  case 10: 
   var $54=$i;
   var $55=(($size)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($54)|(0)) < (($56)|(0));
   if ($57) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $59=$i;
   var $60=$1;
   var $61=$60;
   var $62=(($61+($59<<1))|0);
   var $63=HEAP16[(($62)>>1)];
   var $64=(($63)&(65535));
   $t1=$64;
   var $65=$t1;
   var $66=$65 << 3;
   var $67=$66 & 248;
   var $68=((($67)*(1868))&-1);
   var $69=$t1;
   var $70=$69 >> 2;
   var $71=$70 & 248;
   var $72=((($71)*(9617))&-1);
   var $73=((($68)+($72))|0);
   var $74=$t1;
   var $75=$74 >> 7;
   var $76=$75 & 248;
   var $77=((($76)*(4899))&-1);
   var $78=((($73)+($77))|0);
   $t1=$78;
   var $79=$t1;
   var $80=((($79)+(8192))|0);
   var $81=$80 >> 14;
   var $82=(($81) & 255);
   var $83=$i;
   var $84=$3;
   var $85=(($84+$83)|0);
   HEAP8[($85)]=$82;
   label = 12; break;
  case 12: 
   var $87=$i;
   var $88=((($87)+(1))|0);
   $i=$88;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $92=$2;
   var $93=$1;
   var $94=(($93+$92)|0);
   $1=$94;
   var $95=$4;
   var $96=$3;
   var $97=(($96+$95)|0);
   $3=$97;
   label = 2; break;
  case 16: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvGray2BGRx_8u_C1CnRPKhiPhi6CvSizei($src, $srcstep, $dst, $dststep, $size, $dst_cn) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   var $6=$2;
   var $7=(((($6)>>>(0)))&-1);
   $2=$7;
   var $8=$4;
   var $9=(((($8)>>>(0)))&-1);
   $4=$9;
   var $10=(($size)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$5;
   var $13=(Math.imul($11,$12)|0);
   var $14=$4;
   var $15=((($14)-($13))|0);
   $4=$15;
   label = 2; break;
  case 2: 
   var $17=(($size+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)-(1))|0);
   HEAP32[(($17)>>2)]=$19;
   var $20=(($18)|(0))!=0;
   if ($20) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $22=$5;
   var $23=(($22)|(0))==3;
   if ($23) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $26=$i;
   var $27=(($size)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($26)|(0)) < (($28)|(0));
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $31=$i;
   var $32=$1;
   var $33=(($32+$31)|0);
   var $34=HEAP8[($33)];
   var $35=$3;
   var $36=(($35+2)|0);
   HEAP8[($36)]=$34;
   var $37=$3;
   var $38=(($37+1)|0);
   HEAP8[($38)]=$34;
   var $39=$3;
   var $40=(($39)|0);
   HEAP8[($40)]=$34;
   label = 7; break;
  case 7: 
   var $42=$i;
   var $43=((($42)+(1))|0);
   $i=$43;
   var $44=$3;
   var $45=(($44+3)|0);
   $3=$45;
   label = 5; break;
  case 8: 
   label = 14; break;
  case 9: 
   $i=0;
   label = 10; break;
  case 10: 
   var $49=$i;
   var $50=(($size)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0)) < (($51)|(0));
   if ($52) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $54=$i;
   var $55=$1;
   var $56=(($55+$54)|0);
   var $57=HEAP8[($56)];
   var $58=$3;
   var $59=(($58+2)|0);
   HEAP8[($59)]=$57;
   var $60=$3;
   var $61=(($60+1)|0);
   HEAP8[($61)]=$57;
   var $62=$3;
   var $63=(($62)|0);
   HEAP8[($63)]=$57;
   var $64=$3;
   var $65=(($64+3)|0);
   HEAP8[($65)]=0;
   label = 12; break;
  case 12: 
   var $67=$i;
   var $68=((($67)+(1))|0);
   $i=$68;
   var $69=$3;
   var $70=(($69+4)|0);
   $3=$70;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $74=$2;
   var $75=$1;
   var $76=(($75+$74)|0);
   $1=$76;
   var $77=$4;
   var $78=$3;
   var $79=(($78+$77)|0);
   $3=$79;
   label = 2; break;
  case 16: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL22icvGray2BGRx_16u_C1CnRPKtiPti6CvSizei($src, $srcstep, $dst, $dststep, $size, $dst_cn) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   var $6=$2;
   var $7=((((($6)>>>(0)))/(2))&-1);
   $2=$7;
   var $8=$4;
   var $9=((((($8)>>>(0)))/(2))&-1);
   $4=$9;
   var $10=(($size)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$5;
   var $13=(Math.imul($11,$12)|0);
   var $14=$4;
   var $15=((($14)-($13))|0);
   $4=$15;
   label = 2; break;
  case 2: 
   var $17=(($size+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)-(1))|0);
   HEAP32[(($17)>>2)]=$19;
   var $20=(($18)|(0))!=0;
   if ($20) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $22=$5;
   var $23=(($22)|(0))==3;
   if ($23) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $26=$i;
   var $27=(($size)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($26)|(0)) < (($28)|(0));
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $31=$i;
   var $32=$1;
   var $33=(($32+($31<<1))|0);
   var $34=HEAP16[(($33)>>1)];
   var $35=$3;
   var $36=(($35+4)|0);
   HEAP16[(($36)>>1)]=$34;
   var $37=$3;
   var $38=(($37+2)|0);
   HEAP16[(($38)>>1)]=$34;
   var $39=$3;
   var $40=(($39)|0);
   HEAP16[(($40)>>1)]=$34;
   label = 7; break;
  case 7: 
   var $42=$i;
   var $43=((($42)+(1))|0);
   $i=$43;
   var $44=$3;
   var $45=(($44+6)|0);
   $3=$45;
   label = 5; break;
  case 8: 
   label = 14; break;
  case 9: 
   $i=0;
   label = 10; break;
  case 10: 
   var $49=$i;
   var $50=(($size)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0)) < (($51)|(0));
   if ($52) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $54=$i;
   var $55=$1;
   var $56=(($55+($54<<1))|0);
   var $57=HEAP16[(($56)>>1)];
   var $58=$3;
   var $59=(($58+4)|0);
   HEAP16[(($59)>>1)]=$57;
   var $60=$3;
   var $61=(($60+2)|0);
   HEAP16[(($61)>>1)]=$57;
   var $62=$3;
   var $63=(($62)|0);
   HEAP16[(($63)>>1)]=$57;
   var $64=$3;
   var $65=(($64+6)|0);
   HEAP16[(($65)>>1)]=0;
   label = 12; break;
  case 12: 
   var $67=$i;
   var $68=((($67)+(1))|0);
   $i=$68;
   var $69=$3;
   var $70=(($69+8)|0);
   $3=$70;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $74=$2;
   var $75=$1;
   var $76=(($75+($74<<1))|0);
   $1=$76;
   var $77=$4;
   var $78=$3;
   var $79=(($78+($77<<1))|0);
   $3=$79;
   label = 2; break;
  case 16: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL22icvGray2BGRx_32f_C1CnRPKfiPfi6CvSizei($src, $srcstep, $dst, $dststep, $size, $dst_cn) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   var $6=$2;
   var $7=((((($6)>>>(0)))/(4))&-1);
   $2=$7;
   var $8=$4;
   var $9=((((($8)>>>(0)))/(4))&-1);
   $4=$9;
   var $10=(($size)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$5;
   var $13=(Math.imul($11,$12)|0);
   var $14=$4;
   var $15=((($14)-($13))|0);
   $4=$15;
   label = 2; break;
  case 2: 
   var $17=(($size+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)-(1))|0);
   HEAP32[(($17)>>2)]=$19;
   var $20=(($18)|(0))!=0;
   if ($20) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $22=$5;
   var $23=(($22)|(0))==3;
   if ($23) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $26=$i;
   var $27=(($size)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($26)|(0)) < (($28)|(0));
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $31=$i;
   var $32=$1;
   var $33=(($32+($31<<2))|0);
   var $34=HEAPF32[(($33)>>2)];
   var $35=$3;
   var $36=(($35+8)|0);
   HEAPF32[(($36)>>2)]=$34;
   var $37=$3;
   var $38=(($37+4)|0);
   HEAPF32[(($38)>>2)]=$34;
   var $39=$3;
   var $40=(($39)|0);
   HEAPF32[(($40)>>2)]=$34;
   label = 7; break;
  case 7: 
   var $42=$i;
   var $43=((($42)+(1))|0);
   $i=$43;
   var $44=$3;
   var $45=(($44+12)|0);
   $3=$45;
   label = 5; break;
  case 8: 
   label = 14; break;
  case 9: 
   $i=0;
   label = 10; break;
  case 10: 
   var $49=$i;
   var $50=(($size)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($49)|(0)) < (($51)|(0));
   if ($52) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $54=$i;
   var $55=$1;
   var $56=(($55+($54<<2))|0);
   var $57=HEAPF32[(($56)>>2)];
   var $58=$3;
   var $59=(($58+8)|0);
   HEAPF32[(($59)>>2)]=$57;
   var $60=$3;
   var $61=(($60+4)|0);
   HEAPF32[(($61)>>2)]=$57;
   var $62=$3;
   var $63=(($62)|0);
   HEAPF32[(($63)>>2)]=$57;
   var $64=$3;
   var $65=(($64+12)|0);
   HEAPF32[(($65)>>2)]=0;
   label = 12; break;
  case 12: 
   var $67=$i;
   var $68=((($67)+(1))|0);
   $i=$68;
   var $69=$3;
   var $70=(($69+16)|0);
   $3=$70;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $74=$2;
   var $75=$1;
   var $76=(($75+($74<<2))|0);
   $1=$76;
   var $77=$4;
   var $78=$3;
   var $79=(($78+($77<<2))|0);
   $3=$79;
   label = 2; break;
  case 16: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL23icvGray2BGR5x5_8u_C1C2RPKhiPhi6CvSizei($src, $srcstep, $dst, $dststep, $size, $green_bits) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$green_bits;
   label = 2; break;
  case 2: 
   var $7=(($size+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=((($8)-(1))|0);
   HEAP32[(($7)>>2)]=$9;
   var $10=(($8)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $12=$5;
   var $13=(($12)|(0))==6;
   if ($13) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $16=$i;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($16)|(0)) < (($18)|(0));
   if ($19) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $21=$i;
   var $22=$1;
   var $23=(($22+$21)|0);
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   $t=$25;
   var $26=$t;
   var $27=$26 >> 3;
   var $28=$t;
   var $29=$28 & -4;
   var $30=$29 << 3;
   var $31=$27 | $30;
   var $32=$t;
   var $33=$32 & -8;
   var $34=$33 << 8;
   var $35=$31 | $34;
   var $36=(($35) & 65535);
   var $37=$i;
   var $38=$3;
   var $39=$38;
   var $40=(($39+($37<<1))|0);
   HEAP16[(($40)>>1)]=$36;
   label = 7; break;
  case 7: 
   var $42=$i;
   var $43=((($42)+(1))|0);
   $i=$43;
   label = 5; break;
  case 8: 
   label = 14; break;
  case 9: 
   $i=0;
   label = 10; break;
  case 10: 
   var $47=$i;
   var $48=(($size)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($47)|(0)) < (($49)|(0));
   if ($50) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $52=$i;
   var $53=$1;
   var $54=(($53+$52)|0);
   var $55=HEAP8[($54)];
   var $56=(($55)&(255));
   var $57=$56 >> 3;
   $t1=$57;
   var $58=$t1;
   var $59=$t1;
   var $60=$59 << 5;
   var $61=$58 | $60;
   var $62=$t1;
   var $63=$62 << 10;
   var $64=$61 | $63;
   var $65=(($64) & 65535);
   var $66=$i;
   var $67=$3;
   var $68=$67;
   var $69=(($68+($66<<1))|0);
   HEAP16[(($69)>>1)]=$65;
   label = 12; break;
  case 12: 
   var $71=$i;
   var $72=((($71)+(1))|0);
   $i=$72;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $76=$2;
   var $77=$1;
   var $78=(($77+$76)|0);
   $1=$78;
   var $79=$4;
   var $80=$3;
   var $81=(($80+$79)|0);
   $3=$81;
   label = 2; break;
  case 16: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL22icvBGRx2YCrCb_8u_CnC3RPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $b;
   var $r;
   var $y;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=(((($7)>>>(0)))&-1);
   $2=$8;
   var $9=$4;
   var $10=(((($9)>>>(0)))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 18; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 16; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+$32)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   $b=$36;
   var $37=$6;
   var $38=2 ^ $37;
   var $39=$1;
   var $40=(($39+$38)|0);
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   $r=$42;
   var $43=$b;
   var $44=((($43)*(1868))&-1);
   var $45=$1;
   var $46=(($45+1)|0);
   var $47=HEAP8[($46)];
   var $48=(($47)&(255));
   var $49=((($48)*(9617))&-1);
   var $50=((($44)+($49))|0);
   var $51=$r;
   var $52=((($51)*(4899))&-1);
   var $53=((($50)+($52))|0);
   var $54=((($53)+(8192))|0);
   var $55=$54 >> 14;
   $y=$55;
   var $56=$r;
   var $57=$y;
   var $58=((($56)-($57))|0);
   var $59=((($58)*(11682))&-1);
   var $60=((($59)+(8192))|0);
   var $61=$60 >> 14;
   var $62=((($61)+(128))|0);
   $r=$62;
   var $63=$b;
   var $64=$y;
   var $65=((($63)-($64))|0);
   var $66=((($65)*(9241))&-1);
   var $67=((($66)+(8192))|0);
   var $68=$67 >> 14;
   var $69=((($68)+(128))|0);
   $b=$69;
   var $70=$y;
   var $71=$70 & -256;
   var $72=(($71)|(0))!=0;
   if ($72) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $74=$y;
   var $80 = $74;label = 8; break;
  case 7: 
   var $76=$y;
   var $77=(($76)|(0)) > 0;
   var $78=$77 ? 255 : 0;
   var $80 = $78;label = 8; break;
  case 8: 
   var $80;
   var $81=(($80) & 255);
   var $82=$i;
   var $83=$3;
   var $84=(($83+$82)|0);
   HEAP8[($84)]=$81;
   var $85=$r;
   var $86=$85 & -256;
   var $87=(($86)|(0))!=0;
   if ($87) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $89=$r;
   var $95 = $89;label = 11; break;
  case 10: 
   var $91=$r;
   var $92=(($91)|(0)) > 0;
   var $93=$92 ? 255 : 0;
   var $95 = $93;label = 11; break;
  case 11: 
   var $95;
   var $96=(($95) & 255);
   var $97=$i;
   var $98=((($97)+(1))|0);
   var $99=$3;
   var $100=(($99+$98)|0);
   HEAP8[($100)]=$96;
   var $101=$b;
   var $102=$101 & -256;
   var $103=(($102)|(0))!=0;
   if ($103) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $105=$b;
   var $111 = $105;label = 14; break;
  case 13: 
   var $107=$b;
   var $108=(($107)|(0)) > 0;
   var $109=$108 ? 255 : 0;
   var $111 = $109;label = 14; break;
  case 14: 
   var $111;
   var $112=(($111) & 255);
   var $113=$i;
   var $114=((($113)+(2))|0);
   var $115=$3;
   var $116=(($115+$114)|0);
   HEAP8[($116)]=$112;
   label = 15; break;
  case 15: 
   var $118=$i;
   var $119=((($118)+(3))|0);
   $i=$119;
   var $120=$5;
   var $121=$1;
   var $122=(($121+$120)|0);
   $1=$122;
   label = 4; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $125=$2;
   var $126=$1;
   var $127=(($126+$125)|0);
   $1=$127;
   var $128=$4;
   var $129=$3;
   var $130=(($129+$128)|0);
   $3=$130;
   label = 2; break;
  case 18: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRx2Lab_8u_CnC3RPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $b;
   var $g;
   var $r;
   var $x;
   var $y;
   var $z;
   var $f;
   var $L;
   var $a;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=(($size)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$5;
   var $10=(Math.imul($8,$9)|0);
   var $11=$2;
   var $12=((($11)-($10))|0);
   $2=$12;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=((($14)*(3))&-1);
   HEAP32[(($13)>>2)]=$15;
   label = 2; break;
  case 2: 
   var $17=(($size+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)-(1))|0);
   HEAP32[(($17)>>2)]=$19;
   var $20=(($18)|(0))!=0;
   if ($20) { label = 3; break; } else { label = 27; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $23=$i;
   var $24=(($size)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0)) < (($25)|(0));
   if ($26) { label = 5; break; } else { label = 25; break; }
  case 5: 
   var $28=$6;
   var $29=$1;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   $b=$32;
   var $33=$1;
   var $34=(($33+1)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   $g=$36;
   var $37=$6;
   var $38=2 ^ $37;
   var $39=$1;
   var $40=(($39+$38)|0);
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   $r=$42;
   var $43=$b;
   var $44=((($43)*(194))&-1);
   var $45=$g;
   var $46=((($45)*(385))&-1);
   var $47=((($44)+($46))|0);
   var $48=$r;
   var $49=((($48)*(444))&-1);
   var $50=((($47)+($49))|0);
   $x=$50;
   var $51=$b;
   var $52=((($51)*(74))&-1);
   var $53=$g;
   var $54=((($53)*(732))&-1);
   var $55=((($52)+($54))|0);
   var $56=$r;
   var $57=((($56)*(218))&-1);
   var $58=((($55)+($57))|0);
   $y=$58;
   var $59=$b;
   var $60=((($59)*(894))&-1);
   var $61=$g;
   var $62=((($61)*(112))&-1);
   var $63=((($60)+($62))|0);
   var $64=$r;
   var $65=((($64)*(18))&-1);
   var $66=((($63)+($65))|0);
   $z=$66;
   var $67=$x;
   var $68=(($67)|(0)) > 2312;
   var $69=(($68)&(1));
   $f=$69;
   var $70=$x;
   var $71=((($70)+(512))|0);
   var $72=$71 >> 10;
   $x=$72;
   var $73=$f;
   var $74=(($73)|(0))!=0;
   if ($74) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $76=$x;
   var $77=((21144+($76<<1))|0);
   var $78=HEAP16[(($77)>>1)];
   var $79=(($78)&(65535));
   $x=$79;
   label = 8; break;
  case 7: 
   var $81=$x;
   var $82=((($81)*(32020))&-1);
   var $83=((($82)+(144631))|0);
   var $84=((($83)+(512))|0);
   var $85=$84 >> 10;
   $x=$85;
   label = 8; break;
  case 8: 
   var $87=$z;
   var $88=(($87)|(0)) > 2312;
   var $89=(($88)&(1));
   $f=$89;
   var $90=$z;
   var $91=((($90)+(512))|0);
   var $92=$91 >> 10;
   $z=$92;
   var $93=$f;
   var $94=(($93)|(0))!=0;
   if ($94) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $96=$z;
   var $97=((21144+($96<<1))|0);
   var $98=HEAP16[(($97)>>1)];
   var $99=(($98)&(65535));
   $z=$99;
   label = 11; break;
  case 10: 
   var $101=$z;
   var $102=((($101)*(32020))&-1);
   var $103=((($102)+(144631))|0);
   var $104=((($103)+(512))|0);
   var $105=$104 >> 10;
   $z=$105;
   label = 11; break;
  case 11: 
   var $107=$y;
   var $108=(($107)|(0)) > 2312;
   var $109=(($108)&(1));
   $f=$109;
   var $110=$y;
   var $111=((($110)+(512))|0);
   var $112=$111 >> 10;
   $y=$112;
   var $113=$f;
   var $114=(($113)|(0))!=0;
   if ($114) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $116=$y;
   var $117=((21144+($116<<1))|0);
   var $118=HEAP16[(($117)>>1)];
   var $119=(($118)&(65535));
   $y=$119;
   var $120=$y;
   var $121=((($120)*(302899))&-1);
   var $122=((($121)-(42781901))|0);
   var $123=((($122)+(524288))|0);
   var $124=$123 >> 20;
   $L=$124;
   label = 14; break;
  case 13: 
   var $126=$y;
   var $127=((($126)*(9250))&-1);
   var $128=((($127)+(512))|0);
   var $129=$128 >> 10;
   $L=$129;
   var $130=$y;
   var $131=((($130)*(32020))&-1);
   var $132=((($131)+(144631))|0);
   var $133=((($132)+(512))|0);
   var $134=$133 >> 10;
   $y=$134;
   label = 14; break;
  case 14: 
   var $136=$x;
   var $137=$y;
   var $138=((($136)-($137))|0);
   var $139=((($138)*(500))&-1);
   var $140=((($139)+(512))|0);
   var $141=$140 >> 10;
   var $142=((($141)+(128))|0);
   $a=$142;
   var $143=$y;
   var $144=$z;
   var $145=((($143)-($144))|0);
   var $146=((($145)*(200))&-1);
   var $147=((($146)+(512))|0);
   var $148=$147 >> 10;
   var $149=((($148)+(128))|0);
   $b=$149;
   var $150=$L;
   var $151=$150 & -256;
   var $152=(($151)|(0))!=0;
   if ($152) { label = 16; break; } else { label = 15; break; }
  case 15: 
   var $154=$L;
   var $160 = $154;label = 17; break;
  case 16: 
   var $156=$L;
   var $157=(($156)|(0)) > 0;
   var $158=$157 ? 255 : 0;
   var $160 = $158;label = 17; break;
  case 17: 
   var $160;
   var $161=(($160) & 255);
   var $162=$i;
   var $163=$3;
   var $164=(($163+$162)|0);
   HEAP8[($164)]=$161;
   var $165=$a;
   var $166=$165 & -256;
   var $167=(($166)|(0))!=0;
   if ($167) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $169=$a;
   var $175 = $169;label = 20; break;
  case 19: 
   var $171=$a;
   var $172=(($171)|(0)) > 0;
   var $173=$172 ? 255 : 0;
   var $175 = $173;label = 20; break;
  case 20: 
   var $175;
   var $176=(($175) & 255);
   var $177=$i;
   var $178=((($177)+(1))|0);
   var $179=$3;
   var $180=(($179+$178)|0);
   HEAP8[($180)]=$176;
   var $181=$b;
   var $182=$181 & -256;
   var $183=(($182)|(0))!=0;
   if ($183) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $185=$b;
   var $191 = $185;label = 23; break;
  case 22: 
   var $187=$b;
   var $188=(($187)|(0)) > 0;
   var $189=$188 ? 255 : 0;
   var $191 = $189;label = 23; break;
  case 23: 
   var $191;
   var $192=(($191) & 255);
   var $193=$i;
   var $194=((($193)+(2))|0);
   var $195=$3;
   var $196=(($195+$194)|0);
   HEAP8[($196)]=$192;
   label = 24; break;
  case 24: 
   var $198=$i;
   var $199=((($198)+(3))|0);
   $i=$199;
   var $200=$5;
   var $201=$1;
   var $202=(($201+$200)|0);
   $1=$202;
   label = 4; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $205=$2;
   var $206=$1;
   var $207=(($206+$205)|0);
   $1=$207;
   var $208=$4;
   var $209=$3;
   var $210=(($209+$208)|0);
   $3=$210;
   label = 2; break;
  case 27: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRx2XYZ_8u_CnC3RPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $t;
   var $matrix=sp;
   var $8=(sp)+(40);
   var $x;
   var $y;
   var $z;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   var $9=$matrix;
   assert(36 % 1 === 0);(_memcpy($9, 16736, 36)|0);
   var $10=HEAP32[((28088)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((28088)>>2)];
   var $22=__ZL24icvBGRx2ABC_IPP_8u_CnC3RPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $1=$22;
   label = 17; break;
  case 3: 
   var $24=$3;
   var $25=(((($24)>>>(0)))&-1);
   $3=$25;
   var $26=$5;
   var $27=(((($26)>>>(0)))&-1);
   $5=$27;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$3;
   var $33=((($32)-($31))|0);
   $3=$33;
   var $34=(($size)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   HEAP32[(($34)>>2)]=$36;
   var $37=$7;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $40=(($matrix)|0);
   var $41=HEAP32[(($40)>>2)];
   $t=$41;
   var $42=(($matrix+8)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($matrix)|0);
   HEAP32[(($44)>>2)]=$43;
   var $45=$t;
   var $46=(($matrix+8)|0);
   HEAP32[(($46)>>2)]=$45;
   var $47=(($matrix+12)|0);
   var $48=HEAP32[(($47)>>2)];
   $t=$48;
   var $49=(($matrix+20)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($matrix+12)|0);
   HEAP32[(($51)>>2)]=$50;
   var $52=$t;
   var $53=(($matrix+20)|0);
   HEAP32[(($53)>>2)]=$52;
   var $54=(($matrix+24)|0);
   var $55=HEAP32[(($54)>>2)];
   $t=$55;
   var $56=(($matrix+32)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($matrix+24)|0);
   HEAP32[(($58)>>2)]=$57;
   var $59=$t;
   var $60=(($matrix+32)|0);
   HEAP32[(($60)>>2)]=$59;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $63=(($size+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(1))|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=(($64)|(0))!=0;
   if ($66) { label = 7; break; } else { label = 16; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $69=$i;
   var $70=(($size)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($69)|(0)) < (($71)|(0));
   if ($72) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $74=$2;
   var $75=(($74)|0);
   var $76=HEAP8[($75)];
   var $77=(($76)&(255));
   var $78=(($matrix)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(Math.imul($77,$79)|0);
   var $81=$2;
   var $82=(($81+1)|0);
   var $83=HEAP8[($82)];
   var $84=(($83)&(255));
   var $85=(($matrix+4)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(Math.imul($84,$86)|0);
   var $88=((($80)+($87))|0);
   var $89=$2;
   var $90=(($89+2)|0);
   var $91=HEAP8[($90)];
   var $92=(($91)&(255));
   var $93=(($matrix+8)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(Math.imul($92,$94)|0);
   var $96=((($88)+($95))|0);
   var $97=((($96)+(512))|0);
   var $98=$97 >> 10;
   $x=$98;
   var $99=$2;
   var $100=(($99)|0);
   var $101=HEAP8[($100)];
   var $102=(($101)&(255));
   var $103=(($matrix+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(Math.imul($102,$104)|0);
   var $106=$2;
   var $107=(($106+1)|0);
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=(($matrix+16)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(Math.imul($109,$111)|0);
   var $113=((($105)+($112))|0);
   var $114=$2;
   var $115=(($114+2)|0);
   var $116=HEAP8[($115)];
   var $117=(($116)&(255));
   var $118=(($matrix+20)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(Math.imul($117,$119)|0);
   var $121=((($113)+($120))|0);
   var $122=((($121)+(512))|0);
   var $123=$122 >> 10;
   $y=$123;
   var $124=$2;
   var $125=(($124)|0);
   var $126=HEAP8[($125)];
   var $127=(($126)&(255));
   var $128=(($matrix+24)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(Math.imul($127,$129)|0);
   var $131=$2;
   var $132=(($131+1)|0);
   var $133=HEAP8[($132)];
   var $134=(($133)&(255));
   var $135=(($matrix+28)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(Math.imul($134,$136)|0);
   var $138=((($130)+($137))|0);
   var $139=$2;
   var $140=(($139+2)|0);
   var $141=HEAP8[($140)];
   var $142=(($141)&(255));
   var $143=(($matrix+32)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(Math.imul($142,$144)|0);
   var $146=((($138)+($145))|0);
   var $147=((($146)+(512))|0);
   var $148=$147 >> 10;
   $z=$148;
   var $149=$x;
   var $150=(($149) & 255);
   var $151=$i;
   var $152=$4;
   var $153=(($152+$151)|0);
   HEAP8[($153)]=$150;
   var $154=$y;
   var $155=(($154) & 255);
   var $156=$i;
   var $157=((($156)+(1))|0);
   var $158=$4;
   var $159=(($158+$157)|0);
   HEAP8[($159)]=$155;
   var $160=$z;
   var $161=$160 & -256;
   var $162=(($161)|(0))!=0;
   if ($162) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $164=$z;
   var $170 = $164;label = 12; break;
  case 11: 
   var $166=$z;
   var $167=(($166)|(0)) > 0;
   var $168=$167 ? 255 : 0;
   var $170 = $168;label = 12; break;
  case 12: 
   var $170;
   var $171=(($170) & 255);
   var $172=$i;
   var $173=((($172)+(2))|0);
   var $174=$4;
   var $175=(($174+$173)|0);
   HEAP8[($175)]=$171;
   label = 13; break;
  case 13: 
   var $177=$i;
   var $178=((($177)+(3))|0);
   $i=$178;
   var $179=$6;
   var $180=$2;
   var $181=(($180+$179)|0);
   $2=$181;
   label = 8; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $184=$3;
   var $185=$2;
   var $186=(($185+$184)|0);
   $2=$186;
   var $187=$5;
   var $188=$4;
   var $189=(($188+$187)|0);
   $4=$189;
   label = 6; break;
  case 16: 
   $1=0;
   label = 17; break;
  case 17: 
   var $192=$1;
   STACKTOP = sp;
   return $192;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRx2HSV_8u_CnC3RPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $hsv_shift;
   var $i;
   var $status;
   var $8=sp;
   var $t0;
   var $t1;
   var $b;
   var $g;
   var $r;
   var $h;
   var $s;
   var $v;
   var $vmin;
   var $diff;
   var $vr;
   var $vg;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   $hsv_shift=12;
   var $9=HEAP32[((28120)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 17; break; }
  case 2: 
   var $12=$2;
   var $13=$3;
   var $14=$4;
   var $15=$5;
   var $16=$8;
   var $17=$size;
   assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
   var $18=$6;
   var $19=$7;
   var $20=HEAP32[((28120)>>2)];
   var $21=__ZL24icvBGRx2ABC_IPP_8u_CnC3RPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($12, $13, $14, $15, $8, $18, $19, $20);
   $status=$21;
   var $22=$status;
   var $23=(($22)|(0)) >= 0;
   if ($23) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $25=(($size)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=((($26)*(3))&-1);
   HEAP32[(($25)>>2)]=$27;
   label = 4; break;
  case 4: 
   var $29=(($size+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=((($30)-(1))|0);
   HEAP32[(($29)>>2)]=$31;
   var $32=(($30)|(0))!=0;
   if ($32) { label = 5; break; } else { label = 15; break; }
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $35=$i;
   var $36=(($size)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=((($37)-(12))|0);
   var $39=(($35)|(0)) <= (($38)|(0));
   if ($39) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $41=$i;
   var $42=$4;
   var $43=(($42+$41)|0);
   var $44=HEAP8[($43)];
   var $45=(($44)&(255));
   var $46=((22168+$45)|0);
   var $47=HEAP8[($46)];
   $t0=$47;
   var $48=$i;
   var $49=((($48)+(3))|0);
   var $50=$4;
   var $51=(($50+$49)|0);
   var $52=HEAP8[($51)];
   var $53=(($52)&(255));
   var $54=((22168+$53)|0);
   var $55=HEAP8[($54)];
   $t1=$55;
   var $56=$t0;
   var $57=$i;
   var $58=$4;
   var $59=(($58+$57)|0);
   HEAP8[($59)]=$56;
   var $60=$t1;
   var $61=$i;
   var $62=((($61)+(3))|0);
   var $63=$4;
   var $64=(($63+$62)|0);
   HEAP8[($64)]=$60;
   var $65=$i;
   var $66=((($65)+(6))|0);
   var $67=$4;
   var $68=(($67+$66)|0);
   var $69=HEAP8[($68)];
   var $70=(($69)&(255));
   var $71=((22168+$70)|0);
   var $72=HEAP8[($71)];
   $t0=$72;
   var $73=$i;
   var $74=((($73)+(9))|0);
   var $75=$4;
   var $76=(($75+$74)|0);
   var $77=HEAP8[($76)];
   var $78=(($77)&(255));
   var $79=((22168+$78)|0);
   var $80=HEAP8[($79)];
   $t1=$80;
   var $81=$t0;
   var $82=$i;
   var $83=((($82)+(6))|0);
   var $84=$4;
   var $85=(($84+$83)|0);
   HEAP8[($85)]=$81;
   var $86=$t1;
   var $87=$i;
   var $88=((($87)+(9))|0);
   var $89=$4;
   var $90=(($89+$88)|0);
   HEAP8[($90)]=$86;
   label = 8; break;
  case 8: 
   var $92=$i;
   var $93=((($92)+(12))|0);
   $i=$93;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $96=$i;
   var $97=(($size)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($96)|(0)) < (($98)|(0));
   if ($99) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $101=$i;
   var $102=$4;
   var $103=(($102+$101)|0);
   var $104=HEAP8[($103)];
   var $105=(($104)&(255));
   var $106=((22168+$105)|0);
   var $107=HEAP8[($106)];
   var $108=$i;
   var $109=$4;
   var $110=(($109+$108)|0);
   HEAP8[($110)]=$107;
   label = 12; break;
  case 12: 
   var $112=$i;
   var $113=((($112)+(3))|0);
   $i=$113;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $116=$5;
   var $117=$4;
   var $118=(($117+$116)|0);
   $4=$118;
   label = 4; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $121=$status;
   $1=$121;
   label = 26; break;
  case 17: 
   var $123=(($size)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=$6;
   var $126=(Math.imul($124,$125)|0);
   var $127=$3;
   var $128=((($127)-($126))|0);
   $3=$128;
   var $129=(($size)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=((($130)*(3))&-1);
   HEAP32[(($129)>>2)]=$131;
   label = 18; break;
  case 18: 
   var $133=(($size+4)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=((($134)-(1))|0);
   HEAP32[(($133)>>2)]=$135;
   var $136=(($134)|(0))!=0;
   if ($136) { label = 19; break; } else { label = 25; break; }
  case 19: 
   $i=0;
   label = 20; break;
  case 20: 
   var $139=$i;
   var $140=(($size)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=(($139)|(0)) < (($141)|(0));
   if ($142) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $144=$7;
   var $145=$2;
   var $146=(($145+$144)|0);
   var $147=HEAP8[($146)];
   var $148=(($147)&(255));
   $b=$148;
   var $149=$2;
   var $150=(($149+1)|0);
   var $151=HEAP8[($150)];
   var $152=(($151)&(255));
   $g=$152;
   var $153=$7;
   var $154=2 ^ $153;
   var $155=$2;
   var $156=(($155+$154)|0);
   var $157=HEAP8[($156)];
   var $158=(($157)&(255));
   $r=$158;
   var $159=$b;
   $v=$159;
   var $160=$b;
   $vmin=$160;
   var $161=$g;
   var $162=$v;
   var $163=((($161)-($162))|0);
   var $164=((($163)+(256))|0);
   var $165=((8+$164)|0);
   var $166=HEAP8[($165)];
   var $167=(($166)&(255));
   var $168=$v;
   var $169=((($168)+($167))|0);
   $v=$169;
   var $170=$r;
   var $171=$v;
   var $172=((($170)-($171))|0);
   var $173=((($172)+(256))|0);
   var $174=((8+$173)|0);
   var $175=HEAP8[($174)];
   var $176=(($175)&(255));
   var $177=$v;
   var $178=((($177)+($176))|0);
   $v=$178;
   var $179=$vmin;
   var $180=$g;
   var $181=((($179)-($180))|0);
   var $182=((($181)+(256))|0);
   var $183=((8+$182)|0);
   var $184=HEAP8[($183)];
   var $185=(($184)&(255));
   var $186=$vmin;
   var $187=((($186)-($185))|0);
   $vmin=$187;
   var $188=$vmin;
   var $189=$r;
   var $190=((($188)-($189))|0);
   var $191=((($190)+(256))|0);
   var $192=((8+$191)|0);
   var $193=HEAP8[($192)];
   var $194=(($193)&(255));
   var $195=$vmin;
   var $196=((($195)-($194))|0);
   $vmin=$196;
   var $197=$v;
   var $198=$vmin;
   var $199=((($197)-($198))|0);
   $diff=$199;
   var $200=$v;
   var $201=$r;
   var $202=(($200)|(0))==(($201)|(0));
   var $203=$202 ? -1 : 0;
   $vr=$203;
   var $204=$v;
   var $205=$g;
   var $206=(($204)|(0))==(($205)|(0));
   var $207=$206 ? -1 : 0;
   $vg=$207;
   var $208=$diff;
   var $209=$v;
   var $210=((16800+($209<<2))|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=(Math.imul($208,$211)|0);
   var $213=$212 >> 12;
   $s=$213;
   var $214=$vr;
   var $215=$g;
   var $216=$b;
   var $217=((($215)-($216))|0);
   var $218=$214 & $217;
   var $219=$vr;
   var $220=$219 ^ -1;
   var $221=$vg;
   var $222=$b;
   var $223=$r;
   var $224=((($222)-($223))|0);
   var $225=$diff;
   var $226=($225<<1);
   var $227=((($224)+($226))|0);
   var $228=$221 & $227;
   var $229=$vg;
   var $230=$229 ^ -1;
   var $231=$r;
   var $232=$g;
   var $233=((($231)-($232))|0);
   var $234=$diff;
   var $235=($234<<2);
   var $236=((($233)+($235))|0);
   var $237=$230 & $236;
   var $238=((($228)+($237))|0);
   var $239=$220 & $238;
   var $240=((($218)+($239))|0);
   $h=$240;
   var $241=$h;
   var $242=$diff;
   var $243=((16800+($242<<2))|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=(Math.imul($241,$244)|0);
   var $246=((($245)*(15))&-1);
   var $247=((($246)+(262144))|0);
   var $248=$247 >> 19;
   var $249=$h;
   var $250=(($249)|(0)) < 0;
   var $251=$250 ? 180 : 0;
   var $252=((($248)+($251))|0);
   $h=$252;
   var $253=$h;
   var $254=(($253) & 255);
   var $255=$i;
   var $256=$4;
   var $257=(($256+$255)|0);
   HEAP8[($257)]=$254;
   var $258=$s;
   var $259=(($258) & 255);
   var $260=$i;
   var $261=((($260)+(1))|0);
   var $262=$4;
   var $263=(($262+$261)|0);
   HEAP8[($263)]=$259;
   var $264=$v;
   var $265=(($264) & 255);
   var $266=$i;
   var $267=((($266)+(2))|0);
   var $268=$4;
   var $269=(($268+$267)|0);
   HEAP8[($269)]=$265;
   label = 22; break;
  case 22: 
   var $271=$i;
   var $272=((($271)+(3))|0);
   $i=$272;
   var $273=$6;
   var $274=$2;
   var $275=(($274+$273)|0);
   $2=$275;
   label = 20; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $278=$3;
   var $279=$2;
   var $280=(($279+$278)|0);
   $2=$280;
   var $281=$5;
   var $282=$4;
   var $283=(($282+$281)|0);
   $4=$283;
   label = 18; break;
  case 25: 
   $1=0;
   label = 26; break;
  case 26: 
   var $286=$1;
   STACKTOP = sp;
   return $286;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL23icvBGRx2YCrCb_16u_CnC3RPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $b;
   var $r;
   var $y;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 18; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 16; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+($32<<1))|0);
   var $35=HEAP16[(($34)>>1)];
   var $36=(($35)&(65535));
   $b=$36;
   var $37=$6;
   var $38=2 ^ $37;
   var $39=$1;
   var $40=(($39+($38<<1))|0);
   var $41=HEAP16[(($40)>>1)];
   var $42=(($41)&(65535));
   $r=$42;
   var $43=$b;
   var $44=((($43)*(1868))&-1);
   var $45=$1;
   var $46=(($45+2)|0);
   var $47=HEAP16[(($46)>>1)];
   var $48=(($47)&(65535));
   var $49=((($48)*(9617))&-1);
   var $50=((($44)+($49))|0);
   var $51=$r;
   var $52=((($51)*(4899))&-1);
   var $53=((($50)+($52))|0);
   var $54=((($53)+(8192))|0);
   var $55=$54 >> 14;
   $y=$55;
   var $56=$r;
   var $57=$y;
   var $58=((($56)-($57))|0);
   var $59=((($58)*(11682))&-1);
   var $60=((($59)+(8192))|0);
   var $61=$60 >> 14;
   var $62=((($61)+(32768))|0);
   $r=$62;
   var $63=$b;
   var $64=$y;
   var $65=((($63)-($64))|0);
   var $66=((($65)*(9241))&-1);
   var $67=((($66)+(8192))|0);
   var $68=$67 >> 14;
   var $69=((($68)+(32768))|0);
   $b=$69;
   var $70=$y;
   var $71=$70 & -65536;
   var $72=(($71)|(0))!=0;
   if ($72) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $74=$y;
   var $80 = $74;label = 8; break;
  case 7: 
   var $76=$y;
   var $77=(($76)|(0)) > 0;
   var $78=$77 ? 65535 : 0;
   var $80 = $78;label = 8; break;
  case 8: 
   var $80;
   var $81=(($80) & 65535);
   var $82=$i;
   var $83=$3;
   var $84=(($83+($82<<1))|0);
   HEAP16[(($84)>>1)]=$81;
   var $85=$r;
   var $86=$85 & -65536;
   var $87=(($86)|(0))!=0;
   if ($87) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $89=$r;
   var $95 = $89;label = 11; break;
  case 10: 
   var $91=$r;
   var $92=(($91)|(0)) > 0;
   var $93=$92 ? 65535 : 0;
   var $95 = $93;label = 11; break;
  case 11: 
   var $95;
   var $96=(($95) & 65535);
   var $97=$i;
   var $98=((($97)+(1))|0);
   var $99=$3;
   var $100=(($99+($98<<1))|0);
   HEAP16[(($100)>>1)]=$96;
   var $101=$b;
   var $102=$101 & -65536;
   var $103=(($102)|(0))!=0;
   if ($103) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $105=$b;
   var $111 = $105;label = 14; break;
  case 13: 
   var $107=$b;
   var $108=(($107)|(0)) > 0;
   var $109=$108 ? 65535 : 0;
   var $111 = $109;label = 14; break;
  case 14: 
   var $111;
   var $112=(($111) & 65535);
   var $113=$i;
   var $114=((($113)+(2))|0);
   var $115=$3;
   var $116=(($115+($114<<1))|0);
   HEAP16[(($116)>>1)]=$112;
   label = 15; break;
  case 15: 
   var $118=$i;
   var $119=((($118)+(3))|0);
   $i=$119;
   var $120=$5;
   var $121=$1;
   var $122=(($121+($120<<1))|0);
   $1=$122;
   label = 4; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $125=$2;
   var $126=$1;
   var $127=(($126+($125<<1))|0);
   $1=$127;
   var $128=$4;
   var $129=$3;
   var $130=(($129+($128<<1))|0);
   $3=$130;
   label = 2; break;
  case 18: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL23icvBGRx2YCrCb_32f_CnC3RPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $b;
   var $r;
   var $y;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAPF32[(($34)>>2)];
   $b=$35;
   var $36=$6;
   var $37=2 ^ $36;
   var $38=$1;
   var $39=(($38+($37<<2))|0);
   var $40=HEAPF32[(($39)>>2)];
   $r=$40;
   var $41=$b;
   var $42=($41)*(0.11400000005960464);
   var $43=$1;
   var $44=(($43+4)|0);
   var $45=HEAPF32[(($44)>>2)];
   var $46=($45)*(0.5870000123977661);
   var $47=($42)+($46);
   var $48=$r;
   var $49=($48)*(0.29899999499320984);
   var $50=($47)+($49);
   $y=$50;
   var $51=$r;
   var $52=$y;
   var $53=($51)-($52);
   var $54=($53)*(0.7129999995231628);
   var $55=($54)+(0.5);
   $r=$55;
   var $56=$b;
   var $57=$y;
   var $58=($56)-($57);
   var $59=($58)*(0.5640000104904175);
   var $60=($59)+(0.5);
   $b=$60;
   var $61=$y;
   var $62=$i;
   var $63=$3;
   var $64=(($63+($62<<2))|0);
   HEAPF32[(($64)>>2)]=$61;
   var $65=$r;
   var $66=$i;
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+($67<<2))|0);
   HEAPF32[(($69)>>2)]=$65;
   var $70=$b;
   var $71=$i;
   var $72=((($71)+(2))|0);
   var $73=$3;
   var $74=(($73+($72<<2))|0);
   HEAPF32[(($74)>>2)]=$70;
   label = 6; break;
  case 6: 
   var $76=$i;
   var $77=((($76)+(3))|0);
   $i=$77;
   var $78=$5;
   var $79=$1;
   var $80=(($79+($78<<2))|0);
   $1=$80;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $83=$2;
   var $84=$1;
   var $85=(($84+($83<<2))|0);
   $1=$85;
   var $86=$4;
   var $87=$3;
   var $88=(($87+($86<<2))|0);
   $3=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRx2Luv_8u_CnC3RPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8=sp;
   var $9=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   var $10=HEAP32[((28112)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((28112)>>2)];
   var $22=__ZL24icvBGRx2ABC_IPP_8u_CnC3RPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $1=$22;
   label = 4; break;
  case 3: 
   var $24=$2;
   var $25=$3;
   var $26=$4;
   var $27=$5;
   var $28=$9;
   var $29=$size;
   assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
   var $30=$6;
   var $31=$7;
   var $32=__ZL20icvBGRx2ABC_8u_CnC3RPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_iiEiPKf($24, $25, $26, $27, $9, $30, $31, (706), 1, ((16776)|0));
   $1=$32;
   label = 4; break;
  case 4: 
   var $34=$1;
   STACKTOP = sp;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRx2HLS_8u_CnC3RPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $status;
   var $8=sp;
   var $i;
   var $t0;
   var $t1;
   var $9=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   var $10=HEAP32[((28128)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 17; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((28128)>>2)];
   var $22=__ZL24icvBGRx2ABC_IPP_8u_CnC3RPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $status=$22;
   var $23=$status;
   var $24=(($23)|(0)) >= 0;
   if ($24) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($27)*(3))&-1);
   HEAP32[(($26)>>2)]=$28;
   label = 4; break;
  case 4: 
   var $30=(($size+4)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=((($31)-(1))|0);
   HEAP32[(($30)>>2)]=$32;
   var $33=(($31)|(0))!=0;
   if ($33) { label = 5; break; } else { label = 15; break; }
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $36=$i;
   var $37=(($size)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=((($38)-(12))|0);
   var $40=(($36)|(0)) <= (($39)|(0));
   if ($40) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $42=$i;
   var $43=$4;
   var $44=(($43+$42)|0);
   var $45=HEAP8[($44)];
   var $46=(($45)&(255));
   var $47=((22168+$46)|0);
   var $48=HEAP8[($47)];
   $t0=$48;
   var $49=$i;
   var $50=((($49)+(3))|0);
   var $51=$4;
   var $52=(($51+$50)|0);
   var $53=HEAP8[($52)];
   var $54=(($53)&(255));
   var $55=((22168+$54)|0);
   var $56=HEAP8[($55)];
   $t1=$56;
   var $57=$t0;
   var $58=$i;
   var $59=$4;
   var $60=(($59+$58)|0);
   HEAP8[($60)]=$57;
   var $61=$t1;
   var $62=$i;
   var $63=((($62)+(3))|0);
   var $64=$4;
   var $65=(($64+$63)|0);
   HEAP8[($65)]=$61;
   var $66=$i;
   var $67=((($66)+(6))|0);
   var $68=$4;
   var $69=(($68+$67)|0);
   var $70=HEAP8[($69)];
   var $71=(($70)&(255));
   var $72=((22168+$71)|0);
   var $73=HEAP8[($72)];
   $t0=$73;
   var $74=$i;
   var $75=((($74)+(9))|0);
   var $76=$4;
   var $77=(($76+$75)|0);
   var $78=HEAP8[($77)];
   var $79=(($78)&(255));
   var $80=((22168+$79)|0);
   var $81=HEAP8[($80)];
   $t1=$81;
   var $82=$t0;
   var $83=$i;
   var $84=((($83)+(6))|0);
   var $85=$4;
   var $86=(($85+$84)|0);
   HEAP8[($86)]=$82;
   var $87=$t1;
   var $88=$i;
   var $89=((($88)+(9))|0);
   var $90=$4;
   var $91=(($90+$89)|0);
   HEAP8[($91)]=$87;
   label = 8; break;
  case 8: 
   var $93=$i;
   var $94=((($93)+(12))|0);
   $i=$94;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $97=$i;
   var $98=(($size)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($97)|(0)) < (($99)|(0));
   if ($100) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $102=$i;
   var $103=$4;
   var $104=(($103+$102)|0);
   var $105=HEAP8[($104)];
   var $106=(($105)&(255));
   var $107=((22168+$106)|0);
   var $108=HEAP8[($107)];
   var $109=$i;
   var $110=$4;
   var $111=(($110+$109)|0);
   HEAP8[($111)]=$108;
   label = 12; break;
  case 12: 
   var $113=$i;
   var $114=((($113)+(3))|0);
   $i=$114;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $117=$5;
   var $118=$4;
   var $119=(($118+$117)|0);
   $4=$119;
   label = 4; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $122=$status;
   $1=$122;
   label = 18; break;
  case 17: 
   var $124=$2;
   var $125=$3;
   var $126=$4;
   var $127=$5;
   var $128=$9;
   var $129=$size;
   assert(8 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];HEAP32[((($128)+(4))>>2)]=HEAP32[((($129)+(4))>>2)];
   var $130=$6;
   var $131=$7;
   var $132=__ZL20icvBGRx2ABC_8u_CnC3RPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_iiEiPKf($124, $125, $126, $127, $9, $130, $131, (64), 1, ((17824)|0));
   $1=$132;
   label = 18; break;
  case 18: 
   var $134=$1;
   STACKTOP = sp;
   return $134;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2XYZ_16u_CnC3RPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $t;
   var $matrix=sp;
   var $8=(sp)+(40);
   var $x;
   var $y;
   var $z;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   var $9=$matrix;
   assert(36 % 1 === 0);(_memcpy($9, 16536, 36)|0);
   var $10=HEAP32[((28104)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((28104)>>2)];
   var $22=__ZL25icvBGRx2ABC_IPP_16u_CnC3RPKtiPti6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $1=$22;
   label = 17; break;
  case 3: 
   var $24=$3;
   var $25=((((($24)>>>(0)))/(2))&-1);
   $3=$25;
   var $26=$5;
   var $27=((((($26)>>>(0)))/(2))&-1);
   $5=$27;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$3;
   var $33=((($32)-($31))|0);
   $3=$33;
   var $34=(($size)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   HEAP32[(($34)>>2)]=$36;
   var $37=$7;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $40=(($matrix)|0);
   var $41=HEAP32[(($40)>>2)];
   $t=$41;
   var $42=(($matrix+8)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($matrix)|0);
   HEAP32[(($44)>>2)]=$43;
   var $45=$t;
   var $46=(($matrix+8)|0);
   HEAP32[(($46)>>2)]=$45;
   var $47=(($matrix+12)|0);
   var $48=HEAP32[(($47)>>2)];
   $t=$48;
   var $49=(($matrix+20)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($matrix+12)|0);
   HEAP32[(($51)>>2)]=$50;
   var $52=$t;
   var $53=(($matrix+20)|0);
   HEAP32[(($53)>>2)]=$52;
   var $54=(($matrix+24)|0);
   var $55=HEAP32[(($54)>>2)];
   $t=$55;
   var $56=(($matrix+32)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($matrix+24)|0);
   HEAP32[(($58)>>2)]=$57;
   var $59=$t;
   var $60=(($matrix+32)|0);
   HEAP32[(($60)>>2)]=$59;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $63=(($size+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(1))|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=(($64)|(0))!=0;
   if ($66) { label = 7; break; } else { label = 16; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $69=$i;
   var $70=(($size)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($69)|(0)) < (($71)|(0));
   if ($72) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $74=$2;
   var $75=(($74)|0);
   var $76=HEAP16[(($75)>>1)];
   var $77=(($76)&(65535));
   var $78=(($matrix)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(Math.imul($77,$79)|0);
   var $81=$2;
   var $82=(($81+2)|0);
   var $83=HEAP16[(($82)>>1)];
   var $84=(($83)&(65535));
   var $85=(($matrix+4)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(Math.imul($84,$86)|0);
   var $88=((($80)+($87))|0);
   var $89=$2;
   var $90=(($89+4)|0);
   var $91=HEAP16[(($90)>>1)];
   var $92=(($91)&(65535));
   var $93=(($matrix+8)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(Math.imul($92,$94)|0);
   var $96=((($88)+($95))|0);
   var $97=((($96)+(512))|0);
   var $98=$97 >> 10;
   $x=$98;
   var $99=$2;
   var $100=(($99)|0);
   var $101=HEAP16[(($100)>>1)];
   var $102=(($101)&(65535));
   var $103=(($matrix+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(Math.imul($102,$104)|0);
   var $106=$2;
   var $107=(($106+2)|0);
   var $108=HEAP16[(($107)>>1)];
   var $109=(($108)&(65535));
   var $110=(($matrix+16)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(Math.imul($109,$111)|0);
   var $113=((($105)+($112))|0);
   var $114=$2;
   var $115=(($114+4)|0);
   var $116=HEAP16[(($115)>>1)];
   var $117=(($116)&(65535));
   var $118=(($matrix+20)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(Math.imul($117,$119)|0);
   var $121=((($113)+($120))|0);
   var $122=((($121)+(512))|0);
   var $123=$122 >> 10;
   $y=$123;
   var $124=$2;
   var $125=(($124)|0);
   var $126=HEAP16[(($125)>>1)];
   var $127=(($126)&(65535));
   var $128=(($matrix+24)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(Math.imul($127,$129)|0);
   var $131=$2;
   var $132=(($131+2)|0);
   var $133=HEAP16[(($132)>>1)];
   var $134=(($133)&(65535));
   var $135=(($matrix+28)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(Math.imul($134,$136)|0);
   var $138=((($130)+($137))|0);
   var $139=$2;
   var $140=(($139+4)|0);
   var $141=HEAP16[(($140)>>1)];
   var $142=(($141)&(65535));
   var $143=(($matrix+32)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(Math.imul($142,$144)|0);
   var $146=((($138)+($145))|0);
   var $147=((($146)+(512))|0);
   var $148=$147 >> 10;
   $z=$148;
   var $149=$x;
   var $150=(($149) & 65535);
   var $151=$i;
   var $152=$4;
   var $153=(($152+($151<<1))|0);
   HEAP16[(($153)>>1)]=$150;
   var $154=$y;
   var $155=(($154) & 65535);
   var $156=$i;
   var $157=((($156)+(1))|0);
   var $158=$4;
   var $159=(($158+($157<<1))|0);
   HEAP16[(($159)>>1)]=$155;
   var $160=$z;
   var $161=$160 & -65536;
   var $162=(($161)|(0))!=0;
   if ($162) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $164=$z;
   var $170 = $164;label = 12; break;
  case 11: 
   var $166=$z;
   var $167=(($166)|(0)) > 0;
   var $168=$167 ? 65535 : 0;
   var $170 = $168;label = 12; break;
  case 12: 
   var $170;
   var $171=(($170) & 65535);
   var $172=$i;
   var $173=((($172)+(2))|0);
   var $174=$4;
   var $175=(($174+($173<<1))|0);
   HEAP16[(($175)>>1)]=$171;
   label = 13; break;
  case 13: 
   var $177=$i;
   var $178=((($177)+(3))|0);
   $i=$178;
   var $179=$6;
   var $180=$2;
   var $181=(($180+($179<<1))|0);
   $2=$181;
   label = 8; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $184=$3;
   var $185=$2;
   var $186=(($185+($184<<1))|0);
   $2=$186;
   var $187=$5;
   var $188=$4;
   var $189=(($188+($187<<1))|0);
   $4=$189;
   label = 6; break;
  case 16: 
   $1=0;
   label = 17; break;
  case 17: 
   var $192=$1;
   STACKTOP = sp;
   return $192;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2XYZ_32f_CnC3RPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $t;
   var $matrix=sp;
   var $8=(sp)+(40);
   var $x;
   var $y;
   var $z;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   var $9=$matrix;
   assert(36 % 1 === 0);(_memcpy($9, 16496, 36)|0);
   var $10=HEAP32[((28096)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((28096)>>2)];
   var $22=__ZL25icvBGRx2ABC_IPP_32f_CnC3RPKfiPfi6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $1=$22;
   label = 14; break;
  case 3: 
   var $24=$3;
   var $25=((((($24)>>>(0)))/(4))&-1);
   $3=$25;
   var $26=$5;
   var $27=((((($26)>>>(0)))/(4))&-1);
   $5=$27;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$3;
   var $33=((($32)-($31))|0);
   $3=$33;
   var $34=(($size)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   HEAP32[(($34)>>2)]=$36;
   var $37=$7;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $40=(($matrix)|0);
   var $41=HEAPF32[(($40)>>2)];
   $t=$41;
   var $42=(($matrix+8)|0);
   var $43=HEAPF32[(($42)>>2)];
   var $44=(($matrix)|0);
   HEAPF32[(($44)>>2)]=$43;
   var $45=$t;
   var $46=(($matrix+8)|0);
   HEAPF32[(($46)>>2)]=$45;
   var $47=(($matrix+12)|0);
   var $48=HEAPF32[(($47)>>2)];
   $t=$48;
   var $49=(($matrix+20)|0);
   var $50=HEAPF32[(($49)>>2)];
   var $51=(($matrix+12)|0);
   HEAPF32[(($51)>>2)]=$50;
   var $52=$t;
   var $53=(($matrix+20)|0);
   HEAPF32[(($53)>>2)]=$52;
   var $54=(($matrix+24)|0);
   var $55=HEAPF32[(($54)>>2)];
   $t=$55;
   var $56=(($matrix+32)|0);
   var $57=HEAPF32[(($56)>>2)];
   var $58=(($matrix+24)|0);
   HEAPF32[(($58)>>2)]=$57;
   var $59=$t;
   var $60=(($matrix+32)|0);
   HEAPF32[(($60)>>2)]=$59;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $63=(($size+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(1))|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=(($64)|(0))!=0;
   if ($66) { label = 7; break; } else { label = 13; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $69=$i;
   var $70=(($size)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($69)|(0)) < (($71)|(0));
   if ($72) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $74=$2;
   var $75=(($74)|0);
   var $76=HEAPF32[(($75)>>2)];
   var $77=(($matrix)|0);
   var $78=HEAPF32[(($77)>>2)];
   var $79=($76)*($78);
   var $80=$2;
   var $81=(($80+4)|0);
   var $82=HEAPF32[(($81)>>2)];
   var $83=(($matrix+4)|0);
   var $84=HEAPF32[(($83)>>2)];
   var $85=($82)*($84);
   var $86=($79)+($85);
   var $87=$2;
   var $88=(($87+8)|0);
   var $89=HEAPF32[(($88)>>2)];
   var $90=(($matrix+8)|0);
   var $91=HEAPF32[(($90)>>2)];
   var $92=($89)*($91);
   var $93=($86)+($92);
   $x=$93;
   var $94=$2;
   var $95=(($94)|0);
   var $96=HEAPF32[(($95)>>2)];
   var $97=(($matrix+12)|0);
   var $98=HEAPF32[(($97)>>2)];
   var $99=($96)*($98);
   var $100=$2;
   var $101=(($100+4)|0);
   var $102=HEAPF32[(($101)>>2)];
   var $103=(($matrix+16)|0);
   var $104=HEAPF32[(($103)>>2)];
   var $105=($102)*($104);
   var $106=($99)+($105);
   var $107=$2;
   var $108=(($107+8)|0);
   var $109=HEAPF32[(($108)>>2)];
   var $110=(($matrix+20)|0);
   var $111=HEAPF32[(($110)>>2)];
   var $112=($109)*($111);
   var $113=($106)+($112);
   $y=$113;
   var $114=$2;
   var $115=(($114)|0);
   var $116=HEAPF32[(($115)>>2)];
   var $117=(($matrix+24)|0);
   var $118=HEAPF32[(($117)>>2)];
   var $119=($116)*($118);
   var $120=$2;
   var $121=(($120+4)|0);
   var $122=HEAPF32[(($121)>>2)];
   var $123=(($matrix+28)|0);
   var $124=HEAPF32[(($123)>>2)];
   var $125=($122)*($124);
   var $126=($119)+($125);
   var $127=$2;
   var $128=(($127+8)|0);
   var $129=HEAPF32[(($128)>>2)];
   var $130=(($matrix+32)|0);
   var $131=HEAPF32[(($130)>>2)];
   var $132=($129)*($131);
   var $133=($126)+($132);
   $z=$133;
   var $134=$x;
   var $135=$i;
   var $136=$4;
   var $137=(($136+($135<<2))|0);
   HEAPF32[(($137)>>2)]=$134;
   var $138=$y;
   var $139=$i;
   var $140=((($139)+(1))|0);
   var $141=$4;
   var $142=(($141+($140<<2))|0);
   HEAPF32[(($142)>>2)]=$138;
   var $143=$z;
   var $144=$i;
   var $145=((($144)+(2))|0);
   var $146=$4;
   var $147=(($146+($145<<2))|0);
   HEAPF32[(($147)>>2)]=$143;
   label = 10; break;
  case 10: 
   var $149=$i;
   var $150=((($149)+(3))|0);
   $i=$150;
   var $151=$6;
   var $152=$2;
   var $153=(($152+($151<<2))|0);
   $2=$153;
   label = 8; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $156=$3;
   var $157=$2;
   var $158=(($157+($156<<2))|0);
   $2=$158;
   var $159=$5;
   var $160=$4;
   var $161=(($160+($159<<2))|0);
   $4=$161;
   label = 6; break;
  case 13: 
   $1=0;
   label = 14; break;
  case 14: 
   var $164=$1;
   STACKTOP = sp;
   return $164;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2HSV_32f_CnC3RPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $b;
   var $g;
   var $r;
   var $h;
   var $s;
   var $v;
   var $vmin;
   var $diff;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 25; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 23; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAPF32[(($34)>>2)];
   $b=$35;
   var $36=$1;
   var $37=(($36+4)|0);
   var $38=HEAPF32[(($37)>>2)];
   $g=$38;
   var $39=$6;
   var $40=2 ^ $39;
   var $41=$1;
   var $42=(($41+($40<<2))|0);
   var $43=HEAPF32[(($42)>>2)];
   $r=$43;
   var $44=$r;
   $vmin=$44;
   $v=$44;
   var $45=$v;
   var $46=$g;
   var $47=$45 < $46;
   if ($47) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $49=$g;
   $v=$49;
   label = 7; break;
  case 7: 
   var $51=$v;
   var $52=$b;
   var $53=$51 < $52;
   if ($53) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $55=$b;
   $v=$55;
   label = 9; break;
  case 9: 
   var $57=$vmin;
   var $58=$g;
   var $59=$57 > $58;
   if ($59) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $61=$g;
   $vmin=$61;
   label = 11; break;
  case 11: 
   var $63=$vmin;
   var $64=$b;
   var $65=$63 > $64;
   if ($65) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $67=$b;
   $vmin=$67;
   label = 13; break;
  case 13: 
   var $69=$v;
   var $70=$vmin;
   var $71=($69)-($70);
   $diff=$71;
   var $72=$diff;
   var $73=$v;
   var $74=$73;
   var $75=Math.abs($74);
   var $76=($75)+(1.1920928955078125e-7);
   var $77=$76;
   var $78=($72)/($77);
   $s=$78;
   var $79=$diff;
   var $80=($79)+(1.1920928955078125e-7);
   var $81=$80;
   var $82=(60)/($81);
   var $83=$82;
   $diff=$83;
   var $84=$v;
   var $85=$r;
   var $86=$84 == $85;
   if ($86) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $88=$g;
   var $89=$b;
   var $90=($88)-($89);
   var $91=$diff;
   var $92=($90)*($91);
   $h=$92;
   label = 19; break;
  case 15: 
   var $94=$v;
   var $95=$g;
   var $96=$94 == $95;
   if ($96) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $98=$b;
   var $99=$r;
   var $100=($98)-($99);
   var $101=$diff;
   var $102=($100)*($101);
   var $103=($102)+(120);
   $h=$103;
   label = 18; break;
  case 17: 
   var $105=$r;
   var $106=$g;
   var $107=($105)-($106);
   var $108=$diff;
   var $109=($107)*($108);
   var $110=($109)+(240);
   $h=$110;
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $113=$h;
   var $114=$113 < 0;
   if ($114) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $116=$h;
   var $117=($116)+(360);
   $h=$117;
   label = 21; break;
  case 21: 
   var $119=$h;
   var $120=$i;
   var $121=$3;
   var $122=(($121+($120<<2))|0);
   HEAPF32[(($122)>>2)]=$119;
   var $123=$s;
   var $124=$i;
   var $125=((($124)+(1))|0);
   var $126=$3;
   var $127=(($126+($125<<2))|0);
   HEAPF32[(($127)>>2)]=$123;
   var $128=$v;
   var $129=$i;
   var $130=((($129)+(2))|0);
   var $131=$3;
   var $132=(($131+($130<<2))|0);
   HEAPF32[(($132)>>2)]=$128;
   label = 22; break;
  case 22: 
   var $134=$i;
   var $135=((($134)+(3))|0);
   $i=$135;
   var $136=$5;
   var $137=$1;
   var $138=(($137+($136<<2))|0);
   $1=$138;
   label = 4; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $141=$2;
   var $142=$1;
   var $143=(($142+($141<<2))|0);
   $1=$143;
   var $144=$4;
   var $145=$3;
   var $146=(($145+($144<<2))|0);
   $3=$146;
   label = 2; break;
  case 25: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2Lab_32f_CnC3RPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $b;
   var $g;
   var $r;
   var $x;
   var $y;
   var $z;
   var $L;
   var $a;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 18; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 16; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAPF32[(($34)>>2)];
   $b=$35;
   var $36=$1;
   var $37=(($36+4)|0);
   var $38=HEAPF32[(($37)>>2)];
   $g=$38;
   var $39=$6;
   var $40=2 ^ $39;
   var $41=$1;
   var $42=(($41+($40<<2))|0);
   var $43=HEAPF32[(($42)>>2)];
   $r=$43;
   var $44=$b;
   var $45=($44)*(0.18982799351215363);
   var $46=$g;
   var $47=($46)*(0.3762190043926239);
   var $48=($45)+($47);
   var $49=$r;
   var $50=($49)*(0.4339529871940613);
   var $51=($48)+($50);
   $x=$51;
   var $52=$b;
   var $53=($52)*(0.0721689984202385);
   var $54=$g;
   var $55=($54)*(0.7151600122451782);
   var $56=($53)+($55);
   var $57=$r;
   var $58=($57)*(0.21267099678516388);
   var $59=($56)+($58);
   $y=$59;
   var $60=$b;
   var $61=($60)*(0.8727660179138184);
   var $62=$g;
   var $63=($62)*(0.10947699844837189);
   var $64=($61)+($63);
   var $65=$r;
   var $66=($65)*(0.017758000642061234);
   var $67=($64)+($66);
   $z=$67;
   var $68=$x;
   var $69=$68 > 0.008856000378727913;
   if ($69) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $71=$x;
   var $72=_cvCbrt($71);
   $x=$72;
   label = 8; break;
  case 7: 
   var $74=$x;
   var $75=($74)*(7.7870001792907715);
   var $76=($75)+(0.13793103396892548);
   $x=$76;
   label = 8; break;
  case 8: 
   var $78=$z;
   var $79=$78 > 0.008856000378727913;
   if ($79) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $81=$z;
   var $82=_cvCbrt($81);
   $z=$82;
   label = 11; break;
  case 10: 
   var $84=$z;
   var $85=($84)*(7.7870001792907715);
   var $86=($85)+(0.13793103396892548);
   $z=$86;
   label = 11; break;
  case 11: 
   var $88=$y;
   var $89=$88 > 0.008856000378727913;
   if ($89) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $91=$y;
   var $92=_cvCbrt($91);
   $y=$92;
   var $93=$y;
   var $94=($93)*(116);
   var $95=($94)-(16);
   $L=$95;
   label = 14; break;
  case 13: 
   var $97=$y;
   var $98=($97)*(903.2999877929688);
   $L=$98;
   var $99=$y;
   var $100=($99)*(7.7870001792907715);
   var $101=($100)+(0.13793103396892548);
   $y=$101;
   label = 14; break;
  case 14: 
   var $103=$x;
   var $104=$y;
   var $105=($103)-($104);
   var $106=($105)*(500);
   $a=$106;
   var $107=$y;
   var $108=$z;
   var $109=($107)-($108);
   var $110=($109)*(200);
   $b=$110;
   var $111=$L;
   var $112=$i;
   var $113=$3;
   var $114=(($113+($112<<2))|0);
   HEAPF32[(($114)>>2)]=$111;
   var $115=$a;
   var $116=$i;
   var $117=((($116)+(1))|0);
   var $118=$3;
   var $119=(($118+($117<<2))|0);
   HEAPF32[(($119)>>2)]=$115;
   var $120=$b;
   var $121=$i;
   var $122=((($121)+(2))|0);
   var $123=$3;
   var $124=(($123+($122<<2))|0);
   HEAPF32[(($124)>>2)]=$120;
   label = 15; break;
  case 15: 
   var $126=$i;
   var $127=((($126)+(3))|0);
   $i=$127;
   var $128=$5;
   var $129=$1;
   var $130=(($129+($128<<2))|0);
   $1=$130;
   label = 4; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $133=$2;
   var $134=$1;
   var $135=(($134+($133<<2))|0);
   $1=$135;
   var $136=$4;
   var $137=$3;
   var $138=(($137+($136<<2))|0);
   $3=$138;
   label = 2; break;
  case 18: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2Luv_32f_CnC3RPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $b;
   var $g;
   var $r;
   var $x;
   var $y;
   var $z;
   var $L;
   var $u;
   var $v;
   var $t;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$src_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$2;
   var $16=((($15)-($14))|0);
   $2=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 17; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 15; break; }
  case 5: 
   var $32=$6;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAPF32[(($34)>>2)];
   $b=$35;
   var $36=$1;
   var $37=(($36+4)|0);
   var $38=HEAPF32[(($37)>>2)];
   $g=$38;
   var $39=$6;
   var $40=2 ^ $39;
   var $41=$1;
   var $42=(($41+($40<<2))|0);
   var $43=HEAPF32[(($42)>>2)];
   $r=$43;
   var $44=$b;
   var $45=($44)*(0.18042300641536713);
   var $46=$g;
   var $47=($46)*(0.3575800061225891);
   var $48=($45)+($47);
   var $49=$r;
   var $50=($49)*(0.4124529957771301);
   var $51=($48)+($50);
   $x=$51;
   var $52=$b;
   var $53=($52)*(0.0721689984202385);
   var $54=$g;
   var $55=($54)*(0.7151600122451782);
   var $56=($53)+($55);
   var $57=$r;
   var $58=($57)*(0.21267099678516388);
   var $59=($56)+($58);
   $y=$59;
   var $60=$b;
   var $61=($60)*(0.9502270221710205);
   var $62=$g;
   var $63=($62)*(0.11919300258159637);
   var $64=($61)+($63);
   var $65=$r;
   var $66=($65)*(0.01933399960398674);
   var $67=($64)+($66);
   $z=$67;
   var $68=$x;
   var $69=$68 != 0;
   if ($69) { label = 9; break; } else { label = 6; break; }
  case 6: 
   var $71=$y;
   var $72=$71 != 0;
   if ($72) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $74=$z;
   var $75=$74 != 0;
   if ($75) { label = 9; break; } else { label = 8; break; }
  case 8: 
   $v=0;
   $u=0;
   $L=0;
   label = 13; break;
  case 9: 
   var $78=$y;
   var $79=$78 > 0.008856000378727913;
   if ($79) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $81=$y;
   var $82=_cvCbrt($81);
   var $83=($82)*(116);
   var $84=($83)-(16);
   $L=$84;
   label = 12; break;
  case 11: 
   var $86=$y;
   var $87=($86)*(903.2999877929688);
   $L=$87;
   label = 12; break;
  case 12: 
   var $89=$x;
   var $90=$y;
   var $91=($90)*(15);
   var $92=($89)+($91);
   var $93=$z;
   var $94=($93)*(3);
   var $95=($92)+($94);
   var $96=(1)/($95);
   $t=$96;
   var $97=$x;
   var $98=($97)*(4);
   var $99=$t;
   var $100=($98)*($99);
   $u=$100;
   var $101=$y;
   var $102=($101)*(9);
   var $103=$t;
   var $104=($102)*($103);
   $v=$104;
   var $105=$L;
   var $106=($105)*(13);
   var $107=$u;
   var $108=($107)-(0.1979394257068634);
   var $109=($106)*($108);
   $u=$109;
   var $110=$L;
   var $111=($110)*(13);
   var $112=$v;
   var $113=($112)-(0.4683109521865845);
   var $114=($111)*($113);
   $v=$114;
   label = 13; break;
  case 13: 
   var $116=$L;
   var $117=$i;
   var $118=$3;
   var $119=(($118+($117<<2))|0);
   HEAPF32[(($119)>>2)]=$116;
   var $120=$u;
   var $121=$i;
   var $122=((($121)+(1))|0);
   var $123=$3;
   var $124=(($123+($122<<2))|0);
   HEAPF32[(($124)>>2)]=$120;
   var $125=$v;
   var $126=$i;
   var $127=((($126)+(2))|0);
   var $128=$3;
   var $129=(($128+($127<<2))|0);
   HEAPF32[(($129)>>2)]=$125;
   label = 14; break;
  case 14: 
   var $131=$i;
   var $132=((($131)+(3))|0);
   $i=$132;
   var $133=$5;
   var $134=$1;
   var $135=(($134+($133<<2))|0);
   $1=$135;
   label = 4; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $138=$2;
   var $139=$1;
   var $140=(($139+($138<<2))|0);
   $1=$140;
   var $141=$4;
   var $142=$3;
   var $143=(($142+($141<<2))|0);
   $3=$143;
   label = 2; break;
  case 17: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL22icvYCrCb2BGRx_8u_C3CnRPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $Y;
   var $Cr;
   var $Cb;
   var $b;
   var $g;
   var $r;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=(((($7)>>>(0)))&-1);
   $2=$8;
   var $9=$4;
   var $10=(((($9)>>>(0)))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$4;
   var $16=((($15)-($14))|0);
   $4=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 20; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 18; break; }
  case 5: 
   var $32=$i;
   var $33=$1;
   var $34=(($33+$32)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   var $37=$36 << 14;
   $Y=$37;
   var $38=$i;
   var $39=((($38)+(1))|0);
   var $40=$1;
   var $41=(($40+$39)|0);
   var $42=HEAP8[($41)];
   var $43=(($42)&(255));
   var $44=((($43)-(128))|0);
   $Cr=$44;
   var $45=$i;
   var $46=((($45)+(2))|0);
   var $47=$1;
   var $48=(($47+$46)|0);
   var $49=HEAP8[($48)];
   var $50=(($49)&(255));
   var $51=((($50)-(128))|0);
   $Cb=$51;
   var $52=$Y;
   var $53=$Cb;
   var $54=((($53)*(29049))&-1);
   var $55=((($52)+($54))|0);
   var $56=((($55)+(8192))|0);
   var $57=$56 >> 14;
   $b=$57;
   var $58=$Y;
   var $59=$Cr;
   var $60=((($59)*(-11698))&-1);
   var $61=((($58)+($60))|0);
   var $62=$Cb;
   var $63=((($62)*(-5636))&-1);
   var $64=((($61)+($63))|0);
   var $65=((($64)+(8192))|0);
   var $66=$65 >> 14;
   $g=$66;
   var $67=$Y;
   var $68=$Cr;
   var $69=((($68)*(22987))&-1);
   var $70=((($67)+($69))|0);
   var $71=((($70)+(8192))|0);
   var $72=$71 >> 14;
   $r=$72;
   var $73=$b;
   var $74=$73 & -256;
   var $75=(($74)|(0))!=0;
   if ($75) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $77=$b;
   var $83 = $77;label = 8; break;
  case 7: 
   var $79=$b;
   var $80=(($79)|(0)) > 0;
   var $81=$80 ? 255 : 0;
   var $83 = $81;label = 8; break;
  case 8: 
   var $83;
   var $84=(($83) & 255);
   var $85=$6;
   var $86=$3;
   var $87=(($86+$85)|0);
   HEAP8[($87)]=$84;
   var $88=$g;
   var $89=$88 & -256;
   var $90=(($89)|(0))!=0;
   if ($90) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $92=$g;
   var $98 = $92;label = 11; break;
  case 10: 
   var $94=$g;
   var $95=(($94)|(0)) > 0;
   var $96=$95 ? 255 : 0;
   var $98 = $96;label = 11; break;
  case 11: 
   var $98;
   var $99=(($98) & 255);
   var $100=$3;
   var $101=(($100+1)|0);
   HEAP8[($101)]=$99;
   var $102=$r;
   var $103=$102 & -256;
   var $104=(($103)|(0))!=0;
   if ($104) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $106=$r;
   var $112 = $106;label = 14; break;
  case 13: 
   var $108=$r;
   var $109=(($108)|(0)) > 0;
   var $110=$109 ? 255 : 0;
   var $112 = $110;label = 14; break;
  case 14: 
   var $112;
   var $113=(($112) & 255);
   var $114=$6;
   var $115=$114 ^ 2;
   var $116=$3;
   var $117=(($116+$115)|0);
   HEAP8[($117)]=$113;
   var $118=$5;
   var $119=(($118)|(0))==4;
   if ($119) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $121=$3;
   var $122=(($121+3)|0);
   HEAP8[($122)]=0;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $125=$i;
   var $126=((($125)+(3))|0);
   $i=$126;
   var $127=$5;
   var $128=$3;
   var $129=(($128+$127)|0);
   $3=$129;
   label = 4; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $132=$2;
   var $133=$1;
   var $134=(($133+$132)|0);
   $1=$134;
   var $135=$4;
   var $136=$3;
   var $137=(($136+$135)|0);
   $3=$137;
   label = 2; break;
  case 20: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvBGRx2HLS_32f_CnC3RPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $status;
   var $8=sp;
   var $t0;
   var $t1;
   var $b;
   var $g;
   var $r;
   var $h;
   var $s;
   var $l;
   var $vmin;
   var $vmax;
   var $diff;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   var $9=HEAP32[((28136)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 17; break; }
  case 2: 
   var $12=$2;
   var $13=$3;
   var $14=$4;
   var $15=$5;
   var $16=$8;
   var $17=$size;
   assert(8 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];
   var $18=$6;
   var $19=$7;
   var $20=HEAP32[((28136)>>2)];
   var $21=__ZL25icvBGRx2ABC_IPP_32f_CnC3RPKfiPfi6CvSizeiiPF8CvStatusPKviPviS2_E($12, $13, $14, $15, $8, $18, $19, $20);
   $status=$21;
   var $22=$status;
   var $23=(($22)|(0)) >= 0;
   if ($23) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $25=(($size)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=((($26)*(3))&-1);
   HEAP32[(($25)>>2)]=$27;
   var $28=$5;
   var $29=((((($28)>>>(0)))/(4))&-1);
   $5=$29;
   label = 4; break;
  case 4: 
   var $31=(($size+4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=((($32)-(1))|0);
   HEAP32[(($31)>>2)]=$33;
   var $34=(($32)|(0))!=0;
   if ($34) { label = 5; break; } else { label = 15; break; }
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $37=$i;
   var $38=(($size)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=((($39)-(12))|0);
   var $41=(($37)|(0)) <= (($40)|(0));
   if ($41) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $43=$i;
   var $44=$4;
   var $45=(($44+($43<<2))|0);
   var $46=HEAPF32[(($45)>>2)];
   var $47=($46)*(360);
   $t0=$47;
   var $48=$i;
   var $49=((($48)+(3))|0);
   var $50=$4;
   var $51=(($50+($49<<2))|0);
   var $52=HEAPF32[(($51)>>2)];
   var $53=($52)*(360);
   $t1=$53;
   var $54=$t0;
   var $55=$i;
   var $56=$4;
   var $57=(($56+($55<<2))|0);
   HEAPF32[(($57)>>2)]=$54;
   var $58=$t1;
   var $59=$i;
   var $60=((($59)+(3))|0);
   var $61=$4;
   var $62=(($61+($60<<2))|0);
   HEAPF32[(($62)>>2)]=$58;
   var $63=$i;
   var $64=((($63)+(6))|0);
   var $65=$4;
   var $66=(($65+($64<<2))|0);
   var $67=HEAPF32[(($66)>>2)];
   var $68=($67)*(360);
   $t0=$68;
   var $69=$i;
   var $70=((($69)+(9))|0);
   var $71=$4;
   var $72=(($71+($70<<2))|0);
   var $73=HEAPF32[(($72)>>2)];
   var $74=($73)*(360);
   $t1=$74;
   var $75=$t0;
   var $76=$i;
   var $77=((($76)+(6))|0);
   var $78=$4;
   var $79=(($78+($77<<2))|0);
   HEAPF32[(($79)>>2)]=$75;
   var $80=$t1;
   var $81=$i;
   var $82=((($81)+(9))|0);
   var $83=$4;
   var $84=(($83+($82<<2))|0);
   HEAPF32[(($84)>>2)]=$80;
   label = 8; break;
  case 8: 
   var $86=$i;
   var $87=((($86)+(12))|0);
   $i=$87;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $90=$i;
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($90)|(0)) < (($92)|(0));
   if ($93) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $95=$i;
   var $96=$4;
   var $97=(($96+($95<<2))|0);
   var $98=HEAPF32[(($97)>>2)];
   var $99=($98)*(360);
   var $100=$i;
   var $101=$4;
   var $102=(($101+($100<<2))|0);
   HEAPF32[(($102)>>2)]=$99;
   label = 12; break;
  case 12: 
   var $104=$i;
   var $105=((($104)+(3))|0);
   $i=$105;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $108=$5;
   var $109=$4;
   var $110=(($109+($108<<2))|0);
   $4=$110;
   label = 4; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $113=$status;
   $1=$113;
   label = 47; break;
  case 17: 
   var $115=$3;
   var $116=((((($115)>>>(0)))/(4))&-1);
   $3=$116;
   var $117=$5;
   var $118=((((($117)>>>(0)))/(4))&-1);
   $5=$118;
   var $119=(($size)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=$6;
   var $122=(Math.imul($120,$121)|0);
   var $123=$3;
   var $124=((($123)-($122))|0);
   $3=$124;
   var $125=(($size)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=((($126)*(3))&-1);
   HEAP32[(($125)>>2)]=$127;
   label = 18; break;
  case 18: 
   var $129=(($size+4)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=((($130)-(1))|0);
   HEAP32[(($129)>>2)]=$131;
   var $132=(($130)|(0))!=0;
   if ($132) { label = 19; break; } else { label = 46; break; }
  case 19: 
   $i=0;
   label = 20; break;
  case 20: 
   var $135=$i;
   var $136=(($size)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($135)|(0)) < (($137)|(0));
   if ($138) { label = 21; break; } else { label = 44; break; }
  case 21: 
   var $140=$7;
   var $141=$2;
   var $142=(($141+($140<<2))|0);
   var $143=HEAPF32[(($142)>>2)];
   $b=$143;
   var $144=$2;
   var $145=(($144+4)|0);
   var $146=HEAPF32[(($145)>>2)];
   $g=$146;
   var $147=$7;
   var $148=2 ^ $147;
   var $149=$2;
   var $150=(($149+($148<<2))|0);
   var $151=HEAPF32[(($150)>>2)];
   $r=$151;
   $h=0;
   $s=0;
   var $152=$r;
   $vmin=$152;
   $vmax=$152;
   var $153=$vmax;
   var $154=$g;
   var $155=$153 < $154;
   if ($155) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $157=$g;
   $vmax=$157;
   label = 23; break;
  case 23: 
   var $159=$vmax;
   var $160=$b;
   var $161=$159 < $160;
   if ($161) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $163=$b;
   $vmax=$163;
   label = 25; break;
  case 25: 
   var $165=$vmin;
   var $166=$g;
   var $167=$165 > $166;
   if ($167) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $169=$g;
   $vmin=$169;
   label = 27; break;
  case 27: 
   var $171=$vmin;
   var $172=$b;
   var $173=$171 > $172;
   if ($173) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $175=$b;
   $vmin=$175;
   label = 29; break;
  case 29: 
   var $177=$vmax;
   var $178=$vmin;
   var $179=($177)-($178);
   $diff=$179;
   var $180=$vmax;
   var $181=$vmin;
   var $182=($180)+($181);
   var $183=($182)*(0.5);
   $l=$183;
   var $184=$diff;
   var $185=$184 > 1.1920928955078125e-7;
   if ($185) { label = 30; break; } else { label = 42; break; }
  case 30: 
   var $187=$l;
   var $188=$187 < 0.5;
   if ($188) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $190=$diff;
   var $191=$vmax;
   var $192=$vmin;
   var $193=($191)+($192);
   var $194=($190)/($193);
   var $203 = $194;label = 33; break;
  case 32: 
   var $196=$diff;
   var $197=$vmax;
   var $198=(2)-($197);
   var $199=$vmin;
   var $200=($198)-($199);
   var $201=($196)/($200);
   var $203 = $201;label = 33; break;
  case 33: 
   var $203;
   $s=$203;
   var $204=$diff;
   var $205=(60)/($204);
   $diff=$205;
   var $206=$vmax;
   var $207=$r;
   var $208=$206 == $207;
   if ($208) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $210=$g;
   var $211=$b;
   var $212=($210)-($211);
   var $213=$diff;
   var $214=($212)*($213);
   $h=$214;
   label = 39; break;
  case 35: 
   var $216=$vmax;
   var $217=$g;
   var $218=$216 == $217;
   if ($218) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $220=$b;
   var $221=$r;
   var $222=($220)-($221);
   var $223=$diff;
   var $224=($222)*($223);
   var $225=($224)+(120);
   $h=$225;
   label = 38; break;
  case 37: 
   var $227=$r;
   var $228=$g;
   var $229=($227)-($228);
   var $230=$diff;
   var $231=($229)*($230);
   var $232=($231)+(240);
   $h=$232;
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $235=$h;
   var $236=$235 < 0;
   if ($236) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $238=$h;
   var $239=($238)+(360);
   $h=$239;
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   var $242=$h;
   var $243=$i;
   var $244=$4;
   var $245=(($244+($243<<2))|0);
   HEAPF32[(($245)>>2)]=$242;
   var $246=$l;
   var $247=$i;
   var $248=((($247)+(1))|0);
   var $249=$4;
   var $250=(($249+($248<<2))|0);
   HEAPF32[(($250)>>2)]=$246;
   var $251=$s;
   var $252=$i;
   var $253=((($252)+(2))|0);
   var $254=$4;
   var $255=(($254+($253<<2))|0);
   HEAPF32[(($255)>>2)]=$251;
   label = 43; break;
  case 43: 
   var $257=$i;
   var $258=((($257)+(3))|0);
   $i=$258;
   var $259=$6;
   var $260=$2;
   var $261=(($260+($259<<2))|0);
   $2=$261;
   label = 20; break;
  case 44: 
   label = 45; break;
  case 45: 
   var $264=$3;
   var $265=$2;
   var $266=(($265+($264<<2))|0);
   $2=$266;
   var $267=$5;
   var $268=$4;
   var $269=(($268+($267<<2))|0);
   $4=$269;
   label = 18; break;
  case 46: 
   $1=0;
   label = 47; break;
  case 47: 
   var $272=$1;
   STACKTOP = sp;
   return $272;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvXYZ2BGRx_8u_C3CnRPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $t;
   var $matrix=sp;
   var $8=(sp)+(40);
   var $b;
   var $g;
   var $r;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   var $9=$matrix;
   assert(36 % 1 === 0);(_memcpy($9, 16576, 36)|0);
   var $10=HEAP32[((27992)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((27992)>>2)];
   var $22=__ZL24icvABC2BGRx_IPP_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $1=$22;
   label = 25; break;
  case 3: 
   var $24=$3;
   var $25=(((($24)>>>(0)))&-1);
   $3=$25;
   var $26=$5;
   var $27=(((($26)>>>(0)))&-1);
   $5=$27;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$5;
   var $33=((($32)-($31))|0);
   $5=$33;
   var $34=(($size)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   HEAP32[(($34)>>2)]=$36;
   var $37=$7;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $40=(($matrix)|0);
   var $41=HEAP32[(($40)>>2)];
   $t=$41;
   var $42=(($matrix+24)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($matrix)|0);
   HEAP32[(($44)>>2)]=$43;
   var $45=$t;
   var $46=(($matrix+24)|0);
   HEAP32[(($46)>>2)]=$45;
   var $47=(($matrix+4)|0);
   var $48=HEAP32[(($47)>>2)];
   $t=$48;
   var $49=(($matrix+28)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($matrix+4)|0);
   HEAP32[(($51)>>2)]=$50;
   var $52=$t;
   var $53=(($matrix+28)|0);
   HEAP32[(($53)>>2)]=$52;
   var $54=(($matrix+8)|0);
   var $55=HEAP32[(($54)>>2)];
   $t=$55;
   var $56=(($matrix+32)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($matrix+8)|0);
   HEAP32[(($58)>>2)]=$57;
   var $59=$t;
   var $60=(($matrix+32)|0);
   HEAP32[(($60)>>2)]=$59;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $63=(($size+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(1))|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=(($64)|(0))!=0;
   if ($66) { label = 7; break; } else { label = 24; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $69=$i;
   var $70=(($size)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($69)|(0)) < (($71)|(0));
   if ($72) { label = 9; break; } else { label = 22; break; }
  case 9: 
   var $74=$i;
   var $75=$2;
   var $76=(($75+$74)|0);
   var $77=HEAP8[($76)];
   var $78=(($77)&(255));
   var $79=(($matrix)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(Math.imul($78,$80)|0);
   var $82=$i;
   var $83=((($82)+(1))|0);
   var $84=$2;
   var $85=(($84+$83)|0);
   var $86=HEAP8[($85)];
   var $87=(($86)&(255));
   var $88=(($matrix+4)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(Math.imul($87,$89)|0);
   var $91=((($81)+($90))|0);
   var $92=$i;
   var $93=((($92)+(2))|0);
   var $94=$2;
   var $95=(($94+$93)|0);
   var $96=HEAP8[($95)];
   var $97=(($96)&(255));
   var $98=(($matrix+8)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(Math.imul($97,$99)|0);
   var $101=((($91)+($100))|0);
   var $102=((($101)+(512))|0);
   var $103=$102 >> 10;
   $b=$103;
   var $104=$i;
   var $105=$2;
   var $106=(($105+$104)|0);
   var $107=HEAP8[($106)];
   var $108=(($107)&(255));
   var $109=(($matrix+12)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(Math.imul($108,$110)|0);
   var $112=$i;
   var $113=((($112)+(1))|0);
   var $114=$2;
   var $115=(($114+$113)|0);
   var $116=HEAP8[($115)];
   var $117=(($116)&(255));
   var $118=(($matrix+16)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(Math.imul($117,$119)|0);
   var $121=((($111)+($120))|0);
   var $122=$i;
   var $123=((($122)+(2))|0);
   var $124=$2;
   var $125=(($124+$123)|0);
   var $126=HEAP8[($125)];
   var $127=(($126)&(255));
   var $128=(($matrix+20)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(Math.imul($127,$129)|0);
   var $131=((($121)+($130))|0);
   var $132=((($131)+(512))|0);
   var $133=$132 >> 10;
   $g=$133;
   var $134=$i;
   var $135=$2;
   var $136=(($135+$134)|0);
   var $137=HEAP8[($136)];
   var $138=(($137)&(255));
   var $139=(($matrix+24)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(Math.imul($138,$140)|0);
   var $142=$i;
   var $143=((($142)+(1))|0);
   var $144=$2;
   var $145=(($144+$143)|0);
   var $146=HEAP8[($145)];
   var $147=(($146)&(255));
   var $148=(($matrix+28)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=(Math.imul($147,$149)|0);
   var $151=((($141)+($150))|0);
   var $152=$i;
   var $153=((($152)+(2))|0);
   var $154=$2;
   var $155=(($154+$153)|0);
   var $156=HEAP8[($155)];
   var $157=(($156)&(255));
   var $158=(($matrix+32)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(Math.imul($157,$159)|0);
   var $161=((($151)+($160))|0);
   var $162=((($161)+(512))|0);
   var $163=$162 >> 10;
   $r=$163;
   var $164=$b;
   var $165=$164 & -256;
   var $166=(($165)|(0))!=0;
   if ($166) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $168=$b;
   var $174 = $168;label = 12; break;
  case 11: 
   var $170=$b;
   var $171=(($170)|(0)) > 0;
   var $172=$171 ? 255 : 0;
   var $174 = $172;label = 12; break;
  case 12: 
   var $174;
   var $175=(($174) & 255);
   var $176=$4;
   var $177=(($176)|0);
   HEAP8[($177)]=$175;
   var $178=$g;
   var $179=$178 & -256;
   var $180=(($179)|(0))!=0;
   if ($180) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $182=$g;
   var $188 = $182;label = 15; break;
  case 14: 
   var $184=$g;
   var $185=(($184)|(0)) > 0;
   var $186=$185 ? 255 : 0;
   var $188 = $186;label = 15; break;
  case 15: 
   var $188;
   var $189=(($188) & 255);
   var $190=$4;
   var $191=(($190+1)|0);
   HEAP8[($191)]=$189;
   var $192=$r;
   var $193=$192 & -256;
   var $194=(($193)|(0))!=0;
   if ($194) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $196=$r;
   var $202 = $196;label = 18; break;
  case 17: 
   var $198=$r;
   var $199=(($198)|(0)) > 0;
   var $200=$199 ? 255 : 0;
   var $202 = $200;label = 18; break;
  case 18: 
   var $202;
   var $203=(($202) & 255);
   var $204=$4;
   var $205=(($204+2)|0);
   HEAP8[($205)]=$203;
   var $206=$6;
   var $207=(($206)|(0))==4;
   if ($207) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $209=$4;
   var $210=(($209+3)|0);
   HEAP8[($210)]=0;
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $213=$i;
   var $214=((($213)+(3))|0);
   $i=$214;
   var $215=$6;
   var $216=$4;
   var $217=(($216+$215)|0);
   $4=$217;
   label = 8; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $220=$3;
   var $221=$2;
   var $222=(($221+$220)|0);
   $2=$222;
   var $223=$5;
   var $224=$4;
   var $225=(($224+$223)|0);
   $4=$225;
   label = 6; break;
  case 24: 
   $1=0;
   label = 25; break;
  case 25: 
   var $228=$1;
   STACKTOP = sp;
   return $228;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL23icvYCrCb2BGRx_16u_C3CnRPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $Y;
   var $Cr;
   var $Cb;
   var $b;
   var $g;
   var $r;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$4;
   var $16=((($15)-($14))|0);
   $4=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 20; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 18; break; }
  case 5: 
   var $32=$i;
   var $33=$1;
   var $34=(($33+($32<<1))|0);
   var $35=HEAP16[(($34)>>1)];
   var $36=(($35)&(65535));
   var $37=$36 << 14;
   $Y=$37;
   var $38=$i;
   var $39=((($38)+(1))|0);
   var $40=$1;
   var $41=(($40+($39<<1))|0);
   var $42=HEAP16[(($41)>>1)];
   var $43=(($42)&(65535));
   var $44=((($43)-(32768))|0);
   $Cr=$44;
   var $45=$i;
   var $46=((($45)+(2))|0);
   var $47=$1;
   var $48=(($47+($46<<1))|0);
   var $49=HEAP16[(($48)>>1)];
   var $50=(($49)&(65535));
   var $51=((($50)-(32768))|0);
   $Cb=$51;
   var $52=$Y;
   var $53=$Cb;
   var $54=((($53)*(29049))&-1);
   var $55=((($52)+($54))|0);
   var $56=((($55)+(8192))|0);
   var $57=$56 >> 14;
   $b=$57;
   var $58=$Y;
   var $59=$Cr;
   var $60=((($59)*(-11698))&-1);
   var $61=((($58)+($60))|0);
   var $62=$Cb;
   var $63=((($62)*(-5636))&-1);
   var $64=((($61)+($63))|0);
   var $65=((($64)+(8192))|0);
   var $66=$65 >> 14;
   $g=$66;
   var $67=$Y;
   var $68=$Cr;
   var $69=((($68)*(22987))&-1);
   var $70=((($67)+($69))|0);
   var $71=((($70)+(8192))|0);
   var $72=$71 >> 14;
   $r=$72;
   var $73=$b;
   var $74=$73 & -65536;
   var $75=(($74)|(0))!=0;
   if ($75) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $77=$b;
   var $83 = $77;label = 8; break;
  case 7: 
   var $79=$b;
   var $80=(($79)|(0)) > 0;
   var $81=$80 ? 65535 : 0;
   var $83 = $81;label = 8; break;
  case 8: 
   var $83;
   var $84=(($83) & 65535);
   var $85=$6;
   var $86=$3;
   var $87=(($86+($85<<1))|0);
   HEAP16[(($87)>>1)]=$84;
   var $88=$g;
   var $89=$88 & -65536;
   var $90=(($89)|(0))!=0;
   if ($90) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $92=$g;
   var $98 = $92;label = 11; break;
  case 10: 
   var $94=$g;
   var $95=(($94)|(0)) > 0;
   var $96=$95 ? 65535 : 0;
   var $98 = $96;label = 11; break;
  case 11: 
   var $98;
   var $99=(($98) & 65535);
   var $100=$3;
   var $101=(($100+2)|0);
   HEAP16[(($101)>>1)]=$99;
   var $102=$r;
   var $103=$102 & -65536;
   var $104=(($103)|(0))!=0;
   if ($104) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $106=$r;
   var $112 = $106;label = 14; break;
  case 13: 
   var $108=$r;
   var $109=(($108)|(0)) > 0;
   var $110=$109 ? 65535 : 0;
   var $112 = $110;label = 14; break;
  case 14: 
   var $112;
   var $113=(($112) & 65535);
   var $114=$6;
   var $115=$114 ^ 2;
   var $116=$3;
   var $117=(($116+($115<<1))|0);
   HEAP16[(($117)>>1)]=$113;
   var $118=$5;
   var $119=(($118)|(0))==4;
   if ($119) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $121=$3;
   var $122=(($121+6)|0);
   HEAP16[(($122)>>1)]=0;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $125=$i;
   var $126=((($125)+(3))|0);
   $i=$126;
   var $127=$5;
   var $128=$3;
   var $129=(($128+($127<<1))|0);
   $3=$129;
   label = 4; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $132=$2;
   var $133=$1;
   var $134=(($133+($132<<1))|0);
   $1=$134;
   var $135=$4;
   var $136=$3;
   var $137=(($136+($135<<1))|0);
   $3=$137;
   label = 2; break;
  case 20: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvHSV2BGRx_8u_C3CnRPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $status;
   var $src1;
   var $h;
   var $s;
   var $v;
   var $8=sp;
   var $r;
   var $g;
   var $b;
   var $9=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   var $10=HEAP32[((28160)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 29; break; }
  case 2: 
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=16384 > (($14)|(0));
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $21 = $18;label = 5; break;
  case 4: 
   var $21 = 16384;label = 5; break;
  case 5: 
   var $21;
   $block_size=$21;
   $status=0;
   var $22=$block_size;
   var $23=((($22)*(3))&-1);
   var $24=$23;
   var $25=((($24)+(32))|0);
   var $26=STACKTOP;STACKTOP = (STACKTOP + $25)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $27=__Z10cvAlignPtrPKvi($26, 32);
   $buffer=$27;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$5;
   var $33=((($32)-($31))|0);
   $5=$33;
   label = 6; break;
  case 6: 
   var $35=(($size+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=((($36)-(1))|0);
   HEAP32[(($35)>>2)]=$37;
   var $38=(($36)|(0))!=0;
   if ($38) { label = 7; break; } else { label = 28; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $41=$i;
   var $42=(($size)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0)) < (($43)|(0));
   if ($44) { label = 9; break; } else { label = 26; break; }
  case 9: 
   var $46=$2;
   var $47=$i;
   var $48=((($47)*(3))&-1);
   var $49=(($46+$48)|0);
   $src1=$49;
   var $50=$block_size;
   var $51=(($size)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$i;
   var $54=((($52)-($53))|0);
   var $55=(($50)|(0)) > (($54)|(0));
   if ($55) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$i;
   var $60=((($58)-($59))|0);
   var $64 = $60;label = 12; break;
  case 11: 
   var $62=$block_size;
   var $64 = $62;label = 12; break;
  case 12: 
   var $64;
   $di=$64;
   $k=0;
   label = 13; break;
  case 13: 
   var $66=$k;
   var $67=$di;
   var $68=((($67)*(3))&-1);
   var $69=(($66)|(0)) < (($68)|(0));
   if ($69) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $71=$k;
   var $72=$src1;
   var $73=(($72+$71)|0);
   var $74=HEAP8[($73)];
   var $75=(($74)&(255));
   var $76=((22424+$75)|0);
   var $77=HEAP8[($76)];
   $h=$77;
   var $78=$k;
   var $79=((($78)+(1))|0);
   var $80=$src1;
   var $81=(($80+$79)|0);
   var $82=HEAP8[($81)];
   $s=$82;
   var $83=$k;
   var $84=((($83)+(2))|0);
   var $85=$src1;
   var $86=(($85+$84)|0);
   var $87=HEAP8[($86)];
   $v=$87;
   var $88=$h;
   var $89=$k;
   var $90=$buffer;
   var $91=(($90+$89)|0);
   HEAP8[($91)]=$88;
   var $92=$s;
   var $93=$k;
   var $94=((($93)+(1))|0);
   var $95=$buffer;
   var $96=(($95+$94)|0);
   HEAP8[($96)]=$92;
   var $97=$v;
   var $98=$k;
   var $99=((($98)+(2))|0);
   var $100=$buffer;
   var $101=(($100+$99)|0);
   HEAP8[($101)]=$97;
   label = 15; break;
  case 15: 
   var $103=$k;
   var $104=((($103)+(3))|0);
   $k=$104;
   label = 13; break;
  case 16: 
   var $106=HEAP32[((28160)>>2)];
   var $107=$buffer;
   var $108=$di;
   var $109=((($108)*(3))&-1);
   var $110=$buffer;
   var $111=$di;
   var $112=((($111)*(3))&-1);
   var $113=$di;
   __Z6cvSizeii($8, $113, 1);
   var $114=FUNCTION_TABLE[$106]($107, $109, $110, $112, $8);
   $status=$114;
   var $115=$status;
   var $116=(($115)|(0)) < 0;
   if ($116) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $118=$status;
   $1=$118;
   label = 30; break;
  case 18: 
   $k=0;
   label = 19; break;
  case 19: 
   var $121=$k;
   var $122=$di;
   var $123=((($122)*(3))&-1);
   var $124=(($121)|(0)) < (($123)|(0));
   if ($124) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $126=$k;
   var $127=$buffer;
   var $128=(($127+$126)|0);
   var $129=HEAP8[($128)];
   $r=$129;
   var $130=$k;
   var $131=((($130)+(1))|0);
   var $132=$buffer;
   var $133=(($132+$131)|0);
   var $134=HEAP8[($133)];
   $g=$134;
   var $135=$k;
   var $136=((($135)+(2))|0);
   var $137=$buffer;
   var $138=(($137+$136)|0);
   var $139=HEAP8[($138)];
   $b=$139;
   var $140=$b;
   var $141=$7;
   var $142=$4;
   var $143=(($142+$141)|0);
   HEAP8[($143)]=$140;
   var $144=$g;
   var $145=$4;
   var $146=(($145+1)|0);
   HEAP8[($146)]=$144;
   var $147=$r;
   var $148=$7;
   var $149=$148 ^ 2;
   var $150=$4;
   var $151=(($150+$149)|0);
   HEAP8[($151)]=$147;
   var $152=$6;
   var $153=(($152)|(0))==4;
   if ($153) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $155=$4;
   var $156=(($155+3)|0);
   HEAP8[($156)]=0;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $159=$k;
   var $160=((($159)+(3))|0);
   $k=$160;
   var $161=$6;
   var $162=$4;
   var $163=(($162+$161)|0);
   $4=$163;
   label = 19; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $166=$block_size;
   var $167=$i;
   var $168=((($167)+($166))|0);
   $i=$168;
   label = 8; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $171=$3;
   var $172=$2;
   var $173=(($172+$171)|0);
   $2=$173;
   var $174=$5;
   var $175=$4;
   var $176=(($175+$174)|0);
   $4=$176;
   label = 6; break;
  case 28: 
   $1=0;
   label = 30; break;
  case 29: 
   var $179=$2;
   var $180=$3;
   var $181=$4;
   var $182=$5;
   var $183=$9;
   var $184=$size;
   assert(8 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($184)+(4))>>2)];
   var $185=$6;
   var $186=$7;
   var $187=__ZL20icvABC2BGRx_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_iiEPKfi($179, $180, $181, $182, $9, $185, $186, (362), ((16664)|0), 0);
   $1=$187;
   label = 30; break;
  case 30: 
   var $189=$1;
   STACKTOP = sp;
   return $189;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvHLS2BGRx_8u_C3CnRPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $status;
   var $src1;
   var $h;
   var $l;
   var $s;
   var $8=sp;
   var $r;
   var $g;
   var $b;
   var $9=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   var $10=HEAP32[((28168)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 29; break; }
  case 2: 
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=16384 > (($14)|(0));
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $21 = $18;label = 5; break;
  case 4: 
   var $21 = 16384;label = 5; break;
  case 5: 
   var $21;
   $block_size=$21;
   $status=0;
   var $22=$block_size;
   var $23=((($22)*(3))&-1);
   var $24=$23;
   var $25=((($24)+(32))|0);
   var $26=STACKTOP;STACKTOP = (STACKTOP + $25)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $27=__Z10cvAlignPtrPKvi($26, 32);
   $buffer=$27;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$5;
   var $33=((($32)-($31))|0);
   $5=$33;
   label = 6; break;
  case 6: 
   var $35=(($size+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=((($36)-(1))|0);
   HEAP32[(($35)>>2)]=$37;
   var $38=(($36)|(0))!=0;
   if ($38) { label = 7; break; } else { label = 28; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $41=$i;
   var $42=(($size)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0)) < (($43)|(0));
   if ($44) { label = 9; break; } else { label = 26; break; }
  case 9: 
   var $46=$2;
   var $47=$i;
   var $48=((($47)*(3))&-1);
   var $49=(($46+$48)|0);
   $src1=$49;
   var $50=$block_size;
   var $51=(($size)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$i;
   var $54=((($52)-($53))|0);
   var $55=(($50)|(0)) > (($54)|(0));
   if ($55) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$i;
   var $60=((($58)-($59))|0);
   var $64 = $60;label = 12; break;
  case 11: 
   var $62=$block_size;
   var $64 = $62;label = 12; break;
  case 12: 
   var $64;
   $di=$64;
   $k=0;
   label = 13; break;
  case 13: 
   var $66=$k;
   var $67=$di;
   var $68=((($67)*(3))&-1);
   var $69=(($66)|(0)) < (($68)|(0));
   if ($69) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $71=$k;
   var $72=$src1;
   var $73=(($72+$71)|0);
   var $74=HEAP8[($73)];
   var $75=(($74)&(255));
   var $76=((22424+$75)|0);
   var $77=HEAP8[($76)];
   $h=$77;
   var $78=$k;
   var $79=((($78)+(1))|0);
   var $80=$src1;
   var $81=(($80+$79)|0);
   var $82=HEAP8[($81)];
   $l=$82;
   var $83=$k;
   var $84=((($83)+(2))|0);
   var $85=$src1;
   var $86=(($85+$84)|0);
   var $87=HEAP8[($86)];
   $s=$87;
   var $88=$h;
   var $89=$k;
   var $90=$buffer;
   var $91=(($90+$89)|0);
   HEAP8[($91)]=$88;
   var $92=$l;
   var $93=$k;
   var $94=((($93)+(1))|0);
   var $95=$buffer;
   var $96=(($95+$94)|0);
   HEAP8[($96)]=$92;
   var $97=$s;
   var $98=$k;
   var $99=((($98)+(2))|0);
   var $100=$buffer;
   var $101=(($100+$99)|0);
   HEAP8[($101)]=$97;
   label = 15; break;
  case 15: 
   var $103=$k;
   var $104=((($103)+(3))|0);
   $k=$104;
   label = 13; break;
  case 16: 
   var $106=HEAP32[((28168)>>2)];
   var $107=$buffer;
   var $108=$di;
   var $109=((($108)*(3))&-1);
   var $110=$buffer;
   var $111=$di;
   var $112=((($111)*(3))&-1);
   var $113=$di;
   __Z6cvSizeii($8, $113, 1);
   var $114=FUNCTION_TABLE[$106]($107, $109, $110, $112, $8);
   $status=$114;
   var $115=$status;
   var $116=(($115)|(0)) < 0;
   if ($116) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $118=$status;
   $1=$118;
   label = 30; break;
  case 18: 
   $k=0;
   label = 19; break;
  case 19: 
   var $121=$k;
   var $122=$di;
   var $123=((($122)*(3))&-1);
   var $124=(($121)|(0)) < (($123)|(0));
   if ($124) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $126=$k;
   var $127=$buffer;
   var $128=(($127+$126)|0);
   var $129=HEAP8[($128)];
   $r=$129;
   var $130=$k;
   var $131=((($130)+(1))|0);
   var $132=$buffer;
   var $133=(($132+$131)|0);
   var $134=HEAP8[($133)];
   $g=$134;
   var $135=$k;
   var $136=((($135)+(2))|0);
   var $137=$buffer;
   var $138=(($137+$136)|0);
   var $139=HEAP8[($138)];
   $b=$139;
   var $140=$b;
   var $141=$7;
   var $142=$4;
   var $143=(($142+$141)|0);
   HEAP8[($143)]=$140;
   var $144=$g;
   var $145=$4;
   var $146=(($145+1)|0);
   HEAP8[($146)]=$144;
   var $147=$r;
   var $148=$7;
   var $149=$148 ^ 2;
   var $150=$4;
   var $151=(($150+$149)|0);
   HEAP8[($151)]=$147;
   var $152=$6;
   var $153=(($152)|(0))==4;
   if ($153) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $155=$4;
   var $156=(($155+3)|0);
   HEAP8[($156)]=0;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $159=$k;
   var $160=((($159)+(3))|0);
   $k=$160;
   var $161=$6;
   var $162=$4;
   var $163=(($162+$161)|0);
   $4=$163;
   label = 19; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $166=$block_size;
   var $167=$i;
   var $168=((($167)+($166))|0);
   $i=$168;
   label = 8; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $171=$3;
   var $172=$2;
   var $173=(($172+$171)|0);
   $2=$173;
   var $174=$5;
   var $175=$4;
   var $176=(($175+$174)|0);
   $4=$176;
   label = 6; break;
  case 28: 
   $1=0;
   label = 30; break;
  case 29: 
   var $179=$2;
   var $180=$3;
   var $181=$4;
   var $182=$5;
   var $183=$9;
   var $184=$size;
   assert(8 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($184)+(4))>>2)];
   var $185=$6;
   var $186=$7;
   var $187=__ZL20icvABC2BGRx_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_iiEPKfi($179, $180, $181, $182, $9, $185, $186, (470), ((16688)|0), 1);
   $1=$187;
   label = 30; break;
  case 30: 
   var $189=$1;
   STACKTOP = sp;
   return $189;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvLab2BGRx_8u_C3CnRPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8=sp;
   var $9=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   var $10=HEAP32[((28152)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=$20 ^ 2;
   var $22=HEAP32[((28152)>>2)];
   var $23=__ZL24icvABC2BGRx_IPP_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $21, $22);
   $1=$23;
   label = 4; break;
  case 3: 
   var $25=$2;
   var $26=$3;
   var $27=$4;
   var $28=$5;
   var $29=$9;
   var $30=$size;
   assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
   var $31=$6;
   var $32=$7;
   var $33=__ZL20icvABC2BGRx_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_iiEPKfi($25, $26, $27, $28, $9, $31, $32, (342), ((16640)|0), 1);
   $1=$33;
   label = 4; break;
  case 4: 
   var $35=$1;
   STACKTOP = sp;
   return $35;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvLuv2BGRx_8u_C3CnRPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8=sp;
   var $9=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   var $10=HEAP32[((28144)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((28144)>>2)];
   var $22=__ZL24icvABC2BGRx_IPP_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $1=$22;
   label = 4; break;
  case 3: 
   var $24=$2;
   var $25=$3;
   var $26=$4;
   var $27=$5;
   var $28=$9;
   var $29=$size;
   assert(8 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];
   var $30=$6;
   var $31=$7;
   var $32=__ZL20icvABC2BGRx_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_iiEPKfi($24, $25, $26, $27, $9, $30, $31, (198), ((16616)|0), 1);
   $1=$32;
   label = 4; break;
  case 4: 
   var $34=$1;
   STACKTOP = sp;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL23icvYCrCb2BGRx_32f_C3CnRPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $Y;
   var $Cr;
   var $Cb;
   var $b;
   var $g;
   var $r;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$4;
   var $16=((($15)-($14))|0);
   $4=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 11; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $32=$i;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAPF32[(($34)>>2)];
   $Y=$35;
   var $36=$i;
   var $37=((($36)+(1))|0);
   var $38=$1;
   var $39=(($38+($37<<2))|0);
   var $40=HEAPF32[(($39)>>2)];
   var $41=($40)-(0.5);
   $Cr=$41;
   var $42=$i;
   var $43=((($42)+(2))|0);
   var $44=$1;
   var $45=(($44+($43<<2))|0);
   var $46=HEAPF32[(($45)>>2)];
   var $47=($46)-(0.5);
   $Cb=$47;
   var $48=$Y;
   var $49=$Cb;
   var $50=($49)*(1.7730000019073486);
   var $51=($48)+($50);
   $b=$51;
   var $52=$Y;
   var $53=$Cr;
   var $54=($53)*(-0.7139999866485596);
   var $55=($52)+($54);
   var $56=$Cb;
   var $57=($56)*(-0.3440000116825104);
   var $58=($55)+($57);
   $g=$58;
   var $59=$Y;
   var $60=$Cr;
   var $61=($60)*(1.402999997138977);
   var $62=($59)+($61);
   $r=$62;
   var $63=$b;
   var $64=$6;
   var $65=$3;
   var $66=(($65+($64<<2))|0);
   HEAPF32[(($66)>>2)]=$63;
   var $67=$g;
   var $68=$3;
   var $69=(($68+4)|0);
   HEAPF32[(($69)>>2)]=$67;
   var $70=$r;
   var $71=$6;
   var $72=$71 ^ 2;
   var $73=$3;
   var $74=(($73+($72<<2))|0);
   HEAPF32[(($74)>>2)]=$70;
   var $75=$5;
   var $76=(($75)|(0))==4;
   if ($76) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $78=$3;
   var $79=(($78+12)|0);
   HEAPF32[(($79)>>2)]=0;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $82=$i;
   var $83=((($82)+(3))|0);
   $i=$83;
   var $84=$5;
   var $85=$3;
   var $86=(($85+($84<<2))|0);
   $3=$86;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $89=$2;
   var $90=$1;
   var $91=(($90+($89<<2))|0);
   $1=$91;
   var $92=$4;
   var $93=$3;
   var $94=(($93+($92<<2))|0);
   $3=$94;
   label = 2; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvXYZ2BGRx_16u_C3CnRPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $t;
   var $matrix=sp;
   var $8=(sp)+(40);
   var $b;
   var $g;
   var $r;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   var $9=$matrix;
   assert(36 % 1 === 0);(_memcpy($9, 16288, 36)|0);
   var $10=HEAP32[((28008)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((28008)>>2)];
   var $22=__ZL25icvABC2BGRx_IPP_16u_C3CnRPKtiPti6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $1=$22;
   label = 25; break;
  case 3: 
   var $24=$3;
   var $25=((((($24)>>>(0)))/(2))&-1);
   $3=$25;
   var $26=$5;
   var $27=((((($26)>>>(0)))/(2))&-1);
   $5=$27;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$5;
   var $33=((($32)-($31))|0);
   $5=$33;
   var $34=(($size)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   HEAP32[(($34)>>2)]=$36;
   var $37=$7;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $40=(($matrix)|0);
   var $41=HEAP32[(($40)>>2)];
   $t=$41;
   var $42=(($matrix+24)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($matrix)|0);
   HEAP32[(($44)>>2)]=$43;
   var $45=$t;
   var $46=(($matrix+24)|0);
   HEAP32[(($46)>>2)]=$45;
   var $47=(($matrix+4)|0);
   var $48=HEAP32[(($47)>>2)];
   $t=$48;
   var $49=(($matrix+28)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($matrix+4)|0);
   HEAP32[(($51)>>2)]=$50;
   var $52=$t;
   var $53=(($matrix+28)|0);
   HEAP32[(($53)>>2)]=$52;
   var $54=(($matrix+8)|0);
   var $55=HEAP32[(($54)>>2)];
   $t=$55;
   var $56=(($matrix+32)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($matrix+8)|0);
   HEAP32[(($58)>>2)]=$57;
   var $59=$t;
   var $60=(($matrix+32)|0);
   HEAP32[(($60)>>2)]=$59;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $63=(($size+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(1))|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=(($64)|(0))!=0;
   if ($66) { label = 7; break; } else { label = 24; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $69=$i;
   var $70=(($size)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($69)|(0)) < (($71)|(0));
   if ($72) { label = 9; break; } else { label = 22; break; }
  case 9: 
   var $74=$i;
   var $75=$2;
   var $76=(($75+($74<<1))|0);
   var $77=HEAP16[(($76)>>1)];
   var $78=(($77)&(65535));
   var $79=(($matrix)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(Math.imul($78,$80)|0);
   var $82=$i;
   var $83=((($82)+(1))|0);
   var $84=$2;
   var $85=(($84+($83<<1))|0);
   var $86=HEAP16[(($85)>>1)];
   var $87=(($86)&(65535));
   var $88=(($matrix+4)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(Math.imul($87,$89)|0);
   var $91=((($81)+($90))|0);
   var $92=$i;
   var $93=((($92)+(2))|0);
   var $94=$2;
   var $95=(($94+($93<<1))|0);
   var $96=HEAP16[(($95)>>1)];
   var $97=(($96)&(65535));
   var $98=(($matrix+8)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(Math.imul($97,$99)|0);
   var $101=((($91)+($100))|0);
   var $102=((($101)+(512))|0);
   var $103=$102 >> 10;
   $b=$103;
   var $104=$i;
   var $105=$2;
   var $106=(($105+($104<<1))|0);
   var $107=HEAP16[(($106)>>1)];
   var $108=(($107)&(65535));
   var $109=(($matrix+12)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(Math.imul($108,$110)|0);
   var $112=$i;
   var $113=((($112)+(1))|0);
   var $114=$2;
   var $115=(($114+($113<<1))|0);
   var $116=HEAP16[(($115)>>1)];
   var $117=(($116)&(65535));
   var $118=(($matrix+16)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(Math.imul($117,$119)|0);
   var $121=((($111)+($120))|0);
   var $122=$i;
   var $123=((($122)+(2))|0);
   var $124=$2;
   var $125=(($124+($123<<1))|0);
   var $126=HEAP16[(($125)>>1)];
   var $127=(($126)&(65535));
   var $128=(($matrix+20)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(Math.imul($127,$129)|0);
   var $131=((($121)+($130))|0);
   var $132=((($131)+(512))|0);
   var $133=$132 >> 10;
   $g=$133;
   var $134=$i;
   var $135=$2;
   var $136=(($135+($134<<1))|0);
   var $137=HEAP16[(($136)>>1)];
   var $138=(($137)&(65535));
   var $139=(($matrix+24)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(Math.imul($138,$140)|0);
   var $142=$i;
   var $143=((($142)+(1))|0);
   var $144=$2;
   var $145=(($144+($143<<1))|0);
   var $146=HEAP16[(($145)>>1)];
   var $147=(($146)&(65535));
   var $148=(($matrix+28)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=(Math.imul($147,$149)|0);
   var $151=((($141)+($150))|0);
   var $152=$i;
   var $153=((($152)+(2))|0);
   var $154=$2;
   var $155=(($154+($153<<1))|0);
   var $156=HEAP16[(($155)>>1)];
   var $157=(($156)&(65535));
   var $158=(($matrix+32)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(Math.imul($157,$159)|0);
   var $161=((($151)+($160))|0);
   var $162=((($161)+(512))|0);
   var $163=$162 >> 10;
   $r=$163;
   var $164=$b;
   var $165=$164 & -65536;
   var $166=(($165)|(0))!=0;
   if ($166) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $168=$b;
   var $174 = $168;label = 12; break;
  case 11: 
   var $170=$b;
   var $171=(($170)|(0)) > 0;
   var $172=$171 ? 65535 : 0;
   var $174 = $172;label = 12; break;
  case 12: 
   var $174;
   var $175=(($174) & 65535);
   var $176=$4;
   var $177=(($176)|0);
   HEAP16[(($177)>>1)]=$175;
   var $178=$g;
   var $179=$178 & -65536;
   var $180=(($179)|(0))!=0;
   if ($180) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $182=$g;
   var $188 = $182;label = 15; break;
  case 14: 
   var $184=$g;
   var $185=(($184)|(0)) > 0;
   var $186=$185 ? 65535 : 0;
   var $188 = $186;label = 15; break;
  case 15: 
   var $188;
   var $189=(($188) & 65535);
   var $190=$4;
   var $191=(($190+2)|0);
   HEAP16[(($191)>>1)]=$189;
   var $192=$r;
   var $193=$192 & -65536;
   var $194=(($193)|(0))!=0;
   if ($194) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $196=$r;
   var $202 = $196;label = 18; break;
  case 17: 
   var $198=$r;
   var $199=(($198)|(0)) > 0;
   var $200=$199 ? 65535 : 0;
   var $202 = $200;label = 18; break;
  case 18: 
   var $202;
   var $203=(($202) & 65535);
   var $204=$4;
   var $205=(($204+4)|0);
   HEAP16[(($205)>>1)]=$203;
   var $206=$6;
   var $207=(($206)|(0))==4;
   if ($207) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $209=$4;
   var $210=(($209+6)|0);
   HEAP16[(($210)>>1)]=0;
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $213=$i;
   var $214=((($213)+(3))|0);
   $i=$214;
   var $215=$6;
   var $216=$4;
   var $217=(($216+($215<<1))|0);
   $4=$217;
   label = 8; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $220=$3;
   var $221=$2;
   var $222=(($221+($220<<1))|0);
   $2=$222;
   var $223=$5;
   var $224=$4;
   var $225=(($224+($223<<1))|0);
   $4=$225;
   label = 6; break;
  case 24: 
   $1=0;
   label = 25; break;
  case 25: 
   var $228=$1;
   STACKTOP = sp;
   return $228;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvXYZ2BGRx_32f_C3CnRPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $t;
   var $matrix=sp;
   var $8=(sp)+(40);
   var $b;
   var $g;
   var $r;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   var $9=$matrix;
   assert(36 % 1 === 0);(_memcpy($9, 16248, 36)|0);
   var $10=HEAP32[((28000)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   var $15=$4;
   var $16=$5;
   var $17=$8;
   var $18=$size;
   assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
   var $19=$6;
   var $20=$7;
   var $21=HEAP32[((28000)>>2)];
   var $22=__ZL25icvABC2BGRx_IPP_32f_C3CnRPKfiPfi6CvSizeiiPF8CvStatusPKviPviS2_E($13, $14, $15, $16, $8, $19, $20, $21);
   $1=$22;
   label = 16; break;
  case 3: 
   var $24=$3;
   var $25=((((($24)>>>(0)))/(4))&-1);
   $3=$25;
   var $26=$5;
   var $27=((((($26)>>>(0)))/(4))&-1);
   $5=$27;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$5;
   var $33=((($32)-($31))|0);
   $5=$33;
   var $34=(($size)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   HEAP32[(($34)>>2)]=$36;
   var $37=$7;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $40=(($matrix)|0);
   var $41=HEAPF32[(($40)>>2)];
   $t=$41;
   var $42=(($matrix+24)|0);
   var $43=HEAPF32[(($42)>>2)];
   var $44=(($matrix)|0);
   HEAPF32[(($44)>>2)]=$43;
   var $45=$t;
   var $46=(($matrix+24)|0);
   HEAPF32[(($46)>>2)]=$45;
   var $47=(($matrix+4)|0);
   var $48=HEAPF32[(($47)>>2)];
   $t=$48;
   var $49=(($matrix+28)|0);
   var $50=HEAPF32[(($49)>>2)];
   var $51=(($matrix+4)|0);
   HEAPF32[(($51)>>2)]=$50;
   var $52=$t;
   var $53=(($matrix+28)|0);
   HEAPF32[(($53)>>2)]=$52;
   var $54=(($matrix+8)|0);
   var $55=HEAPF32[(($54)>>2)];
   $t=$55;
   var $56=(($matrix+32)|0);
   var $57=HEAPF32[(($56)>>2)];
   var $58=(($matrix+8)|0);
   HEAPF32[(($58)>>2)]=$57;
   var $59=$t;
   var $60=(($matrix+32)|0);
   HEAPF32[(($60)>>2)]=$59;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $63=(($size+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(1))|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=(($64)|(0))!=0;
   if ($66) { label = 7; break; } else { label = 15; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $69=$i;
   var $70=(($size)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($69)|(0)) < (($71)|(0));
   if ($72) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $74=$i;
   var $75=$2;
   var $76=(($75+($74<<2))|0);
   var $77=HEAPF32[(($76)>>2)];
   var $78=(($matrix)|0);
   var $79=HEAPF32[(($78)>>2)];
   var $80=($77)*($79);
   var $81=$i;
   var $82=((($81)+(1))|0);
   var $83=$2;
   var $84=(($83+($82<<2))|0);
   var $85=HEAPF32[(($84)>>2)];
   var $86=(($matrix+4)|0);
   var $87=HEAPF32[(($86)>>2)];
   var $88=($85)*($87);
   var $89=($80)+($88);
   var $90=$i;
   var $91=((($90)+(2))|0);
   var $92=$2;
   var $93=(($92+($91<<2))|0);
   var $94=HEAPF32[(($93)>>2)];
   var $95=(($matrix+8)|0);
   var $96=HEAPF32[(($95)>>2)];
   var $97=($94)*($96);
   var $98=($89)+($97);
   $b=$98;
   var $99=$i;
   var $100=$2;
   var $101=(($100+($99<<2))|0);
   var $102=HEAPF32[(($101)>>2)];
   var $103=(($matrix+12)|0);
   var $104=HEAPF32[(($103)>>2)];
   var $105=($102)*($104);
   var $106=$i;
   var $107=((($106)+(1))|0);
   var $108=$2;
   var $109=(($108+($107<<2))|0);
   var $110=HEAPF32[(($109)>>2)];
   var $111=(($matrix+16)|0);
   var $112=HEAPF32[(($111)>>2)];
   var $113=($110)*($112);
   var $114=($105)+($113);
   var $115=$i;
   var $116=((($115)+(2))|0);
   var $117=$2;
   var $118=(($117+($116<<2))|0);
   var $119=HEAPF32[(($118)>>2)];
   var $120=(($matrix+20)|0);
   var $121=HEAPF32[(($120)>>2)];
   var $122=($119)*($121);
   var $123=($114)+($122);
   $g=$123;
   var $124=$i;
   var $125=$2;
   var $126=(($125+($124<<2))|0);
   var $127=HEAPF32[(($126)>>2)];
   var $128=(($matrix+24)|0);
   var $129=HEAPF32[(($128)>>2)];
   var $130=($127)*($129);
   var $131=$i;
   var $132=((($131)+(1))|0);
   var $133=$2;
   var $134=(($133+($132<<2))|0);
   var $135=HEAPF32[(($134)>>2)];
   var $136=(($matrix+28)|0);
   var $137=HEAPF32[(($136)>>2)];
   var $138=($135)*($137);
   var $139=($130)+($138);
   var $140=$i;
   var $141=((($140)+(2))|0);
   var $142=$2;
   var $143=(($142+($141<<2))|0);
   var $144=HEAPF32[(($143)>>2)];
   var $145=(($matrix+32)|0);
   var $146=HEAPF32[(($145)>>2)];
   var $147=($144)*($146);
   var $148=($139)+($147);
   $r=$148;
   var $149=$b;
   var $150=$4;
   var $151=(($150)|0);
   HEAPF32[(($151)>>2)]=$149;
   var $152=$g;
   var $153=$4;
   var $154=(($153+4)|0);
   HEAPF32[(($154)>>2)]=$152;
   var $155=$r;
   var $156=$4;
   var $157=(($156+8)|0);
   HEAPF32[(($157)>>2)]=$155;
   var $158=$6;
   var $159=(($158)|(0))==4;
   if ($159) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $161=$4;
   var $162=(($161+12)|0);
   HEAPF32[(($162)>>2)]=0;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $165=$i;
   var $166=((($165)+(3))|0);
   $i=$166;
   var $167=$6;
   var $168=$4;
   var $169=(($168+($167<<2))|0);
   $4=$169;
   label = 8; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $172=$3;
   var $173=$2;
   var $174=(($173+($172<<2))|0);
   $2=$174;
   var $175=$5;
   var $176=$4;
   var $177=(($176+($175<<2))|0);
   $4=$177;
   label = 6; break;
  case 15: 
   $1=0;
   label = 16; break;
  case 16: 
   var $180=$1;
   STACKTOP = sp;
   return $180;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvHSV2BGRx_32f_C3CnRPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $h;
   var $s;
   var $v;
   var $b;
   var $g;
   var $r;
   var $tab=sp;
   var $sector;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$4;
   var $16=((($15)-($14))|0);
   $4=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 25; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 23; break; }
  case 5: 
   var $32=$i;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAPF32[(($34)>>2)];
   $h=$35;
   var $36=$i;
   var $37=((($36)+(1))|0);
   var $38=$1;
   var $39=(($38+($37<<2))|0);
   var $40=HEAPF32[(($39)>>2)];
   $s=$40;
   var $41=$i;
   var $42=((($41)+(2))|0);
   var $43=$1;
   var $44=(($43+($42<<2))|0);
   var $45=HEAPF32[(($44)>>2)];
   $v=$45;
   var $46=$s;
   var $47=$46 == 0;
   if ($47) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $49=$v;
   $r=$49;
   $g=$49;
   $b=$49;
   label = 19; break;
  case 7: 
   var $51=$h;
   var $52=($51)*(0.01666666753590107);
   $h=$52;
   var $53=$h;
   var $54=$53 < 0;
   if ($54) { label = 8; break; } else { label = 12; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $57=$h;
   var $58=($57)+(6);
   $h=$58;
   label = 10; break;
  case 10: 
   var $60=$h;
   var $61=$60 < 0;
   if ($61) { label = 9; break; } else { label = 11; break; }
  case 11: 
   label = 18; break;
  case 12: 
   var $64=$h;
   var $65=$64 >= 6;
   if ($65) { label = 13; break; } else { label = 17; break; }
  case 13: 
   label = 14; break;
  case 14: 
   var $68=$h;
   var $69=($68)-(6);
   $h=$69;
   label = 15; break;
  case 15: 
   var $71=$h;
   var $72=$71 >= 6;
   if ($72) { label = 14; break; } else { label = 16; break; }
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $76=$h;
   var $77=$76;
   var $78=__Z7cvFloord($77);
   $sector=$78;
   var $79=$sector;
   var $80=(($79)|(0));
   var $81=$h;
   var $82=($81)-($80);
   $h=$82;
   var $83=$v;
   var $84=(($tab)|0);
   HEAPF32[(($84)>>2)]=$83;
   var $85=$v;
   var $86=$s;
   var $87=(1)-($86);
   var $88=($85)*($87);
   var $89=(($tab+4)|0);
   HEAPF32[(($89)>>2)]=$88;
   var $90=$v;
   var $91=$s;
   var $92=$h;
   var $93=($91)*($92);
   var $94=(1)-($93);
   var $95=($90)*($94);
   var $96=(($tab+8)|0);
   HEAPF32[(($96)>>2)]=$95;
   var $97=$v;
   var $98=$s;
   var $99=$h;
   var $100=(1)-($99);
   var $101=($98)*($100);
   var $102=(1)-($101);
   var $103=($97)*($102);
   var $104=(($tab+12)|0);
   HEAPF32[(($104)>>2)]=$103;
   var $105=$sector;
   var $106=((16328+((($105)*(12))&-1))|0);
   var $107=(($106)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($tab+($108<<2))|0);
   var $110=HEAPF32[(($109)>>2)];
   $b=$110;
   var $111=$sector;
   var $112=((16328+((($111)*(12))&-1))|0);
   var $113=(($112+4)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($tab+($114<<2))|0);
   var $116=HEAPF32[(($115)>>2)];
   $g=$116;
   var $117=$sector;
   var $118=((16328+((($117)*(12))&-1))|0);
   var $119=(($118+8)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($tab+($120<<2))|0);
   var $122=HEAPF32[(($121)>>2)];
   $r=$122;
   label = 19; break;
  case 19: 
   var $124=$b;
   var $125=$6;
   var $126=$3;
   var $127=(($126+($125<<2))|0);
   HEAPF32[(($127)>>2)]=$124;
   var $128=$g;
   var $129=$3;
   var $130=(($129+4)|0);
   HEAPF32[(($130)>>2)]=$128;
   var $131=$r;
   var $132=$6;
   var $133=$132 ^ 2;
   var $134=$3;
   var $135=(($134+($133<<2))|0);
   HEAPF32[(($135)>>2)]=$131;
   var $136=$5;
   var $137=(($136)|(0))==4;
   if ($137) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $139=$3;
   var $140=(($139+12)|0);
   HEAPF32[(($140)>>2)]=0;
   label = 21; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $143=$i;
   var $144=((($143)+(3))|0);
   $i=$144;
   var $145=$5;
   var $146=$3;
   var $147=(($146+($145<<2))|0);
   $3=$147;
   label = 4; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $150=$2;
   var $151=$1;
   var $152=(($151+($150<<2))|0);
   $1=$152;
   var $153=$4;
   var $154=$3;
   var $155=(($154+($153<<2))|0);
   $3=$155;
   label = 2; break;
  case 25: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvLab2BGRx_32f_C3CnRPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $L;
   var $a;
   var $b;
   var $x;
   var $y;
   var $z;
   var $g;
   var $r;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$4;
   var $16=((($15)-($14))|0);
   $4=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 11; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $32=$i;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAPF32[(($34)>>2)];
   $L=$35;
   var $36=$i;
   var $37=((($36)+(1))|0);
   var $38=$1;
   var $39=(($38+($37<<2))|0);
   var $40=HEAPF32[(($39)>>2)];
   $a=$40;
   var $41=$i;
   var $42=((($41)+(2))|0);
   var $43=$1;
   var $44=(($43+($42<<2))|0);
   var $45=HEAPF32[(($44)>>2)];
   $b=$45;
   var $46=$L;
   var $47=($46)+(16);
   var $48=($47)*(0.008620689623057842);
   $L=$48;
   var $49=$L;
   var $50=$a;
   var $51=($50)*(0.0020000000949949026);
   var $52=($49)+($51);
   $x=$52;
   var $53=$L;
   var $54=$b;
   var $55=($54)*(0.004999999888241291);
   var $56=($53)-($55);
   $z=$56;
   var $57=$L;
   var $58=$L;
   var $59=($57)*($58);
   var $60=$L;
   var $61=($59)*($60);
   $y=$61;
   var $62=$x;
   var $63=$x;
   var $64=($62)*($63);
   var $65=$x;
   var $66=($64)*($65);
   $x=$66;
   var $67=$z;
   var $68=$z;
   var $69=($67)*($68);
   var $70=$z;
   var $71=($69)*($70);
   $z=$71;
   var $72=$x;
   var $73=($72)*(0.052890975028276443);
   var $74=$y;
   var $75=($74)*(-0.20404300093650818);
   var $76=($73)+($75);
   var $77=$z;
   var $78=($77)*(1.1511515378952026);
   var $79=($76)+($78);
   $b=$79;
   var $80=$x;
   var $81=($80)*(-0.9212350249290466);
   var $82=$y;
   var $83=($82)*(1.8759909868240356);
   var $84=($81)+($83);
   var $85=$z;
   var $86=($85)*(0.045244261622428894);
   var $87=($84)+($86);
   $g=$87;
   var $88=$x;
   var $89=($88)*(3.079932689666748);
   var $90=$y;
   var $91=($90)*(-1.5371500253677368);
   var $92=($89)+($91);
   var $93=$z;
   var $94=($93)*(-0.5427820086479187);
   var $95=($92)+($94);
   $r=$95;
   var $96=$b;
   var $97=$6;
   var $98=$3;
   var $99=(($98+($97<<2))|0);
   HEAPF32[(($99)>>2)]=$96;
   var $100=$g;
   var $101=$3;
   var $102=(($101+4)|0);
   HEAPF32[(($102)>>2)]=$100;
   var $103=$r;
   var $104=$6;
   var $105=$104 ^ 2;
   var $106=$3;
   var $107=(($106+($105<<2))|0);
   HEAPF32[(($107)>>2)]=$103;
   var $108=$5;
   var $109=(($108)|(0))==4;
   if ($109) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $111=$3;
   var $112=(($111+12)|0);
   HEAPF32[(($112)>>2)]=0;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $115=$i;
   var $116=((($115)+(3))|0);
   $i=$116;
   var $117=$5;
   var $118=$3;
   var $119=(($118+($117<<2))|0);
   $3=$119;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $122=$2;
   var $123=$1;
   var $124=(($123+($122<<2))|0);
   $1=$124;
   var $125=$4;
   var $126=$3;
   var $127=(($126+($125<<2))|0);
   $3=$127;
   label = 2; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvLuv2BGRx_32f_C3CnRPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $L;
   var $u;
   var $v;
   var $x;
   var $y;
   var $z;
   var $t;
   var $u1;
   var $v1;
   var $b;
   var $g;
   var $r;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$dst_cn;
   $6=$blue_idx;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$5;
   var $14=(Math.imul($12,$13)|0);
   var $15=$4;
   var $16=((($15)-($14))|0);
   $4=$16;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=((($18)*(3))&-1);
   HEAP32[(($17)>>2)]=$19;
   label = 2; break;
  case 2: 
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)-(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($22)|(0))!=0;
   if ($24) { label = 3; break; } else { label = 17; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) < (($29)|(0));
   if ($30) { label = 5; break; } else { label = 15; break; }
  case 5: 
   var $32=$i;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=HEAPF32[(($34)>>2)];
   $L=$35;
   var $36=$i;
   var $37=((($36)+(1))|0);
   var $38=$1;
   var $39=(($38+($37<<2))|0);
   var $40=HEAPF32[(($39)>>2)];
   $u=$40;
   var $41=$i;
   var $42=((($41)+(2))|0);
   var $43=$1;
   var $44=(($43+($42<<2))|0);
   var $45=HEAPF32[(($44)>>2)];
   $v=$45;
   var $46=$L;
   var $47=$46 >= 8;
   if ($47) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $49=$L;
   var $50=($49)+(16);
   var $51=($50)*(0.008620689623057842);
   $t=$51;
   var $52=$t;
   var $53=$t;
   var $54=($52)*($53);
   var $55=$t;
   var $56=($54)*($55);
   $y=$56;
   label = 11; break;
  case 7: 
   var $58=$L;
   var $59=($58)*(0.001107051968574524);
   $y=$59;
   var $60=$L;
   var $61=$60 < 0.0010000000474974513;
   if ($61) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $66 = 0.0010000000474974513;label = 10; break;
  case 9: 
   var $64=$L;
   var $66 = $64;label = 10; break;
  case 10: 
   var $66;
   $L=$66;
   label = 11; break;
  case 11: 
   var $68=$L;
   var $69=($68)*(13);
   var $70=(1)/($69);
   $t=$70;
   var $71=$u;
   var $72=$t;
   var $73=($71)*($72);
   var $74=($73)+(0.1979394257068634);
   $u1=$74;
   var $75=$v;
   var $76=$t;
   var $77=($75)*($76);
   var $78=($77)+(0.4683109521865845);
   $v1=$78;
   var $79=$u1;
   var $80=($79)*(2.25);
   var $81=$y;
   var $82=($80)*($81);
   var $83=$v1;
   var $84=($82)/($83);
   $x=$84;
   var $85=$u1;
   var $86=($85)*(3);
   var $87=(12)-($86);
   var $88=$v1;
   var $89=($88)*(20);
   var $90=($87)-($89);
   var $91=$y;
   var $92=($90)*($91);
   var $93=$v1;
   var $94=($93)*(4);
   var $95=($92)/($94);
   $z=$95;
   var $96=$x;
   var $97=($96)*(0.05564799904823303);
   var $98=$y;
   var $99=($98)*(-0.20404300093650818);
   var $100=($97)+($99);
   var $101=$z;
   var $102=($101)*(1.0573110580444336);
   var $103=($100)+($102);
   $b=$103;
   var $104=$x;
   var $105=($104)*(-0.9692559838294983);
   var $106=$y;
   var $107=($106)*(1.8759909868240356);
   var $108=($105)+($107);
   var $109=$z;
   var $110=($109)*(0.04155600070953369);
   var $111=($108)+($110);
   $g=$111;
   var $112=$x;
   var $113=($112)*(3.240478992462158);
   var $114=$y;
   var $115=($114)*(-1.5371500253677368);
   var $116=($113)+($115);
   var $117=$z;
   var $118=($117)*(-0.49853500723838806);
   var $119=($116)+($118);
   $r=$119;
   var $120=$b;
   var $121=$6;
   var $122=$3;
   var $123=(($122+($121<<2))|0);
   HEAPF32[(($123)>>2)]=$120;
   var $124=$g;
   var $125=$3;
   var $126=(($125+4)|0);
   HEAPF32[(($126)>>2)]=$124;
   var $127=$r;
   var $128=$6;
   var $129=$128 ^ 2;
   var $130=$3;
   var $131=(($130+($129<<2))|0);
   HEAPF32[(($131)>>2)]=$127;
   var $132=$5;
   var $133=(($132)|(0))==4;
   if ($133) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $135=$3;
   var $136=(($135+12)|0);
   HEAPF32[(($136)>>2)]=0;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $139=$i;
   var $140=((($139)+(3))|0);
   $i=$140;
   var $141=$5;
   var $142=$3;
   var $143=(($142+($141<<2))|0);
   $3=$143;
   label = 4; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $146=$2;
   var $147=$1;
   var $148=(($147+($146<<2))|0);
   $1=$148;
   var $149=$4;
   var $150=$3;
   var $151=(($150+($149<<2))|0);
   $3=$151;
   label = 2; break;
  case 17: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvHLS2BGRx_32f_C3CnRPKfiPfi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $block_size;
   var $buffer;
   var $di;
   var $k;
   var $status;
   var $src1;
   var $h;
   var $s;
   var $v;
   var $8=sp;
   var $r;
   var $g;
   var $b;
   var $h1;
   var $l;
   var $s2;
   var $b3;
   var $g4;
   var $r5;
   var $tab=(sp)+(8);
   var $sector;
   var $p2;
   var $p1;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   var $9=$3;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $3=$10;
   var $11=$5;
   var $12=((((($11)>>>(0)))/(4))&-1);
   $5=$12;
   var $13=HEAP32[((28176)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 29; break; }
  case 2: 
   var $16=(($size)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=1024 > (($17)|(0));
   if ($18) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $20=(($size)|0);
   var $21=HEAP32[(($20)>>2)];
   var $24 = $21;label = 5; break;
  case 4: 
   var $24 = 1024;label = 5; break;
  case 5: 
   var $24;
   $block_size=$24;
   $status=0;
   var $25=$block_size;
   var $26=((($25)*(3))&-1);
   var $27=($26<<2);
   var $28=((($27)+(32))|0);
   var $29=STACKTOP;STACKTOP = (STACKTOP + $28)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $30=__Z10cvAlignPtrPKvi($29, 32);
   var $31=$30;
   $buffer=$31;
   var $32=(($size)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$6;
   var $35=(Math.imul($33,$34)|0);
   var $36=$5;
   var $37=((($36)-($35))|0);
   $5=$37;
   label = 6; break;
  case 6: 
   var $39=(($size+4)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=((($40)-(1))|0);
   HEAP32[(($39)>>2)]=$41;
   var $42=(($40)|(0))!=0;
   if ($42) { label = 7; break; } else { label = 28; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $45=$i;
   var $46=(($size)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($45)|(0)) < (($47)|(0));
   if ($48) { label = 9; break; } else { label = 26; break; }
  case 9: 
   var $50=$2;
   var $51=$i;
   var $52=((($51)*(3))&-1);
   var $53=(($50+($52<<2))|0);
   $src1=$53;
   var $54=$block_size;
   var $55=(($size)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$i;
   var $58=((($56)-($57))|0);
   var $59=(($54)|(0)) > (($58)|(0));
   if ($59) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $61=(($size)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$i;
   var $64=((($62)-($63))|0);
   var $68 = $64;label = 12; break;
  case 11: 
   var $66=$block_size;
   var $68 = $66;label = 12; break;
  case 12: 
   var $68;
   $di=$68;
   $k=0;
   label = 13; break;
  case 13: 
   var $70=$k;
   var $71=$di;
   var $72=((($71)*(3))&-1);
   var $73=(($70)|(0)) < (($72)|(0));
   if ($73) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $75=$k;
   var $76=$src1;
   var $77=(($76+($75<<2))|0);
   var $78=HEAPF32[(($77)>>2)];
   var $79=($78)*(0.0027777778450399637);
   $h=$79;
   var $80=$k;
   var $81=((($80)+(1))|0);
   var $82=$src1;
   var $83=(($82+($81<<2))|0);
   var $84=HEAPF32[(($83)>>2)];
   $s=$84;
   var $85=$k;
   var $86=((($85)+(2))|0);
   var $87=$src1;
   var $88=(($87+($86<<2))|0);
   var $89=HEAPF32[(($88)>>2)];
   $v=$89;
   var $90=$h;
   var $91=$k;
   var $92=$buffer;
   var $93=(($92+($91<<2))|0);
   HEAPF32[(($93)>>2)]=$90;
   var $94=$s;
   var $95=$k;
   var $96=((($95)+(1))|0);
   var $97=$buffer;
   var $98=(($97+($96<<2))|0);
   HEAPF32[(($98)>>2)]=$94;
   var $99=$v;
   var $100=$k;
   var $101=((($100)+(2))|0);
   var $102=$buffer;
   var $103=(($102+($101<<2))|0);
   HEAPF32[(($103)>>2)]=$99;
   label = 15; break;
  case 15: 
   var $105=$k;
   var $106=((($105)+(3))|0);
   $k=$106;
   label = 13; break;
  case 16: 
   var $108=HEAP32[((28176)>>2)];
   var $109=$buffer;
   var $110=$109;
   var $111=$di;
   var $112=((($111)*(3))&-1);
   var $113=($112<<2);
   var $114=$buffer;
   var $115=$114;
   var $116=$di;
   var $117=((($116)*(3))&-1);
   var $118=($117<<2);
   var $119=$di;
   __Z6cvSizeii($8, $119, 1);
   var $120=FUNCTION_TABLE[$108]($110, $113, $115, $118, $8);
   $status=$120;
   var $121=$status;
   var $122=(($121)|(0)) < 0;
   if ($122) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $124=$status;
   $1=$124;
   label = 57; break;
  case 18: 
   $k=0;
   label = 19; break;
  case 19: 
   var $127=$k;
   var $128=$di;
   var $129=((($128)*(3))&-1);
   var $130=(($127)|(0)) < (($129)|(0));
   if ($130) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $132=$k;
   var $133=$buffer;
   var $134=(($133+($132<<2))|0);
   var $135=HEAPF32[(($134)>>2)];
   $r=$135;
   var $136=$k;
   var $137=((($136)+(1))|0);
   var $138=$buffer;
   var $139=(($138+($137<<2))|0);
   var $140=HEAPF32[(($139)>>2)];
   $g=$140;
   var $141=$k;
   var $142=((($141)+(2))|0);
   var $143=$buffer;
   var $144=(($143+($142<<2))|0);
   var $145=HEAPF32[(($144)>>2)];
   $b=$145;
   var $146=$b;
   var $147=$7;
   var $148=$4;
   var $149=(($148+($147<<2))|0);
   HEAPF32[(($149)>>2)]=$146;
   var $150=$g;
   var $151=$4;
   var $152=(($151+4)|0);
   HEAPF32[(($152)>>2)]=$150;
   var $153=$r;
   var $154=$7;
   var $155=$154 ^ 2;
   var $156=$4;
   var $157=(($156+($155<<2))|0);
   HEAPF32[(($157)>>2)]=$153;
   var $158=$6;
   var $159=(($158)|(0))==4;
   if ($159) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $161=$4;
   var $162=(($161+12)|0);
   HEAPF32[(($162)>>2)]=0;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $165=$k;
   var $166=((($165)+(3))|0);
   $k=$166;
   var $167=$6;
   var $168=$4;
   var $169=(($168+($167<<2))|0);
   $4=$169;
   label = 19; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $172=$block_size;
   var $173=$i;
   var $174=((($173)+($172))|0);
   $i=$174;
   label = 8; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $177=$3;
   var $178=$2;
   var $179=(($178+($177<<2))|0);
   $2=$179;
   var $180=$5;
   var $181=$4;
   var $182=(($181+($180<<2))|0);
   $4=$182;
   label = 6; break;
  case 28: 
   $1=0;
   label = 57; break;
  case 29: 
   var $185=(($size)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=$6;
   var $188=(Math.imul($186,$187)|0);
   var $189=$5;
   var $190=((($189)-($188))|0);
   $5=$190;
   var $191=(($size)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=((($192)*(3))&-1);
   HEAP32[(($191)>>2)]=$193;
   label = 30; break;
  case 30: 
   var $195=(($size+4)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=((($196)-(1))|0);
   HEAP32[(($195)>>2)]=$197;
   var $198=(($196)|(0))!=0;
   if ($198) { label = 31; break; } else { label = 56; break; }
  case 31: 
   $i=0;
   label = 32; break;
  case 32: 
   var $201=$i;
   var $202=(($size)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($201)|(0)) < (($203)|(0));
   if ($204) { label = 33; break; } else { label = 54; break; }
  case 33: 
   var $206=$i;
   var $207=$2;
   var $208=(($207+($206<<2))|0);
   var $209=HEAPF32[(($208)>>2)];
   $h1=$209;
   var $210=$i;
   var $211=((($210)+(1))|0);
   var $212=$2;
   var $213=(($212+($211<<2))|0);
   var $214=HEAPF32[(($213)>>2)];
   $l=$214;
   var $215=$i;
   var $216=((($215)+(2))|0);
   var $217=$2;
   var $218=(($217+($216<<2))|0);
   var $219=HEAPF32[(($218)>>2)];
   $s2=$219;
   var $220=$s2;
   var $221=$220 == 0;
   if ($221) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $223=$l;
   $r5=$223;
   $g4=$223;
   $b3=$223;
   label = 50; break;
  case 35: 
   var $225=$l;
   var $226=$225 <= 0.5;
   if ($226) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $228=$l;
   var $229=$s2;
   var $230=($229)+(1);
   var $231=($228)*($230);
   var $241 = $231;label = 38; break;
  case 37: 
   var $233=$l;
   var $234=$s2;
   var $235=($233)+($234);
   var $236=$l;
   var $237=$s2;
   var $238=($236)*($237);
   var $239=($235)-($238);
   var $241 = $239;label = 38; break;
  case 38: 
   var $241;
   $p2=$241;
   var $242=$l;
   var $243=($242)*(2);
   var $244=$p2;
   var $245=($243)-($244);
   $p1=$245;
   var $246=$h1;
   var $247=($246)*(0.01666666753590107);
   $h1=$247;
   var $248=$h1;
   var $249=$248 < 0;
   if ($249) { label = 39; break; } else { label = 43; break; }
  case 39: 
   label = 40; break;
  case 40: 
   var $252=$h1;
   var $253=($252)+(6);
   $h1=$253;
   label = 41; break;
  case 41: 
   var $255=$h1;
   var $256=$255 < 0;
   if ($256) { label = 40; break; } else { label = 42; break; }
  case 42: 
   label = 49; break;
  case 43: 
   var $259=$h1;
   var $260=$259 >= 6;
   if ($260) { label = 44; break; } else { label = 48; break; }
  case 44: 
   label = 45; break;
  case 45: 
   var $263=$h1;
   var $264=($263)-(6);
   $h1=$264;
   label = 46; break;
  case 46: 
   var $266=$h1;
   var $267=$266 >= 6;
   if ($267) { label = 45; break; } else { label = 47; break; }
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $271=$h1;
   var $272=$271;
   var $273=__Z7cvFloord($272);
   $sector=$273;
   var $274=$sector;
   var $275=(($274)|(0));
   var $276=$h1;
   var $277=($276)-($275);
   $h1=$277;
   var $278=$p2;
   var $279=(($tab)|0);
   HEAPF32[(($279)>>2)]=$278;
   var $280=$p1;
   var $281=(($tab+4)|0);
   HEAPF32[(($281)>>2)]=$280;
   var $282=$p1;
   var $283=$p2;
   var $284=$p1;
   var $285=($283)-($284);
   var $286=$h1;
   var $287=(1)-($286);
   var $288=($285)*($287);
   var $289=($282)+($288);
   var $290=(($tab+8)|0);
   HEAPF32[(($290)>>2)]=$289;
   var $291=$p1;
   var $292=$p2;
   var $293=$p1;
   var $294=($292)-($293);
   var $295=$h1;
   var $296=($294)*($295);
   var $297=($291)+($296);
   var $298=(($tab+12)|0);
   HEAPF32[(($298)>>2)]=$297;
   var $299=$sector;
   var $300=((16400+((($299)*(12))&-1))|0);
   var $301=(($300)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=(($tab+($302<<2))|0);
   var $304=HEAPF32[(($303)>>2)];
   $b3=$304;
   var $305=$sector;
   var $306=((16400+((($305)*(12))&-1))|0);
   var $307=(($306+4)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=(($tab+($308<<2))|0);
   var $310=HEAPF32[(($309)>>2)];
   $g4=$310;
   var $311=$sector;
   var $312=((16400+((($311)*(12))&-1))|0);
   var $313=(($312+8)|0);
   var $314=HEAP32[(($313)>>2)];
   var $315=(($tab+($314<<2))|0);
   var $316=HEAPF32[(($315)>>2)];
   $r5=$316;
   label = 50; break;
  case 50: 
   var $318=$b3;
   var $319=$7;
   var $320=$4;
   var $321=(($320+($319<<2))|0);
   HEAPF32[(($321)>>2)]=$318;
   var $322=$g4;
   var $323=$4;
   var $324=(($323+4)|0);
   HEAPF32[(($324)>>2)]=$322;
   var $325=$r5;
   var $326=$7;
   var $327=$326 ^ 2;
   var $328=$4;
   var $329=(($328+($327<<2))|0);
   HEAPF32[(($329)>>2)]=$325;
   var $330=$6;
   var $331=(($330)|(0))==4;
   if ($331) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $333=$4;
   var $334=(($333+12)|0);
   HEAPF32[(($334)>>2)]=0;
   label = 52; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $337=$i;
   var $338=((($337)+(3))|0);
   $i=$338;
   var $339=$6;
   var $340=$4;
   var $341=(($340+($339<<2))|0);
   $4=$341;
   label = 32; break;
  case 54: 
   label = 55; break;
  case 55: 
   var $344=$3;
   var $345=$2;
   var $346=(($345+($344<<2))|0);
   $2=$346;
   var $347=$5;
   var $348=$4;
   var $349=(($348+($347<<2))|0);
   $4=$349;
   label = 30; break;
  case 56: 
   $1=0;
   label = 57; break;
  case 57: 
   var $352=$1;
   STACKTOP = sp;
   return $352;
  default: assert(0, "bad label: " + label);
 }
}
function __Z10cvAlignPtrPKvi($ptr, $align) {
 var label = 0;
 var $1;
 var $2;
 $1=$ptr;
 $2=$align;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 var $6=((($4)+($5))|0);
 var $7=((($6)-(1))|0);
 var $8=$2;
 var $9=((($8)-(1))|0);
 var $10=$9 ^ -1;
 var $11=$7 & $10;
 var $12=$11;
 return $12;
}
function __Z6cvSizeii($agg_result, $width, $height) {
 var label = 0;
 var $1;
 var $2;
 $1=$width;
 $2=$height;
 var $3=$1;
 var $4=(($agg_result)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=$2;
 var $6=(($agg_result+4)|0);
 HEAP32[(($6)>>2)]=$5;
 return;
}
function __Z7cvRoundd($value) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $temp=sp;
 $1=$value;
 var $2=$1;
 var $3=($2)+(6755399441055744);
 var $4=$temp;
 HEAPF64[(($4)>>3)]=$3;
 var $5=$temp;
 var $ld$0$0=(($5)|0);
 var $6$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($5+4)|0);
 var $6$1=HEAP32[(($ld$1$1)>>2)];
 var $7$0=$6$0;
 var $7=$7$0;
 STACKTOP = sp;
 return $7;
}
function __ZL21icvBayer2BGR_8u_C1C3RPKhiPhi6CvSizei($bayer0, $bayer_step, $dst0, $dst_step, $size, $code) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $blue;
   var $start_with_green;
   var $t0;
   var $t1;
   var $bayer;
   var $dst;
   var $bayer_end;
   $1=$bayer0;
   $2=$bayer_step;
   $3=$dst0;
   $4=$dst_step;
   $5=$code;
   var $6=$5;
   var $7=(($6)|(0))==46;
   if ($7) { var $12 = 1;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=$5;
   var $10=(($9)|(0))==47;
   var $12 = $10;label = 3; break;
  case 3: 
   var $12;
   var $13=$12 ? -1 : 1;
   $blue=$13;
   var $14=$5;
   var $15=(($14)|(0))==47;
   if ($15) { var $20 = 1;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=$5;
   var $18=(($17)|(0))==49;
   var $20 = $18;label = 5; break;
  case 5: 
   var $20;
   var $21=(($20)&(1));
   $start_with_green=$21;
   var $22=$3;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)*(3))&-1);
   var $26=$25;
   _memset($22, 0, $26);
   var $27=$3;
   var $28=(($size+4)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=((($29)-(1))|0);
   var $31=$4;
   var $32=(Math.imul($30,$31)|0);
   var $33=(($27+$32)|0);
   var $34=(($size)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   var $37=$36;
   _memset($33, 0, $37);
   var $38=$4;
   var $39=((($38)+(3))|0);
   var $40=((($39)+(1))|0);
   var $41=$3;
   var $42=(($41+$40)|0);
   $3=$42;
   var $43=(($size+4)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=((($44)-(2))|0);
   HEAP32[(($43)>>2)]=$45;
   var $46=(($size)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=((($47)-(2))|0);
   HEAP32[(($46)>>2)]=$48;
   label = 6; break;
  case 6: 
   var $50=(($size+4)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=((($51)-(1))|0);
   HEAP32[(($50)>>2)]=$52;
   var $53=(($51)|(0)) > 0;
   if ($53) { label = 7; break; } else { label = 26; break; }
  case 7: 
   var $55=$1;
   $bayer=$55;
   var $56=$3;
   $dst=$56;
   var $57=$bayer;
   var $58=(($size)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($57+$59)|0);
   $bayer_end=$60;
   var $61=(($size)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=((($62)*(3))&-1);
   var $64=((($63)+(1))|0);
   var $65=$dst;
   var $66=(($65+$64)|0);
   HEAP8[($66)]=0;
   var $67=(($size)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=((($68)*(3))&-1);
   var $70=$dst;
   var $71=(($70+$69)|0);
   HEAP8[($71)]=0;
   var $72=(($size)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=((($73)*(3))&-1);
   var $75=((($74)-(1))|0);
   var $76=$dst;
   var $77=(($76+$75)|0);
   HEAP8[($77)]=0;
   var $78=$dst;
   var $79=((($78)-(2))|0);
   HEAP8[($79)]=0;
   var $80=$dst;
   var $81=((($80)-(3))|0);
   HEAP8[($81)]=0;
   var $82=$dst;
   var $83=((($82)-(4))|0);
   HEAP8[($83)]=0;
   var $84=(($size)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0)) <= 0;
   if ($86) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 25; break;
  case 9: 
   var $89=$start_with_green;
   var $90=(($89)|(0))!=0;
   if ($90) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $92=$bayer;
   var $93=(($92+1)|0);
   var $94=HEAP8[($93)];
   var $95=(($94)&(255));
   var $96=$2;
   var $97=($96<<1);
   var $98=((($97)+(1))|0);
   var $99=$bayer;
   var $100=(($99+$98)|0);
   var $101=HEAP8[($100)];
   var $102=(($101)&(255));
   var $103=((($95)+($102))|0);
   var $104=((($103)+(1))|0);
   var $105=$104 >> 1;
   $t0=$105;
   var $106=$2;
   var $107=$bayer;
   var $108=(($107+$106)|0);
   var $109=HEAP8[($108)];
   var $110=(($109)&(255));
   var $111=$2;
   var $112=((($111)+(2))|0);
   var $113=$bayer;
   var $114=(($113+$112)|0);
   var $115=HEAP8[($114)];
   var $116=(($115)&(255));
   var $117=((($110)+($116))|0);
   var $118=((($117)+(1))|0);
   var $119=$118 >> 1;
   $t1=$119;
   var $120=$t0;
   var $121=(($120) & 255);
   var $122=$blue;
   var $123=(((-$122))|0);
   var $124=$dst;
   var $125=(($124+$123)|0);
   HEAP8[($125)]=$121;
   var $126=$2;
   var $127=((($126)+(1))|0);
   var $128=$bayer;
   var $129=(($128+$127)|0);
   var $130=HEAP8[($129)];
   var $131=$dst;
   var $132=(($131)|0);
   HEAP8[($132)]=$130;
   var $133=$t1;
   var $134=(($133) & 255);
   var $135=$blue;
   var $136=$dst;
   var $137=(($136+$135)|0);
   HEAP8[($137)]=$134;
   var $138=$bayer;
   var $139=(($138+1)|0);
   $bayer=$139;
   var $140=$dst;
   var $141=(($140+3)|0);
   $dst=$141;
   label = 11; break;
  case 11: 
   var $143=$blue;
   var $144=(($143)|(0)) > 0;
   if ($144) { label = 12; break; } else { label = 17; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $147=$bayer;
   var $148=$bayer_end;
   var $149=((($148)-(2))|0);
   var $150=(($147)>>>(0)) <= (($149)>>>(0));
   if ($150) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $152=$bayer;
   var $153=(($152)|0);
   var $154=HEAP8[($153)];
   var $155=(($154)&(255));
   var $156=$bayer;
   var $157=(($156+2)|0);
   var $158=HEAP8[($157)];
   var $159=(($158)&(255));
   var $160=((($155)+($159))|0);
   var $161=$2;
   var $162=($161<<1);
   var $163=$bayer;
   var $164=(($163+$162)|0);
   var $165=HEAP8[($164)];
   var $166=(($165)&(255));
   var $167=((($160)+($166))|0);
   var $168=$2;
   var $169=($168<<1);
   var $170=((($169)+(2))|0);
   var $171=$bayer;
   var $172=(($171+$170)|0);
   var $173=HEAP8[($172)];
   var $174=(($173)&(255));
   var $175=((($167)+($174))|0);
   var $176=((($175)+(2))|0);
   var $177=$176 >> 2;
   $t0=$177;
   var $178=$bayer;
   var $179=(($178+1)|0);
   var $180=HEAP8[($179)];
   var $181=(($180)&(255));
   var $182=$2;
   var $183=$bayer;
   var $184=(($183+$182)|0);
   var $185=HEAP8[($184)];
   var $186=(($185)&(255));
   var $187=((($181)+($186))|0);
   var $188=$2;
   var $189=((($188)+(2))|0);
   var $190=$bayer;
   var $191=(($190+$189)|0);
   var $192=HEAP8[($191)];
   var $193=(($192)&(255));
   var $194=((($187)+($193))|0);
   var $195=$2;
   var $196=($195<<1);
   var $197=((($196)+(1))|0);
   var $198=$bayer;
   var $199=(($198+$197)|0);
   var $200=HEAP8[($199)];
   var $201=(($200)&(255));
   var $202=((($194)+($201))|0);
   var $203=((($202)+(2))|0);
   var $204=$203 >> 2;
   $t1=$204;
   var $205=$t0;
   var $206=(($205) & 255);
   var $207=$dst;
   var $208=((($207)-(1))|0);
   HEAP8[($208)]=$206;
   var $209=$t1;
   var $210=(($209) & 255);
   var $211=$dst;
   var $212=(($211)|0);
   HEAP8[($212)]=$210;
   var $213=$2;
   var $214=((($213)+(1))|0);
   var $215=$bayer;
   var $216=(($215+$214)|0);
   var $217=HEAP8[($216)];
   var $218=$dst;
   var $219=(($218+1)|0);
   HEAP8[($219)]=$217;
   var $220=$bayer;
   var $221=(($220+2)|0);
   var $222=HEAP8[($221)];
   var $223=(($222)&(255));
   var $224=$2;
   var $225=($224<<1);
   var $226=((($225)+(2))|0);
   var $227=$bayer;
   var $228=(($227+$226)|0);
   var $229=HEAP8[($228)];
   var $230=(($229)&(255));
   var $231=((($223)+($230))|0);
   var $232=((($231)+(1))|0);
   var $233=$232 >> 1;
   $t0=$233;
   var $234=$2;
   var $235=((($234)+(1))|0);
   var $236=$bayer;
   var $237=(($236+$235)|0);
   var $238=HEAP8[($237)];
   var $239=(($238)&(255));
   var $240=$2;
   var $241=((($240)+(3))|0);
   var $242=$bayer;
   var $243=(($242+$241)|0);
   var $244=HEAP8[($243)];
   var $245=(($244)&(255));
   var $246=((($239)+($245))|0);
   var $247=((($246)+(1))|0);
   var $248=$247 >> 1;
   $t1=$248;
   var $249=$t0;
   var $250=(($249) & 255);
   var $251=$dst;
   var $252=(($251+2)|0);
   HEAP8[($252)]=$250;
   var $253=$2;
   var $254=((($253)+(2))|0);
   var $255=$bayer;
   var $256=(($255+$254)|0);
   var $257=HEAP8[($256)];
   var $258=$dst;
   var $259=(($258+3)|0);
   HEAP8[($259)]=$257;
   var $260=$t1;
   var $261=(($260) & 255);
   var $262=$dst;
   var $263=(($262+4)|0);
   HEAP8[($263)]=$261;
   label = 15; break;
  case 15: 
   var $265=$bayer;
   var $266=(($265+2)|0);
   $bayer=$266;
   var $267=$dst;
   var $268=(($267+6)|0);
   $dst=$268;
   label = 13; break;
  case 16: 
   label = 22; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $272=$bayer;
   var $273=$bayer_end;
   var $274=((($273)-(2))|0);
   var $275=(($272)>>>(0)) <= (($274)>>>(0));
   if ($275) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $277=$bayer;
   var $278=(($277)|0);
   var $279=HEAP8[($278)];
   var $280=(($279)&(255));
   var $281=$bayer;
   var $282=(($281+2)|0);
   var $283=HEAP8[($282)];
   var $284=(($283)&(255));
   var $285=((($280)+($284))|0);
   var $286=$2;
   var $287=($286<<1);
   var $288=$bayer;
   var $289=(($288+$287)|0);
   var $290=HEAP8[($289)];
   var $291=(($290)&(255));
   var $292=((($285)+($291))|0);
   var $293=$2;
   var $294=($293<<1);
   var $295=((($294)+(2))|0);
   var $296=$bayer;
   var $297=(($296+$295)|0);
   var $298=HEAP8[($297)];
   var $299=(($298)&(255));
   var $300=((($292)+($299))|0);
   var $301=((($300)+(2))|0);
   var $302=$301 >> 2;
   $t0=$302;
   var $303=$bayer;
   var $304=(($303+1)|0);
   var $305=HEAP8[($304)];
   var $306=(($305)&(255));
   var $307=$2;
   var $308=$bayer;
   var $309=(($308+$307)|0);
   var $310=HEAP8[($309)];
   var $311=(($310)&(255));
   var $312=((($306)+($311))|0);
   var $313=$2;
   var $314=((($313)+(2))|0);
   var $315=$bayer;
   var $316=(($315+$314)|0);
   var $317=HEAP8[($316)];
   var $318=(($317)&(255));
   var $319=((($312)+($318))|0);
   var $320=$2;
   var $321=($320<<1);
   var $322=((($321)+(1))|0);
   var $323=$bayer;
   var $324=(($323+$322)|0);
   var $325=HEAP8[($324)];
   var $326=(($325)&(255));
   var $327=((($319)+($326))|0);
   var $328=((($327)+(2))|0);
   var $329=$328 >> 2;
   $t1=$329;
   var $330=$t0;
   var $331=(($330) & 255);
   var $332=$dst;
   var $333=(($332+1)|0);
   HEAP8[($333)]=$331;
   var $334=$t1;
   var $335=(($334) & 255);
   var $336=$dst;
   var $337=(($336)|0);
   HEAP8[($337)]=$335;
   var $338=$2;
   var $339=((($338)+(1))|0);
   var $340=$bayer;
   var $341=(($340+$339)|0);
   var $342=HEAP8[($341)];
   var $343=$dst;
   var $344=((($343)-(1))|0);
   HEAP8[($344)]=$342;
   var $345=$bayer;
   var $346=(($345+2)|0);
   var $347=HEAP8[($346)];
   var $348=(($347)&(255));
   var $349=$2;
   var $350=($349<<1);
   var $351=((($350)+(2))|0);
   var $352=$bayer;
   var $353=(($352+$351)|0);
   var $354=HEAP8[($353)];
   var $355=(($354)&(255));
   var $356=((($348)+($355))|0);
   var $357=((($356)+(1))|0);
   var $358=$357 >> 1;
   $t0=$358;
   var $359=$2;
   var $360=((($359)+(1))|0);
   var $361=$bayer;
   var $362=(($361+$360)|0);
   var $363=HEAP8[($362)];
   var $364=(($363)&(255));
   var $365=$2;
   var $366=((($365)+(3))|0);
   var $367=$bayer;
   var $368=(($367+$366)|0);
   var $369=HEAP8[($368)];
   var $370=(($369)&(255));
   var $371=((($364)+($370))|0);
   var $372=((($371)+(1))|0);
   var $373=$372 >> 1;
   $t1=$373;
   var $374=$t0;
   var $375=(($374) & 255);
   var $376=$dst;
   var $377=(($376+4)|0);
   HEAP8[($377)]=$375;
   var $378=$2;
   var $379=((($378)+(2))|0);
   var $380=$bayer;
   var $381=(($380+$379)|0);
   var $382=HEAP8[($381)];
   var $383=$dst;
   var $384=(($383+3)|0);
   HEAP8[($384)]=$382;
   var $385=$t1;
   var $386=(($385) & 255);
   var $387=$dst;
   var $388=(($387+2)|0);
   HEAP8[($388)]=$386;
   label = 20; break;
  case 20: 
   var $390=$bayer;
   var $391=(($390+2)|0);
   $bayer=$391;
   var $392=$dst;
   var $393=(($392+6)|0);
   $dst=$393;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $396=$bayer;
   var $397=$bayer_end;
   var $398=(($396)>>>(0)) < (($397)>>>(0));
   if ($398) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $400=$bayer;
   var $401=(($400)|0);
   var $402=HEAP8[($401)];
   var $403=(($402)&(255));
   var $404=$bayer;
   var $405=(($404+2)|0);
   var $406=HEAP8[($405)];
   var $407=(($406)&(255));
   var $408=((($403)+($407))|0);
   var $409=$2;
   var $410=($409<<1);
   var $411=$bayer;
   var $412=(($411+$410)|0);
   var $413=HEAP8[($412)];
   var $414=(($413)&(255));
   var $415=((($408)+($414))|0);
   var $416=$2;
   var $417=($416<<1);
   var $418=((($417)+(2))|0);
   var $419=$bayer;
   var $420=(($419+$418)|0);
   var $421=HEAP8[($420)];
   var $422=(($421)&(255));
   var $423=((($415)+($422))|0);
   var $424=((($423)+(2))|0);
   var $425=$424 >> 2;
   $t0=$425;
   var $426=$bayer;
   var $427=(($426+1)|0);
   var $428=HEAP8[($427)];
   var $429=(($428)&(255));
   var $430=$2;
   var $431=$bayer;
   var $432=(($431+$430)|0);
   var $433=HEAP8[($432)];
   var $434=(($433)&(255));
   var $435=((($429)+($434))|0);
   var $436=$2;
   var $437=((($436)+(2))|0);
   var $438=$bayer;
   var $439=(($438+$437)|0);
   var $440=HEAP8[($439)];
   var $441=(($440)&(255));
   var $442=((($435)+($441))|0);
   var $443=$2;
   var $444=($443<<1);
   var $445=((($444)+(1))|0);
   var $446=$bayer;
   var $447=(($446+$445)|0);
   var $448=HEAP8[($447)];
   var $449=(($448)&(255));
   var $450=((($442)+($449))|0);
   var $451=((($450)+(2))|0);
   var $452=$451 >> 2;
   $t1=$452;
   var $453=$t0;
   var $454=(($453) & 255);
   var $455=$blue;
   var $456=(((-$455))|0);
   var $457=$dst;
   var $458=(($457+$456)|0);
   HEAP8[($458)]=$454;
   var $459=$t1;
   var $460=(($459) & 255);
   var $461=$dst;
   var $462=(($461)|0);
   HEAP8[($462)]=$460;
   var $463=$2;
   var $464=((($463)+(1))|0);
   var $465=$bayer;
   var $466=(($465+$464)|0);
   var $467=HEAP8[($466)];
   var $468=$blue;
   var $469=$dst;
   var $470=(($469+$468)|0);
   HEAP8[($470)]=$467;
   var $471=$bayer;
   var $472=(($471+1)|0);
   $bayer=$472;
   var $473=$dst;
   var $474=(($473+3)|0);
   $dst=$474;
   label = 24; break;
  case 24: 
   var $476=$blue;
   var $477=(((-$476))|0);
   $blue=$477;
   var $478=$start_with_green;
   var $479=(($478)|(0))!=0;
   var $480=$479 ^ 1;
   var $481=(($480)&(1));
   $start_with_green=$481;
   label = 25; break;
  case 25: 
   var $483=$2;
   var $484=$1;
   var $485=(($484+$483)|0);
   $1=$485;
   var $486=$4;
   var $487=$3;
   var $488=(($487+$486)|0);
   $3=$488;
   label = 6; break;
  case 26: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z7cvFloord($value) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $temp;
 var $diff=sp;
 $1=$value;
 var $2=$1;
 var $3=__Z7cvRoundd($2);
 $temp=$3;
 var $4=$1;
 var $5=$temp;
 var $6=(($5)|(0));
 var $7=($4)-($6);
 var $8=$7;
 var $9=$diff;
 HEAPF32[(($9)>>2)]=$8;
 var $10=$temp;
 var $11=$diff;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12)|(0)) < 0;
 var $14=(($13)&(1));
 var $15=((($10)-($14))|0);
 STACKTOP = sp;
 return $15;
}
function __ZL25icvABC2BGRx_IPP_32f_C3CnRPKfiPfi6CvSizeiiPF8CvStatusPKviPviS2_E($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx, $ipp_func) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $do_copy;
   var $status;
   var $9=sp;
   var $src1;
   var $10=(sp)+(8);
   var $r;
   var $g;
   var $b;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   $8=$ipp_func;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=1024 > (($12)|(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $19 = $16;label = 4; break;
  case 3: 
   var $19 = 1024;label = 4; break;
  case 4: 
   var $19;
   $block_size=$19;
   var $20=$6;
   var $21=(($20)|(0)) > 3;
   if ($21) { var $30 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $23=$7;
   var $24=(($23)|(0))!=2;
   if ($24) { var $30 = 1;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $26=$2;
   var $27=$4;
   var $28=(($26)|(0))==(($27)|(0));
   var $30 = $28;label = 7; break;
  case 7: 
   var $30;
   var $31=(($30)&(1));
   $do_copy=$31;
   $status=0;
   var $32=$do_copy;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $35=$8;
   var $36=$2;
   var $37=$36;
   var $38=$3;
   var $39=$4;
   var $40=$39;
   var $41=$5;
   var $42=$9;
   var $43=$size;
   assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
   var $44=FUNCTION_TABLE[$35]($37, $38, $40, $41, $9);
   $1=$44;
   label = 29; break;
  case 9: 
   var $46=$3;
   var $47=((((($46)>>>(0)))/(4))&-1);
   $3=$47;
   var $48=$5;
   var $49=((((($48)>>>(0)))/(4))&-1);
   $5=$49;
   var $50=$block_size;
   var $51=((($50)*(3))&-1);
   var $52=($51<<2);
   var $53=((($52)+(32))|0);
   var $54=STACKTOP;STACKTOP = (STACKTOP + $53)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $55=__Z10cvAlignPtrPKvi($54, 32);
   var $56=$55;
   $buffer=$56;
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$6;
   var $60=(Math.imul($58,$59)|0);
   var $61=$5;
   var $62=((($61)-($60))|0);
   $5=$62;
   label = 10; break;
  case 10: 
   var $64=(($size+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=((($65)-(1))|0);
   HEAP32[(($64)>>2)]=$66;
   var $67=(($65)|(0))!=0;
   if ($67) { label = 11; break; } else { label = 28; break; }
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $70=$i;
   var $71=(($size)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($70)|(0)) < (($72)|(0));
   if ($73) { label = 13; break; } else { label = 26; break; }
  case 13: 
   var $75=$2;
   var $76=$i;
   var $77=((($76)*(3))&-1);
   var $78=(($75+($77<<2))|0);
   $src1=$78;
   var $79=$block_size;
   var $80=(($size)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$i;
   var $83=((($81)-($82))|0);
   var $84=(($79)|(0)) > (($83)|(0));
   if ($84) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $86=(($size)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$i;
   var $89=((($87)-($88))|0);
   var $93 = $89;label = 16; break;
  case 15: 
   var $91=$block_size;
   var $93 = $91;label = 16; break;
  case 16: 
   var $93;
   $di=$93;
   var $94=$8;
   var $95=$src1;
   var $96=$95;
   var $97=$buffer;
   var $98=$97;
   var $99=$di;
   __Z6cvSizeii($10, $99, 1);
   var $100=FUNCTION_TABLE[$94]($96, 1073741824, $98, 1073741824, $10);
   $status=$100;
   var $101=$status;
   var $102=(($101)|(0)) < 0;
   if ($102) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $104=$status;
   $1=$104;
   label = 29; break;
  case 18: 
   $k=0;
   label = 19; break;
  case 19: 
   var $107=$k;
   var $108=$di;
   var $109=((($108)*(3))&-1);
   var $110=(($107)|(0)) < (($109)|(0));
   if ($110) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $112=$k;
   var $113=$buffer;
   var $114=(($113+($112<<2))|0);
   var $115=HEAPF32[(($114)>>2)];
   $r=$115;
   var $116=$k;
   var $117=((($116)+(1))|0);
   var $118=$buffer;
   var $119=(($118+($117<<2))|0);
   var $120=HEAPF32[(($119)>>2)];
   $g=$120;
   var $121=$k;
   var $122=((($121)+(2))|0);
   var $123=$buffer;
   var $124=(($123+($122<<2))|0);
   var $125=HEAPF32[(($124)>>2)];
   $b=$125;
   var $126=$b;
   var $127=$7;
   var $128=$4;
   var $129=(($128+($127<<2))|0);
   HEAPF32[(($129)>>2)]=$126;
   var $130=$g;
   var $131=$4;
   var $132=(($131+4)|0);
   HEAPF32[(($132)>>2)]=$130;
   var $133=$r;
   var $134=$7;
   var $135=$134 ^ 2;
   var $136=$4;
   var $137=(($136+($135<<2))|0);
   HEAPF32[(($137)>>2)]=$133;
   var $138=$6;
   var $139=(($138)|(0))==4;
   if ($139) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $141=$4;
   var $142=(($141+12)|0);
   HEAPF32[(($142)>>2)]=0;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $145=$k;
   var $146=((($145)+(3))|0);
   $k=$146;
   var $147=$6;
   var $148=$4;
   var $149=(($148+($147<<2))|0);
   $4=$149;
   label = 19; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $152=$block_size;
   var $153=$i;
   var $154=((($153)+($152))|0);
   $i=$154;
   label = 12; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $157=$3;
   var $158=$2;
   var $159=(($158+($157<<2))|0);
   $2=$159;
   var $160=$5;
   var $161=$4;
   var $162=(($161+($160<<2))|0);
   $4=$162;
   label = 10; break;
  case 28: 
   $1=0;
   label = 29; break;
  case 29: 
   var $165=$1;
   STACKTOP = sp;
   return $165;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL25icvABC2BGRx_IPP_16u_C3CnRPKtiPti6CvSizeiiPF8CvStatusPKviPviS2_E($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx, $ipp_func) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $do_copy;
   var $status;
   var $9=sp;
   var $src1;
   var $10=(sp)+(8);
   var $r;
   var $g;
   var $b;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   $8=$ipp_func;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=1024 > (($12)|(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $19 = $16;label = 4; break;
  case 3: 
   var $19 = 1024;label = 4; break;
  case 4: 
   var $19;
   $block_size=$19;
   var $20=$6;
   var $21=(($20)|(0)) > 3;
   if ($21) { var $30 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $23=$7;
   var $24=(($23)|(0))!=2;
   if ($24) { var $30 = 1;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $26=$2;
   var $27=$4;
   var $28=(($26)|(0))==(($27)|(0));
   var $30 = $28;label = 7; break;
  case 7: 
   var $30;
   var $31=(($30)&(1));
   $do_copy=$31;
   $status=0;
   var $32=$do_copy;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $35=$8;
   var $36=$2;
   var $37=$36;
   var $38=$3;
   var $39=$4;
   var $40=$39;
   var $41=$5;
   var $42=$9;
   var $43=$size;
   assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
   var $44=FUNCTION_TABLE[$35]($37, $38, $40, $41, $9);
   $1=$44;
   label = 29; break;
  case 9: 
   var $46=$3;
   var $47=((((($46)>>>(0)))/(2))&-1);
   $3=$47;
   var $48=$5;
   var $49=((((($48)>>>(0)))/(2))&-1);
   $5=$49;
   var $50=$block_size;
   var $51=((($50)*(3))&-1);
   var $52=($51<<1);
   var $53=((($52)+(32))|0);
   var $54=STACKTOP;STACKTOP = (STACKTOP + $53)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $55=__Z10cvAlignPtrPKvi($54, 32);
   var $56=$55;
   $buffer=$56;
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$6;
   var $60=(Math.imul($58,$59)|0);
   var $61=$5;
   var $62=((($61)-($60))|0);
   $5=$62;
   label = 10; break;
  case 10: 
   var $64=(($size+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=((($65)-(1))|0);
   HEAP32[(($64)>>2)]=$66;
   var $67=(($65)|(0))!=0;
   if ($67) { label = 11; break; } else { label = 28; break; }
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $70=$i;
   var $71=(($size)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($70)|(0)) < (($72)|(0));
   if ($73) { label = 13; break; } else { label = 26; break; }
  case 13: 
   var $75=$2;
   var $76=$i;
   var $77=((($76)*(3))&-1);
   var $78=(($75+($77<<1))|0);
   $src1=$78;
   var $79=$block_size;
   var $80=(($size)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$i;
   var $83=((($81)-($82))|0);
   var $84=(($79)|(0)) > (($83)|(0));
   if ($84) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $86=(($size)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$i;
   var $89=((($87)-($88))|0);
   var $93 = $89;label = 16; break;
  case 15: 
   var $91=$block_size;
   var $93 = $91;label = 16; break;
  case 16: 
   var $93;
   $di=$93;
   var $94=$8;
   var $95=$src1;
   var $96=$95;
   var $97=$buffer;
   var $98=$97;
   var $99=$di;
   __Z6cvSizeii($10, $99, 1);
   var $100=FUNCTION_TABLE[$94]($96, 1073741824, $98, 1073741824, $10);
   $status=$100;
   var $101=$status;
   var $102=(($101)|(0)) < 0;
   if ($102) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $104=$status;
   $1=$104;
   label = 29; break;
  case 18: 
   $k=0;
   label = 19; break;
  case 19: 
   var $107=$k;
   var $108=$di;
   var $109=((($108)*(3))&-1);
   var $110=(($107)|(0)) < (($109)|(0));
   if ($110) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $112=$k;
   var $113=$buffer;
   var $114=(($113+($112<<1))|0);
   var $115=HEAP16[(($114)>>1)];
   $r=$115;
   var $116=$k;
   var $117=((($116)+(1))|0);
   var $118=$buffer;
   var $119=(($118+($117<<1))|0);
   var $120=HEAP16[(($119)>>1)];
   $g=$120;
   var $121=$k;
   var $122=((($121)+(2))|0);
   var $123=$buffer;
   var $124=(($123+($122<<1))|0);
   var $125=HEAP16[(($124)>>1)];
   $b=$125;
   var $126=$b;
   var $127=$7;
   var $128=$4;
   var $129=(($128+($127<<1))|0);
   HEAP16[(($129)>>1)]=$126;
   var $130=$g;
   var $131=$4;
   var $132=(($131+2)|0);
   HEAP16[(($132)>>1)]=$130;
   var $133=$r;
   var $134=$7;
   var $135=$134 ^ 2;
   var $136=$4;
   var $137=(($136+($135<<1))|0);
   HEAP16[(($137)>>1)]=$133;
   var $138=$6;
   var $139=(($138)|(0))==4;
   if ($139) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $141=$4;
   var $142=(($141+6)|0);
   HEAP16[(($142)>>1)]=0;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $145=$k;
   var $146=((($145)+(3))|0);
   $k=$146;
   var $147=$6;
   var $148=$4;
   var $149=(($148+($147<<1))|0);
   $4=$149;
   label = 19; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $152=$block_size;
   var $153=$i;
   var $154=((($153)+($152))|0);
   $i=$154;
   label = 12; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $157=$3;
   var $158=$2;
   var $159=(($158+($157<<1))|0);
   $2=$159;
   var $160=$5;
   var $161=$4;
   var $162=(($161+($160<<1))|0);
   $4=$162;
   label = 10; break;
  case 28: 
   $1=0;
   label = 29; break;
  case 29: 
   var $165=$1;
   STACKTOP = sp;
   return $165;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL24icvABC2BGRx_IPP_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx, $ipp_func) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $do_copy;
   var $status;
   var $9=sp;
   var $src1;
   var $10=(sp)+(8);
   var $r;
   var $g;
   var $b;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   $8=$ipp_func;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=1024 > (($12)|(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $19 = $16;label = 4; break;
  case 3: 
   var $19 = 1024;label = 4; break;
  case 4: 
   var $19;
   $block_size=$19;
   var $20=$6;
   var $21=(($20)|(0)) > 3;
   if ($21) { var $30 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $23=$7;
   var $24=(($23)|(0))!=2;
   if ($24) { var $30 = 1;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $26=$2;
   var $27=$4;
   var $28=(($26)|(0))==(($27)|(0));
   var $30 = $28;label = 7; break;
  case 7: 
   var $30;
   var $31=(($30)&(1));
   $do_copy=$31;
   $status=0;
   var $32=$do_copy;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $35=$8;
   var $36=$2;
   var $37=$3;
   var $38=$4;
   var $39=$5;
   var $40=$9;
   var $41=$size;
   assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
   var $42=FUNCTION_TABLE[$35]($36, $37, $38, $39, $9);
   $1=$42;
   label = 29; break;
  case 9: 
   var $44=$3;
   var $45=(((($44)>>>(0)))&-1);
   $3=$45;
   var $46=$5;
   var $47=(((($46)>>>(0)))&-1);
   $5=$47;
   var $48=$block_size;
   var $49=((($48)*(3))&-1);
   var $50=$49;
   var $51=((($50)+(32))|0);
   var $52=STACKTOP;STACKTOP = (STACKTOP + $51)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $53=__Z10cvAlignPtrPKvi($52, 32);
   $buffer=$53;
   var $54=(($size)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$6;
   var $57=(Math.imul($55,$56)|0);
   var $58=$5;
   var $59=((($58)-($57))|0);
   $5=$59;
   label = 10; break;
  case 10: 
   var $61=(($size+4)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=((($62)-(1))|0);
   HEAP32[(($61)>>2)]=$63;
   var $64=(($62)|(0))!=0;
   if ($64) { label = 11; break; } else { label = 28; break; }
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $67=$i;
   var $68=(($size)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($67)|(0)) < (($69)|(0));
   if ($70) { label = 13; break; } else { label = 26; break; }
  case 13: 
   var $72=$2;
   var $73=$i;
   var $74=((($73)*(3))&-1);
   var $75=(($72+$74)|0);
   $src1=$75;
   var $76=$block_size;
   var $77=(($size)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$i;
   var $80=((($78)-($79))|0);
   var $81=(($76)|(0)) > (($80)|(0));
   if ($81) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $83=(($size)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$i;
   var $86=((($84)-($85))|0);
   var $90 = $86;label = 16; break;
  case 15: 
   var $88=$block_size;
   var $90 = $88;label = 16; break;
  case 16: 
   var $90;
   $di=$90;
   var $91=$8;
   var $92=$src1;
   var $93=$buffer;
   var $94=$di;
   __Z6cvSizeii($10, $94, 1);
   var $95=FUNCTION_TABLE[$91]($92, 1073741824, $93, 1073741824, $10);
   $status=$95;
   var $96=$status;
   var $97=(($96)|(0)) < 0;
   if ($97) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $99=$status;
   $1=$99;
   label = 29; break;
  case 18: 
   $k=0;
   label = 19; break;
  case 19: 
   var $102=$k;
   var $103=$di;
   var $104=((($103)*(3))&-1);
   var $105=(($102)|(0)) < (($104)|(0));
   if ($105) { label = 20; break; } else { label = 24; break; }
  case 20: 
   var $107=$k;
   var $108=$buffer;
   var $109=(($108+$107)|0);
   var $110=HEAP8[($109)];
   $r=$110;
   var $111=$k;
   var $112=((($111)+(1))|0);
   var $113=$buffer;
   var $114=(($113+$112)|0);
   var $115=HEAP8[($114)];
   $g=$115;
   var $116=$k;
   var $117=((($116)+(2))|0);
   var $118=$buffer;
   var $119=(($118+$117)|0);
   var $120=HEAP8[($119)];
   $b=$120;
   var $121=$b;
   var $122=$7;
   var $123=$4;
   var $124=(($123+$122)|0);
   HEAP8[($124)]=$121;
   var $125=$g;
   var $126=$4;
   var $127=(($126+1)|0);
   HEAP8[($127)]=$125;
   var $128=$r;
   var $129=$7;
   var $130=$129 ^ 2;
   var $131=$4;
   var $132=(($131+$130)|0);
   HEAP8[($132)]=$128;
   var $133=$6;
   var $134=(($133)|(0))==4;
   if ($134) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $136=$4;
   var $137=(($136+3)|0);
   HEAP8[($137)]=0;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $140=$k;
   var $141=((($140)+(3))|0);
   $k=$141;
   var $142=$6;
   var $143=$4;
   var $144=(($143+$142)|0);
   $4=$144;
   label = 19; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $147=$block_size;
   var $148=$i;
   var $149=((($148)+($147))|0);
   $i=$149;
   label = 12; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $152=$3;
   var $153=$2;
   var $154=(($153+$152)|0);
   $2=$154;
   var $155=$5;
   var $156=$4;
   var $157=(($156+$155)|0);
   $4=$157;
   label = 10; break;
  case 28: 
   $1=0;
   label = 29; break;
  case 29: 
   var $160=$1;
   STACKTOP = sp;
   return $160;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvABC2BGRx_8u_C3CnRPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_iiEPKfi($src, $srcstep, $dst, $dststep, $size, $dst_cn, $blue_idx, $cvtfunc_32f, $pre_coeffs, $postscale) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $status;
   var $src1;
   var $a;
   var $b;
   var $c;
   var $11=sp;
   var $b1;
   var $g;
   var $r;
   var $b2;
   var $g3;
   var $r4;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$dst_cn;
   $7=$blue_idx;
   $8=$cvtfunc_32f;
   $9=$pre_coeffs;
   $10=$postscale;
   var $12=(($size)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=256 > (($13)|(0));
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=(($size)|0);
   var $17=HEAP32[(($16)>>2)];
   var $20 = $17;label = 4; break;
  case 3: 
   var $20 = 256;label = 4; break;
  case 4: 
   var $20;
   $block_size=$20;
   var $21=$block_size;
   var $22=((($21)*(3))&-1);
   var $23=($22<<2);
   var $24=((($23)+(32))|0);
   var $25=STACKTOP;STACKTOP = (STACKTOP + $24)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $26=__Z10cvAlignPtrPKvi($25, 32);
   var $27=$26;
   $buffer=$27;
   $status=0;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$5;
   var $33=((($32)-($31))|0);
   $5=$33;
   label = 5; break;
  case 5: 
   var $35=(($size+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=((($36)-(1))|0);
   HEAP32[(($35)>>2)]=$37;
   var $38=(($36)|(0))!=0;
   if ($38) { label = 6; break; } else { label = 54; break; }
  case 6: 
   $i=0;
   label = 7; break;
  case 7: 
   var $41=$i;
   var $42=(($size)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0)) < (($43)|(0));
   if ($44) { label = 8; break; } else { label = 52; break; }
  case 8: 
   var $46=$2;
   var $47=$i;
   var $48=((($47)*(3))&-1);
   var $49=(($46+$48)|0);
   $src1=$49;
   var $50=$block_size;
   var $51=(($size)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$i;
   var $54=((($52)-($53))|0);
   var $55=(($50)|(0)) > (($54)|(0));
   if ($55) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$i;
   var $60=((($58)-($59))|0);
   var $64 = $60;label = 11; break;
  case 10: 
   var $62=$block_size;
   var $64 = $62;label = 11; break;
  case 11: 
   var $64;
   $di=$64;
   $k=0;
   label = 12; break;
  case 12: 
   var $66=$k;
   var $67=$di;
   var $68=((($67)*(3))&-1);
   var $69=(($66)|(0)) < (($68)|(0));
   if ($69) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $71=$k;
   var $72=$src1;
   var $73=(($72+$71)|0);
   var $74=HEAP8[($73)];
   var $75=(($74)&(255));
   var $76=((($75)+(256))|0);
   var $77=((1152+($76<<2))|0);
   var $78=(copyTempFloat($77),HEAPF32[((tempDoublePtr)>>2)]);
   var $79=$9;
   var $80=(($79)|0);
   var $81=HEAPF32[(($80)>>2)];
   var $82=($78)*($81);
   var $83=$9;
   var $84=(($83+4)|0);
   var $85=HEAPF32[(($84)>>2)];
   var $86=($82)+($85);
   $a=$86;
   var $87=$k;
   var $88=((($87)+(1))|0);
   var $89=$src1;
   var $90=(($89+$88)|0);
   var $91=HEAP8[($90)];
   var $92=(($91)&(255));
   var $93=((($92)+(256))|0);
   var $94=((1152+($93<<2))|0);
   var $95=(copyTempFloat($94),HEAPF32[((tempDoublePtr)>>2)]);
   var $96=$9;
   var $97=(($96+8)|0);
   var $98=HEAPF32[(($97)>>2)];
   var $99=($95)*($98);
   var $100=$9;
   var $101=(($100+12)|0);
   var $102=HEAPF32[(($101)>>2)];
   var $103=($99)+($102);
   $b=$103;
   var $104=$k;
   var $105=((($104)+(2))|0);
   var $106=$src1;
   var $107=(($106+$105)|0);
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=((($109)+(256))|0);
   var $111=((1152+($110<<2))|0);
   var $112=(copyTempFloat($111),HEAPF32[((tempDoublePtr)>>2)]);
   var $113=$9;
   var $114=(($113+16)|0);
   var $115=HEAPF32[(($114)>>2)];
   var $116=($112)*($115);
   var $117=$9;
   var $118=(($117+20)|0);
   var $119=HEAPF32[(($118)>>2)];
   var $120=($116)+($119);
   $c=$120;
   var $121=$a;
   var $122=$k;
   var $123=$buffer;
   var $124=(($123+($122<<2))|0);
   HEAPF32[(($124)>>2)]=$121;
   var $125=$b;
   var $126=$k;
   var $127=((($126)+(1))|0);
   var $128=$buffer;
   var $129=(($128+($127<<2))|0);
   HEAPF32[(($129)>>2)]=$125;
   var $130=$c;
   var $131=$k;
   var $132=((($131)+(2))|0);
   var $133=$buffer;
   var $134=(($133+($132<<2))|0);
   HEAPF32[(($134)>>2)]=$130;
   label = 14; break;
  case 14: 
   var $136=$k;
   var $137=((($136)+(3))|0);
   $k=$137;
   label = 12; break;
  case 15: 
   var $139=$8;
   var $140=$buffer;
   var $141=$140;
   var $142=$buffer;
   var $143=$142;
   var $144=$di;
   __Z6cvSizeii($11, $144, 1);
   var $145=$7;
   var $146=FUNCTION_TABLE[$139]($141, 0, $143, 0, $11, 3, $145);
   $status=$146;
   var $147=$status;
   var $148=(($147)|(0)) < 0;
   if ($148) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $150=$status;
   $1=$150;
   label = 55; break;
  case 17: 
   var $152=$10;
   var $153=(($152)|(0))!=0;
   if ($153) { label = 18; break; } else { label = 34; break; }
  case 18: 
   $k=0;
   label = 19; break;
  case 19: 
   var $156=$k;
   var $157=$di;
   var $158=((($157)*(3))&-1);
   var $159=(($156)|(0)) < (($158)|(0));
   if ($159) { label = 20; break; } else { label = 33; break; }
  case 20: 
   var $161=$k;
   var $162=$buffer;
   var $163=(($162+($161<<2))|0);
   var $164=HEAPF32[(($163)>>2)];
   var $165=$164;
   var $166=($165)*(255);
   var $167=__Z7cvRoundd($166);
   $b1=$167;
   var $168=$k;
   var $169=((($168)+(1))|0);
   var $170=$buffer;
   var $171=(($170+($169<<2))|0);
   var $172=HEAPF32[(($171)>>2)];
   var $173=$172;
   var $174=($173)*(255);
   var $175=__Z7cvRoundd($174);
   $g=$175;
   var $176=$k;
   var $177=((($176)+(2))|0);
   var $178=$buffer;
   var $179=(($178+($177<<2))|0);
   var $180=HEAPF32[(($179)>>2)];
   var $181=$180;
   var $182=($181)*(255);
   var $183=__Z7cvRoundd($182);
   $r=$183;
   var $184=$b1;
   var $185=$184 & -256;
   var $186=(($185)|(0))!=0;
   if ($186) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $188=$b1;
   var $194 = $188;label = 23; break;
  case 22: 
   var $190=$b1;
   var $191=(($190)|(0)) > 0;
   var $192=$191 ? 255 : 0;
   var $194 = $192;label = 23; break;
  case 23: 
   var $194;
   var $195=(($194) & 255);
   var $196=$4;
   var $197=(($196)|0);
   HEAP8[($197)]=$195;
   var $198=$g;
   var $199=$198 & -256;
   var $200=(($199)|(0))!=0;
   if ($200) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $202=$g;
   var $208 = $202;label = 26; break;
  case 25: 
   var $204=$g;
   var $205=(($204)|(0)) > 0;
   var $206=$205 ? 255 : 0;
   var $208 = $206;label = 26; break;
  case 26: 
   var $208;
   var $209=(($208) & 255);
   var $210=$4;
   var $211=(($210+1)|0);
   HEAP8[($211)]=$209;
   var $212=$r;
   var $213=$212 & -256;
   var $214=(($213)|(0))!=0;
   if ($214) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $216=$r;
   var $222 = $216;label = 29; break;
  case 28: 
   var $218=$r;
   var $219=(($218)|(0)) > 0;
   var $220=$219 ? 255 : 0;
   var $222 = $220;label = 29; break;
  case 29: 
   var $222;
   var $223=(($222) & 255);
   var $224=$4;
   var $225=(($224+2)|0);
   HEAP8[($225)]=$223;
   var $226=$6;
   var $227=(($226)|(0))==4;
   if ($227) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $229=$4;
   var $230=(($229+3)|0);
   HEAP8[($230)]=0;
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $233=$k;
   var $234=((($233)+(3))|0);
   $k=$234;
   var $235=$6;
   var $236=$4;
   var $237=(($236+$235)|0);
   $4=$237;
   label = 19; break;
  case 33: 
   label = 50; break;
  case 34: 
   $k=0;
   label = 35; break;
  case 35: 
   var $241=$k;
   var $242=$di;
   var $243=((($242)*(3))&-1);
   var $244=(($241)|(0)) < (($243)|(0));
   if ($244) { label = 36; break; } else { label = 49; break; }
  case 36: 
   var $246=$k;
   var $247=$buffer;
   var $248=(($247+($246<<2))|0);
   var $249=HEAPF32[(($248)>>2)];
   var $250=$249;
   var $251=__Z7cvRoundd($250);
   $b2=$251;
   var $252=$k;
   var $253=((($252)+(1))|0);
   var $254=$buffer;
   var $255=(($254+($253<<2))|0);
   var $256=HEAPF32[(($255)>>2)];
   var $257=$256;
   var $258=__Z7cvRoundd($257);
   $g3=$258;
   var $259=$k;
   var $260=((($259)+(2))|0);
   var $261=$buffer;
   var $262=(($261+($260<<2))|0);
   var $263=HEAPF32[(($262)>>2)];
   var $264=$263;
   var $265=__Z7cvRoundd($264);
   $r4=$265;
   var $266=$b2;
   var $267=$266 & -256;
   var $268=(($267)|(0))!=0;
   if ($268) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $270=$b2;
   var $276 = $270;label = 39; break;
  case 38: 
   var $272=$b2;
   var $273=(($272)|(0)) > 0;
   var $274=$273 ? 255 : 0;
   var $276 = $274;label = 39; break;
  case 39: 
   var $276;
   var $277=(($276) & 255);
   var $278=$4;
   var $279=(($278)|0);
   HEAP8[($279)]=$277;
   var $280=$g3;
   var $281=$280 & -256;
   var $282=(($281)|(0))!=0;
   if ($282) { label = 41; break; } else { label = 40; break; }
  case 40: 
   var $284=$g3;
   var $290 = $284;label = 42; break;
  case 41: 
   var $286=$g3;
   var $287=(($286)|(0)) > 0;
   var $288=$287 ? 255 : 0;
   var $290 = $288;label = 42; break;
  case 42: 
   var $290;
   var $291=(($290) & 255);
   var $292=$4;
   var $293=(($292+1)|0);
   HEAP8[($293)]=$291;
   var $294=$r4;
   var $295=$294 & -256;
   var $296=(($295)|(0))!=0;
   if ($296) { label = 44; break; } else { label = 43; break; }
  case 43: 
   var $298=$r4;
   var $304 = $298;label = 45; break;
  case 44: 
   var $300=$r4;
   var $301=(($300)|(0)) > 0;
   var $302=$301 ? 255 : 0;
   var $304 = $302;label = 45; break;
  case 45: 
   var $304;
   var $305=(($304) & 255);
   var $306=$4;
   var $307=(($306+2)|0);
   HEAP8[($307)]=$305;
   var $308=$6;
   var $309=(($308)|(0))==4;
   if ($309) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $311=$4;
   var $312=(($311+3)|0);
   HEAP8[($312)]=0;
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   var $315=$k;
   var $316=((($315)+(3))|0);
   $k=$316;
   var $317=$6;
   var $318=$4;
   var $319=(($318+$317)|0);
   $4=$319;
   label = 35; break;
  case 49: 
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $323=$block_size;
   var $324=$i;
   var $325=((($324)+($323))|0);
   $i=$325;
   label = 7; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $328=$3;
   var $329=$2;
   var $330=(($329+$328)|0);
   $2=$330;
   var $331=$5;
   var $332=$4;
   var $333=(($332+$331)|0);
   $4=$333;
   label = 5; break;
  case 54: 
   $1=0;
   label = 55; break;
  case 55: 
   var $336=$1;
   STACKTOP = sp;
   return $336;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL25icvBGRx2ABC_IPP_32f_CnC3RPKfiPfi6CvSizeiiPF8CvStatusPKviPviS2_E($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx, $ipp_func) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $do_copy;
   var $status;
   var $9=sp;
   var $dst1;
   var $b;
   var $g;
   var $r;
   var $10=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   $8=$ipp_func;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=16384 > (($12)|(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $19 = $16;label = 4; break;
  case 3: 
   var $19 = 16384;label = 4; break;
  case 4: 
   var $19;
   $block_size=$19;
   var $20=$6;
   var $21=(($20)|(0)) > 3;
   if ($21) { var $30 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $23=$7;
   var $24=(($23)|(0))!=2;
   if ($24) { var $30 = 1;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $26=$2;
   var $27=$4;
   var $28=(($26)|(0))==(($27)|(0));
   var $30 = $28;label = 7; break;
  case 7: 
   var $30;
   var $31=(($30)&(1));
   $do_copy=$31;
   $status=0;
   var $32=$do_copy;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $35=$8;
   var $36=$2;
   var $37=$36;
   var $38=$3;
   var $39=$4;
   var $40=$39;
   var $41=$5;
   var $42=$9;
   var $43=$size;
   assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
   var $44=FUNCTION_TABLE[$35]($37, $38, $40, $41, $9);
   $1=$44;
   label = 27; break;
  case 9: 
   var $46=$3;
   var $47=((((($46)>>>(0)))/(4))&-1);
   $3=$47;
   var $48=$5;
   var $49=((((($48)>>>(0)))/(4))&-1);
   $5=$49;
   var $50=$block_size;
   var $51=((($50)*(3))&-1);
   var $52=($51<<2);
   var $53=((($52)+(32))|0);
   var $54=STACKTOP;STACKTOP = (STACKTOP + $53)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $55=__Z10cvAlignPtrPKvi($54, 32);
   var $56=$55;
   $buffer=$56;
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$6;
   var $60=(Math.imul($58,$59)|0);
   var $61=$3;
   var $62=((($61)-($60))|0);
   $3=$62;
   label = 10; break;
  case 10: 
   var $64=(($size+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=((($65)-(1))|0);
   HEAP32[(($64)>>2)]=$66;
   var $67=(($65)|(0))!=0;
   if ($67) { label = 11; break; } else { label = 26; break; }
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $70=$i;
   var $71=(($size)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($70)|(0)) < (($72)|(0));
   if ($73) { label = 13; break; } else { label = 24; break; }
  case 13: 
   var $75=$4;
   var $76=$i;
   var $77=((($76)*(3))&-1);
   var $78=(($75+($77<<2))|0);
   $dst1=$78;
   var $79=$block_size;
   var $80=(($size)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$i;
   var $83=((($81)-($82))|0);
   var $84=(($79)|(0)) > (($83)|(0));
   if ($84) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $86=(($size)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$i;
   var $89=((($87)-($88))|0);
   var $93 = $89;label = 16; break;
  case 15: 
   var $91=$block_size;
   var $93 = $91;label = 16; break;
  case 16: 
   var $93;
   $di=$93;
   $k=0;
   label = 17; break;
  case 17: 
   var $95=$k;
   var $96=$di;
   var $97=((($96)*(3))&-1);
   var $98=(($95)|(0)) < (($97)|(0));
   if ($98) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $100=$7;
   var $101=$2;
   var $102=(($101+($100<<2))|0);
   var $103=HEAPF32[(($102)>>2)];
   $b=$103;
   var $104=$2;
   var $105=(($104+4)|0);
   var $106=HEAPF32[(($105)>>2)];
   $g=$106;
   var $107=$7;
   var $108=$107 ^ 2;
   var $109=$2;
   var $110=(($109+($108<<2))|0);
   var $111=HEAPF32[(($110)>>2)];
   $r=$111;
   var $112=$r;
   var $113=$k;
   var $114=$buffer;
   var $115=(($114+($113<<2))|0);
   HEAPF32[(($115)>>2)]=$112;
   var $116=$g;
   var $117=$k;
   var $118=((($117)+(1))|0);
   var $119=$buffer;
   var $120=(($119+($118<<2))|0);
   HEAPF32[(($120)>>2)]=$116;
   var $121=$b;
   var $122=$k;
   var $123=((($122)+(2))|0);
   var $124=$buffer;
   var $125=(($124+($123<<2))|0);
   HEAPF32[(($125)>>2)]=$121;
   label = 19; break;
  case 19: 
   var $127=$k;
   var $128=((($127)+(3))|0);
   $k=$128;
   var $129=$6;
   var $130=$2;
   var $131=(($130+($129<<2))|0);
   $2=$131;
   label = 17; break;
  case 20: 
   var $133=$8;
   var $134=$buffer;
   var $135=$134;
   var $136=$dst1;
   var $137=$136;
   var $138=$di;
   __Z6cvSizeii($10, $138, 1);
   var $139=FUNCTION_TABLE[$133]($135, 1073741824, $137, 1073741824, $10);
   $status=$139;
   var $140=$status;
   var $141=(($140)|(0)) < 0;
   if ($141) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $143=$status;
   $1=$143;
   label = 27; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $146=$block_size;
   var $147=$i;
   var $148=((($147)+($146))|0);
   $i=$148;
   label = 12; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $151=$3;
   var $152=$2;
   var $153=(($152+($151<<2))|0);
   $2=$153;
   var $154=$5;
   var $155=$4;
   var $156=(($155+($154<<2))|0);
   $4=$156;
   label = 10; break;
  case 26: 
   $1=0;
   label = 27; break;
  case 27: 
   var $159=$1;
   STACKTOP = sp;
   return $159;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL25icvBGRx2ABC_IPP_16u_CnC3RPKtiPti6CvSizeiiPF8CvStatusPKviPviS2_E($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx, $ipp_func) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $do_copy;
   var $status;
   var $9=sp;
   var $dst1;
   var $b;
   var $g;
   var $r;
   var $10=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   $8=$ipp_func;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=16384 > (($12)|(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $19 = $16;label = 4; break;
  case 3: 
   var $19 = 16384;label = 4; break;
  case 4: 
   var $19;
   $block_size=$19;
   var $20=$6;
   var $21=(($20)|(0)) > 3;
   if ($21) { var $30 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $23=$7;
   var $24=(($23)|(0))!=2;
   if ($24) { var $30 = 1;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $26=$2;
   var $27=$4;
   var $28=(($26)|(0))==(($27)|(0));
   var $30 = $28;label = 7; break;
  case 7: 
   var $30;
   var $31=(($30)&(1));
   $do_copy=$31;
   $status=0;
   var $32=$do_copy;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $35=$8;
   var $36=$2;
   var $37=$36;
   var $38=$3;
   var $39=$4;
   var $40=$39;
   var $41=$5;
   var $42=$9;
   var $43=$size;
   assert(8 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];
   var $44=FUNCTION_TABLE[$35]($37, $38, $40, $41, $9);
   $1=$44;
   label = 27; break;
  case 9: 
   var $46=$3;
   var $47=((((($46)>>>(0)))/(2))&-1);
   $3=$47;
   var $48=$5;
   var $49=((((($48)>>>(0)))/(2))&-1);
   $5=$49;
   var $50=$block_size;
   var $51=((($50)*(3))&-1);
   var $52=($51<<1);
   var $53=((($52)+(32))|0);
   var $54=STACKTOP;STACKTOP = (STACKTOP + $53)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $55=__Z10cvAlignPtrPKvi($54, 32);
   var $56=$55;
   $buffer=$56;
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$6;
   var $60=(Math.imul($58,$59)|0);
   var $61=$3;
   var $62=((($61)-($60))|0);
   $3=$62;
   label = 10; break;
  case 10: 
   var $64=(($size+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=((($65)-(1))|0);
   HEAP32[(($64)>>2)]=$66;
   var $67=(($65)|(0))!=0;
   if ($67) { label = 11; break; } else { label = 26; break; }
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $70=$i;
   var $71=(($size)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($70)|(0)) < (($72)|(0));
   if ($73) { label = 13; break; } else { label = 24; break; }
  case 13: 
   var $75=$4;
   var $76=$i;
   var $77=((($76)*(3))&-1);
   var $78=(($75+($77<<1))|0);
   $dst1=$78;
   var $79=$block_size;
   var $80=(($size)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$i;
   var $83=((($81)-($82))|0);
   var $84=(($79)|(0)) > (($83)|(0));
   if ($84) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $86=(($size)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$i;
   var $89=((($87)-($88))|0);
   var $93 = $89;label = 16; break;
  case 15: 
   var $91=$block_size;
   var $93 = $91;label = 16; break;
  case 16: 
   var $93;
   $di=$93;
   $k=0;
   label = 17; break;
  case 17: 
   var $95=$k;
   var $96=$di;
   var $97=((($96)*(3))&-1);
   var $98=(($95)|(0)) < (($97)|(0));
   if ($98) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $100=$7;
   var $101=$2;
   var $102=(($101+($100<<1))|0);
   var $103=HEAP16[(($102)>>1)];
   $b=$103;
   var $104=$2;
   var $105=(($104+2)|0);
   var $106=HEAP16[(($105)>>1)];
   $g=$106;
   var $107=$7;
   var $108=$107 ^ 2;
   var $109=$2;
   var $110=(($109+($108<<1))|0);
   var $111=HEAP16[(($110)>>1)];
   $r=$111;
   var $112=$r;
   var $113=$k;
   var $114=$buffer;
   var $115=(($114+($113<<1))|0);
   HEAP16[(($115)>>1)]=$112;
   var $116=$g;
   var $117=$k;
   var $118=((($117)+(1))|0);
   var $119=$buffer;
   var $120=(($119+($118<<1))|0);
   HEAP16[(($120)>>1)]=$116;
   var $121=$b;
   var $122=$k;
   var $123=((($122)+(2))|0);
   var $124=$buffer;
   var $125=(($124+($123<<1))|0);
   HEAP16[(($125)>>1)]=$121;
   label = 19; break;
  case 19: 
   var $127=$k;
   var $128=((($127)+(3))|0);
   $k=$128;
   var $129=$6;
   var $130=$2;
   var $131=(($130+($129<<1))|0);
   $2=$131;
   label = 17; break;
  case 20: 
   var $133=$8;
   var $134=$buffer;
   var $135=$134;
   var $136=$dst1;
   var $137=$136;
   var $138=$di;
   __Z6cvSizeii($10, $138, 1);
   var $139=FUNCTION_TABLE[$133]($135, 1073741824, $137, 1073741824, $10);
   $status=$139;
   var $140=$status;
   var $141=(($140)|(0)) < 0;
   if ($141) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $143=$status;
   $1=$143;
   label = 27; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $146=$block_size;
   var $147=$i;
   var $148=((($147)+($146))|0);
   $i=$148;
   label = 12; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $151=$3;
   var $152=$2;
   var $153=(($152+($151<<1))|0);
   $2=$153;
   var $154=$5;
   var $155=$4;
   var $156=(($155+($154<<1))|0);
   $4=$156;
   label = 10; break;
  case 26: 
   $1=0;
   label = 27; break;
  case 27: 
   var $159=$1;
   STACKTOP = sp;
   return $159;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL24icvBGRx2ABC_IPP_8u_CnC3RPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_E($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx, $ipp_func) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $do_copy;
   var $status;
   var $9=sp;
   var $dst1;
   var $b;
   var $g;
   var $r;
   var $10=(sp)+(8);
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   $8=$ipp_func;
   var $11=(($size)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=16384 > (($12)|(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=(($size)|0);
   var $16=HEAP32[(($15)>>2)];
   var $19 = $16;label = 4; break;
  case 3: 
   var $19 = 16384;label = 4; break;
  case 4: 
   var $19;
   $block_size=$19;
   var $20=$6;
   var $21=(($20)|(0)) > 3;
   if ($21) { var $30 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $23=$7;
   var $24=(($23)|(0))!=2;
   if ($24) { var $30 = 1;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $26=$2;
   var $27=$4;
   var $28=(($26)|(0))==(($27)|(0));
   var $30 = $28;label = 7; break;
  case 7: 
   var $30;
   var $31=(($30)&(1));
   $do_copy=$31;
   $status=0;
   var $32=$do_copy;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $35=$8;
   var $36=$2;
   var $37=$3;
   var $38=$4;
   var $39=$5;
   var $40=$9;
   var $41=$size;
   assert(8 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];
   var $42=FUNCTION_TABLE[$35]($36, $37, $38, $39, $9);
   $1=$42;
   label = 27; break;
  case 9: 
   var $44=$3;
   var $45=(((($44)>>>(0)))&-1);
   $3=$45;
   var $46=$5;
   var $47=(((($46)>>>(0)))&-1);
   $5=$47;
   var $48=$block_size;
   var $49=((($48)*(3))&-1);
   var $50=$49;
   var $51=((($50)+(32))|0);
   var $52=STACKTOP;STACKTOP = (STACKTOP + $51)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $53=__Z10cvAlignPtrPKvi($52, 32);
   $buffer=$53;
   var $54=(($size)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$6;
   var $57=(Math.imul($55,$56)|0);
   var $58=$3;
   var $59=((($58)-($57))|0);
   $3=$59;
   label = 10; break;
  case 10: 
   var $61=(($size+4)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=((($62)-(1))|0);
   HEAP32[(($61)>>2)]=$63;
   var $64=(($62)|(0))!=0;
   if ($64) { label = 11; break; } else { label = 26; break; }
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $67=$i;
   var $68=(($size)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($67)|(0)) < (($69)|(0));
   if ($70) { label = 13; break; } else { label = 24; break; }
  case 13: 
   var $72=$4;
   var $73=$i;
   var $74=((($73)*(3))&-1);
   var $75=(($72+$74)|0);
   $dst1=$75;
   var $76=$block_size;
   var $77=(($size)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$i;
   var $80=((($78)-($79))|0);
   var $81=(($76)|(0)) > (($80)|(0));
   if ($81) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $83=(($size)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$i;
   var $86=((($84)-($85))|0);
   var $90 = $86;label = 16; break;
  case 15: 
   var $88=$block_size;
   var $90 = $88;label = 16; break;
  case 16: 
   var $90;
   $di=$90;
   $k=0;
   label = 17; break;
  case 17: 
   var $92=$k;
   var $93=$di;
   var $94=((($93)*(3))&-1);
   var $95=(($92)|(0)) < (($94)|(0));
   if ($95) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $97=$7;
   var $98=$2;
   var $99=(($98+$97)|0);
   var $100=HEAP8[($99)];
   $b=$100;
   var $101=$2;
   var $102=(($101+1)|0);
   var $103=HEAP8[($102)];
   $g=$103;
   var $104=$7;
   var $105=$104 ^ 2;
   var $106=$2;
   var $107=(($106+$105)|0);
   var $108=HEAP8[($107)];
   $r=$108;
   var $109=$r;
   var $110=$k;
   var $111=$buffer;
   var $112=(($111+$110)|0);
   HEAP8[($112)]=$109;
   var $113=$g;
   var $114=$k;
   var $115=((($114)+(1))|0);
   var $116=$buffer;
   var $117=(($116+$115)|0);
   HEAP8[($117)]=$113;
   var $118=$b;
   var $119=$k;
   var $120=((($119)+(2))|0);
   var $121=$buffer;
   var $122=(($121+$120)|0);
   HEAP8[($122)]=$118;
   label = 19; break;
  case 19: 
   var $124=$k;
   var $125=((($124)+(3))|0);
   $k=$125;
   var $126=$6;
   var $127=$2;
   var $128=(($127+$126)|0);
   $2=$128;
   label = 17; break;
  case 20: 
   var $130=$8;
   var $131=$buffer;
   var $132=$dst1;
   var $133=$di;
   __Z6cvSizeii($10, $133, 1);
   var $134=FUNCTION_TABLE[$130]($131, 1073741824, $132, 1073741824, $10);
   $status=$134;
   var $135=$status;
   var $136=(($135)|(0)) < 0;
   if ($136) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $138=$status;
   $1=$138;
   label = 27; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $141=$block_size;
   var $142=$i;
   var $143=((($142)+($141))|0);
   $i=$143;
   label = 12; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $146=$3;
   var $147=$2;
   var $148=(($147+$146)|0);
   $2=$148;
   var $149=$5;
   var $150=$4;
   var $151=(($150+$149)|0);
   $4=$151;
   label = 10; break;
  case 26: 
   $1=0;
   label = 27; break;
  case 27: 
   var $154=$1;
   STACKTOP = sp;
   return $154;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvBGRx2ABC_8u_CnC3RPKhiPhi6CvSizeiiPF8CvStatusPKviPviS2_iiEiPKf($src, $srcstep, $dst, $dststep, $size, $src_cn, $blue_idx, $cvtfunc_32f, $prescale, $post_coeffs) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $block_size;
   var $buffer;
   var $i;
   var $di;
   var $k;
   var $status;
   var $dst1;
   var $b;
   var $g;
   var $r;
   var $b1;
   var $g2;
   var $r3;
   var $11=sp;
   var $a;
   var $b4;
   var $c;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$src_cn;
   $7=$blue_idx;
   $8=$cvtfunc_32f;
   $9=$prescale;
   $10=$post_coeffs;
   var $12=(($size)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=256 > (($13)|(0));
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=(($size)|0);
   var $17=HEAP32[(($16)>>2)];
   var $20 = $17;label = 4; break;
  case 3: 
   var $20 = 256;label = 4; break;
  case 4: 
   var $20;
   $block_size=$20;
   var $21=$block_size;
   var $22=((($21)*(3))&-1);
   var $23=($22<<2);
   var $24=((($23)+(32))|0);
   var $25=STACKTOP;STACKTOP = (STACKTOP + $24)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $26=__Z10cvAlignPtrPKvi($25, 32);
   var $27=$26;
   $buffer=$27;
   $status=0;
   var $28=(($size)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$6;
   var $31=(Math.imul($29,$30)|0);
   var $32=$3;
   var $33=((($32)-($31))|0);
   $3=$33;
   label = 5; break;
  case 5: 
   var $35=(($size+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=((($36)-(1))|0);
   HEAP32[(($35)>>2)]=$37;
   var $38=(($36)|(0))!=0;
   if ($38) { label = 6; break; } else { label = 41; break; }
  case 6: 
   $i=0;
   label = 7; break;
  case 7: 
   var $41=$i;
   var $42=(($size)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0)) < (($43)|(0));
   if ($44) { label = 8; break; } else { label = 39; break; }
  case 8: 
   var $46=$4;
   var $47=$i;
   var $48=((($47)*(3))&-1);
   var $49=(($46+$48)|0);
   $dst1=$49;
   var $50=$block_size;
   var $51=(($size)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$i;
   var $54=((($52)-($53))|0);
   var $55=(($50)|(0)) > (($54)|(0));
   if ($55) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$i;
   var $60=((($58)-($59))|0);
   var $64 = $60;label = 11; break;
  case 10: 
   var $62=$block_size;
   var $64 = $62;label = 11; break;
  case 11: 
   var $64;
   $di=$64;
   var $65=$9;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 12; break; } else { label = 17; break; }
  case 12: 
   $k=0;
   label = 13; break;
  case 13: 
   var $69=$k;
   var $70=$di;
   var $71=((($70)*(3))&-1);
   var $72=(($69)|(0)) < (($71)|(0));
   if ($72) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $74=$2;
   var $75=(($74)|0);
   var $76=HEAP8[($75)];
   var $77=(($76)&(255));
   var $78=((($77)+(256))|0);
   var $79=((1152+($78<<2))|0);
   var $80=(copyTempFloat($79),HEAPF32[((tempDoublePtr)>>2)]);
   var $81=($80)*(0.003921568859368563);
   $b=$81;
   var $82=$2;
   var $83=(($82+1)|0);
   var $84=HEAP8[($83)];
   var $85=(($84)&(255));
   var $86=((($85)+(256))|0);
   var $87=((1152+($86<<2))|0);
   var $88=(copyTempFloat($87),HEAPF32[((tempDoublePtr)>>2)]);
   var $89=($88)*(0.003921568859368563);
   $g=$89;
   var $90=$2;
   var $91=(($90+2)|0);
   var $92=HEAP8[($91)];
   var $93=(($92)&(255));
   var $94=((($93)+(256))|0);
   var $95=((1152+($94<<2))|0);
   var $96=(copyTempFloat($95),HEAPF32[((tempDoublePtr)>>2)]);
   var $97=($96)*(0.003921568859368563);
   $r=$97;
   var $98=$b;
   var $99=$k;
   var $100=$buffer;
   var $101=(($100+($99<<2))|0);
   HEAPF32[(($101)>>2)]=$98;
   var $102=$g;
   var $103=$k;
   var $104=((($103)+(1))|0);
   var $105=$buffer;
   var $106=(($105+($104<<2))|0);
   HEAPF32[(($106)>>2)]=$102;
   var $107=$r;
   var $108=$k;
   var $109=((($108)+(2))|0);
   var $110=$buffer;
   var $111=(($110+($109<<2))|0);
   HEAPF32[(($111)>>2)]=$107;
   label = 15; break;
  case 15: 
   var $113=$k;
   var $114=((($113)+(3))|0);
   $k=$114;
   var $115=$6;
   var $116=$2;
   var $117=(($116+$115)|0);
   $2=$117;
   label = 13; break;
  case 16: 
   label = 22; break;
  case 17: 
   $k=0;
   label = 18; break;
  case 18: 
   var $121=$k;
   var $122=$di;
   var $123=((($122)*(3))&-1);
   var $124=(($121)|(0)) < (($123)|(0));
   if ($124) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $126=$2;
   var $127=(($126)|0);
   var $128=HEAP8[($127)];
   var $129=(($128)&(255));
   var $130=((($129)+(256))|0);
   var $131=((1152+($130<<2))|0);
   var $132=(copyTempFloat($131),HEAPF32[((tempDoublePtr)>>2)]);
   $b1=$132;
   var $133=$2;
   var $134=(($133+1)|0);
   var $135=HEAP8[($134)];
   var $136=(($135)&(255));
   var $137=((($136)+(256))|0);
   var $138=((1152+($137<<2))|0);
   var $139=(copyTempFloat($138),HEAPF32[((tempDoublePtr)>>2)]);
   $g2=$139;
   var $140=$2;
   var $141=(($140+2)|0);
   var $142=HEAP8[($141)];
   var $143=(($142)&(255));
   var $144=((($143)+(256))|0);
   var $145=((1152+($144<<2))|0);
   var $146=(copyTempFloat($145),HEAPF32[((tempDoublePtr)>>2)]);
   $r3=$146;
   var $147=$b1;
   var $148=$k;
   var $149=$buffer;
   var $150=(($149+($148<<2))|0);
   HEAPF32[(($150)>>2)]=$147;
   var $151=$g2;
   var $152=$k;
   var $153=((($152)+(1))|0);
   var $154=$buffer;
   var $155=(($154+($153<<2))|0);
   HEAPF32[(($155)>>2)]=$151;
   var $156=$r3;
   var $157=$k;
   var $158=((($157)+(2))|0);
   var $159=$buffer;
   var $160=(($159+($158<<2))|0);
   HEAPF32[(($160)>>2)]=$156;
   label = 20; break;
  case 20: 
   var $162=$k;
   var $163=((($162)+(3))|0);
   $k=$163;
   var $164=$6;
   var $165=$2;
   var $166=(($165+$164)|0);
   $2=$166;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $169=$8;
   var $170=$buffer;
   var $171=$170;
   var $172=$buffer;
   var $173=$172;
   var $174=$di;
   __Z6cvSizeii($11, $174, 1);
   var $175=$7;
   var $176=FUNCTION_TABLE[$169]($171, 0, $173, 0, $11, 3, $175);
   $status=$176;
   var $177=$status;
   var $178=(($177)|(0)) < 0;
   if ($178) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $180=$status;
   $1=$180;
   label = 42; break;
  case 24: 
   $k=0;
   label = 25; break;
  case 25: 
   var $183=$k;
   var $184=$di;
   var $185=((($184)*(3))&-1);
   var $186=(($183)|(0)) < (($185)|(0));
   if ($186) { label = 26; break; } else { label = 37; break; }
  case 26: 
   var $188=$k;
   var $189=$buffer;
   var $190=(($189+($188<<2))|0);
   var $191=HEAPF32[(($190)>>2)];
   var $192=$10;
   var $193=(($192)|0);
   var $194=HEAPF32[(($193)>>2)];
   var $195=($191)*($194);
   var $196=$10;
   var $197=(($196+4)|0);
   var $198=HEAPF32[(($197)>>2)];
   var $199=($195)+($198);
   var $200=$199;
   var $201=__Z7cvRoundd($200);
   $a=$201;
   var $202=$k;
   var $203=((($202)+(1))|0);
   var $204=$buffer;
   var $205=(($204+($203<<2))|0);
   var $206=HEAPF32[(($205)>>2)];
   var $207=$10;
   var $208=(($207+8)|0);
   var $209=HEAPF32[(($208)>>2)];
   var $210=($206)*($209);
   var $211=$10;
   var $212=(($211+12)|0);
   var $213=HEAPF32[(($212)>>2)];
   var $214=($210)+($213);
   var $215=$214;
   var $216=__Z7cvRoundd($215);
   $b4=$216;
   var $217=$k;
   var $218=((($217)+(2))|0);
   var $219=$buffer;
   var $220=(($219+($218<<2))|0);
   var $221=HEAPF32[(($220)>>2)];
   var $222=$10;
   var $223=(($222+16)|0);
   var $224=HEAPF32[(($223)>>2)];
   var $225=($221)*($224);
   var $226=$10;
   var $227=(($226+20)|0);
   var $228=HEAPF32[(($227)>>2)];
   var $229=($225)+($228);
   var $230=$229;
   var $231=__Z7cvRoundd($230);
   $c=$231;
   var $232=$a;
   var $233=$232 & -256;
   var $234=(($233)|(0))!=0;
   if ($234) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $236=$a;
   var $242 = $236;label = 29; break;
  case 28: 
   var $238=$a;
   var $239=(($238)|(0)) > 0;
   var $240=$239 ? 255 : 0;
   var $242 = $240;label = 29; break;
  case 29: 
   var $242;
   var $243=(($242) & 255);
   var $244=$k;
   var $245=$dst1;
   var $246=(($245+$244)|0);
   HEAP8[($246)]=$243;
   var $247=$b4;
   var $248=$247 & -256;
   var $249=(($248)|(0))!=0;
   if ($249) { label = 31; break; } else { label = 30; break; }
  case 30: 
   var $251=$b4;
   var $257 = $251;label = 32; break;
  case 31: 
   var $253=$b4;
   var $254=(($253)|(0)) > 0;
   var $255=$254 ? 255 : 0;
   var $257 = $255;label = 32; break;
  case 32: 
   var $257;
   var $258=(($257) & 255);
   var $259=$k;
   var $260=((($259)+(1))|0);
   var $261=$dst1;
   var $262=(($261+$260)|0);
   HEAP8[($262)]=$258;
   var $263=$c;
   var $264=$263 & -256;
   var $265=(($264)|(0))!=0;
   if ($265) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $267=$c;
   var $273 = $267;label = 35; break;
  case 34: 
   var $269=$c;
   var $270=(($269)|(0)) > 0;
   var $271=$270 ? 255 : 0;
   var $273 = $271;label = 35; break;
  case 35: 
   var $273;
   var $274=(($273) & 255);
   var $275=$k;
   var $276=((($275)+(2))|0);
   var $277=$dst1;
   var $278=(($277+$276)|0);
   HEAP8[($278)]=$274;
   label = 36; break;
  case 36: 
   var $280=$k;
   var $281=((($280)+(3))|0);
   $k=$281;
   label = 25; break;
  case 37: 
   label = 38; break;
  case 38: 
   var $284=$block_size;
   var $285=$i;
   var $286=((($285)+($284))|0);
   $i=$286;
   label = 7; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $289=$3;
   var $290=$2;
   var $291=(($290+$289)|0);
   $2=$291;
   var $292=$5;
   var $293=$4;
   var $294=(($293+$292)|0);
   $4=$294;
   label = 5; break;
  case 41: 
   $1=0;
   label = 42; break;
  case 42: 
   var $297=$1;
   STACKTOP = sp;
   return $297;
  default: assert(0, "bad label: " + label);
 }
}
function __Z20icvInitCubicCoeffTabv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $A;
   var $i;
   var $x;
   var $1=HEAP32[((37408)>>2)];
   var $2=(($1)|(0))!=0;
   if ($2) { label = 7; break; } else { label = 2; break; }
  case 2: 
   $A=-0.75;
   $i=0;
   label = 3; break;
  case 3: 
   var $5=$i;
   var $6=(($5)|(0)) <= 1024;
   if ($6) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $8=$i;
   var $9=(($8)|(0));
   var $10=($9)/(1024);
   $x=$10;
   var $11=$x;
   var $12=$11;
   var $13=($12)*(1.25);
   var $14=($13)-(2.25);
   var $15=$x;
   var $16=$15;
   var $17=($14)*($16);
   var $18=$x;
   var $19=$18;
   var $20=($17)*($19);
   var $21=($20)+(1);
   var $22=$21;
   var $23=$i;
   var $24=($23<<1);
   var $25=((28184+($24<<2))|0);
   HEAPF32[(($25)>>2)]=$22;
   var $26=$x;
   var $27=($26)+(1);
   $x=$27;
   var $28=$x;
   var $29=$28;
   var $30=($29)*(-0.75);
   var $31=($30)+(3.75);
   var $32=$x;
   var $33=$32;
   var $34=($31)*($33);
   var $35=($34)-(6);
   var $36=$x;
   var $37=$36;
   var $38=($35)*($37);
   var $39=($38)+(3);
   var $40=$39;
   var $41=$i;
   var $42=($41<<1);
   var $43=((($42)+(1))|0);
   var $44=((28184+($43<<2))|0);
   HEAPF32[(($44)>>2)]=$40;
   label = 5; break;
  case 5: 
   var $46=$i;
   var $47=((($46)+(1))|0);
   $i=$47;
   label = 3; break;
  case 6: 
   HEAP32[((37408)>>2)]=1;
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvResize($srcarr, $dstarr, $method) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $temp_buf;
   var $srcstub=sp;
   var $src;
   var $dststub=(sp)+(32);
   var $dst;
   var $ssize=(sp)+(64);
   var $dsize=(sp)+(72);
   var $scale_x;
   var $scale_y;
   var $k;
   var $sx;
   var $sy;
   var $dx;
   var $dy;
   var $type;
   var $depth;
   var $cn;
   var $4=(sp)+(80);
   var $5=(sp)+(88);
   var $ipp_func;
   var $srcstep;
   var $dststep;
   var $ippi_call_result;
   var $6=(sp)+(96);
   var $7=(sp)+(104);
   var $8=(sp)+(120);
   var $ippi_call_result1;
   var $9=(sp)+(128);
   var $10=(sp)+(136);
   var $iscale_x;
   var $iscale_y;
   var $area;
   var $srcstep2;
   var $ofs;
   var $xofs;
   var $func;
   var $ippi_call_result3;
   var $11=(sp)+(144);
   var $12=(sp)+(152);
   var $buf_len;
   var $buf_size;
   var $xofs_count;
   var $scale;
   var $buf;
   var $sum;
   var $xofs4;
   var $func5;
   var $fsx1;
   var $fsx2;
   var $sx1;
   var $sx2;
   var $ippi_call_result6;
   var $13=(sp)+(160);
   var $14=(sp)+(168);
   var $inv_scale_x;
   var $inv_scale_y;
   var $xmax;
   var $width;
   var $buf_size7;
   var $buf0;
   var $buf1;
   var $xofs8;
   var $yofs;
   var $area_mode;
   var $fx;
   var $fy;
   var $func9;
   var $ippi_call_result10;
   var $15=(sp)+(176);
   var $16=(sp)+(184);
   var $width11;
   var $buf_size12;
   var $xmin;
   var $xmax13;
   var $xofs14;
   var $buf15=(sp)+(192);
   var $func16;
   var $fx17;
   var $ifx;
   var $ippi_call_result18;
   var $17=(sp)+(208);
   var $18=(sp)+(216);
   $1=$srcarr;
   $2=$dstarr;
   $3=$method;
   $temp_buf=0;
   var $19=$1;
   var $20=$19;
   $src=$20;
   var $21=$2;
   var $22=$21;
   $dst=$22;
   var $23=$1;
   var $24=_cvGetMat($23, $srcstub, 0, 0);
   $src=$24;
   var $25=_cvGetErrStatus();
   var $26=(($25)|(0)) < 0;
   if ($26) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((7096)|0), ((15472)|0), ((15792)|0), 641);
   label = 219; break;
  case 3: 
   var $29=$2;
   var $30=_cvGetMat($29, $dststub, 0, 0);
   $dst=$30;
   var $31=_cvGetErrStatus();
   var $32=(($31)|(0)) < 0;
   if ($32) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((7096)|0), ((15472)|0), ((15792)|0), 642);
   label = 219; break;
  case 5: 
   var $35=$src;
   var $36=(($35+20)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=$dst;
   var $40=(($39+20)|0);
   var $41=$40;
   var $42=HEAP32[(($41)>>2)];
   var $43=(($38)|(0))==(($42)|(0));
   if ($43) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $45=$src;
   var $46=(($45+24)|0);
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=$dst;
   var $50=(($49+24)|0);
   var $51=$50;
   var $52=HEAP32[(($51)>>2)];
   var $53=(($48)|(0))==(($52)|(0));
   if ($53) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $55=$src;
   var $56=$55;
   var $57=$dst;
   var $58=$57;
   _cvCopy($56, $58, 0);
   var $59=_cvGetErrStatus();
   var $60=(($59)|(0)) < 0;
   if ($60) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _cvError(-1, ((7096)|0), ((15472)|0), ((15792)|0), 645);
   label = 219; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $64=$src;
   var $65=(($64)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$dst;
   var $68=(($67)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$66 ^ $69;
   var $71=$70 & 511;
   var $72=(($71)|(0))==0;
   if ($72) { label = 12; break; } else { label = 11; break; }
  case 11: 
   _cvError(-205, ((7096)|0), ((36912)|0), ((15792)|0), 648);
   label = 219; break;
  case 12: 
   var $75=HEAP32[((27976)>>2)];
   var $76=(($75)|(0))!=0;
   if ($76) { label = 14; break; } else { label = 13; break; }
  case 13: 
   __ZL16icvInitResizeTabP11CvFuncTableS0_S0_S0_(36712, 36744, 36776, 36808);
   HEAP32[((27976)>>2)]=1;
   label = 14; break;
  case 14: 
   var $79=$src;
   __Z12cvGetMatSizePK5CvMat($4, $79);
   var $80=$ssize;
   var $81=$4;
   assert(8 % 1 === 0);HEAP32[(($80)>>2)]=HEAP32[(($81)>>2)];HEAP32[((($80)+(4))>>2)]=HEAP32[((($81)+(4))>>2)];
   var $82=$dst;
   __Z12cvGetMatSizePK5CvMat($5, $82);
   var $83=$dsize;
   var $84=$5;
   assert(8 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];
   var $85=$src;
   var $86=(($85)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$87 & 511;
   $type=$88;
   var $89=$type;
   var $90=$89 & 7;
   $depth=$90;
   var $91=$type;
   var $92=$91 & 504;
   var $93=$92 >> 3;
   var $94=((($93)+(1))|0);
   $cn=$94;
   var $95=(($ssize)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96)|(0));
   var $98=(($dsize)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0));
   var $101=($97)/($100);
   $scale_x=$101;
   var $102=(($ssize+4)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0));
   var $105=(($dsize+4)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106)|(0));
   var $108=($104)/($107);
   $scale_y=$108;
   var $109=$3;
   var $110=(($109)|(0))==2;
   if ($110) { label = 15; break; } else { label = 24; break; }
  case 15: 
   var $112=(($ssize)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($dsize)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($113)|(0)) > (($115)|(0));
   if ($116) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $118=(($dsize)|0);
   var $119=HEAP32[(($118)>>2)];
   var $124 = $119;label = 18; break;
  case 17: 
   var $121=(($ssize)|0);
   var $122=HEAP32[(($121)>>2)];
   var $124 = $122;label = 18; break;
  case 18: 
   var $124;
   var $125=(($124)|(0)) <= 4;
   if ($125) { label = 23; break; } else { label = 19; break; }
  case 19: 
   var $127=(($ssize+4)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($dsize+4)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($128)|(0)) > (($130)|(0));
   if ($131) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $133=(($dsize+4)|0);
   var $134=HEAP32[(($133)>>2)];
   var $139 = $134;label = 22; break;
  case 21: 
   var $136=(($ssize+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $139 = $137;label = 22; break;
  case 22: 
   var $139;
   var $140=(($139)|(0)) <= 4;
   if ($140) { label = 23; break; } else { label = 24; break; }
  case 23: 
   $3=1;
   label = 24; break;
  case 24: 
   var $143=HEAP32[((28032)>>2)];
   var $144=(($143)|(0))!=0;
   if ($144) { label = 25; break; } else { label = 73; break; }
  case 25: 
   var $146=(($ssize)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=(($dsize)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=(($147)|(0)) > (($149)|(0));
   if ($150) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $152=(($dsize)|0);
   var $153=HEAP32[(($152)>>2)];
   var $158 = $153;label = 28; break;
  case 27: 
   var $155=(($ssize)|0);
   var $156=HEAP32[(($155)>>2)];
   var $158 = $156;label = 28; break;
  case 28: 
   var $158;
   var $159=(($158)|(0)) > 4;
   if ($159) { label = 29; break; } else { label = 73; break; }
  case 29: 
   var $161=(($ssize+4)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=(($dsize+4)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($162)|(0)) > (($164)|(0));
   if ($165) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $167=(($dsize+4)|0);
   var $168=HEAP32[(($167)>>2)];
   var $173 = $168;label = 32; break;
  case 31: 
   var $170=(($ssize+4)|0);
   var $171=HEAP32[(($170)>>2)];
   var $173 = $171;label = 32; break;
  case 32: 
   var $173;
   var $174=(($173)|(0)) > 4;
   if ($174) { label = 33; break; } else { label = 73; break; }
  case 33: 
   var $176=$type;
   var $177=(($176)|(0))==0;
   if ($177) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $179=HEAP32[((28032)>>2)];
   var $238 = $179;label = 60; break;
  case 35: 
   var $181=$type;
   var $182=(($181)|(0))==16;
   if ($182) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $184=HEAP32[((28024)>>2)];
   var $236 = $184;label = 59; break;
  case 37: 
   var $186=$type;
   var $187=(($186)|(0))==24;
   if ($187) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $189=HEAP32[((28016)>>2)];
   var $234 = $189;label = 58; break;
  case 39: 
   var $191=$type;
   var $192=(($191)|(0))==2;
   if ($192) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $194=HEAP32[((28080)>>2)];
   var $232 = $194;label = 57; break;
  case 41: 
   var $196=$type;
   var $197=(($196)|(0))==18;
   if ($197) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $199=HEAP32[((28072)>>2)];
   var $230 = $199;label = 56; break;
  case 43: 
   var $201=$type;
   var $202=(($201)|(0))==26;
   if ($202) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $204=HEAP32[((28064)>>2)];
   var $228 = $204;label = 55; break;
  case 45: 
   var $206=$type;
   var $207=(($206)|(0))==5;
   if ($207) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $209=HEAP32[((28056)>>2)];
   var $226 = $209;label = 54; break;
  case 47: 
   var $211=$type;
   var $212=(($211)|(0))==21;
   if ($212) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $214=HEAP32[((28048)>>2)];
   var $224 = $214;label = 53; break;
  case 49: 
   var $216=$type;
   var $217=(($216)|(0))==29;
   if ($217) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $219=HEAP32[((28040)>>2)];
   var $222 = $219;label = 52; break;
  case 51: 
   var $222 = 0;label = 52; break;
  case 52: 
   var $222;
   var $224 = $222;label = 53; break;
  case 53: 
   var $224;
   var $226 = $224;label = 54; break;
  case 54: 
   var $226;
   var $228 = $226;label = 55; break;
  case 55: 
   var $228;
   var $230 = $228;label = 56; break;
  case 56: 
   var $230;
   var $232 = $230;label = 57; break;
  case 57: 
   var $232;
   var $234 = $232;label = 58; break;
  case 58: 
   var $234;
   var $236 = $234;label = 59; break;
  case 59: 
   var $236;
   var $238 = $236;label = 60; break;
  case 60: 
   var $238;
   $ipp_func=$238;
   var $239=$ipp_func;
   var $240=(($239)|(0))!=0;
   if ($240) { label = 61; break; } else { label = 72; break; }
  case 61: 
   var $242=$3;
   var $243=0 < (($242)|(0));
   if ($243) { label = 62; break; } else { label = 72; break; }
  case 62: 
   var $245=$3;
   var $246=(($245)|(0)) < 3;
   if ($246) { label = 63; break; } else { label = 72; break; }
  case 63: 
   var $248=$src;
   var $249=(($248+4)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251=(($250)|(0))!=0;
   if ($251) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $253=$src;
   var $254=(($253+4)|0);
   var $255=HEAP32[(($254)>>2)];
   var $258 = $255;label = 66; break;
  case 65: 
   var $258 = 1073741824;label = 66; break;
  case 66: 
   var $258;
   $srcstep=$258;
   var $259=$dst;
   var $260=(($259+4)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=(($261)|(0))!=0;
   if ($262) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $264=$dst;
   var $265=(($264+4)|0);
   var $266=HEAP32[(($265)>>2)];
   var $269 = $266;label = 69; break;
  case 68: 
   var $269 = 1073741824;label = 69; break;
  case 69: 
   var $269;
   $dststep=$269;
   var $270=$ipp_func;
   var $271=$src;
   var $272=(($271+16)|0);
   var $273=$272;
   var $274=HEAP32[(($273)>>2)];
   var $275=$6;
   var $276=$ssize;
   assert(8 % 1 === 0);HEAP32[(($275)>>2)]=HEAP32[(($276)>>2)];HEAP32[((($275)+(4))>>2)]=HEAP32[((($276)+(4))>>2)];
   var $277=$srcstep;
   var $278=(($ssize)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($ssize+4)|0);
   var $281=HEAP32[(($280)>>2)];
   __Z6cvRectiiii($7, 0, 0, $279, $281);
   var $282=$dst;
   var $283=(($282+16)|0);
   var $284=$283;
   var $285=HEAP32[(($284)>>2)];
   var $286=$dststep;
   var $287=$8;
   var $288=$dsize;
   assert(8 % 1 === 0);HEAP32[(($287)>>2)]=HEAP32[(($288)>>2)];HEAP32[((($287)+(4))>>2)]=HEAP32[((($288)+(4))>>2)];
   var $289=(($dsize)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291=(($290)|(0));
   var $292=(($ssize)|0);
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293)|(0));
   var $295=($291)/($294);
   var $296=(($dsize+4)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=(($297)|(0));
   var $299=(($ssize+4)|0);
   var $300=HEAP32[(($299)>>2)];
   var $301=(($300)|(0));
   var $302=($298)/($301);
   var $303=$3;
   var $304=1 << $303;
   var $305=FUNCTION_TABLE[$270]($274, $6, $277, $7, $285, $286, $8, $295, $302, $304);
   $ippi_call_result=$305;
   var $306=$ippi_call_result;
   var $307=(($306)|(0)) < 0;
   if ($307) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $309=$ippi_call_result;
   var $310=_cvErrorFromIppStatus($309);
   _cvError($310, ((7096)|0), ((11488)|0), ((15792)|0), 691);
   label = 219; break;
  case 71: 
   label = 219; break;
  case 72: 
   label = 73; break;
  case 73: 
   var $314=$3;
   var $315=(($314)|(0))==0;
   if ($315) { label = 74; break; } else { label = 77; break; }
  case 74: 
   var $317=$src;
   var $318=(($317+16)|0);
   var $319=$318;
   var $320=HEAP32[(($319)>>2)];
   var $321=$src;
   var $322=(($321+4)|0);
   var $323=HEAP32[(($322)>>2)];
   var $324=$9;
   var $325=$ssize;
   assert(8 % 1 === 0);HEAP32[(($324)>>2)]=HEAP32[(($325)>>2)];HEAP32[((($324)+(4))>>2)]=HEAP32[((($325)+(4))>>2)];
   var $326=$dst;
   var $327=(($326+16)|0);
   var $328=$327;
   var $329=HEAP32[(($328)>>2)];
   var $330=$dst;
   var $331=(($330+4)|0);
   var $332=HEAP32[(($331)>>2)];
   var $333=$10;
   var $334=$dsize;
   assert(8 % 1 === 0);HEAP32[(($333)>>2)]=HEAP32[(($334)>>2)];HEAP32[((($333)+(4))>>2)]=HEAP32[((($334)+(4))>>2)];
   var $335=$src;
   var $336=(($335)|0);
   var $337=HEAP32[(($336)>>2)];
   var $338=$337 & 504;
   var $339=$338 >> 3;
   var $340=((($339)+(1))|0);
   var $341=$src;
   var $342=(($341)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344=$343 & 7;
   var $345=($344<<1);
   var $346=47696 >>> (($345)>>>(0));
   var $347=$346 & 3;
   var $348=$340 << $347;
   var $349=__ZL19icvResize_NN_8u_C1RPKhi6CvSizePhiS1_i($320, $323, $9, $329, $332, $10, $348);
   $ippi_call_result1=$349;
   var $350=$ippi_call_result1;
   var $351=(($350)|(0)) < 0;
   if ($351) { label = 75; break; } else { label = 76; break; }
  case 75: 
   var $353=$ippi_call_result1;
   var $354=_cvErrorFromIppStatus($353);
   _cvError($354, ((7096)|0), ((11488)|0), ((15792)|0), 700);
   label = 219; break;
  case 76: 
   label = 218; break;
  case 77: 
   var $357=$3;
   var $358=(($357)|(0))==1;
   if ($358) { label = 79; break; } else { label = 78; break; }
  case 78: 
   var $360=$3;
   var $361=(($360)|(0))==3;
   if ($361) { label = 79; break; } else { label = 182; break; }
  case 79: 
   var $363=$3;
   var $364=(($363)|(0))==3;
   if ($364) { label = 80; break; } else { label = 129; break; }
  case 80: 
   var $366=(($ssize)|0);
   var $367=HEAP32[(($366)>>2)];
   var $368=(($dsize)|0);
   var $369=HEAP32[(($368)>>2)];
   var $370=(($367)|(0)) >= (($369)|(0));
   if ($370) { label = 81; break; } else { label = 129; break; }
  case 81: 
   var $372=(($ssize+4)|0);
   var $373=HEAP32[(($372)>>2)];
   var $374=(($dsize+4)|0);
   var $375=HEAP32[(($374)>>2)];
   var $376=(($373)|(0)) >= (($375)|(0));
   if ($376) { label = 82; break; } else { label = 129; break; }
  case 82: 
   var $378=$scale_x;
   var $379=$378;
   var $380=__Z7cvRoundd($379);
   $iscale_x=$380;
   var $381=$scale_y;
   var $382=$381;
   var $383=__Z7cvRoundd($382);
   $iscale_y=$383;
   var $384=$scale_x;
   var $385=$iscale_x;
   var $386=(($385)|(0));
   var $387=($384)-($386);
   var $388=$387;
   var $389=Math.abs($388);
   var $390=$389 < 2.220446049250313e-16;
   if ($390) { label = 83; break; } else { label = 105; break; }
  case 83: 
   var $392=$scale_y;
   var $393=$iscale_y;
   var $394=(($393)|(0));
   var $395=($392)-($394);
   var $396=$395;
   var $397=Math.abs($396);
   var $398=$397 < 2.220446049250313e-16;
   if ($398) { label = 84; break; } else { label = 105; break; }
  case 84: 
   var $400=$iscale_x;
   var $401=$iscale_y;
   var $402=(Math.imul($400,$401)|0);
   $area=$402;
   var $403=$src;
   var $404=(($403+4)|0);
   var $405=HEAP32[(($404)>>2)];
   var $406=$depth;
   var $407=$406 & 504;
   var $408=$407 >> 3;
   var $409=((($408)+(1))|0);
   var $410=$depth;
   var $411=$410 & 7;
   var $412=($411<<1);
   var $413=47696 >>> (($412)>>>(0));
   var $414=$413 & 3;
   var $415=$409 << $414;
   var $416=((((($405)|(0)))/((($415)|(0))))&-1);
   $srcstep2=$416;
   var $417=$area;
   var $418=(($dsize)|0);
   var $419=HEAP32[(($418)>>2)];
   var $420=$cn;
   var $421=(Math.imul($419,$420)|0);
   var $422=((($417)+($421))|0);
   var $423=($422<<2);
   var $424=((($423)+(32))|0);
   var $425=STACKTOP;STACKTOP = (STACKTOP + $424)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $426=__Z10cvAlignPtrPKvi($425, 32);
   var $427=$426;
   $ofs=$427;
   var $428=$ofs;
   var $429=$area;
   var $430=(($428+($429<<2))|0);
   $xofs=$430;
   var $431=$depth;
   var $432=((((36776)|0)+($431<<2))|0);
   var $433=HEAP32[(($432)>>2)];
   var $434=$433;
   $func=$434;
   var $435=$func;
   var $436=(($435)|(0))!=0;
   if ($436) { label = 86; break; } else { label = 85; break; }
  case 85: 
   _cvError(-210, ((7096)|0), ((36912)|0), ((15792)|0), 721);
   label = 219; break;
  case 86: 
   $sy=0;
   $k=0;
   label = 87; break;
  case 87: 
   var $440=$sy;
   var $441=$iscale_y;
   var $442=(($440)|(0)) < (($441)|(0));
   if ($442) { label = 88; break; } else { label = 94; break; }
  case 88: 
   $sx=0;
   label = 89; break;
  case 89: 
   var $445=$sx;
   var $446=$iscale_x;
   var $447=(($445)|(0)) < (($446)|(0));
   if ($447) { label = 90; break; } else { label = 92; break; }
  case 90: 
   var $449=$sy;
   var $450=$srcstep2;
   var $451=(Math.imul($449,$450)|0);
   var $452=$sx;
   var $453=$cn;
   var $454=(Math.imul($452,$453)|0);
   var $455=((($451)+($454))|0);
   var $456=$k;
   var $457=((($456)+(1))|0);
   $k=$457;
   var $458=$ofs;
   var $459=(($458+($456<<2))|0);
   HEAP32[(($459)>>2)]=$455;
   label = 91; break;
  case 91: 
   var $461=$sx;
   var $462=((($461)+(1))|0);
   $sx=$462;
   label = 89; break;
  case 92: 
   label = 93; break;
  case 93: 
   var $465=$sy;
   var $466=((($465)+(1))|0);
   $sy=$466;
   label = 87; break;
  case 94: 
   $dx=0;
   label = 95; break;
  case 95: 
   var $469=$dx;
   var $470=(($dsize)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=(($469)|(0)) < (($471)|(0));
   if ($472) { label = 96; break; } else { label = 102; break; }
  case 96: 
   var $474=$dx;
   var $475=$iscale_x;
   var $476=(Math.imul($474,$475)|0);
   var $477=$cn;
   var $478=(Math.imul($476,$477)|0);
   $sx=$478;
   $k=0;
   label = 97; break;
  case 97: 
   var $480=$k;
   var $481=$cn;
   var $482=(($480)|(0)) < (($481)|(0));
   if ($482) { label = 98; break; } else { label = 100; break; }
  case 98: 
   var $484=$sx;
   var $485=$k;
   var $486=((($484)+($485))|0);
   var $487=$dx;
   var $488=$cn;
   var $489=(Math.imul($487,$488)|0);
   var $490=$k;
   var $491=((($489)+($490))|0);
   var $492=$xofs;
   var $493=(($492+($491<<2))|0);
   HEAP32[(($493)>>2)]=$486;
   label = 99; break;
  case 99: 
   var $495=$k;
   var $496=((($495)+(1))|0);
   $k=$496;
   label = 97; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $499=$dx;
   var $500=((($499)+(1))|0);
   $dx=$500;
   label = 95; break;
  case 102: 
   var $502=$func;
   var $503=$src;
   var $504=(($503+16)|0);
   var $505=$504;
   var $506=HEAP32[(($505)>>2)];
   var $507=$src;
   var $508=(($507+4)|0);
   var $509=HEAP32[(($508)>>2)];
   var $510=$11;
   var $511=$ssize;
   assert(8 % 1 === 0);HEAP32[(($510)>>2)]=HEAP32[(($511)>>2)];HEAP32[((($510)+(4))>>2)]=HEAP32[((($511)+(4))>>2)];
   var $512=$dst;
   var $513=(($512+16)|0);
   var $514=$513;
   var $515=HEAP32[(($514)>>2)];
   var $516=$dst;
   var $517=(($516+4)|0);
   var $518=HEAP32[(($517)>>2)];
   var $519=$12;
   var $520=$dsize;
   assert(8 % 1 === 0);HEAP32[(($519)>>2)]=HEAP32[(($520)>>2)];HEAP32[((($519)+(4))>>2)]=HEAP32[((($520)+(4))>>2)];
   var $521=$cn;
   var $522=$ofs;
   var $523=$xofs;
   var $524=FUNCTION_TABLE[$502]($506, $509, $11, $515, $518, $12, $521, $522, $523);
   $ippi_call_result3=$524;
   var $525=$ippi_call_result3;
   var $526=(($525)|(0)) < 0;
   if ($526) { label = 103; break; } else { label = 104; break; }
  case 103: 
   var $528=$ippi_call_result3;
   var $529=_cvErrorFromIppStatus($528);
   _cvError($529, ((7096)|0), ((11488)|0), ((15792)|0), 735);
   label = 219; break;
  case 104: 
   label = 128; break;
  case 105: 
   var $532=(($dsize)|0);
   var $533=HEAP32[(($532)>>2)];
   var $534=$cn;
   var $535=(Math.imul($533,$534)|0);
   var $536=((($535)+(4))|0);
   $buf_len=$536;
   $xofs_count=0;
   var $537=$scale_x;
   var $538=$scale_y;
   var $539=($537)*($538);
   var $540=(1)/($539);
   $scale=$540;
   var $541=$depth;
   var $542=((((36808)|0)+($541<<2))|0);
   var $543=HEAP32[(($542)>>2)];
   var $544=$543;
   $func5=$544;
   var $545=$func5;
   var $546=(($545)|(0))!=0;
   if ($546) { label = 106; break; } else { label = 107; break; }
  case 106: 
   var $548=$cn;
   var $549=(($548)|(0)) > 4;
   if ($549) { label = 107; break; } else { label = 108; break; }
  case 107: 
   _cvError(-210, ((7096)|0), ((36912)|0), ((15792)|0), 746);
   label = 219; break;
  case 108: 
   var $552=$buf_len;
   var $553=($552<<1);
   var $554=($553<<2);
   var $555=(($ssize)|0);
   var $556=HEAP32[(($555)>>2)];
   var $557=($556<<1);
   var $558=((($557)*(12))&-1);
   var $559=((($554)+($558))|0);
   $buf_size=$559;
   var $560=$buf_size;
   var $561=(($560)|(0)) < 8192;
   if ($561) { label = 109; break; } else { label = 110; break; }
  case 109: 
   var $563=$buf_size;
   var $564=((($563)+(32))|0);
   var $565=STACKTOP;STACKTOP = (STACKTOP + $564)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $566=__Z10cvAlignPtrPKvi($565, 32);
   var $567=$566;
   $buf=$567;
   label = 113; break;
  case 110: 
   var $569=$buf_size;
   var $570=_cvAlloc($569);
   var $571=$570;
   $buf=$571;
   var $572=$571;
   $temp_buf=$572;
   var $573=_cvGetErrStatus();
   var $574=(($573)|(0)) < 0;
   if ($574) { label = 111; break; } else { label = 112; break; }
  case 111: 
   _cvError(-1, ((7096)|0), ((15472)|0), ((15792)|0), 752);
   label = 219; break;
  case 112: 
   label = 113; break;
  case 113: 
   var $578=$buf;
   var $579=$buf_len;
   var $580=(($578+($579<<2))|0);
   $sum=$580;
   var $581=$sum;
   var $582=$buf_len;
   var $583=(($581+($582<<2))|0);
   var $584=$583;
   $xofs4=$584;
   $dx=0;
   $k=0;
   label = 114; break;
  case 114: 
   var $586=$dx;
   var $587=(($dsize)|0);
   var $588=HEAP32[(($587)>>2)];
   var $589=(($586)|(0)) < (($588)|(0));
   if ($589) { label = 115; break; } else { label = 125; break; }
  case 115: 
   var $591=$dx;
   var $592=(($591)|(0));
   var $593=$scale_x;
   var $594=($592)*($593);
   $fsx1=$594;
   var $595=$fsx1;
   var $596=$scale_x;
   var $597=($595)+($596);
   $fsx2=$597;
   var $598=$fsx1;
   var $599=$598;
   var $600=__Z6cvCeild($599);
   $sx1=$600;
   var $601=$fsx2;
   var $602=$601;
   var $603=__Z7cvFloord($602);
   $sx2=$603;
   var $604=$sx1;
   var $605=(($604)|(0));
   var $606=$fsx1;
   var $607=$605 > $606;
   if ($607) { label = 116; break; } else { label = 117; break; }
  case 116: 
   var $609=$dx;
   var $610=$cn;
   var $611=(Math.imul($609,$610)|0);
   var $612=$k;
   var $613=$xofs4;
   var $614=(($613+((($612)*(12))&-1))|0);
   var $615=(($614+4)|0);
   HEAP32[(($615)>>2)]=$611;
   var $616=$sx1;
   var $617=((($616)-(1))|0);
   var $618=$cn;
   var $619=(Math.imul($617,$618)|0);
   var $620=$k;
   var $621=$xofs4;
   var $622=(($621+((($620)*(12))&-1))|0);
   var $623=(($622)|0);
   HEAP32[(($623)>>2)]=$619;
   var $624=$sx1;
   var $625=(($624)|(0));
   var $626=$fsx1;
   var $627=($625)-($626);
   var $628=$scale;
   var $629=($627)*($628);
   var $630=$k;
   var $631=((($630)+(1))|0);
   $k=$631;
   var $632=$xofs4;
   var $633=(($632+((($630)*(12))&-1))|0);
   var $634=(($633+8)|0);
   HEAPF32[(($634)>>2)]=$629;
   label = 117; break;
  case 117: 
   var $636=$sx1;
   $sx=$636;
   label = 118; break;
  case 118: 
   var $638=$sx;
   var $639=$sx2;
   var $640=(($638)|(0)) < (($639)|(0));
   if ($640) { label = 119; break; } else { label = 121; break; }
  case 119: 
   var $642=$dx;
   var $643=$cn;
   var $644=(Math.imul($642,$643)|0);
   var $645=$k;
   var $646=$xofs4;
   var $647=(($646+((($645)*(12))&-1))|0);
   var $648=(($647+4)|0);
   HEAP32[(($648)>>2)]=$644;
   var $649=$sx;
   var $650=$cn;
   var $651=(Math.imul($649,$650)|0);
   var $652=$k;
   var $653=$xofs4;
   var $654=(($653+((($652)*(12))&-1))|0);
   var $655=(($654)|0);
   HEAP32[(($655)>>2)]=$651;
   var $656=$scale;
   var $657=$k;
   var $658=((($657)+(1))|0);
   $k=$658;
   var $659=$xofs4;
   var $660=(($659+((($657)*(12))&-1))|0);
   var $661=(($660+8)|0);
   HEAPF32[(($661)>>2)]=$656;
   label = 120; break;
  case 120: 
   var $663=$sx;
   var $664=((($663)+(1))|0);
   $sx=$664;
   label = 118; break;
  case 121: 
   var $666=$fsx2;
   var $667=$sx2;
   var $668=(($667)|(0));
   var $669=($666)-($668);
   var $670=$669;
   var $671=$670 > 0.001;
   if ($671) { label = 122; break; } else { label = 123; break; }
  case 122: 
   var $673=$dx;
   var $674=$cn;
   var $675=(Math.imul($673,$674)|0);
   var $676=$k;
   var $677=$xofs4;
   var $678=(($677+((($676)*(12))&-1))|0);
   var $679=(($678+4)|0);
   HEAP32[(($679)>>2)]=$675;
   var $680=$sx2;
   var $681=$cn;
   var $682=(Math.imul($680,$681)|0);
   var $683=$k;
   var $684=$xofs4;
   var $685=(($684+((($683)*(12))&-1))|0);
   var $686=(($685)|0);
   HEAP32[(($686)>>2)]=$682;
   var $687=$fsx2;
   var $688=$sx2;
   var $689=(($688)|(0));
   var $690=($687)-($689);
   var $691=$scale;
   var $692=($690)*($691);
   var $693=$k;
   var $694=((($693)+(1))|0);
   $k=$694;
   var $695=$xofs4;
   var $696=(($695+((($693)*(12))&-1))|0);
   var $697=(($696+8)|0);
   HEAPF32[(($697)>>2)]=$692;
   label = 123; break;
  case 123: 
   label = 124; break;
  case 124: 
   var $700=$dx;
   var $701=((($700)+(1))|0);
   $dx=$701;
   label = 114; break;
  case 125: 
   var $703=$k;
   $xofs_count=$703;
   var $704=$sum;
   var $705=$704;
   var $706=$buf_len;
   var $707=($706<<2);
   _memset($705, 0, $707);
   var $708=$buf;
   var $709=$708;
   var $710=$buf_len;
   var $711=($710<<2);
   _memset($709, 0, $711);
   var $712=$func5;
   var $713=$src;
   var $714=(($713+16)|0);
   var $715=$714;
   var $716=HEAP32[(($715)>>2)];
   var $717=$src;
   var $718=(($717+4)|0);
   var $719=HEAP32[(($718)>>2)];
   var $720=$13;
   var $721=$ssize;
   assert(8 % 1 === 0);HEAP32[(($720)>>2)]=HEAP32[(($721)>>2)];HEAP32[((($720)+(4))>>2)]=HEAP32[((($721)+(4))>>2)];
   var $722=$dst;
   var $723=(($722+16)|0);
   var $724=$723;
   var $725=HEAP32[(($724)>>2)];
   var $726=$dst;
   var $727=(($726+4)|0);
   var $728=HEAP32[(($727)>>2)];
   var $729=$14;
   var $730=$dsize;
   assert(8 % 1 === 0);HEAP32[(($729)>>2)]=HEAP32[(($730)>>2)];HEAP32[((($729)+(4))>>2)]=HEAP32[((($730)+(4))>>2)];
   var $731=$cn;
   var $732=$xofs4;
   var $733=$xofs_count;
   var $734=$buf;
   var $735=$sum;
   var $736=FUNCTION_TABLE[$712]($716, $719, $13, $725, $728, $14, $731, $732, $733, $734, $735);
   $ippi_call_result6=$736;
   var $737=$ippi_call_result6;
   var $738=(($737)|(0)) < 0;
   if ($738) { label = 126; break; } else { label = 127; break; }
  case 126: 
   var $740=$ippi_call_result6;
   var $741=_cvErrorFromIppStatus($740);
   _cvError($741, ((7096)|0), ((11488)|0), ((15792)|0), 794);
   label = 219; break;
  case 127: 
   label = 128; break;
  case 128: 
   label = 181; break;
  case 129: 
   var $745=(($dsize)|0);
   var $746=HEAP32[(($745)>>2)];
   var $747=(($746)|(0));
   var $748=(($ssize)|0);
   var $749=HEAP32[(($748)>>2)];
   var $750=(($749)|(0));
   var $751=($747)/($750);
   $inv_scale_x=$751;
   var $752=(($dsize+4)|0);
   var $753=HEAP32[(($752)>>2)];
   var $754=(($753)|(0));
   var $755=(($ssize+4)|0);
   var $756=HEAP32[(($755)>>2)];
   var $757=(($756)|(0));
   var $758=($754)/($757);
   $inv_scale_y=$758;
   var $759=(($dsize)|0);
   var $760=HEAP32[(($759)>>2)];
   $xmax=$760;
   var $761=(($dsize)|0);
   var $762=HEAP32[(($761)>>2)];
   var $763=$cn;
   var $764=(Math.imul($762,$763)|0);
   $width=$764;
   var $765=$3;
   var $766=(($765)|(0))==3;
   var $767=(($766)&(1));
   $area_mode=$767;
   var $768=$depth;
   var $769=((((36712)|0)+($768<<2))|0);
   var $770=HEAP32[(($769)>>2)];
   var $771=$770;
   $func9=$771;
   var $772=$func9;
   var $773=(($772)|(0))!=0;
   if ($773) { label = 131; break; } else { label = 130; break; }
  case 130: 
   _cvError(-210, ((7096)|0), ((36912)|0), ((15792)|0), 811);
   label = 219; break;
  case 131: 
   var $776=$width;
   var $777=($776<<1);
   var $778=($777<<2);
   var $779=$width;
   var $780=(($dsize+4)|0);
   var $781=HEAP32[(($780)>>2)];
   var $782=((($779)+($781))|0);
   var $783=($782<<3);
   var $784=((($778)+($783))|0);
   $buf_size7=$784;
   var $785=$buf_size7;
   var $786=(($785)|(0)) < 8192;
   if ($786) { label = 132; break; } else { label = 133; break; }
  case 132: 
   var $788=$buf_size7;
   var $789=((($788)+(32))|0);
   var $790=STACKTOP;STACKTOP = (STACKTOP + $789)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $791=__Z10cvAlignPtrPKvi($790, 32);
   var $792=$791;
   $buf0=$792;
   label = 136; break;
  case 133: 
   var $794=$buf_size7;
   var $795=_cvAlloc($794);
   var $796=$795;
   $buf0=$796;
   var $797=$796;
   $temp_buf=$797;
   var $798=_cvGetErrStatus();
   var $799=(($798)|(0)) < 0;
   if ($799) { label = 134; break; } else { label = 135; break; }
  case 134: 
   _cvError(-1, ((7096)|0), ((15472)|0), ((15792)|0), 817);
   label = 219; break;
  case 135: 
   label = 136; break;
  case 136: 
   var $803=$buf0;
   var $804=$width;
   var $805=(($803+($804<<2))|0);
   $buf1=$805;
   var $806=$buf1;
   var $807=$width;
   var $808=(($806+($807<<2))|0);
   var $809=$808;
   $xofs8=$809;
   var $810=$xofs8;
   var $811=$width;
   var $812=(($810+($811<<3))|0);
   $yofs=$812;
   $dx=0;
   label = 137; break;
  case 137: 
   var $814=$dx;
   var $815=(($dsize)|0);
   var $816=HEAP32[(($815)>>2)];
   var $817=(($814)|(0)) < (($816)|(0));
   if ($817) { label = 138; break; } else { label = 163; break; }
  case 138: 
   var $819=$area_mode;
   var $820=(($819)|(0))!=0;
   if ($820) { label = 140; break; } else { label = 139; break; }
  case 139: 
   var $822=$dx;
   var $823=(($822)|(0));
   var $824=($823)+(0.5);
   var $825=$scale_x;
   var $826=$825;
   var $827=($824)*($826);
   var $828=($827)-(0.5);
   var $829=$828;
   $fx=$829;
   var $830=$fx;
   var $831=$830;
   var $832=__Z7cvFloord($831);
   $sx=$832;
   var $833=$sx;
   var $834=(($833)|(0));
   var $835=$fx;
   var $836=($835)-($834);
   $fx=$836;
   label = 144; break;
  case 140: 
   var $838=$dx;
   var $839=(($838)|(0));
   var $840=$scale_x;
   var $841=($839)*($840);
   var $842=$841;
   var $843=__Z7cvFloord($842);
   $sx=$843;
   var $844=$dx;
   var $845=((($844)+(1))|0);
   var $846=(($845)|(0));
   var $847=$sx;
   var $848=((($847)+(1))|0);
   var $849=(($848)|(0));
   var $850=$inv_scale_x;
   var $851=($849)*($850);
   var $852=($846)-($851);
   $fx=$852;
   var $853=$fx;
   var $854=$853 <= 0;
   if ($854) { label = 141; break; } else { label = 142; break; }
  case 141: 
   var $864 = 0;label = 143; break;
  case 142: 
   var $857=$fx;
   var $858=$fx;
   var $859=$858;
   var $860=__Z7cvFloord($859);
   var $861=(($860)|(0));
   var $862=($857)-($861);
   var $864 = $862;label = 143; break;
  case 143: 
   var $864;
   $fx=$864;
   label = 144; break;
  case 144: 
   var $866=$sx;
   var $867=(($866)|(0)) < 0;
   if ($867) { label = 145; break; } else { label = 146; break; }
  case 145: 
   $fx=0;
   $sx=0;
   label = 146; break;
  case 146: 
   var $870=$sx;
   var $871=(($ssize)|0);
   var $872=HEAP32[(($871)>>2)];
   var $873=((($872)-(1))|0);
   var $874=(($870)|(0)) >= (($873)|(0));
   if ($874) { label = 147; break; } else { label = 150; break; }
  case 147: 
   $fx=0;
   var $876=(($ssize)|0);
   var $877=HEAP32[(($876)>>2)];
   var $878=((($877)-(1))|0);
   $sx=$878;
   var $879=$xmax;
   var $880=(($dsize)|0);
   var $881=HEAP32[(($880)>>2)];
   var $882=(($879)|(0)) >= (($881)|(0));
   if ($882) { label = 148; break; } else { label = 149; break; }
  case 148: 
   var $884=$dx;
   $xmax=$884;
   label = 149; break;
  case 149: 
   label = 150; break;
  case 150: 
   var $887=$depth;
   var $888=(($887)|(0))!=0;
   if ($888) { label = 151; break; } else { label = 156; break; }
  case 151: 
   $k=0;
   var $890=$cn;
   var $891=$sx;
   var $892=(Math.imul($891,$890)|0);
   $sx=$892;
   label = 152; break;
  case 152: 
   var $894=$k;
   var $895=$cn;
   var $896=(($894)|(0)) < (($895)|(0));
   if ($896) { label = 153; break; } else { label = 155; break; }
  case 153: 
   var $898=$sx;
   var $899=$k;
   var $900=((($898)+($899))|0);
   var $901=$dx;
   var $902=$cn;
   var $903=(Math.imul($901,$902)|0);
   var $904=$k;
   var $905=((($903)+($904))|0);
   var $906=$xofs8;
   var $907=(($906+($905<<3))|0);
   var $908=(($907)|0);
   HEAP32[(($908)>>2)]=$900;
   var $909=$fx;
   var $910=$dx;
   var $911=$cn;
   var $912=(Math.imul($910,$911)|0);
   var $913=$k;
   var $914=((($912)+($913))|0);
   var $915=$xofs8;
   var $916=(($915+($914<<3))|0);
   var $917=(($916+4)|0);
   var $918=$917;
   HEAPF32[(($918)>>2)]=$909;
   label = 154; break;
  case 154: 
   var $920=$k;
   var $921=((($920)+(1))|0);
   $k=$921;
   label = 152; break;
  case 155: 
   label = 161; break;
  case 156: 
   $k=0;
   var $924=$cn;
   var $925=$sx;
   var $926=(Math.imul($925,$924)|0);
   $sx=$926;
   label = 157; break;
  case 157: 
   var $928=$k;
   var $929=$cn;
   var $930=(($928)|(0)) < (($929)|(0));
   if ($930) { label = 158; break; } else { label = 160; break; }
  case 158: 
   var $932=$sx;
   var $933=$k;
   var $934=((($932)+($933))|0);
   var $935=$dx;
   var $936=$cn;
   var $937=(Math.imul($935,$936)|0);
   var $938=$k;
   var $939=((($937)+($938))|0);
   var $940=$xofs8;
   var $941=(($940+($939<<3))|0);
   var $942=(($941)|0);
   HEAP32[(($942)>>2)]=$934;
   var $943=$fx;
   var $944=($943)*(1024);
   var $945=$944;
   var $946=__Z7cvRoundd($945);
   var $947=$dx;
   var $948=$cn;
   var $949=(Math.imul($947,$948)|0);
   var $950=$k;
   var $951=((($949)+($950))|0);
   var $952=$xofs8;
   var $953=(($952+($951<<3))|0);
   var $954=(($953+4)|0);
   var $955=$954;
   HEAP32[(($955)>>2)]=$946;
   label = 159; break;
  case 159: 
   var $957=$k;
   var $958=((($957)+(1))|0);
   $k=$958;
   label = 157; break;
  case 160: 
   label = 161; break;
  case 161: 
   label = 162; break;
  case 162: 
   var $962=$dx;
   var $963=((($962)+(1))|0);
   $dx=$963;
   label = 137; break;
  case 163: 
   $dy=0;
   label = 164; break;
  case 164: 
   var $966=$dy;
   var $967=(($dsize+4)|0);
   var $968=HEAP32[(($967)>>2)];
   var $969=(($966)|(0)) < (($968)|(0));
   if ($969) { label = 165; break; } else { label = 178; break; }
  case 165: 
   var $971=$area_mode;
   var $972=(($971)|(0))!=0;
   if ($972) { label = 169; break; } else { label = 166; break; }
  case 166: 
   var $974=$dy;
   var $975=(($974)|(0));
   var $976=($975)+(0.5);
   var $977=$scale_y;
   var $978=$977;
   var $979=($976)*($978);
   var $980=($979)-(0.5);
   var $981=$980;
   $fy=$981;
   var $982=$fy;
   var $983=$982;
   var $984=__Z7cvFloord($983);
   $sy=$984;
   var $985=$sy;
   var $986=(($985)|(0));
   var $987=$fy;
   var $988=($987)-($986);
   $fy=$988;
   var $989=$sy;
   var $990=(($989)|(0)) < 0;
   if ($990) { label = 167; break; } else { label = 168; break; }
  case 167: 
   $sy=0;
   $fy=0;
   label = 168; break;
  case 168: 
   label = 173; break;
  case 169: 
   var $994=$dy;
   var $995=(($994)|(0));
   var $996=$scale_y;
   var $997=($995)*($996);
   var $998=$997;
   var $999=__Z7cvFloord($998);
   $sy=$999;
   var $1000=$dy;
   var $1001=((($1000)+(1))|0);
   var $1002=(($1001)|(0));
   var $1003=$sy;
   var $1004=((($1003)+(1))|0);
   var $1005=(($1004)|(0));
   var $1006=$inv_scale_y;
   var $1007=($1005)*($1006);
   var $1008=($1002)-($1007);
   $fy=$1008;
   var $1009=$fy;
   var $1010=$1009 <= 0;
   if ($1010) { label = 170; break; } else { label = 171; break; }
  case 170: 
   var $1020 = 0;label = 172; break;
  case 171: 
   var $1013=$fy;
   var $1014=$fy;
   var $1015=$1014;
   var $1016=__Z7cvFloord($1015);
   var $1017=(($1016)|(0));
   var $1018=($1013)-($1017);
   var $1020 = $1018;label = 172; break;
  case 172: 
   var $1020;
   $fy=$1020;
   label = 173; break;
  case 173: 
   var $1022=$sy;
   var $1023=$dy;
   var $1024=$yofs;
   var $1025=(($1024+($1023<<3))|0);
   var $1026=(($1025)|0);
   HEAP32[(($1026)>>2)]=$1022;
   var $1027=$depth;
   var $1028=(($1027)|(0))!=0;
   if ($1028) { label = 174; break; } else { label = 175; break; }
  case 174: 
   var $1030=$fy;
   var $1031=$dy;
   var $1032=$yofs;
   var $1033=(($1032+($1031<<3))|0);
   var $1034=(($1033+4)|0);
   var $1035=$1034;
   HEAPF32[(($1035)>>2)]=$1030;
   label = 176; break;
  case 175: 
   var $1037=$fy;
   var $1038=($1037)*(1024);
   var $1039=$1038;
   var $1040=__Z7cvRoundd($1039);
   var $1041=$dy;
   var $1042=$yofs;
   var $1043=(($1042+($1041<<3))|0);
   var $1044=(($1043+4)|0);
   var $1045=$1044;
   HEAP32[(($1045)>>2)]=$1040;
   label = 176; break;
  case 176: 
   label = 177; break;
  case 177: 
   var $1048=$dy;
   var $1049=((($1048)+(1))|0);
   $dy=$1049;
   label = 164; break;
  case 178: 
   var $1051=$func9;
   var $1052=$src;
   var $1053=(($1052+16)|0);
   var $1054=$1053;
   var $1055=HEAP32[(($1054)>>2)];
   var $1056=$src;
   var $1057=(($1056+4)|0);
   var $1058=HEAP32[(($1057)>>2)];
   var $1059=$15;
   var $1060=$ssize;
   assert(8 % 1 === 0);HEAP32[(($1059)>>2)]=HEAP32[(($1060)>>2)];HEAP32[((($1059)+(4))>>2)]=HEAP32[((($1060)+(4))>>2)];
   var $1061=$dst;
   var $1062=(($1061+16)|0);
   var $1063=$1062;
   var $1064=HEAP32[(($1063)>>2)];
   var $1065=$dst;
   var $1066=(($1065+4)|0);
   var $1067=HEAP32[(($1066)>>2)];
   var $1068=$16;
   var $1069=$dsize;
   assert(8 % 1 === 0);HEAP32[(($1068)>>2)]=HEAP32[(($1069)>>2)];HEAP32[((($1068)+(4))>>2)]=HEAP32[((($1069)+(4))>>2)];
   var $1070=$cn;
   var $1071=$xmax;
   var $1072=$xofs8;
   var $1073=$yofs;
   var $1074=$buf0;
   var $1075=$buf1;
   var $1076=FUNCTION_TABLE[$1051]($1055, $1058, $15, $1064, $1067, $16, $1070, $1071, $1072, $1073, $1074, $1075);
   $ippi_call_result10=$1076;
   var $1077=$ippi_call_result10;
   var $1078=(($1077)|(0)) < 0;
   if ($1078) { label = 179; break; } else { label = 180; break; }
  case 179: 
   var $1080=$ippi_call_result10;
   var $1081=_cvErrorFromIppStatus($1080);
   _cvError($1081, ((7096)|0), ((11488)|0), ((15792)|0), 881);
   label = 219; break;
  case 180: 
   label = 181; break;
  case 181: 
   label = 217; break;
  case 182: 
   var $1085=$3;
   var $1086=(($1085)|(0))==2;
   if ($1086) { label = 183; break; } else { label = 215; break; }
  case 183: 
   var $1088=(($dsize)|0);
   var $1089=HEAP32[(($1088)>>2)];
   var $1090=$cn;
   var $1091=(Math.imul($1089,$1090)|0);
   $width11=$1091;
   var $1092=(($dsize)|0);
   var $1093=HEAP32[(($1092)>>2)];
   $xmin=$1093;
   $xmax13=-1;
   var $1094=$depth;
   var $1095=((((36744)|0)+($1094<<2))|0);
   var $1096=HEAP32[(($1095)>>2)];
   var $1097=$1096;
   $func16=$1097;
   var $1098=$func16;
   var $1099=(($1098)|(0))!=0;
   if ($1099) { label = 185; break; } else { label = 184; break; }
  case 184: 
   _cvError(-210, ((7096)|0), ((36912)|0), ((15792)|0), 893);
   label = 219; break;
  case 185: 
   var $1102=$width11;
   var $1103=((($1102)*(24))&-1);
   $buf_size12=$1103;
   var $1104=$buf_size12;
   var $1105=(($1104)|(0)) < 8192;
   if ($1105) { label = 186; break; } else { label = 187; break; }
  case 186: 
   var $1107=$buf_size12;
   var $1108=((($1107)+(32))|0);
   var $1109=STACKTOP;STACKTOP = (STACKTOP + $1108)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $1110=__Z10cvAlignPtrPKvi($1109, 32);
   var $1111=$1110;
   var $1112=(($buf15)|0);
   HEAP32[(($1112)>>2)]=$1111;
   label = 190; break;
  case 187: 
   var $1114=$buf_size12;
   var $1115=_cvAlloc($1114);
   var $1116=$1115;
   var $1117=(($buf15)|0);
   HEAP32[(($1117)>>2)]=$1116;
   var $1118=$1116;
   $temp_buf=$1118;
   var $1119=_cvGetErrStatus();
   var $1120=(($1119)|(0)) < 0;
   if ($1120) { label = 188; break; } else { label = 189; break; }
  case 188: 
   _cvError(-1, ((7096)|0), ((15472)|0), ((15792)|0), 899);
   label = 219; break;
  case 189: 
   label = 190; break;
  case 190: 
   $k=1;
   label = 191; break;
  case 191: 
   var $1125=$k;
   var $1126=(($1125)|(0)) < 4;
   if ($1126) { label = 192; break; } else { label = 194; break; }
  case 192: 
   var $1128=$k;
   var $1129=((($1128)-(1))|0);
   var $1130=(($buf15+($1129<<2))|0);
   var $1131=HEAP32[(($1130)>>2)];
   var $1132=$width11;
   var $1133=(($1131+($1132<<2))|0);
   var $1134=$k;
   var $1135=(($buf15+($1134<<2))|0);
   HEAP32[(($1135)>>2)]=$1133;
   label = 193; break;
  case 193: 
   var $1137=$k;
   var $1138=((($1137)+(1))|0);
   $k=$1138;
   label = 191; break;
  case 194: 
   var $1140=(($buf15+12)|0);
   var $1141=HEAP32[(($1140)>>2)];
   var $1142=$width11;
   var $1143=(($1141+($1142<<2))|0);
   var $1144=$1143;
   $xofs14=$1144;
   __Z20icvInitCubicCoeffTabv();
   $dx=0;
   label = 195; break;
  case 195: 
   var $1146=$dx;
   var $1147=(($dsize)|0);
   var $1148=HEAP32[(($1147)>>2)];
   var $1149=(($1146)|(0)) < (($1148)|(0));
   if ($1149) { label = 196; break; } else { label = 212; break; }
  case 196: 
   var $1151=$dx;
   var $1152=(($1151)|(0));
   var $1153=$scale_x;
   var $1154=($1152)*($1153);
   $fx17=$1154;
   var $1155=$fx17;
   var $1156=$1155;
   var $1157=__Z7cvFloord($1156);
   $sx=$1157;
   var $1158=$sx;
   var $1159=(($1158)|(0));
   var $1160=$fx17;
   var $1161=($1160)-($1159);
   $fx17=$1161;
   var $1162=$fx17;
   var $1163=($1162)*(1024);
   var $1164=$1163;
   var $1165=__Z7cvRoundd($1164);
   $ifx=$1165;
   var $1166=$sx;
   var $1167=((($1166)-(1))|0);
   var $1168=(($1167)|(0)) >= 0;
   if ($1168) { label = 197; break; } else { label = 199; break; }
  case 197: 
   var $1170=$xmin;
   var $1171=$dx;
   var $1172=(($1170)|(0)) > (($1171)|(0));
   if ($1172) { label = 198; break; } else { label = 199; break; }
  case 198: 
   var $1174=$dx;
   $xmin=$1174;
   label = 199; break;
  case 199: 
   var $1176=$sx;
   var $1177=((($1176)+(2))|0);
   var $1178=(($ssize)|0);
   var $1179=HEAP32[(($1178)>>2)];
   var $1180=(($1177)|(0)) < (($1179)|(0));
   if ($1180) { label = 200; break; } else { label = 201; break; }
  case 200: 
   var $1182=$dx;
   var $1183=((($1182)+(1))|0);
   $xmax13=$1183;
   label = 201; break;
  case 201: 
   var $1185=$sx;
   var $1186=(($1185)|(0)) < -2;
   if ($1186) { label = 202; break; } else { label = 203; break; }
  case 202: 
   $sx=-2;
   label = 206; break;
  case 203: 
   var $1189=$sx;
   var $1190=(($ssize)|0);
   var $1191=HEAP32[(($1190)>>2)];
   var $1192=(($1189)|(0)) > (($1191)|(0));
   if ($1192) { label = 204; break; } else { label = 205; break; }
  case 204: 
   var $1194=(($ssize)|0);
   var $1195=HEAP32[(($1194)>>2)];
   $sx=$1195;
   label = 205; break;
  case 205: 
   label = 206; break;
  case 206: 
   $k=0;
   label = 207; break;
  case 207: 
   var $1199=$k;
   var $1200=$cn;
   var $1201=(($1199)|(0)) < (($1200)|(0));
   if ($1201) { label = 208; break; } else { label = 210; break; }
  case 208: 
   var $1203=$sx;
   var $1204=$cn;
   var $1205=(Math.imul($1203,$1204)|0);
   var $1206=$k;
   var $1207=((($1205)+($1206))|0);
   var $1208=$dx;
   var $1209=$cn;
   var $1210=(Math.imul($1208,$1209)|0);
   var $1211=$k;
   var $1212=((($1210)+($1211))|0);
   var $1213=$xofs14;
   var $1214=(($1213+($1212<<3))|0);
   var $1215=(($1214)|0);
   HEAP32[(($1215)>>2)]=$1207;
   var $1216=$ifx;
   var $1217=$dx;
   var $1218=$cn;
   var $1219=(Math.imul($1217,$1218)|0);
   var $1220=$k;
   var $1221=((($1219)+($1220))|0);
   var $1222=$xofs14;
   var $1223=(($1222+($1221<<3))|0);
   var $1224=(($1223+4)|0);
   var $1225=$1224;
   HEAP32[(($1225)>>2)]=$1216;
   label = 209; break;
  case 209: 
   var $1227=$k;
   var $1228=((($1227)+(1))|0);
   $k=$1228;
   label = 207; break;
  case 210: 
   label = 211; break;
  case 211: 
   var $1231=$dx;
   var $1232=((($1231)+(1))|0);
   $dx=$1232;
   label = 195; break;
  case 212: 
   var $1234=$func16;
   var $1235=$src;
   var $1236=(($1235+16)|0);
   var $1237=$1236;
   var $1238=HEAP32[(($1237)>>2)];
   var $1239=$src;
   var $1240=(($1239+4)|0);
   var $1241=HEAP32[(($1240)>>2)];
   var $1242=$17;
   var $1243=$ssize;
   assert(8 % 1 === 0);HEAP32[(($1242)>>2)]=HEAP32[(($1243)>>2)];HEAP32[((($1242)+(4))>>2)]=HEAP32[((($1243)+(4))>>2)];
   var $1244=$dst;
   var $1245=(($1244+16)|0);
   var $1246=$1245;
   var $1247=HEAP32[(($1246)>>2)];
   var $1248=$dst;
   var $1249=(($1248+4)|0);
   var $1250=HEAP32[(($1249)>>2)];
   var $1251=$18;
   var $1252=$dsize;
   assert(8 % 1 === 0);HEAP32[(($1251)>>2)]=HEAP32[(($1252)>>2)];HEAP32[((($1251)+(4))>>2)]=HEAP32[((($1252)+(4))>>2)];
   var $1253=$cn;
   var $1254=$xmin;
   var $1255=$xmax13;
   var $1256=$xofs14;
   var $1257=(($buf15)|0);
   var $1258=FUNCTION_TABLE[$1234]($1238, $1241, $17, $1247, $1250, $18, $1253, $1254, $1255, $1256, $1257);
   $ippi_call_result18=$1258;
   var $1259=$ippi_call_result18;
   var $1260=(($1259)|(0)) < 0;
   if ($1260) { label = 213; break; } else { label = 214; break; }
  case 213: 
   var $1262=$ippi_call_result18;
   var $1263=_cvErrorFromIppStatus($1262);
   _cvError($1263, ((7096)|0), ((11488)|0), ((15792)|0), 934);
   label = 219; break;
  case 214: 
   label = 216; break;
  case 215: 
   _cvError(-206, ((7096)|0), ((10560)|0), ((15792)|0), 937);
   label = 219; break;
  case 216: 
   label = 217; break;
  case 217: 
   label = 218; break;
  case 218: 
   label = 219; break;
  case 219: 
   var $1270=$temp_buf;
   _cvFree_($1270);
   $temp_buf=0;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvInitResizeTabP11CvFuncTableS0_S0_S0_($bilin_tab, $bicube_tab, $areafast_tab, $area_tab) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$bilin_tab;
 $2=$bicube_tab;
 $3=$areafast_tab;
 $4=$area_tab;
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6)|0);
 HEAP32[(($7)>>2)]=(56);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+8)|0);
 HEAP32[(($10)>>2)]=(20);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+20)|0);
 HEAP32[(($13)>>2)]=(664);
 var $14=$2;
 var $15=(($14)|0);
 var $16=(($15)|0);
 HEAP32[(($16)>>2)]=(752);
 var $17=$2;
 var $18=(($17)|0);
 var $19=(($18+8)|0);
 HEAP32[(($19)>>2)]=(92);
 var $20=$2;
 var $21=(($20)|0);
 var $22=(($21+20)|0);
 HEAP32[(($22)>>2)]=(486);
 var $23=$3;
 var $24=(($23)|0);
 var $25=(($24)|0);
 HEAP32[(($25)>>2)]=(574);
 var $26=$3;
 var $27=(($26)|0);
 var $28=(($27+8)|0);
 HEAP32[(($28)>>2)]=(192);
 var $29=$3;
 var $30=(($29)|0);
 var $31=(($30+20)|0);
 HEAP32[(($31)>>2)]=(742);
 var $32=$4;
 var $33=(($32)|0);
 var $34=(($33)|0);
 HEAP32[(($34)>>2)]=(596);
 var $35=$4;
 var $36=(($35)|0);
 var $37=(($36+8)|0);
 HEAP32[(($37)>>2)]=(102);
 var $38=$4;
 var $39=(($38)|0);
 var $40=(($39+20)|0);
 HEAP32[(($40)>>2)]=(548);
 return;
}
function __Z6cvRectiiii($agg_result, $x, $y, $width, $height) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$x;
 $2=$y;
 $3=$width;
 $4=$height;
 var $5=$1;
 var $6=(($agg_result)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=$2;
 var $8=(($agg_result+4)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$3;
 var $10=(($agg_result+8)|0);
 HEAP32[(($10)>>2)]=$9;
 var $11=$4;
 var $12=(($agg_result+12)|0);
 HEAP32[(($12)>>2)]=$11;
 return;
}
function __ZL19icvResize_NN_8u_C1RPKhi6CvSizePhiS1_i($src, $srcstep, $ssize, $dst, $dststep, $dsize, $pix_size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $x_ofs;
   var $pix_size4;
   var $x;
   var $y;
   var $t;
   var $tsrc;
   var $t0;
   var $t1;
   var $_tsrc;
   var $_tsrc1;
   var $_tdst;
   var $_icv_memcpy_i_;
   var $_icv_memcpy_len_;
   var $_icv_memcpy_dst_;
   var $_icv_memcpy_src_;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$pix_size;
   var $6=(($dsize)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=($7<<2);
   var $9=((($8)+(32))|0);
   var $10=STACKTOP;STACKTOP = (STACKTOP + $9)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $11=__Z10cvAlignPtrPKvi($10, 32);
   var $12=$11;
   $x_ofs=$12;
   var $13=$5;
   var $14=((((($13)>>>(0)))/(4))&-1);
   $pix_size4=$14;
   $x=0;
   label = 2; break;
  case 2: 
   var $16=$x;
   var $17=(($dsize)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($16)|(0)) < (($18)|(0));
   if ($19) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $21=(($ssize)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$x;
   var $24=(Math.imul($22,$23)|0);
   var $25=($24<<1);
   var $26=(($ssize)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($dsize)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($27)|(0)) > (($29)|(0));
   if ($30) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $32=(($dsize)|0);
   var $33=HEAP32[(($32)>>2)];
   var $38 = $33;label = 6; break;
  case 5: 
   var $35=(($ssize)|0);
   var $36=HEAP32[(($35)>>2)];
   var $38 = $36;label = 6; break;
  case 6: 
   var $38;
   var $39=((($25)+($38))|0);
   var $40=((($39)-(1))|0);
   var $41=(($dsize)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=($42<<1);
   var $44=((((($40)|(0)))/((($43)|(0))))&-1);
   $t=$44;
   var $45=$t;
   var $46=(($ssize)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($45)|(0)) >= (($47)|(0));
   var $49=(($48)&(1));
   var $50=$t;
   var $51=((($50)-($49))|0);
   $t=$51;
   var $52=$t;
   var $53=$5;
   var $54=(Math.imul($52,$53)|0);
   var $55=$x;
   var $56=$x_ofs;
   var $57=(($56+($55<<2))|0);
   HEAP32[(($57)>>2)]=$54;
   label = 7; break;
  case 7: 
   var $59=$x;
   var $60=((($59)+(1))|0);
   $x=$60;
   label = 2; break;
  case 8: 
   $y=0;
   label = 9; break;
  case 9: 
   var $63=$y;
   var $64=(($dsize+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($63)|(0)) < (($65)|(0));
   if ($66) { label = 10; break; } else { label = 54; break; }
  case 10: 
   var $68=(($ssize+4)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$y;
   var $71=(Math.imul($69,$70)|0);
   var $72=($71<<1);
   var $73=(($ssize+4)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($dsize+4)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($74)|(0)) > (($76)|(0));
   if ($77) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $79=(($dsize+4)|0);
   var $80=HEAP32[(($79)>>2)];
   var $85 = $80;label = 13; break;
  case 12: 
   var $82=(($ssize+4)|0);
   var $83=HEAP32[(($82)>>2)];
   var $85 = $83;label = 13; break;
  case 13: 
   var $85;
   var $86=((($72)+($85))|0);
   var $87=((($86)-(1))|0);
   var $88=(($dsize+4)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=($89<<1);
   var $91=((((($87)|(0)))/((($90)|(0))))&-1);
   $t=$91;
   var $92=$t;
   var $93=(($ssize+4)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($92)|(0)) >= (($94)|(0));
   var $96=(($95)&(1));
   var $97=$t;
   var $98=((($97)-($96))|0);
   $t=$98;
   var $99=$1;
   var $100=$2;
   var $101=$t;
   var $102=(Math.imul($100,$101)|0);
   var $103=(($99+$102)|0);
   $tsrc=$103;
   var $104=$5;
   if ((($104)|(0))==1) {
    label = 14; break;
   }
   else if ((($104)|(0))==2) {
    label = 23; break;
   }
   else if ((($104)|(0))==3) {
    label = 28; break;
   }
   else if ((($104)|(0))==4) {
    label = 33; break;
   }
   else if ((($104)|(0))==6) {
    label = 38; break;
   }
   else {
   label = 43; break;
   }
  case 14: 
   $x=0;
   label = 15; break;
  case 15: 
   var $107=$x;
   var $108=(($dsize)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=((($109)-(2))|0);
   var $111=(($107)|(0)) <= (($110)|(0));
   if ($111) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $113=$x;
   var $114=$x_ofs;
   var $115=(($114+($113<<2))|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=$tsrc;
   var $118=(($117+$116)|0);
   var $119=HEAP8[($118)];
   $t0=$119;
   var $120=$x;
   var $121=((($120)+(1))|0);
   var $122=$x_ofs;
   var $123=(($122+($121<<2))|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=$tsrc;
   var $126=(($125+$124)|0);
   var $127=HEAP8[($126)];
   $t1=$127;
   var $128=$t0;
   var $129=$x;
   var $130=$3;
   var $131=(($130+$129)|0);
   HEAP8[($131)]=$128;
   var $132=$t1;
   var $133=$x;
   var $134=((($133)+(1))|0);
   var $135=$3;
   var $136=(($135+$134)|0);
   HEAP8[($136)]=$132;
   label = 17; break;
  case 17: 
   var $138=$x;
   var $139=((($138)+(2))|0);
   $x=$139;
   label = 15; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $142=$x;
   var $143=(($dsize)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(($142)|(0)) < (($144)|(0));
   if ($145) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $147=$x;
   var $148=$x_ofs;
   var $149=(($148+($147<<2))|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=$tsrc;
   var $152=(($151+$150)|0);
   var $153=HEAP8[($152)];
   var $154=$x;
   var $155=$3;
   var $156=(($155+$154)|0);
   HEAP8[($156)]=$153;
   label = 21; break;
  case 21: 
   var $158=$x;
   var $159=((($158)+(1))|0);
   $x=$159;
   label = 19; break;
  case 22: 
   label = 52; break;
  case 23: 
   $x=0;
   label = 24; break;
  case 24: 
   var $163=$x;
   var $164=(($dsize)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($163)|(0)) < (($165)|(0));
   if ($166) { label = 25; break; } else { label = 27; break; }
  case 25: 
   var $168=$tsrc;
   var $169=$x;
   var $170=$x_ofs;
   var $171=(($170+($169<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($168+$172)|0);
   var $174=$173;
   var $175=HEAP16[(($174)>>1)];
   var $176=$3;
   var $177=$x;
   var $178=($177<<1);
   var $179=(($176+$178)|0);
   var $180=$179;
   HEAP16[(($180)>>1)]=$175;
   label = 26; break;
  case 26: 
   var $182=$x;
   var $183=((($182)+(1))|0);
   $x=$183;
   label = 24; break;
  case 27: 
   label = 52; break;
  case 28: 
   $x=0;
   label = 29; break;
  case 29: 
   var $187=$x;
   var $188=(($dsize)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($187)|(0)) < (($189)|(0));
   if ($190) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $192=$tsrc;
   var $193=$x;
   var $194=$x_ofs;
   var $195=(($194+($193<<2))|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($192+$196)|0);
   $_tsrc=$197;
   var $198=$_tsrc;
   var $199=(($198)|0);
   var $200=HEAP8[($199)];
   var $201=$x;
   var $202=((($201)*(3))&-1);
   var $203=$3;
   var $204=(($203+$202)|0);
   HEAP8[($204)]=$200;
   var $205=$_tsrc;
   var $206=(($205+1)|0);
   var $207=HEAP8[($206)];
   var $208=$x;
   var $209=((($208)*(3))&-1);
   var $210=((($209)+(1))|0);
   var $211=$3;
   var $212=(($211+$210)|0);
   HEAP8[($212)]=$207;
   var $213=$_tsrc;
   var $214=(($213+2)|0);
   var $215=HEAP8[($214)];
   var $216=$x;
   var $217=((($216)*(3))&-1);
   var $218=((($217)+(2))|0);
   var $219=$3;
   var $220=(($219+$218)|0);
   HEAP8[($220)]=$215;
   label = 31; break;
  case 31: 
   var $222=$x;
   var $223=((($222)+(1))|0);
   $x=$223;
   label = 29; break;
  case 32: 
   label = 52; break;
  case 33: 
   $x=0;
   label = 34; break;
  case 34: 
   var $227=$x;
   var $228=(($dsize)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=(($227)|(0)) < (($229)|(0));
   if ($230) { label = 35; break; } else { label = 37; break; }
  case 35: 
   var $232=$tsrc;
   var $233=$x;
   var $234=$x_ofs;
   var $235=(($234+($233<<2))|0);
   var $236=HEAP32[(($235)>>2)];
   var $237=(($232+$236)|0);
   var $238=$237;
   var $239=HEAP32[(($238)>>2)];
   var $240=$3;
   var $241=$x;
   var $242=($241<<2);
   var $243=(($240+$242)|0);
   var $244=$243;
   HEAP32[(($244)>>2)]=$239;
   label = 36; break;
  case 36: 
   var $246=$x;
   var $247=((($246)+(1))|0);
   $x=$247;
   label = 34; break;
  case 37: 
   label = 52; break;
  case 38: 
   $x=0;
   label = 39; break;
  case 39: 
   var $251=$x;
   var $252=(($dsize)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=(($251)|(0)) < (($253)|(0));
   if ($254) { label = 40; break; } else { label = 42; break; }
  case 40: 
   var $256=$tsrc;
   var $257=$x;
   var $258=$x_ofs;
   var $259=(($258+($257<<2))|0);
   var $260=HEAP32[(($259)>>2)];
   var $261=(($256+$260)|0);
   var $262=$261;
   $_tsrc1=$262;
   var $263=$3;
   var $264=$x;
   var $265=((($264)*(6))&-1);
   var $266=(($263+$265)|0);
   var $267=$266;
   $_tdst=$267;
   var $268=$_tsrc1;
   var $269=(($268)|0);
   var $270=HEAP16[(($269)>>1)];
   var $271=$_tdst;
   var $272=(($271)|0);
   HEAP16[(($272)>>1)]=$270;
   var $273=$_tsrc1;
   var $274=(($273+2)|0);
   var $275=HEAP16[(($274)>>1)];
   var $276=$_tdst;
   var $277=(($276+2)|0);
   HEAP16[(($277)>>1)]=$275;
   var $278=$_tsrc1;
   var $279=(($278+4)|0);
   var $280=HEAP16[(($279)>>1)];
   var $281=$_tdst;
   var $282=(($281+4)|0);
   HEAP16[(($282)>>1)]=$280;
   label = 41; break;
  case 41: 
   var $284=$x;
   var $285=((($284)+(1))|0);
   $x=$285;
   label = 39; break;
  case 42: 
   label = 52; break;
  case 43: 
   $x=0;
   label = 44; break;
  case 44: 
   var $289=$x;
   var $290=(($dsize)|0);
   var $291=HEAP32[(($290)>>2)];
   var $292=(($289)|(0)) < (($291)|(0));
   if ($292) { label = 45; break; } else { label = 51; break; }
  case 45: 
   var $294=$pix_size4;
   $_icv_memcpy_len_=$294;
   var $295=$3;
   var $296=$x;
   var $297=$5;
   var $298=(Math.imul($296,$297)|0);
   var $299=(($295+$298)|0);
   var $300=$299;
   $_icv_memcpy_dst_=$300;
   var $301=$tsrc;
   var $302=$x;
   var $303=$x_ofs;
   var $304=(($303+($302<<2))|0);
   var $305=HEAP32[(($304)>>2)];
   var $306=(($301+$305)|0);
   var $307=$306;
   $_icv_memcpy_src_=$307;
   $_icv_memcpy_i_=0;
   label = 46; break;
  case 46: 
   var $309=$_icv_memcpy_i_;
   var $310=$_icv_memcpy_len_;
   var $311=(($309)>>>(0)) < (($310)>>>(0));
   if ($311) { label = 47; break; } else { label = 49; break; }
  case 47: 
   var $313=$_icv_memcpy_i_;
   var $314=$_icv_memcpy_src_;
   var $315=(($314+($313<<2))|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=$_icv_memcpy_i_;
   var $318=$_icv_memcpy_dst_;
   var $319=(($318+($317<<2))|0);
   HEAP32[(($319)>>2)]=$316;
   label = 48; break;
  case 48: 
   var $321=$_icv_memcpy_i_;
   var $322=((($321)+(1))|0);
   $_icv_memcpy_i_=$322;
   label = 46; break;
  case 49: 
   label = 50; break;
  case 50: 
   var $325=$x;
   var $326=((($325)+(1))|0);
   $x=$326;
   label = 44; break;
  case 51: 
   label = 52; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $330=$y;
   var $331=((($330)+(1))|0);
   $y=$331;
   var $332=$4;
   var $333=$3;
   var $334=(($333+$332)|0);
   $3=$334;
   label = 9; break;
  case 54: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z6cvCeild($value) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $temp;
 var $diff=sp;
 $1=$value;
 var $2=$1;
 var $3=__Z7cvRoundd($2);
 $temp=$3;
 var $4=$temp;
 var $5=(($4)|(0));
 var $6=$1;
 var $7=($5)-($6);
 var $8=$7;
 var $9=$diff;
 HEAPF32[(($9)>>2)]=$8;
 var $10=$temp;
 var $11=$diff;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12)|(0)) < 0;
 var $14=(($13)&(1));
 var $15=((($10)+($14))|0);
 STACKTOP = sp;
 return $15;
}
function __ZL25icvResize_Bilinear_8u_CnRPKhi6CvSizePhiS1_iiPK13CvResizeAlphaS5_PiS6_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xmax, $xofs, $yofs, $buf0, $buf1) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $prev_sy0;
   var $prev_sy1;
   var $k;
   var $dx;
   var $dy;
   var $fy;
   var $swap_t;
   var $sy0;
   var $sy1;
   var $_buf;
   var $_src;
   var $sy;
   var $sx;
   var $fx;
   var $t;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xmax;
   $7=$xofs;
   $8=$yofs;
   $9=$buf0;
   $10=$buf1;
   $prev_sy0=-1;
   $prev_sy1=-1;
   var $11=$2;
   var $12=(((($11)>>>(0)))&-1);
   $2=$12;
   var $13=$4;
   var $14=(((($13)>>>(0)))&-1);
   $4=$14;
   var $15=$5;
   var $16=(($dsize)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(Math.imul($17,$15)|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=$5;
   var $20=$6;
   var $21=(Math.imul($20,$19)|0);
   $6=$21;
   $dy=0;
   label = 2; break;
  case 2: 
   var $23=$dy;
   var $24=(($dsize+4)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0)) < (($25)|(0));
   if ($26) { label = 3; break; } else { label = 40; break; }
  case 3: 
   var $28=$dy;
   var $29=$8;
   var $30=(($29+($28<<3))|0);
   var $31=(($30+4)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   $fy=$33;
   var $34=$dy;
   var $35=$8;
   var $36=(($35+($34<<3))|0);
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   $sy0=$38;
   var $39=$sy0;
   var $40=$fy;
   var $41=(($40)|(0)) > 0;
   if ($41) { label = 4; break; } else { var $49 = 0;label = 5; break; }
  case 4: 
   var $43=$sy0;
   var $44=(($ssize+4)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=((($45)-(1))|0);
   var $47=(($43)|(0)) < (($46)|(0));
   var $49 = $47;label = 5; break;
  case 5: 
   var $49;
   var $50=(($49)&(1));
   var $51=((($39)+($50))|0);
   $sy1=$51;
   var $52=$sy0;
   var $53=$prev_sy0;
   var $54=(($52)|(0))==(($53)|(0));
   if ($54) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $56=$sy1;
   var $57=$prev_sy1;
   var $58=(($56)|(0))==(($57)|(0));
   if ($58) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $k=2;
   label = 12; break;
  case 8: 
   var $61=$sy0;
   var $62=$prev_sy1;
   var $63=(($61)|(0))==(($62)|(0));
   if ($63) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $65=$9;
   $swap_t=$65;
   var $66=$10;
   $9=$66;
   var $67=$swap_t;
   $10=$67;
   $k=1;
   label = 11; break;
  case 10: 
   $k=0;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $72=$k;
   var $73=(($72)|(0)) < 2;
   if ($73) { label = 14; break; } else { label = 27; break; }
  case 14: 
   var $75=$k;
   var $76=(($75)|(0))==0;
   var $77=$9;
   var $78=$10;
   var $79=$76 ? $77 : $78;
   $_buf=$79;
   var $80=$k;
   var $81=(($80)|(0))==0;
   var $82=$sy0;
   var $83=$sy1;
   var $84=$81 ? $82 : $83;
   $sy=$84;
   var $85=$k;
   var $86=(($85)|(0))==1;
   if ($86) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $88=$sy1;
   var $89=$sy0;
   var $90=(($88)|(0))==(($89)|(0));
   if ($90) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $92=$10;
   var $93=$92;
   var $94=$9;
   var $95=$94;
   var $96=(($dsize)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=($97<<2);
   assert($98 % 1 === 0);(_memcpy($93, $95, $98)|0);
   label = 26; break;
  case 17: 
   var $100=$1;
   var $101=$sy;
   var $102=$2;
   var $103=(Math.imul($101,$102)|0);
   var $104=(($100+$103)|0);
   $_src=$104;
   $dx=0;
   label = 18; break;
  case 18: 
   var $106=$dx;
   var $107=$6;
   var $108=(($106)|(0)) < (($107)|(0));
   if ($108) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $110=$dx;
   var $111=$7;
   var $112=(($111+($110<<3))|0);
   var $113=(($112)|0);
   var $114=HEAP32[(($113)>>2)];
   $sx=$114;
   var $115=$dx;
   var $116=$7;
   var $117=(($116+($115<<3))|0);
   var $118=(($117+4)|0);
   var $119=$118;
   var $120=HEAP32[(($119)>>2)];
   $fx=$120;
   var $121=$sx;
   var $122=$_src;
   var $123=(($122+$121)|0);
   var $124=HEAP8[($123)];
   var $125=(($124)&(255));
   $t=$125;
   var $126=$t;
   var $127=$126 << 10;
   var $128=$fx;
   var $129=$sx;
   var $130=$5;
   var $131=((($129)+($130))|0);
   var $132=$_src;
   var $133=(($132+$131)|0);
   var $134=HEAP8[($133)];
   var $135=(($134)&(255));
   var $136=$t;
   var $137=((($135)-($136))|0);
   var $138=(Math.imul($128,$137)|0);
   var $139=((($127)+($138))|0);
   var $140=$dx;
   var $141=$_buf;
   var $142=(($141+($140<<2))|0);
   HEAP32[(($142)>>2)]=$139;
   label = 20; break;
  case 20: 
   var $144=$dx;
   var $145=((($144)+(1))|0);
   $dx=$145;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $148=$dx;
   var $149=(($dsize)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0)) < (($150)|(0));
   if ($151) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $153=$dx;
   var $154=$7;
   var $155=(($154+($153<<3))|0);
   var $156=(($155)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=$_src;
   var $159=(($158+$157)|0);
   var $160=HEAP8[($159)];
   var $161=(($160)&(255));
   var $162=$161 << 10;
   var $163=$dx;
   var $164=$_buf;
   var $165=(($164+($163<<2))|0);
   HEAP32[(($165)>>2)]=$162;
   label = 24; break;
  case 24: 
   var $167=$dx;
   var $168=((($167)+(1))|0);
   $dx=$168;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $171=$k;
   var $172=((($171)+(1))|0);
   $k=$172;
   label = 13; break;
  case 27: 
   var $174=$sy0;
   $prev_sy0=$174;
   var $175=$sy1;
   $prev_sy1=$175;
   var $176=$sy0;
   var $177=$sy1;
   var $178=(($176)|(0))==(($177)|(0));
   if ($178) { label = 28; break; } else { label = 33; break; }
  case 28: 
   $dx=0;
   label = 29; break;
  case 29: 
   var $181=$dx;
   var $182=(($dsize)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($181)|(0)) < (($183)|(0));
   if ($184) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $186=$dx;
   var $187=$9;
   var $188=(($187+($186<<2))|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=$189 << 10;
   var $191=((($190)+(524288))|0);
   var $192=$191 >> 20;
   var $193=(($192) & 255);
   var $194=$dx;
   var $195=$3;
   var $196=(($195+$194)|0);
   HEAP8[($196)]=$193;
   label = 31; break;
  case 31: 
   var $198=$dx;
   var $199=((($198)+(1))|0);
   $dx=$199;
   label = 29; break;
  case 32: 
   label = 38; break;
  case 33: 
   $dx=0;
   label = 34; break;
  case 34: 
   var $203=$dx;
   var $204=(($dsize)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=(($203)|(0)) < (($205)|(0));
   if ($206) { label = 35; break; } else { label = 37; break; }
  case 35: 
   var $208=$dx;
   var $209=$9;
   var $210=(($209+($208<<2))|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=$211 << 10;
   var $213=$fy;
   var $214=$dx;
   var $215=$10;
   var $216=(($215+($214<<2))|0);
   var $217=HEAP32[(($216)>>2)];
   var $218=$dx;
   var $219=$9;
   var $220=(($219+($218<<2))|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=((($217)-($221))|0);
   var $223=(Math.imul($213,$222)|0);
   var $224=((($212)+($223))|0);
   var $225=((($224)+(524288))|0);
   var $226=$225 >> 20;
   var $227=(($226) & 255);
   var $228=$dx;
   var $229=$3;
   var $230=(($229+$228)|0);
   HEAP8[($230)]=$227;
   label = 36; break;
  case 36: 
   var $232=$dx;
   var $233=((($232)+(1))|0);
   $dx=$233;
   label = 34; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $237=$dy;
   var $238=((($237)+(1))|0);
   $dy=$238;
   var $239=$4;
   var $240=$3;
   var $241=(($240+$239)|0);
   $3=$241;
   label = 2; break;
  case 40: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL26icvResize_Bilinear_16u_CnRPKti6CvSizePtiS1_iiPK13CvResizeAlphaS5_PfS6_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xmax, $xofs, $yofs, $buf0, $buf1) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $prev_sy0;
   var $prev_sy1;
   var $k;
   var $dx;
   var $dy;
   var $fy;
   var $swap_t;
   var $sy0;
   var $sy1;
   var $_buf;
   var $_src;
   var $sy;
   var $sx;
   var $fx;
   var $t;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xmax;
   $7=$xofs;
   $8=$yofs;
   $9=$buf0;
   $10=$buf1;
   $prev_sy0=-1;
   $prev_sy1=-1;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(2))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(2))&-1);
   $4=$14;
   var $15=$5;
   var $16=(($dsize)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(Math.imul($17,$15)|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=$5;
   var $20=$6;
   var $21=(Math.imul($20,$19)|0);
   $6=$21;
   $dy=0;
   label = 2; break;
  case 2: 
   var $23=$dy;
   var $24=(($dsize+4)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0)) < (($25)|(0));
   if ($26) { label = 3; break; } else { label = 40; break; }
  case 3: 
   var $28=$dy;
   var $29=$8;
   var $30=(($29+($28<<3))|0);
   var $31=(($30+4)|0);
   var $32=$31;
   var $33=HEAPF32[(($32)>>2)];
   $fy=$33;
   var $34=$dy;
   var $35=$8;
   var $36=(($35+($34<<3))|0);
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   $sy0=$38;
   var $39=$sy0;
   var $40=$fy;
   var $41=$40 > 0;
   if ($41) { label = 4; break; } else { var $49 = 0;label = 5; break; }
  case 4: 
   var $43=$sy0;
   var $44=(($ssize+4)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=((($45)-(1))|0);
   var $47=(($43)|(0)) < (($46)|(0));
   var $49 = $47;label = 5; break;
  case 5: 
   var $49;
   var $50=(($49)&(1));
   var $51=((($39)+($50))|0);
   $sy1=$51;
   var $52=$sy0;
   var $53=$prev_sy0;
   var $54=(($52)|(0))==(($53)|(0));
   if ($54) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $56=$sy1;
   var $57=$prev_sy1;
   var $58=(($56)|(0))==(($57)|(0));
   if ($58) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $k=2;
   label = 12; break;
  case 8: 
   var $61=$sy0;
   var $62=$prev_sy1;
   var $63=(($61)|(0))==(($62)|(0));
   if ($63) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $65=$9;
   $swap_t=$65;
   var $66=$10;
   $9=$66;
   var $67=$swap_t;
   $10=$67;
   $k=1;
   label = 11; break;
  case 10: 
   $k=0;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $72=$k;
   var $73=(($72)|(0)) < 2;
   if ($73) { label = 14; break; } else { label = 27; break; }
  case 14: 
   var $75=$k;
   var $76=(($75)|(0))==0;
   var $77=$9;
   var $78=$10;
   var $79=$76 ? $77 : $78;
   $_buf=$79;
   var $80=$k;
   var $81=(($80)|(0))==0;
   var $82=$sy0;
   var $83=$sy1;
   var $84=$81 ? $82 : $83;
   $sy=$84;
   var $85=$k;
   var $86=(($85)|(0))==1;
   if ($86) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $88=$sy1;
   var $89=$sy0;
   var $90=(($88)|(0))==(($89)|(0));
   if ($90) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $92=$10;
   var $93=$92;
   var $94=$9;
   var $95=$94;
   var $96=(($dsize)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=($97<<2);
   assert($98 % 1 === 0);(_memcpy($93, $95, $98)|0);
   label = 26; break;
  case 17: 
   var $100=$1;
   var $101=$sy;
   var $102=$2;
   var $103=(Math.imul($101,$102)|0);
   var $104=(($100+($103<<1))|0);
   $_src=$104;
   $dx=0;
   label = 18; break;
  case 18: 
   var $106=$dx;
   var $107=$6;
   var $108=(($106)|(0)) < (($107)|(0));
   if ($108) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $110=$dx;
   var $111=$7;
   var $112=(($111+($110<<3))|0);
   var $113=(($112)|0);
   var $114=HEAP32[(($113)>>2)];
   $sx=$114;
   var $115=$dx;
   var $116=$7;
   var $117=(($116+($115<<3))|0);
   var $118=(($117+4)|0);
   var $119=$118;
   var $120=HEAPF32[(($119)>>2)];
   $fx=$120;
   var $121=$sx;
   var $122=$_src;
   var $123=(($122+($121<<1))|0);
   var $124=HEAP16[(($123)>>1)];
   var $125=(($124)&(65535));
   $t=$125;
   var $126=$t;
   var $127=$fx;
   var $128=$sx;
   var $129=$5;
   var $130=((($128)+($129))|0);
   var $131=$_src;
   var $132=(($131+($130<<1))|0);
   var $133=HEAP16[(($132)>>1)];
   var $134=(($133)&(65535));
   var $135=(($134)|(0));
   var $136=$t;
   var $137=($135)-($136);
   var $138=($127)*($137);
   var $139=($126)+($138);
   var $140=$dx;
   var $141=$_buf;
   var $142=(($141+($140<<2))|0);
   HEAPF32[(($142)>>2)]=$139;
   label = 20; break;
  case 20: 
   var $144=$dx;
   var $145=((($144)+(1))|0);
   $dx=$145;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $148=$dx;
   var $149=(($dsize)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($148)|(0)) < (($150)|(0));
   if ($151) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $153=$dx;
   var $154=$7;
   var $155=(($154+($153<<3))|0);
   var $156=(($155)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=$_src;
   var $159=(($158+($157<<1))|0);
   var $160=HEAP16[(($159)>>1)];
   var $161=(($160)&(65535));
   var $162=$dx;
   var $163=$_buf;
   var $164=(($163+($162<<2))|0);
   HEAPF32[(($164)>>2)]=$161;
   label = 24; break;
  case 24: 
   var $166=$dx;
   var $167=((($166)+(1))|0);
   $dx=$167;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $170=$k;
   var $171=((($170)+(1))|0);
   $k=$171;
   label = 13; break;
  case 27: 
   var $173=$sy0;
   $prev_sy0=$173;
   var $174=$sy1;
   $prev_sy1=$174;
   var $175=$sy0;
   var $176=$sy1;
   var $177=(($175)|(0))==(($176)|(0));
   if ($177) { label = 28; break; } else { label = 33; break; }
  case 28: 
   $dx=0;
   label = 29; break;
  case 29: 
   var $180=$dx;
   var $181=(($dsize)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=(($180)|(0)) < (($182)|(0));
   if ($183) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $185=$dx;
   var $186=$9;
   var $187=(($186+($185<<2))|0);
   var $188=HEAPF32[(($187)>>2)];
   var $189=$188;
   var $190=__Z7cvRoundd($189);
   var $191=(($190) & 65535);
   var $192=$dx;
   var $193=$3;
   var $194=(($193+($192<<1))|0);
   HEAP16[(($194)>>1)]=$191;
   label = 31; break;
  case 31: 
   var $196=$dx;
   var $197=((($196)+(1))|0);
   $dx=$197;
   label = 29; break;
  case 32: 
   label = 38; break;
  case 33: 
   $dx=0;
   label = 34; break;
  case 34: 
   var $201=$dx;
   var $202=(($dsize)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($201)|(0)) < (($203)|(0));
   if ($204) { label = 35; break; } else { label = 37; break; }
  case 35: 
   var $206=$dx;
   var $207=$9;
   var $208=(($207+($206<<2))|0);
   var $209=HEAPF32[(($208)>>2)];
   var $210=$fy;
   var $211=$dx;
   var $212=$10;
   var $213=(($212+($211<<2))|0);
   var $214=HEAPF32[(($213)>>2)];
   var $215=$dx;
   var $216=$9;
   var $217=(($216+($215<<2))|0);
   var $218=HEAPF32[(($217)>>2)];
   var $219=($214)-($218);
   var $220=($210)*($219);
   var $221=($209)+($220);
   var $222=$221;
   var $223=__Z7cvRoundd($222);
   var $224=(($223) & 65535);
   var $225=$dx;
   var $226=$3;
   var $227=(($226+($225<<1))|0);
   HEAP16[(($227)>>1)]=$224;
   label = 36; break;
  case 36: 
   var $229=$dx;
   var $230=((($229)+(1))|0);
   $dx=$230;
   label = 34; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $234=$dy;
   var $235=((($234)+(1))|0);
   $dy=$235;
   var $236=$4;
   var $237=$3;
   var $238=(($237+($236<<1))|0);
   $3=$238;
   label = 2; break;
  case 40: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL26icvResize_Bilinear_32f_CnRPKfi6CvSizePfiS1_iiPK13CvResizeAlphaS5_S2_S2_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xmax, $xofs, $yofs, $buf0, $buf1) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $10;
   var $prev_sy0;
   var $prev_sy1;
   var $k;
   var $dx;
   var $dy;
   var $fy;
   var $swap_t;
   var $sy0;
   var $sy1;
   var $_buf;
   var $_src;
   var $sy;
   var $sx;
   var $fx;
   var $t;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xmax;
   $7=$xofs;
   $8=$yofs;
   $9=$buf0;
   $10=$buf1;
   $prev_sy0=-1;
   $prev_sy1=-1;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(4))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(4))&-1);
   $4=$14;
   var $15=$5;
   var $16=(($dsize)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(Math.imul($17,$15)|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=$5;
   var $20=$6;
   var $21=(Math.imul($20,$19)|0);
   $6=$21;
   $dy=0;
   label = 2; break;
  case 2: 
   var $23=$dy;
   var $24=(($dsize+4)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0)) < (($25)|(0));
   if ($26) { label = 3; break; } else { label = 40; break; }
  case 3: 
   var $28=$dy;
   var $29=$8;
   var $30=(($29+($28<<3))|0);
   var $31=(($30+4)|0);
   var $32=$31;
   var $33=HEAPF32[(($32)>>2)];
   $fy=$33;
   var $34=$dy;
   var $35=$8;
   var $36=(($35+($34<<3))|0);
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   $sy0=$38;
   var $39=$sy0;
   var $40=$fy;
   var $41=$40 > 0;
   if ($41) { label = 4; break; } else { var $49 = 0;label = 5; break; }
  case 4: 
   var $43=$sy0;
   var $44=(($ssize+4)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=((($45)-(1))|0);
   var $47=(($43)|(0)) < (($46)|(0));
   var $49 = $47;label = 5; break;
  case 5: 
   var $49;
   var $50=(($49)&(1));
   var $51=((($39)+($50))|0);
   $sy1=$51;
   var $52=$sy0;
   var $53=$prev_sy0;
   var $54=(($52)|(0))==(($53)|(0));
   if ($54) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $56=$sy1;
   var $57=$prev_sy1;
   var $58=(($56)|(0))==(($57)|(0));
   if ($58) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $k=2;
   label = 12; break;
  case 8: 
   var $61=$sy0;
   var $62=$prev_sy1;
   var $63=(($61)|(0))==(($62)|(0));
   if ($63) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $65=$9;
   $swap_t=$65;
   var $66=$10;
   $9=$66;
   var $67=$swap_t;
   $10=$67;
   $k=1;
   label = 11; break;
  case 10: 
   $k=0;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $72=$k;
   var $73=(($72)|(0)) < 2;
   if ($73) { label = 14; break; } else { label = 27; break; }
  case 14: 
   var $75=$k;
   var $76=(($75)|(0))==0;
   var $77=$9;
   var $78=$10;
   var $79=$76 ? $77 : $78;
   $_buf=$79;
   var $80=$k;
   var $81=(($80)|(0))==0;
   var $82=$sy0;
   var $83=$sy1;
   var $84=$81 ? $82 : $83;
   $sy=$84;
   var $85=$k;
   var $86=(($85)|(0))==1;
   if ($86) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $88=$sy1;
   var $89=$sy0;
   var $90=(($88)|(0))==(($89)|(0));
   if ($90) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $92=$10;
   var $93=$92;
   var $94=$9;
   var $95=$94;
   var $96=(($dsize)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=($97<<2);
   assert($98 % 1 === 0);(_memcpy($93, $95, $98)|0);
   label = 26; break;
  case 17: 
   var $100=$1;
   var $101=$sy;
   var $102=$2;
   var $103=(Math.imul($101,$102)|0);
   var $104=(($100+($103<<2))|0);
   $_src=$104;
   $dx=0;
   label = 18; break;
  case 18: 
   var $106=$dx;
   var $107=$6;
   var $108=(($106)|(0)) < (($107)|(0));
   if ($108) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $110=$dx;
   var $111=$7;
   var $112=(($111+($110<<3))|0);
   var $113=(($112)|0);
   var $114=HEAP32[(($113)>>2)];
   $sx=$114;
   var $115=$dx;
   var $116=$7;
   var $117=(($116+($115<<3))|0);
   var $118=(($117+4)|0);
   var $119=$118;
   var $120=HEAPF32[(($119)>>2)];
   $fx=$120;
   var $121=$sx;
   var $122=$_src;
   var $123=(($122+($121<<2))|0);
   var $124=HEAPF32[(($123)>>2)];
   $t=$124;
   var $125=$t;
   var $126=$fx;
   var $127=$sx;
   var $128=$5;
   var $129=((($127)+($128))|0);
   var $130=$_src;
   var $131=(($130+($129<<2))|0);
   var $132=HEAPF32[(($131)>>2)];
   var $133=$t;
   var $134=($132)-($133);
   var $135=($126)*($134);
   var $136=($125)+($135);
   var $137=$dx;
   var $138=$_buf;
   var $139=(($138+($137<<2))|0);
   HEAPF32[(($139)>>2)]=$136;
   label = 20; break;
  case 20: 
   var $141=$dx;
   var $142=((($141)+(1))|0);
   $dx=$142;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $145=$dx;
   var $146=(($dsize)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=(($145)|(0)) < (($147)|(0));
   if ($148) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $150=$dx;
   var $151=$7;
   var $152=(($151+($150<<3))|0);
   var $153=(($152)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=$_src;
   var $156=(($155+($154<<2))|0);
   var $157=HEAPF32[(($156)>>2)];
   var $158=$dx;
   var $159=$_buf;
   var $160=(($159+($158<<2))|0);
   HEAPF32[(($160)>>2)]=$157;
   label = 24; break;
  case 24: 
   var $162=$dx;
   var $163=((($162)+(1))|0);
   $dx=$163;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $166=$k;
   var $167=((($166)+(1))|0);
   $k=$167;
   label = 13; break;
  case 27: 
   var $169=$sy0;
   $prev_sy0=$169;
   var $170=$sy1;
   $prev_sy1=$170;
   var $171=$sy0;
   var $172=$sy1;
   var $173=(($171)|(0))==(($172)|(0));
   if ($173) { label = 28; break; } else { label = 33; break; }
  case 28: 
   $dx=0;
   label = 29; break;
  case 29: 
   var $176=$dx;
   var $177=(($dsize)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=(($176)|(0)) < (($178)|(0));
   if ($179) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $181=$dx;
   var $182=$9;
   var $183=(($182+($181<<2))|0);
   var $184=HEAPF32[(($183)>>2)];
   var $185=$dx;
   var $186=$3;
   var $187=(($186+($185<<2))|0);
   HEAPF32[(($187)>>2)]=$184;
   label = 31; break;
  case 31: 
   var $189=$dx;
   var $190=((($189)+(1))|0);
   $dx=$190;
   label = 29; break;
  case 32: 
   label = 38; break;
  case 33: 
   $dx=0;
   label = 34; break;
  case 34: 
   var $194=$dx;
   var $195=(($dsize)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($194)|(0)) < (($196)|(0));
   if ($197) { label = 35; break; } else { label = 37; break; }
  case 35: 
   var $199=$dx;
   var $200=$9;
   var $201=(($200+($199<<2))|0);
   var $202=HEAPF32[(($201)>>2)];
   var $203=$fy;
   var $204=$dx;
   var $205=$10;
   var $206=(($205+($204<<2))|0);
   var $207=HEAPF32[(($206)>>2)];
   var $208=$dx;
   var $209=$9;
   var $210=(($209+($208<<2))|0);
   var $211=HEAPF32[(($210)>>2)];
   var $212=($207)-($211);
   var $213=($203)*($212);
   var $214=($202)+($213);
   var $215=$dx;
   var $216=$3;
   var $217=(($216+($215<<2))|0);
   HEAPF32[(($217)>>2)]=$214;
   label = 36; break;
  case 36: 
   var $219=$dx;
   var $220=((($219)+(1))|0);
   $dx=$220;
   label = 34; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $224=$dy;
   var $225=((($224)+(1))|0);
   $dy=$225;
   var $226=$4;
   var $227=$3;
   var $228=(($227+($226<<2))|0);
   $3=$228;
   label = 2; break;
  case 40: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL24icvResize_Bicubic_8u_CnRPKhi6CvSizePhiS1_iiiPK13CvResizeAlphaPPf($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xmin, $xmax, $xofs, $buf) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $scale_y;
   var $dx;
   var $dy;
   var $sx;
   var $sy;
   var $sy2;
   var $ify;
   var $prev_sy2;
   var $w0;
   var $w1;
   var $w2;
   var $w3;
   var $fy;
   var $x;
   var $sum;
   var $row;
   var $row0;
   var $row1;
   var $row2;
   var $row3;
   var $k1;
   var $k;
   var $delta;
   var $_src;
   var $ifx;
   var $sx0;
   var $ifx1;
   var $sx02;
   var $ifx3;
   var $sx04;
   var $val;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xmin;
   $7=$xmax;
   $8=$xofs;
   $9=$buf;
   var $10=(($ssize+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0));
   var $13=(($dsize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0));
   var $16=($12)/($15);
   $scale_y=$16;
   $prev_sy2=-2;
   var $17=$5;
   var $18=$6;
   var $19=(Math.imul($18,$17)|0);
   $6=$19;
   var $20=$5;
   var $21=$7;
   var $22=(Math.imul($21,$20)|0);
   $7=$22;
   var $23=$5;
   var $24=(($dsize)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(Math.imul($25,$23)|0);
   HEAP32[(($24)>>2)]=$26;
   var $27=$5;
   var $28=(($ssize)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(Math.imul($29,$27)|0);
   HEAP32[(($28)>>2)]=$30;
   var $31=$2;
   var $32=(((($31)>>>(0)))&-1);
   $2=$32;
   var $33=$4;
   var $34=(((($33)>>>(0)))&-1);
   $4=$34;
   $dy=0;
   label = 2; break;
  case 2: 
   var $36=$dy;
   var $37=(($dsize+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($36)|(0)) < (($38)|(0));
   if ($39) { label = 3; break; } else { label = 59; break; }
  case 3: 
   $k=4;
   var $41=$dy;
   var $42=(($41)|(0));
   var $43=$scale_y;
   var $44=($42)*($43);
   $fy=$44;
   var $45=$fy;
   var $46=$45;
   var $47=__Z7cvFloord($46);
   $sy=$47;
   var $48=$sy;
   var $49=(($48)|(0));
   var $50=$fy;
   var $51=($50)-($49);
   $fy=$51;
   var $52=$fy;
   var $53=($52)*(1024);
   var $54=$53;
   var $55=__Z7cvRoundd($54);
   $ify=$55;
   var $56=$sy;
   var $57=((($56)+(2))|0);
   $sy2=$57;
   var $58=$sy2;
   var $59=$prev_sy2;
   var $60=(($58)|(0)) > (($59)|(0));
   if ($60) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $62=$prev_sy2;
   var $63=$sy;
   var $64=((($62)-($63))|0);
   var $65=((($64)+(2))|0);
   $delta=$65;
   $k=0;
   label = 5; break;
  case 5: 
   var $67=$k;
   var $68=$delta;
   var $69=(($67)|(0)) < (($68)|(0));
   if ($69) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $71=$k;
   var $72=$9;
   var $73=(($72+($71<<2))|0);
   var $74=HEAP32[(($73)>>2)];
   $row=$74;
   var $75=$k;
   var $76=((($75)+(4))|0);
   var $77=$delta;
   var $78=((($76)-($77))|0);
   var $79=$9;
   var $80=(($79+($78<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$k;
   var $83=$9;
   var $84=(($83+($82<<2))|0);
   HEAP32[(($84)>>2)]=$81;
   var $85=$row;
   var $86=$k;
   var $87=((($86)+(4))|0);
   var $88=$delta;
   var $89=((($87)-($88))|0);
   var $90=$9;
   var $91=(($90+($89<<2))|0);
   HEAP32[(($91)>>2)]=$85;
   label = 7; break;
  case 7: 
   var $93=$k;
   var $94=((($93)+(1))|0);
   $k=$94;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $97=$k;
   var $98=((($97)-(1))|0);
   var $99=$sy;
   var $100=((($99)+($98))|0);
   $sy=$100;
   label = 10; break;
  case 10: 
   var $102=$k;
   var $103=(($102)|(0)) < 4;
   if ($103) { label = 11; break; } else { label = 50; break; }
  case 11: 
   var $105=$1;
   var $106=$sy;
   var $107=$2;
   var $108=(Math.imul($106,$107)|0);
   var $109=(($105+$108)|0);
   $_src=$109;
   var $110=$k;
   var $111=$9;
   var $112=(($111+($110<<2))|0);
   var $113=HEAP32[(($112)>>2)];
   $row=$113;
   var $114=$sy;
   var $115=(($114)|(0)) < 0;
   if ($115) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 49; break;
  case 13: 
   var $118=$sy;
   var $119=(($ssize+4)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($118)|(0)) >= (($120)|(0));
   if ($121) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $123=$row;
   var $124=$123;
   var $125=$k;
   var $126=((($125)-(1))|0);
   var $127=$9;
   var $128=(($127+($126<<2))|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$129;
   var $131=(($dsize)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=($132<<2);
   assert($133 % 1 === 0);(_memcpy($124, $130, $133)|0);
   label = 49; break;
  case 15: 
   $dx=0;
   label = 16; break;
  case 16: 
   var $136=$dx;
   var $137=$6;
   var $138=(($136)|(0)) < (($137)|(0));
   if ($138) { label = 17; break; } else { label = 28; break; }
  case 17: 
   var $140=$dx;
   var $141=$8;
   var $142=(($141+($140<<3))|0);
   var $143=(($142+4)|0);
   var $144=$143;
   var $145=HEAP32[(($144)>>2)];
   $ifx=$145;
   var $146=$dx;
   var $147=$8;
   var $148=(($147+($146<<3))|0);
   var $149=(($148)|0);
   var $150=HEAP32[(($149)>>2)];
   $sx0=$150;
   var $151=$sx0;
   var $152=$5;
   var $153=($152<<1);
   var $154=((($151)+($153))|0);
   $sx=$154;
   label = 18; break;
  case 18: 
   var $156=$sx;
   var $157=(($ssize)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($156)|(0)) >= (($158)|(0));
   if ($159) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $161=$5;
   var $162=$sx;
   var $163=((($162)-($161))|0);
   $sx=$163;
   label = 18; break;
  case 20: 
   var $165=$sx;
   var $166=$_src;
   var $167=(($166+$165)|0);
   var $168=HEAP8[($167)];
   var $169=(($168)&(255));
   var $170=((($169)+(256))|0);
   var $171=((1152+($170<<2))|0);
   var $172=(copyTempFloat($171),HEAPF32[((tempDoublePtr)>>2)]);
   $x=$172;
   var $173=$x;
   var $174=$ifx;
   var $175=(((1024)-($174))|0);
   var $176=($175<<1);
   var $177=((($176)+(1))|0);
   var $178=((28184+($177<<2))|0);
   var $179=HEAPF32[(($178)>>2)];
   var $180=($173)*($179);
   $sum=$180;
   var $181=$sx0;
   var $182=$5;
   var $183=((($181)+($182))|0);
   $sx=$183;
   var $184=(($ssize)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($183)>>>(0)) < (($185)>>>(0));
   if ($186) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $188=$sx;
   var $189=$_src;
   var $190=(($189+$188)|0);
   var $191=HEAP8[($190)];
   var $192=(($191)&(255));
   var $193=((($192)+(256))|0);
   var $194=((1152+($193<<2))|0);
   var $195=(copyTempFloat($194),HEAPF32[((tempDoublePtr)>>2)]);
   $x=$195;
   label = 22; break;
  case 22: 
   var $197=$x;
   var $198=$ifx;
   var $199=(((1024)-($198))|0);
   var $200=($199<<1);
   var $201=((28184+($200<<2))|0);
   var $202=HEAPF32[(($201)>>2)];
   var $203=($197)*($202);
   var $204=$sum;
   var $205=($204)+($203);
   $sum=$205;
   var $206=$sx0;
   $sx=$206;
   var $207=(($ssize)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=(($206)>>>(0)) < (($208)>>>(0));
   if ($209) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $211=$sx;
   var $212=$_src;
   var $213=(($212+$211)|0);
   var $214=HEAP8[($213)];
   var $215=(($214)&(255));
   var $216=((($215)+(256))|0);
   var $217=((1152+($216<<2))|0);
   var $218=(copyTempFloat($217),HEAPF32[((tempDoublePtr)>>2)]);
   $x=$218;
   label = 24; break;
  case 24: 
   var $220=$x;
   var $221=$ifx;
   var $222=($221<<1);
   var $223=((28184+($222<<2))|0);
   var $224=HEAPF32[(($223)>>2)];
   var $225=($220)*($224);
   var $226=$sum;
   var $227=($226)+($225);
   $sum=$227;
   var $228=$sx0;
   var $229=$5;
   var $230=((($228)-($229))|0);
   $sx=$230;
   var $231=(($ssize)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($230)>>>(0)) < (($232)>>>(0));
   if ($233) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $235=$sx;
   var $236=$_src;
   var $237=(($236+$235)|0);
   var $238=HEAP8[($237)];
   var $239=(($238)&(255));
   var $240=((($239)+(256))|0);
   var $241=((1152+($240<<2))|0);
   var $242=(copyTempFloat($241),HEAPF32[((tempDoublePtr)>>2)]);
   $x=$242;
   label = 26; break;
  case 26: 
   var $244=$sum;
   var $245=$x;
   var $246=$ifx;
   var $247=($246<<1);
   var $248=((($247)+(1))|0);
   var $249=((28184+($248<<2))|0);
   var $250=HEAPF32[(($249)>>2)];
   var $251=($245)*($250);
   var $252=($244)+($251);
   var $253=$dx;
   var $254=$row;
   var $255=(($254+($253<<2))|0);
   HEAPF32[(($255)>>2)]=$252;
   label = 27; break;
  case 27: 
   var $257=$dx;
   var $258=((($257)+(1))|0);
   $dx=$258;
   label = 16; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $261=$dx;
   var $262=$7;
   var $263=(($261)|(0)) < (($262)|(0));
   if ($263) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $265=$dx;
   var $266=$8;
   var $267=(($266+($265<<3))|0);
   var $268=(($267+4)|0);
   var $269=$268;
   var $270=HEAP32[(($269)>>2)];
   $ifx1=$270;
   var $271=$dx;
   var $272=$8;
   var $273=(($272+($271<<3))|0);
   var $274=(($273)|0);
   var $275=HEAP32[(($274)>>2)];
   $sx02=$275;
   var $276=$sx02;
   var $277=$5;
   var $278=((($276)-($277))|0);
   var $279=$_src;
   var $280=(($279+$278)|0);
   var $281=HEAP8[($280)];
   var $282=(($281)&(255));
   var $283=(($282)|(0));
   var $284=$ifx1;
   var $285=($284<<1);
   var $286=((($285)+(1))|0);
   var $287=((28184+($286<<2))|0);
   var $288=HEAPF32[(($287)>>2)];
   var $289=($283)*($288);
   var $290=$sx02;
   var $291=$_src;
   var $292=(($291+$290)|0);
   var $293=HEAP8[($292)];
   var $294=(($293)&(255));
   var $295=(($294)|(0));
   var $296=$ifx1;
   var $297=($296<<1);
   var $298=((28184+($297<<2))|0);
   var $299=HEAPF32[(($298)>>2)];
   var $300=($295)*($299);
   var $301=($289)+($300);
   var $302=$sx02;
   var $303=$5;
   var $304=((($302)+($303))|0);
   var $305=$_src;
   var $306=(($305+$304)|0);
   var $307=HEAP8[($306)];
   var $308=(($307)&(255));
   var $309=(($308)|(0));
   var $310=$ifx1;
   var $311=(((1024)-($310))|0);
   var $312=($311<<1);
   var $313=((28184+($312<<2))|0);
   var $314=HEAPF32[(($313)>>2)];
   var $315=($309)*($314);
   var $316=($301)+($315);
   var $317=$sx02;
   var $318=$5;
   var $319=($318<<1);
   var $320=((($317)+($319))|0);
   var $321=$_src;
   var $322=(($321+$320)|0);
   var $323=HEAP8[($322)];
   var $324=(($323)&(255));
   var $325=(($324)|(0));
   var $326=$ifx1;
   var $327=(((1024)-($326))|0);
   var $328=($327<<1);
   var $329=((($328)+(1))|0);
   var $330=((28184+($329<<2))|0);
   var $331=HEAPF32[(($330)>>2)];
   var $332=($325)*($331);
   var $333=($316)+($332);
   var $334=$dx;
   var $335=$row;
   var $336=(($335+($334<<2))|0);
   HEAPF32[(($336)>>2)]=$333;
   label = 31; break;
  case 31: 
   var $338=$dx;
   var $339=((($338)+(1))|0);
   $dx=$339;
   label = 29; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $342=$dx;
   var $343=(($dsize)|0);
   var $344=HEAP32[(($343)>>2)];
   var $345=(($342)|(0)) < (($344)|(0));
   if ($345) { label = 34; break; } else { label = 42; break; }
  case 34: 
   var $347=$dx;
   var $348=$8;
   var $349=(($348+($347<<3))|0);
   var $350=(($349+4)|0);
   var $351=$350;
   var $352=HEAP32[(($351)>>2)];
   $ifx3=$352;
   var $353=$dx;
   var $354=$8;
   var $355=(($354+($353<<3))|0);
   var $356=(($355)|0);
   var $357=HEAP32[(($356)>>2)];
   $sx04=$357;
   var $358=$sx04;
   var $359=$5;
   var $360=((($358)-($359))|0);
   var $361=$_src;
   var $362=(($361+$360)|0);
   var $363=HEAP8[($362)];
   var $364=(($363)&(255));
   var $365=((($364)+(256))|0);
   var $366=((1152+($365<<2))|0);
   var $367=(copyTempFloat($366),HEAPF32[((tempDoublePtr)>>2)]);
   $x=$367;
   var $368=$x;
   var $369=$ifx3;
   var $370=($369<<1);
   var $371=((($370)+(1))|0);
   var $372=((28184+($371<<2))|0);
   var $373=HEAPF32[(($372)>>2)];
   var $374=($368)*($373);
   $sum=$374;
   var $375=$sx04;
   $sx=$375;
   var $376=(($ssize)|0);
   var $377=HEAP32[(($376)>>2)];
   var $378=(($375)>>>(0)) < (($377)>>>(0));
   if ($378) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $380=$sx;
   var $381=$_src;
   var $382=(($381+$380)|0);
   var $383=HEAP8[($382)];
   var $384=(($383)&(255));
   var $385=((($384)+(256))|0);
   var $386=((1152+($385<<2))|0);
   var $387=(copyTempFloat($386),HEAPF32[((tempDoublePtr)>>2)]);
   $x=$387;
   label = 36; break;
  case 36: 
   var $389=$x;
   var $390=$ifx3;
   var $391=($390<<1);
   var $392=((28184+($391<<2))|0);
   var $393=HEAPF32[(($392)>>2)];
   var $394=($389)*($393);
   var $395=$sum;
   var $396=($395)+($394);
   $sum=$396;
   var $397=$sx04;
   var $398=$5;
   var $399=((($397)+($398))|0);
   $sx=$399;
   var $400=(($ssize)|0);
   var $401=HEAP32[(($400)>>2)];
   var $402=(($399)>>>(0)) < (($401)>>>(0));
   if ($402) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $404=$sx;
   var $405=$_src;
   var $406=(($405+$404)|0);
   var $407=HEAP8[($406)];
   var $408=(($407)&(255));
   var $409=((($408)+(256))|0);
   var $410=((1152+($409<<2))|0);
   var $411=(copyTempFloat($410),HEAPF32[((tempDoublePtr)>>2)]);
   $x=$411;
   label = 38; break;
  case 38: 
   var $413=$x;
   var $414=$ifx3;
   var $415=(((1024)-($414))|0);
   var $416=($415<<1);
   var $417=((28184+($416<<2))|0);
   var $418=HEAPF32[(($417)>>2)];
   var $419=($413)*($418);
   var $420=$sum;
   var $421=($420)+($419);
   $sum=$421;
   var $422=$sx04;
   var $423=$5;
   var $424=($423<<1);
   var $425=((($422)+($424))|0);
   $sx=$425;
   var $426=(($ssize)|0);
   var $427=HEAP32[(($426)>>2)];
   var $428=(($425)>>>(0)) < (($427)>>>(0));
   if ($428) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $430=$sx;
   var $431=$_src;
   var $432=(($431+$430)|0);
   var $433=HEAP8[($432)];
   var $434=(($433)&(255));
   var $435=((($434)+(256))|0);
   var $436=((1152+($435<<2))|0);
   var $437=(copyTempFloat($436),HEAPF32[((tempDoublePtr)>>2)]);
   $x=$437;
   label = 40; break;
  case 40: 
   var $439=$sum;
   var $440=$x;
   var $441=$ifx3;
   var $442=(((1024)-($441))|0);
   var $443=($442<<1);
   var $444=((($443)+(1))|0);
   var $445=((28184+($444<<2))|0);
   var $446=HEAPF32[(($445)>>2)];
   var $447=($440)*($446);
   var $448=($439)+($447);
   var $449=$dx;
   var $450=$row;
   var $451=(($450+($449<<2))|0);
   HEAPF32[(($451)>>2)]=$448;
   label = 41; break;
  case 41: 
   var $453=$dx;
   var $454=((($453)+(1))|0);
   $dx=$454;
   label = 33; break;
  case 42: 
   var $456=$sy;
   var $457=(($456)|(0))==0;
   if ($457) { label = 43; break; } else { label = 48; break; }
  case 43: 
   $k1=0;
   label = 44; break;
  case 44: 
   var $460=$k1;
   var $461=$k;
   var $462=(($460)|(0)) < (($461)|(0));
   if ($462) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $464=$k1;
   var $465=$9;
   var $466=(($465+($464<<2))|0);
   var $467=HEAP32[(($466)>>2)];
   var $468=$467;
   var $469=$row;
   var $470=$469;
   var $471=(($dsize)|0);
   var $472=HEAP32[(($471)>>2)];
   var $473=($472<<2);
   assert($473 % 1 === 0);(_memcpy($468, $470, $473)|0);
   label = 46; break;
  case 46: 
   var $475=$k1;
   var $476=((($475)+(1))|0);
   $k1=$476;
   label = 44; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $480=$k;
   var $481=((($480)+(1))|0);
   $k=$481;
   var $482=$sy;
   var $483=((($482)+(1))|0);
   $sy=$483;
   label = 10; break;
  case 50: 
   var $485=$sy2;
   $prev_sy2=$485;
   var $486=$9;
   var $487=(($486)|0);
   var $488=HEAP32[(($487)>>2)];
   $row0=$488;
   var $489=$9;
   var $490=(($489+4)|0);
   var $491=HEAP32[(($490)>>2)];
   $row1=$491;
   var $492=$9;
   var $493=(($492+8)|0);
   var $494=HEAP32[(($493)>>2)];
   $row2=$494;
   var $495=$9;
   var $496=(($495+12)|0);
   var $497=HEAP32[(($496)>>2)];
   $row3=$497;
   var $498=$ify;
   var $499=($498<<1);
   var $500=((($499)+(1))|0);
   var $501=((28184+($500<<2))|0);
   var $502=HEAPF32[(($501)>>2)];
   $w0=$502;
   var $503=$ify;
   var $504=($503<<1);
   var $505=((28184+($504<<2))|0);
   var $506=HEAPF32[(($505)>>2)];
   $w1=$506;
   var $507=$ify;
   var $508=(((1024)-($507))|0);
   var $509=($508<<1);
   var $510=((28184+($509<<2))|0);
   var $511=HEAPF32[(($510)>>2)];
   $w2=$511;
   var $512=$ify;
   var $513=(((1024)-($512))|0);
   var $514=($513<<1);
   var $515=((($514)+(1))|0);
   var $516=((28184+($515<<2))|0);
   var $517=HEAPF32[(($516)>>2)];
   $w3=$517;
   $dx=0;
   label = 51; break;
  case 51: 
   var $519=$dx;
   var $520=(($dsize)|0);
   var $521=HEAP32[(($520)>>2)];
   var $522=(($519)|(0)) < (($521)|(0));
   if ($522) { label = 52; break; } else { label = 57; break; }
  case 52: 
   var $524=$dx;
   var $525=$row0;
   var $526=(($525+($524<<2))|0);
   var $527=HEAPF32[(($526)>>2)];
   var $528=$w0;
   var $529=($527)*($528);
   var $530=$dx;
   var $531=$row1;
   var $532=(($531+($530<<2))|0);
   var $533=HEAPF32[(($532)>>2)];
   var $534=$w1;
   var $535=($533)*($534);
   var $536=($529)+($535);
   var $537=$dx;
   var $538=$row2;
   var $539=(($538+($537<<2))|0);
   var $540=HEAPF32[(($539)>>2)];
   var $541=$w2;
   var $542=($540)*($541);
   var $543=($536)+($542);
   var $544=$dx;
   var $545=$row3;
   var $546=(($545+($544<<2))|0);
   var $547=HEAPF32[(($546)>>2)];
   var $548=$w3;
   var $549=($547)*($548);
   var $550=($543)+($549);
   var $551=$550;
   var $552=__Z7cvRoundd($551);
   $val=$552;
   var $553=$val;
   var $554=$553 & -256;
   var $555=(($554)|(0))!=0;
   if ($555) { label = 54; break; } else { label = 53; break; }
  case 53: 
   var $557=$val;
   var $563 = $557;label = 55; break;
  case 54: 
   var $559=$val;
   var $560=(($559)|(0)) > 0;
   var $561=$560 ? 255 : 0;
   var $563 = $561;label = 55; break;
  case 55: 
   var $563;
   var $564=(($563) & 255);
   var $565=$dx;
   var $566=$3;
   var $567=(($566+$565)|0);
   HEAP8[($567)]=$564;
   label = 56; break;
  case 56: 
   var $569=$dx;
   var $570=((($569)+(1))|0);
   $dx=$570;
   label = 51; break;
  case 57: 
   label = 58; break;
  case 58: 
   var $573=$dy;
   var $574=((($573)+(1))|0);
   $dy=$574;
   var $575=$4;
   var $576=$3;
   var $577=(($576+$575)|0);
   $3=$577;
   label = 2; break;
  case 59: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL25icvResize_Bicubic_16u_CnRPKti6CvSizePtiS1_iiiPK13CvResizeAlphaPPf($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xmin, $xmax, $xofs, $buf) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $scale_y;
   var $dx;
   var $dy;
   var $sx;
   var $sy;
   var $sy2;
   var $ify;
   var $prev_sy2;
   var $w0;
   var $w1;
   var $w2;
   var $w3;
   var $fy;
   var $x;
   var $sum;
   var $row;
   var $row0;
   var $row1;
   var $row2;
   var $row3;
   var $k1;
   var $k;
   var $delta;
   var $_src;
   var $ifx;
   var $sx0;
   var $ifx1;
   var $sx02;
   var $ifx3;
   var $sx04;
   var $val;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xmin;
   $7=$xmax;
   $8=$xofs;
   $9=$buf;
   var $10=(($ssize+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0));
   var $13=(($dsize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0));
   var $16=($12)/($15);
   $scale_y=$16;
   $prev_sy2=-2;
   var $17=$5;
   var $18=$6;
   var $19=(Math.imul($18,$17)|0);
   $6=$19;
   var $20=$5;
   var $21=$7;
   var $22=(Math.imul($21,$20)|0);
   $7=$22;
   var $23=$5;
   var $24=(($dsize)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(Math.imul($25,$23)|0);
   HEAP32[(($24)>>2)]=$26;
   var $27=$5;
   var $28=(($ssize)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(Math.imul($29,$27)|0);
   HEAP32[(($28)>>2)]=$30;
   var $31=$2;
   var $32=((((($31)>>>(0)))/(2))&-1);
   $2=$32;
   var $33=$4;
   var $34=((((($33)>>>(0)))/(2))&-1);
   $4=$34;
   $dy=0;
   label = 2; break;
  case 2: 
   var $36=$dy;
   var $37=(($dsize+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($36)|(0)) < (($38)|(0));
   if ($39) { label = 3; break; } else { label = 59; break; }
  case 3: 
   $k=4;
   var $41=$dy;
   var $42=(($41)|(0));
   var $43=$scale_y;
   var $44=($42)*($43);
   $fy=$44;
   var $45=$fy;
   var $46=$45;
   var $47=__Z7cvFloord($46);
   $sy=$47;
   var $48=$sy;
   var $49=(($48)|(0));
   var $50=$fy;
   var $51=($50)-($49);
   $fy=$51;
   var $52=$fy;
   var $53=($52)*(1024);
   var $54=$53;
   var $55=__Z7cvRoundd($54);
   $ify=$55;
   var $56=$sy;
   var $57=((($56)+(2))|0);
   $sy2=$57;
   var $58=$sy2;
   var $59=$prev_sy2;
   var $60=(($58)|(0)) > (($59)|(0));
   if ($60) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $62=$prev_sy2;
   var $63=$sy;
   var $64=((($62)-($63))|0);
   var $65=((($64)+(2))|0);
   $delta=$65;
   $k=0;
   label = 5; break;
  case 5: 
   var $67=$k;
   var $68=$delta;
   var $69=(($67)|(0)) < (($68)|(0));
   if ($69) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $71=$k;
   var $72=$9;
   var $73=(($72+($71<<2))|0);
   var $74=HEAP32[(($73)>>2)];
   $row=$74;
   var $75=$k;
   var $76=((($75)+(4))|0);
   var $77=$delta;
   var $78=((($76)-($77))|0);
   var $79=$9;
   var $80=(($79+($78<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$k;
   var $83=$9;
   var $84=(($83+($82<<2))|0);
   HEAP32[(($84)>>2)]=$81;
   var $85=$row;
   var $86=$k;
   var $87=((($86)+(4))|0);
   var $88=$delta;
   var $89=((($87)-($88))|0);
   var $90=$9;
   var $91=(($90+($89<<2))|0);
   HEAP32[(($91)>>2)]=$85;
   label = 7; break;
  case 7: 
   var $93=$k;
   var $94=((($93)+(1))|0);
   $k=$94;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $97=$k;
   var $98=((($97)-(1))|0);
   var $99=$sy;
   var $100=((($99)+($98))|0);
   $sy=$100;
   label = 10; break;
  case 10: 
   var $102=$k;
   var $103=(($102)|(0)) < 4;
   if ($103) { label = 11; break; } else { label = 50; break; }
  case 11: 
   var $105=$1;
   var $106=$sy;
   var $107=$2;
   var $108=(Math.imul($106,$107)|0);
   var $109=(($105+($108<<1))|0);
   $_src=$109;
   var $110=$k;
   var $111=$9;
   var $112=(($111+($110<<2))|0);
   var $113=HEAP32[(($112)>>2)];
   $row=$113;
   var $114=$sy;
   var $115=(($114)|(0)) < 0;
   if ($115) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 49; break;
  case 13: 
   var $118=$sy;
   var $119=(($ssize+4)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($118)|(0)) >= (($120)|(0));
   if ($121) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $123=$row;
   var $124=$123;
   var $125=$k;
   var $126=((($125)-(1))|0);
   var $127=$9;
   var $128=(($127+($126<<2))|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$129;
   var $131=(($dsize)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=($132<<2);
   assert($133 % 1 === 0);(_memcpy($124, $130, $133)|0);
   label = 49; break;
  case 15: 
   $dx=0;
   label = 16; break;
  case 16: 
   var $136=$dx;
   var $137=$6;
   var $138=(($136)|(0)) < (($137)|(0));
   if ($138) { label = 17; break; } else { label = 28; break; }
  case 17: 
   var $140=$dx;
   var $141=$8;
   var $142=(($141+($140<<3))|0);
   var $143=(($142+4)|0);
   var $144=$143;
   var $145=HEAP32[(($144)>>2)];
   $ifx=$145;
   var $146=$dx;
   var $147=$8;
   var $148=(($147+($146<<3))|0);
   var $149=(($148)|0);
   var $150=HEAP32[(($149)>>2)];
   $sx0=$150;
   var $151=$sx0;
   var $152=$5;
   var $153=($152<<1);
   var $154=((($151)+($153))|0);
   $sx=$154;
   label = 18; break;
  case 18: 
   var $156=$sx;
   var $157=(($ssize)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($156)|(0)) >= (($158)|(0));
   if ($159) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $161=$5;
   var $162=$sx;
   var $163=((($162)-($161))|0);
   $sx=$163;
   label = 18; break;
  case 20: 
   var $165=$sx;
   var $166=$_src;
   var $167=(($166+($165<<1))|0);
   var $168=HEAP16[(($167)>>1)];
   var $169=(($168)&(65535));
   $x=$169;
   var $170=$x;
   var $171=$ifx;
   var $172=(((1024)-($171))|0);
   var $173=($172<<1);
   var $174=((($173)+(1))|0);
   var $175=((28184+($174<<2))|0);
   var $176=HEAPF32[(($175)>>2)];
   var $177=($170)*($176);
   $sum=$177;
   var $178=$sx0;
   var $179=$5;
   var $180=((($178)+($179))|0);
   $sx=$180;
   var $181=(($ssize)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=(($180)>>>(0)) < (($182)>>>(0));
   if ($183) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $185=$sx;
   var $186=$_src;
   var $187=(($186+($185<<1))|0);
   var $188=HEAP16[(($187)>>1)];
   var $189=(($188)&(65535));
   $x=$189;
   label = 22; break;
  case 22: 
   var $191=$x;
   var $192=$ifx;
   var $193=(((1024)-($192))|0);
   var $194=($193<<1);
   var $195=((28184+($194<<2))|0);
   var $196=HEAPF32[(($195)>>2)];
   var $197=($191)*($196);
   var $198=$sum;
   var $199=($198)+($197);
   $sum=$199;
   var $200=$sx0;
   $sx=$200;
   var $201=(($ssize)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=(($200)>>>(0)) < (($202)>>>(0));
   if ($203) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $205=$sx;
   var $206=$_src;
   var $207=(($206+($205<<1))|0);
   var $208=HEAP16[(($207)>>1)];
   var $209=(($208)&(65535));
   $x=$209;
   label = 24; break;
  case 24: 
   var $211=$x;
   var $212=$ifx;
   var $213=($212<<1);
   var $214=((28184+($213<<2))|0);
   var $215=HEAPF32[(($214)>>2)];
   var $216=($211)*($215);
   var $217=$sum;
   var $218=($217)+($216);
   $sum=$218;
   var $219=$sx0;
   var $220=$5;
   var $221=((($219)-($220))|0);
   $sx=$221;
   var $222=(($ssize)|0);
   var $223=HEAP32[(($222)>>2)];
   var $224=(($221)>>>(0)) < (($223)>>>(0));
   if ($224) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $226=$sx;
   var $227=$_src;
   var $228=(($227+($226<<1))|0);
   var $229=HEAP16[(($228)>>1)];
   var $230=(($229)&(65535));
   $x=$230;
   label = 26; break;
  case 26: 
   var $232=$sum;
   var $233=$x;
   var $234=$ifx;
   var $235=($234<<1);
   var $236=((($235)+(1))|0);
   var $237=((28184+($236<<2))|0);
   var $238=HEAPF32[(($237)>>2)];
   var $239=($233)*($238);
   var $240=($232)+($239);
   var $241=$dx;
   var $242=$row;
   var $243=(($242+($241<<2))|0);
   HEAPF32[(($243)>>2)]=$240;
   label = 27; break;
  case 27: 
   var $245=$dx;
   var $246=((($245)+(1))|0);
   $dx=$246;
   label = 16; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $249=$dx;
   var $250=$7;
   var $251=(($249)|(0)) < (($250)|(0));
   if ($251) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $253=$dx;
   var $254=$8;
   var $255=(($254+($253<<3))|0);
   var $256=(($255+4)|0);
   var $257=$256;
   var $258=HEAP32[(($257)>>2)];
   $ifx1=$258;
   var $259=$dx;
   var $260=$8;
   var $261=(($260+($259<<3))|0);
   var $262=(($261)|0);
   var $263=HEAP32[(($262)>>2)];
   $sx02=$263;
   var $264=$sx02;
   var $265=$5;
   var $266=((($264)-($265))|0);
   var $267=$_src;
   var $268=(($267+($266<<1))|0);
   var $269=HEAP16[(($268)>>1)];
   var $270=(($269)&(65535));
   var $271=(($270)|(0));
   var $272=$ifx1;
   var $273=($272<<1);
   var $274=((($273)+(1))|0);
   var $275=((28184+($274<<2))|0);
   var $276=HEAPF32[(($275)>>2)];
   var $277=($271)*($276);
   var $278=$sx02;
   var $279=$_src;
   var $280=(($279+($278<<1))|0);
   var $281=HEAP16[(($280)>>1)];
   var $282=(($281)&(65535));
   var $283=(($282)|(0));
   var $284=$ifx1;
   var $285=($284<<1);
   var $286=((28184+($285<<2))|0);
   var $287=HEAPF32[(($286)>>2)];
   var $288=($283)*($287);
   var $289=($277)+($288);
   var $290=$sx02;
   var $291=$5;
   var $292=((($290)+($291))|0);
   var $293=$_src;
   var $294=(($293+($292<<1))|0);
   var $295=HEAP16[(($294)>>1)];
   var $296=(($295)&(65535));
   var $297=(($296)|(0));
   var $298=$ifx1;
   var $299=(((1024)-($298))|0);
   var $300=($299<<1);
   var $301=((28184+($300<<2))|0);
   var $302=HEAPF32[(($301)>>2)];
   var $303=($297)*($302);
   var $304=($289)+($303);
   var $305=$sx02;
   var $306=$5;
   var $307=($306<<1);
   var $308=((($305)+($307))|0);
   var $309=$_src;
   var $310=(($309+($308<<1))|0);
   var $311=HEAP16[(($310)>>1)];
   var $312=(($311)&(65535));
   var $313=(($312)|(0));
   var $314=$ifx1;
   var $315=(((1024)-($314))|0);
   var $316=($315<<1);
   var $317=((($316)+(1))|0);
   var $318=((28184+($317<<2))|0);
   var $319=HEAPF32[(($318)>>2)];
   var $320=($313)*($319);
   var $321=($304)+($320);
   var $322=$dx;
   var $323=$row;
   var $324=(($323+($322<<2))|0);
   HEAPF32[(($324)>>2)]=$321;
   label = 31; break;
  case 31: 
   var $326=$dx;
   var $327=((($326)+(1))|0);
   $dx=$327;
   label = 29; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $330=$dx;
   var $331=(($dsize)|0);
   var $332=HEAP32[(($331)>>2)];
   var $333=(($330)|(0)) < (($332)|(0));
   if ($333) { label = 34; break; } else { label = 42; break; }
  case 34: 
   var $335=$dx;
   var $336=$8;
   var $337=(($336+($335<<3))|0);
   var $338=(($337+4)|0);
   var $339=$338;
   var $340=HEAP32[(($339)>>2)];
   $ifx3=$340;
   var $341=$dx;
   var $342=$8;
   var $343=(($342+($341<<3))|0);
   var $344=(($343)|0);
   var $345=HEAP32[(($344)>>2)];
   $sx04=$345;
   var $346=$sx04;
   var $347=$5;
   var $348=((($346)-($347))|0);
   var $349=$_src;
   var $350=(($349+($348<<1))|0);
   var $351=HEAP16[(($350)>>1)];
   var $352=(($351)&(65535));
   $x=$352;
   var $353=$x;
   var $354=$ifx3;
   var $355=($354<<1);
   var $356=((($355)+(1))|0);
   var $357=((28184+($356<<2))|0);
   var $358=HEAPF32[(($357)>>2)];
   var $359=($353)*($358);
   $sum=$359;
   var $360=$sx04;
   $sx=$360;
   var $361=(($ssize)|0);
   var $362=HEAP32[(($361)>>2)];
   var $363=(($360)>>>(0)) < (($362)>>>(0));
   if ($363) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $365=$sx;
   var $366=$_src;
   var $367=(($366+($365<<1))|0);
   var $368=HEAP16[(($367)>>1)];
   var $369=(($368)&(65535));
   $x=$369;
   label = 36; break;
  case 36: 
   var $371=$x;
   var $372=$ifx3;
   var $373=($372<<1);
   var $374=((28184+($373<<2))|0);
   var $375=HEAPF32[(($374)>>2)];
   var $376=($371)*($375);
   var $377=$sum;
   var $378=($377)+($376);
   $sum=$378;
   var $379=$sx04;
   var $380=$5;
   var $381=((($379)+($380))|0);
   $sx=$381;
   var $382=(($ssize)|0);
   var $383=HEAP32[(($382)>>2)];
   var $384=(($381)>>>(0)) < (($383)>>>(0));
   if ($384) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $386=$sx;
   var $387=$_src;
   var $388=(($387+($386<<1))|0);
   var $389=HEAP16[(($388)>>1)];
   var $390=(($389)&(65535));
   $x=$390;
   label = 38; break;
  case 38: 
   var $392=$x;
   var $393=$ifx3;
   var $394=(((1024)-($393))|0);
   var $395=($394<<1);
   var $396=((28184+($395<<2))|0);
   var $397=HEAPF32[(($396)>>2)];
   var $398=($392)*($397);
   var $399=$sum;
   var $400=($399)+($398);
   $sum=$400;
   var $401=$sx04;
   var $402=$5;
   var $403=($402<<1);
   var $404=((($401)+($403))|0);
   $sx=$404;
   var $405=(($ssize)|0);
   var $406=HEAP32[(($405)>>2)];
   var $407=(($404)>>>(0)) < (($406)>>>(0));
   if ($407) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $409=$sx;
   var $410=$_src;
   var $411=(($410+($409<<1))|0);
   var $412=HEAP16[(($411)>>1)];
   var $413=(($412)&(65535));
   $x=$413;
   label = 40; break;
  case 40: 
   var $415=$sum;
   var $416=$x;
   var $417=$ifx3;
   var $418=(((1024)-($417))|0);
   var $419=($418<<1);
   var $420=((($419)+(1))|0);
   var $421=((28184+($420<<2))|0);
   var $422=HEAPF32[(($421)>>2)];
   var $423=($416)*($422);
   var $424=($415)+($423);
   var $425=$dx;
   var $426=$row;
   var $427=(($426+($425<<2))|0);
   HEAPF32[(($427)>>2)]=$424;
   label = 41; break;
  case 41: 
   var $429=$dx;
   var $430=((($429)+(1))|0);
   $dx=$430;
   label = 33; break;
  case 42: 
   var $432=$sy;
   var $433=(($432)|(0))==0;
   if ($433) { label = 43; break; } else { label = 48; break; }
  case 43: 
   $k1=0;
   label = 44; break;
  case 44: 
   var $436=$k1;
   var $437=$k;
   var $438=(($436)|(0)) < (($437)|(0));
   if ($438) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $440=$k1;
   var $441=$9;
   var $442=(($441+($440<<2))|0);
   var $443=HEAP32[(($442)>>2)];
   var $444=$443;
   var $445=$row;
   var $446=$445;
   var $447=(($dsize)|0);
   var $448=HEAP32[(($447)>>2)];
   var $449=($448<<2);
   assert($449 % 1 === 0);(_memcpy($444, $446, $449)|0);
   label = 46; break;
  case 46: 
   var $451=$k1;
   var $452=((($451)+(1))|0);
   $k1=$452;
   label = 44; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $456=$k;
   var $457=((($456)+(1))|0);
   $k=$457;
   var $458=$sy;
   var $459=((($458)+(1))|0);
   $sy=$459;
   label = 10; break;
  case 50: 
   var $461=$sy2;
   $prev_sy2=$461;
   var $462=$9;
   var $463=(($462)|0);
   var $464=HEAP32[(($463)>>2)];
   $row0=$464;
   var $465=$9;
   var $466=(($465+4)|0);
   var $467=HEAP32[(($466)>>2)];
   $row1=$467;
   var $468=$9;
   var $469=(($468+8)|0);
   var $470=HEAP32[(($469)>>2)];
   $row2=$470;
   var $471=$9;
   var $472=(($471+12)|0);
   var $473=HEAP32[(($472)>>2)];
   $row3=$473;
   var $474=$ify;
   var $475=($474<<1);
   var $476=((($475)+(1))|0);
   var $477=((28184+($476<<2))|0);
   var $478=HEAPF32[(($477)>>2)];
   $w0=$478;
   var $479=$ify;
   var $480=($479<<1);
   var $481=((28184+($480<<2))|0);
   var $482=HEAPF32[(($481)>>2)];
   $w1=$482;
   var $483=$ify;
   var $484=(((1024)-($483))|0);
   var $485=($484<<1);
   var $486=((28184+($485<<2))|0);
   var $487=HEAPF32[(($486)>>2)];
   $w2=$487;
   var $488=$ify;
   var $489=(((1024)-($488))|0);
   var $490=($489<<1);
   var $491=((($490)+(1))|0);
   var $492=((28184+($491<<2))|0);
   var $493=HEAPF32[(($492)>>2)];
   $w3=$493;
   $dx=0;
   label = 51; break;
  case 51: 
   var $495=$dx;
   var $496=(($dsize)|0);
   var $497=HEAP32[(($496)>>2)];
   var $498=(($495)|(0)) < (($497)|(0));
   if ($498) { label = 52; break; } else { label = 57; break; }
  case 52: 
   var $500=$dx;
   var $501=$row0;
   var $502=(($501+($500<<2))|0);
   var $503=HEAPF32[(($502)>>2)];
   var $504=$w0;
   var $505=($503)*($504);
   var $506=$dx;
   var $507=$row1;
   var $508=(($507+($506<<2))|0);
   var $509=HEAPF32[(($508)>>2)];
   var $510=$w1;
   var $511=($509)*($510);
   var $512=($505)+($511);
   var $513=$dx;
   var $514=$row2;
   var $515=(($514+($513<<2))|0);
   var $516=HEAPF32[(($515)>>2)];
   var $517=$w2;
   var $518=($516)*($517);
   var $519=($512)+($518);
   var $520=$dx;
   var $521=$row3;
   var $522=(($521+($520<<2))|0);
   var $523=HEAPF32[(($522)>>2)];
   var $524=$w3;
   var $525=($523)*($524);
   var $526=($519)+($525);
   var $527=$526;
   var $528=__Z7cvRoundd($527);
   $val=$528;
   var $529=$val;
   var $530=$529 & -65536;
   var $531=(($530)|(0))!=0;
   if ($531) { label = 54; break; } else { label = 53; break; }
  case 53: 
   var $533=$val;
   var $539 = $533;label = 55; break;
  case 54: 
   var $535=$val;
   var $536=(($535)|(0)) > 0;
   var $537=$536 ? 65535 : 0;
   var $539 = $537;label = 55; break;
  case 55: 
   var $539;
   var $540=(($539) & 65535);
   var $541=$dx;
   var $542=$3;
   var $543=(($542+($541<<1))|0);
   HEAP16[(($543)>>1)]=$540;
   label = 56; break;
  case 56: 
   var $545=$dx;
   var $546=((($545)+(1))|0);
   $dx=$546;
   label = 51; break;
  case 57: 
   label = 58; break;
  case 58: 
   var $549=$dy;
   var $550=((($549)+(1))|0);
   $dy=$550;
   var $551=$4;
   var $552=$3;
   var $553=(($552+($551<<1))|0);
   $3=$553;
   label = 2; break;
  case 59: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL25icvResize_Bicubic_32f_CnRPKfi6CvSizePfiS1_iiiPK13CvResizeAlphaPS2_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xmin, $xmax, $xofs, $buf) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $scale_y;
   var $dx;
   var $dy;
   var $sx;
   var $sy;
   var $sy2;
   var $ify;
   var $prev_sy2;
   var $w0;
   var $w1;
   var $w2;
   var $w3;
   var $fy;
   var $x;
   var $sum;
   var $row;
   var $row0;
   var $row1;
   var $row2;
   var $row3;
   var $k1;
   var $k;
   var $delta;
   var $_src;
   var $ifx;
   var $sx0;
   var $ifx1;
   var $sx02;
   var $ifx3;
   var $sx04;
   var $val;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xmin;
   $7=$xmax;
   $8=$xofs;
   $9=$buf;
   var $10=(($ssize+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0));
   var $13=(($dsize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0));
   var $16=($12)/($15);
   $scale_y=$16;
   $prev_sy2=-2;
   var $17=$5;
   var $18=$6;
   var $19=(Math.imul($18,$17)|0);
   $6=$19;
   var $20=$5;
   var $21=$7;
   var $22=(Math.imul($21,$20)|0);
   $7=$22;
   var $23=$5;
   var $24=(($dsize)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(Math.imul($25,$23)|0);
   HEAP32[(($24)>>2)]=$26;
   var $27=$5;
   var $28=(($ssize)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(Math.imul($29,$27)|0);
   HEAP32[(($28)>>2)]=$30;
   var $31=$2;
   var $32=((((($31)>>>(0)))/(4))&-1);
   $2=$32;
   var $33=$4;
   var $34=((((($33)>>>(0)))/(4))&-1);
   $4=$34;
   $dy=0;
   label = 2; break;
  case 2: 
   var $36=$dy;
   var $37=(($dsize+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($36)|(0)) < (($38)|(0));
   if ($39) { label = 3; break; } else { label = 56; break; }
  case 3: 
   $k=4;
   var $41=$dy;
   var $42=(($41)|(0));
   var $43=$scale_y;
   var $44=($42)*($43);
   $fy=$44;
   var $45=$fy;
   var $46=$45;
   var $47=__Z7cvFloord($46);
   $sy=$47;
   var $48=$sy;
   var $49=(($48)|(0));
   var $50=$fy;
   var $51=($50)-($49);
   $fy=$51;
   var $52=$fy;
   var $53=($52)*(1024);
   var $54=$53;
   var $55=__Z7cvRoundd($54);
   $ify=$55;
   var $56=$sy;
   var $57=((($56)+(2))|0);
   $sy2=$57;
   var $58=$sy2;
   var $59=$prev_sy2;
   var $60=(($58)|(0)) > (($59)|(0));
   if ($60) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $62=$prev_sy2;
   var $63=$sy;
   var $64=((($62)-($63))|0);
   var $65=((($64)+(2))|0);
   $delta=$65;
   $k=0;
   label = 5; break;
  case 5: 
   var $67=$k;
   var $68=$delta;
   var $69=(($67)|(0)) < (($68)|(0));
   if ($69) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $71=$k;
   var $72=$9;
   var $73=(($72+($71<<2))|0);
   var $74=HEAP32[(($73)>>2)];
   $row=$74;
   var $75=$k;
   var $76=((($75)+(4))|0);
   var $77=$delta;
   var $78=((($76)-($77))|0);
   var $79=$9;
   var $80=(($79+($78<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$k;
   var $83=$9;
   var $84=(($83+($82<<2))|0);
   HEAP32[(($84)>>2)]=$81;
   var $85=$row;
   var $86=$k;
   var $87=((($86)+(4))|0);
   var $88=$delta;
   var $89=((($87)-($88))|0);
   var $90=$9;
   var $91=(($90+($89<<2))|0);
   HEAP32[(($91)>>2)]=$85;
   label = 7; break;
  case 7: 
   var $93=$k;
   var $94=((($93)+(1))|0);
   $k=$94;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $97=$k;
   var $98=((($97)-(1))|0);
   var $99=$sy;
   var $100=((($99)+($98))|0);
   $sy=$100;
   label = 10; break;
  case 10: 
   var $102=$k;
   var $103=(($102)|(0)) < 4;
   if ($103) { label = 11; break; } else { label = 50; break; }
  case 11: 
   var $105=$1;
   var $106=$sy;
   var $107=$2;
   var $108=(Math.imul($106,$107)|0);
   var $109=(($105+($108<<2))|0);
   $_src=$109;
   var $110=$k;
   var $111=$9;
   var $112=(($111+($110<<2))|0);
   var $113=HEAP32[(($112)>>2)];
   $row=$113;
   var $114=$sy;
   var $115=(($114)|(0)) < 0;
   if ($115) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 49; break;
  case 13: 
   var $118=$sy;
   var $119=(($ssize+4)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($118)|(0)) >= (($120)|(0));
   if ($121) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $123=$row;
   var $124=$123;
   var $125=$k;
   var $126=((($125)-(1))|0);
   var $127=$9;
   var $128=(($127+($126<<2))|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$129;
   var $131=(($dsize)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=($132<<2);
   assert($133 % 1 === 0);(_memcpy($124, $130, $133)|0);
   label = 49; break;
  case 15: 
   $dx=0;
   label = 16; break;
  case 16: 
   var $136=$dx;
   var $137=$6;
   var $138=(($136)|(0)) < (($137)|(0));
   if ($138) { label = 17; break; } else { label = 28; break; }
  case 17: 
   var $140=$dx;
   var $141=$8;
   var $142=(($141+($140<<3))|0);
   var $143=(($142+4)|0);
   var $144=$143;
   var $145=HEAP32[(($144)>>2)];
   $ifx=$145;
   var $146=$dx;
   var $147=$8;
   var $148=(($147+($146<<3))|0);
   var $149=(($148)|0);
   var $150=HEAP32[(($149)>>2)];
   $sx0=$150;
   var $151=$sx0;
   var $152=$5;
   var $153=($152<<1);
   var $154=((($151)+($153))|0);
   $sx=$154;
   label = 18; break;
  case 18: 
   var $156=$sx;
   var $157=(($ssize)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($156)|(0)) >= (($158)|(0));
   if ($159) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $161=$5;
   var $162=$sx;
   var $163=((($162)-($161))|0);
   $sx=$163;
   label = 18; break;
  case 20: 
   var $165=$sx;
   var $166=$_src;
   var $167=(($166+($165<<2))|0);
   var $168=HEAPF32[(($167)>>2)];
   $x=$168;
   var $169=$x;
   var $170=$ifx;
   var $171=(((1024)-($170))|0);
   var $172=($171<<1);
   var $173=((($172)+(1))|0);
   var $174=((28184+($173<<2))|0);
   var $175=HEAPF32[(($174)>>2)];
   var $176=($169)*($175);
   $sum=$176;
   var $177=$sx0;
   var $178=$5;
   var $179=((($177)+($178))|0);
   $sx=$179;
   var $180=(($ssize)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179)>>>(0)) < (($181)>>>(0));
   if ($182) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $184=$sx;
   var $185=$_src;
   var $186=(($185+($184<<2))|0);
   var $187=HEAPF32[(($186)>>2)];
   $x=$187;
   label = 22; break;
  case 22: 
   var $189=$x;
   var $190=$ifx;
   var $191=(((1024)-($190))|0);
   var $192=($191<<1);
   var $193=((28184+($192<<2))|0);
   var $194=HEAPF32[(($193)>>2)];
   var $195=($189)*($194);
   var $196=$sum;
   var $197=($196)+($195);
   $sum=$197;
   var $198=$sx0;
   $sx=$198;
   var $199=(($ssize)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($198)>>>(0)) < (($200)>>>(0));
   if ($201) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $203=$sx;
   var $204=$_src;
   var $205=(($204+($203<<2))|0);
   var $206=HEAPF32[(($205)>>2)];
   $x=$206;
   label = 24; break;
  case 24: 
   var $208=$x;
   var $209=$ifx;
   var $210=($209<<1);
   var $211=((28184+($210<<2))|0);
   var $212=HEAPF32[(($211)>>2)];
   var $213=($208)*($212);
   var $214=$sum;
   var $215=($214)+($213);
   $sum=$215;
   var $216=$sx0;
   var $217=$5;
   var $218=((($216)-($217))|0);
   $sx=$218;
   var $219=(($ssize)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=(($218)>>>(0)) < (($220)>>>(0));
   if ($221) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $223=$sx;
   var $224=$_src;
   var $225=(($224+($223<<2))|0);
   var $226=HEAPF32[(($225)>>2)];
   $x=$226;
   label = 26; break;
  case 26: 
   var $228=$sum;
   var $229=$x;
   var $230=$ifx;
   var $231=($230<<1);
   var $232=((($231)+(1))|0);
   var $233=((28184+($232<<2))|0);
   var $234=HEAPF32[(($233)>>2)];
   var $235=($229)*($234);
   var $236=($228)+($235);
   var $237=$dx;
   var $238=$row;
   var $239=(($238+($237<<2))|0);
   HEAPF32[(($239)>>2)]=$236;
   label = 27; break;
  case 27: 
   var $241=$dx;
   var $242=((($241)+(1))|0);
   $dx=$242;
   label = 16; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $245=$dx;
   var $246=$7;
   var $247=(($245)|(0)) < (($246)|(0));
   if ($247) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $249=$dx;
   var $250=$8;
   var $251=(($250+($249<<3))|0);
   var $252=(($251+4)|0);
   var $253=$252;
   var $254=HEAP32[(($253)>>2)];
   $ifx1=$254;
   var $255=$dx;
   var $256=$8;
   var $257=(($256+($255<<3))|0);
   var $258=(($257)|0);
   var $259=HEAP32[(($258)>>2)];
   $sx02=$259;
   var $260=$sx02;
   var $261=$5;
   var $262=((($260)-($261))|0);
   var $263=$_src;
   var $264=(($263+($262<<2))|0);
   var $265=HEAPF32[(($264)>>2)];
   var $266=$ifx1;
   var $267=($266<<1);
   var $268=((($267)+(1))|0);
   var $269=((28184+($268<<2))|0);
   var $270=HEAPF32[(($269)>>2)];
   var $271=($265)*($270);
   var $272=$sx02;
   var $273=$_src;
   var $274=(($273+($272<<2))|0);
   var $275=HEAPF32[(($274)>>2)];
   var $276=$ifx1;
   var $277=($276<<1);
   var $278=((28184+($277<<2))|0);
   var $279=HEAPF32[(($278)>>2)];
   var $280=($275)*($279);
   var $281=($271)+($280);
   var $282=$sx02;
   var $283=$5;
   var $284=((($282)+($283))|0);
   var $285=$_src;
   var $286=(($285+($284<<2))|0);
   var $287=HEAPF32[(($286)>>2)];
   var $288=$ifx1;
   var $289=(((1024)-($288))|0);
   var $290=($289<<1);
   var $291=((28184+($290<<2))|0);
   var $292=HEAPF32[(($291)>>2)];
   var $293=($287)*($292);
   var $294=($281)+($293);
   var $295=$sx02;
   var $296=$5;
   var $297=($296<<1);
   var $298=((($295)+($297))|0);
   var $299=$_src;
   var $300=(($299+($298<<2))|0);
   var $301=HEAPF32[(($300)>>2)];
   var $302=$ifx1;
   var $303=(((1024)-($302))|0);
   var $304=($303<<1);
   var $305=((($304)+(1))|0);
   var $306=((28184+($305<<2))|0);
   var $307=HEAPF32[(($306)>>2)];
   var $308=($301)*($307);
   var $309=($294)+($308);
   var $310=$dx;
   var $311=$row;
   var $312=(($311+($310<<2))|0);
   HEAPF32[(($312)>>2)]=$309;
   label = 31; break;
  case 31: 
   var $314=$dx;
   var $315=((($314)+(1))|0);
   $dx=$315;
   label = 29; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $318=$dx;
   var $319=(($dsize)|0);
   var $320=HEAP32[(($319)>>2)];
   var $321=(($318)|(0)) < (($320)|(0));
   if ($321) { label = 34; break; } else { label = 42; break; }
  case 34: 
   var $323=$dx;
   var $324=$8;
   var $325=(($324+($323<<3))|0);
   var $326=(($325+4)|0);
   var $327=$326;
   var $328=HEAP32[(($327)>>2)];
   $ifx3=$328;
   var $329=$dx;
   var $330=$8;
   var $331=(($330+($329<<3))|0);
   var $332=(($331)|0);
   var $333=HEAP32[(($332)>>2)];
   $sx04=$333;
   var $334=$sx04;
   var $335=$5;
   var $336=((($334)-($335))|0);
   var $337=$_src;
   var $338=(($337+($336<<2))|0);
   var $339=HEAPF32[(($338)>>2)];
   $x=$339;
   var $340=$x;
   var $341=$ifx3;
   var $342=($341<<1);
   var $343=((($342)+(1))|0);
   var $344=((28184+($343<<2))|0);
   var $345=HEAPF32[(($344)>>2)];
   var $346=($340)*($345);
   $sum=$346;
   var $347=$sx04;
   $sx=$347;
   var $348=(($ssize)|0);
   var $349=HEAP32[(($348)>>2)];
   var $350=(($347)>>>(0)) < (($349)>>>(0));
   if ($350) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $352=$sx;
   var $353=$_src;
   var $354=(($353+($352<<2))|0);
   var $355=HEAPF32[(($354)>>2)];
   $x=$355;
   label = 36; break;
  case 36: 
   var $357=$x;
   var $358=$ifx3;
   var $359=($358<<1);
   var $360=((28184+($359<<2))|0);
   var $361=HEAPF32[(($360)>>2)];
   var $362=($357)*($361);
   var $363=$sum;
   var $364=($363)+($362);
   $sum=$364;
   var $365=$sx04;
   var $366=$5;
   var $367=((($365)+($366))|0);
   $sx=$367;
   var $368=(($ssize)|0);
   var $369=HEAP32[(($368)>>2)];
   var $370=(($367)>>>(0)) < (($369)>>>(0));
   if ($370) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $372=$sx;
   var $373=$_src;
   var $374=(($373+($372<<2))|0);
   var $375=HEAPF32[(($374)>>2)];
   $x=$375;
   label = 38; break;
  case 38: 
   var $377=$x;
   var $378=$ifx3;
   var $379=(((1024)-($378))|0);
   var $380=($379<<1);
   var $381=((28184+($380<<2))|0);
   var $382=HEAPF32[(($381)>>2)];
   var $383=($377)*($382);
   var $384=$sum;
   var $385=($384)+($383);
   $sum=$385;
   var $386=$sx04;
   var $387=$5;
   var $388=($387<<1);
   var $389=((($386)+($388))|0);
   $sx=$389;
   var $390=(($ssize)|0);
   var $391=HEAP32[(($390)>>2)];
   var $392=(($389)>>>(0)) < (($391)>>>(0));
   if ($392) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $394=$sx;
   var $395=$_src;
   var $396=(($395+($394<<2))|0);
   var $397=HEAPF32[(($396)>>2)];
   $x=$397;
   label = 40; break;
  case 40: 
   var $399=$sum;
   var $400=$x;
   var $401=$ifx3;
   var $402=(((1024)-($401))|0);
   var $403=($402<<1);
   var $404=((($403)+(1))|0);
   var $405=((28184+($404<<2))|0);
   var $406=HEAPF32[(($405)>>2)];
   var $407=($400)*($406);
   var $408=($399)+($407);
   var $409=$dx;
   var $410=$row;
   var $411=(($410+($409<<2))|0);
   HEAPF32[(($411)>>2)]=$408;
   label = 41; break;
  case 41: 
   var $413=$dx;
   var $414=((($413)+(1))|0);
   $dx=$414;
   label = 33; break;
  case 42: 
   var $416=$sy;
   var $417=(($416)|(0))==0;
   if ($417) { label = 43; break; } else { label = 48; break; }
  case 43: 
   $k1=0;
   label = 44; break;
  case 44: 
   var $420=$k1;
   var $421=$k;
   var $422=(($420)|(0)) < (($421)|(0));
   if ($422) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $424=$k1;
   var $425=$9;
   var $426=(($425+($424<<2))|0);
   var $427=HEAP32[(($426)>>2)];
   var $428=$427;
   var $429=$row;
   var $430=$429;
   var $431=(($dsize)|0);
   var $432=HEAP32[(($431)>>2)];
   var $433=($432<<2);
   assert($433 % 1 === 0);(_memcpy($428, $430, $433)|0);
   label = 46; break;
  case 46: 
   var $435=$k1;
   var $436=((($435)+(1))|0);
   $k1=$436;
   label = 44; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $440=$k;
   var $441=((($440)+(1))|0);
   $k=$441;
   var $442=$sy;
   var $443=((($442)+(1))|0);
   $sy=$443;
   label = 10; break;
  case 50: 
   var $445=$sy2;
   $prev_sy2=$445;
   var $446=$9;
   var $447=(($446)|0);
   var $448=HEAP32[(($447)>>2)];
   $row0=$448;
   var $449=$9;
   var $450=(($449+4)|0);
   var $451=HEAP32[(($450)>>2)];
   $row1=$451;
   var $452=$9;
   var $453=(($452+8)|0);
   var $454=HEAP32[(($453)>>2)];
   $row2=$454;
   var $455=$9;
   var $456=(($455+12)|0);
   var $457=HEAP32[(($456)>>2)];
   $row3=$457;
   var $458=$ify;
   var $459=($458<<1);
   var $460=((($459)+(1))|0);
   var $461=((28184+($460<<2))|0);
   var $462=HEAPF32[(($461)>>2)];
   $w0=$462;
   var $463=$ify;
   var $464=($463<<1);
   var $465=((28184+($464<<2))|0);
   var $466=HEAPF32[(($465)>>2)];
   $w1=$466;
   var $467=$ify;
   var $468=(((1024)-($467))|0);
   var $469=($468<<1);
   var $470=((28184+($469<<2))|0);
   var $471=HEAPF32[(($470)>>2)];
   $w2=$471;
   var $472=$ify;
   var $473=(((1024)-($472))|0);
   var $474=($473<<1);
   var $475=((($474)+(1))|0);
   var $476=((28184+($475<<2))|0);
   var $477=HEAPF32[(($476)>>2)];
   $w3=$477;
   $dx=0;
   label = 51; break;
  case 51: 
   var $479=$dx;
   var $480=(($dsize)|0);
   var $481=HEAP32[(($480)>>2)];
   var $482=(($479)|(0)) < (($481)|(0));
   if ($482) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $484=$dx;
   var $485=$row0;
   var $486=(($485+($484<<2))|0);
   var $487=HEAPF32[(($486)>>2)];
   var $488=$w0;
   var $489=($487)*($488);
   var $490=$dx;
   var $491=$row1;
   var $492=(($491+($490<<2))|0);
   var $493=HEAPF32[(($492)>>2)];
   var $494=$w1;
   var $495=($493)*($494);
   var $496=($489)+($495);
   var $497=$dx;
   var $498=$row2;
   var $499=(($498+($497<<2))|0);
   var $500=HEAPF32[(($499)>>2)];
   var $501=$w2;
   var $502=($500)*($501);
   var $503=($496)+($502);
   var $504=$dx;
   var $505=$row3;
   var $506=(($505+($504<<2))|0);
   var $507=HEAPF32[(($506)>>2)];
   var $508=$w3;
   var $509=($507)*($508);
   var $510=($503)+($509);
   $val=$510;
   var $511=$val;
   var $512=$dx;
   var $513=$3;
   var $514=(($513+($512<<2))|0);
   HEAPF32[(($514)>>2)]=$511;
   label = 53; break;
  case 53: 
   var $516=$dx;
   var $517=((($516)+(1))|0);
   $dx=$517;
   label = 51; break;
  case 54: 
   label = 55; break;
  case 55: 
   var $520=$dy;
   var $521=((($520)+(1))|0);
   $dy=$521;
   var $522=$4;
   var $523=$3;
   var $524=(($523+($522<<2))|0);
   $3=$524;
   label = 2; break;
  case 56: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL25icvResize_AreaFast_8u_CnRPKhi6CvSizePhiS1_iPKiS4_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $ofs, $xofs) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $dy;
   var $dx;
   var $k;
   var $scale_x;
   var $scale_y;
   var $area;
   var $scale;
   var $_src;
   var $sum;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$ofs;
   $7=$xofs;
   $k=0;
   var $8=(($ssize)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($dsize)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((((($9)|(0)))/((($11)|(0))))&-1);
   $scale_x=$12;
   var $13=(($ssize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($dsize+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=((((($14)|(0)))/((($16)|(0))))&-1);
   $scale_y=$17;
   var $18=$scale_x;
   var $19=$scale_y;
   var $20=(Math.imul($18,$19)|0);
   $area=$20;
   var $21=$scale_x;
   var $22=$scale_y;
   var $23=(Math.imul($21,$22)|0);
   var $24=(($23)|(0));
   var $25=(1)/($24);
   $scale=$25;
   var $26=$2;
   var $27=(((($26)>>>(0)))&-1);
   $2=$27;
   var $28=$4;
   var $29=(((($28)>>>(0)))&-1);
   $4=$29;
   var $30=$5;
   var $31=(($dsize)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(Math.imul($32,$30)|0);
   HEAP32[(($31)>>2)]=$33;
   $dy=0;
   label = 2; break;
  case 2: 
   var $35=$dy;
   var $36=(($dsize+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($35)|(0)) < (($37)|(0));
   if ($38) { label = 3; break; } else { label = 17; break; }
  case 3: 
   $dx=0;
   label = 4; break;
  case 4: 
   var $41=$dx;
   var $42=(($dsize)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0)) < (($43)|(0));
   if ($44) { label = 5; break; } else { label = 15; break; }
  case 5: 
   var $46=$1;
   var $47=$dy;
   var $48=$scale_y;
   var $49=(Math.imul($47,$48)|0);
   var $50=$2;
   var $51=(Math.imul($49,$50)|0);
   var $52=(($46+$51)|0);
   var $53=$dx;
   var $54=$7;
   var $55=(($54+($53<<2))|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($52+$56)|0);
   $_src=$57;
   $sum=0;
   $k=0;
   label = 6; break;
  case 6: 
   var $59=$k;
   var $60=$area;
   var $61=((($60)-(4))|0);
   var $62=(($59)|(0)) <= (($61)|(0));
   if ($62) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $64=$k;
   var $65=$6;
   var $66=(($65+($64<<2))|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$_src;
   var $69=(($68+$67)|0);
   var $70=HEAP8[($69)];
   var $71=(($70)&(255));
   var $72=$k;
   var $73=((($72)+(1))|0);
   var $74=$6;
   var $75=(($74+($73<<2))|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$_src;
   var $78=(($77+$76)|0);
   var $79=HEAP8[($78)];
   var $80=(($79)&(255));
   var $81=((($71)+($80))|0);
   var $82=$k;
   var $83=((($82)+(2))|0);
   var $84=$6;
   var $85=(($84+($83<<2))|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$_src;
   var $88=(($87+$86)|0);
   var $89=HEAP8[($88)];
   var $90=(($89)&(255));
   var $91=((($81)+($90))|0);
   var $92=$k;
   var $93=((($92)+(3))|0);
   var $94=$6;
   var $95=(($94+($93<<2))|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$_src;
   var $98=(($97+$96)|0);
   var $99=HEAP8[($98)];
   var $100=(($99)&(255));
   var $101=((($91)+($100))|0);
   var $102=$sum;
   var $103=((($102)+($101))|0);
   $sum=$103;
   label = 8; break;
  case 8: 
   var $105=$k;
   var $106=((($105)+(4))|0);
   $k=$106;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $109=$k;
   var $110=$area;
   var $111=(($109)|(0)) < (($110)|(0));
   if ($111) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $113=$k;
   var $114=$6;
   var $115=(($114+($113<<2))|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=$_src;
   var $118=(($117+$116)|0);
   var $119=HEAP8[($118)];
   var $120=(($119)&(255));
   var $121=$sum;
   var $122=((($121)+($120))|0);
   $sum=$122;
   label = 12; break;
  case 12: 
   var $124=$k;
   var $125=((($124)+(1))|0);
   $k=$125;
   label = 10; break;
  case 13: 
   var $127=$sum;
   var $128=(($127)|(0));
   var $129=$scale;
   var $130=($128)*($129);
   var $131=$130;
   var $132=__Z7cvRoundd($131);
   var $133=(($132) & 255);
   var $134=$dx;
   var $135=$3;
   var $136=(($135+$134)|0);
   HEAP8[($136)]=$133;
   label = 14; break;
  case 14: 
   var $138=$dx;
   var $139=((($138)+(1))|0);
   $dx=$139;
   label = 4; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $142=$dy;
   var $143=((($142)+(1))|0);
   $dy=$143;
   var $144=$4;
   var $145=$3;
   var $146=(($145+$144)|0);
   $3=$146;
   label = 2; break;
  case 17: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL26icvResize_AreaFast_32f_CnRPKfi6CvSizePfiS1_iPKiS4_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $ofs, $xofs) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $dy;
   var $dx;
   var $k;
   var $scale_x;
   var $scale_y;
   var $area;
   var $scale;
   var $_src;
   var $sum;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$ofs;
   $7=$xofs;
   $k=0;
   var $8=(($ssize)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($dsize)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((((($9)|(0)))/((($11)|(0))))&-1);
   $scale_x=$12;
   var $13=(($ssize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($dsize+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=((((($14)|(0)))/((($16)|(0))))&-1);
   $scale_y=$17;
   var $18=$scale_x;
   var $19=$scale_y;
   var $20=(Math.imul($18,$19)|0);
   $area=$20;
   var $21=$scale_x;
   var $22=$scale_y;
   var $23=(Math.imul($21,$22)|0);
   var $24=(($23)|(0));
   var $25=(1)/($24);
   $scale=$25;
   var $26=$2;
   var $27=((((($26)>>>(0)))/(4))&-1);
   $2=$27;
   var $28=$4;
   var $29=((((($28)>>>(0)))/(4))&-1);
   $4=$29;
   var $30=$5;
   var $31=(($dsize)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(Math.imul($32,$30)|0);
   HEAP32[(($31)>>2)]=$33;
   $dy=0;
   label = 2; break;
  case 2: 
   var $35=$dy;
   var $36=(($dsize+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($35)|(0)) < (($37)|(0));
   if ($38) { label = 3; break; } else { label = 17; break; }
  case 3: 
   $dx=0;
   label = 4; break;
  case 4: 
   var $41=$dx;
   var $42=(($dsize)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0)) < (($43)|(0));
   if ($44) { label = 5; break; } else { label = 15; break; }
  case 5: 
   var $46=$1;
   var $47=$dy;
   var $48=$scale_y;
   var $49=(Math.imul($47,$48)|0);
   var $50=$2;
   var $51=(Math.imul($49,$50)|0);
   var $52=(($46+($51<<2))|0);
   var $53=$dx;
   var $54=$7;
   var $55=(($54+($53<<2))|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($52+($56<<2))|0);
   $_src=$57;
   $sum=0;
   $k=0;
   label = 6; break;
  case 6: 
   var $59=$k;
   var $60=$area;
   var $61=((($60)-(4))|0);
   var $62=(($59)|(0)) <= (($61)|(0));
   if ($62) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $64=$k;
   var $65=$6;
   var $66=(($65+($64<<2))|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$_src;
   var $69=(($68+($67<<2))|0);
   var $70=HEAPF32[(($69)>>2)];
   var $71=$k;
   var $72=((($71)+(1))|0);
   var $73=$6;
   var $74=(($73+($72<<2))|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$_src;
   var $77=(($76+($75<<2))|0);
   var $78=HEAPF32[(($77)>>2)];
   var $79=($70)+($78);
   var $80=$k;
   var $81=((($80)+(2))|0);
   var $82=$6;
   var $83=(($82+($81<<2))|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$_src;
   var $86=(($85+($84<<2))|0);
   var $87=HEAPF32[(($86)>>2)];
   var $88=($79)+($87);
   var $89=$k;
   var $90=((($89)+(3))|0);
   var $91=$6;
   var $92=(($91+($90<<2))|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$_src;
   var $95=(($94+($93<<2))|0);
   var $96=HEAPF32[(($95)>>2)];
   var $97=($88)+($96);
   var $98=$sum;
   var $99=($98)+($97);
   $sum=$99;
   label = 8; break;
  case 8: 
   var $101=$k;
   var $102=((($101)+(4))|0);
   $k=$102;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $105=$k;
   var $106=$area;
   var $107=(($105)|(0)) < (($106)|(0));
   if ($107) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $109=$k;
   var $110=$6;
   var $111=(($110+($109<<2))|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=$_src;
   var $114=(($113+($112<<2))|0);
   var $115=HEAPF32[(($114)>>2)];
   var $116=$sum;
   var $117=($116)+($115);
   $sum=$117;
   label = 12; break;
  case 12: 
   var $119=$k;
   var $120=((($119)+(1))|0);
   $k=$120;
   label = 10; break;
  case 13: 
   var $122=$sum;
   var $123=$scale;
   var $124=($122)*($123);
   var $125=$dx;
   var $126=$3;
   var $127=(($126+($125<<2))|0);
   HEAPF32[(($127)>>2)]=$124;
   label = 14; break;
  case 14: 
   var $129=$dx;
   var $130=((($129)+(1))|0);
   $dx=$130;
   label = 4; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $133=$dy;
   var $134=((($133)+(1))|0);
   $dy=$134;
   var $135=$4;
   var $136=$3;
   var $137=(($136+($135<<2))|0);
   $3=$137;
   label = 2; break;
  case 17: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL26icvResize_AreaFast_16u_CnRPKti6CvSizePtiS1_iPKiS4_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $ofs, $xofs) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $dy;
   var $dx;
   var $k;
   var $scale_x;
   var $scale_y;
   var $area;
   var $scale;
   var $_src;
   var $sum;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$ofs;
   $7=$xofs;
   $k=0;
   var $8=(($ssize)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($dsize)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((((($9)|(0)))/((($11)|(0))))&-1);
   $scale_x=$12;
   var $13=(($ssize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($dsize+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=((((($14)|(0)))/((($16)|(0))))&-1);
   $scale_y=$17;
   var $18=$scale_x;
   var $19=$scale_y;
   var $20=(Math.imul($18,$19)|0);
   $area=$20;
   var $21=$scale_x;
   var $22=$scale_y;
   var $23=(Math.imul($21,$22)|0);
   var $24=(($23)|(0));
   var $25=(1)/($24);
   $scale=$25;
   var $26=$2;
   var $27=((((($26)>>>(0)))/(2))&-1);
   $2=$27;
   var $28=$4;
   var $29=((((($28)>>>(0)))/(2))&-1);
   $4=$29;
   var $30=$5;
   var $31=(($dsize)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(Math.imul($32,$30)|0);
   HEAP32[(($31)>>2)]=$33;
   $dy=0;
   label = 2; break;
  case 2: 
   var $35=$dy;
   var $36=(($dsize+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($35)|(0)) < (($37)|(0));
   if ($38) { label = 3; break; } else { label = 17; break; }
  case 3: 
   $dx=0;
   label = 4; break;
  case 4: 
   var $41=$dx;
   var $42=(($dsize)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($41)|(0)) < (($43)|(0));
   if ($44) { label = 5; break; } else { label = 15; break; }
  case 5: 
   var $46=$1;
   var $47=$dy;
   var $48=$scale_y;
   var $49=(Math.imul($47,$48)|0);
   var $50=$2;
   var $51=(Math.imul($49,$50)|0);
   var $52=(($46+($51<<1))|0);
   var $53=$dx;
   var $54=$7;
   var $55=(($54+($53<<2))|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($52+($56<<1))|0);
   $_src=$57;
   $sum=0;
   $k=0;
   label = 6; break;
  case 6: 
   var $59=$k;
   var $60=$area;
   var $61=((($60)-(4))|0);
   var $62=(($59)|(0)) <= (($61)|(0));
   if ($62) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $64=$k;
   var $65=$6;
   var $66=(($65+($64<<2))|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$_src;
   var $69=(($68+($67<<1))|0);
   var $70=HEAP16[(($69)>>1)];
   var $71=(($70)&(65535));
   var $72=$k;
   var $73=((($72)+(1))|0);
   var $74=$6;
   var $75=(($74+($73<<2))|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$_src;
   var $78=(($77+($76<<1))|0);
   var $79=HEAP16[(($78)>>1)];
   var $80=(($79)&(65535));
   var $81=((($71)+($80))|0);
   var $82=$k;
   var $83=((($82)+(2))|0);
   var $84=$6;
   var $85=(($84+($83<<2))|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$_src;
   var $88=(($87+($86<<1))|0);
   var $89=HEAP16[(($88)>>1)];
   var $90=(($89)&(65535));
   var $91=((($81)+($90))|0);
   var $92=$k;
   var $93=((($92)+(3))|0);
   var $94=$6;
   var $95=(($94+($93<<2))|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$_src;
   var $98=(($97+($96<<1))|0);
   var $99=HEAP16[(($98)>>1)];
   var $100=(($99)&(65535));
   var $101=((($91)+($100))|0);
   var $102=$sum;
   var $103=((($102)+($101))|0);
   $sum=$103;
   label = 8; break;
  case 8: 
   var $105=$k;
   var $106=((($105)+(4))|0);
   $k=$106;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $109=$k;
   var $110=$area;
   var $111=(($109)|(0)) < (($110)|(0));
   if ($111) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $113=$k;
   var $114=$6;
   var $115=(($114+($113<<2))|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=$_src;
   var $118=(($117+($116<<1))|0);
   var $119=HEAP16[(($118)>>1)];
   var $120=(($119)&(65535));
   var $121=$sum;
   var $122=((($121)+($120))|0);
   $sum=$122;
   label = 12; break;
  case 12: 
   var $124=$k;
   var $125=((($124)+(1))|0);
   $k=$125;
   label = 10; break;
  case 13: 
   var $127=$sum;
   var $128=(($127)|(0));
   var $129=$scale;
   var $130=($128)*($129);
   var $131=$130;
   var $132=__Z7cvRoundd($131);
   var $133=(($132) & 65535);
   var $134=$dx;
   var $135=$3;
   var $136=(($135+($134<<1))|0);
   HEAP16[(($136)>>1)]=$133;
   label = 14; break;
  case 14: 
   var $138=$dx;
   var $139=((($138)+(1))|0);
   $dx=$139;
   label = 4; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $142=$dy;
   var $143=((($142)+(1))|0);
   $dy=$143;
   var $144=$4;
   var $145=$3;
   var $146=(($145+($144<<1))|0);
   $3=$146;
   label = 2; break;
  case 17: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvResize_Area_8u_CnRPKhi6CvSizePhiS1_iPK15CvDecimateAlphaiPfS6_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xofs, $xofs_count, $buf, $sum) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $k;
   var $sy;
   var $dx;
   var $cur_dy;
   var $scale_y;
   var $dxn;
   var $alpha;
   var $sxn;
   var $dxn1;
   var $alpha2;
   var $t0;
   var $t1;
   var $sxn3;
   var $dxn4;
   var $alpha5;
   var $t06;
   var $t17;
   var $t2;
   var $sxn8;
   var $dxn9;
   var $alpha10;
   var $t011;
   var $t112;
   var $beta;
   var $beta1;
   var $t013;
   var $t114;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xofs;
   $7=$xofs_count;
   $8=$buf;
   $9=$sum;
   $cur_dy=0;
   var $10=(($ssize+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0));
   var $13=(($dsize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0));
   var $16=($12)/($15);
   $scale_y=$16;
   var $17=$2;
   var $18=(((($17)>>>(0)))&-1);
   $2=$18;
   var $19=$4;
   var $20=(((($19)>>>(0)))&-1);
   $4=$20;
   var $21=$5;
   var $22=(($dsize)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(Math.imul($23,$21)|0);
   HEAP32[(($22)>>2)]=$24;
   $sy=0;
   label = 2; break;
  case 2: 
   var $26=$sy;
   var $27=(($ssize+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($26)|(0)) < (($28)|(0));
   if ($29) { label = 3; break; } else { label = 52; break; }
  case 3: 
   var $31=$5;
   var $32=(($31)|(0))==1;
   if ($32) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $k=0;
   label = 5; break;
  case 5: 
   var $35=$k;
   var $36=$7;
   var $37=(($35)|(0)) < (($36)|(0));
   if ($37) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $39=$k;
   var $40=$6;
   var $41=(($40+((($39)*(12))&-1))|0);
   var $42=(($41+4)|0);
   var $43=HEAP32[(($42)>>2)];
   $dxn=$43;
   var $44=$k;
   var $45=$6;
   var $46=(($45+((($44)*(12))&-1))|0);
   var $47=(($46+8)|0);
   var $48=HEAPF32[(($47)>>2)];
   $alpha=$48;
   var $49=$dxn;
   var $50=$8;
   var $51=(($50+($49<<2))|0);
   var $52=HEAPF32[(($51)>>2)];
   var $53=$k;
   var $54=$6;
   var $55=(($54+((($53)*(12))&-1))|0);
   var $56=(($55)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$1;
   var $59=(($58+$57)|0);
   var $60=HEAP8[($59)];
   var $61=(($60)&(255));
   var $62=((($61)+(256))|0);
   var $63=((1152+($62<<2))|0);
   var $64=(copyTempFloat($63),HEAPF32[((tempDoublePtr)>>2)]);
   var $65=$alpha;
   var $66=($64)*($65);
   var $67=($52)+($66);
   var $68=$dxn;
   var $69=$8;
   var $70=(($69+($68<<2))|0);
   HEAPF32[(($70)>>2)]=$67;
   label = 7; break;
  case 7: 
   var $72=$k;
   var $73=((($72)+(1))|0);
   $k=$73;
   label = 5; break;
  case 8: 
   label = 28; break;
  case 9: 
   var $76=$5;
   var $77=(($76)|(0))==2;
   if ($77) { label = 10; break; } else { label = 15; break; }
  case 10: 
   $k=0;
   label = 11; break;
  case 11: 
   var $80=$k;
   var $81=$7;
   var $82=(($80)|(0)) < (($81)|(0));
   if ($82) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $84=$k;
   var $85=$6;
   var $86=(($85+((($84)*(12))&-1))|0);
   var $87=(($86)|0);
   var $88=HEAP32[(($87)>>2)];
   $sxn=$88;
   var $89=$k;
   var $90=$6;
   var $91=(($90+((($89)*(12))&-1))|0);
   var $92=(($91+4)|0);
   var $93=HEAP32[(($92)>>2)];
   $dxn1=$93;
   var $94=$k;
   var $95=$6;
   var $96=(($95+((($94)*(12))&-1))|0);
   var $97=(($96+8)|0);
   var $98=HEAPF32[(($97)>>2)];
   $alpha2=$98;
   var $99=$dxn1;
   var $100=$8;
   var $101=(($100+($99<<2))|0);
   var $102=HEAPF32[(($101)>>2)];
   var $103=$sxn;
   var $104=$1;
   var $105=(($104+$103)|0);
   var $106=HEAP8[($105)];
   var $107=(($106)&(255));
   var $108=((($107)+(256))|0);
   var $109=((1152+($108<<2))|0);
   var $110=(copyTempFloat($109),HEAPF32[((tempDoublePtr)>>2)]);
   var $111=$alpha2;
   var $112=($110)*($111);
   var $113=($102)+($112);
   $t0=$113;
   var $114=$dxn1;
   var $115=((($114)+(1))|0);
   var $116=$8;
   var $117=(($116+($115<<2))|0);
   var $118=HEAPF32[(($117)>>2)];
   var $119=$sxn;
   var $120=((($119)+(1))|0);
   var $121=$1;
   var $122=(($121+$120)|0);
   var $123=HEAP8[($122)];
   var $124=(($123)&(255));
   var $125=((($124)+(256))|0);
   var $126=((1152+($125<<2))|0);
   var $127=(copyTempFloat($126),HEAPF32[((tempDoublePtr)>>2)]);
   var $128=$alpha2;
   var $129=($127)*($128);
   var $130=($118)+($129);
   $t1=$130;
   var $131=$t0;
   var $132=$dxn1;
   var $133=$8;
   var $134=(($133+($132<<2))|0);
   HEAPF32[(($134)>>2)]=$131;
   var $135=$t1;
   var $136=$dxn1;
   var $137=((($136)+(1))|0);
   var $138=$8;
   var $139=(($138+($137<<2))|0);
   HEAPF32[(($139)>>2)]=$135;
   label = 13; break;
  case 13: 
   var $141=$k;
   var $142=((($141)+(1))|0);
   $k=$142;
   label = 11; break;
  case 14: 
   label = 27; break;
  case 15: 
   var $145=$5;
   var $146=(($145)|(0))==3;
   if ($146) { label = 16; break; } else { label = 21; break; }
  case 16: 
   $k=0;
   label = 17; break;
  case 17: 
   var $149=$k;
   var $150=$7;
   var $151=(($149)|(0)) < (($150)|(0));
   if ($151) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $153=$k;
   var $154=$6;
   var $155=(($154+((($153)*(12))&-1))|0);
   var $156=(($155)|0);
   var $157=HEAP32[(($156)>>2)];
   $sxn3=$157;
   var $158=$k;
   var $159=$6;
   var $160=(($159+((($158)*(12))&-1))|0);
   var $161=(($160+4)|0);
   var $162=HEAP32[(($161)>>2)];
   $dxn4=$162;
   var $163=$k;
   var $164=$6;
   var $165=(($164+((($163)*(12))&-1))|0);
   var $166=(($165+8)|0);
   var $167=HEAPF32[(($166)>>2)];
   $alpha5=$167;
   var $168=$dxn4;
   var $169=$8;
   var $170=(($169+($168<<2))|0);
   var $171=HEAPF32[(($170)>>2)];
   var $172=$sxn3;
   var $173=$1;
   var $174=(($173+$172)|0);
   var $175=HEAP8[($174)];
   var $176=(($175)&(255));
   var $177=((($176)+(256))|0);
   var $178=((1152+($177<<2))|0);
   var $179=(copyTempFloat($178),HEAPF32[((tempDoublePtr)>>2)]);
   var $180=$alpha5;
   var $181=($179)*($180);
   var $182=($171)+($181);
   $t06=$182;
   var $183=$dxn4;
   var $184=((($183)+(1))|0);
   var $185=$8;
   var $186=(($185+($184<<2))|0);
   var $187=HEAPF32[(($186)>>2)];
   var $188=$sxn3;
   var $189=((($188)+(1))|0);
   var $190=$1;
   var $191=(($190+$189)|0);
   var $192=HEAP8[($191)];
   var $193=(($192)&(255));
   var $194=((($193)+(256))|0);
   var $195=((1152+($194<<2))|0);
   var $196=(copyTempFloat($195),HEAPF32[((tempDoublePtr)>>2)]);
   var $197=$alpha5;
   var $198=($196)*($197);
   var $199=($187)+($198);
   $t17=$199;
   var $200=$dxn4;
   var $201=((($200)+(2))|0);
   var $202=$8;
   var $203=(($202+($201<<2))|0);
   var $204=HEAPF32[(($203)>>2)];
   var $205=$sxn3;
   var $206=((($205)+(2))|0);
   var $207=$1;
   var $208=(($207+$206)|0);
   var $209=HEAP8[($208)];
   var $210=(($209)&(255));
   var $211=((($210)+(256))|0);
   var $212=((1152+($211<<2))|0);
   var $213=(copyTempFloat($212),HEAPF32[((tempDoublePtr)>>2)]);
   var $214=$alpha5;
   var $215=($213)*($214);
   var $216=($204)+($215);
   $t2=$216;
   var $217=$t06;
   var $218=$dxn4;
   var $219=$8;
   var $220=(($219+($218<<2))|0);
   HEAPF32[(($220)>>2)]=$217;
   var $221=$t17;
   var $222=$dxn4;
   var $223=((($222)+(1))|0);
   var $224=$8;
   var $225=(($224+($223<<2))|0);
   HEAPF32[(($225)>>2)]=$221;
   var $226=$t2;
   var $227=$dxn4;
   var $228=((($227)+(2))|0);
   var $229=$8;
   var $230=(($229+($228<<2))|0);
   HEAPF32[(($230)>>2)]=$226;
   label = 19; break;
  case 19: 
   var $232=$k;
   var $233=((($232)+(1))|0);
   $k=$233;
   label = 17; break;
  case 20: 
   label = 26; break;
  case 21: 
   $k=0;
   label = 22; break;
  case 22: 
   var $237=$k;
   var $238=$7;
   var $239=(($237)|(0)) < (($238)|(0));
   if ($239) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $241=$k;
   var $242=$6;
   var $243=(($242+((($241)*(12))&-1))|0);
   var $244=(($243)|0);
   var $245=HEAP32[(($244)>>2)];
   $sxn8=$245;
   var $246=$k;
   var $247=$6;
   var $248=(($247+((($246)*(12))&-1))|0);
   var $249=(($248+4)|0);
   var $250=HEAP32[(($249)>>2)];
   $dxn9=$250;
   var $251=$k;
   var $252=$6;
   var $253=(($252+((($251)*(12))&-1))|0);
   var $254=(($253+8)|0);
   var $255=HEAPF32[(($254)>>2)];
   $alpha10=$255;
   var $256=$dxn9;
   var $257=$8;
   var $258=(($257+($256<<2))|0);
   var $259=HEAPF32[(($258)>>2)];
   var $260=$sxn8;
   var $261=$1;
   var $262=(($261+$260)|0);
   var $263=HEAP8[($262)];
   var $264=(($263)&(255));
   var $265=((($264)+(256))|0);
   var $266=((1152+($265<<2))|0);
   var $267=(copyTempFloat($266),HEAPF32[((tempDoublePtr)>>2)]);
   var $268=$alpha10;
   var $269=($267)*($268);
   var $270=($259)+($269);
   $t011=$270;
   var $271=$dxn9;
   var $272=((($271)+(1))|0);
   var $273=$8;
   var $274=(($273+($272<<2))|0);
   var $275=HEAPF32[(($274)>>2)];
   var $276=$sxn8;
   var $277=((($276)+(1))|0);
   var $278=$1;
   var $279=(($278+$277)|0);
   var $280=HEAP8[($279)];
   var $281=(($280)&(255));
   var $282=((($281)+(256))|0);
   var $283=((1152+($282<<2))|0);
   var $284=(copyTempFloat($283),HEAPF32[((tempDoublePtr)>>2)]);
   var $285=$alpha10;
   var $286=($284)*($285);
   var $287=($275)+($286);
   $t112=$287;
   var $288=$t011;
   var $289=$dxn9;
   var $290=$8;
   var $291=(($290+($289<<2))|0);
   HEAPF32[(($291)>>2)]=$288;
   var $292=$t112;
   var $293=$dxn9;
   var $294=((($293)+(1))|0);
   var $295=$8;
   var $296=(($295+($294<<2))|0);
   HEAPF32[(($296)>>2)]=$292;
   var $297=$dxn9;
   var $298=((($297)+(2))|0);
   var $299=$8;
   var $300=(($299+($298<<2))|0);
   var $301=HEAPF32[(($300)>>2)];
   var $302=$sxn8;
   var $303=((($302)+(2))|0);
   var $304=$1;
   var $305=(($304+$303)|0);
   var $306=HEAP8[($305)];
   var $307=(($306)&(255));
   var $308=((($307)+(256))|0);
   var $309=((1152+($308<<2))|0);
   var $310=(copyTempFloat($309),HEAPF32[((tempDoublePtr)>>2)]);
   var $311=$alpha10;
   var $312=($310)*($311);
   var $313=($301)+($312);
   $t011=$313;
   var $314=$dxn9;
   var $315=((($314)+(3))|0);
   var $316=$8;
   var $317=(($316+($315<<2))|0);
   var $318=HEAPF32[(($317)>>2)];
   var $319=$sxn8;
   var $320=((($319)+(3))|0);
   var $321=$1;
   var $322=(($321+$320)|0);
   var $323=HEAP8[($322)];
   var $324=(($323)&(255));
   var $325=((($324)+(256))|0);
   var $326=((1152+($325<<2))|0);
   var $327=(copyTempFloat($326),HEAPF32[((tempDoublePtr)>>2)]);
   var $328=$alpha10;
   var $329=($327)*($328);
   var $330=($318)+($329);
   $t112=$330;
   var $331=$t011;
   var $332=$dxn9;
   var $333=((($332)+(2))|0);
   var $334=$8;
   var $335=(($334+($333<<2))|0);
   HEAPF32[(($335)>>2)]=$331;
   var $336=$t112;
   var $337=$dxn9;
   var $338=((($337)+(3))|0);
   var $339=$8;
   var $340=(($339+($338<<2))|0);
   HEAPF32[(($340)>>2)]=$336;
   label = 24; break;
  case 24: 
   var $342=$k;
   var $343=((($342)+(1))|0);
   $k=$343;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $348=$cur_dy;
   var $349=((($348)+(1))|0);
   var $350=(($349)|(0));
   var $351=$scale_y;
   var $352=($350)*($351);
   var $353=$sy;
   var $354=((($353)+(1))|0);
   var $355=(($354)|(0));
   var $356=$352 <= $355;
   if ($356) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $358=$sy;
   var $359=(($ssize+4)|0);
   var $360=HEAP32[(($359)>>2)];
   var $361=((($360)-(1))|0);
   var $362=(($358)|(0))==(($361)|(0));
   if ($362) { label = 30; break; } else { label = 45; break; }
  case 30: 
   var $364=$sy;
   var $365=((($364)+(1))|0);
   var $366=(($365)|(0));
   var $367=$cur_dy;
   var $368=((($367)+(1))|0);
   var $369=(($368)|(0));
   var $370=$scale_y;
   var $371=($369)*($370);
   var $372=($366)-($371);
   $beta=$372;
   var $373=$beta;
   var $374=$373 < 0;
   if ($374) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $379 = 0;label = 33; break;
  case 32: 
   var $377=$beta;
   var $379 = $377;label = 33; break;
  case 33: 
   var $379;
   $beta=$379;
   var $380=$beta;
   var $381=(1)-($380);
   $beta1=$381;
   var $382=$beta;
   var $383=$382;
   var $384=Math.abs($383);
   var $385=$384 < 0.001;
   if ($385) { label = 34; break; } else { label = 39; break; }
  case 34: 
   $dx=0;
   label = 35; break;
  case 35: 
   var $388=$dx;
   var $389=(($dsize)|0);
   var $390=HEAP32[(($389)>>2)];
   var $391=(($388)|(0)) < (($390)|(0));
   if ($391) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $393=$dx;
   var $394=$9;
   var $395=(($394+($393<<2))|0);
   var $396=HEAPF32[(($395)>>2)];
   var $397=$dx;
   var $398=$8;
   var $399=(($398+($397<<2))|0);
   var $400=HEAPF32[(($399)>>2)];
   var $401=($396)+($400);
   var $402=$401;
   var $403=__Z7cvRoundd($402);
   var $404=(($403) & 255);
   var $405=$dx;
   var $406=$3;
   var $407=(($406+$405)|0);
   HEAP8[($407)]=$404;
   var $408=$dx;
   var $409=$8;
   var $410=(($409+($408<<2))|0);
   HEAPF32[(($410)>>2)]=0;
   var $411=$dx;
   var $412=$9;
   var $413=(($412+($411<<2))|0);
   HEAPF32[(($413)>>2)]=0;
   label = 37; break;
  case 37: 
   var $415=$dx;
   var $416=((($415)+(1))|0);
   $dx=$416;
   label = 35; break;
  case 38: 
   label = 44; break;
  case 39: 
   $dx=0;
   label = 40; break;
  case 40: 
   var $420=$dx;
   var $421=(($dsize)|0);
   var $422=HEAP32[(($421)>>2)];
   var $423=(($420)|(0)) < (($422)|(0));
   if ($423) { label = 41; break; } else { label = 43; break; }
  case 41: 
   var $425=$dx;
   var $426=$9;
   var $427=(($426+($425<<2))|0);
   var $428=HEAPF32[(($427)>>2)];
   var $429=$dx;
   var $430=$8;
   var $431=(($430+($429<<2))|0);
   var $432=HEAPF32[(($431)>>2)];
   var $433=$beta1;
   var $434=($432)*($433);
   var $435=($428)+($434);
   var $436=$435;
   var $437=__Z7cvRoundd($436);
   var $438=(($437) & 255);
   var $439=$dx;
   var $440=$3;
   var $441=(($440+$439)|0);
   HEAP8[($441)]=$438;
   var $442=$dx;
   var $443=$8;
   var $444=(($443+($442<<2))|0);
   var $445=HEAPF32[(($444)>>2)];
   var $446=$beta;
   var $447=($445)*($446);
   var $448=$dx;
   var $449=$9;
   var $450=(($449+($448<<2))|0);
   HEAPF32[(($450)>>2)]=$447;
   var $451=$dx;
   var $452=$8;
   var $453=(($452+($451<<2))|0);
   HEAPF32[(($453)>>2)]=0;
   label = 42; break;
  case 42: 
   var $455=$dx;
   var $456=((($455)+(1))|0);
   $dx=$456;
   label = 40; break;
  case 43: 
   label = 44; break;
  case 44: 
   var $459=$4;
   var $460=$3;
   var $461=(($460+$459)|0);
   $3=$461;
   var $462=$cur_dy;
   var $463=((($462)+(1))|0);
   $cur_dy=$463;
   label = 50; break;
  case 45: 
   $dx=0;
   label = 46; break;
  case 46: 
   var $466=$dx;
   var $467=(($dsize)|0);
   var $468=HEAP32[(($467)>>2)];
   var $469=(($466)|(0)) < (($468)|(0));
   if ($469) { label = 47; break; } else { label = 49; break; }
  case 47: 
   var $471=$dx;
   var $472=$9;
   var $473=(($472+($471<<2))|0);
   var $474=HEAPF32[(($473)>>2)];
   var $475=$dx;
   var $476=$8;
   var $477=(($476+($475<<2))|0);
   var $478=HEAPF32[(($477)>>2)];
   var $479=($474)+($478);
   $t013=$479;
   var $480=$dx;
   var $481=((($480)+(1))|0);
   var $482=$9;
   var $483=(($482+($481<<2))|0);
   var $484=HEAPF32[(($483)>>2)];
   var $485=$dx;
   var $486=((($485)+(1))|0);
   var $487=$8;
   var $488=(($487+($486<<2))|0);
   var $489=HEAPF32[(($488)>>2)];
   var $490=($484)+($489);
   $t114=$490;
   var $491=$t013;
   var $492=$dx;
   var $493=$9;
   var $494=(($493+($492<<2))|0);
   HEAPF32[(($494)>>2)]=$491;
   var $495=$t114;
   var $496=$dx;
   var $497=((($496)+(1))|0);
   var $498=$9;
   var $499=(($498+($497<<2))|0);
   HEAPF32[(($499)>>2)]=$495;
   var $500=$dx;
   var $501=((($500)+(1))|0);
   var $502=$8;
   var $503=(($502+($501<<2))|0);
   HEAPF32[(($503)>>2)]=0;
   var $504=$dx;
   var $505=$8;
   var $506=(($505+($504<<2))|0);
   HEAPF32[(($506)>>2)]=0;
   label = 48; break;
  case 48: 
   var $508=$dx;
   var $509=((($508)+(2))|0);
   $dx=$509;
   label = 46; break;
  case 49: 
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $513=$sy;
   var $514=((($513)+(1))|0);
   $sy=$514;
   var $515=$2;
   var $516=$1;
   var $517=(($516+$515)|0);
   $1=$517;
   label = 2; break;
  case 52: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL22icvResize_Area_16u_CnRPKti6CvSizePtiS1_iPK15CvDecimateAlphaiPfS6_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xofs, $xofs_count, $buf, $sum) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $k;
   var $sy;
   var $dx;
   var $cur_dy;
   var $scale_y;
   var $dxn;
   var $alpha;
   var $sxn;
   var $dxn1;
   var $alpha2;
   var $t0;
   var $t1;
   var $sxn3;
   var $dxn4;
   var $alpha5;
   var $t06;
   var $t17;
   var $t2;
   var $sxn8;
   var $dxn9;
   var $alpha10;
   var $t011;
   var $t112;
   var $beta;
   var $beta1;
   var $t013;
   var $t114;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xofs;
   $7=$xofs_count;
   $8=$buf;
   $9=$sum;
   $cur_dy=0;
   var $10=(($ssize+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0));
   var $13=(($dsize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0));
   var $16=($12)/($15);
   $scale_y=$16;
   var $17=$2;
   var $18=((((($17)>>>(0)))/(2))&-1);
   $2=$18;
   var $19=$4;
   var $20=((((($19)>>>(0)))/(2))&-1);
   $4=$20;
   var $21=$5;
   var $22=(($dsize)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(Math.imul($23,$21)|0);
   HEAP32[(($22)>>2)]=$24;
   $sy=0;
   label = 2; break;
  case 2: 
   var $26=$sy;
   var $27=(($ssize+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($26)|(0)) < (($28)|(0));
   if ($29) { label = 3; break; } else { label = 52; break; }
  case 3: 
   var $31=$5;
   var $32=(($31)|(0))==1;
   if ($32) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $k=0;
   label = 5; break;
  case 5: 
   var $35=$k;
   var $36=$7;
   var $37=(($35)|(0)) < (($36)|(0));
   if ($37) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $39=$k;
   var $40=$6;
   var $41=(($40+((($39)*(12))&-1))|0);
   var $42=(($41+4)|0);
   var $43=HEAP32[(($42)>>2)];
   $dxn=$43;
   var $44=$k;
   var $45=$6;
   var $46=(($45+((($44)*(12))&-1))|0);
   var $47=(($46+8)|0);
   var $48=HEAPF32[(($47)>>2)];
   $alpha=$48;
   var $49=$dxn;
   var $50=$8;
   var $51=(($50+($49<<2))|0);
   var $52=HEAPF32[(($51)>>2)];
   var $53=$k;
   var $54=$6;
   var $55=(($54+((($53)*(12))&-1))|0);
   var $56=(($55)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$1;
   var $59=(($58+($57<<1))|0);
   var $60=HEAP16[(($59)>>1)];
   var $61=(($60)&(65535));
   var $62=(($61)|(0));
   var $63=$alpha;
   var $64=($62)*($63);
   var $65=($52)+($64);
   var $66=$dxn;
   var $67=$8;
   var $68=(($67+($66<<2))|0);
   HEAPF32[(($68)>>2)]=$65;
   label = 7; break;
  case 7: 
   var $70=$k;
   var $71=((($70)+(1))|0);
   $k=$71;
   label = 5; break;
  case 8: 
   label = 28; break;
  case 9: 
   var $74=$5;
   var $75=(($74)|(0))==2;
   if ($75) { label = 10; break; } else { label = 15; break; }
  case 10: 
   $k=0;
   label = 11; break;
  case 11: 
   var $78=$k;
   var $79=$7;
   var $80=(($78)|(0)) < (($79)|(0));
   if ($80) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $82=$k;
   var $83=$6;
   var $84=(($83+((($82)*(12))&-1))|0);
   var $85=(($84)|0);
   var $86=HEAP32[(($85)>>2)];
   $sxn=$86;
   var $87=$k;
   var $88=$6;
   var $89=(($88+((($87)*(12))&-1))|0);
   var $90=(($89+4)|0);
   var $91=HEAP32[(($90)>>2)];
   $dxn1=$91;
   var $92=$k;
   var $93=$6;
   var $94=(($93+((($92)*(12))&-1))|0);
   var $95=(($94+8)|0);
   var $96=HEAPF32[(($95)>>2)];
   $alpha2=$96;
   var $97=$dxn1;
   var $98=$8;
   var $99=(($98+($97<<2))|0);
   var $100=HEAPF32[(($99)>>2)];
   var $101=$sxn;
   var $102=$1;
   var $103=(($102+($101<<1))|0);
   var $104=HEAP16[(($103)>>1)];
   var $105=(($104)&(65535));
   var $106=(($105)|(0));
   var $107=$alpha2;
   var $108=($106)*($107);
   var $109=($100)+($108);
   $t0=$109;
   var $110=$dxn1;
   var $111=((($110)+(1))|0);
   var $112=$8;
   var $113=(($112+($111<<2))|0);
   var $114=HEAPF32[(($113)>>2)];
   var $115=$sxn;
   var $116=((($115)+(1))|0);
   var $117=$1;
   var $118=(($117+($116<<1))|0);
   var $119=HEAP16[(($118)>>1)];
   var $120=(($119)&(65535));
   var $121=(($120)|(0));
   var $122=$alpha2;
   var $123=($121)*($122);
   var $124=($114)+($123);
   $t1=$124;
   var $125=$t0;
   var $126=$dxn1;
   var $127=$8;
   var $128=(($127+($126<<2))|0);
   HEAPF32[(($128)>>2)]=$125;
   var $129=$t1;
   var $130=$dxn1;
   var $131=((($130)+(1))|0);
   var $132=$8;
   var $133=(($132+($131<<2))|0);
   HEAPF32[(($133)>>2)]=$129;
   label = 13; break;
  case 13: 
   var $135=$k;
   var $136=((($135)+(1))|0);
   $k=$136;
   label = 11; break;
  case 14: 
   label = 27; break;
  case 15: 
   var $139=$5;
   var $140=(($139)|(0))==3;
   if ($140) { label = 16; break; } else { label = 21; break; }
  case 16: 
   $k=0;
   label = 17; break;
  case 17: 
   var $143=$k;
   var $144=$7;
   var $145=(($143)|(0)) < (($144)|(0));
   if ($145) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $147=$k;
   var $148=$6;
   var $149=(($148+((($147)*(12))&-1))|0);
   var $150=(($149)|0);
   var $151=HEAP32[(($150)>>2)];
   $sxn3=$151;
   var $152=$k;
   var $153=$6;
   var $154=(($153+((($152)*(12))&-1))|0);
   var $155=(($154+4)|0);
   var $156=HEAP32[(($155)>>2)];
   $dxn4=$156;
   var $157=$k;
   var $158=$6;
   var $159=(($158+((($157)*(12))&-1))|0);
   var $160=(($159+8)|0);
   var $161=HEAPF32[(($160)>>2)];
   $alpha5=$161;
   var $162=$dxn4;
   var $163=$8;
   var $164=(($163+($162<<2))|0);
   var $165=HEAPF32[(($164)>>2)];
   var $166=$sxn3;
   var $167=$1;
   var $168=(($167+($166<<1))|0);
   var $169=HEAP16[(($168)>>1)];
   var $170=(($169)&(65535));
   var $171=(($170)|(0));
   var $172=$alpha5;
   var $173=($171)*($172);
   var $174=($165)+($173);
   $t06=$174;
   var $175=$dxn4;
   var $176=((($175)+(1))|0);
   var $177=$8;
   var $178=(($177+($176<<2))|0);
   var $179=HEAPF32[(($178)>>2)];
   var $180=$sxn3;
   var $181=((($180)+(1))|0);
   var $182=$1;
   var $183=(($182+($181<<1))|0);
   var $184=HEAP16[(($183)>>1)];
   var $185=(($184)&(65535));
   var $186=(($185)|(0));
   var $187=$alpha5;
   var $188=($186)*($187);
   var $189=($179)+($188);
   $t17=$189;
   var $190=$dxn4;
   var $191=((($190)+(2))|0);
   var $192=$8;
   var $193=(($192+($191<<2))|0);
   var $194=HEAPF32[(($193)>>2)];
   var $195=$sxn3;
   var $196=((($195)+(2))|0);
   var $197=$1;
   var $198=(($197+($196<<1))|0);
   var $199=HEAP16[(($198)>>1)];
   var $200=(($199)&(65535));
   var $201=(($200)|(0));
   var $202=$alpha5;
   var $203=($201)*($202);
   var $204=($194)+($203);
   $t2=$204;
   var $205=$t06;
   var $206=$dxn4;
   var $207=$8;
   var $208=(($207+($206<<2))|0);
   HEAPF32[(($208)>>2)]=$205;
   var $209=$t17;
   var $210=$dxn4;
   var $211=((($210)+(1))|0);
   var $212=$8;
   var $213=(($212+($211<<2))|0);
   HEAPF32[(($213)>>2)]=$209;
   var $214=$t2;
   var $215=$dxn4;
   var $216=((($215)+(2))|0);
   var $217=$8;
   var $218=(($217+($216<<2))|0);
   HEAPF32[(($218)>>2)]=$214;
   label = 19; break;
  case 19: 
   var $220=$k;
   var $221=((($220)+(1))|0);
   $k=$221;
   label = 17; break;
  case 20: 
   label = 26; break;
  case 21: 
   $k=0;
   label = 22; break;
  case 22: 
   var $225=$k;
   var $226=$7;
   var $227=(($225)|(0)) < (($226)|(0));
   if ($227) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $229=$k;
   var $230=$6;
   var $231=(($230+((($229)*(12))&-1))|0);
   var $232=(($231)|0);
   var $233=HEAP32[(($232)>>2)];
   $sxn8=$233;
   var $234=$k;
   var $235=$6;
   var $236=(($235+((($234)*(12))&-1))|0);
   var $237=(($236+4)|0);
   var $238=HEAP32[(($237)>>2)];
   $dxn9=$238;
   var $239=$k;
   var $240=$6;
   var $241=(($240+((($239)*(12))&-1))|0);
   var $242=(($241+8)|0);
   var $243=HEAPF32[(($242)>>2)];
   $alpha10=$243;
   var $244=$dxn9;
   var $245=$8;
   var $246=(($245+($244<<2))|0);
   var $247=HEAPF32[(($246)>>2)];
   var $248=$sxn8;
   var $249=$1;
   var $250=(($249+($248<<1))|0);
   var $251=HEAP16[(($250)>>1)];
   var $252=(($251)&(65535));
   var $253=(($252)|(0));
   var $254=$alpha10;
   var $255=($253)*($254);
   var $256=($247)+($255);
   $t011=$256;
   var $257=$dxn9;
   var $258=((($257)+(1))|0);
   var $259=$8;
   var $260=(($259+($258<<2))|0);
   var $261=HEAPF32[(($260)>>2)];
   var $262=$sxn8;
   var $263=((($262)+(1))|0);
   var $264=$1;
   var $265=(($264+($263<<1))|0);
   var $266=HEAP16[(($265)>>1)];
   var $267=(($266)&(65535));
   var $268=(($267)|(0));
   var $269=$alpha10;
   var $270=($268)*($269);
   var $271=($261)+($270);
   $t112=$271;
   var $272=$t011;
   var $273=$dxn9;
   var $274=$8;
   var $275=(($274+($273<<2))|0);
   HEAPF32[(($275)>>2)]=$272;
   var $276=$t112;
   var $277=$dxn9;
   var $278=((($277)+(1))|0);
   var $279=$8;
   var $280=(($279+($278<<2))|0);
   HEAPF32[(($280)>>2)]=$276;
   var $281=$dxn9;
   var $282=((($281)+(2))|0);
   var $283=$8;
   var $284=(($283+($282<<2))|0);
   var $285=HEAPF32[(($284)>>2)];
   var $286=$sxn8;
   var $287=((($286)+(2))|0);
   var $288=$1;
   var $289=(($288+($287<<1))|0);
   var $290=HEAP16[(($289)>>1)];
   var $291=(($290)&(65535));
   var $292=(($291)|(0));
   var $293=$alpha10;
   var $294=($292)*($293);
   var $295=($285)+($294);
   $t011=$295;
   var $296=$dxn9;
   var $297=((($296)+(3))|0);
   var $298=$8;
   var $299=(($298+($297<<2))|0);
   var $300=HEAPF32[(($299)>>2)];
   var $301=$sxn8;
   var $302=((($301)+(3))|0);
   var $303=$1;
   var $304=(($303+($302<<1))|0);
   var $305=HEAP16[(($304)>>1)];
   var $306=(($305)&(65535));
   var $307=(($306)|(0));
   var $308=$alpha10;
   var $309=($307)*($308);
   var $310=($300)+($309);
   $t112=$310;
   var $311=$t011;
   var $312=$dxn9;
   var $313=((($312)+(2))|0);
   var $314=$8;
   var $315=(($314+($313<<2))|0);
   HEAPF32[(($315)>>2)]=$311;
   var $316=$t112;
   var $317=$dxn9;
   var $318=((($317)+(3))|0);
   var $319=$8;
   var $320=(($319+($318<<2))|0);
   HEAPF32[(($320)>>2)]=$316;
   label = 24; break;
  case 24: 
   var $322=$k;
   var $323=((($322)+(1))|0);
   $k=$323;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $328=$cur_dy;
   var $329=((($328)+(1))|0);
   var $330=(($329)|(0));
   var $331=$scale_y;
   var $332=($330)*($331);
   var $333=$sy;
   var $334=((($333)+(1))|0);
   var $335=(($334)|(0));
   var $336=$332 <= $335;
   if ($336) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $338=$sy;
   var $339=(($ssize+4)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=((($340)-(1))|0);
   var $342=(($338)|(0))==(($341)|(0));
   if ($342) { label = 30; break; } else { label = 45; break; }
  case 30: 
   var $344=$sy;
   var $345=((($344)+(1))|0);
   var $346=(($345)|(0));
   var $347=$cur_dy;
   var $348=((($347)+(1))|0);
   var $349=(($348)|(0));
   var $350=$scale_y;
   var $351=($349)*($350);
   var $352=($346)-($351);
   $beta=$352;
   var $353=$beta;
   var $354=$353 < 0;
   if ($354) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $359 = 0;label = 33; break;
  case 32: 
   var $357=$beta;
   var $359 = $357;label = 33; break;
  case 33: 
   var $359;
   $beta=$359;
   var $360=$beta;
   var $361=(1)-($360);
   $beta1=$361;
   var $362=$beta;
   var $363=$362;
   var $364=Math.abs($363);
   var $365=$364 < 0.001;
   if ($365) { label = 34; break; } else { label = 39; break; }
  case 34: 
   $dx=0;
   label = 35; break;
  case 35: 
   var $368=$dx;
   var $369=(($dsize)|0);
   var $370=HEAP32[(($369)>>2)];
   var $371=(($368)|(0)) < (($370)|(0));
   if ($371) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $373=$dx;
   var $374=$9;
   var $375=(($374+($373<<2))|0);
   var $376=HEAPF32[(($375)>>2)];
   var $377=$dx;
   var $378=$8;
   var $379=(($378+($377<<2))|0);
   var $380=HEAPF32[(($379)>>2)];
   var $381=($376)+($380);
   var $382=$381;
   var $383=__Z7cvRoundd($382);
   var $384=(($383) & 65535);
   var $385=$dx;
   var $386=$3;
   var $387=(($386+($385<<1))|0);
   HEAP16[(($387)>>1)]=$384;
   var $388=$dx;
   var $389=$8;
   var $390=(($389+($388<<2))|0);
   HEAPF32[(($390)>>2)]=0;
   var $391=$dx;
   var $392=$9;
   var $393=(($392+($391<<2))|0);
   HEAPF32[(($393)>>2)]=0;
   label = 37; break;
  case 37: 
   var $395=$dx;
   var $396=((($395)+(1))|0);
   $dx=$396;
   label = 35; break;
  case 38: 
   label = 44; break;
  case 39: 
   $dx=0;
   label = 40; break;
  case 40: 
   var $400=$dx;
   var $401=(($dsize)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=(($400)|(0)) < (($402)|(0));
   if ($403) { label = 41; break; } else { label = 43; break; }
  case 41: 
   var $405=$dx;
   var $406=$9;
   var $407=(($406+($405<<2))|0);
   var $408=HEAPF32[(($407)>>2)];
   var $409=$dx;
   var $410=$8;
   var $411=(($410+($409<<2))|0);
   var $412=HEAPF32[(($411)>>2)];
   var $413=$beta1;
   var $414=($412)*($413);
   var $415=($408)+($414);
   var $416=$415;
   var $417=__Z7cvRoundd($416);
   var $418=(($417) & 65535);
   var $419=$dx;
   var $420=$3;
   var $421=(($420+($419<<1))|0);
   HEAP16[(($421)>>1)]=$418;
   var $422=$dx;
   var $423=$8;
   var $424=(($423+($422<<2))|0);
   var $425=HEAPF32[(($424)>>2)];
   var $426=$beta;
   var $427=($425)*($426);
   var $428=$dx;
   var $429=$9;
   var $430=(($429+($428<<2))|0);
   HEAPF32[(($430)>>2)]=$427;
   var $431=$dx;
   var $432=$8;
   var $433=(($432+($431<<2))|0);
   HEAPF32[(($433)>>2)]=0;
   label = 42; break;
  case 42: 
   var $435=$dx;
   var $436=((($435)+(1))|0);
   $dx=$436;
   label = 40; break;
  case 43: 
   label = 44; break;
  case 44: 
   var $439=$4;
   var $440=$3;
   var $441=(($440+($439<<1))|0);
   $3=$441;
   var $442=$cur_dy;
   var $443=((($442)+(1))|0);
   $cur_dy=$443;
   label = 50; break;
  case 45: 
   $dx=0;
   label = 46; break;
  case 46: 
   var $446=$dx;
   var $447=(($dsize)|0);
   var $448=HEAP32[(($447)>>2)];
   var $449=(($446)|(0)) < (($448)|(0));
   if ($449) { label = 47; break; } else { label = 49; break; }
  case 47: 
   var $451=$dx;
   var $452=$9;
   var $453=(($452+($451<<2))|0);
   var $454=HEAPF32[(($453)>>2)];
   var $455=$dx;
   var $456=$8;
   var $457=(($456+($455<<2))|0);
   var $458=HEAPF32[(($457)>>2)];
   var $459=($454)+($458);
   $t013=$459;
   var $460=$dx;
   var $461=((($460)+(1))|0);
   var $462=$9;
   var $463=(($462+($461<<2))|0);
   var $464=HEAPF32[(($463)>>2)];
   var $465=$dx;
   var $466=((($465)+(1))|0);
   var $467=$8;
   var $468=(($467+($466<<2))|0);
   var $469=HEAPF32[(($468)>>2)];
   var $470=($464)+($469);
   $t114=$470;
   var $471=$t013;
   var $472=$dx;
   var $473=$9;
   var $474=(($473+($472<<2))|0);
   HEAPF32[(($474)>>2)]=$471;
   var $475=$t114;
   var $476=$dx;
   var $477=((($476)+(1))|0);
   var $478=$9;
   var $479=(($478+($477<<2))|0);
   HEAPF32[(($479)>>2)]=$475;
   var $480=$dx;
   var $481=((($480)+(1))|0);
   var $482=$8;
   var $483=(($482+($481<<2))|0);
   HEAPF32[(($483)>>2)]=0;
   var $484=$dx;
   var $485=$8;
   var $486=(($485+($484<<2))|0);
   HEAPF32[(($486)>>2)]=0;
   label = 48; break;
  case 48: 
   var $488=$dx;
   var $489=((($488)+(2))|0);
   $dx=$489;
   label = 46; break;
  case 49: 
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $493=$sy;
   var $494=((($493)+(1))|0);
   $sy=$494;
   var $495=$2;
   var $496=$1;
   var $497=(($496+($495<<1))|0);
   $1=$497;
   label = 2; break;
  case 52: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL22icvResize_Area_32f_CnRPKfi6CvSizePfiS1_iPK15CvDecimateAlphaiS2_S2_($src, $srcstep, $ssize, $dst, $dststep, $dsize, $cn, $xofs, $xofs_count, $buf, $sum) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ssize; $ssize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ssize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ssize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var tempParam = $dsize; $dsize = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dsize)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dsize)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $k;
   var $sy;
   var $dx;
   var $cur_dy;
   var $scale_y;
   var $dxn;
   var $alpha;
   var $sxn;
   var $dxn1;
   var $alpha2;
   var $t0;
   var $t1;
   var $sxn3;
   var $dxn4;
   var $alpha5;
   var $t06;
   var $t17;
   var $t2;
   var $sxn8;
   var $dxn9;
   var $alpha10;
   var $t011;
   var $t112;
   var $beta;
   var $beta1;
   var $t013;
   var $t114;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$xofs;
   $7=$xofs_count;
   $8=$buf;
   $9=$sum;
   $cur_dy=0;
   var $10=(($ssize+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0));
   var $13=(($dsize+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0));
   var $16=($12)/($15);
   $scale_y=$16;
   var $17=$2;
   var $18=((((($17)>>>(0)))/(4))&-1);
   $2=$18;
   var $19=$4;
   var $20=((((($19)>>>(0)))/(4))&-1);
   $4=$20;
   var $21=$5;
   var $22=(($dsize)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(Math.imul($23,$21)|0);
   HEAP32[(($22)>>2)]=$24;
   $sy=0;
   label = 2; break;
  case 2: 
   var $26=$sy;
   var $27=(($ssize+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($26)|(0)) < (($28)|(0));
   if ($29) { label = 3; break; } else { label = 52; break; }
  case 3: 
   var $31=$5;
   var $32=(($31)|(0))==1;
   if ($32) { label = 4; break; } else { label = 9; break; }
  case 4: 
   $k=0;
   label = 5; break;
  case 5: 
   var $35=$k;
   var $36=$7;
   var $37=(($35)|(0)) < (($36)|(0));
   if ($37) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $39=$k;
   var $40=$6;
   var $41=(($40+((($39)*(12))&-1))|0);
   var $42=(($41+4)|0);
   var $43=HEAP32[(($42)>>2)];
   $dxn=$43;
   var $44=$k;
   var $45=$6;
   var $46=(($45+((($44)*(12))&-1))|0);
   var $47=(($46+8)|0);
   var $48=HEAPF32[(($47)>>2)];
   $alpha=$48;
   var $49=$dxn;
   var $50=$8;
   var $51=(($50+($49<<2))|0);
   var $52=HEAPF32[(($51)>>2)];
   var $53=$k;
   var $54=$6;
   var $55=(($54+((($53)*(12))&-1))|0);
   var $56=(($55)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$1;
   var $59=(($58+($57<<2))|0);
   var $60=HEAPF32[(($59)>>2)];
   var $61=$alpha;
   var $62=($60)*($61);
   var $63=($52)+($62);
   var $64=$dxn;
   var $65=$8;
   var $66=(($65+($64<<2))|0);
   HEAPF32[(($66)>>2)]=$63;
   label = 7; break;
  case 7: 
   var $68=$k;
   var $69=((($68)+(1))|0);
   $k=$69;
   label = 5; break;
  case 8: 
   label = 28; break;
  case 9: 
   var $72=$5;
   var $73=(($72)|(0))==2;
   if ($73) { label = 10; break; } else { label = 15; break; }
  case 10: 
   $k=0;
   label = 11; break;
  case 11: 
   var $76=$k;
   var $77=$7;
   var $78=(($76)|(0)) < (($77)|(0));
   if ($78) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $80=$k;
   var $81=$6;
   var $82=(($81+((($80)*(12))&-1))|0);
   var $83=(($82)|0);
   var $84=HEAP32[(($83)>>2)];
   $sxn=$84;
   var $85=$k;
   var $86=$6;
   var $87=(($86+((($85)*(12))&-1))|0);
   var $88=(($87+4)|0);
   var $89=HEAP32[(($88)>>2)];
   $dxn1=$89;
   var $90=$k;
   var $91=$6;
   var $92=(($91+((($90)*(12))&-1))|0);
   var $93=(($92+8)|0);
   var $94=HEAPF32[(($93)>>2)];
   $alpha2=$94;
   var $95=$dxn1;
   var $96=$8;
   var $97=(($96+($95<<2))|0);
   var $98=HEAPF32[(($97)>>2)];
   var $99=$sxn;
   var $100=$1;
   var $101=(($100+($99<<2))|0);
   var $102=HEAPF32[(($101)>>2)];
   var $103=$alpha2;
   var $104=($102)*($103);
   var $105=($98)+($104);
   $t0=$105;
   var $106=$dxn1;
   var $107=((($106)+(1))|0);
   var $108=$8;
   var $109=(($108+($107<<2))|0);
   var $110=HEAPF32[(($109)>>2)];
   var $111=$sxn;
   var $112=((($111)+(1))|0);
   var $113=$1;
   var $114=(($113+($112<<2))|0);
   var $115=HEAPF32[(($114)>>2)];
   var $116=$alpha2;
   var $117=($115)*($116);
   var $118=($110)+($117);
   $t1=$118;
   var $119=$t0;
   var $120=$dxn1;
   var $121=$8;
   var $122=(($121+($120<<2))|0);
   HEAPF32[(($122)>>2)]=$119;
   var $123=$t1;
   var $124=$dxn1;
   var $125=((($124)+(1))|0);
   var $126=$8;
   var $127=(($126+($125<<2))|0);
   HEAPF32[(($127)>>2)]=$123;
   label = 13; break;
  case 13: 
   var $129=$k;
   var $130=((($129)+(1))|0);
   $k=$130;
   label = 11; break;
  case 14: 
   label = 27; break;
  case 15: 
   var $133=$5;
   var $134=(($133)|(0))==3;
   if ($134) { label = 16; break; } else { label = 21; break; }
  case 16: 
   $k=0;
   label = 17; break;
  case 17: 
   var $137=$k;
   var $138=$7;
   var $139=(($137)|(0)) < (($138)|(0));
   if ($139) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $141=$k;
   var $142=$6;
   var $143=(($142+((($141)*(12))&-1))|0);
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   $sxn3=$145;
   var $146=$k;
   var $147=$6;
   var $148=(($147+((($146)*(12))&-1))|0);
   var $149=(($148+4)|0);
   var $150=HEAP32[(($149)>>2)];
   $dxn4=$150;
   var $151=$k;
   var $152=$6;
   var $153=(($152+((($151)*(12))&-1))|0);
   var $154=(($153+8)|0);
   var $155=HEAPF32[(($154)>>2)];
   $alpha5=$155;
   var $156=$dxn4;
   var $157=$8;
   var $158=(($157+($156<<2))|0);
   var $159=HEAPF32[(($158)>>2)];
   var $160=$sxn3;
   var $161=$1;
   var $162=(($161+($160<<2))|0);
   var $163=HEAPF32[(($162)>>2)];
   var $164=$alpha5;
   var $165=($163)*($164);
   var $166=($159)+($165);
   $t06=$166;
   var $167=$dxn4;
   var $168=((($167)+(1))|0);
   var $169=$8;
   var $170=(($169+($168<<2))|0);
   var $171=HEAPF32[(($170)>>2)];
   var $172=$sxn3;
   var $173=((($172)+(1))|0);
   var $174=$1;
   var $175=(($174+($173<<2))|0);
   var $176=HEAPF32[(($175)>>2)];
   var $177=$alpha5;
   var $178=($176)*($177);
   var $179=($171)+($178);
   $t17=$179;
   var $180=$dxn4;
   var $181=((($180)+(2))|0);
   var $182=$8;
   var $183=(($182+($181<<2))|0);
   var $184=HEAPF32[(($183)>>2)];
   var $185=$sxn3;
   var $186=((($185)+(2))|0);
   var $187=$1;
   var $188=(($187+($186<<2))|0);
   var $189=HEAPF32[(($188)>>2)];
   var $190=$alpha5;
   var $191=($189)*($190);
   var $192=($184)+($191);
   $t2=$192;
   var $193=$t06;
   var $194=$dxn4;
   var $195=$8;
   var $196=(($195+($194<<2))|0);
   HEAPF32[(($196)>>2)]=$193;
   var $197=$t17;
   var $198=$dxn4;
   var $199=((($198)+(1))|0);
   var $200=$8;
   var $201=(($200+($199<<2))|0);
   HEAPF32[(($201)>>2)]=$197;
   var $202=$t2;
   var $203=$dxn4;
   var $204=((($203)+(2))|0);
   var $205=$8;
   var $206=(($205+($204<<2))|0);
   HEAPF32[(($206)>>2)]=$202;
   label = 19; break;
  case 19: 
   var $208=$k;
   var $209=((($208)+(1))|0);
   $k=$209;
   label = 17; break;
  case 20: 
   label = 26; break;
  case 21: 
   $k=0;
   label = 22; break;
  case 22: 
   var $213=$k;
   var $214=$7;
   var $215=(($213)|(0)) < (($214)|(0));
   if ($215) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $217=$k;
   var $218=$6;
   var $219=(($218+((($217)*(12))&-1))|0);
   var $220=(($219)|0);
   var $221=HEAP32[(($220)>>2)];
   $sxn8=$221;
   var $222=$k;
   var $223=$6;
   var $224=(($223+((($222)*(12))&-1))|0);
   var $225=(($224+4)|0);
   var $226=HEAP32[(($225)>>2)];
   $dxn9=$226;
   var $227=$k;
   var $228=$6;
   var $229=(($228+((($227)*(12))&-1))|0);
   var $230=(($229+8)|0);
   var $231=HEAPF32[(($230)>>2)];
   $alpha10=$231;
   var $232=$dxn9;
   var $233=$8;
   var $234=(($233+($232<<2))|0);
   var $235=HEAPF32[(($234)>>2)];
   var $236=$sxn8;
   var $237=$1;
   var $238=(($237+($236<<2))|0);
   var $239=HEAPF32[(($238)>>2)];
   var $240=$alpha10;
   var $241=($239)*($240);
   var $242=($235)+($241);
   $t011=$242;
   var $243=$dxn9;
   var $244=((($243)+(1))|0);
   var $245=$8;
   var $246=(($245+($244<<2))|0);
   var $247=HEAPF32[(($246)>>2)];
   var $248=$sxn8;
   var $249=((($248)+(1))|0);
   var $250=$1;
   var $251=(($250+($249<<2))|0);
   var $252=HEAPF32[(($251)>>2)];
   var $253=$alpha10;
   var $254=($252)*($253);
   var $255=($247)+($254);
   $t112=$255;
   var $256=$t011;
   var $257=$dxn9;
   var $258=$8;
   var $259=(($258+($257<<2))|0);
   HEAPF32[(($259)>>2)]=$256;
   var $260=$t112;
   var $261=$dxn9;
   var $262=((($261)+(1))|0);
   var $263=$8;
   var $264=(($263+($262<<2))|0);
   HEAPF32[(($264)>>2)]=$260;
   var $265=$dxn9;
   var $266=((($265)+(2))|0);
   var $267=$8;
   var $268=(($267+($266<<2))|0);
   var $269=HEAPF32[(($268)>>2)];
   var $270=$sxn8;
   var $271=((($270)+(2))|0);
   var $272=$1;
   var $273=(($272+($271<<2))|0);
   var $274=HEAPF32[(($273)>>2)];
   var $275=$alpha10;
   var $276=($274)*($275);
   var $277=($269)+($276);
   $t011=$277;
   var $278=$dxn9;
   var $279=((($278)+(3))|0);
   var $280=$8;
   var $281=(($280+($279<<2))|0);
   var $282=HEAPF32[(($281)>>2)];
   var $283=$sxn8;
   var $284=((($283)+(3))|0);
   var $285=$1;
   var $286=(($285+($284<<2))|0);
   var $287=HEAPF32[(($286)>>2)];
   var $288=$alpha10;
   var $289=($287)*($288);
   var $290=($282)+($289);
   $t112=$290;
   var $291=$t011;
   var $292=$dxn9;
   var $293=((($292)+(2))|0);
   var $294=$8;
   var $295=(($294+($293<<2))|0);
   HEAPF32[(($295)>>2)]=$291;
   var $296=$t112;
   var $297=$dxn9;
   var $298=((($297)+(3))|0);
   var $299=$8;
   var $300=(($299+($298<<2))|0);
   HEAPF32[(($300)>>2)]=$296;
   label = 24; break;
  case 24: 
   var $302=$k;
   var $303=((($302)+(1))|0);
   $k=$303;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $308=$cur_dy;
   var $309=((($308)+(1))|0);
   var $310=(($309)|(0));
   var $311=$scale_y;
   var $312=($310)*($311);
   var $313=$sy;
   var $314=((($313)+(1))|0);
   var $315=(($314)|(0));
   var $316=$312 <= $315;
   if ($316) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $318=$sy;
   var $319=(($ssize+4)|0);
   var $320=HEAP32[(($319)>>2)];
   var $321=((($320)-(1))|0);
   var $322=(($318)|(0))==(($321)|(0));
   if ($322) { label = 30; break; } else { label = 45; break; }
  case 30: 
   var $324=$sy;
   var $325=((($324)+(1))|0);
   var $326=(($325)|(0));
   var $327=$cur_dy;
   var $328=((($327)+(1))|0);
   var $329=(($328)|(0));
   var $330=$scale_y;
   var $331=($329)*($330);
   var $332=($326)-($331);
   $beta=$332;
   var $333=$beta;
   var $334=$333 < 0;
   if ($334) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $339 = 0;label = 33; break;
  case 32: 
   var $337=$beta;
   var $339 = $337;label = 33; break;
  case 33: 
   var $339;
   $beta=$339;
   var $340=$beta;
   var $341=(1)-($340);
   $beta1=$341;
   var $342=$beta;
   var $343=$342;
   var $344=Math.abs($343);
   var $345=$344 < 0.001;
   if ($345) { label = 34; break; } else { label = 39; break; }
  case 34: 
   $dx=0;
   label = 35; break;
  case 35: 
   var $348=$dx;
   var $349=(($dsize)|0);
   var $350=HEAP32[(($349)>>2)];
   var $351=(($348)|(0)) < (($350)|(0));
   if ($351) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $353=$dx;
   var $354=$9;
   var $355=(($354+($353<<2))|0);
   var $356=HEAPF32[(($355)>>2)];
   var $357=$dx;
   var $358=$8;
   var $359=(($358+($357<<2))|0);
   var $360=HEAPF32[(($359)>>2)];
   var $361=($356)+($360);
   var $362=$dx;
   var $363=$3;
   var $364=(($363+($362<<2))|0);
   HEAPF32[(($364)>>2)]=$361;
   var $365=$dx;
   var $366=$8;
   var $367=(($366+($365<<2))|0);
   HEAPF32[(($367)>>2)]=0;
   var $368=$dx;
   var $369=$9;
   var $370=(($369+($368<<2))|0);
   HEAPF32[(($370)>>2)]=0;
   label = 37; break;
  case 37: 
   var $372=$dx;
   var $373=((($372)+(1))|0);
   $dx=$373;
   label = 35; break;
  case 38: 
   label = 44; break;
  case 39: 
   $dx=0;
   label = 40; break;
  case 40: 
   var $377=$dx;
   var $378=(($dsize)|0);
   var $379=HEAP32[(($378)>>2)];
   var $380=(($377)|(0)) < (($379)|(0));
   if ($380) { label = 41; break; } else { label = 43; break; }
  case 41: 
   var $382=$dx;
   var $383=$9;
   var $384=(($383+($382<<2))|0);
   var $385=HEAPF32[(($384)>>2)];
   var $386=$dx;
   var $387=$8;
   var $388=(($387+($386<<2))|0);
   var $389=HEAPF32[(($388)>>2)];
   var $390=$beta1;
   var $391=($389)*($390);
   var $392=($385)+($391);
   var $393=$dx;
   var $394=$3;
   var $395=(($394+($393<<2))|0);
   HEAPF32[(($395)>>2)]=$392;
   var $396=$dx;
   var $397=$8;
   var $398=(($397+($396<<2))|0);
   var $399=HEAPF32[(($398)>>2)];
   var $400=$beta;
   var $401=($399)*($400);
   var $402=$dx;
   var $403=$9;
   var $404=(($403+($402<<2))|0);
   HEAPF32[(($404)>>2)]=$401;
   var $405=$dx;
   var $406=$8;
   var $407=(($406+($405<<2))|0);
   HEAPF32[(($407)>>2)]=0;
   label = 42; break;
  case 42: 
   var $409=$dx;
   var $410=((($409)+(1))|0);
   $dx=$410;
   label = 40; break;
  case 43: 
   label = 44; break;
  case 44: 
   var $413=$4;
   var $414=$3;
   var $415=(($414+($413<<2))|0);
   $3=$415;
   var $416=$cur_dy;
   var $417=((($416)+(1))|0);
   $cur_dy=$417;
   label = 50; break;
  case 45: 
   $dx=0;
   label = 46; break;
  case 46: 
   var $420=$dx;
   var $421=(($dsize)|0);
   var $422=HEAP32[(($421)>>2)];
   var $423=(($420)|(0)) < (($422)|(0));
   if ($423) { label = 47; break; } else { label = 49; break; }
  case 47: 
   var $425=$dx;
   var $426=$9;
   var $427=(($426+($425<<2))|0);
   var $428=HEAPF32[(($427)>>2)];
   var $429=$dx;
   var $430=$8;
   var $431=(($430+($429<<2))|0);
   var $432=HEAPF32[(($431)>>2)];
   var $433=($428)+($432);
   $t013=$433;
   var $434=$dx;
   var $435=((($434)+(1))|0);
   var $436=$9;
   var $437=(($436+($435<<2))|0);
   var $438=HEAPF32[(($437)>>2)];
   var $439=$dx;
   var $440=((($439)+(1))|0);
   var $441=$8;
   var $442=(($441+($440<<2))|0);
   var $443=HEAPF32[(($442)>>2)];
   var $444=($438)+($443);
   $t114=$444;
   var $445=$t013;
   var $446=$dx;
   var $447=$9;
   var $448=(($447+($446<<2))|0);
   HEAPF32[(($448)>>2)]=$445;
   var $449=$t114;
   var $450=$dx;
   var $451=((($450)+(1))|0);
   var $452=$9;
   var $453=(($452+($451<<2))|0);
   HEAPF32[(($453)>>2)]=$449;
   var $454=$dx;
   var $455=((($454)+(1))|0);
   var $456=$8;
   var $457=(($456+($455<<2))|0);
   HEAPF32[(($457)>>2)]=0;
   var $458=$dx;
   var $459=$8;
   var $460=(($459+($458<<2))|0);
   HEAPF32[(($460)>>2)]=0;
   label = 48; break;
  case 48: 
   var $462=$dx;
   var $463=((($462)+(2))|0);
   $dx=$463;
   label = 46; break;
  case 49: 
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $467=$sy;
   var $468=((($467)+(1))|0);
   $sy=$468;
   var $469=$2;
   var $470=$1;
   var $471=(($470+($469<<2))|0);
   $1=$471;
   label = 2; break;
  case 52: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14CvImageFiltersC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=__Znwj(16);
   var $6=$5;
   (function() { try { __THREW__ = 0; return __ZN18GrFmtFactoriesListC2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $8=(($4)|0);
   HEAP32[(($8)>>2)]=$6;
   var $9=(($4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=__Znwj(16);
   var $12=$11;
   (function() { try { __THREW__ = 0; return __ZN8GrFmtBmpC2Ev($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $14=$12;
   var $15=__ZN18GrFmtFactoriesList10AddFactoryEP18GrFmtFilterFactory($10, $14);
   var $16=(($4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=__Znwj(16);
   var $19=$18;
   (function() { try { __THREW__ = 0; return __ZN9GrFmtJpegC2Ev($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 10; break; }
  case 4: 
   var $21=$19;
   var $22=__ZN18GrFmtFactoriesList10AddFactoryEP18GrFmtFilterFactory($17, $21);
   var $23=(($4)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=__Znwj(16);
   var $26=$25;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtSunRasterC2Ev($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $28=$26;
   var $29=__ZN18GrFmtFactoriesList10AddFactoryEP18GrFmtFilterFactory($24, $28);
   var $30=(($4)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=__Znwj(16);
   var $33=$32;
   (function() { try { __THREW__ = 0; return __ZN8GrFmtPxMC2Ev($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 12; break; }
  case 6: 
   var $35=$33;
   var $36=__ZN18GrFmtFactoriesList10AddFactoryEP18GrFmtFilterFactory($31, $35);
   var $37=(($4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=__Znwj(16);
   var $40=$39;
   (function() { try { __THREW__ = 0; return __ZN9GrFmtTiffC2Ev($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 13; break; }
  case 7: 
   var $42=$40;
   var $43=__ZN18GrFmtFactoriesList10AddFactoryEP18GrFmtFilterFactory($38, $42);
   return;
  case 8: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1); $45$1 = tempRet0;
   var $46=$45$0;
   $2=$46;
   var $47=$45$1;
   $3=$47;
   __ZdlPv($5);
   label = 14; break;
  case 9: 
   var $49$0 = ___cxa_find_matching_catch(-1, -1); $49$1 = tempRet0;
   var $50=$49$0;
   $2=$50;
   var $51=$49$1;
   $3=$51;
   __ZdlPv($11);
   label = 14; break;
  case 10: 
   var $53$0 = ___cxa_find_matching_catch(-1, -1); $53$1 = tempRet0;
   var $54=$53$0;
   $2=$54;
   var $55=$53$1;
   $3=$55;
   __ZdlPv($18);
   label = 14; break;
  case 11: 
   var $57$0 = ___cxa_find_matching_catch(-1, -1); $57$1 = tempRet0;
   var $58=$57$0;
   $2=$58;
   var $59=$57$1;
   $3=$59;
   __ZdlPv($25);
   label = 14; break;
  case 12: 
   var $61$0 = ___cxa_find_matching_catch(-1, -1); $61$1 = tempRet0;
   var $62=$61$0;
   $2=$62;
   var $63=$61$1;
   $3=$63;
   __ZdlPv($32);
   label = 14; break;
  case 13: 
   var $65$0 = ___cxa_find_matching_catch(-1, -1); $65$1 = tempRet0;
   var $66=$65$0;
   $2=$66;
   var $67=$65$1;
   $3=$67;
   __ZdlPv($39);
   label = 14; break;
  case 14: 
   var $69=$2;
   var $70=$3;
   var $71$0=$69;
   var $71$1=0;
   var $72$0=$71$0;
   var $72$1=$70;
   ___resumeException($72$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14CvImageFiltersD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$4;
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   FUNCTION_TABLE[$10]($4);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK14CvImageFilters10FindReaderEPKc($this, $filename) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$filename;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=FUNCTION_TABLE[$9]($5, $10);
 return $11;
}
function __ZNK14CvImageFilters10FindWriterEPKc($this, $filename) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$filename;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=FUNCTION_TABLE[$9]($5, $10);
 return $11;
}
function ___cxx_global_var_init() {
 var label = 0;
 var $1=__ZL20icvSetCXCOREBindingsv();
 HEAP32[((36384)>>2)]=$1;
 return;
}
function __ZL20icvSetCXCOREBindingsv() {
 var label = 0;
 var $1=_cvSetImageIOFunctions(640, 268, 292, 458);
 return $1;
}
function ___cxx_global_var_init1() {
 var label = 0;
 __ZN14CvImageFiltersC2Ev(37576);
 var $1=_atexit((216), 37576, ___dso_handle);
 return;
}
function _cvLoadImage($filename, $iscolor) {
 var label = 0;
 var $1;
 var $2;
 $1=$filename;
 $2=$iscolor;
 var $3=$1;
 var $4=$2;
 var $5=__ZL12icvLoadImagePKcib($3, $4, 0);
 var $6=$5;
 return $6;
}
function __Z14cvCvToIplDepthi($type) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $depth;
   $1=$type;
   var $2=$1;
   var $3=$2 & 7;
   $depth=$3;
   var $4=$depth;
   var $5=$4 & 7;
   var $6=($5<<2);
   var $7=1212424721 >>> (($6)>>>(0));
   var $8=$7 & 15;
   var $9=($8<<3);
   var $10=$depth;
   var $11=(($10)|(0))==1;
   if ($11) { var $19 = 1;label = 4; break; } else { label = 2; break; }
  case 2: 
   var $13=$depth;
   var $14=(($13)|(0))==3;
   if ($14) { var $19 = 1;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $16=$depth;
   var $17=(($16)|(0))==4;
   var $19 = $17;label = 4; break;
  case 4: 
   var $19;
   var $20=$19 ? -2147483648 : 0;
   var $21=$9 | $20;
   return $21;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11GrFmtReader8GetWidthEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN11GrFmtReader9GetHeightEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN11GrFmtReader7IsColorEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP8[($3)];
 var $5=(($4) & 1);
 return $5;
}
function __ZN11GrFmtReader14UseNativeDepthEb($this, $yes) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 var $3=(($yes)&(1));
 $2=$3;
 var $4=$1;
 var $5=$2;
 var $6=(($5) & 1);
 var $7=(($4+1044)|0);
 var $8=(($6)&(1));
 HEAP8[($7)]=$8;
 return;
}
function __ZN11GrFmtReader8GetDepthEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN11GrFmtReader7IsFloatEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1045)|0);
 var $4=HEAP8[($3)];
 var $5=(($4) & 1);
 return $5;
}
function __Z24icvCvt_BGR2Gray_8u_C3C1RPKhiPhi6CvSizei($rgb, $rgb_step, $gray, $gray_step, $size, $_swap_rb) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $swap_rb;
   var $t;
   $1=$rgb;
   $2=$rgb_step;
   $3=$gray;
   $4=$gray_step;
   $5=$_swap_rb;
   var $6=$5;
   var $7=(($6)|(0))!=0;
   var $8=$7 ? 2 : 0;
   $swap_rb=$8;
   label = 2; break;
  case 2: 
   var $10=(($size+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)-(1))|0);
   HEAP32[(($10)>>2)]=$12;
   var $13=(($11)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $16=$i;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($16)|(0)) < (($18)|(0));
   if ($19) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $21=$swap_rb;
   var $22=$1;
   var $23=(($22+$21)|0);
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   var $26=((($25)*(1868))&-1);
   var $27=$1;
   var $28=(($27+1)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=((($30)*(9617))&-1);
   var $32=((($26)+($31))|0);
   var $33=$swap_rb;
   var $34=$33 ^ 2;
   var $35=$1;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   var $39=((($38)*(4899))&-1);
   var $40=((($32)+($39))|0);
   var $41=((($40)+(8192))|0);
   var $42=$41 >> 14;
   $t=$42;
   var $43=$t;
   var $44=(($43) & 255);
   var $45=$i;
   var $46=$3;
   var $47=(($46+$45)|0);
   HEAP8[($47)]=$44;
   label = 6; break;
  case 6: 
   var $49=$i;
   var $50=((($49)+(1))|0);
   $i=$50;
   var $51=$1;
   var $52=(($51+3)|0);
   $1=$52;
   label = 4; break;
  case 7: 
   var $54=$2;
   var $55=(($size)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)*(3))&-1);
   var $58=((($54)-($57))|0);
   var $59=$1;
   var $60=(($59+$58)|0);
   $1=$60;
   label = 8; break;
  case 8: 
   var $62=$4;
   var $63=$3;
   var $64=(($63+$62)|0);
   $3=$64;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z25icvCvt_BGRA2Gray_8u_C4C1RPKhiPhi6CvSizei($rgba, $rgba_step, $gray, $gray_step, $size, $_swap_rb) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $swap_rb;
   var $t;
   $1=$rgba;
   $2=$rgba_step;
   $3=$gray;
   $4=$gray_step;
   $5=$_swap_rb;
   var $6=$5;
   var $7=(($6)|(0))!=0;
   var $8=$7 ? 2 : 0;
   $swap_rb=$8;
   label = 2; break;
  case 2: 
   var $10=(($size+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)-(1))|0);
   HEAP32[(($10)>>2)]=$12;
   var $13=(($11)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $16=$i;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($16)|(0)) < (($18)|(0));
   if ($19) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $21=$swap_rb;
   var $22=$1;
   var $23=(($22+$21)|0);
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   var $26=((($25)*(1868))&-1);
   var $27=$1;
   var $28=(($27+1)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=((($30)*(9617))&-1);
   var $32=((($26)+($31))|0);
   var $33=$swap_rb;
   var $34=$33 ^ 2;
   var $35=$1;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   var $39=((($38)*(4899))&-1);
   var $40=((($32)+($39))|0);
   var $41=((($40)+(8192))|0);
   var $42=$41 >> 14;
   $t=$42;
   var $43=$t;
   var $44=(($43) & 255);
   var $45=$i;
   var $46=$3;
   var $47=(($46+$45)|0);
   HEAP8[($47)]=$44;
   label = 6; break;
  case 6: 
   var $49=$i;
   var $50=((($49)+(1))|0);
   $i=$50;
   var $51=$1;
   var $52=(($51+4)|0);
   $1=$52;
   label = 4; break;
  case 7: 
   var $54=$2;
   var $55=(($size)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=($56<<2);
   var $58=((($54)-($57))|0);
   var $59=$1;
   var $60=(($59+$58)|0);
   $1=$60;
   label = 8; break;
  case 8: 
   var $62=$4;
   var $63=$3;
   var $64=(($63+$62)|0);
   $3=$64;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z24icvCvt_Gray2BGR_8u_C1C3RPKhiPhi6CvSize($gray, $gray_step, $bgr, $bgr_step, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   $1=$gray;
   $2=$gray_step;
   $3=$bgr;
   $4=$bgr_step;
   label = 2; break;
  case 2: 
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0)) < (($14)|(0));
   if ($15) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $17=$i;
   var $18=$1;
   var $19=(($18+$17)|0);
   var $20=HEAP8[($19)];
   var $21=$3;
   var $22=(($21+2)|0);
   HEAP8[($22)]=$20;
   var $23=$3;
   var $24=(($23+1)|0);
   HEAP8[($24)]=$20;
   var $25=$3;
   var $26=(($25)|0);
   HEAP8[($26)]=$20;
   label = 6; break;
  case 6: 
   var $28=$i;
   var $29=((($28)+(1))|0);
   $i=$29;
   var $30=$3;
   var $31=(($30+3)|0);
   $3=$31;
   label = 4; break;
  case 7: 
   var $33=$4;
   var $34=(($size)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   var $37=((($33)-($36))|0);
   var $38=$3;
   var $39=(($38+$37)|0);
   $3=$39;
   label = 8; break;
  case 8: 
   var $41=$2;
   var $42=$1;
   var $43=(($42+$41)|0);
   $1=$43;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL12icvLoadImagePKcib($filename, $flags, $load_as_matrix) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $reader;
   var $image=sp;
   var $hdr=(sp)+(8);
   var $matrix=(sp)+(40);
   var $depth;
   var $size=(sp)+(48);
   var $iscolor;
   var $cn;
   var $type;
   var $type1;
   var $4=(sp)+(56);
   $1=$filename;
   $2=$flags;
   var $5=(($load_as_matrix)&(1));
   $3=$5;
   $reader=0;
   HEAP32[(($image)>>2)]=0;
   HEAP32[(($matrix)>>2)]=0;
   $depth=8;
   var $6=$1;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=_strlen($9);
   var $11=(($10)|(0))==0;
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-27, ((18280)|0), ((12144)|0), ((12352)|0), 380);
   label = 45; break;
  case 4: 
   var $14=$1;
   var $15=__ZNK14CvImageFilters10FindReaderEPKc(37576, $14);
   $reader=$15;
   var $16=$reader;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 6; break; } else { label = 5; break; }
  case 5: 
   label = 45; break;
  case 6: 
   var $20=$reader;
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=FUNCTION_TABLE[$24]($20);
   if ($25) { label = 8; break; } else { label = 7; break; }
  case 7: 
   label = 45; break;
  case 8: 
   var $28=$reader;
   var $29=__ZN11GrFmtReader8GetWidthEv($28);
   var $30=(($size)|0);
   HEAP32[(($30)>>2)]=$29;
   var $31=$reader;
   var $32=__ZN11GrFmtReader9GetHeightEv($31);
   var $33=(($size+4)|0);
   HEAP32[(($33)>>2)]=$32;
   var $34=$2;
   var $35=(($34)|(0))==-1;
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $37=$reader;
   var $38=__ZN11GrFmtReader7IsColorEv($37);
   var $39=(($38)&(1));
   $iscolor=$39;
   label = 18; break;
  case 10: 
   var $41=$2;
   var $42=$41 & 1;
   var $43=(($42)|(0))!=0;
   if ($43) { label = 13; break; } else { label = 11; break; }
  case 11: 
   var $45=$2;
   var $46=$45 & 4;
   var $47=(($46)|(0))!=0;
   if ($47) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $49=$reader;
   var $50=__ZN11GrFmtReader7IsColorEv($49);
   if ($50) { label = 13; break; } else { label = 14; break; }
  case 13: 
   $iscolor=1;
   label = 15; break;
  case 14: 
   $iscolor=0;
   label = 15; break;
  case 15: 
   var $54=$2;
   var $55=$54 & 2;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $58=$reader;
   __ZN11GrFmtReader14UseNativeDepthEb($58, 1);
   var $59=$reader;
   var $60=__ZN11GrFmtReader8GetDepthEv($59);
   $depth=$60;
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $63=$iscolor;
   var $64=(($63)|(0))!=0;
   var $65=$64 ? 3 : 1;
   $cn=$65;
   var $66=$3;
   var $67=(($66) & 1);
   if ($67) { label = 19; break; } else { label = 29; break; }
  case 19: 
   var $69=$reader;
   var $70=__ZN11GrFmtReader7IsFloatEv($69);
   if ($70) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $72=$depth;
   var $73=(($72)|(0))!=8;
   if ($73) { label = 21; break; } else { label = 22; break; }
  case 21: 
   $type=5;
   label = 26; break;
  case 22: 
   var $76=$depth;
   var $77=(($76)|(0)) <= 8;
   if ($77) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $84 = 0;label = 25; break;
  case 24: 
   var $80=$depth;
   var $81=(($80)|(0)) <= 16;
   var $82=$81 ? 2 : 4;
   var $84 = $82;label = 25; break;
  case 25: 
   var $84;
   $type=$84;
   label = 26; break;
  case 26: 
   var $86=(($size+4)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($size)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=$type;
   var $91=$cn;
   var $92=((($91)-(1))|0);
   var $93=$92 << 3;
   var $94=((($90)+($93))|0);
   var $95=_cvCreateMat($87, $89, $94);
   HEAP32[(($matrix)>>2)]=$95;
   var $96=_cvGetErrStatus();
   var $97=(($96)|(0)) < 0;
   if ($97) { label = 27; break; } else { label = 28; break; }
  case 27: 
   _cvError(-1, ((18280)|0), ((11240)|0), ((12352)|0), 418);
   label = 45; break;
  case 28: 
   label = 39; break;
  case 29: 
   var $101=$reader;
   var $102=__ZN11GrFmtReader7IsFloatEv($101);
   if ($102) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $104=$depth;
   var $105=(($104)|(0))!=8;
   if ($105) { label = 31; break; } else { label = 32; break; }
  case 31: 
   $type1=32;
   label = 36; break;
  case 32: 
   var $108=$depth;
   var $109=(($108)|(0)) <= 8;
   if ($109) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $116 = 8;label = 35; break;
  case 34: 
   var $112=$depth;
   var $113=(($112)|(0)) <= 16;
   var $114=$113 ? 16 : -2147483616;
   var $116 = $114;label = 35; break;
  case 35: 
   var $116;
   $type1=$116;
   label = 36; break;
  case 36: 
   var $118=$4;
   var $119=$size;
   assert(8 % 1 === 0);HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[((($118)+(4))>>2)]=HEAP32[((($119)+(4))>>2)];
   var $120=$type1;
   var $121=$cn;
   var $122=_cvCreateImage($4, $120, $121);
   HEAP32[(($image)>>2)]=$122;
   var $123=_cvGetErrStatus();
   var $124=(($123)|(0)) < 0;
   if ($124) { label = 37; break; } else { label = 38; break; }
  case 37: 
   _cvError(-1, ((18280)|0), ((11240)|0), ((12352)|0), 427);
   label = 45; break;
  case 38: 
   var $127=HEAP32[(($image)>>2)];
   var $128=$127;
   var $129=_cvGetMat($128, $hdr, 0, 0);
   HEAP32[(($matrix)>>2)]=$129;
   label = 39; break;
  case 39: 
   var $131=$reader;
   var $132=$131;
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+12)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=HEAP32[(($matrix)>>2)];
   var $137=(($136+16)|0);
   var $138=$137;
   var $139=HEAP32[(($138)>>2)];
   var $140=HEAP32[(($matrix)>>2)];
   var $141=(($140+4)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=$iscolor;
   var $144=FUNCTION_TABLE[$135]($131, $139, $142, $143);
   if ($144) { label = 44; break; } else { label = 40; break; }
  case 40: 
   var $146=$3;
   var $147=(($146) & 1);
   if ($147) { label = 41; break; } else { label = 42; break; }
  case 41: 
   _cvReleaseMat($matrix);
   label = 43; break;
  case 42: 
   _cvReleaseImage($image);
   label = 43; break;
  case 43: 
   label = 45; break;
  case 44: 
   label = 45; break;
  case 45: 
   var $153=$reader;
   var $154=(($153)|(0))==0;
   if ($154) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $156=$153;
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157+4)|0);
   var $159=HEAP32[(($158)>>2)];
   FUNCTION_TABLE[$159]($153);
   label = 47; break;
  case 47: 
   var $161=_cvGetErrStatus();
   var $162=(($161)|(0)) < 0;
   if ($162) { label = 48; break; } else { label = 52; break; }
  case 48: 
   var $164=$3;
   var $165=(($164) & 1);
   if ($165) { label = 49; break; } else { label = 50; break; }
  case 49: 
   _cvReleaseMat($matrix);
   label = 51; break;
  case 50: 
   _cvReleaseImage($image);
   label = 51; break;
  case 51: 
   label = 52; break;
  case 52: 
   var $170=$3;
   var $171=(($170) & 1);
   if ($171) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $173=HEAP32[(($matrix)>>2)];
   var $174=$173;
   var $179 = $174;label = 55; break;
  case 54: 
   var $176=HEAP32[(($image)>>2)];
   var $177=$176;
   var $179 = $177;label = 55; break;
  case 55: 
   var $179;
   STACKTOP = sp;
   return $179;
  default: assert(0, "bad label: " + label);
 }
}
function _cvLoadImageM($filename, $iscolor) {
 var label = 0;
 var $1;
 var $2;
 $1=$filename;
 $2=$iscolor;
 var $3=$1;
 var $4=$2;
 var $5=__ZL12icvLoadImagePKcib($3, $4, 1);
 var $6=$5;
 return $6;
}
function _cvSaveImage($filename, $arr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $origin;
   var $writer;
   var $temp=sp;
   var $temp2=(sp)+(8);
   var $stub=(sp)+(16);
   var $image;
   var $channels;
   var $ipl_depth;
   $1=$filename;
   $2=$arr;
   $origin=0;
   $writer=0;
   HEAP32[(($temp)>>2)]=0;
   HEAP32[(($temp2)>>2)]=0;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=_strlen($6);
   var $8=(($7)|(0))==0;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-27, ((6752)|0), ((12144)|0), ((12352)|0), 484);
   label = 31; break;
  case 4: 
   var $11=$2;
   var $12=_cvGetMat($11, $stub, 0, 0);
   $image=$12;
   var $13=_cvGetErrStatus();
   var $14=(($13)|(0)) < 0;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((6752)|0), ((11240)|0), ((12352)|0), 486);
   label = 31; break;
  case 6: 
   var $17=$2;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $20=$2;
   var $21=$20;
   var $22=(($21)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==112;
   if ($24) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $26=$2;
   var $27=$26;
   var $28=(($27+68)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))!=0;
   if ($30) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $32=$2;
   var $33=$32;
   var $34=(($33+32)|0);
   var $35=HEAP32[(($34)>>2)];
   $origin=$35;
   label = 10; break;
  case 10: 
   var $37=$image;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$39 & 504;
   var $41=$40 >> 3;
   var $42=((($41)+(1))|0);
   $channels=$42;
   var $43=$channels;
   var $44=(($43)|(0))!=1;
   if ($44) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $46=$channels;
   var $47=(($46)|(0))!=3;
   if ($47) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $49=$channels;
   var $50=(($49)|(0))!=4;
   if ($50) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-15, ((6752)|0), ((36872)|0), ((12352)|0), 493);
   label = 31; break;
  case 14: 
   var $53=$1;
   var $54=__ZNK14CvImageFilters10FindWriterEPKc(37576, $53);
   $writer=$54;
   var $55=$writer;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 16; break; } else { label = 15; break; }
  case 15: 
   _cvError(-2, ((6752)|0), ((9448)|0), ((12352)|0), 497);
   label = 31; break;
  case 16: 
   var $59=$origin;
   var $60=(($59)|(0))!=0;
   if ($60) { label = 17; break; } else { label = 22; break; }
  case 17: 
   var $62=$image;
   var $63=(($62+20)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=$image;
   var $67=(($66+24)|0);
   var $68=$67;
   var $69=HEAP32[(($68)>>2)];
   var $70=$image;
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=_cvCreateMat($65, $69, $72);
   HEAP32[(($temp)>>2)]=$73;
   var $74=_cvGetErrStatus();
   var $75=(($74)|(0)) < 0;
   if ($75) { label = 18; break; } else { label = 19; break; }
  case 18: 
   _cvError(-1, ((6752)|0), ((11240)|0), ((12352)|0), 501);
   label = 31; break;
  case 19: 
   var $78=$image;
   var $79=$78;
   var $80=HEAP32[(($temp)>>2)];
   var $81=$80;
   _cvFlip($79, $81, 0);
   var $82=_cvGetErrStatus();
   var $83=(($82)|(0)) < 0;
   if ($83) { label = 20; break; } else { label = 21; break; }
  case 20: 
   _cvError(-1, ((6752)|0), ((11240)|0), ((12352)|0), 502);
   label = 31; break;
  case 21: 
   var $86=HEAP32[(($temp)>>2)];
   $image=$86;
   label = 22; break;
  case 22: 
   var $88=$image;
   var $89=(($88)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=__Z14cvCvToIplDepthi($90);
   $ipl_depth=$91;
   var $92=$writer;
   var $93=$92;
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94+8)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$ipl_depth;
   var $98=FUNCTION_TABLE[$96]($92, $97);
   if ($98) { label = 28; break; } else { label = 23; break; }
  case 23: 
   var $100=$image;
   var $101=(($100+20)|0);
   var $102=$101;
   var $103=HEAP32[(($102)>>2)];
   var $104=$image;
   var $105=(($104+24)|0);
   var $106=$105;
   var $107=HEAP32[(($106)>>2)];
   var $108=$channels;
   var $109=((($108)-(1))|0);
   var $110=$109 << 3;
   var $111=(($110)|0);
   var $112=_cvCreateMat($103, $107, $111);
   HEAP32[(($temp2)>>2)]=$112;
   var $113=_cvGetErrStatus();
   var $114=(($113)|(0)) < 0;
   if ($114) { label = 24; break; } else { label = 25; break; }
  case 24: 
   _cvError(-1, ((6752)|0), ((11240)|0), ((12352)|0), 512);
   label = 31; break;
  case 25: 
   var $117=$image;
   var $118=$117;
   var $119=HEAP32[(($temp2)>>2)];
   var $120=$119;
   _cvConvertImage($118, $120, 0);
   var $121=_cvGetErrStatus();
   var $122=(($121)|(0)) < 0;
   if ($122) { label = 26; break; } else { label = 27; break; }
  case 26: 
   _cvError(-1, ((6752)|0), ((11240)|0), ((12352)|0), 513);
   label = 31; break;
  case 27: 
   var $125=HEAP32[(($temp2)>>2)];
   $image=$125;
   $ipl_depth=8;
   label = 28; break;
  case 28: 
   var $127=$writer;
   var $128=$127;
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+12)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=$image;
   var $133=(($132+16)|0);
   var $134=$133;
   var $135=HEAP32[(($134)>>2)];
   var $136=$image;
   var $137=(($136+4)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=$image;
   var $140=(($139+24)|0);
   var $141=$140;
   var $142=HEAP32[(($141)>>2)];
   var $143=$image;
   var $144=(($143+20)|0);
   var $145=$144;
   var $146=HEAP32[(($145)>>2)];
   var $147=$ipl_depth;
   var $148=$channels;
   var $149=FUNCTION_TABLE[$131]($127, $135, $138, $142, $146, $147, $148);
   if ($149) { label = 30; break; } else { label = 29; break; }
  case 29: 
   _cvError(-2, ((6752)|0), ((9000)|0), ((12352)|0), 520);
   label = 31; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $153=$writer;
   var $154=(($153)|(0))==0;
   if ($154) { label = 33; break; } else { label = 32; break; }
  case 32: 
   var $156=$153;
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157+4)|0);
   var $159=HEAP32[(($158)>>2)];
   FUNCTION_TABLE[$159]($153);
   label = 33; break;
  case 33: 
   _cvReleaseMat($temp);
   _cvReleaseMat($temp2);
   var $161=_cvGetErrStatus();
   var $162=(($161)|(0)) >= 0;
   var $163=(($162)&(1));
   STACKTOP = sp;
   return $163;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a() {
 var label = 0;
 ___cxx_global_var_init();
 ___cxx_global_var_init1();
 return;
}
function __Z24icvCvt_BGRA2BGR_8u_C4C3RPKhiPhi6CvSizei($bgra, $bgra_step, $bgr, $bgr_step, $size, $_swap_rb) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $swap_rb;
   var $t0;
   var $t1;
   $1=$bgra;
   $2=$bgra_step;
   $3=$bgr;
   $4=$bgr_step;
   $5=$_swap_rb;
   var $6=$5;
   var $7=(($6)|(0))!=0;
   var $8=$7 ? 2 : 0;
   $swap_rb=$8;
   label = 2; break;
  case 2: 
   var $10=(($size+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)-(1))|0);
   HEAP32[(($10)>>2)]=$12;
   var $13=(($11)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 8; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $16=$i;
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($16)|(0)) < (($18)|(0));
   if ($19) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $21=$swap_rb;
   var $22=$1;
   var $23=(($22+$21)|0);
   var $24=HEAP8[($23)];
   $t0=$24;
   var $25=$1;
   var $26=(($25+1)|0);
   var $27=HEAP8[($26)];
   $t1=$27;
   var $28=$t0;
   var $29=$3;
   var $30=(($29)|0);
   HEAP8[($30)]=$28;
   var $31=$t1;
   var $32=$3;
   var $33=(($32+1)|0);
   HEAP8[($33)]=$31;
   var $34=$swap_rb;
   var $35=$34 ^ 2;
   var $36=$1;
   var $37=(($36+$35)|0);
   var $38=HEAP8[($37)];
   $t0=$38;
   var $39=$t0;
   var $40=$3;
   var $41=(($40+2)|0);
   HEAP8[($41)]=$39;
   label = 6; break;
  case 6: 
   var $43=$i;
   var $44=((($43)+(1))|0);
   $i=$44;
   var $45=$3;
   var $46=(($45+3)|0);
   $3=$46;
   var $47=$1;
   var $48=(($47+4)|0);
   $1=$48;
   label = 4; break;
  case 7: 
   var $50=$4;
   var $51=(($size)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=((($52)*(3))&-1);
   var $54=((($50)-($53))|0);
   var $55=$3;
   var $56=(($55+$54)|0);
   $3=$56;
   var $57=$2;
   var $58=(($size)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=($59<<2);
   var $61=((($57)-($60))|0);
   var $62=$1;
   var $63=(($62+$61)|0);
   $1=$63;
   label = 2; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z23icvCvt_BGRA2RGBA_8u_C4RPKhiPhi6CvSize($bgra, $bgra_step, $rgba, $rgba_step, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   var $t3;
   $1=$bgra;
   $2=$bgra_step;
   $3=$rgba;
   $4=$rgba_step;
   label = 2; break;
  case 2: 
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 8; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0)) < (($14)|(0));
   if ($15) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $17=$1;
   var $18=(($17)|0);
   var $19=HEAP8[($18)];
   $t0=$19;
   var $20=$1;
   var $21=(($20+1)|0);
   var $22=HEAP8[($21)];
   $t1=$22;
   var $23=$1;
   var $24=(($23+2)|0);
   var $25=HEAP8[($24)];
   $t2=$25;
   var $26=$1;
   var $27=(($26+3)|0);
   var $28=HEAP8[($27)];
   $t3=$28;
   var $29=$t2;
   var $30=$3;
   var $31=(($30)|0);
   HEAP8[($31)]=$29;
   var $32=$t1;
   var $33=$3;
   var $34=(($33+1)|0);
   HEAP8[($34)]=$32;
   var $35=$t0;
   var $36=$3;
   var $37=(($36+2)|0);
   HEAP8[($37)]=$35;
   var $38=$t3;
   var $39=$3;
   var $40=(($39+3)|0);
   HEAP8[($40)]=$38;
   label = 6; break;
  case 6: 
   var $42=$i;
   var $43=((($42)+(1))|0);
   $i=$43;
   var $44=$1;
   var $45=(($44+4)|0);
   $1=$45;
   var $46=$3;
   var $47=(($46+4)|0);
   $3=$47;
   label = 4; break;
  case 7: 
   var $49=$2;
   var $50=(($size)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=($51<<2);
   var $53=((($49)-($52))|0);
   var $54=$1;
   var $55=(($54+$53)|0);
   $1=$55;
   var $56=$4;
   var $57=(($size)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=($58<<2);
   var $60=((($56)-($59))|0);
   var $61=$3;
   var $62=(($61+$60)|0);
   $3=$62;
   label = 2; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z21icvCvt_BGR2RGB_8u_C3RPKhiPhi6CvSize($bgr, $bgr_step, $rgb, $rgb_step, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$bgr;
   $2=$bgr_step;
   $3=$rgb;
   $4=$rgb_step;
   label = 2; break;
  case 2: 
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 8; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0)) < (($14)|(0));
   if ($15) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $17=$1;
   var $18=(($17)|0);
   var $19=HEAP8[($18)];
   $t0=$19;
   var $20=$1;
   var $21=(($20+1)|0);
   var $22=HEAP8[($21)];
   $t1=$22;
   var $23=$1;
   var $24=(($23+2)|0);
   var $25=HEAP8[($24)];
   $t2=$25;
   var $26=$t0;
   var $27=$3;
   var $28=(($27+2)|0);
   HEAP8[($28)]=$26;
   var $29=$t1;
   var $30=$3;
   var $31=(($30+1)|0);
   HEAP8[($31)]=$29;
   var $32=$t2;
   var $33=$3;
   var $34=(($33)|0);
   HEAP8[($34)]=$32;
   label = 6; break;
  case 6: 
   var $36=$i;
   var $37=((($36)+(1))|0);
   $i=$37;
   var $38=$1;
   var $39=(($38+3)|0);
   $1=$39;
   var $40=$3;
   var $41=(($40+3)|0);
   $3=$41;
   label = 4; break;
  case 7: 
   var $43=$2;
   var $44=(($size)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=((($45)*(3))&-1);
   var $47=((($43)-($46))|0);
   var $48=$1;
   var $49=(($48+$47)|0);
   $1=$49;
   var $50=$4;
   var $51=(($size)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=((($52)*(3))&-1);
   var $54=((($50)-($53))|0);
   var $55=$3;
   var $56=(($55+$54)|0);
   $3=$56;
   label = 2; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z27icvCvt_BGR5552Gray_8u_C2C1RPKhiPhi6CvSize($bgr555, $bgr555_step, $gray, $gray_step, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t;
   $1=$bgr555;
   $2=$bgr555_step;
   $3=$gray;
   $4=$gray_step;
   label = 2; break;
  case 2: 
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0)) < (($14)|(0));
   if ($15) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $17=$i;
   var $18=$1;
   var $19=$18;
   var $20=(($19+($17<<1))|0);
   var $21=HEAP16[(($20)>>1)];
   var $22=(($21)&(65535));
   var $23=$22 << 3;
   var $24=$23 & 248;
   var $25=((($24)*(1868))&-1);
   var $26=$i;
   var $27=$1;
   var $28=$27;
   var $29=(($28+($26<<1))|0);
   var $30=HEAP16[(($29)>>1)];
   var $31=(($30)&(65535));
   var $32=$31 >> 2;
   var $33=$32 & 248;
   var $34=((($33)*(9617))&-1);
   var $35=((($25)+($34))|0);
   var $36=$i;
   var $37=$1;
   var $38=$37;
   var $39=(($38+($36<<1))|0);
   var $40=HEAP16[(($39)>>1)];
   var $41=(($40)&(65535));
   var $42=$41 >> 7;
   var $43=$42 & 248;
   var $44=((($43)*(4899))&-1);
   var $45=((($35)+($44))|0);
   var $46=((($45)+(8192))|0);
   var $47=$46 >> 14;
   $t=$47;
   var $48=$t;
   var $49=(($48) & 255);
   var $50=$i;
   var $51=$3;
   var $52=(($51+$50)|0);
   HEAP8[($52)]=$49;
   label = 6; break;
  case 6: 
   var $54=$i;
   var $55=((($54)+(1))|0);
   $i=$55;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $58=$4;
   var $59=$3;
   var $60=(($59+$58)|0);
   $3=$60;
   var $61=$2;
   var $62=$1;
   var $63=(($62+$61)|0);
   $1=$63;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z27icvCvt_BGR5652Gray_8u_C2C1RPKhiPhi6CvSize($bgr565, $bgr565_step, $gray, $gray_step, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t;
   $1=$bgr565;
   $2=$bgr565_step;
   $3=$gray;
   $4=$gray_step;
   label = 2; break;
  case 2: 
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0)) < (($14)|(0));
   if ($15) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $17=$i;
   var $18=$1;
   var $19=$18;
   var $20=(($19+($17<<1))|0);
   var $21=HEAP16[(($20)>>1)];
   var $22=(($21)&(65535));
   var $23=$22 << 3;
   var $24=$23 & 248;
   var $25=((($24)*(1868))&-1);
   var $26=$i;
   var $27=$1;
   var $28=$27;
   var $29=(($28+($26<<1))|0);
   var $30=HEAP16[(($29)>>1)];
   var $31=(($30)&(65535));
   var $32=$31 >> 3;
   var $33=$32 & 252;
   var $34=((($33)*(9617))&-1);
   var $35=((($25)+($34))|0);
   var $36=$i;
   var $37=$1;
   var $38=$37;
   var $39=(($38+($36<<1))|0);
   var $40=HEAP16[(($39)>>1)];
   var $41=(($40)&(65535));
   var $42=$41 >> 8;
   var $43=$42 & 248;
   var $44=((($43)*(4899))&-1);
   var $45=((($35)+($44))|0);
   var $46=((($45)+(8192))|0);
   var $47=$46 >> 14;
   $t=$47;
   var $48=$t;
   var $49=(($48) & 255);
   var $50=$i;
   var $51=$3;
   var $52=(($51+$50)|0);
   HEAP8[($52)]=$49;
   label = 6; break;
  case 6: 
   var $54=$i;
   var $55=((($54)+(1))|0);
   $i=$55;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $58=$4;
   var $59=$3;
   var $60=(($59+$58)|0);
   $3=$60;
   var $61=$2;
   var $62=$1;
   var $63=(($62+$61)|0);
   $1=$63;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z26icvCvt_BGR5552BGR_8u_C2C3RPKhiPhi6CvSize($bgr555, $bgr555_step, $bgr, $bgr_step, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$bgr555;
   $2=$bgr555_step;
   $3=$bgr;
   $4=$bgr_step;
   label = 2; break;
  case 2: 
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0)) < (($14)|(0));
   if ($15) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $17=$i;
   var $18=$1;
   var $19=$18;
   var $20=(($19+($17<<1))|0);
   var $21=HEAP16[(($20)>>1)];
   var $22=(($21)&(65535));
   var $23=$22 << 3;
   var $24=$23 & 248;
   $t0=$24;
   var $25=$i;
   var $26=$1;
   var $27=$26;
   var $28=(($27+($25<<1))|0);
   var $29=HEAP16[(($28)>>1)];
   var $30=(($29)&(65535));
   var $31=$30 >> 2;
   var $32=$31 & 248;
   $t1=$32;
   var $33=$i;
   var $34=$1;
   var $35=$34;
   var $36=(($35+($33<<1))|0);
   var $37=HEAP16[(($36)>>1)];
   var $38=(($37)&(65535));
   var $39=$38 >> 7;
   var $40=$39 & 248;
   $t2=$40;
   var $41=$t0;
   var $42=(($41) & 255);
   var $43=$3;
   var $44=(($43)|0);
   HEAP8[($44)]=$42;
   var $45=$t1;
   var $46=(($45) & 255);
   var $47=$3;
   var $48=(($47+1)|0);
   HEAP8[($48)]=$46;
   var $49=$t2;
   var $50=(($49) & 255);
   var $51=$3;
   var $52=(($51+2)|0);
   HEAP8[($52)]=$50;
   label = 6; break;
  case 6: 
   var $54=$i;
   var $55=((($54)+(1))|0);
   $i=$55;
   var $56=$3;
   var $57=(($56+3)|0);
   $3=$57;
   label = 4; break;
  case 7: 
   var $59=$4;
   var $60=(($size)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=((($61)*(3))&-1);
   var $63=((($59)-($62))|0);
   var $64=$3;
   var $65=(($64+$63)|0);
   $3=$65;
   label = 8; break;
  case 8: 
   var $67=$2;
   var $68=$1;
   var $69=(($68+$67)|0);
   $1=$69;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z26icvCvt_BGR5652BGR_8u_C2C3RPKhiPhi6CvSize($bgr565, $bgr565_step, $bgr, $bgr_step, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$bgr565;
   $2=$bgr565_step;
   $3=$bgr;
   $4=$bgr_step;
   label = 2; break;
  case 2: 
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0)) < (($14)|(0));
   if ($15) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $17=$i;
   var $18=$1;
   var $19=$18;
   var $20=(($19+($17<<1))|0);
   var $21=HEAP16[(($20)>>1)];
   var $22=(($21)&(65535));
   var $23=$22 << 3;
   var $24=$23 & 248;
   $t0=$24;
   var $25=$i;
   var $26=$1;
   var $27=$26;
   var $28=(($27+($25<<1))|0);
   var $29=HEAP16[(($28)>>1)];
   var $30=(($29)&(65535));
   var $31=$30 >> 3;
   var $32=$31 & 252;
   $t1=$32;
   var $33=$i;
   var $34=$1;
   var $35=$34;
   var $36=(($35+($33<<1))|0);
   var $37=HEAP16[(($36)>>1)];
   var $38=(($37)&(65535));
   var $39=$38 >> 8;
   var $40=$39 & 248;
   $t2=$40;
   var $41=$t0;
   var $42=(($41) & 255);
   var $43=$3;
   var $44=(($43)|0);
   HEAP8[($44)]=$42;
   var $45=$t1;
   var $46=(($45) & 255);
   var $47=$3;
   var $48=(($47+1)|0);
   HEAP8[($48)]=$46;
   var $49=$t2;
   var $50=(($49) & 255);
   var $51=$3;
   var $52=(($51+2)|0);
   HEAP8[($52)]=$50;
   label = 6; break;
  case 6: 
   var $54=$i;
   var $55=((($54)+(1))|0);
   $i=$55;
   var $56=$3;
   var $57=(($56+3)|0);
   $3=$57;
   label = 4; break;
  case 7: 
   var $59=$4;
   var $60=(($size)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=((($61)*(3))&-1);
   var $63=((($59)-($62))|0);
   var $64=$3;
   var $65=(($64+$63)|0);
   $3=$65;
   label = 8; break;
  case 8: 
   var $67=$2;
   var $68=$1;
   var $69=(($68+$67)|0);
   $1=$69;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z15FillGrayPaletteP12PaletteEntryib($palette, $bpp, $negative) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   var $length;
   var $xor_mask;
   var $val;
   $1=$palette;
   $2=$bpp;
   var $4=(($negative)&(1));
   $3=$4;
   var $5=$2;
   var $6=1 << $5;
   $length=$6;
   var $7=$3;
   var $8=(($7) & 1);
   var $9=$8 ? 255 : 0;
   $xor_mask=$9;
   $i=0;
   label = 2; break;
  case 2: 
   var $11=$i;
   var $12=$length;
   var $13=(($11)|(0)) < (($12)|(0));
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=$i;
   var $16=((($15)*(255))&-1);
   var $17=$length;
   var $18=((($17)-(1))|0);
   var $19=((((($16)|(0)))/((($18)|(0))))&-1);
   var $20=$xor_mask;
   var $21=$19 ^ $20;
   $val=$21;
   var $22=$val;
   var $23=(($22) & 255);
   var $24=$i;
   var $25=$1;
   var $26=(($25+($24<<2))|0);
   var $27=(($26+2)|0);
   HEAP8[($27)]=$23;
   var $28=$i;
   var $29=$1;
   var $30=(($29+($28<<2))|0);
   var $31=(($30+1)|0);
   HEAP8[($31)]=$23;
   var $32=$i;
   var $33=$1;
   var $34=(($33+($32<<2))|0);
   var $35=(($34)|0);
   HEAP8[($35)]=$23;
   var $36=$i;
   var $37=$1;
   var $38=(($37+($36<<2))|0);
   var $39=(($38+3)|0);
   HEAP8[($39)]=0;
   label = 4; break;
  case 4: 
   var $41=$i;
   var $42=((($41)+(1))|0);
   $i=$42;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z14IsColorPaletteP12PaletteEntryi($palette, $bpp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   var $length;
   $2=$palette;
   $3=$bpp;
   var $4=$3;
   var $5=1 << $4;
   $length=$5;
   $i=0;
   label = 2; break;
  case 2: 
   var $7=$i;
   var $8=$length;
   var $9=(($7)|(0)) < (($8)|(0));
   if ($9) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $11=$i;
   var $12=$2;
   var $13=(($12+($11<<2))|0);
   var $14=(($13)|0);
   var $15=HEAP8[($14)];
   var $16=(($15)&(255));
   var $17=$i;
   var $18=$2;
   var $19=(($18+($17<<2))|0);
   var $20=(($19+1)|0);
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=(($16)|(0))!=(($22)|(0));
   if ($23) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $25=$i;
   var $26=$2;
   var $27=(($26+($25<<2))|0);
   var $28=(($27)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=$i;
   var $32=$2;
   var $33=(($32+($31<<2))|0);
   var $34=(($33+2)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   var $37=(($30)|(0))!=(($36)|(0));
   if ($37) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $1=1;
   label = 9; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $41=$i;
   var $42=((($41)+(1))|0);
   $i=$42;
   label = 2; break;
  case 8: 
   $1=0;
   label = 9; break;
  case 9: 
   var $45=$1;
   return $45;
  default: assert(0, "bad label: " + label);
 }
}
function __Z16CvtPaletteToGrayPK12PaletteEntryPhi($palette, $grayPalette, $entries) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   var $4=sp;
   $1=$palette;
   $2=$grayPalette;
   $3=$entries;
   $i=0;
   label = 2; break;
  case 2: 
   var $6=$i;
   var $7=$3;
   var $8=(($6)|(0)) < (($7)|(0));
   if ($8) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $10=$1;
   var $11=$i;
   var $12=(($10+($11<<2))|0);
   var $13=$12;
   var $14=$2;
   var $15=$i;
   var $16=(($14+$15)|0);
   __Z6cvSizeii($4, 1, 1);
   __Z24icvCvt_BGR2Gray_8u_C3C1RPKhiPhi6CvSizei($13, 0, $16, 0, $4, 0);
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=((($18)+(1))|0);
   $i=$19;
   label = 2; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z12FillUniColorPhRS_iiRiii12PaletteEntry($data, $line_end, $step, $width3, $y, $height, $count3, $clr) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $clr; $clr = STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($clr)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $end;
   $1=$data;
   $2=$line_end;
   $3=$step;
   $4=$width3;
   $5=$y;
   $6=$height;
   $7=$count3;
   label = 2; break;
  case 2: 
   var $9=$1;
   var $10=$7;
   var $11=(($9+$10)|0);
   $end=$11;
   var $12=$end;
   var $13=$2;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)>>>(0)) > (($14)>>>(0));
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=$2;
   var $18=HEAP32[(($17)>>2)];
   $end=$18;
   label = 4; break;
  case 4: 
   var $20=$end;
   var $21=$1;
   var $22=$20;
   var $23=$21;
   var $24=((($22)-($23))|0);
   var $25=$7;
   var $26=((($25)-($24))|0);
   $7=$26;
   label = 5; break;
  case 5: 
   var $28=$1;
   var $29=$end;
   var $30=(($28)>>>(0)) < (($29)>>>(0));
   if ($30) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $32=(($clr)|0);
   var $33=HEAP8[($32)];
   var $34=$1;
   var $35=(($34)|0);
   HEAP8[($35)]=$33;
   var $36=(($clr+1)|0);
   var $37=HEAP8[($36)];
   var $38=$1;
   var $39=(($38+1)|0);
   HEAP8[($39)]=$37;
   var $40=(($clr+2)|0);
   var $41=HEAP8[($40)];
   var $42=$1;
   var $43=(($42+2)|0);
   HEAP8[($43)]=$41;
   label = 7; break;
  case 7: 
   var $45=$1;
   var $46=(($45+3)|0);
   $1=$46;
   label = 5; break;
  case 8: 
   var $48=$1;
   var $49=$2;
   var $50=HEAP32[(($49)>>2)];
   var $51=(($48)>>>(0)) >= (($50)>>>(0));
   if ($51) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $53=$3;
   var $54=$2;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+$53)|0);
   HEAP32[(($54)>>2)]=$56;
   var $57=$2;
   var $58=HEAP32[(($57)>>2)];
   var $59=$4;
   var $60=(((-$59))|0);
   var $61=(($58+$60)|0);
   $1=$61;
   var $62=$5;
   var $63=HEAP32[(($62)>>2)];
   var $64=((($63)+(1))|0);
   HEAP32[(($62)>>2)]=$64;
   var $65=$6;
   var $66=(($64)|(0)) >= (($65)|(0));
   if ($66) { label = 10; break; } else { label = 11; break; }
  case 10: 
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $71=$7;
   var $72=(($71)|(0)) > 0;
   if ($72) { label = 2; break; } else { label = 14; break; }
  case 14: 
   var $74=$1;
   STACKTOP = sp;
   return $74;
  default: assert(0, "bad label: " + label);
 }
}
function __Z11FillUniGrayPhRS_iiRiiih($data, $line_end, $step, $width, $y, $height, $count, $clr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $end;
   $1=$data;
   $2=$line_end;
   $3=$step;
   $4=$width;
   $5=$y;
   $6=$height;
   $7=$count;
   $8=$clr;
   label = 2; break;
  case 2: 
   var $10=$1;
   var $11=$7;
   var $12=(($10+$11)|0);
   $end=$12;
   var $13=$end;
   var $14=$2;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($13)>>>(0)) > (($15)>>>(0));
   if ($16) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $18=$2;
   var $19=HEAP32[(($18)>>2)];
   $end=$19;
   label = 4; break;
  case 4: 
   var $21=$end;
   var $22=$1;
   var $23=$21;
   var $24=$22;
   var $25=((($23)-($24))|0);
   var $26=$7;
   var $27=((($26)-($25))|0);
   $7=$27;
   label = 5; break;
  case 5: 
   var $29=$1;
   var $30=$end;
   var $31=(($29)>>>(0)) < (($30)>>>(0));
   if ($31) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $33=$8;
   var $34=$1;
   HEAP8[($34)]=$33;
   label = 7; break;
  case 7: 
   var $36=$1;
   var $37=(($36+1)|0);
   $1=$37;
   label = 5; break;
  case 8: 
   var $39=$1;
   var $40=$2;
   var $41=HEAP32[(($40)>>2)];
   var $42=(($39)>>>(0)) >= (($41)>>>(0));
   if ($42) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $44=$3;
   var $45=$2;
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+$44)|0);
   HEAP32[(($45)>>2)]=$47;
   var $48=$2;
   var $49=HEAP32[(($48)>>2)];
   var $50=$4;
   var $51=(((-$50))|0);
   var $52=(($49+$51)|0);
   $1=$52;
   var $53=$5;
   var $54=HEAP32[(($53)>>2)];
   var $55=((($54)+(1))|0);
   HEAP32[(($53)>>2)]=$55;
   var $56=$6;
   var $57=(($55)|(0)) >= (($56)|(0));
   if ($57) { label = 10; break; } else { label = 11; break; }
  case 10: 
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $62=$7;
   var $63=(($62)|(0)) > 0;
   if ($63) { label = 2; break; } else { label = 14; break; }
  case 14: 
   var $65=$1;
   return $65;
  default: assert(0, "bad label: " + label);
 }
}
function __Z12FillGrayRow8PhS_iS_($data, $indices, $len, $palette) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   $1=$data;
   $2=$indices;
   $3=$len;
   $4=$palette;
   $i=0;
   label = 2; break;
  case 2: 
   var $6=$i;
   var $7=$3;
   var $8=(($6)|(0)) < (($7)|(0));
   if ($8) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $10=$i;
   var $11=$2;
   var $12=(($11+$10)|0);
   var $13=HEAP8[($12)];
   var $14=(($13)&(255));
   var $15=$4;
   var $16=(($15+$14)|0);
   var $17=HEAP8[($16)];
   var $18=$i;
   var $19=$1;
   var $20=(($19+$18)|0);
   HEAP8[($20)]=$17;
   label = 4; break;
  case 4: 
   var $22=$i;
   var $23=((($22)+(1))|0);
   $i=$23;
   label = 2; break;
  case 5: 
   var $25=$1;
   var $26=$3;
   var $27=(($25+$26)|0);
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function __Z12FillGrayRow4PhS_iS_($data, $indices, $len, $palette) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $end;
   var $idx;
   var $idx1;
   var $clr;
   $1=$data;
   $2=$indices;
   $3=$len;
   $4=$palette;
   var $5=$1;
   var $6=$3;
   var $7=(($5+$6)|0);
   $end=$7;
   label = 2; break;
  case 2: 
   var $9=$1;
   var $10=(($9+2)|0);
   $1=$10;
   var $11=$end;
   var $12=(($10)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14=$2;
   var $15=(($14+1)|0);
   $2=$15;
   var $16=HEAP8[($14)];
   var $17=(($16)&(255));
   $idx=$17;
   var $18=$idx;
   var $19=$18 >> 4;
   var $20=$4;
   var $21=(($20+$19)|0);
   var $22=HEAP8[($21)];
   var $23=$1;
   var $24=((($23)-(2))|0);
   HEAP8[($24)]=$22;
   var $25=$idx;
   var $26=$25 & 15;
   var $27=$4;
   var $28=(($27+$26)|0);
   var $29=HEAP8[($28)];
   var $30=$1;
   var $31=((($30)-(1))|0);
   HEAP8[($31)]=$29;
   label = 2; break;
  case 4: 
   var $33=$2;
   var $34=(($33)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   $idx1=$36;
   var $37=$idx1;
   var $38=$37 >> 4;
   var $39=$4;
   var $40=(($39+$38)|0);
   var $41=HEAP8[($40)];
   $clr=$41;
   var $42=$clr;
   var $43=$1;
   var $44=((($43)-(2))|0);
   HEAP8[($44)]=$42;
   var $45=$1;
   var $46=$end;
   var $47=(($45)|(0))==(($46)|(0));
   if ($47) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $49=$idx1;
   var $50=$49 & 15;
   var $51=$4;
   var $52=(($51+$50)|0);
   var $53=HEAP8[($52)];
   $clr=$53;
   var $54=$clr;
   var $55=$1;
   var $56=((($55)-(1))|0);
   HEAP8[($56)]=$54;
   label = 6; break;
  case 6: 
   var $58=$end;
   return $58;
  default: assert(0, "bad label: " + label);
 }
}
function __Z12FillGrayRow1PhS_iS_($data, $indices, $len, $palette) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $end;
   var $idx;
   var $idx1;
   $1=$data;
   $2=$indices;
   $3=$len;
   $4=$palette;
   var $5=$1;
   var $6=$3;
   var $7=(($5+$6)|0);
   $end=$7;
   label = 2; break;
  case 2: 
   var $9=$1;
   var $10=(($9+8)|0);
   $1=$10;
   var $11=$end;
   var $12=(($10)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14=$2;
   var $15=(($14+1)|0);
   $2=$15;
   var $16=HEAP8[($14)];
   var $17=(($16)&(255));
   $idx=$17;
   var $18=$idx;
   var $19=$18 & 128;
   var $20=(($19)|(0))!=0;
   var $21=(($20)&(1));
   var $22=$4;
   var $23=(($22+$21)|0);
   var $24=HEAP8[($23)];
   var $25=$1;
   var $26=((($25)-(8))|0);
   HEAP8[($26)]=$24;
   var $27=$idx;
   var $28=$27 & 64;
   var $29=(($28)|(0))!=0;
   var $30=(($29)&(1));
   var $31=$4;
   var $32=(($31+$30)|0);
   var $33=HEAP8[($32)];
   var $34=$1;
   var $35=((($34)-(7))|0);
   HEAP8[($35)]=$33;
   var $36=$idx;
   var $37=$36 & 32;
   var $38=(($37)|(0))!=0;
   var $39=(($38)&(1));
   var $40=$4;
   var $41=(($40+$39)|0);
   var $42=HEAP8[($41)];
   var $43=$1;
   var $44=((($43)-(6))|0);
   HEAP8[($44)]=$42;
   var $45=$idx;
   var $46=$45 & 16;
   var $47=(($46)|(0))!=0;
   var $48=(($47)&(1));
   var $49=$4;
   var $50=(($49+$48)|0);
   var $51=HEAP8[($50)];
   var $52=$1;
   var $53=((($52)-(5))|0);
   HEAP8[($53)]=$51;
   var $54=$idx;
   var $55=$54 & 8;
   var $56=(($55)|(0))!=0;
   var $57=(($56)&(1));
   var $58=$4;
   var $59=(($58+$57)|0);
   var $60=HEAP8[($59)];
   var $61=$1;
   var $62=((($61)-(4))|0);
   HEAP8[($62)]=$60;
   var $63=$idx;
   var $64=$63 & 4;
   var $65=(($64)|(0))!=0;
   var $66=(($65)&(1));
   var $67=$4;
   var $68=(($67+$66)|0);
   var $69=HEAP8[($68)];
   var $70=$1;
   var $71=((($70)-(3))|0);
   HEAP8[($71)]=$69;
   var $72=$idx;
   var $73=$72 & 2;
   var $74=(($73)|(0))!=0;
   var $75=(($74)&(1));
   var $76=$4;
   var $77=(($76+$75)|0);
   var $78=HEAP8[($77)];
   var $79=$1;
   var $80=((($79)-(2))|0);
   HEAP8[($80)]=$78;
   var $81=$idx;
   var $82=$81 & 1;
   var $83=(($82)|(0))!=0;
   var $84=(($83)&(1));
   var $85=$4;
   var $86=(($85+$84)|0);
   var $87=HEAP8[($86)];
   var $88=$1;
   var $89=((($88)-(1))|0);
   HEAP8[($89)]=$87;
   label = 2; break;
  case 4: 
   var $91=$2;
   var $92=(($91)|0);
   var $93=HEAP8[($92)];
   var $94=(($93)&(255));
   var $95=$94 << 24;
   $idx1=$95;
   var $96=$1;
   var $97=((($96)-(8))|0);
   $1=$97;
   label = 5; break;
  case 5: 
   var $99=$1;
   var $100=$end;
   var $101=(($99)>>>(0)) < (($100)>>>(0));
   if ($101) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $103=$idx1;
   var $104=(($103)|(0)) < 0;
   var $105=(($104)&(1));
   var $106=$4;
   var $107=(($106+$105)|0);
   var $108=HEAP8[($107)];
   var $109=$1;
   var $110=(($109)|0);
   HEAP8[($110)]=$108;
   label = 7; break;
  case 7: 
   var $112=$1;
   var $113=(($112+1)|0);
   $1=$113;
   var $114=$idx1;
   var $115=$idx1;
   var $116=((($115)+($114))|0);
   $idx1=$116;
   label = 5; break;
  case 8: 
   var $118=$1;
   return $118;
  default: assert(0, "bad label: " + label);
 }
}
function __Z13FillColorRow8PhS_iP12PaletteEntry($data, $indices, $len, $palette) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $end;
   var $clr=sp;
   $1=$data;
   $2=$indices;
   $3=$len;
   $4=$palette;
   var $5=$1;
   var $6=$3;
   var $7=((($6)*(3))&-1);
   var $8=(($5+$7)|0);
   $end=$8;
   label = 2; break;
  case 2: 
   var $10=$1;
   var $11=(($10+3)|0);
   $1=$11;
   var $12=$end;
   var $13=(($11)>>>(0)) < (($12)>>>(0));
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$1;
   var $16=((($15)-(3))|0);
   var $17=$16;
   var $18=$2;
   var $19=(($18+1)|0);
   $2=$19;
   var $20=HEAP8[($18)];
   var $21=(($20)&(255));
   var $22=$4;
   var $23=(($22+($21<<2))|0);
   var $24=$17;
   var $25=$23;
   assert(4 % 1 === 0);HEAP8[($24)]=HEAP8[($25)];HEAP8[((($24)+(1))|0)]=HEAP8[((($25)+(1))|0)];HEAP8[((($24)+(2))|0)]=HEAP8[((($25)+(2))|0)];HEAP8[((($24)+(3))|0)]=HEAP8[((($25)+(3))|0)];
   label = 2; break;
  case 4: 
   var $27=$2;
   var $28=(($27)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=$4;
   var $32=(($31+($30<<2))|0);
   var $33=$clr;
   var $34=$32;
   assert(4 % 1 === 0);HEAP8[($33)]=HEAP8[($34)];HEAP8[((($33)+(1))|0)]=HEAP8[((($34)+(1))|0)];HEAP8[((($33)+(2))|0)]=HEAP8[((($34)+(2))|0)];HEAP8[((($33)+(3))|0)]=HEAP8[((($34)+(3))|0)];
   var $35=(($clr)|0);
   var $36=HEAP8[($35)];
   var $37=$1;
   var $38=((($37)-(3))|0);
   var $39=(($38)|0);
   HEAP8[($39)]=$36;
   var $40=(($clr+1)|0);
   var $41=HEAP8[($40)];
   var $42=$1;
   var $43=((($42)-(3))|0);
   var $44=(($43+1)|0);
   HEAP8[($44)]=$41;
   var $45=(($clr+2)|0);
   var $46=HEAP8[($45)];
   var $47=$1;
   var $48=((($47)-(3))|0);
   var $49=(($48+2)|0);
   HEAP8[($49)]=$46;
   var $50=$1;
   STACKTOP = sp;
   return $50;
  default: assert(0, "bad label: " + label);
 }
}
function __Z13FillColorRow4PhS_iP12PaletteEntry($data, $indices, $len, $palette) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $end;
   var $idx;
   var $idx1;
   var $clr=sp;
   $1=$data;
   $2=$indices;
   $3=$len;
   $4=$palette;
   var $5=$1;
   var $6=$3;
   var $7=((($6)*(3))&-1);
   var $8=(($5+$7)|0);
   $end=$8;
   label = 2; break;
  case 2: 
   var $10=$1;
   var $11=(($10+6)|0);
   $1=$11;
   var $12=$end;
   var $13=(($11)>>>(0)) < (($12)>>>(0));
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$2;
   var $16=(($15+1)|0);
   $2=$16;
   var $17=HEAP8[($15)];
   var $18=(($17)&(255));
   $idx=$18;
   var $19=$1;
   var $20=((($19)-(6))|0);
   var $21=$20;
   var $22=$idx;
   var $23=$22 >> 4;
   var $24=$4;
   var $25=(($24+($23<<2))|0);
   var $26=$21;
   var $27=$25;
   assert(4 % 1 === 0);HEAP8[($26)]=HEAP8[($27)];HEAP8[((($26)+(1))|0)]=HEAP8[((($27)+(1))|0)];HEAP8[((($26)+(2))|0)]=HEAP8[((($27)+(2))|0)];HEAP8[((($26)+(3))|0)]=HEAP8[((($27)+(3))|0)];
   var $28=$1;
   var $29=((($28)-(3))|0);
   var $30=$29;
   var $31=$idx;
   var $32=$31 & 15;
   var $33=$4;
   var $34=(($33+($32<<2))|0);
   var $35=$30;
   var $36=$34;
   assert(4 % 1 === 0);HEAP8[($35)]=HEAP8[($36)];HEAP8[((($35)+(1))|0)]=HEAP8[((($36)+(1))|0)];HEAP8[((($35)+(2))|0)]=HEAP8[((($36)+(2))|0)];HEAP8[((($35)+(3))|0)]=HEAP8[((($36)+(3))|0)];
   label = 2; break;
  case 4: 
   var $38=$2;
   var $39=(($38)|0);
   var $40=HEAP8[($39)];
   var $41=(($40)&(255));
   $idx1=$41;
   var $42=$idx1;
   var $43=$42 >> 4;
   var $44=$4;
   var $45=(($44+($43<<2))|0);
   var $46=$clr;
   var $47=$45;
   assert(4 % 1 === 0);HEAP8[($46)]=HEAP8[($47)];HEAP8[((($46)+(1))|0)]=HEAP8[((($47)+(1))|0)];HEAP8[((($46)+(2))|0)]=HEAP8[((($47)+(2))|0)];HEAP8[((($46)+(3))|0)]=HEAP8[((($47)+(3))|0)];
   var $48=(($clr)|0);
   var $49=HEAP8[($48)];
   var $50=$1;
   var $51=((($50)-(6))|0);
   var $52=(($51)|0);
   HEAP8[($52)]=$49;
   var $53=(($clr+1)|0);
   var $54=HEAP8[($53)];
   var $55=$1;
   var $56=((($55)-(6))|0);
   var $57=(($56+1)|0);
   HEAP8[($57)]=$54;
   var $58=(($clr+2)|0);
   var $59=HEAP8[($58)];
   var $60=$1;
   var $61=((($60)-(6))|0);
   var $62=(($61+2)|0);
   HEAP8[($62)]=$59;
   var $63=$1;
   var $64=$end;
   var $65=(($63)|(0))==(($64)|(0));
   if ($65) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $67=$idx1;
   var $68=$67 & 15;
   var $69=$4;
   var $70=(($69+($68<<2))|0);
   var $71=$clr;
   var $72=$70;
   assert(4 % 1 === 0);HEAP8[($71)]=HEAP8[($72)];HEAP8[((($71)+(1))|0)]=HEAP8[((($72)+(1))|0)];HEAP8[((($71)+(2))|0)]=HEAP8[((($72)+(2))|0)];HEAP8[((($71)+(3))|0)]=HEAP8[((($72)+(3))|0)];
   var $73=(($clr)|0);
   var $74=HEAP8[($73)];
   var $75=$1;
   var $76=((($75)-(3))|0);
   var $77=(($76)|0);
   HEAP8[($77)]=$74;
   var $78=(($clr+1)|0);
   var $79=HEAP8[($78)];
   var $80=$1;
   var $81=((($80)-(3))|0);
   var $82=(($81+1)|0);
   HEAP8[($82)]=$79;
   var $83=(($clr+2)|0);
   var $84=HEAP8[($83)];
   var $85=$1;
   var $86=((($85)-(3))|0);
   var $87=(($86+2)|0);
   HEAP8[($87)]=$84;
   label = 6; break;
  case 6: 
   var $89=$end;
   STACKTOP = sp;
   return $89;
  default: assert(0, "bad label: " + label);
 }
}
function __Z13FillColorRow1PhS_iP12PaletteEntry($data, $indices, $len, $palette) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $end;
   var $idx;
   var $idx1;
   var $clr=sp;
   $1=$data;
   $2=$indices;
   $3=$len;
   $4=$palette;
   var $5=$1;
   var $6=$3;
   var $7=((($6)*(3))&-1);
   var $8=(($5+$7)|0);
   $end=$8;
   label = 2; break;
  case 2: 
   var $10=$1;
   var $11=(($10+24)|0);
   $1=$11;
   var $12=$end;
   var $13=(($11)>>>(0)) < (($12)>>>(0));
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$2;
   var $16=(($15+1)|0);
   $2=$16;
   var $17=HEAP8[($15)];
   var $18=(($17)&(255));
   $idx=$18;
   var $19=$1;
   var $20=((($19)-(24))|0);
   var $21=$20;
   var $22=$idx;
   var $23=$22 & 128;
   var $24=(($23)|(0))!=0;
   var $25=(($24)&(1));
   var $26=$4;
   var $27=(($26+($25<<2))|0);
   var $28=$21;
   var $29=$27;
   assert(4 % 1 === 0);HEAP8[($28)]=HEAP8[($29)];HEAP8[((($28)+(1))|0)]=HEAP8[((($29)+(1))|0)];HEAP8[((($28)+(2))|0)]=HEAP8[((($29)+(2))|0)];HEAP8[((($28)+(3))|0)]=HEAP8[((($29)+(3))|0)];
   var $30=$1;
   var $31=((($30)-(21))|0);
   var $32=$31;
   var $33=$idx;
   var $34=$33 & 64;
   var $35=(($34)|(0))!=0;
   var $36=(($35)&(1));
   var $37=$4;
   var $38=(($37+($36<<2))|0);
   var $39=$32;
   var $40=$38;
   assert(4 % 1 === 0);HEAP8[($39)]=HEAP8[($40)];HEAP8[((($39)+(1))|0)]=HEAP8[((($40)+(1))|0)];HEAP8[((($39)+(2))|0)]=HEAP8[((($40)+(2))|0)];HEAP8[((($39)+(3))|0)]=HEAP8[((($40)+(3))|0)];
   var $41=$1;
   var $42=((($41)-(18))|0);
   var $43=$42;
   var $44=$idx;
   var $45=$44 & 32;
   var $46=(($45)|(0))!=0;
   var $47=(($46)&(1));
   var $48=$4;
   var $49=(($48+($47<<2))|0);
   var $50=$43;
   var $51=$49;
   assert(4 % 1 === 0);HEAP8[($50)]=HEAP8[($51)];HEAP8[((($50)+(1))|0)]=HEAP8[((($51)+(1))|0)];HEAP8[((($50)+(2))|0)]=HEAP8[((($51)+(2))|0)];HEAP8[((($50)+(3))|0)]=HEAP8[((($51)+(3))|0)];
   var $52=$1;
   var $53=((($52)-(15))|0);
   var $54=$53;
   var $55=$idx;
   var $56=$55 & 16;
   var $57=(($56)|(0))!=0;
   var $58=(($57)&(1));
   var $59=$4;
   var $60=(($59+($58<<2))|0);
   var $61=$54;
   var $62=$60;
   assert(4 % 1 === 0);HEAP8[($61)]=HEAP8[($62)];HEAP8[((($61)+(1))|0)]=HEAP8[((($62)+(1))|0)];HEAP8[((($61)+(2))|0)]=HEAP8[((($62)+(2))|0)];HEAP8[((($61)+(3))|0)]=HEAP8[((($62)+(3))|0)];
   var $63=$1;
   var $64=((($63)-(12))|0);
   var $65=$64;
   var $66=$idx;
   var $67=$66 & 8;
   var $68=(($67)|(0))!=0;
   var $69=(($68)&(1));
   var $70=$4;
   var $71=(($70+($69<<2))|0);
   var $72=$65;
   var $73=$71;
   assert(4 % 1 === 0);HEAP8[($72)]=HEAP8[($73)];HEAP8[((($72)+(1))|0)]=HEAP8[((($73)+(1))|0)];HEAP8[((($72)+(2))|0)]=HEAP8[((($73)+(2))|0)];HEAP8[((($72)+(3))|0)]=HEAP8[((($73)+(3))|0)];
   var $74=$1;
   var $75=((($74)-(9))|0);
   var $76=$75;
   var $77=$idx;
   var $78=$77 & 4;
   var $79=(($78)|(0))!=0;
   var $80=(($79)&(1));
   var $81=$4;
   var $82=(($81+($80<<2))|0);
   var $83=$76;
   var $84=$82;
   assert(4 % 1 === 0);HEAP8[($83)]=HEAP8[($84)];HEAP8[((($83)+(1))|0)]=HEAP8[((($84)+(1))|0)];HEAP8[((($83)+(2))|0)]=HEAP8[((($84)+(2))|0)];HEAP8[((($83)+(3))|0)]=HEAP8[((($84)+(3))|0)];
   var $85=$1;
   var $86=((($85)-(6))|0);
   var $87=$86;
   var $88=$idx;
   var $89=$88 & 2;
   var $90=(($89)|(0))!=0;
   var $91=(($90)&(1));
   var $92=$4;
   var $93=(($92+($91<<2))|0);
   var $94=$87;
   var $95=$93;
   assert(4 % 1 === 0);HEAP8[($94)]=HEAP8[($95)];HEAP8[((($94)+(1))|0)]=HEAP8[((($95)+(1))|0)];HEAP8[((($94)+(2))|0)]=HEAP8[((($95)+(2))|0)];HEAP8[((($94)+(3))|0)]=HEAP8[((($95)+(3))|0)];
   var $96=$1;
   var $97=((($96)-(3))|0);
   var $98=$97;
   var $99=$idx;
   var $100=$99 & 1;
   var $101=(($100)|(0))!=0;
   var $102=(($101)&(1));
   var $103=$4;
   var $104=(($103+($102<<2))|0);
   var $105=$98;
   var $106=$104;
   assert(4 % 1 === 0);HEAP8[($105)]=HEAP8[($106)];HEAP8[((($105)+(1))|0)]=HEAP8[((($106)+(1))|0)];HEAP8[((($105)+(2))|0)]=HEAP8[((($106)+(2))|0)];HEAP8[((($105)+(3))|0)]=HEAP8[((($106)+(3))|0)];
   label = 2; break;
  case 4: 
   var $108=$2;
   var $109=(($108)|0);
   var $110=HEAP8[($109)];
   var $111=(($110)&(255));
   var $112=$111 << 24;
   $idx1=$112;
   var $113=$1;
   var $114=((($113)-(24))|0);
   $1=$114;
   label = 5; break;
  case 5: 
   var $116=$1;
   var $117=$end;
   var $118=(($116)>>>(0)) < (($117)>>>(0));
   if ($118) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $120=$idx1;
   var $121=(($120)|(0)) < 0;
   var $122=(($121)&(1));
   var $123=$4;
   var $124=(($123+($122<<2))|0);
   var $125=$clr;
   var $126=$124;
   assert(4 % 1 === 0);HEAP8[($125)]=HEAP8[($126)];HEAP8[((($125)+(1))|0)]=HEAP8[((($126)+(1))|0)];HEAP8[((($125)+(2))|0)]=HEAP8[((($126)+(2))|0)];HEAP8[((($125)+(3))|0)]=HEAP8[((($126)+(3))|0)];
   var $127=(($clr)|0);
   var $128=HEAP8[($127)];
   var $129=$1;
   var $130=(($129)|0);
   HEAP8[($130)]=$128;
   var $131=(($clr+1)|0);
   var $132=HEAP8[($131)];
   var $133=$1;
   var $134=(($133+1)|0);
   HEAP8[($134)]=$132;
   var $135=(($clr+2)|0);
   var $136=HEAP8[($135)];
   var $137=$1;
   var $138=(($137+2)|0);
   HEAP8[($138)]=$136;
   label = 7; break;
  case 7: 
   var $140=$1;
   var $141=(($140+3)|0);
   $1=$141;
   var $142=$idx1;
   var $143=$idx1;
   var $144=((($143)+($142))|0);
   $idx1=$144;
   label = 5; break;
  case 8: 
   var $146=$1;
   STACKTOP = sp;
   return $146;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11GrFmtWriter17IsFormatSupportedEi($this, $depth) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$depth;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|(0))==8;
 return $5;
}
function __ZN11GrFmtReader5CloseEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($2+8)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($2+4)|0);
 HEAP8[($5)]=0;
 return;
}
function __ZN18GrFmtFilterFactoryC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((18720)|0);
 var $4=(($2+12)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($2+4)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($2+8)|0);
 HEAP32[(($6)>>2)]=0;
 return;
}
function _cvConvertImage($srcarr, $dstarr, $flags) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $temp=sp;
   var $srcstub=(sp)+(8);
   var $src;
   var $dststub=(sp)+(40);
   var $dst;
   var $src_cn;
   var $swap_rb;
   var $scale;
   var $shift;
   var $src_depth;
   var $s;
   var $d;
   var $s_step;
   var $d_step;
   var $code;
   var $size=(sp)+(72);
   var $4=(sp)+(80);
   var $5=(sp)+(88);
   var $6=(sp)+(96);
   var $7=(sp)+(104);
   var $8=(sp)+(112);
   $1=$srcarr;
   $2=$dstarr;
   $3=$flags;
   HEAP32[(($temp)>>2)]=0;
   var $9=$3;
   var $10=$9 & 2;
   $swap_rb=$10;
   var $11=$1;
   var $12=_cvGetMat($11, $srcstub, 0, 0);
   $src=$12;
   var $13=_cvGetErrStatus();
   var $14=(($13)|(0)) < 0;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((6512)|0), ((10984)|0), ((14856)|0), 515);
   label = 45; break;
  case 3: 
   var $17=$2;
   var $18=_cvGetMat($17, $dststub, 0, 0);
   $dst=$18;
   var $19=_cvGetErrStatus();
   var $20=(($19)|(0)) < 0;
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((6512)|0), ((10984)|0), ((14856)|0), 516);
   label = 45; break;
  case 5: 
   var $23=$src;
   var $24=(($23)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25 & 504;
   var $27=$26 >> 3;
   var $28=((($27)+(1))|0);
   $src_cn=$28;
   var $29=$src_cn;
   var $30=(($29)|(0))!=1;
   if ($30) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $32=$src_cn;
   var $33=(($32)|(0))!=3;
   if ($33) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $35=$src_cn;
   var $36=(($35)|(0))!=4;
   if ($36) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _cvError(-15, ((6512)|0), ((12224)|0), ((14856)|0), 521);
   label = 45; break;
  case 9: 
   var $39=$dst;
   var $40=(($39)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$41 & 7;
   var $43=(($42)|(0))!=0;
   if ($43) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-17, ((6512)|0), ((11088)|0), ((14856)|0), 524);
   label = 45; break;
  case 11: 
   var $46=$dst;
   var $47=(($46)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$48 & 504;
   var $50=$49 >> 3;
   var $51=((($50)+(1))|0);
   var $52=(($51)|(0))!=1;
   if ($52) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $54=$dst;
   var $55=(($54)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$56 & 504;
   var $58=$57 >> 3;
   var $59=((($58)+(1))|0);
   var $60=(($59)|(0))!=3;
   if ($60) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-15, ((6512)|0), ((10216)|0), ((14856)|0), 527);
   label = 45; break;
  case 14: 
   var $63=$src;
   var $64=(($63)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$dst;
   var $67=(($66)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$65 ^ $68;
   var $70=$69 & 7;
   var $71=(($70)|(0))==0;
   if ($71) { label = 21; break; } else { label = 15; break; }
  case 15: 
   $scale=0;
   $shift=0;
   var $73=$src;
   var $74=(($73)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$75 & 7;
   $src_depth=$76;
   var $77=$src;
   var $78=(($77+20)|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=$src;
   var $82=(($81+24)|0);
   var $83=$82;
   var $84=HEAP32[(($83)>>2)];
   var $85=$src;
   var $86=(($85)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$87 & 504;
   var $89=$dst;
   var $90=(($89)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$91 & 7;
   var $93=$88 | $92;
   var $94=_cvCreateMat($80, $84, $93);
   HEAP32[(($temp)>>2)]=$94;
   var $95=$src_depth;
   var $96=(($95)|(0)) <= 1;
   if ($96) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $103 = 1;label = 18; break;
  case 17: 
   var $99=$src_depth;
   var $100=(($99)|(0)) <= 4;
   var $101=$100 ? 0.00390625 : 255;
   var $103 = $101;label = 18; break;
  case 18: 
   var $103;
   $scale=$103;
   var $104=$src_depth;
   var $105=(($104)|(0))==1;
   if ($105) { var $110 = 1;label = 20; break; } else { label = 19; break; }
  case 19: 
   var $107=$src_depth;
   var $108=(($107)|(0))==3;
   var $110 = $108;label = 20; break;
  case 20: 
   var $110;
   var $111=$110 ? 128 : 0;
   var $112=(($111)|(0));
   $shift=$112;
   var $113=$src;
   var $114=$113;
   var $115=HEAP32[(($temp)>>2)];
   var $116=$115;
   var $117=$scale;
   var $118=$shift;
   _cvConvertScale($114, $116, $117, $118);
   var $119=HEAP32[(($temp)>>2)];
   $src=$119;
   label = 21; break;
  case 21: 
   var $121=$src;
   var $122=(($121+16)|0);
   var $123=$122;
   var $124=HEAP32[(($123)>>2)];
   $s=$124;
   var $125=$dst;
   var $126=(($125+16)|0);
   var $127=$126;
   var $128=HEAP32[(($127)>>2)];
   $d=$128;
   var $129=$src;
   var $130=(($129+4)|0);
   var $131=HEAP32[(($130)>>2)];
   $s_step=$131;
   var $132=$dst;
   var $133=(($132+4)|0);
   var $134=HEAP32[(($133)>>2)];
   $d_step=$134;
   var $135=$src_cn;
   var $136=((($135)*(10))&-1);
   var $137=$dst;
   var $138=(($137)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=$139 & 504;
   var $141=$140 >> 3;
   var $142=((($141)+(1))|0);
   var $143=((($136)+($142))|0);
   $code=$143;
   var $144=(($size)|0);
   var $145=$src;
   var $146=(($145+24)|0);
   var $147=$146;
   var $148=HEAP32[(($147)>>2)];
   HEAP32[(($144)>>2)]=$148;
   var $149=(($size+4)|0);
   var $150=$src;
   var $151=(($150+20)|0);
   var $152=$151;
   var $153=HEAP32[(($152)>>2)];
   HEAP32[(($149)>>2)]=$153;
   var $154=$src;
   var $155=(($154)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=$dst;
   var $158=(($157)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=$156 & $159;
   var $161=$160 & 16384;
   var $162=(($161)|(0))!=0;
   if ($162) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $164=(($size+4)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($size)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(Math.imul($167,$165)|0);
   HEAP32[(($166)>>2)]=$168;
   var $169=(($size+4)|0);
   HEAP32[(($169)>>2)]=1;
   $d_step=1073741824;
   $s_step=1073741824;
   label = 23; break;
  case 23: 
   var $171=$code;
   if ((($171)|(0))==13) {
    label = 24; break;
   }
   else if ((($171)|(0))==31) {
    label = 25; break;
   }
   else if ((($171)|(0))==33) {
    label = 26; break;
   }
   else if ((($171)|(0))==41) {
    label = 29; break;
   }
   else if ((($171)|(0))==43) {
    label = 30; break;
   }
   else {
   label = 31; break;
   }
  case 24: 
   var $173=$s;
   var $174=$s_step;
   var $175=$d;
   var $176=$d_step;
   var $177=$4;
   var $178=$size;
   assert(8 % 1 === 0);HEAP32[(($177)>>2)]=HEAP32[(($178)>>2)];HEAP32[((($177)+(4))>>2)]=HEAP32[((($178)+(4))>>2)];
   __Z24icvCvt_Gray2BGR_8u_C1C3RPKhiPhi6CvSize($173, $174, $175, $176, $4);
   label = 32; break;
  case 25: 
   var $180=$s;
   var $181=$s_step;
   var $182=$d;
   var $183=$d_step;
   var $184=$5;
   var $185=$size;
   assert(8 % 1 === 0);HEAP32[(($184)>>2)]=HEAP32[(($185)>>2)];HEAP32[((($184)+(4))>>2)]=HEAP32[((($185)+(4))>>2)];
   var $186=$swap_rb;
   __Z24icvCvt_BGR2Gray_8u_C3C1RPKhiPhi6CvSizei($180, $181, $182, $183, $5, $186);
   label = 32; break;
  case 26: 
   var $188=$swap_rb;
   var $189=(($188)|(0))!=0;
   if ($189) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $191=$s;
   var $192=$s_step;
   var $193=$d;
   var $194=$d_step;
   var $195=$6;
   var $196=$size;
   assert(8 % 1 === 0);HEAP32[(($195)>>2)]=HEAP32[(($196)>>2)];HEAP32[((($195)+(4))>>2)]=HEAP32[((($196)+(4))>>2)];
   __Z21icvCvt_BGR2RGB_8u_C3RPKhiPhi6CvSize($191, $192, $193, $194, $6);
   label = 28; break;
  case 28: 
   label = 32; break;
  case 29: 
   var $199=$s;
   var $200=$s_step;
   var $201=$d;
   var $202=$d_step;
   var $203=$7;
   var $204=$size;
   assert(8 % 1 === 0);HEAP32[(($203)>>2)]=HEAP32[(($204)>>2)];HEAP32[((($203)+(4))>>2)]=HEAP32[((($204)+(4))>>2)];
   var $205=$swap_rb;
   __Z25icvCvt_BGRA2Gray_8u_C4C1RPKhiPhi6CvSizei($199, $200, $201, $202, $7, $205);
   label = 32; break;
  case 30: 
   var $207=$s;
   var $208=$s_step;
   var $209=$d;
   var $210=$d_step;
   var $211=$8;
   var $212=$size;
   assert(8 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($212)+(4))>>2)];
   var $213=$swap_rb;
   __Z24icvCvt_BGRA2BGR_8u_C4C3RPKhiPhi6CvSizei($207, $208, $209, $210, $8, $213);
   label = 32; break;
  case 31: 
   _cvError(-210, ((6512)|0), ((9352)|0), ((14856)|0), 573);
   label = 45; break;
  case 32: 
   var $216=$code;
   var $217=(($216)|(0))!=33;
   if ($217) { label = 34; break; } else { label = 33; break; }
  case 33: 
   var $219=$swap_rb;
   var $220=(($219)|(0))!=0;
   if ($220) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $222=$dst;
   $src=$222;
   label = 35; break;
  case 35: 
   var $224=$3;
   var $225=$224 & 1;
   var $226=(($225)|(0))!=0;
   if ($226) { label = 36; break; } else { label = 39; break; }
  case 36: 
   var $228=$src;
   var $229=$228;
   var $230=$dst;
   var $231=$230;
   _cvFlip($229, $231, 0);
   var $232=_cvGetErrStatus();
   var $233=(($232)|(0)) < 0;
   if ($233) { label = 37; break; } else { label = 38; break; }
  case 37: 
   _cvError(-1, ((6512)|0), ((10984)|0), ((14856)|0), 582);
   label = 45; break;
  case 38: 
   label = 44; break;
  case 39: 
   var $237=$src;
   var $238=$dst;
   var $239=(($237)|(0))!=(($238)|(0));
   if ($239) { label = 40; break; } else { label = 43; break; }
  case 40: 
   var $241=$src;
   var $242=$241;
   var $243=$dst;
   var $244=$243;
   _cvCopy($242, $244, 0);
   var $245=_cvGetErrStatus();
   var $246=(($245)|(0)) < 0;
   if ($246) { label = 41; break; } else { label = 42; break; }
  case 41: 
   _cvError(-1, ((6512)|0), ((10984)|0), ((14856)|0), 586);
   label = 45; break;
  case 42: 
   label = 43; break;
  case 43: 
   label = 44; break;
  case 44: 
   label = 45; break;
  case 45: 
   _cvReleaseMat($temp);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvShowImage($0, $1) {
 var label = 0;
 var $3;
 var $4;
 $3=$0;
 $4=$1;
 _cvError(-2, ((9312)|0), ((14144)|0), ((12160)|0), 89);
 return;
}
function __ZN11GrFmtReaderC2EPKc($this, $filename) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$filename;
 var $3=$1;
 var $4=$3;
 HEAP32[(($4)>>2)]=((19680)|0);
 var $5=(($3+20)|0);
 var $6=(($5)|0);
 var $7=$2;
 var $8=_strncpy($6, $7, 1023);
 var $9=(($3+20)|0);
 var $10=(($9+1023)|0);
 HEAP8[($10)]=0;
 var $11=(($3+12)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($3+8)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=(($3+4)|0);
 HEAP8[($13)]=0;
 var $14=(($3+16)|0);
 HEAP32[(($14)>>2)]=8;
 var $15=(($3+1044)|0);
 HEAP8[($15)]=0;
 var $16=(($3+1045)|0);
 HEAP8[($16)]=0;
 return;
}
function __ZN11GrFmtReaderD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11GrFmtReaderD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((19680)|0);
 var $4=$2;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+16)|0);
 var $7=HEAP32[(($6)>>2)];
 FUNCTION_TABLE[$7]($2);
 return;
}
function __ZN11GrFmtWriterC2EPKc($this, $filename) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$filename;
 var $3=$1;
 var $4=$3;
 HEAP32[(($4)>>2)]=((19648)|0);
 var $5=(($3+4)|0);
 var $6=(($5)|0);
 var $7=$2;
 var $8=_strncpy($6, $7, 1023);
 var $9=(($3+4)|0);
 var $10=(($9+1023)|0);
 HEAP8[($10)]=0;
 return;
}
function __ZN18GrFmtFilterFactory14CheckSignatureEPKc($this, $signature) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$signature;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0)) > 0;
   if ($6) { label = 2; break; } else { var $19 = 0;label = 4; break; }
  case 2: 
   var $8=$2;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { var $19 = 0;label = 4; break; }
  case 3: 
   var $11=$2;
   var $12=(($3+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($3+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=_memcmp($11, $13, $15);
   var $17=(($16)|(0))==0;
   var $19 = $17;label = 4; break;
  case 4: 
   var $19;
   return $19;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18GrFmtFilterFactory14CheckExtensionEPKc($this, $format) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $descr;
   var $len;
   var $ext;
   var $i;
   var $len2;
   var $c1;
   var $c2;
   $2=$this;
   $3=$format;
   var $4=$2;
   $descr=0;
   $len=0;
   var $5=$3;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=(($4+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 27; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $14=$3;
   var $15=(($14+1)|0);
   var $16=_strchr($15, 46);
   $ext=$16;
   var $17=$ext;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 7; break; } else { label = 6; break; }
  case 6: 
   label = 8; break;
  case 7: 
   var $21=$ext;
   $3=$21;
   label = 5; break;
  case 8: 
   var $23=$3;
   var $24=__ZL18GetExtensionLengthPKc($23);
   $len=$24;
   var $25=$3;
   var $26=(($25)|0);
   var $27=HEAP8[($26)];
   var $28=(($27 << 24) >> 24);
   var $29=(($28)|(0))!=46;
   if ($29) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $31=$len;
   var $32=(($31)|(0))==0;
   if ($32) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $1=0;
   label = 27; break;
  case 11: 
   var $35=(($4+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=_strchr($36, 40);
   $descr=$37;
   label = 12; break;
  case 12: 
   var $39=$descr;
   var $40=(($39)|(0))!=0;
   if ($40) { label = 13; break; } else { label = 26; break; }
  case 13: 
   var $42=$descr;
   var $43=(($42+1)|0);
   var $44=_strchr($43, 46);
   $descr=$44;
   var $45=$descr;
   var $46=__ZL18GetExtensionLengthPKc($45);
   $len2=$46;
   var $47=$len2;
   var $48=(($47)|(0))==0;
   if ($48) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 26; break;
  case 15: 
   var $51=$len2;
   var $52=$len;
   var $53=(($51)|(0))==(($52)|(0));
   if ($53) { label = 16; break; } else { label = 25; break; }
  case 16: 
   $i=0;
   label = 17; break;
  case 17: 
   var $56=$i;
   var $57=$len;
   var $58=(($56)|(0)) < (($57)|(0));
   if ($58) { label = 18; break; } else { label = 22; break; }
  case 18: 
   var $60=$i;
   var $61=((($60)+(1))|0);
   var $62=$3;
   var $63=(($62+$61)|0);
   var $64=HEAP8[($63)];
   var $65=(($64 << 24) >> 24);
   var $66=_tolower($65);
   $c1=$66;
   var $67=$i;
   var $68=((($67)+(1))|0);
   var $69=$descr;
   var $70=(($69+$68)|0);
   var $71=HEAP8[($70)];
   var $72=(($71 << 24) >> 24);
   var $73=_tolower($72);
   $c2=$73;
   var $74=$c1;
   var $75=$c2;
   var $76=(($74)|(0))!=(($75)|(0));
   if ($76) { label = 19; break; } else { label = 20; break; }
  case 19: 
   label = 22; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $80=$i;
   var $81=((($80)+(1))|0);
   $i=$81;
   label = 17; break;
  case 22: 
   var $83=$i;
   var $84=$len;
   var $85=(($83)|(0))==(($84)|(0));
   if ($85) { label = 23; break; } else { label = 24; break; }
  case 23: 
   $1=1;
   label = 27; break;
  case 24: 
   label = 25; break;
  case 25: 
   label = 12; break;
  case 26: 
   $1=0;
   label = 27; break;
  case 27: 
   var $91=$1;
   return $91;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18GetExtensionLengthPKc($buffer) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $len;
   var $ext;
   $1=$buffer;
   $len=0;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 10; break; }
  case 2: 
   var $5=$1;
   var $6=_strchr($5, 46);
   $ext=$6;
   var $7=$ext;
   var $8=(($7+1)|0);
   $ext=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 9; break; }
  case 3: 
   label = 4; break;
  case 4: 
   var $12=$len;
   var $13=$ext;
   var $14=(($13+$12)|0);
   var $15=HEAP8[($14)];
   var $16=(($15 << 24) >> 24);
   var $17=_isalnum($16);
   var $18=(($17)|(0))!=0;
   if ($18) { label = 5; break; } else { var $23 = 0;label = 6; break; }
  case 5: 
   var $20=$len;
   var $21=(($20)|(0)) < 1024;
   var $23 = $21;label = 6; break;
  case 6: 
   var $23;
   if ($23) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $25=$len;
   var $26=((($25)+(1))|0);
   $len=$26;
   label = 4; break;
  case 8: 
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $30=$len;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18GrFmtFactoriesListC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((18760)|0);
 var $4=(($2+4)|0);
 HEAP32[(($4)>>2)]=0;
 __ZN18GrFmtFactoriesList9RemoveAllEv($2);
 return;
}
function __ZN18GrFmtFactoriesList9RemoveAllEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   $1=$this;
   var $2=$1;
   var $3=(($2+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 11; break; }
  case 2: 
   $i=0;
   label = 3; break;
  case 3: 
   var $8=$i;
   var $9=(($2+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($8)|(0)) < (($10)|(0));
   if ($11) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $13=$i;
   var $14=(($2+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+($13<<2))|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $20=$17;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   FUNCTION_TABLE[$23]($17);
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $26=$i;
   var $27=((($26)+(1))|0);
   $i=$27;
   label = 3; break;
  case 8: 
   var $29=(($2+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))==0;
   if ($31) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $33=$30;
   __ZdaPv($33);
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $36=(($2+4)|0);
   HEAP32[(($36)>>2)]=0;
   var $37=(($2+12)|0);
   HEAP32[(($37)>>2)]=0;
   var $38=(($2+8)|0);
   HEAP32[(($38)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18GrFmtFactoriesListD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN18GrFmtFactoriesListD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18GrFmtFactoriesListD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((18760)|0);
 __ZN18GrFmtFactoriesList9RemoveAllEv($2);
 return;
}
function __ZN18GrFmtFilterFactoryD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN11GrFmtWriterD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 return;
}
function __ZN18GrFmtFactoriesList18GetFirstFactoryPosEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 return $5;
}
function __ZN18GrFmtFactoriesList14GetNextFactoryERPv($this, $pos) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $factory;
   var $temp;
   $1=$this;
   $2=$pos;
   var $3=$1;
   $factory=0;
   var $4=$2;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $temp=$6;
   var $7=$temp;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $10=$temp;
   var $11=(($10+4)|0);
   $temp=$11;
   var $12=HEAP32[(($10)>>2)];
   $factory=$12;
   var $13=$temp;
   var $14=(($3+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($3+12)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($15+($17<<2))|0);
   var $19=(($13)>>>(0)) < (($18)>>>(0));
   if ($19) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $21=$temp;
   var $24 = $21;label = 5; break;
  case 4: 
   var $24 = 0;label = 5; break;
  case 5: 
   var $24;
   var $25=$24;
   var $26=$2;
   HEAP32[(($26)>>2)]=$25;
   label = 6; break;
  case 6: 
   var $28=$factory;
   return $28;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18GrFmtFilterFactory18GetSignatureLengthEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function __ZN18GrFmtFactoriesList10AddFactoryEP18GrFmtFilterFactory($this, $factory) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $newMaxFactories;
   var $newFactories;
   var $i;
   $1=$this;
   $2=$factory;
   var $3=$1;
   var $4=(($3+12)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($3+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($5)|(0))==(($7)|(0));
   if ($8) { label = 2; break; } else { label = 11; break; }
  case 2: 
   var $10=(($3+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=($11<<1);
   $newMaxFactories=$12;
   var $13=$newMaxFactories;
   var $14=(($13)|(0)) < 16;
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $newMaxFactories=16;
   label = 4; break;
  case 4: 
   var $17=$newMaxFactories;
   var $18$0=_llvm_umul_with_overflow_i32($17, 4);
   var $18$1=tempRet0;
   var $19=$18$1;
   var $20=$18$0;
   var $21=$19 ? -1 : $20;
   var $22=__Znaj($21);
   var $23=$22;
   $newFactories=$23;
   $i=0;
   label = 5; break;
  case 5: 
   var $25=$i;
   var $26=(($3+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $30=$i;
   var $31=(($3+4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+($30<<2))|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$i;
   var $36=$newFactories;
   var $37=(($36+($35<<2))|0);
   HEAP32[(($37)>>2)]=$34;
   label = 7; break;
  case 7: 
   var $39=$i;
   var $40=((($39)+(1))|0);
   $i=$40;
   label = 5; break;
  case 8: 
   var $42=(($3+4)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0))==0;
   if ($44) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $46=$43;
   __ZdaPv($46);
   label = 10; break;
  case 10: 
   var $48=$newFactories;
   var $49=(($3+4)|0);
   HEAP32[(($49)>>2)]=$48;
   var $50=$newMaxFactories;
   var $51=(($3+8)|0);
   HEAP32[(($51)>>2)]=$50;
   label = 11; break;
  case 11: 
   var $53=$2;
   var $54=(($3+12)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=((($55)+(1))|0);
   HEAP32[(($54)>>2)]=$56;
   var $57=(($3+4)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+($55<<2))|0);
   HEAP32[(($59)>>2)]=$53;
   return 1;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18GrFmtFactoriesList10FindReaderEPKc($this, $filename) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $f;
   var $signature=sp;
   var $sign_len;
   var $reader;
   var $pos=(sp)+(4096);
   var $tempFactory;
   var $cur_sign_len;
   var $tempFactory1;
   var $cur_sign_len2;
   $2=$this;
   $3=$filename;
   var $4=$2;
   $f=0;
   $sign_len=0;
   $reader=0;
   var $5=__ZN18GrFmtFactoriesList18GetFirstFactoryPosEv($4);
   HEAP32[(($pos)>>2)]=$5;
   var $6=$3;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 17; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $11=HEAP32[(($pos)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $14=__ZN18GrFmtFactoriesList14GetNextFactoryERPv($4, $pos);
   $tempFactory=$14;
   var $15=$tempFactory;
   var $16=__ZN18GrFmtFilterFactory18GetSignatureLengthEv($15);
   $cur_sign_len=$16;
   var $17=$sign_len;
   var $18=$cur_sign_len;
   var $19=(($17)|(0)) < (($18)|(0));
   if ($19) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $21=$cur_sign_len;
   $sign_len=$21;
   label = 7; break;
  case 7: 
   label = 4; break;
  case 8: 
   var $24=$3;
   var $25=_fopen($24, ((9112)|0));
   $f=$25;
   var $26=$f;
   var $27=(($26)|(0))!=0;
   if ($27) { label = 9; break; } else { label = 16; break; }
  case 9: 
   var $29=(($signature)|0);
   var $30=$sign_len;
   var $31=$f;
   var $32=_fread($29, 1, $30, $31);
   $sign_len=$32;
   var $33=$f;
   var $34=_fclose($33);
   var $35=__ZN18GrFmtFactoriesList18GetFirstFactoryPosEv($4);
   HEAP32[(($pos)>>2)]=$35;
   label = 10; break;
  case 10: 
   var $37=HEAP32[(($pos)>>2)];
   var $38=(($37)|(0))!=0;
   if ($38) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $40=__ZN18GrFmtFactoriesList14GetNextFactoryERPv($4, $pos);
   $tempFactory1=$40;
   var $41=$tempFactory1;
   var $42=__ZN18GrFmtFilterFactory18GetSignatureLengthEv($41);
   $cur_sign_len2=$42;
   var $43=$cur_sign_len2;
   var $44=$sign_len;
   var $45=(($43)|(0)) <= (($44)|(0));
   if ($45) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $47=$tempFactory1;
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+8)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($signature)|0);
   var $53=FUNCTION_TABLE[$51]($47, $52);
   if ($53) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $55=$tempFactory1;
   var $56=$55;
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+16)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$3;
   var $61=FUNCTION_TABLE[$59]($55, $60);
   $reader=$61;
   label = 15; break;
  case 14: 
   label = 10; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $65=$reader;
   $1=$65;
   label = 17; break;
  case 17: 
   var $67=$1;
   STACKTOP = sp;
   return $67;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18GrFmtFactoriesList10FindWriterEPKc($this, $filename) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $writer;
   var $pos=sp;
   var $tempFactory;
   $2=$this;
   $3=$filename;
   var $4=$2;
   $writer=0;
   var $5=__ZN18GrFmtFactoriesList18GetFirstFactoryPosEv($4);
   HEAP32[(($pos)>>2)]=$5;
   var $6=$3;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 9; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $11=HEAP32[(($pos)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $14=__ZN18GrFmtFactoriesList14GetNextFactoryERPv($4, $pos);
   $tempFactory=$14;
   var $15=$tempFactory;
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$3;
   var $21=FUNCTION_TABLE[$19]($15, $20);
   if ($21) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $23=$tempFactory;
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+20)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$3;
   var $29=FUNCTION_TABLE[$27]($23, $28);
   $writer=$29;
   label = 8; break;
  case 7: 
   label = 4; break;
  case 8: 
   var $32=$writer;
   $1=$32;
   label = 9; break;
  case 9: 
   var $34=$1;
   STACKTOP = sp;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11GrFmtWriterD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN11GrFmtWriterD2Ev($2);
 return;
}
function __ZN11GrFmtWriterD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN18GrFmtFilterFactoryD1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN18GrFmtFilterFactoryD2Ev($2);
 return;
}
function __ZN18GrFmtFilterFactoryD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN18GrFmtFilterFactoryD1Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN8GrFmtBmpC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((18608)|0);
 var $5=$2;
 var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=2;
 var $7=HEAP32[((23560)>>2)];
 var $8=$2;
 var $9=(($8+12)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=(($10+4)|0);
 HEAP32[(($11)>>2)]=((8888)|0);
 return;
}
function __ZN8GrFmtBmpD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN8GrFmtBmpD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN8GrFmtBmpD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryD2Ev($3);
 return;
}
function __ZN8GrFmtBmp9NewReaderEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(2160);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtBmpReaderC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN8GrFmtBmp9NewWriterEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(1060);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtBmpWriterC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RLByteStreamC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN12RLByteStreamC2Ev($2);
 return;
}
function __ZN14GrFmtBmpReaderD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtBmpReaderD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtBmpReader5CloseEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1048)|0);
 var $4=$3;
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($4);
 var $9=$2;
 __ZN11GrFmtReader5CloseEv($9);
 return;
}
function __ZN14GrFmtBmpReaderC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtReaderC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((19176)|0);
   var $9=(($5+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN12RLByteStreamC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=(($5+1124)|0);
   var $12=(($5+2152)|0);
   HEAP32[(($12)>>2)]=-1;
   return;
  case 3: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   var $15=$14$0;
   $3=$15;
   var $16=$14$1;
   $4=$16;
   var $17=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $20=$3;
   var $21=$4;
   var $22$0=$20;
   var $22$1=0;
   var $23$0=$22$0;
   var $23$1=$21;
   ___resumeException($23$0)
  case 6: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1,0); $25$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtBmpReaderD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((19176)|0);
   var $6=(($4+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$4;
   __ZN11GrFmtReaderD2Ev($8);
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtBmpReader10ReadHeaderEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 768)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"3": function(value) { label = 67; $20 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $result;
   var $size;
   var $clrused;
   var $redmask;
   var $greenmask;
   var $bluemask;
   var $buffer=sp;
   var $j;
   var $clrused1;
   $2=$this;
   var $3=$2;
   $result=0;
   var $4=(($3+1048)|0);
   var $5=$4;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$3;
   var $11=(($10+20)|0);
   var $12=(($11)|0);
   var $13=FUNCTION_TABLE[$9]($5, $12);
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 66; break;
  case 3: 
   var $16=(($3+1048)|0);
   var $17=$16;
   var $18=__ZN11RBaseStream6JmpBufEv($17);
   var $19=(($18)|0);
   var $20=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($19)>>2)]=tempInt, 0);
   label = 67; break;
  case 67: 
   var $21=(($20)|(0))==0;
   if ($21) { label = 4; break; } else { label = 63; break; }
  case 4: 
   var $23=(($3+1048)|0);
   var $24=$23;
   __ZN11RBaseStream4SkipEi($24, 10);
   var $25=(($3+1048)|0);
   var $26=__ZN12RLByteStream8GetDWordEv($25);
   var $27=(($3+2152)|0);
   HEAP32[(($27)>>2)]=$26;
   var $28=(($3+1048)|0);
   var $29=__ZN12RLByteStream8GetDWordEv($28);
   $size=$29;
   var $30=$size;
   var $31=(($30)|(0)) >= 36;
   if ($31) { label = 5; break; } else { label = 45; break; }
  case 5: 
   var $33=(($3+1048)|0);
   var $34=__ZN12RLByteStream8GetDWordEv($33);
   var $35=$3;
   var $36=(($35+8)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=(($3+1048)|0);
   var $38=__ZN12RLByteStream8GetDWordEv($37);
   var $39=$3;
   var $40=(($39+12)|0);
   HEAP32[(($40)>>2)]=$38;
   var $41=(($3+1048)|0);
   var $42=__ZN12RLByteStream8GetDWordEv($41);
   var $43=$42 >> 16;
   var $44=(($3+2148)|0);
   HEAP32[(($44)>>2)]=$43;
   var $45=(($3+1048)|0);
   var $46=__ZN12RLByteStream8GetDWordEv($45);
   var $47=(($3+2156)|0);
   HEAP32[(($47)>>2)]=$46;
   var $48=(($3+1048)|0);
   var $49=$48;
   __ZN11RBaseStream4SkipEi($49, 12);
   var $50=(($3+1048)|0);
   var $51=__ZN12RLByteStream8GetDWordEv($50);
   $clrused=$51;
   var $52=(($3+1048)|0);
   var $53=$52;
   var $54=$size;
   var $55=((($54)-(36))|0);
   __ZN11RBaseStream4SkipEi($53, $55);
   var $56=$3;
   var $57=(($56+8)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0)) > 0;
   if ($59) { label = 6; break; } else { label = 44; break; }
  case 6: 
   var $61=$3;
   var $62=(($61+12)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63)|(0)) > 0;
   if ($64) { label = 7; break; } else { label = 44; break; }
  case 7: 
   var $66=(($3+2148)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))==1;
   if ($68) { label = 12; break; } else { label = 8; break; }
  case 8: 
   var $70=(($3+2148)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71)|(0))==4;
   if ($72) { label = 12; break; } else { label = 9; break; }
  case 9: 
   var $74=(($3+2148)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75)|(0))==8;
   if ($76) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $78=(($3+2148)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))==24;
   if ($80) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $82=(($3+2148)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83)|(0))==32;
   if ($84) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $86=(($3+2156)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87)|(0))==0;
   if ($88) { label = 20; break; } else { label = 13; break; }
  case 13: 
   var $90=(($3+2148)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91)|(0))==16;
   if ($92) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $94=(($3+2156)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 20; break; } else { label = 15; break; }
  case 15: 
   var $98=(($3+2156)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))==3;
   if ($100) { label = 20; break; } else { label = 16; break; }
  case 16: 
   var $102=(($3+2148)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0))==4;
   if ($104) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $106=(($3+2156)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))==2;
   if ($108) { label = 20; break; } else { label = 18; break; }
  case 18: 
   var $110=(($3+2148)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($111)|(0))==8;
   if ($112) { label = 19; break; } else { label = 44; break; }
  case 19: 
   var $114=(($3+2156)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115)|(0))==1;
   if ($116) { label = 20; break; } else { label = 44; break; }
  case 20: 
   var $118=$3;
   var $119=(($118+4)|0);
   HEAP8[($119)]=1;
   $result=1;
   var $120=(($3+2148)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121)|(0)) <= 8;
   if ($122) { label = 21; break; } else { label = 25; break; }
  case 21: 
   var $124=(($3+1124)|0);
   var $125=$124;
   _memset($125, 0, 1024);
   var $126=(($3+1048)|0);
   var $127=(($3+1124)|0);
   var $128=(($127)|0);
   var $129=$128;
   var $130=$clrused;
   var $131=(($130)|(0))==0;
   if ($131) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $133=(($3+2148)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=1 << $134;
   var $139 = $135;label = 24; break;
  case 23: 
   var $137=$clrused;
   var $139 = $137;label = 24; break;
  case 24: 
   var $139;
   var $140=($139<<2);
   __ZN12RLByteStream8GetBytesEPviPi($126, $129, $140, 0);
   var $141=(($3+1124)|0);
   var $142=(($141)|0);
   var $143=(($3+2148)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=__Z14IsColorPaletteP12PaletteEntryi($142, $144);
   var $146=$3;
   var $147=(($146+4)|0);
   var $148=(($145)&(1));
   HEAP8[($147)]=$148;
   label = 43; break;
  case 25: 
   var $150=(($3+2148)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151)|(0))==16;
   if ($152) { label = 26; break; } else { label = 38; break; }
  case 26: 
   var $154=(($3+2156)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155)|(0))==3;
   if ($156) { label = 27; break; } else { label = 38; break; }
  case 27: 
   var $158=(($3+1048)|0);
   var $159=__ZN12RLByteStream8GetDWordEv($158);
   $redmask=$159;
   var $160=(($3+1048)|0);
   var $161=__ZN12RLByteStream8GetDWordEv($160);
   $greenmask=$161;
   var $162=(($3+1048)|0);
   var $163=__ZN12RLByteStream8GetDWordEv($162);
   $bluemask=$163;
   var $164=$bluemask;
   var $165=(($164)|(0))==31;
   if ($165) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $167=$greenmask;
   var $168=(($167)|(0))==992;
   if ($168) { label = 29; break; } else { label = 31; break; }
  case 29: 
   var $170=$redmask;
   var $171=(($170)|(0))==31744;
   if ($171) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $173=(($3+2148)|0);
   HEAP32[(($173)>>2)]=15;
   label = 37; break;
  case 31: 
   var $175=$bluemask;
   var $176=(($175)|(0))==31;
   if ($176) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $178=$greenmask;
   var $179=(($178)|(0))==2016;
   if ($179) { label = 33; break; } else { label = 35; break; }
  case 33: 
   var $181=$redmask;
   var $182=(($181)|(0))==63488;
   if ($182) { label = 34; break; } else { label = 35; break; }
  case 34: 
   label = 36; break;
  case 35: 
   $result=0;
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   label = 42; break;
  case 38: 
   var $188=(($3+2148)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189)|(0))==16;
   if ($190) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $192=(($3+2156)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193)|(0))==0;
   if ($194) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $196=(($3+2148)|0);
   HEAP32[(($196)>>2)]=15;
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   label = 43; break;
  case 43: 
   label = 44; break;
  case 44: 
   label = 62; break;
  case 45: 
   var $202=$size;
   var $203=(($202)|(0))==12;
   if ($203) { label = 46; break; } else { label = 61; break; }
  case 46: 
   var $205=(($3+1048)|0);
   var $206=__ZN12RLByteStream7GetWordEv($205);
   var $207=$3;
   var $208=(($207+8)|0);
   HEAP32[(($208)>>2)]=$206;
   var $209=(($3+1048)|0);
   var $210=__ZN12RLByteStream7GetWordEv($209);
   var $211=$3;
   var $212=(($211+12)|0);
   HEAP32[(($212)>>2)]=$210;
   var $213=(($3+1048)|0);
   var $214=__ZN12RLByteStream8GetDWordEv($213);
   var $215=$214 >> 16;
   var $216=(($3+2148)|0);
   HEAP32[(($216)>>2)]=$215;
   var $217=(($3+2156)|0);
   HEAP32[(($217)>>2)]=0;
   var $218=$3;
   var $219=(($218+8)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=(($220)|(0)) > 0;
   if ($221) { label = 47; break; } else { label = 60; break; }
  case 47: 
   var $223=$3;
   var $224=(($223+12)|0);
   var $225=HEAP32[(($224)>>2)];
   var $226=(($225)|(0)) > 0;
   if ($226) { label = 48; break; } else { label = 60; break; }
  case 48: 
   var $228=(($3+2148)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=(($229)|(0))==1;
   if ($230) { label = 53; break; } else { label = 49; break; }
  case 49: 
   var $232=(($3+2148)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=(($233)|(0))==4;
   if ($234) { label = 53; break; } else { label = 50; break; }
  case 50: 
   var $236=(($3+2148)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=(($237)|(0))==8;
   if ($238) { label = 53; break; } else { label = 51; break; }
  case 51: 
   var $240=(($3+2148)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=(($241)|(0))==24;
   if ($242) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $244=(($3+2148)|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=(($245)|(0))==32;
   if ($246) { label = 53; break; } else { label = 60; break; }
  case 53: 
   var $248=(($3+2148)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=(($249)|(0)) <= 8;
   if ($250) { label = 54; break; } else { label = 59; break; }
  case 54: 
   var $252=(($3+2148)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=1 << $253;
   $clrused1=$254;
   var $255=(($3+1048)|0);
   var $256=(($buffer)|0);
   var $257=$clrused1;
   var $258=((($257)*(3))&-1);
   __ZN12RLByteStream8GetBytesEPviPi($255, $256, $258, 0);
   $j=0;
   label = 55; break;
  case 55: 
   var $260=$j;
   var $261=$clrused1;
   var $262=(($260)|(0)) < (($261)|(0));
   if ($262) { label = 56; break; } else { label = 58; break; }
  case 56: 
   var $264=$j;
   var $265=((($264)*(3))&-1);
   var $266=(($265)|0);
   var $267=(($buffer+$266)|0);
   var $268=HEAP8[($267)];
   var $269=$j;
   var $270=(($3+1124)|0);
   var $271=(($270+($269<<2))|0);
   var $272=(($271)|0);
   HEAP8[($272)]=$268;
   var $273=$j;
   var $274=((($273)*(3))&-1);
   var $275=((($274)+(1))|0);
   var $276=(($buffer+$275)|0);
   var $277=HEAP8[($276)];
   var $278=$j;
   var $279=(($3+1124)|0);
   var $280=(($279+($278<<2))|0);
   var $281=(($280+1)|0);
   HEAP8[($281)]=$277;
   var $282=$j;
   var $283=((($282)*(3))&-1);
   var $284=((($283)+(2))|0);
   var $285=(($buffer+$284)|0);
   var $286=HEAP8[($285)];
   var $287=$j;
   var $288=(($3+1124)|0);
   var $289=(($288+($287<<2))|0);
   var $290=(($289+2)|0);
   HEAP8[($290)]=$286;
   label = 57; break;
  case 57: 
   var $292=$j;
   var $293=((($292)+(1))|0);
   $j=$293;
   label = 55; break;
  case 58: 
   label = 59; break;
  case 59: 
   $result=1;
   label = 60; break;
  case 60: 
   label = 61; break;
  case 61: 
   label = 62; break;
  case 62: 
   label = 63; break;
  case 63: 
   var $300=$result;
   var $301=(($300) & 1);
   if ($301) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $303=(($3+2152)|0);
   HEAP32[(($303)>>2)]=-1;
   var $304=$3;
   var $305=(($304+12)|0);
   HEAP32[(($305)>>2)]=-1;
   var $306=$3;
   var $307=(($306+8)|0);
   HEAP32[(($307)>>2)]=-1;
   var $308=(($3+1048)|0);
   var $309=$308;
   var $310=$309;
   var $311=HEAP32[(($310)>>2)];
   var $312=(($311+12)|0);
   var $313=HEAP32[(($312)>>2)];
   FUNCTION_TABLE[$313]($309);
   label = 65; break;
  case 65: 
   var $315=$result;
   var $316=(($315) & 1);
   $1=$316;
   label = 66; break;
  case 66: 
   var $318=$1;
   STACKTOP = sp;
   return $318;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN14GrFmtBmpReader8ReadDataEPhii($this, $data, $step, $color) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8576)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"17": function(value) { label = 156; $116 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $buffer_size;
   var $buffer=sp;
   var $bgr_buffer=(sp)+(4096);
   var $gray_palette=(sp)+(8192);
   var $result;
   var $src;
   var $bgr;
   var $src_pitch;
   var $nch;
   var $width3;
   var $y=(sp)+(8448);
   var $6=(sp)+(8456);
   var $line_end=(sp)+(8464);
   var $code;
   var $len;
   var $clr=(sp)+(8472);
   var $gray_clr=(sp)+(8480);
   var $t;
   var $end;
   var $x_shift3;
   var $y_shift;
   var $7=(sp)+(8488);
   var $line_end1=(sp)+(8496);
   var $line_end_flag;
   var $code2;
   var $len3;
   var $prev_y;
   var $8=(sp)+(8504);
   var $prev_y4;
   var $code3;
   var $x_shift35;
   var $y_shift6;
   var $9=(sp)+(8512);
   var $10=(sp)+(8520);
   var $11=(sp)+(8528);
   var $12=(sp)+(8536);
   var $13=(sp)+(8544);
   var $14=(sp)+(8552);
   var $15=(sp)+(8560);
   var $16=(sp)+(8568);
   $2=$this;
   $3=$data;
   $4=$step;
   $5=$color;
   var $17=$2;
   $buffer_size=4096;
   $result=0;
   var $18=(($buffer)|0);
   $src=$18;
   var $19=(($bgr_buffer)|0);
   $bgr=$19;
   var $20=$17;
   var $21=(($20+8)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($17+2148)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))!=15;
   if ($25) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $27=(($17+2148)|0);
   var $28=HEAP32[(($27)>>2)];
   var $31 = $28;label = 4; break;
  case 3: 
   var $31 = 16;label = 4; break;
  case 4: 
   var $31;
   var $32=(Math.imul($22,$31)|0);
   var $33=((($32)+(7))|0);
   var $34=((((($33)|(0)))/(8))&-1);
   var $35=((($34)+(3))|0);
   var $36=$35 & -4;
   $src_pitch=$36;
   var $37=$5;
   var $38=(($37)|(0))!=0;
   var $39=$38 ? 3 : 1;
   $nch=$39;
   var $40=$17;
   var $41=(($40+8)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$nch;
   var $44=(Math.imul($42,$43)|0);
   $width3=$44;
   var $45=(($17+2152)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46)|(0)) < 0;
   if ($47) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $49=(($17+1048)|0);
   var $50=$49;
   var $51=__ZN11RBaseStream8IsOpenedEv($50);
   if ($51) { label = 7; break; } else { label = 6; break; }
  case 6: 
   $1=0;
   label = 155; break;
  case 7: 
   var $54=$17;
   var $55=(($54+12)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)-(1))|0);
   var $58=$4;
   var $59=(Math.imul($57,$58)|0);
   var $60=$3;
   var $61=(($60+$59)|0);
   $3=$61;
   var $62=$4;
   var $63=(((-$62))|0);
   $4=$63;
   var $64=(($17+2148)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65)|(0))!=24;
   if ($66) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $68=$5;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 11; break; } else { label = 9; break; }
  case 9: 
   var $71=$src_pitch;
   var $72=((($71)+(32))|0);
   var $73=(($72)|(0)) > 4096;
   if ($73) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $75=$src_pitch;
   var $76=((($75)+(32))|0);
   var $77=(($76)|(0)) < 0;
   var $78=$77 ? -1 : $76;
   var $79=__Znaj($78);
   $src=$79;
   label = 11; break;
  case 11: 
   var $81=$5;
   var $82=(($81)|(0))!=0;
   if ($82) { label = 17; break; } else { label = 12; break; }
  case 12: 
   var $84=(($17+2148)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0)) <= 8;
   if ($86) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $88=(($17+1124)|0);
   var $89=(($88)|0);
   var $90=(($gray_palette)|0);
   var $91=(($17+2148)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=1 << $92;
   __Z16CvtPaletteToGrayPK12PaletteEntryPhi($89, $90, $93);
   label = 14; break;
  case 14: 
   var $95=$17;
   var $96=(($95+8)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=((($97)*(3))&-1);
   var $99=((($98)+(32))|0);
   var $100=(($99)|(0)) > 4096;
   if ($100) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $102=$17;
   var $103=(($102+8)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=((($104)*(3))&-1);
   var $106=((($105)+(32))|0);
   var $107=(($106)|(0)) < 0;
   var $108=$107 ? -1 : $106;
   var $109=__Znaj($108);
   $bgr=$109;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $112=(($17+1048)|0);
   var $113=$112;
   var $114=__ZN11RBaseStream6JmpBufEv($113);
   var $115=(($114)|0);
   var $116=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($115)>>2)]=tempInt, 0);
   label = 156; break;
  case 156: 
   var $117=(($116)|(0))==0;
   if ($117) { label = 18; break; } else { label = 146; break; }
  case 18: 
   var $119=(($17+1048)|0);
   var $120=$119;
   var $121=(($17+2152)|0);
   var $122=HEAP32[(($121)>>2)];
   __ZN11RBaseStream6SetPosEi($120, $122);
   var $123=(($17+2148)|0);
   var $124=HEAP32[(($123)>>2)];
   if ((($124)|(0))==1) {
    label = 19; break;
   }
   else if ((($124)|(0))==4) {
    label = 26; break;
   }
   else if ((($124)|(0))==8) {
    label = 68; break;
   }
   else if ((($124)|(0))==15) {
    label = 113; break;
   }
   else if ((($124)|(0))==16) {
    label = 121; break;
   }
   else if ((($124)|(0))==24) {
    label = 129; break;
   }
   else if ((($124)|(0))==32) {
    label = 136; break;
   }
   else {
   label = 144; break;
   }
  case 19: 
   HEAP32[(($y)>>2)]=0;
   label = 20; break;
  case 20: 
   var $127=HEAP32[(($y)>>2)];
   var $128=$17;
   var $129=(($128+12)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($127)|(0)) < (($130)|(0));
   if ($131) { label = 21; break; } else { label = 25; break; }
  case 21: 
   var $133=(($17+1048)|0);
   var $134=$src;
   var $135=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($133, $134, $135, 0);
   var $136=$5;
   var $137=(($136)|(0))!=0;
   var $138=$3;
   var $139=$bgr;
   var $140=$137 ? $138 : $139;
   var $141=$src;
   var $142=$17;
   var $143=(($142+8)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(($17+1124)|0);
   var $146=(($145)|0);
   var $147=__Z13FillColorRow1PhS_iP12PaletteEntry($140, $141, $144, $146);
   var $148=$5;
   var $149=(($148)|(0))!=0;
   if ($149) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $151=$bgr;
   var $152=$3;
   var $153=$17;
   var $154=(($153+8)|0);
   var $155=HEAP32[(($154)>>2)];
   __Z6cvSizeii($6, $155, 1);
   __Z24icvCvt_BGR2Gray_8u_C3C1RPKhiPhi6CvSizei($151, 0, $152, 0, $6, 0);
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $158=HEAP32[(($y)>>2)];
   var $159=((($158)+(1))|0);
   HEAP32[(($y)>>2)]=$159;
   var $160=$4;
   var $161=$3;
   var $162=(($161+$160)|0);
   $3=$162;
   label = 20; break;
  case 25: 
   $result=1;
   label = 145; break;
  case 26: 
   var $165=(($17+2156)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=(($166)|(0))==0;
   if ($167) { label = 27; break; } else { label = 35; break; }
  case 27: 
   HEAP32[(($y)>>2)]=0;
   label = 28; break;
  case 28: 
   var $170=HEAP32[(($y)>>2)];
   var $171=$17;
   var $172=(($171+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($170)|(0)) < (($173)|(0));
   if ($174) { label = 29; break; } else { label = 34; break; }
  case 29: 
   var $176=(($17+1048)|0);
   var $177=$src;
   var $178=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($176, $177, $178, 0);
   var $179=$5;
   var $180=(($179)|(0))!=0;
   if ($180) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $182=$3;
   var $183=$src;
   var $184=$17;
   var $185=(($184+8)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=(($17+1124)|0);
   var $188=(($187)|0);
   var $189=__Z13FillColorRow4PhS_iP12PaletteEntry($182, $183, $186, $188);
   label = 32; break;
  case 31: 
   var $191=$3;
   var $192=$src;
   var $193=$17;
   var $194=(($193+8)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($gray_palette)|0);
   var $197=__Z12FillGrayRow4PhS_iS_($191, $192, $195, $196);
   label = 32; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $200=HEAP32[(($y)>>2)];
   var $201=((($200)+(1))|0);
   HEAP32[(($y)>>2)]=$201;
   var $202=$4;
   var $203=$3;
   var $204=(($203+$202)|0);
   $3=$204;
   label = 28; break;
  case 34: 
   $result=1;
   label = 67; break;
  case 35: 
   var $207=(($17+2156)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=(($208)|(0))==2;
   if ($209) { label = 36; break; } else { label = 66; break; }
  case 36: 
   var $211=$3;
   var $212=$width3;
   var $213=(($211+$212)|0);
   HEAP32[(($line_end)>>2)]=$213;
   HEAP32[(($y)>>2)]=0;
   label = 37; break;
  case 37: 
   var $215=(($17+1048)|0);
   var $216=__ZN12RLByteStream7GetWordEv($215);
   $code=$216;
   var $217=$code;
   var $218=$217 & 255;
   $len=$218;
   var $219=$code;
   var $220=$219 >> 8;
   $code=$220;
   var $221=$len;
   var $222=(($221)|(0))!=0;
   if ($222) { label = 38; break; } else { label = 47; break; }
  case 38: 
   $t=0;
   var $224=(($clr)|0);
   var $225=$code;
   var $226=$225 >> 4;
   var $227=(($17+1124)|0);
   var $228=(($227+($226<<2))|0);
   var $229=$224;
   var $230=$228;
   assert(4 % 1 === 0);HEAP8[($229)]=HEAP8[($230)];HEAP8[((($229)+(1))|0)]=HEAP8[((($230)+(1))|0)];HEAP8[((($229)+(2))|0)]=HEAP8[((($230)+(2))|0)];HEAP8[((($229)+(3))|0)]=HEAP8[((($230)+(3))|0)];
   var $231=(($clr+4)|0);
   var $232=$code;
   var $233=$232 & 15;
   var $234=(($17+1124)|0);
   var $235=(($234+($233<<2))|0);
   var $236=$231;
   var $237=$235;
   assert(4 % 1 === 0);HEAP8[($236)]=HEAP8[($237)];HEAP8[((($236)+(1))|0)]=HEAP8[((($237)+(1))|0)];HEAP8[((($236)+(2))|0)]=HEAP8[((($237)+(2))|0)];HEAP8[((($236)+(3))|0)]=HEAP8[((($237)+(3))|0)];
   var $238=$code;
   var $239=$238 >> 4;
   var $240=(($gray_palette+$239)|0);
   var $241=HEAP8[($240)];
   var $242=(($gray_clr)|0);
   HEAP8[($242)]=$241;
   var $243=$code;
   var $244=$243 & 15;
   var $245=(($gray_palette+$244)|0);
   var $246=HEAP8[($245)];
   var $247=(($gray_clr+1)|0);
   HEAP8[($247)]=$246;
   var $248=$3;
   var $249=$len;
   var $250=$nch;
   var $251=(Math.imul($249,$250)|0);
   var $252=(($248+$251)|0);
   $end=$252;
   var $253=$end;
   var $254=HEAP32[(($line_end)>>2)];
   var $255=(($253)>>>(0)) > (($254)>>>(0));
   if ($255) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 65; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $259=$5;
   var $260=(($259)|(0))!=0;
   if ($260) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $262=$t;
   var $263=(($clr+($262<<2))|0);
   var $264=(($263)|0);
   var $265=HEAP8[($264)];
   var $266=$3;
   var $267=(($266)|0);
   HEAP8[($267)]=$265;
   var $268=$t;
   var $269=(($clr+($268<<2))|0);
   var $270=(($269+1)|0);
   var $271=HEAP8[($270)];
   var $272=$3;
   var $273=(($272+1)|0);
   HEAP8[($273)]=$271;
   var $274=$t;
   var $275=(($clr+($274<<2))|0);
   var $276=(($275+2)|0);
   var $277=HEAP8[($276)];
   var $278=$3;
   var $279=(($278+2)|0);
   HEAP8[($279)]=$277;
   label = 44; break;
  case 43: 
   var $281=$t;
   var $282=(($gray_clr+$281)|0);
   var $283=HEAP8[($282)];
   var $284=$3;
   HEAP8[($284)]=$283;
   label = 44; break;
  case 44: 
   var $286=$t;
   var $287=$286 ^ 1;
   $t=$287;
   label = 45; break;
  case 45: 
   var $289=$nch;
   var $290=$3;
   var $291=(($290+$289)|0);
   $3=$291;
   var $292=$end;
   var $293=(($291)>>>(0)) < (($292)>>>(0));
   if ($293) { label = 41; break; } else { label = 46; break; }
  case 46: 
   label = 63; break;
  case 47: 
   var $296=$code;
   var $297=(($296)|(0)) > 2;
   if ($297) { label = 48; break; } else { label = 54; break; }
  case 48: 
   var $299=$3;
   var $300=$code;
   var $301=$nch;
   var $302=(Math.imul($300,$301)|0);
   var $303=(($299+$302)|0);
   var $304=HEAP32[(($line_end)>>2)];
   var $305=(($303)>>>(0)) > (($304)>>>(0));
   if ($305) { label = 49; break; } else { label = 50; break; }
  case 49: 
   label = 65; break;
  case 50: 
   var $308=(($17+1048)|0);
   var $309=$src;
   var $310=$code;
   var $311=((($310)+(1))|0);
   var $312=$311 >> 1;
   var $313=((($312)+(1))|0);
   var $314=$313 & -2;
   __ZN12RLByteStream8GetBytesEPviPi($308, $309, $314, 0);
   var $315=$5;
   var $316=(($315)|(0))!=0;
   if ($316) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $318=$3;
   var $319=$src;
   var $320=$code;
   var $321=(($17+1124)|0);
   var $322=(($321)|0);
   var $323=__Z13FillColorRow4PhS_iP12PaletteEntry($318, $319, $320, $322);
   $3=$323;
   label = 53; break;
  case 52: 
   var $325=$3;
   var $326=$src;
   var $327=$code;
   var $328=(($gray_palette)|0);
   var $329=__Z12FillGrayRow4PhS_iS_($325, $326, $327, $328);
   $3=$329;
   label = 53; break;
  case 53: 
   label = 62; break;
  case 54: 
   var $332=HEAP32[(($line_end)>>2)];
   var $333=$3;
   var $334=$332;
   var $335=$333;
   var $336=((($334)-($335))|0);
   $x_shift3=$336;
   var $337=$17;
   var $338=(($337+12)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=HEAP32[(($y)>>2)];
   var $341=((($339)-($340))|0);
   $y_shift=$341;
   var $342=$code;
   var $343=(($342)|(0))==2;
   if ($343) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $345=(($17+1048)|0);
   var $346=__ZN12RLByteStream7GetByteEv($345);
   var $347=$nch;
   var $348=(Math.imul($346,$347)|0);
   $x_shift3=$348;
   var $349=(($17+1048)|0);
   var $350=__ZN12RLByteStream7GetByteEv($349);
   $y_shift=$350;
   label = 56; break;
  case 56: 
   var $352=$x_shift3;
   var $353=$y_shift;
   var $354=$width3;
   var $355=(Math.imul($353,$354)|0);
   var $356=((($352)+($355))|0);
   var $357=$code;
   var $358=(($357)|(0))==0;
   var $359=(($358)&(1));
   var $360=((($359)-(1))|0);
   var $361=$356 & $360;
   $len=$361;
   var $362=$5;
   var $363=(($362)|(0))!=0;
   if ($363) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $365=$3;
   var $366=$4;
   var $367=$width3;
   var $368=$17;
   var $369=(($368+12)|0);
   var $370=HEAP32[(($369)>>2)];
   var $371=$x_shift3;
   var $372=(($17+1124)|0);
   var $373=(($372)|0);
   var $374=$7;
   var $375=$373;
   assert(4 % 1 === 0);HEAP8[($374)]=HEAP8[($375)];HEAP8[((($374)+(1))|0)]=HEAP8[((($375)+(1))|0)];HEAP8[((($374)+(2))|0)]=HEAP8[((($375)+(2))|0)];HEAP8[((($374)+(3))|0)]=HEAP8[((($375)+(3))|0)];
   var $376=__Z12FillUniColorPhRS_iiRiii12PaletteEntry($365, $line_end, $366, $367, $y, $370, $371, $7);
   $3=$376;
   label = 59; break;
  case 58: 
   var $378=$3;
   var $379=$4;
   var $380=$width3;
   var $381=$17;
   var $382=(($381+12)|0);
   var $383=HEAP32[(($382)>>2)];
   var $384=$x_shift3;
   var $385=(($gray_palette)|0);
   var $386=HEAP8[($385)];
   var $387=__Z11FillUniGrayPhRS_iiRiiih($378, $line_end, $379, $380, $y, $383, $384, $386);
   $3=$387;
   label = 59; break;
  case 59: 
   var $389=HEAP32[(($y)>>2)];
   var $390=$17;
   var $391=(($390+12)|0);
   var $392=HEAP32[(($391)>>2)];
   var $393=(($389)|(0)) >= (($392)|(0));
   if ($393) { label = 60; break; } else { label = 61; break; }
  case 60: 
   label = 64; break;
  case 61: 
   label = 62; break;
  case 62: 
   label = 63; break;
  case 63: 
   label = 37; break;
  case 64: 
   $result=1;
   label = 65; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   label = 145; break;
  case 68: 
   var $403=(($17+2156)|0);
   var $404=HEAP32[(($403)>>2)];
   var $405=(($404)|(0))==0;
   if ($405) { label = 69; break; } else { label = 77; break; }
  case 69: 
   HEAP32[(($y)>>2)]=0;
   label = 70; break;
  case 70: 
   var $408=HEAP32[(($y)>>2)];
   var $409=$17;
   var $410=(($409+12)|0);
   var $411=HEAP32[(($410)>>2)];
   var $412=(($408)|(0)) < (($411)|(0));
   if ($412) { label = 71; break; } else { label = 76; break; }
  case 71: 
   var $414=(($17+1048)|0);
   var $415=$src;
   var $416=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($414, $415, $416, 0);
   var $417=$5;
   var $418=(($417)|(0))!=0;
   if ($418) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $420=$3;
   var $421=$src;
   var $422=$17;
   var $423=(($422+8)|0);
   var $424=HEAP32[(($423)>>2)];
   var $425=(($17+1124)|0);
   var $426=(($425)|0);
   var $427=__Z13FillColorRow8PhS_iP12PaletteEntry($420, $421, $424, $426);
   label = 74; break;
  case 73: 
   var $429=$3;
   var $430=$src;
   var $431=$17;
   var $432=(($431+8)|0);
   var $433=HEAP32[(($432)>>2)];
   var $434=(($gray_palette)|0);
   var $435=__Z12FillGrayRow8PhS_iS_($429, $430, $433, $434);
   label = 74; break;
  case 74: 
   label = 75; break;
  case 75: 
   var $438=HEAP32[(($y)>>2)];
   var $439=((($438)+(1))|0);
   HEAP32[(($y)>>2)]=$439;
   var $440=$4;
   var $441=$3;
   var $442=(($441+$440)|0);
   $3=$442;
   label = 70; break;
  case 76: 
   $result=1;
   label = 112; break;
  case 77: 
   var $445=(($17+2156)|0);
   var $446=HEAP32[(($445)>>2)];
   var $447=(($446)|(0))==1;
   if ($447) { label = 78; break; } else { label = 111; break; }
  case 78: 
   var $449=$3;
   var $450=$width3;
   var $451=(($449+$450)|0);
   HEAP32[(($line_end1)>>2)]=$451;
   $line_end_flag=0;
   HEAP32[(($y)>>2)]=0;
   label = 79; break;
  case 79: 
   var $453=(($17+1048)|0);
   var $454=__ZN12RLByteStream7GetWordEv($453);
   $code2=$454;
   var $455=$code2;
   var $456=$455 & 255;
   $len3=$456;
   var $457=$code2;
   var $458=$457 >> 8;
   $code2=$458;
   var $459=$len3;
   var $460=(($459)|(0))!=0;
   if ($460) { label = 80; break; } else { label = 86; break; }
  case 80: 
   var $462=HEAP32[(($y)>>2)];
   $prev_y=$462;
   var $463=$nch;
   var $464=$len3;
   var $465=(Math.imul($464,$463)|0);
   $len3=$465;
   var $466=$3;
   var $467=$len3;
   var $468=(($466+$467)|0);
   var $469=HEAP32[(($line_end1)>>2)];
   var $470=(($468)>>>(0)) > (($469)>>>(0));
   if ($470) { label = 81; break; } else { label = 82; break; }
  case 81: 
   label = 110; break;
  case 82: 
   var $473=$5;
   var $474=(($473)|(0))!=0;
   if ($474) { label = 83; break; } else { label = 84; break; }
  case 83: 
   var $476=$3;
   var $477=$4;
   var $478=$width3;
   var $479=$17;
   var $480=(($479+12)|0);
   var $481=HEAP32[(($480)>>2)];
   var $482=$len3;
   var $483=$code2;
   var $484=(($17+1124)|0);
   var $485=(($484+($483<<2))|0);
   var $486=$8;
   var $487=$485;
   assert(4 % 1 === 0);HEAP8[($486)]=HEAP8[($487)];HEAP8[((($486)+(1))|0)]=HEAP8[((($487)+(1))|0)];HEAP8[((($486)+(2))|0)]=HEAP8[((($487)+(2))|0)];HEAP8[((($486)+(3))|0)]=HEAP8[((($487)+(3))|0)];
   var $488=__Z12FillUniColorPhRS_iiRiii12PaletteEntry($476, $line_end1, $477, $478, $y, $481, $482, $8);
   $3=$488;
   label = 85; break;
  case 84: 
   var $490=$3;
   var $491=$4;
   var $492=$width3;
   var $493=$17;
   var $494=(($493+12)|0);
   var $495=HEAP32[(($494)>>2)];
   var $496=$len3;
   var $497=$code2;
   var $498=(($gray_palette+$497)|0);
   var $499=HEAP8[($498)];
   var $500=__Z11FillUniGrayPhRS_iiRiiih($490, $line_end1, $491, $492, $y, $495, $496, $499);
   $3=$500;
   label = 85; break;
  case 85: 
   var $502=HEAP32[(($y)>>2)];
   var $503=$prev_y;
   var $504=((($502)-($503))|0);
   $line_end_flag=$504;
   label = 108; break;
  case 86: 
   var $506=$code2;
   var $507=(($506)|(0)) > 2;
   if ($507) { label = 87; break; } else { label = 93; break; }
  case 87: 
   var $509=HEAP32[(($y)>>2)];
   $prev_y4=$509;
   var $510=$code2;
   var $511=$nch;
   var $512=(Math.imul($510,$511)|0);
   $code3=$512;
   var $513=$3;
   var $514=$code3;
   var $515=(($513+$514)|0);
   var $516=HEAP32[(($line_end1)>>2)];
   var $517=(($515)>>>(0)) > (($516)>>>(0));
   if ($517) { label = 88; break; } else { label = 89; break; }
  case 88: 
   label = 110; break;
  case 89: 
   var $520=(($17+1048)|0);
   var $521=$src;
   var $522=$code2;
   var $523=((($522)+(1))|0);
   var $524=$523 & -2;
   __ZN12RLByteStream8GetBytesEPviPi($520, $521, $524, 0);
   var $525=$5;
   var $526=(($525)|(0))!=0;
   if ($526) { label = 90; break; } else { label = 91; break; }
  case 90: 
   var $528=$3;
   var $529=$src;
   var $530=$code2;
   var $531=(($17+1124)|0);
   var $532=(($531)|0);
   var $533=__Z13FillColorRow8PhS_iP12PaletteEntry($528, $529, $530, $532);
   $3=$533;
   label = 92; break;
  case 91: 
   var $535=$3;
   var $536=$src;
   var $537=$code2;
   var $538=(($gray_palette)|0);
   var $539=__Z12FillGrayRow8PhS_iS_($535, $536, $537, $538);
   $3=$539;
   label = 92; break;
  case 92: 
   var $541=HEAP32[(($y)>>2)];
   var $542=$prev_y4;
   var $543=((($541)-($542))|0);
   $line_end_flag=$543;
   label = 107; break;
  case 93: 
   var $545=HEAP32[(($line_end1)>>2)];
   var $546=$3;
   var $547=$545;
   var $548=$546;
   var $549=((($547)-($548))|0);
   $x_shift35=$549;
   var $550=$17;
   var $551=(($550+12)|0);
   var $552=HEAP32[(($551)>>2)];
   var $553=HEAP32[(($y)>>2)];
   var $554=((($552)-($553))|0);
   $y_shift6=$554;
   var $555=$code2;
   var $556=(($555)|(0))!=0;
   if ($556) { label = 96; break; } else { label = 94; break; }
  case 94: 
   var $558=$line_end_flag;
   var $559=(($558)|(0))!=0;
   if ($559) { label = 95; break; } else { label = 96; break; }
  case 95: 
   var $561=$x_shift35;
   var $562=$width3;
   var $563=(($561)|(0)) < (($562)|(0));
   if ($563) { label = 96; break; } else { label = 106; break; }
  case 96: 
   var $565=$code2;
   var $566=(($565)|(0))==2;
   if ($566) { label = 97; break; } else { label = 98; break; }
  case 97: 
   var $568=(($17+1048)|0);
   var $569=__ZN12RLByteStream7GetByteEv($568);
   var $570=$nch;
   var $571=(Math.imul($569,$570)|0);
   $x_shift35=$571;
   var $572=(($17+1048)|0);
   var $573=__ZN12RLByteStream7GetByteEv($572);
   $y_shift6=$573;
   label = 98; break;
  case 98: 
   var $575=$y_shift6;
   var $576=$width3;
   var $577=(Math.imul($575,$576)|0);
   var $578=$code2;
   var $579=(($578)|(0))==0;
   var $580=(($579)&(1));
   var $581=((($580)-(1))|0);
   var $582=$577 & $581;
   var $583=$x_shift35;
   var $584=((($583)+($582))|0);
   $x_shift35=$584;
   var $585=HEAP32[(($y)>>2)];
   var $586=$17;
   var $587=(($586+12)|0);
   var $588=HEAP32[(($587)>>2)];
   var $589=(($585)|(0)) >= (($588)|(0));
   if ($589) { label = 99; break; } else { label = 100; break; }
  case 99: 
   label = 109; break;
  case 100: 
   var $592=$5;
   var $593=(($592)|(0))!=0;
   if ($593) { label = 101; break; } else { label = 102; break; }
  case 101: 
   var $595=$3;
   var $596=$4;
   var $597=$width3;
   var $598=$17;
   var $599=(($598+12)|0);
   var $600=HEAP32[(($599)>>2)];
   var $601=$x_shift35;
   var $602=(($17+1124)|0);
   var $603=(($602)|0);
   var $604=$9;
   var $605=$603;
   assert(4 % 1 === 0);HEAP8[($604)]=HEAP8[($605)];HEAP8[((($604)+(1))|0)]=HEAP8[((($605)+(1))|0)];HEAP8[((($604)+(2))|0)]=HEAP8[((($605)+(2))|0)];HEAP8[((($604)+(3))|0)]=HEAP8[((($605)+(3))|0)];
   var $606=__Z12FillUniColorPhRS_iiRiii12PaletteEntry($595, $line_end1, $596, $597, $y, $600, $601, $9);
   $3=$606;
   label = 103; break;
  case 102: 
   var $608=$3;
   var $609=$4;
   var $610=$width3;
   var $611=$17;
   var $612=(($611+12)|0);
   var $613=HEAP32[(($612)>>2)];
   var $614=$x_shift35;
   var $615=(($gray_palette)|0);
   var $616=HEAP8[($615)];
   var $617=__Z11FillUniGrayPhRS_iiRiiih($608, $line_end1, $609, $610, $y, $613, $614, $616);
   $3=$617;
   label = 103; break;
  case 103: 
   var $619=HEAP32[(($y)>>2)];
   var $620=$17;
   var $621=(($620+12)|0);
   var $622=HEAP32[(($621)>>2)];
   var $623=(($619)|(0)) >= (($622)|(0));
   if ($623) { label = 104; break; } else { label = 105; break; }
  case 104: 
   label = 109; break;
  case 105: 
   label = 106; break;
  case 106: 
   $line_end_flag=0;
   label = 107; break;
  case 107: 
   label = 108; break;
  case 108: 
   label = 79; break;
  case 109: 
   $result=1;
   label = 110; break;
  case 110: 
   label = 111; break;
  case 111: 
   label = 112; break;
  case 112: 
   label = 145; break;
  case 113: 
   HEAP32[(($y)>>2)]=0;
   label = 114; break;
  case 114: 
   var $635=HEAP32[(($y)>>2)];
   var $636=$17;
   var $637=(($636+12)|0);
   var $638=HEAP32[(($637)>>2)];
   var $639=(($635)|(0)) < (($638)|(0));
   if ($639) { label = 115; break; } else { label = 120; break; }
  case 115: 
   var $641=(($17+1048)|0);
   var $642=$src;
   var $643=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($641, $642, $643, 0);
   var $644=$5;
   var $645=(($644)|(0))!=0;
   if ($645) { label = 117; break; } else { label = 116; break; }
  case 116: 
   var $647=$src;
   var $648=$3;
   var $649=$17;
   var $650=(($649+8)|0);
   var $651=HEAP32[(($650)>>2)];
   __Z6cvSizeii($10, $651, 1);
   __Z27icvCvt_BGR5552Gray_8u_C2C1RPKhiPhi6CvSize($647, 0, $648, 0, $10);
   label = 118; break;
  case 117: 
   var $653=$src;
   var $654=$3;
   var $655=$17;
   var $656=(($655+8)|0);
   var $657=HEAP32[(($656)>>2)];
   __Z6cvSizeii($11, $657, 1);
   __Z26icvCvt_BGR5552BGR_8u_C2C3RPKhiPhi6CvSize($653, 0, $654, 0, $11);
   label = 118; break;
  case 118: 
   label = 119; break;
  case 119: 
   var $660=HEAP32[(($y)>>2)];
   var $661=((($660)+(1))|0);
   HEAP32[(($y)>>2)]=$661;
   var $662=$4;
   var $663=$3;
   var $664=(($663+$662)|0);
   $3=$664;
   label = 114; break;
  case 120: 
   $result=1;
   label = 145; break;
  case 121: 
   HEAP32[(($y)>>2)]=0;
   label = 122; break;
  case 122: 
   var $668=HEAP32[(($y)>>2)];
   var $669=$17;
   var $670=(($669+12)|0);
   var $671=HEAP32[(($670)>>2)];
   var $672=(($668)|(0)) < (($671)|(0));
   if ($672) { label = 123; break; } else { label = 128; break; }
  case 123: 
   var $674=(($17+1048)|0);
   var $675=$src;
   var $676=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($674, $675, $676, 0);
   var $677=$5;
   var $678=(($677)|(0))!=0;
   if ($678) { label = 125; break; } else { label = 124; break; }
  case 124: 
   var $680=$src;
   var $681=$3;
   var $682=$17;
   var $683=(($682+8)|0);
   var $684=HEAP32[(($683)>>2)];
   __Z6cvSizeii($12, $684, 1);
   __Z27icvCvt_BGR5652Gray_8u_C2C1RPKhiPhi6CvSize($680, 0, $681, 0, $12);
   label = 126; break;
  case 125: 
   var $686=$src;
   var $687=$3;
   var $688=$17;
   var $689=(($688+8)|0);
   var $690=HEAP32[(($689)>>2)];
   __Z6cvSizeii($13, $690, 1);
   __Z26icvCvt_BGR5652BGR_8u_C2C3RPKhiPhi6CvSize($686, 0, $687, 0, $13);
   label = 126; break;
  case 126: 
   label = 127; break;
  case 127: 
   var $693=HEAP32[(($y)>>2)];
   var $694=((($693)+(1))|0);
   HEAP32[(($y)>>2)]=$694;
   var $695=$4;
   var $696=$3;
   var $697=(($696+$695)|0);
   $3=$697;
   label = 122; break;
  case 128: 
   $result=1;
   label = 145; break;
  case 129: 
   HEAP32[(($y)>>2)]=0;
   label = 130; break;
  case 130: 
   var $701=HEAP32[(($y)>>2)];
   var $702=$17;
   var $703=(($702+12)|0);
   var $704=HEAP32[(($703)>>2)];
   var $705=(($701)|(0)) < (($704)|(0));
   if ($705) { label = 131; break; } else { label = 135; break; }
  case 131: 
   var $707=(($17+1048)|0);
   var $708=$5;
   var $709=(($708)|(0))!=0;
   var $710=$3;
   var $711=$src;
   var $712=$709 ? $710 : $711;
   var $713=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($707, $712, $713, 0);
   var $714=$5;
   var $715=(($714)|(0))!=0;
   if ($715) { label = 133; break; } else { label = 132; break; }
  case 132: 
   var $717=$src;
   var $718=$3;
   var $719=$17;
   var $720=(($719+8)|0);
   var $721=HEAP32[(($720)>>2)];
   __Z6cvSizeii($14, $721, 1);
   __Z24icvCvt_BGR2Gray_8u_C3C1RPKhiPhi6CvSizei($717, 0, $718, 0, $14, 0);
   label = 133; break;
  case 133: 
   label = 134; break;
  case 134: 
   var $724=HEAP32[(($y)>>2)];
   var $725=((($724)+(1))|0);
   HEAP32[(($y)>>2)]=$725;
   var $726=$4;
   var $727=$3;
   var $728=(($727+$726)|0);
   $3=$728;
   label = 130; break;
  case 135: 
   $result=1;
   label = 145; break;
  case 136: 
   HEAP32[(($y)>>2)]=0;
   label = 137; break;
  case 137: 
   var $732=HEAP32[(($y)>>2)];
   var $733=$17;
   var $734=(($733+12)|0);
   var $735=HEAP32[(($734)>>2)];
   var $736=(($732)|(0)) < (($735)|(0));
   if ($736) { label = 138; break; } else { label = 143; break; }
  case 138: 
   var $738=(($17+1048)|0);
   var $739=$src;
   var $740=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($738, $739, $740, 0);
   var $741=$5;
   var $742=(($741)|(0))!=0;
   if ($742) { label = 140; break; } else { label = 139; break; }
  case 139: 
   var $744=$src;
   var $745=$3;
   var $746=$17;
   var $747=(($746+8)|0);
   var $748=HEAP32[(($747)>>2)];
   __Z6cvSizeii($15, $748, 1);
   __Z25icvCvt_BGRA2Gray_8u_C4C1RPKhiPhi6CvSizei($744, 0, $745, 0, $15, 0);
   label = 141; break;
  case 140: 
   var $750=$src;
   var $751=$3;
   var $752=$17;
   var $753=(($752+8)|0);
   var $754=HEAP32[(($753)>>2)];
   __Z6cvSizeii($16, $754, 1);
   __Z24icvCvt_BGRA2BGR_8u_C4C3RPKhiPhi6CvSizei($750, 0, $751, 0, $16, 0);
   label = 141; break;
  case 141: 
   label = 142; break;
  case 142: 
   var $757=HEAP32[(($y)>>2)];
   var $758=((($757)+(1))|0);
   HEAP32[(($y)>>2)]=$758;
   var $759=$4;
   var $760=$3;
   var $761=(($760+$759)|0);
   $3=$761;
   label = 137; break;
  case 143: 
   $result=1;
   label = 145; break;
  case 144: 
   label = 145; break;
  case 145: 
   label = 146; break;
  case 146: 
   var $766=$src;
   var $767=(($buffer)|0);
   var $768=(($766)|(0))!=(($767)|(0));
   if ($768) { label = 147; break; } else { label = 150; break; }
  case 147: 
   var $770=$src;
   var $771=(($770)|(0))==0;
   if ($771) { label = 149; break; } else { label = 148; break; }
  case 148: 
   __ZdaPv($770);
   label = 149; break;
  case 149: 
   label = 150; break;
  case 150: 
   var $775=$bgr;
   var $776=(($bgr_buffer)|0);
   var $777=(($775)|(0))!=(($776)|(0));
   if ($777) { label = 151; break; } else { label = 154; break; }
  case 151: 
   var $779=$bgr;
   var $780=(($779)|(0))==0;
   if ($780) { label = 153; break; } else { label = 152; break; }
  case 152: 
   __ZdaPv($779);
   label = 153; break;
  case 153: 
   label = 154; break;
  case 154: 
   var $784=$result;
   var $785=(($784) & 1);
   $1=$785;
   label = 155; break;
  case 155: 
   var $787=$1;
   STACKTOP = sp;
   return $787;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN14RJpegBitStream5FlushEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=(($6+64)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($5+$8)|0);
 var $10=$2;
 var $11=(($10+48)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$2;
 var $13=(($12+48)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=((($14)-(4))|0);
 var $16=$2;
 var $17=(($16+52)|0);
 HEAP32[(($17)>>2)]=$15;
 var $18=$2;
 var $19=(($18+76)|0);
 HEAP32[(($19)>>2)]=0;
 return;
}
function __ZN14RJpegBitStream11AlignOnByteEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=(($3+76)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5 & -8;
 HEAP32[(($4)>>2)]=$6;
 return;
}
function __ZN12WLByteStreamC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN12WLByteStreamC2Ev($2);
 return;
}
function __ZN14GrFmtBmpWriterD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtBmpWriterD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtBmpWriter10WriteImageEPKhiiiii($this, $data, $step, $width, $height, $0, $channels) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $result;
   var $fileStep;
   var $zeropad=sp;
   var $bitmapHeaderSize;
   var $paletteSize;
   var $headerSize;
   var $palette=(sp)+(8);
   $2=$this;
   $3=$data;
   $4=$step;
   $5=$width;
   $6=$height;
   $7=$0;
   $8=$channels;
   var $9=$2;
   $result=0;
   var $10=$5;
   var $11=$8;
   var $12=(Math.imul($10,$11)|0);
   var $13=((($12)+(3))|0);
   var $14=$13 & -4;
   $fileStep=$14;
   var $15=$zeropad;
   HEAP8[($15)]=0; HEAP8[((($15)+(1))|0)]=0; HEAP8[((($15)+(2))|0)]=0; HEAP8[((($15)+(3))|0)]=0; HEAP8[((($15)+(4))|0)]=0;
   var $16=(($9+1028)|0);
   var $17=$16;
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$9;
   var $23=(($22+4)|0);
   var $24=(($23)|0);
   var $25=FUNCTION_TABLE[$21]($17, $24);
   if ($25) { label = 2; break; } else { label = 11; break; }
  case 2: 
   $bitmapHeaderSize=40;
   var $27=$8;
   var $28=(($27)|(0)) > 1;
   var $29=$28 ? 0 : 1024;
   $paletteSize=$29;
   var $30=$bitmapHeaderSize;
   var $31=((($30)+(14))|0);
   var $32=$paletteSize;
   var $33=((($31)+($32))|0);
   $headerSize=$33;
   var $34=(($9+1028)|0);
   var $35=HEAP32[((23560)>>2)];
   var $36=HEAP32[((23560)>>2)];
   var $37=_strlen($36);
   __ZN12WLByteStream8PutBytesEPKvi($34, $35, $37);
   var $38=(($9+1028)|0);
   var $39=$fileStep;
   var $40=$6;
   var $41=(Math.imul($39,$40)|0);
   var $42=$headerSize;
   var $43=((($41)+($42))|0);
   __ZN12WLByteStream8PutDWordEi($38, $43);
   var $44=(($9+1028)|0);
   __ZN12WLByteStream8PutDWordEi($44, 0);
   var $45=(($9+1028)|0);
   var $46=$headerSize;
   __ZN12WLByteStream8PutDWordEi($45, $46);
   var $47=(($9+1028)|0);
   var $48=$bitmapHeaderSize;
   __ZN12WLByteStream8PutDWordEi($47, $48);
   var $49=(($9+1028)|0);
   var $50=$5;
   __ZN12WLByteStream8PutDWordEi($49, $50);
   var $51=(($9+1028)|0);
   var $52=$6;
   __ZN12WLByteStream8PutDWordEi($51, $52);
   var $53=(($9+1028)|0);
   __ZN12WLByteStream7PutWordEi($53, 1);
   var $54=(($9+1028)|0);
   var $55=$8;
   var $56=$55 << 3;
   __ZN12WLByteStream7PutWordEi($54, $56);
   var $57=(($9+1028)|0);
   __ZN12WLByteStream8PutDWordEi($57, 0);
   var $58=(($9+1028)|0);
   __ZN12WLByteStream8PutDWordEi($58, 0);
   var $59=(($9+1028)|0);
   __ZN12WLByteStream8PutDWordEi($59, 0);
   var $60=(($9+1028)|0);
   __ZN12WLByteStream8PutDWordEi($60, 0);
   var $61=(($9+1028)|0);
   __ZN12WLByteStream8PutDWordEi($61, 0);
   var $62=(($9+1028)|0);
   __ZN12WLByteStream8PutDWordEi($62, 0);
   var $63=$8;
   var $64=(($63)|(0))==1;
   if ($64) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $66=(($palette)|0);
   __Z15FillGrayPaletteP12PaletteEntryib($66, 8, 0);
   var $67=(($9+1028)|0);
   var $68=(($palette)|0);
   var $69=$68;
   __ZN12WLByteStream8PutBytesEPKvi($67, $69, 1024);
   label = 4; break;
  case 4: 
   var $71=$8;
   var $72=$5;
   var $73=(Math.imul($72,$71)|0);
   $5=$73;
   var $74=$4;
   var $75=$6;
   var $76=((($75)-(1))|0);
   var $77=(Math.imul($74,$76)|0);
   var $78=$3;
   var $79=(($78+$77)|0);
   $3=$79;
   label = 5; break;
  case 5: 
   var $81=$6;
   var $82=((($81)-(1))|0);
   $6=$82;
   var $83=(($81)|(0))!=0;
   if ($83) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $85=(($9+1028)|0);
   var $86=$3;
   var $87=$5;
   __ZN12WLByteStream8PutBytesEPKvi($85, $86, $87);
   var $88=$fileStep;
   var $89=$5;
   var $90=(($88)|(0)) > (($89)|(0));
   if ($90) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $92=(($9+1028)|0);
   var $93=(($zeropad)|0);
   var $94=$fileStep;
   var $95=$5;
   var $96=((($94)-($95))|0);
   __ZN12WLByteStream8PutBytesEPKvi($92, $93, $96);
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $99=$4;
   var $100=$3;
   var $101=(((-$99))|0);
   var $102=(($100+$101)|0);
   $3=$102;
   label = 5; break;
  case 10: 
   var $104=(($9+1028)|0);
   var $105=$104;
   var $106=$105;
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107+12)|0);
   var $109=HEAP32[(($108)>>2)];
   FUNCTION_TABLE[$109]($105);
   $result=1;
   label = 11; break;
  case 11: 
   var $111=$result;
   var $112=(($111) & 1);
   STACKTOP = sp;
   return $112;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WLByteStreamC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN11WBaseStreamC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((19264)|0);
 return;
}
function __ZN12RLByteStreamC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN11RBaseStreamC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((19360)|0);
 return;
}
function __ZN9GrFmtJpegC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((18528)|0);
 var $5=$2;
 var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=3;
 var $7=$2;
 var $8=(($7+12)|0);
 HEAP32[(($8)>>2)]=((8640)|0);
 var $9=$2;
 var $10=(($9+4)|0);
 HEAP32[(($10)>>2)]=((13056)|0);
 return;
}
function __ZN9GrFmtJpegD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN9GrFmtJpegD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN9GrFmtJpegD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryD2Ev($3);
 return;
}
function __ZN9GrFmtJpeg9NewReaderEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(2348);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN15GrFmtJpegReaderC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN9GrFmtJpeg9NewWriterEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(1104);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN15GrFmtJpegWriterC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RMBitStreamC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN11RLBitStreamC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((19504)|0);
 return;
}
function __ZN12RMByteStreamC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN12RMByteStreamC2Ev($2);
 return;
}
function __ZN14RJpegBitStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN14RJpegBitStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14RJpegBitStream4OpenEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$filename;
   var $3=$1;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   FUNCTION_TABLE[$7]($3);
   var $8=$3;
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10+24)|0);
   var $12=HEAP32[(($11)>>2)];
   FUNCTION_TABLE[$12]($8);
   var $13=(($3+80)|0);
   var $14=$13;
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$2;
   var $20=FUNCTION_TABLE[$18]($14, $19);
   var $21=$3;
   var $22=(($21+73)|0);
   var $23=(($20)&(1));
   HEAP8[($22)]=$23;
   var $24=$3;
   var $25=(($24+73)|0);
   var $26=HEAP8[($25)];
   var $27=(($26) & 1);
   if ($27) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $29=$3;
   __ZN11RMBitStream6SetPosEi($29, 0);
   label = 3; break;
  case 3: 
   var $31=$3;
   var $32=(($31+73)|0);
   var $33=HEAP8[($32)];
   var $34=(($33) & 1);
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14RJpegBitStream5CloseEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+80)|0);
 var $4=$3;
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($4);
 var $9=$2;
 var $10=(($9+73)|0);
 HEAP8[($10)]=0;
 return;
}
function __ZN14RJpegBitStream9ReadBlockEv($this) {
 var label = 0;
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"1": function(value) { label = 23; $17 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $end;
   var $current;
   var $sz;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+44)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=(($6+64)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($5+$8)|0);
   $end=$9;
   var $10=$2;
   var $11=(($10+44)|0);
   var $12=HEAP32[(($11)>>2)];
   $current=$12;
   var $13=(($2+80)|0);
   var $14=$13;
   var $15=__ZN11RBaseStream6JmpBufEv($14);
   var $16=(($15)|0);
   var $17=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($16)>>2)]=tempInt, 0);
   label = 23; break;
  case 23: 
   var $18=(($17)|(0))==0;
   if ($18) { label = 2; break; } else { label = 16; break; }
  case 2: 
   var $20=$2;
   var $21=(($20+60)|0);
   var $22=HEAP32[(($21)>>2)];
   $sz=$22;
   var $23=$current;
   var $24=$sz;
   var $25=(((-$24))|0);
   var $26=(($23+$25)|0);
   var $27=$2;
   var $28=(($27+48)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$sz;
   var $31=(((-$30))|0);
   var $32=(($29+$31)|0);
   var $33=$sz;
   _memmove($26, $32, $33, 1, 0);
   label = 3; break;
  case 3: 
   var $35=$current;
   var $36=$end;
   var $37=(($35)>>>(0)) < (($36)>>>(0));
   if ($37) { label = 4; break; } else { label = 14; break; }
  case 4: 
   var $39=(($2+80)|0);
   var $40=$39;
   var $41=__ZN12RLByteStream7GetByteEv($40);
   $val=$41;
   var $42=$val;
   var $43=(($42)|(0))!=255;
   if ($43) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $45=$val;
   var $46=(($45) & 255);
   var $47=$current;
   var $48=(($47+1)|0);
   $current=$48;
   HEAP8[($47)]=$46;
   label = 13; break;
  case 6: 
   var $50=(($2+80)|0);
   var $51=$50;
   var $52=__ZN12RLByteStream7GetByteEv($51);
   $val=$52;
   var $53=$val;
   var $54=(($53)|(0))==0;
   if ($54) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $56=$current;
   var $57=(($56+1)|0);
   $current=$57;
   HEAP8[($56)]=-1;
   label = 12; break;
  case 8: 
   var $59=$val;
   var $60=208 <= (($59)|(0));
   if ($60) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $62=$val;
   var $63=(($62)|(0)) <= 215;
   if ($63) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $65=(($2+80)|0);
   var $66=$65;
   var $67=(($2+80)|0);
   var $68=$67;
   var $69=__ZN11RBaseStream6GetPosEv($68);
   var $70=((($69)-(2))|0);
   __ZN11RBaseStream6SetPosEi($66, $70);
   label = 15; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 3; break;
  case 14: 
   label = 15; break;
  case 15: 
   label = 20; break;
  case 16: 
   var $77=$current;
   var $78=$2;
   var $79=(($78+44)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(($77)|(0))==(($80)|(0));
   if ($81) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $83=$2;
   var $84=(($83+72)|0);
   var $85=HEAP8[($84)];
   var $86=(($85) & 1);
   if ($86) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $88=$2;
   var $89=(($88+4)|0);
   var $90=(($89)|0);
   _longjmp($90, -123);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $93=$2;
   var $94=(($93+44)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=$2;
   var $97=(($96+52)|0);
   HEAP32[(($97)>>2)]=$95;
   var $98=$2;
   var $99=(($98+44)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$current;
   var $102=$2;
   var $103=(($102+44)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=$101;
   var $106=$104;
   var $107=((($105)-($106))|0);
   var $108=((($107)+(3))|0);
   var $109=$108 & -4;
   var $110=(($100+$109)|0);
   var $111=$2;
   var $112=(($111+48)|0);
   HEAP32[(($112)>>2)]=$110;
   var $113=__Z13bsIsBigEndianv();
   if ($113) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $115=$2;
   var $116=(($115+44)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=$2;
   var $119=(($118+48)|0);
   var $120=HEAP32[(($119)>>2)];
   __Z12bsBSwapBlockPhS_($117, $120);
   label = 22; break;
  case 22: 
   return;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN14RJpegBitStream10FindMarkerEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $code;
   $1=$this;
   var $2=$1;
   var $3=(($2+80)|0);
   var $4=__ZN12RMByteStream7GetWordEv($3);
   $code=$4;
   label = 2; break;
  case 2: 
   var $6=$code;
   var $7=$6 & 65280;
   var $8=(($7)|(0))!=65280;
   if ($8) { var $18 = 1;label = 6; break; } else { label = 3; break; }
  case 3: 
   var $10=$code;
   var $11=(($10)|(0))==65535;
   if ($11) { var $16 = 1;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $13=$code;
   var $14=(($13)|(0))==65280;
   var $16 = $14;label = 5; break;
  case 5: 
   var $16;
   var $18 = $16;label = 6; break;
  case 6: 
   var $18;
   if ($18) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $20=$code;
   var $21=$20 & 255;
   var $22=$21 << 8;
   var $23=(($2+80)|0);
   var $24=$23;
   var $25=__ZN12RLByteStream7GetByteEv($24);
   var $26=$22 | $25;
   $code=$26;
   label = 2; break;
  case 8: 
   var $28=$code;
   return $28;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtBmpWriterC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtWriterC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((19144)|0);
   var $9=(($5+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN12WLByteStreamC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   var $15=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $18=$3;
   var $19=$4;
   var $20$0=$18;
   var $20$1=0;
   var $21$0=$20$0;
   var $21$1=$19;
   ___resumeException($21$0)
  case 6: 
   var $23$0 = ___cxa_find_matching_catch(-1, -1,0); $23$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtBmpWriterD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((19144)|0);
   var $6=(($4+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$4;
   __ZN11GrFmtWriterD2Ev($8);
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14RJpegBitStreamC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   __ZN11RMBitStreamC2Ev($5);
   var $6=$4;
   HEAP32[(($6)>>2)]=((18984)|0);
   var $7=(($4+80)|0);
   (function() { try { __THREW__ = 0; return __ZN12RMByteStreamC1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14RJpegBitStreamD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((18984)|0);
   var $6=$4;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+12)|0);
   var $9=HEAP32[(($8)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $11=(($4+80)|0);
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $13=$4;
   __ZN11RBaseStreamD2Ev($13);
   return;
  case 4: 
   var $15$0 = ___cxa_find_matching_catch(-1, -1); $15$1 = tempRet0;
   var $16=$15$0;
   $2=$16;
   var $17=$15$1;
   $3=$17;
   var $18=(($4+80)|0);
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 10; break; }
  case 5: 
   var $20$0 = ___cxa_find_matching_catch(-1, -1); $20$1 = tempRet0;
   var $21=$20$0;
   $2=$21;
   var $22=$20$1;
   $3=$22;
   label = 7; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $25=$4;
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 10; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $28=$2;
   var $29=$3;
   var $30$0=$28;
   var $30$1=0;
   var $31$0=$30$0;
   var $31$1=$29;
   ___resumeException($31$0)
  case 10: 
   var $33$0 = ___cxa_find_matching_catch(-1, -1,0); $33$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegReaderD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN15GrFmtJpegReaderD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegReader5CloseEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+2192)|0);
 __ZN14RJpegBitStream5CloseEv($3);
 var $4=$2;
 __ZN11GrFmtReader5CloseEv($4);
 return;
}
function __ZN15GrFmtJpegReaderC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtReaderC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((18896)|0);
   var $9=(($5+1088)|0);
   var $10=(($5+2192)|0);
   (function() { try { __THREW__ = 0; return __ZN14RJpegBitStreamC2Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $12=(($5+1056)|0);
   HEAP32[(($12)>>2)]=-1;
   var $13=(($5+1048)|0);
   HEAP32[(($13)>>2)]=-1;
   $i=0;
   label = 3; break;
  case 3: 
   var $15=$i;
   var $16=(($15)|(0)) < 4;
   if ($16) { label = 4; break; } else { label = 10; break; }
  case 4: 
   var $18 = (function() { try { __THREW__ = 0; return __Znaj(8192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $20=$18;
   var $21=$i;
   var $22=(($5+2152)|0);
   var $23=(($22+($21<<2))|0);
   HEAP32[(($23)>>2)]=$20;
   var $24 = (function() { try { __THREW__ = 0; return __Znaj(8192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $26=$24;
   var $27=$i;
   var $28=(($5+2172)|0);
   var $29=(($28+($27<<2))|0);
   HEAP32[(($29)>>2)]=$26;
   label = 7; break;
  case 7: 
   var $31=$i;
   var $32=((($31)+(1))|0);
   $i=$32;
   label = 3; break;
  case 8: 
   var $34$0 = ___cxa_find_matching_catch(-1, -1); $34$1 = tempRet0;
   var $35=$34$0;
   $3=$35;
   var $36=$34$1;
   $4=$36;
   label = 12; break;
  case 9: 
   var $38$0 = ___cxa_find_matching_catch(-1, -1); $38$1 = tempRet0;
   var $39=$38$0;
   $3=$39;
   var $40=$38$1;
   $4=$40;
   (function() { try { __THREW__ = 0; return __ZN14RJpegBitStreamD2Ev($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 11; break; } else { label = 15; break; }
  case 10: 
   return;
  case 11: 
   label = 12; break;
  case 12: 
   var $44=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 13; break; } else { label = 15; break; }
  case 13: 
   label = 14; break;
  case 14: 
   var $47=$3;
   var $48=$4;
   var $49$0=$47;
   var $49$1=0;
   var $50$0=$49$0;
   var $50$1=$48;
   ___resumeException($50$0)
  case 15: 
   var $52$0 = ___cxa_find_matching_catch(-1, -1,0); $52$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegReaderD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((18896)|0);
   $i=0;
   label = 2; break;
  case 2: 
   var $7=$i;
   var $8=(($7)|(0)) < 4;
   if ($8) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $10=$i;
   var $11=(($4+2152)|0);
   var $12=(($11+($10<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==0;
   if ($14) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $16=$13;
   __ZdaPv($16);
   label = 5; break;
  case 5: 
   var $18=$i;
   var $19=(($4+2152)|0);
   var $20=(($19+($18<<2))|0);
   HEAP32[(($20)>>2)]=0;
   var $21=$i;
   var $22=(($4+2172)|0);
   var $23=(($22+($21<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $27=$24;
   __ZdaPv($27);
   label = 7; break;
  case 7: 
   var $29=$i;
   var $30=(($4+2172)|0);
   var $31=(($30+($29<<2))|0);
   HEAP32[(($31)>>2)]=0;
   label = 8; break;
  case 8: 
   var $33=$i;
   var $34=((($33)+(1))|0);
   $i=$34;
   label = 2; break;
  case 9: 
   var $36=(($4+2192)|0);
   (function() { try { __THREW__ = 0; return __ZN14RJpegBitStreamD2Ev($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $38=$4;
   __ZN11GrFmtReaderD2Ev($38);
   return;
  case 11: 
   var $40$0 = ___cxa_find_matching_catch(-1, -1); $40$1 = tempRet0;
   var $41=$40$0;
   $2=$41;
   var $42=$40$1;
   $3=$42;
   var $43=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $46=$2;
   var $47=$3;
   var $48$0=$46;
   var $48$1=0;
   var $49$0=$48$0;
   var $49$1=$47;
   ___resumeException($49$0)
  case 14: 
   var $51$0 = ___cxa_find_matching_catch(-1, -1,0); $51$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegReader10ReadHeaderEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"3": function(value) { label = 61; $22 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $buffer=sp;
   var $i;
   var $result;
   var $is_sof;
   var $is_qt;
   var $is_ht;
   var $is_sos;
   var $lstrm;
   var $marker;
   var $pos;
   var $length;
   var $idx;
   var $ci;
   $2=$this;
   var $3=$2;
   $result=0;
   $is_sof=0;
   $is_qt=0;
   $is_ht=0;
   $is_sos=0;
   var $4=(($3+2192)|0);
   var $5=$3;
   var $6=(($5+20)|0);
   var $7=(($6)|0);
   var $8=__ZN14RJpegBitStream4OpenEPKc($4, $7);
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 60; break;
  case 3: 
   var $11=(($3+2148)|0);
   var $12=$11;
   HEAP8[($12)]=0; HEAP8[((($12)+(1))|0)]=0; HEAP8[((($12)+(2))|0)]=0; HEAP8[((($12)+(3))|0)]=0;
   var $13=(($3+2168)|0);
   var $14=$13;
   HEAP8[($14)]=0; HEAP8[((($14)+(1))|0)]=0; HEAP8[((($14)+(2))|0)]=0; HEAP8[((($14)+(3))|0)]=0;
   var $15=(($3+2188)|0);
   var $16=$15;
   HEAP8[($16)]=0; HEAP8[((($16)+(1))|0)]=0; HEAP8[((($16)+(2))|0)]=0; HEAP8[((($16)+(3))|0)]=0;
   var $17=(($3+1068)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=(($3+2192)|0);
   var $19=$18;
   var $20=__ZN11RBaseStream6JmpBufEv($19);
   var $21=(($20)|0);
   var $22=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($21)>>2)]=tempInt, 0);
   label = 61; break;
  case 61: 
   var $23=(($22)|(0))==0;
   if ($23) { label = 4; break; } else { label = 53; break; }
  case 4: 
   var $25=(($3+2192)|0);
   var $26=(($25+80)|0);
   $lstrm=$26;
   var $27=$lstrm;
   var $28=$27;
   __ZN11RBaseStream4SkipEi($28, 2);
   label = 5; break;
  case 5: 
   var $30=(($3+2192)|0);
   var $31=__ZN14RJpegBitStream10FindMarkerEv($30);
   var $32=$31 & 255;
   $marker=$32;
   var $33=$marker;
   var $34=(($33)|(0))!=216;
   if ($34) { label = 6; break; } else { label = 51; break; }
  case 6: 
   var $36=$marker;
   var $37=(($36)|(0))!=217;
   if ($37) { label = 7; break; } else { label = 51; break; }
  case 7: 
   var $39=$marker;
   var $40=(($39)|(0))!=1;
   if ($40) { label = 8; break; } else { label = 51; break; }
  case 8: 
   var $42=$marker;
   var $43=208 <= (($42)|(0));
   if ($43) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $45=$marker;
   var $46=(($45)|(0)) <= 215;
   if ($46) { label = 51; break; } else { label = 10; break; }
  case 10: 
   var $48=$lstrm;
   var $49=$48;
   var $50=__ZN11RBaseStream6GetPosEv($49);
   $pos=$50;
   var $51=$lstrm;
   var $52=__ZN12RMByteStream7GetWordEv($51);
   $length=$52;
   var $53=$marker;
   if ((($53)|(0))==224) {
    label = 11; break;
   }
   else if ((($53)|(0))==192) {
    label = 14; break;
   }
   else if ((($53)|(0))==219) {
    label = 42; break;
   }
   else if ((($53)|(0))==196) {
    label = 45; break;
   }
   else if ((($53)|(0))==218) {
    label = 48; break;
   }
   else if ((($53)|(0))==221) {
    label = 49; break;
   }
   else {
   label = 50; break;
   }
  case 11: 
   var $55=$lstrm;
   var $56=$55;
   var $57=(($buffer)|0);
   __ZN12RLByteStream8GetBytesEPviPi($56, $57, 5, 0);
   var $58=(($buffer)|0);
   var $59=_strcmp($58, ((11928)|0));
   var $60=(($59)|(0))==0;
   if ($60) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $62=$lstrm;
   var $63=__ZN12RMByteStream7GetWordEv($62);
   var $64=(($3+1052)|0);
   HEAP32[(($64)>>2)]=$63;
   label = 13; break;
  case 13: 
   label = 50; break;
  case 14: 
   var $67=$lstrm;
   var $68=$67;
   var $69=__ZN12RLByteStream7GetByteEv($68);
   var $70=(($3+1060)|0);
   HEAP32[(($70)>>2)]=$69;
   var $71=$lstrm;
   var $72=__ZN12RMByteStream7GetWordEv($71);
   var $73=$3;
   var $74=(($73+12)|0);
   HEAP32[(($74)>>2)]=$72;
   var $75=$lstrm;
   var $76=__ZN12RMByteStream7GetWordEv($75);
   var $77=$3;
   var $78=(($77+8)|0);
   HEAP32[(($78)>>2)]=$76;
   var $79=$lstrm;
   var $80=$79;
   var $81=__ZN12RLByteStream7GetByteEv($80);
   var $82=(($3+1056)|0);
   HEAP32[(($82)>>2)]=$81;
   var $83=$3;
   var $84=(($83+8)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))==0;
   if ($86) { label = 18; break; } else { label = 15; break; }
  case 15: 
   var $88=$3;
   var $89=(($88+12)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))==0;
   if ($91) { label = 18; break; } else { label = 16; break; }
  case 16: 
   var $93=(($3+1056)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94)|(0))!=1;
   if ($95) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $97=(($3+1056)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98)|(0))!=3;
   if ($99) { label = 18; break; } else { label = 19; break; }
  case 18: 
   label = 52; break;
  case 19: 
   var $102=(($3+1056)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0))==3;
   var $105=$3;
   var $106=(($105+4)|0);
   var $107=(($104)&(1));
   HEAP8[($106)]=$107;
   var $108=(($3+1088)|0);
   var $109=$108;
   _memset($109, -1, 36);
   $i=0;
   label = 20; break;
  case 20: 
   var $111=$i;
   var $112=(($3+1056)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($111)|(0)) < (($113)|(0));
   if ($114) { label = 21; break; } else { label = 41; break; }
  case 21: 
   var $116=$lstrm;
   var $117=$116;
   var $118=__ZN12RLByteStream7GetByteEv($117);
   $idx=$118;
   var $119=$idx;
   var $120=(($119)|(0)) < 1;
   if ($120) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $122=$idx;
   var $123=(($3+1056)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=(($122)|(0)) > (($124)|(0));
   if ($125) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $127=$i;
   var $128=((($127)+(1))|0);
   $idx=$128;
   label = 24; break;
  case 24: 
   var $130=$idx;
   var $131=((($130)-(1))|0);
   var $132=(($3+1088)|0);
   var $133=(($132+((($131)*(12))&-1))|0);
   $ci=$133;
   var $134=$ci;
   var $135=(($134+2)|0);
   var $136=HEAP8[($135)];
   var $137=(($136 << 24) >> 24);
   var $138=(($137)|(0)) > 0;
   if ($138) { label = 25; break; } else { label = 26; break; }
  case 25: 
   label = 52; break;
  case 26: 
   var $141=$lstrm;
   var $142=$141;
   var $143=__ZN12RLByteStream7GetByteEv($142);
   var $144=(($143) & 255);
   var $145=$ci;
   var $146=(($145)|0);
   HEAP8[($146)]=$144;
   var $147=$ci;
   var $148=(($147)|0);
   var $149=HEAP8[($148)];
   var $150=(($149 << 24) >> 24);
   var $151=$150 & 15;
   var $152=(($151) & 255);
   var $153=$ci;
   var $154=(($153+1)|0);
   HEAP8[($154)]=$152;
   var $155=$ci;
   var $156=(($155)|0);
   var $157=HEAP8[($156)];
   var $158=(($157 << 24) >> 24);
   var $159=$158 >> 4;
   var $160=(($159) & 255);
   HEAP8[($156)]=$160;
   var $161=$lstrm;
   var $162=$161;
   var $163=__ZN12RLByteStream7GetByteEv($162);
   var $164=(($163) & 255);
   var $165=$ci;
   var $166=(($165+2)|0);
   HEAP8[($166)]=$164;
   var $167=$ci;
   var $168=(($167)|0);
   var $169=HEAP8[($168)];
   var $170=(($169 << 24) >> 24);
   var $171=(($170)|(0))==1;
   if ($171) { label = 29; break; } else { label = 27; break; }
  case 27: 
   var $173=$ci;
   var $174=(($173)|0);
   var $175=HEAP8[($174)];
   var $176=(($175 << 24) >> 24);
   var $177=(($176)|(0))==2;
   if ($177) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $179=$ci;
   var $180=(($179)|0);
   var $181=HEAP8[($180)];
   var $182=(($181 << 24) >> 24);
   var $183=(($182)|(0))==4;
   if ($183) { label = 29; break; } else { label = 38; break; }
  case 29: 
   var $185=$ci;
   var $186=(($185+1)|0);
   var $187=HEAP8[($186)];
   var $188=(($187 << 24) >> 24);
   var $189=(($188)|(0))==1;
   if ($189) { label = 32; break; } else { label = 30; break; }
  case 30: 
   var $191=$ci;
   var $192=(($191+1)|0);
   var $193=HEAP8[($192)];
   var $194=(($193 << 24) >> 24);
   var $195=(($194)|(0))==2;
   if ($195) { label = 32; break; } else { label = 31; break; }
  case 31: 
   var $197=$ci;
   var $198=(($197+1)|0);
   var $199=HEAP8[($198)];
   var $200=(($199 << 24) >> 24);
   var $201=(($200)|(0))==4;
   if ($201) { label = 32; break; } else { label = 38; break; }
  case 32: 
   var $203=$ci;
   var $204=(($203+2)|0);
   var $205=HEAP8[($204)];
   var $206=(($205 << 24) >> 24);
   var $207=(($206)|(0)) < 3;
   if ($207) { label = 33; break; } else { label = 38; break; }
  case 33: 
   var $209=$i;
   var $210=(($209)|(0))!=2;
   if ($210) { label = 39; break; } else { label = 34; break; }
  case 34: 
   var $212=$ci;
   var $213=(($212)|0);
   var $214=HEAP8[($213)];
   var $215=(($214 << 24) >> 24);
   var $216=(($3+1088)|0);
   var $217=(($216+12)|0);
   var $218=(($217)|0);
   var $219=HEAP8[($218)];
   var $220=(($219 << 24) >> 24);
   var $221=(($215)|(0))==(($220)|(0));
   if ($221) { label = 35; break; } else { label = 38; break; }
  case 35: 
   var $223=$ci;
   var $224=(($223+1)|0);
   var $225=HEAP8[($224)];
   var $226=(($225 << 24) >> 24);
   var $227=(($3+1088)|0);
   var $228=(($227+12)|0);
   var $229=(($228+1)|0);
   var $230=HEAP8[($229)];
   var $231=(($230 << 24) >> 24);
   var $232=(($226)|(0))==(($231)|(0));
   if ($232) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $234=$ci;
   var $235=(($234)|0);
   var $236=HEAP8[($235)];
   var $237=(($236 << 24) >> 24);
   var $238=(($3+1088)|0);
   var $239=(($238)|0);
   var $240=(($239)|0);
   var $241=HEAP8[($240)];
   var $242=(($241 << 24) >> 24);
   var $243=(($237)|(0)) <= (($242)|(0));
   if ($243) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $245=$ci;
   var $246=(($245+1)|0);
   var $247=HEAP8[($246)];
   var $248=(($247 << 24) >> 24);
   var $249=(($3+1088)|0);
   var $250=(($249)|0);
   var $251=(($250+1)|0);
   var $252=HEAP8[($251)];
   var $253=(($252 << 24) >> 24);
   var $254=(($248)|(0)) <= (($253)|(0));
   if ($254) { label = 39; break; } else { label = 38; break; }
  case 38: 
   label = 52; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $258=$i;
   var $259=((($258)+(1))|0);
   $i=$259;
   label = 20; break;
  case 41: 
   $is_sof=1;
   var $261=$marker;
   var $262=((($261)-(192))|0);
   var $263=(($3+1064)|0);
   HEAP32[(($263)>>2)]=$262;
   label = 50; break;
  case 42: 
   var $265=$length;
   var $266=__ZN15GrFmtJpegReader15LoadQuantTablesEi($3, $265);
   if ($266) { label = 44; break; } else { label = 43; break; }
  case 43: 
   label = 52; break;
  case 44: 
   $is_qt=1;
   label = 50; break;
  case 45: 
   var $270=$length;
   var $271=__ZN15GrFmtJpegReader17LoadHuffmanTablesEi($3, $270);
   if ($271) { label = 47; break; } else { label = 46; break; }
  case 46: 
   label = 52; break;
  case 47: 
   $is_ht=1;
   label = 50; break;
  case 48: 
   $is_sos=1;
   var $275=$pos;
   var $276=((($275)-(2))|0);
   var $277=(($3+1048)|0);
   HEAP32[(($277)>>2)]=$276;
   label = 52; break;
  case 49: 
   var $279=$lstrm;
   var $280=__ZN12RMByteStream7GetWordEv($279);
   var $281=(($3+1068)|0);
   HEAP32[(($281)>>2)]=$280;
   label = 50; break;
  case 50: 
   var $283=$lstrm;
   var $284=$283;
   var $285=$pos;
   var $286=$length;
   var $287=((($285)+($286))|0);
   __ZN11RBaseStream6SetPosEi($284, $287);
   label = 51; break;
  case 51: 
   label = 5; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $291=$is_sof;
   var $292=(($291) & 1);
   if ($292) { label = 54; break; } else { var $303 = 0;label = 57; break; }
  case 54: 
   var $294=$is_qt;
   var $295=(($294) & 1);
   if ($295) { label = 55; break; } else { var $303 = 0;label = 57; break; }
  case 55: 
   var $297=$is_ht;
   var $298=(($297) & 1);
   if ($298) { label = 56; break; } else { var $303 = 0;label = 57; break; }
  case 56: 
   var $300=$is_sos;
   var $301=(($300) & 1);
   var $303 = $301;label = 57; break;
  case 57: 
   var $303;
   var $304=(($303)&(1));
   $result=$304;
   var $305=$result;
   var $306=(($305) & 1);
   if ($306) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $308=$3;
   var $309=(($308+12)|0);
   HEAP32[(($309)>>2)]=-1;
   var $310=$3;
   var $311=(($310+8)|0);
   HEAP32[(($311)>>2)]=-1;
   var $312=(($3+1048)|0);
   HEAP32[(($312)>>2)]=-1;
   var $313=(($3+2192)|0);
   __ZN14RJpegBitStream5CloseEv($313);
   label = 59; break;
  case 59: 
   var $315=$result;
   var $316=(($315) & 1);
   $1=$316;
   label = 60; break;
  case 60: 
   var $318=$1;
   STACKTOP = sp;
   return $318;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN15GrFmtJpegReader15LoadQuantTablesEi($this, $length) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $buffer=sp;
   var $i;
   var $tq_size;
   var $lstrm;
   var $tq;
   var $size;
   var $idx;
   var $idx1;
   $2=$this;
   $3=$length;
   var $4=$2;
   var $5=(($4+2192)|0);
   var $6=(($5+80)|0);
   $lstrm=$6;
   var $7=$3;
   var $8=((($7)-(2))|0);
   $3=$8;
   label = 2; break;
  case 2: 
   var $10=$3;
   var $11=(($10)|(0)) > 0;
   if ($11) { label = 3; break; } else { label = 19; break; }
  case 3: 
   var $13=$lstrm;
   var $14=$13;
   var $15=__ZN12RLByteStream7GetByteEv($14);
   $tq=$15;
   var $16=$tq;
   var $17=$16 >> 4;
   $size=$17;
   var $18=$tq;
   var $19=$18 & 15;
   $tq=$19;
   var $20=$size;
   var $21=64 << $20;
   var $22=((($21)+(1))|0);
   $tq_size=$22;
   var $23=$tq;
   var $24=(($23)|(0)) > 3;
   if ($24) { label = 6; break; } else { label = 4; break; }
  case 4: 
   var $26=$size;
   var $27=(($26)|(0)) > 1;
   if ($27) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $29=$3;
   var $30=$tq_size;
   var $31=(($29)|(0)) < (($30)|(0));
   if ($31) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=0;
   label = 20; break;
  case 7: 
   var $34=$tq_size;
   var $35=$3;
   var $36=((($35)-($34))|0);
   $3=$36;
   var $37=$lstrm;
   var $38=$37;
   var $39=(($buffer)|0);
   var $40=$tq_size;
   var $41=((($40)-(1))|0);
   __ZN12RLByteStream8GetBytesEPviPi($38, $39, $41, 0);
   var $42=$size;
   var $43=(($42)|(0))==0;
   if ($43) { label = 8; break; } else { label = 13; break; }
  case 8: 
   $i=0;
   label = 9; break;
  case 9: 
   var $46=$i;
   var $47=(($46)|(0)) < 64;
   if ($47) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $49=$i;
   var $50=((21032+$49)|0);
   var $51=HEAP8[($50)];
   var $52=(($51)&(255));
   $idx=$52;
   var $53=$i;
   var $54=(($buffer+$53)|0);
   var $55=HEAP8[($54)];
   var $56=(($55)&(255));
   var $57=($56<<4);
   var $58=$idx;
   var $59=((22808+($58<<2))|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(Math.imul($57,$60)|0);
   var $62=$idx;
   var $63=$tq;
   var $64=(($4+1124)|0);
   var $65=(($64+($63<<8))|0);
   var $66=(($65+($62<<2))|0);
   HEAP32[(($66)>>2)]=$61;
   label = 11; break;
  case 11: 
   var $68=$i;
   var $69=((($68)+(1))|0);
   $i=$69;
   label = 9; break;
  case 12: 
   label = 18; break;
  case 13: 
   $i=0;
   label = 14; break;
  case 14: 
   var $73=$i;
   var $74=(($73)|(0)) < 64;
   if ($74) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $76=$i;
   var $77=((21032+$76)|0);
   var $78=HEAP8[($77)];
   var $79=(($78)&(255));
   $idx1=$79;
   var $80=$i;
   var $81=(($buffer)|0);
   var $82=$81;
   var $83=(($82+($80<<1))|0);
   var $84=HEAP16[(($83)>>1)];
   var $85=(($84)&(65535));
   var $86=$idx1;
   var $87=((22808+($86<<2))|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(Math.imul($85,$88)|0);
   var $90=$idx1;
   var $91=$tq;
   var $92=(($4+1124)|0);
   var $93=(($92+($91<<8))|0);
   var $94=(($93+($90<<2))|0);
   HEAP32[(($94)>>2)]=$89;
   label = 16; break;
  case 16: 
   var $96=$i;
   var $97=((($96)+(1))|0);
   $i=$97;
   label = 14; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $100=$tq;
   var $101=(($4+2148)|0);
   var $102=(($101+$100)|0);
   HEAP8[($102)]=1;
   label = 2; break;
  case 19: 
   $1=1;
   label = 20; break;
  case 20: 
   var $105=$1;
   STACKTOP = sp;
   return $105;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegReader17LoadHuffmanTablesEi($this, $length) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 5120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $max_bits;
   var $buffer=sp;
   var $buffer2=(sp)+(1024);
   var $i;
   var $ht_size;
   var $lstrm;
   var $t;
   var $hclass;
   $2=$this;
   $3=$length;
   var $4=$2;
   $max_bits=16;
   var $5=(($4+2192)|0);
   var $6=(($5+80)|0);
   $lstrm=$6;
   var $7=$3;
   var $8=((($7)-(2))|0);
   $3=$8;
   label = 2; break;
  case 2: 
   var $10=$3;
   var $11=(($10)|(0)) > 0;
   if ($11) { label = 3; break; } else { label = 22; break; }
  case 3: 
   var $13=$lstrm;
   var $14=$13;
   var $15=__ZN12RLByteStream7GetByteEv($14);
   $t=$15;
   var $16=$t;
   var $17=$16 >> 4;
   $hclass=$17;
   var $18=$t;
   var $19=$18 & 15;
   $t=$19;
   var $20=$t;
   var $21=(($20)|(0)) > 3;
   if ($21) { label = 6; break; } else { label = 4; break; }
  case 4: 
   var $23=$hclass;
   var $24=(($23)|(0)) > 1;
   if ($24) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $26=$3;
   var $27=(($26)|(0)) < 17;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=0;
   label = 23; break;
  case 7: 
   var $30=$3;
   var $31=((($30)-(17))|0);
   $3=$31;
   var $32=$lstrm;
   var $33=$32;
   var $34=(($buffer)|0);
   __ZN12RLByteStream8GetBytesEPviPi($33, $34, 16, 0);
   $i=0;
   $ht_size=0;
   label = 8; break;
  case 8: 
   var $36=$i;
   var $37=(($36)|(0)) < 16;
   if ($37) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $39=$i;
   var $40=(($buffer+$39)|0);
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   var $43=$ht_size;
   var $44=((($43)+($42))|0);
   $ht_size=$44;
   label = 10; break;
  case 10: 
   var $46=$i;
   var $47=((($46)+(1))|0);
   $i=$47;
   label = 8; break;
  case 11: 
   var $49=$3;
   var $50=$ht_size;
   var $51=(($49)|(0)) < (($50)|(0));
   if ($51) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $1=0;
   label = 23; break;
  case 13: 
   var $54=$ht_size;
   var $55=$3;
   var $56=((($55)-($54))|0);
   $3=$56;
   var $57=$lstrm;
   var $58=$57;
   var $59=(($buffer)|0);
   var $60=(($59+16)|0);
   var $61=$ht_size;
   __ZN12RLByteStream8GetBytesEPviPi($58, $60, $61, 0);
   var $62=(($buffer)|0);
   var $63=(($buffer2)|0);
   var $64=__Z26bsCreateSourceHuffmanTablePKhPiii($62, $63, 16, 9);
   var $65=$hclass;
   var $66=(($65)|(0))==0;
   if ($66) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $68=$t;
   var $69=(($4+2152)|0);
   var $70=(($69+($68<<2))|0);
   var $71=HEAP32[(($70)>>2)];
   var $78 = $71;label = 16; break;
  case 15: 
   var $73=$t;
   var $74=(($4+2172)|0);
   var $75=(($74+($73<<2))|0);
   var $76=HEAP32[(($75)>>2)];
   var $78 = $76;label = 16; break;
  case 16: 
   var $78;
   var $79=__Z26bsCreateDecodeHuffmanTablePKiPsi($64, $78, 4096);
   if ($79) { label = 18; break; } else { label = 17; break; }
  case 17: 
   $1=0;
   label = 23; break;
  case 18: 
   var $82=$hclass;
   var $83=(($82)|(0))==0;
   if ($83) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $85=$t;
   var $86=(($4+2168)|0);
   var $87=(($86+$85)|0);
   HEAP8[($87)]=1;
   label = 21; break;
  case 20: 
   var $89=$t;
   var $90=(($4+2188)|0);
   var $91=(($90+$89)|0);
   HEAP8[($91)]=1;
   label = 21; break;
  case 21: 
   label = 2; break;
  case 22: 
   $1=1;
   label = 23; break;
  case 23: 
   var $95=$1;
   STACKTOP = sp;
   return $95;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegReader8ReadDataEPhii($this, $data, $step, $color) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"4": function(value) { label = 44; $20 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $lstrm;
   var $marker;
   var $pos;
   var $length;
   var $idx=sp;
   var $i;
   var $ns;
   var $sum;
   var $a;
   var $td;
   var $ta;
   var $c;
   $2=$this;
   $3=$data;
   $4=$step;
   $5=$color;
   var $6=$2;
   var $7=(($6+1048)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0)) < 0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=(($6+2192)|0);
   var $12=$11;
   var $13=__ZN11RBaseStream8IsOpenedEv($12);
   if ($13) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 43; break;
  case 4: 
   var $16=(($6+2192)|0);
   var $17=$16;
   var $18=__ZN11RBaseStream6JmpBufEv($17);
   var $19=(($18)|0);
   var $20=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($19)>>2)]=tempInt, 0);
   label = 44; break;
  case 44: 
   var $21=(($20)|(0))==0;
   if ($21) { label = 5; break; } else { label = 42; break; }
  case 5: 
   var $23=(($6+2192)|0);
   var $24=(($23+80)|0);
   $lstrm=$24;
   var $25=$lstrm;
   var $26=$25;
   var $27=(($6+1048)|0);
   var $28=HEAP32[(($27)>>2)];
   __ZN11RBaseStream6SetPosEi($26, $28);
   label = 6; break;
  case 6: 
   var $30=(($6+2192)|0);
   var $31=__ZN14RJpegBitStream10FindMarkerEv($30);
   var $32=$31 & 255;
   $marker=$32;
   var $33=$marker;
   var $34=(($33)|(0))==216;
   if ($34) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $36=$marker;
   var $37=(($36)|(0))==217;
   if ($37) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 41; break;
  case 9: 
   var $40=$marker;
   var $41=(($40)|(0))!=1;
   if ($41) { label = 10; break; } else { label = 40; break; }
  case 10: 
   var $43=$marker;
   var $44=208 <= (($43)|(0));
   if ($44) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $46=$marker;
   var $47=(($46)|(0)) <= 215;
   if ($47) { label = 40; break; } else { label = 12; break; }
  case 12: 
   var $49=$lstrm;
   var $50=$49;
   var $51=__ZN11RBaseStream6GetPosEv($50);
   $pos=$51;
   var $52=$lstrm;
   var $53=__ZN12RMByteStream7GetWordEv($52);
   $length=$53;
   var $54=$marker;
   if ((($54)|(0))==196) {
    label = 13; break;
   }
   else if ((($54)|(0))==218) {
    label = 16; break;
   }
   else if ((($54)|(0))==221) {
    label = 36; break;
   }
   else {
   label = 37; break;
   }
  case 13: 
   var $56=$length;
   var $57=__ZN15GrFmtJpegReader17LoadHuffmanTablesEi($6, $56);
   if ($57) { label = 15; break; } else { label = 14; break; }
  case 14: 
   label = 41; break;
  case 15: 
   label = 37; break;
  case 16: 
   var $61=$idx;
   assert(12 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[((16232)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((16236)>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((16240)>>2)];
   var $62=$lstrm;
   var $63=$62;
   var $64=__ZN12RLByteStream7GetByteEv($63);
   $ns=$64;
   $sum=0;
   var $65=$ns;
   var $66=(($6+1056)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($65)|(0))!=(($67)|(0));
   if ($68) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 41; break;
  case 18: 
   $i=0;
   label = 19; break;
  case 19: 
   var $72=$i;
   var $73=$ns;
   var $74=(($72)|(0)) < (($73)|(0));
   if ($74) { label = 20; break; } else { label = 33; break; }
  case 20: 
   var $76=$lstrm;
   var $77=$76;
   var $78=__ZN12RLByteStream7GetByteEv($77);
   var $79=((($78)-(1))|0);
   $c=$79;
   var $80=$c;
   var $81=(($80)|(0)) < 0;
   if ($81) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $83=(($6+1056)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$c;
   var $86=(($84)|(0)) <= (($85)|(0));
   if ($86) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $88=$i;
   $c=$88;
   label = 23; break;
  case 23: 
   var $90=$c;
   var $91=(($idx+($90<<2))|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0))!=-1;
   if ($93) { label = 24; break; } else { label = 25; break; }
  case 24: 
   label = 41; break;
  case 25: 
   var $96=$c;
   var $97=$i;
   var $98=(($idx+($97<<2))|0);
   HEAP32[(($98)>>2)]=$96;
   var $99=$lstrm;
   var $100=$99;
   var $101=__ZN12RLByteStream7GetByteEv($100);
   $td=$101;
   var $102=$td;
   var $103=$102 & 15;
   $ta=$103;
   var $104=$td;
   var $105=$104 >> 4;
   $td=$105;
   var $106=$ta;
   var $107=(($106)|(0)) <= 3;
   if ($107) { label = 26; break; } else { label = 30; break; }
  case 26: 
   var $109=$ta;
   var $110=(($6+2188)|0);
   var $111=(($110+$109)|0);
   var $112=HEAP8[($111)];
   var $113=(($112) & 1);
   if ($113) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $115=$td;
   var $116=(($115)|(0)) <= 3;
   if ($116) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $118=$td;
   var $119=(($6+2168)|0);
   var $120=(($119+$118)|0);
   var $121=HEAP8[($120)];
   var $122=(($121) & 1);
   if ($122) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $124=$c;
   var $125=(($6+1088)|0);
   var $126=(($125+((($124)*(12))&-1))|0);
   var $127=(($126+2)|0);
   var $128=HEAP8[($127)];
   var $129=(($128 << 24) >> 24);
   var $130=(($6+2148)|0);
   var $131=(($130+$129)|0);
   var $132=HEAP8[($131)];
   var $133=(($132) & 1);
   if ($133) { label = 31; break; } else { label = 30; break; }
  case 30: 
   label = 41; break;
  case 31: 
   var $136=$td;
   var $137=(($136) & 255);
   var $138=$c;
   var $139=(($6+1088)|0);
   var $140=(($139+((($138)*(12))&-1))|0);
   var $141=(($140+3)|0);
   HEAP8[($141)]=$137;
   var $142=$ta;
   var $143=(($142) & 255);
   var $144=$c;
   var $145=(($6+1088)|0);
   var $146=(($145+((($144)*(12))&-1))|0);
   var $147=(($146+4)|0);
   HEAP8[($147)]=$143;
   var $148=$c;
   var $149=(($6+1088)|0);
   var $150=(($149+((($148)*(12))&-1))|0);
   var $151=(($150)|0);
   var $152=HEAP8[($151)];
   var $153=(($152 << 24) >> 24);
   var $154=$c;
   var $155=(($6+1088)|0);
   var $156=(($155+((($154)*(12))&-1))|0);
   var $157=(($156+1)|0);
   var $158=HEAP8[($157)];
   var $159=(($158 << 24) >> 24);
   var $160=(Math.imul($153,$159)|0);
   var $161=$sum;
   var $162=((($161)+($160))|0);
   $sum=$162;
   label = 32; break;
  case 32: 
   var $164=$i;
   var $165=((($164)+(1))|0);
   $i=$165;
   label = 19; break;
  case 33: 
   var $167=$sum;
   var $168=(($167)|(0)) > 10;
   if ($168) { label = 34; break; } else { label = 35; break; }
  case 34: 
   label = 41; break;
  case 35: 
   var $171=$lstrm;
   var $172=$171;
   var $173=__ZN12RLByteStream7GetByteEv($172);
   var $174=(($6+1072)|0);
   HEAP32[(($174)>>2)]=$173;
   var $175=$lstrm;
   var $176=$175;
   var $177=__ZN12RLByteStream7GetByteEv($176);
   var $178=(($6+1076)|0);
   HEAP32[(($178)>>2)]=$177;
   var $179=$lstrm;
   var $180=$179;
   var $181=__ZN12RLByteStream7GetByteEv($180);
   $a=$181;
   var $182=$a;
   var $183=$182 & 15;
   var $184=(($6+1084)|0);
   HEAP32[(($184)>>2)]=$183;
   var $185=$a;
   var $186=$185 >> 4;
   var $187=(($6+1080)|0);
   HEAP32[(($187)>>2)]=$186;
   var $188=(($idx)|0);
   var $189=$ns;
   var $190=$3;
   var $191=$4;
   var $192=$5;
   __ZN15GrFmtJpegReader11ProcessScanEPiiPhii($6, $188, $189, $190, $191, $192);
   label = 41; break;
  case 36: 
   var $194=$lstrm;
   var $195=__ZN12RMByteStream7GetWordEv($194);
   var $196=(($6+1068)|0);
   HEAP32[(($196)>>2)]=$195;
   label = 37; break;
  case 37: 
   var $198=$marker;
   var $199=(($198)|(0))!=218;
   if ($199) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $201=$lstrm;
   var $202=$201;
   var $203=$pos;
   var $204=$length;
   var $205=((($203)+($204))|0);
   __ZN11RBaseStream6SetPosEi($202, $205);
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   label = 6; break;
  case 41: 
   label = 42; break;
  case 42: 
   $1=1;
   label = 43; break;
  case 43: 
   var $211=$1;
   STACKTOP = sp;
   return $211;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN15GrFmtJpegReader11ProcessScanEPiiPhii($this, $idx, $ns, $data, $step, $color) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 2864)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $s;
   var $mcu;
   var $x1;
   var $y1;
   var $temp=sp;
   var $blocks=(sp)+(256);
   var $pos=(sp)+(2816);
   var $h=(sp)+(2832);
   var $v=(sp)+(2848);
   var $x_shift;
   var $y_shift;
   var $nch;
   var $c;
   var $x2;
   var $y2;
   var $x;
   var $y;
   var $xc;
   var $cmp;
   var $data1;
   var $c1;
   var $val;
   var $val2;
   var $shift;
   var $cmpCb;
   var $cmpCr;
   var $Y;
   var $Cb;
   var $Cr;
   var $t;
   var $Y3;
   var $Cb4;
   var $Cr5;
   var $t6;
   var $Y7;
   var $Cb8;
   var $Cr9;
   var $t10;
   var $val11;
   $1=$this;
   $2=$idx;
   $3=$ns;
   $4=$data;
   $5=$step;
   $6=$color;
   var $7=$1;
   $s=0;
   $x1=0;
   $y1=0;
   $x_shift=0;
   $y_shift=0;
   var $8=$6;
   var $9=(($8)|(0))!=0;
   var $10=$9 ? 3 : 1;
   $nch=$10;
   $i=0;
   label = 2; break;
  case 2: 
   var $12=$i;
   var $13=$3;
   var $14=(($12)|(0)) < (($13)|(0));
   if ($14) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $16=$i;
   var $17=$2;
   var $18=(($17+($16<<2))|0);
   var $19=HEAP32[(($18)>>2)];
   $c=$19;
   var $20=$c;
   var $21=(($7+1088)|0);
   var $22=(($21+((($20)*(12))&-1))|0);
   var $23=(($22)|0);
   var $24=HEAP8[($23)];
   var $25=(($24 << 24) >> 24);
   var $26=($25<<3);
   var $27=$c;
   var $28=(($h+($27<<2))|0);
   HEAP32[(($28)>>2)]=$26;
   var $29=$c;
   var $30=(($7+1088)|0);
   var $31=(($30+((($29)*(12))&-1))|0);
   var $32=(($31+1)|0);
   var $33=HEAP8[($32)];
   var $34=(($33 << 24) >> 24);
   var $35=($34<<3);
   var $36=$c;
   var $37=(($v+($36<<2))|0);
   HEAP32[(($37)>>2)]=$35;
   var $38=$s;
   var $39=$38 >> 6;
   var $40=$c;
   var $41=(($pos+($40<<2))|0);
   HEAP32[(($41)>>2)]=$39;
   var $42=$c;
   var $43=(($h+($42<<2))|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$c;
   var $46=(($v+($45<<2))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(Math.imul($44,$47)|0);
   var $49=$s;
   var $50=((($49)+($48))|0);
   $s=$50;
   label = 4; break;
  case 4: 
   var $52=$i;
   var $53=((($52)+(1))|0);
   $i=$53;
   label = 2; break;
  case 5: 
   var $55=$3;
   var $56=(($55)|(0))==3;
   if ($56) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $58=(($h)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($h+4)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=($61<<1);
   var $63=((((($59)|(0)))/((($62)|(0))))&-1);
   $x_shift=$63;
   var $64=(($v)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($v+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=($67<<1);
   var $69=((((($65)|(0)))/((($68)|(0))))&-1);
   $y_shift=$69;
   label = 7; break;
  case 7: 
   var $71=(($7+2192)|0);
   __ZN14RJpegBitStream5FlushEv($71);
   __ZN15GrFmtJpegReader12ResetDecoderEv($7);
   $mcu=0;
   label = 8; break;
  case 8: 
   var $73=$mcu;
   var $74=(($7+1068)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0))==(($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=(($7+1068)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))!=0;
   if ($80) { label = 10; break; } else { label = 11; break; }
  case 10: 
   __ZN15GrFmtJpegReader12ResetDecoderEv($7);
   var $82=(($7+2192)|0);
   __ZN14RJpegBitStream11AlignOnByteEv($82);
   $mcu=0;
   label = 11; break;
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $85=$i;
   var $86=$3;
   var $87=(($85)|(0)) < (($86)|(0));
   if ($87) { label = 13; break; } else { label = 25; break; }
  case 13: 
   var $89=$i;
   var $90=$2;
   var $91=(($90+($89<<2))|0);
   var $92=HEAP32[(($91)>>2)];
   $c1=$92;
   var $93=$c1;
   var $94=(($pos+($93<<2))|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($blocks+($95<<8))|0);
   var $97=(($96)|0);
   $cmp=$97;
   $y=0;
   label = 14; break;
  case 14: 
   var $99=$y;
   var $100=$c1;
   var $101=(($v+($100<<2))|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($99)|(0)) < (($102)|(0));
   if ($103) { label = 15; break; } else { label = 23; break; }
  case 15: 
   $x=0;
   label = 16; break;
  case 16: 
   var $106=$x;
   var $107=$c1;
   var $108=(($h+($107<<2))|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($106)|(0)) < (($109)|(0));
   if ($110) { label = 17; break; } else { label = 21; break; }
  case 17: 
   var $112=(($temp)|0);
   var $113=$c1;
   __ZN15GrFmtJpegReader8GetBlockEPii($7, $112, $113);
   var $114=$i;
   var $115=$6;
   var $116=(($115)|(0))!=0;
   var $117=$116 ? 3 : 1;
   var $118=(($114)|(0)) < (($117)|(0));
   if ($118) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $120=(($temp)|0);
   var $121=$cmp;
   var $122=$x;
   var $123=(($121+($122<<2))|0);
   var $124=$c1;
   var $125=(($h+($124<<2))|0);
   var $126=HEAP32[(($125)>>2)];
   __ZL11aan_idct8x8PiS_i($120, $123, $126);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $129=$x;
   var $130=((($129)+(8))|0);
   $x=$130;
   label = 16; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $133=$y;
   var $134=((($133)+(8))|0);
   $y=$134;
   var $135=$c1;
   var $136=(($h+($135<<2))|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=($137<<3);
   var $139=$cmp;
   var $140=(($139+($138<<2))|0);
   $cmp=$140;
   label = 14; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $143=$i;
   var $144=((($143)+(1))|0);
   $i=$144;
   label = 12; break;
  case 25: 
   var $146=(($v)|0);
   var $147=HEAP32[(($146)>>2)];
   $y2=$147;
   var $148=(($h)|0);
   var $149=HEAP32[(($148)>>2)];
   $x2=$149;
   var $150=$y1;
   var $151=$y2;
   var $152=((($150)+($151))|0);
   var $153=$7;
   var $154=(($153+12)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($152)|(0)) > (($155)|(0));
   if ($156) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $158=$7;
   var $159=(($158+12)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=$y1;
   var $162=((($160)-($161))|0);
   $y2=$162;
   label = 27; break;
  case 27: 
   var $164=$x1;
   var $165=$x2;
   var $166=((($164)+($165))|0);
   var $167=$7;
   var $168=(($167+8)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=(($166)|(0)) > (($169)|(0));
   if ($170) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $172=$7;
   var $173=(($172+8)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=$x1;
   var $176=((($174)-($175))|0);
   $x2=$176;
   label = 29; break;
  case 29: 
   var $178=(($blocks)|0);
   var $179=(($178)|0);
   $cmp=$179;
   var $180=$4;
   var $181=$x1;
   var $182=$nch;
   var $183=(Math.imul($181,$182)|0);
   var $184=(($180+$183)|0);
   $data1=$184;
   var $185=$3;
   var $186=(($185)|(0))==1;
   if ($186) { label = 30; break; } else { label = 52; break; }
  case 30: 
   $y=0;
   label = 31; break;
  case 31: 
   var $189=$y;
   var $190=$y2;
   var $191=(($189)|(0)) < (($190)|(0));
   if ($191) { label = 32; break; } else { label = 51; break; }
  case 32: 
   var $193=$6;
   var $194=(($193)|(0))!=0;
   if ($194) { label = 33; break; } else { label = 41; break; }
  case 33: 
   $x=0;
   label = 34; break;
  case 34: 
   var $197=$x;
   var $198=$x2;
   var $199=(($197)|(0)) < (($198)|(0));
   if ($199) { label = 35; break; } else { label = 40; break; }
  case 35: 
   var $201=$x;
   var $202=$cmp;
   var $203=(($202+($201<<2))|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=((($204)+(512))|0);
   var $206=((($205)+(2))|0);
   var $207=$206 >> 2;
   $val=$207;
   var $208=$val;
   var $209=$208 & -256;
   var $210=(($209)|(0))==0;
   if ($210) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $212=$val;
   var $218 = $212;label = 38; break;
  case 37: 
   var $214=$val;
   var $215=$214 >> 31;
   var $216=$215 ^ -1;
   var $218 = $216;label = 38; break;
  case 38: 
   var $218;
   var $219=(($218) & 255);
   var $220=$x;
   var $221=((($220)*(3))&-1);
   var $222=((($221)+(2))|0);
   var $223=$data1;
   var $224=(($223+$222)|0);
   HEAP8[($224)]=$219;
   var $225=$x;
   var $226=((($225)*(3))&-1);
   var $227=((($226)+(1))|0);
   var $228=$data1;
   var $229=(($228+$227)|0);
   HEAP8[($229)]=$219;
   var $230=$x;
   var $231=((($230)*(3))&-1);
   var $232=$data1;
   var $233=(($232+$231)|0);
   HEAP8[($233)]=$219;
   label = 39; break;
  case 39: 
   var $235=$x;
   var $236=((($235)+(1))|0);
   $x=$236;
   label = 34; break;
  case 40: 
   label = 49; break;
  case 41: 
   $x=0;
   label = 42; break;
  case 42: 
   var $240=$x;
   var $241=$x2;
   var $242=(($240)|(0)) < (($241)|(0));
   if ($242) { label = 43; break; } else { label = 48; break; }
  case 43: 
   var $244=$x;
   var $245=$cmp;
   var $246=(($245+($244<<2))|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=((($247)+(512))|0);
   var $249=((($248)+(2))|0);
   var $250=$249 >> 2;
   $val2=$250;
   var $251=$val2;
   var $252=$251 & -256;
   var $253=(($252)|(0))==0;
   if ($253) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $255=$val2;
   var $261 = $255;label = 46; break;
  case 45: 
   var $257=$val2;
   var $258=$257 >> 31;
   var $259=$258 ^ -1;
   var $261 = $259;label = 46; break;
  case 46: 
   var $261;
   var $262=(($261) & 255);
   var $263=$x;
   var $264=$data1;
   var $265=(($264+$263)|0);
   HEAP8[($265)]=$262;
   label = 47; break;
  case 47: 
   var $267=$x;
   var $268=((($267)+(1))|0);
   $x=$268;
   label = 42; break;
  case 48: 
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   var $272=$y;
   var $273=((($272)+(1))|0);
   $y=$273;
   var $274=$5;
   var $275=$data1;
   var $276=(($275+$274)|0);
   $data1=$276;
   var $277=(($h)|0);
   var $278=HEAP32[(($277)>>2)];
   var $279=$cmp;
   var $280=(($279+($278<<2))|0);
   $cmp=$280;
   label = 31; break;
  case 51: 
   label = 120; break;
  case 52: 
   $y=0;
   label = 53; break;
  case 53: 
   var $284=$y;
   var $285=$y2;
   var $286=(($284)|(0)) < (($285)|(0));
   if ($286) { label = 54; break; } else { label = 119; break; }
  case 54: 
   var $288=$6;
   var $289=(($288)|(0))!=0;
   if ($289) { label = 55; break; } else { label = 109; break; }
  case 55: 
   var $291=(($h+4)|0);
   var $292=HEAP32[(($291)>>2)];
   var $293=$y;
   var $294=$y_shift;
   var $295=$293 >> (($294)|(0));
   var $296=(Math.imul($292,$295)|0);
   $shift=$296;
   var $297=(($pos+4)|0);
   var $298=HEAP32[(($297)>>2)];
   var $299=(($blocks+($298<<8))|0);
   var $300=(($299)|0);
   var $301=$shift;
   var $302=(($300+($301<<2))|0);
   $cmpCb=$302;
   var $303=(($pos+8)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($blocks+($304<<8))|0);
   var $306=(($305)|0);
   var $307=$shift;
   var $308=(($306+($307<<2))|0);
   $cmpCr=$308;
   $x=0;
   var $309=$x_shift;
   var $310=(($309)|(0))==0;
   if ($310) { label = 56; break; } else { label = 70; break; }
  case 56: 
   label = 57; break;
  case 57: 
   var $313=$x;
   var $314=$x2;
   var $315=(($313)|(0)) < (($314)|(0));
   if ($315) { label = 58; break; } else { label = 69; break; }
  case 58: 
   var $317=$x;
   var $318=$cmp;
   var $319=(($318+($317<<2))|0);
   var $320=HEAP32[(($319)>>2)];
   var $321=((($320)+(512))|0);
   var $322=$321 << 12;
   $Y=$322;
   var $323=$x;
   var $324=$cmpCb;
   var $325=(($324+($323<<2))|0);
   var $326=HEAP32[(($325)>>2)];
   $Cb=$326;
   var $327=$x;
   var $328=$cmpCr;
   var $329=(($328+($327<<2))|0);
   var $330=HEAP32[(($329)>>2)];
   $Cr=$330;
   var $331=$Y;
   var $332=$Cb;
   var $333=((($332)*(7258))&-1);
   var $334=((($331)+($333))|0);
   var $335=$334 >> 14;
   $t=$335;
   var $336=$t;
   var $337=$336 & -256;
   var $338=(($337)|(0))==0;
   if ($338) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $340=$t;
   var $346 = $340;label = 61; break;
  case 60: 
   var $342=$t;
   var $343=$342 >> 31;
   var $344=$343 ^ -1;
   var $346 = $344;label = 61; break;
  case 61: 
   var $346;
   var $347=(($346) & 255);
   var $348=$x;
   var $349=((($348)*(3))&-1);
   var $350=$data1;
   var $351=(($350+$349)|0);
   HEAP8[($351)]=$347;
   var $352=$Y;
   var $353=$Cb;
   var $354=((($353)*(-1410))&-1);
   var $355=((($352)+($354))|0);
   var $356=$Cr;
   var $357=((($356)*(-2925))&-1);
   var $358=((($355)+($357))|0);
   var $359=$358 >> 14;
   $t=$359;
   var $360=$t;
   var $361=$360 & -256;
   var $362=(($361)|(0))==0;
   if ($362) { label = 62; break; } else { label = 63; break; }
  case 62: 
   var $364=$t;
   var $370 = $364;label = 64; break;
  case 63: 
   var $366=$t;
   var $367=$366 >> 31;
   var $368=$367 ^ -1;
   var $370 = $368;label = 64; break;
  case 64: 
   var $370;
   var $371=(($370) & 255);
   var $372=$x;
   var $373=((($372)*(3))&-1);
   var $374=((($373)+(1))|0);
   var $375=$data1;
   var $376=(($375+$374)|0);
   HEAP8[($376)]=$371;
   var $377=$Y;
   var $378=$Cr;
   var $379=((($378)*(5743))&-1);
   var $380=((($377)+($379))|0);
   var $381=$380 >> 14;
   $t=$381;
   var $382=$t;
   var $383=$382 & -256;
   var $384=(($383)|(0))==0;
   if ($384) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $386=$t;
   var $392 = $386;label = 67; break;
  case 66: 
   var $388=$t;
   var $389=$388 >> 31;
   var $390=$389 ^ -1;
   var $392 = $390;label = 67; break;
  case 67: 
   var $392;
   var $393=(($392) & 255);
   var $394=$x;
   var $395=((($394)*(3))&-1);
   var $396=((($395)+(2))|0);
   var $397=$data1;
   var $398=(($397+$396)|0);
   HEAP8[($398)]=$393;
   label = 68; break;
  case 68: 
   var $400=$x;
   var $401=((($400)+(1))|0);
   $x=$401;
   label = 57; break;
  case 69: 
   label = 95; break;
  case 70: 
   var $404=$x_shift;
   var $405=(($404)|(0))==1;
   if ($405) { label = 71; break; } else { label = 94; break; }
  case 71: 
   $xc=0;
   label = 72; break;
  case 72: 
   var $408=$x;
   var $409=$x2;
   var $410=((($409)-(2))|0);
   var $411=(($408)|(0)) <= (($410)|(0));
   if ($411) { label = 73; break; } else { label = 93; break; }
  case 73: 
   var $413=$x;
   var $414=$cmp;
   var $415=(($414+($413<<2))|0);
   var $416=HEAP32[(($415)>>2)];
   var $417=((($416)+(512))|0);
   var $418=$417 << 12;
   $Y3=$418;
   var $419=$xc;
   var $420=$cmpCb;
   var $421=(($420+($419<<2))|0);
   var $422=HEAP32[(($421)>>2)];
   $Cb4=$422;
   var $423=$xc;
   var $424=$cmpCr;
   var $425=(($424+($423<<2))|0);
   var $426=HEAP32[(($425)>>2)];
   $Cr5=$426;
   var $427=$Y3;
   var $428=$Cb4;
   var $429=((($428)*(7258))&-1);
   var $430=((($427)+($429))|0);
   var $431=$430 >> 14;
   $t6=$431;
   var $432=$t6;
   var $433=$432 & -256;
   var $434=(($433)|(0))==0;
   if ($434) { label = 74; break; } else { label = 75; break; }
  case 74: 
   var $436=$t6;
   var $442 = $436;label = 76; break;
  case 75: 
   var $438=$t6;
   var $439=$438 >> 31;
   var $440=$439 ^ -1;
   var $442 = $440;label = 76; break;
  case 76: 
   var $442;
   var $443=(($442) & 255);
   var $444=$x;
   var $445=((($444)*(3))&-1);
   var $446=$data1;
   var $447=(($446+$445)|0);
   HEAP8[($447)]=$443;
   var $448=$Y3;
   var $449=$Cb4;
   var $450=((($449)*(-1410))&-1);
   var $451=((($448)+($450))|0);
   var $452=$Cr5;
   var $453=((($452)*(-2925))&-1);
   var $454=((($451)+($453))|0);
   var $455=$454 >> 14;
   $t6=$455;
   var $456=$t6;
   var $457=$456 & -256;
   var $458=(($457)|(0))==0;
   if ($458) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $460=$t6;
   var $466 = $460;label = 79; break;
  case 78: 
   var $462=$t6;
   var $463=$462 >> 31;
   var $464=$463 ^ -1;
   var $466 = $464;label = 79; break;
  case 79: 
   var $466;
   var $467=(($466) & 255);
   var $468=$x;
   var $469=((($468)*(3))&-1);
   var $470=((($469)+(1))|0);
   var $471=$data1;
   var $472=(($471+$470)|0);
   HEAP8[($472)]=$467;
   var $473=$Y3;
   var $474=$Cr5;
   var $475=((($474)*(5743))&-1);
   var $476=((($473)+($475))|0);
   var $477=$476 >> 14;
   $t6=$477;
   var $478=$t6;
   var $479=$478 & -256;
   var $480=(($479)|(0))==0;
   if ($480) { label = 80; break; } else { label = 81; break; }
  case 80: 
   var $482=$t6;
   var $488 = $482;label = 82; break;
  case 81: 
   var $484=$t6;
   var $485=$484 >> 31;
   var $486=$485 ^ -1;
   var $488 = $486;label = 82; break;
  case 82: 
   var $488;
   var $489=(($488) & 255);
   var $490=$x;
   var $491=((($490)*(3))&-1);
   var $492=((($491)+(2))|0);
   var $493=$data1;
   var $494=(($493+$492)|0);
   HEAP8[($494)]=$489;
   var $495=$x;
   var $496=((($495)+(1))|0);
   var $497=$cmp;
   var $498=(($497+($496<<2))|0);
   var $499=HEAP32[(($498)>>2)];
   var $500=((($499)+(512))|0);
   var $501=$500 << 12;
   $Y3=$501;
   var $502=$Y3;
   var $503=$Cb4;
   var $504=((($503)*(7258))&-1);
   var $505=((($502)+($504))|0);
   var $506=$505 >> 14;
   $t6=$506;
   var $507=$t6;
   var $508=$507 & -256;
   var $509=(($508)|(0))==0;
   if ($509) { label = 83; break; } else { label = 84; break; }
  case 83: 
   var $511=$t6;
   var $517 = $511;label = 85; break;
  case 84: 
   var $513=$t6;
   var $514=$513 >> 31;
   var $515=$514 ^ -1;
   var $517 = $515;label = 85; break;
  case 85: 
   var $517;
   var $518=(($517) & 255);
   var $519=$x;
   var $520=((($519)*(3))&-1);
   var $521=((($520)+(3))|0);
   var $522=$data1;
   var $523=(($522+$521)|0);
   HEAP8[($523)]=$518;
   var $524=$Y3;
   var $525=$Cb4;
   var $526=((($525)*(-1410))&-1);
   var $527=((($524)+($526))|0);
   var $528=$Cr5;
   var $529=((($528)*(-2925))&-1);
   var $530=((($527)+($529))|0);
   var $531=$530 >> 14;
   $t6=$531;
   var $532=$t6;
   var $533=$532 & -256;
   var $534=(($533)|(0))==0;
   if ($534) { label = 86; break; } else { label = 87; break; }
  case 86: 
   var $536=$t6;
   var $542 = $536;label = 88; break;
  case 87: 
   var $538=$t6;
   var $539=$538 >> 31;
   var $540=$539 ^ -1;
   var $542 = $540;label = 88; break;
  case 88: 
   var $542;
   var $543=(($542) & 255);
   var $544=$x;
   var $545=((($544)*(3))&-1);
   var $546=((($545)+(4))|0);
   var $547=$data1;
   var $548=(($547+$546)|0);
   HEAP8[($548)]=$543;
   var $549=$Y3;
   var $550=$Cr5;
   var $551=((($550)*(5743))&-1);
   var $552=((($549)+($551))|0);
   var $553=$552 >> 14;
   $t6=$553;
   var $554=$t6;
   var $555=$554 & -256;
   var $556=(($555)|(0))==0;
   if ($556) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $558=$t6;
   var $564 = $558;label = 91; break;
  case 90: 
   var $560=$t6;
   var $561=$560 >> 31;
   var $562=$561 ^ -1;
   var $564 = $562;label = 91; break;
  case 91: 
   var $564;
   var $565=(($564) & 255);
   var $566=$x;
   var $567=((($566)*(3))&-1);
   var $568=((($567)+(5))|0);
   var $569=$data1;
   var $570=(($569+$568)|0);
   HEAP8[($570)]=$565;
   label = 92; break;
  case 92: 
   var $572=$x;
   var $573=((($572)+(2))|0);
   $x=$573;
   var $574=$xc;
   var $575=((($574)+(1))|0);
   $xc=$575;
   label = 72; break;
  case 93: 
   label = 94; break;
  case 94: 
   label = 95; break;
  case 95: 
   label = 96; break;
  case 96: 
   var $580=$x;
   var $581=$x2;
   var $582=(($580)|(0)) < (($581)|(0));
   if ($582) { label = 97; break; } else { label = 108; break; }
  case 97: 
   var $584=$x;
   var $585=$cmp;
   var $586=(($585+($584<<2))|0);
   var $587=HEAP32[(($586)>>2)];
   var $588=((($587)+(512))|0);
   var $589=$588 << 12;
   $Y7=$589;
   var $590=$x;
   var $591=$x_shift;
   var $592=$590 >> (($591)|(0));
   var $593=$cmpCb;
   var $594=(($593+($592<<2))|0);
   var $595=HEAP32[(($594)>>2)];
   $Cb8=$595;
   var $596=$x;
   var $597=$x_shift;
   var $598=$596 >> (($597)|(0));
   var $599=$cmpCr;
   var $600=(($599+($598<<2))|0);
   var $601=HEAP32[(($600)>>2)];
   $Cr9=$601;
   var $602=$Y7;
   var $603=$Cb8;
   var $604=((($603)*(7258))&-1);
   var $605=((($602)+($604))|0);
   var $606=$605 >> 14;
   $t10=$606;
   var $607=$t10;
   var $608=$607 & -256;
   var $609=(($608)|(0))==0;
   if ($609) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $611=$t10;
   var $617 = $611;label = 100; break;
  case 99: 
   var $613=$t10;
   var $614=$613 >> 31;
   var $615=$614 ^ -1;
   var $617 = $615;label = 100; break;
  case 100: 
   var $617;
   var $618=(($617) & 255);
   var $619=$x;
   var $620=((($619)*(3))&-1);
   var $621=$data1;
   var $622=(($621+$620)|0);
   HEAP8[($622)]=$618;
   var $623=$Y7;
   var $624=$Cb8;
   var $625=((($624)*(-1410))&-1);
   var $626=((($623)+($625))|0);
   var $627=$Cr9;
   var $628=((($627)*(-2925))&-1);
   var $629=((($626)+($628))|0);
   var $630=$629 >> 14;
   $t10=$630;
   var $631=$t10;
   var $632=$631 & -256;
   var $633=(($632)|(0))==0;
   if ($633) { label = 101; break; } else { label = 102; break; }
  case 101: 
   var $635=$t10;
   var $641 = $635;label = 103; break;
  case 102: 
   var $637=$t10;
   var $638=$637 >> 31;
   var $639=$638 ^ -1;
   var $641 = $639;label = 103; break;
  case 103: 
   var $641;
   var $642=(($641) & 255);
   var $643=$x;
   var $644=((($643)*(3))&-1);
   var $645=((($644)+(1))|0);
   var $646=$data1;
   var $647=(($646+$645)|0);
   HEAP8[($647)]=$642;
   var $648=$Y7;
   var $649=$Cr9;
   var $650=((($649)*(5743))&-1);
   var $651=((($648)+($650))|0);
   var $652=$651 >> 14;
   $t10=$652;
   var $653=$t10;
   var $654=$653 & -256;
   var $655=(($654)|(0))==0;
   if ($655) { label = 104; break; } else { label = 105; break; }
  case 104: 
   var $657=$t10;
   var $663 = $657;label = 106; break;
  case 105: 
   var $659=$t10;
   var $660=$659 >> 31;
   var $661=$660 ^ -1;
   var $663 = $661;label = 106; break;
  case 106: 
   var $663;
   var $664=(($663) & 255);
   var $665=$x;
   var $666=((($665)*(3))&-1);
   var $667=((($666)+(2))|0);
   var $668=$data1;
   var $669=(($668+$667)|0);
   HEAP8[($669)]=$664;
   label = 107; break;
  case 107: 
   var $671=$x;
   var $672=((($671)+(1))|0);
   $x=$672;
   label = 96; break;
  case 108: 
   label = 117; break;
  case 109: 
   $x=0;
   label = 110; break;
  case 110: 
   var $676=$x;
   var $677=$x2;
   var $678=(($676)|(0)) < (($677)|(0));
   if ($678) { label = 111; break; } else { label = 116; break; }
  case 111: 
   var $680=$x;
   var $681=$cmp;
   var $682=(($681+($680<<2))|0);
   var $683=HEAP32[(($682)>>2)];
   var $684=((($683)+(512))|0);
   var $685=((($684)+(2))|0);
   var $686=$685 >> 2;
   $val11=$686;
   var $687=$val11;
   var $688=$687 & -256;
   var $689=(($688)|(0))==0;
   if ($689) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $691=$val11;
   var $697 = $691;label = 114; break;
  case 113: 
   var $693=$val11;
   var $694=$693 >> 31;
   var $695=$694 ^ -1;
   var $697 = $695;label = 114; break;
  case 114: 
   var $697;
   var $698=(($697) & 255);
   var $699=$x;
   var $700=$data1;
   var $701=(($700+$699)|0);
   HEAP8[($701)]=$698;
   label = 115; break;
  case 115: 
   var $703=$x;
   var $704=((($703)+(1))|0);
   $x=$704;
   label = 110; break;
  case 116: 
   label = 117; break;
  case 117: 
   label = 118; break;
  case 118: 
   var $708=$y;
   var $709=((($708)+(1))|0);
   $y=$709;
   var $710=$5;
   var $711=$data1;
   var $712=(($711+$710)|0);
   $data1=$712;
   var $713=(($h)|0);
   var $714=HEAP32[(($713)>>2)];
   var $715=$cmp;
   var $716=(($715+($714<<2))|0);
   $cmp=$716;
   label = 53; break;
  case 119: 
   label = 120; break;
  case 120: 
   var $719=(($h)|0);
   var $720=HEAP32[(($719)>>2)];
   var $721=$x1;
   var $722=((($721)+($720))|0);
   $x1=$722;
   var $723=$x1;
   var $724=$7;
   var $725=(($724+8)|0);
   var $726=HEAP32[(($725)>>2)];
   var $727=(($723)|(0)) >= (($726)|(0));
   if ($727) { label = 121; break; } else { label = 124; break; }
  case 121: 
   $x1=0;
   var $729=(($v)|0);
   var $730=HEAP32[(($729)>>2)];
   var $731=$y1;
   var $732=((($731)+($730))|0);
   $y1=$732;
   var $733=(($v)|0);
   var $734=HEAP32[(($733)>>2)];
   var $735=$5;
   var $736=(Math.imul($734,$735)|0);
   var $737=$4;
   var $738=(($737+$736)|0);
   $4=$738;
   var $739=$y1;
   var $740=$7;
   var $741=(($740+12)|0);
   var $742=HEAP32[(($741)>>2)];
   var $743=(($739)|(0)) >= (($742)|(0));
   if ($743) { label = 122; break; } else { label = 123; break; }
  case 122: 
   label = 126; break;
  case 123: 
   label = 124; break;
  case 124: 
   label = 125; break;
  case 125: 
   var $748=$mcu;
   var $749=((($748)+(1))|0);
   $mcu=$749;
   label = 8; break;
  case 126: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegReader12ResetDecoderEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1088)|0);
 var $4=(($3+24)|0);
 var $5=(($4+8)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($2+1088)|0);
 var $7=(($6+12)|0);
 var $8=(($7+8)|0);
 HEAP32[(($8)>>2)]=0;
 var $9=(($2+1088)|0);
 var $10=(($9)|0);
 var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=0;
 return;
}
function __ZL11aan_idct8x8PiS_i($src, $dst, $step) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $workspace=sp;
   var $work;
   var $i;
   var $x0;
   var $x1;
   var $x2;
   var $x3;
   var $x4;
   var $x01;
   var $x12;
   var $x23;
   var $x34;
   var $x45;
   $1=$src;
   $2=$dst;
   $3=$step;
   var $4=(($workspace)|0);
   $work=$4;
   $i=8;
   label = 2; break;
  case 2: 
   var $6=$i;
   var $7=(($6)|(0)) > 0;
   if ($7) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $9=$1;
   var $10=(($9+20)|0);
   var $11=HEAP32[(($10)>>2)];
   $x0=$11;
   var $12=$1;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   $x1=$14;
   var $15=$1;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   $x2=$17;
   var $18=$1;
   var $19=(($18+28)|0);
   var $20=HEAP32[(($19)>>2)];
   $x3=$20;
   var $21=$x0;
   var $22=$x1;
   var $23=((($21)+($22))|0);
   $x4=$23;
   var $24=$x1;
   var $25=$x0;
   var $26=((($25)-($24))|0);
   $x0=$26;
   var $27=$x2;
   var $28=$x3;
   var $29=((($27)+($28))|0);
   $x1=$29;
   var $30=$x3;
   var $31=$x2;
   var $32=((($31)-($30))|0);
   $x2=$32;
   var $33=$x1;
   var $34=$x4;
   var $35=((($33)+($34))|0);
   $x3=$35;
   var $36=$x4;
   var $37=$x1;
   var $38=((($37)-($36))|0);
   $x1=$38;
   var $39=$x0;
   var $40=$x2;
   var $41=((($39)+($40))|0);
   var $42=((($41)*(30274))&-1);
   $x4=$42;
   var $43=$x4;
   var $44=$x0;
   var $45=((($44)*(42813))&-1);
   var $46=((($43)-($45))|0);
   var $47=((($46)+(8192))|0);
   var $48=$47 >> 14;
   $x0=$48;
   var $49=$x2;
   var $50=((($49)*(17734))&-1);
   var $51=$x4;
   var $52=((($50)-($51))|0);
   var $53=((($52)+(8192))|0);
   var $54=$53 >> 14;
   $x2=$54;
   var $55=$x1;
   var $56=((($55)*(23170))&-1);
   var $57=((($56)+(8192))|0);
   var $58=$57 >> 14;
   $x1=$58;
   var $59=$x3;
   var $60=$x0;
   var $61=((($60)-($59))|0);
   $x0=$61;
   var $62=$x0;
   var $63=$x1;
   var $64=((($63)-($62))|0);
   $x1=$64;
   var $65=$x1;
   var $66=$x2;
   var $67=((($66)+($65))|0);
   $x2=$67;
   var $68=$x3;
   var $69=$work;
   var $70=(($69+28)|0);
   HEAP32[(($70)>>2)]=$68;
   var $71=$x0;
   var $72=$work;
   var $73=(($72+24)|0);
   HEAP32[(($73)>>2)]=$71;
   var $74=$x1;
   var $75=$work;
   var $76=(($75+20)|0);
   HEAP32[(($76)>>2)]=$74;
   var $77=$x2;
   var $78=$work;
   var $79=(($78+16)|0);
   HEAP32[(($79)>>2)]=$77;
   var $80=$1;
   var $81=(($80+8)|0);
   var $82=HEAP32[(($81)>>2)];
   $x2=$82;
   var $83=$1;
   var $84=(($83+24)|0);
   var $85=HEAP32[(($84)>>2)];
   $x3=$85;
   var $86=$1;
   var $87=(($86)|0);
   var $88=HEAP32[(($87)>>2)];
   $x0=$88;
   var $89=$1;
   var $90=(($89+16)|0);
   var $91=HEAP32[(($90)>>2)];
   $x1=$91;
   var $92=$x2;
   var $93=$x3;
   var $94=((($92)+($93))|0);
   $x4=$94;
   var $95=$x2;
   var $96=$x3;
   var $97=((($95)-($96))|0);
   var $98=((($97)*(23170))&-1);
   var $99=((($98)+(8192))|0);
   var $100=$99 >> 14;
   var $101=$x4;
   var $102=((($100)-($101))|0);
   $x2=$102;
   var $103=$x0;
   var $104=$x1;
   var $105=((($103)+($104))|0);
   $x3=$105;
   var $106=$x1;
   var $107=$x0;
   var $108=((($107)-($106))|0);
   $x0=$108;
   var $109=$x3;
   var $110=$x4;
   var $111=((($109)+($110))|0);
   $x1=$111;
   var $112=$x4;
   var $113=$x3;
   var $114=((($113)-($112))|0);
   $x3=$114;
   var $115=$x0;
   var $116=$x2;
   var $117=((($115)+($116))|0);
   $x4=$117;
   var $118=$x2;
   var $119=$x0;
   var $120=((($119)-($118))|0);
   $x0=$120;
   var $121=$work;
   var $122=(($121+28)|0);
   var $123=HEAP32[(($122)>>2)];
   $x2=$123;
   var $124=$x2;
   var $125=$x1;
   var $126=((($125)-($124))|0);
   $x1=$126;
   var $127=$x2;
   var $128=($127<<1);
   var $129=$x1;
   var $130=((($128)+($129))|0);
   $x2=$130;
   var $131=$x1;
   var $132=$work;
   var $133=(($132+28)|0);
   HEAP32[(($133)>>2)]=$131;
   var $134=$x2;
   var $135=$work;
   var $136=(($135)|0);
   HEAP32[(($136)>>2)]=$134;
   var $137=$work;
   var $138=(($137+24)|0);
   var $139=HEAP32[(($138)>>2)];
   $x2=$139;
   var $140=$x4;
   var $141=$x2;
   var $142=((($140)+($141))|0);
   $x1=$142;
   var $143=$x2;
   var $144=$x4;
   var $145=((($144)-($143))|0);
   $x4=$145;
   var $146=$x1;
   var $147=$work;
   var $148=(($147+4)|0);
   HEAP32[(($148)>>2)]=$146;
   var $149=$x4;
   var $150=$work;
   var $151=(($150+24)|0);
   HEAP32[(($151)>>2)]=$149;
   var $152=$work;
   var $153=(($152+20)|0);
   var $154=HEAP32[(($153)>>2)];
   $x1=$154;
   var $155=$work;
   var $156=(($155+16)|0);
   var $157=HEAP32[(($156)>>2)];
   $x2=$157;
   var $158=$x0;
   var $159=$x1;
   var $160=((($158)+($159))|0);
   $x4=$160;
   var $161=$x1;
   var $162=$x0;
   var $163=((($162)-($161))|0);
   $x0=$163;
   var $164=$x3;
   var $165=$x2;
   var $166=((($164)+($165))|0);
   $x1=$166;
   var $167=$x2;
   var $168=$x3;
   var $169=((($168)-($167))|0);
   $x3=$169;
   var $170=$x4;
   var $171=$work;
   var $172=(($171+8)|0);
   HEAP32[(($172)>>2)]=$170;
   var $173=$x0;
   var $174=$work;
   var $175=(($174+20)|0);
   HEAP32[(($175)>>2)]=$173;
   var $176=$x3;
   var $177=$work;
   var $178=(($177+12)|0);
   HEAP32[(($178)>>2)]=$176;
   var $179=$x1;
   var $180=$work;
   var $181=(($180+16)|0);
   HEAP32[(($181)>>2)]=$179;
   label = 4; break;
  case 4: 
   var $183=$i;
   var $184=((($183)-(1))|0);
   $i=$184;
   var $185=$1;
   var $186=(($185+32)|0);
   $1=$186;
   var $187=$work;
   var $188=(($187+32)|0);
   $work=$188;
   label = 2; break;
  case 5: 
   var $190=(($workspace)|0);
   $work=$190;
   $i=8;
   label = 6; break;
  case 6: 
   var $192=$i;
   var $193=(($192)|(0)) > 0;
   if ($193) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $195=$work;
   var $196=(($195+160)|0);
   var $197=HEAP32[(($196)>>2)];
   $x01=$197;
   var $198=$work;
   var $199=(($198+96)|0);
   var $200=HEAP32[(($199)>>2)];
   $x12=$200;
   var $201=$work;
   var $202=(($201+32)|0);
   var $203=HEAP32[(($202)>>2)];
   $x23=$203;
   var $204=$work;
   var $205=(($204+224)|0);
   var $206=HEAP32[(($205)>>2)];
   $x34=$206;
   var $207=$x01;
   var $208=$x12;
   var $209=((($207)+($208))|0);
   $x45=$209;
   var $210=$x12;
   var $211=$x01;
   var $212=((($211)-($210))|0);
   $x01=$212;
   var $213=$x23;
   var $214=$x34;
   var $215=((($213)+($214))|0);
   $x12=$215;
   var $216=$x34;
   var $217=$x23;
   var $218=((($217)-($216))|0);
   $x23=$218;
   var $219=$x12;
   var $220=$x45;
   var $221=((($219)+($220))|0);
   $x34=$221;
   var $222=$x45;
   var $223=$x12;
   var $224=((($223)-($222))|0);
   $x12=$224;
   var $225=$x01;
   var $226=$x23;
   var $227=((($225)+($226))|0);
   var $228=((($227)*(30274))&-1);
   $x45=$228;
   var $229=$x45;
   var $230=$x01;
   var $231=((($230)*(42813))&-1);
   var $232=((($229)-($231))|0);
   var $233=((($232)+(8192))|0);
   var $234=$233 >> 14;
   $x01=$234;
   var $235=$x23;
   var $236=((($235)*(17734))&-1);
   var $237=$x45;
   var $238=((($236)-($237))|0);
   var $239=((($238)+(8192))|0);
   var $240=$239 >> 14;
   $x23=$240;
   var $241=$x12;
   var $242=((($241)*(23170))&-1);
   var $243=((($242)+(8192))|0);
   var $244=$243 >> 14;
   $x12=$244;
   var $245=$x34;
   var $246=$x01;
   var $247=((($246)-($245))|0);
   $x01=$247;
   var $248=$x01;
   var $249=$x12;
   var $250=((($249)-($248))|0);
   $x12=$250;
   var $251=$x12;
   var $252=$x23;
   var $253=((($252)+($251))|0);
   $x23=$253;
   var $254=$x34;
   var $255=$2;
   var $256=(($255+28)|0);
   HEAP32[(($256)>>2)]=$254;
   var $257=$x01;
   var $258=$2;
   var $259=(($258+24)|0);
   HEAP32[(($259)>>2)]=$257;
   var $260=$x12;
   var $261=$2;
   var $262=(($261+20)|0);
   HEAP32[(($262)>>2)]=$260;
   var $263=$x23;
   var $264=$2;
   var $265=(($264+16)|0);
   HEAP32[(($265)>>2)]=$263;
   var $266=$work;
   var $267=(($266+64)|0);
   var $268=HEAP32[(($267)>>2)];
   $x23=$268;
   var $269=$work;
   var $270=(($269+192)|0);
   var $271=HEAP32[(($270)>>2)];
   $x34=$271;
   var $272=$work;
   var $273=(($272)|0);
   var $274=HEAP32[(($273)>>2)];
   $x01=$274;
   var $275=$work;
   var $276=(($275+128)|0);
   var $277=HEAP32[(($276)>>2)];
   $x12=$277;
   var $278=$x23;
   var $279=$x34;
   var $280=((($278)+($279))|0);
   $x45=$280;
   var $281=$x23;
   var $282=$x34;
   var $283=((($281)-($282))|0);
   var $284=((($283)*(23170))&-1);
   var $285=((($284)+(8192))|0);
   var $286=$285 >> 14;
   var $287=$x45;
   var $288=((($286)-($287))|0);
   $x23=$288;
   var $289=$x01;
   var $290=$x12;
   var $291=((($289)+($290))|0);
   $x34=$291;
   var $292=$x12;
   var $293=$x01;
   var $294=((($293)-($292))|0);
   $x01=$294;
   var $295=$x34;
   var $296=$x45;
   var $297=((($295)+($296))|0);
   $x12=$297;
   var $298=$x45;
   var $299=$x34;
   var $300=((($299)-($298))|0);
   $x34=$300;
   var $301=$x01;
   var $302=$x23;
   var $303=((($301)+($302))|0);
   $x45=$303;
   var $304=$x23;
   var $305=$x01;
   var $306=((($305)-($304))|0);
   $x01=$306;
   var $307=$2;
   var $308=(($307+28)|0);
   var $309=HEAP32[(($308)>>2)];
   $x23=$309;
   var $310=$x23;
   var $311=$x12;
   var $312=((($311)-($310))|0);
   $x12=$312;
   var $313=$x23;
   var $314=($313<<1);
   var $315=$x12;
   var $316=((($314)+($315))|0);
   $x23=$316;
   var $317=$x12;
   var $318=((($317)+(4))|0);
   var $319=$318 >> 3;
   $x12=$319;
   var $320=$x23;
   var $321=((($320)+(4))|0);
   var $322=$321 >> 3;
   $x23=$322;
   var $323=$x12;
   var $324=$2;
   var $325=(($324+28)|0);
   HEAP32[(($325)>>2)]=$323;
   var $326=$x23;
   var $327=$2;
   var $328=(($327)|0);
   HEAP32[(($328)>>2)]=$326;
   var $329=$2;
   var $330=(($329+24)|0);
   var $331=HEAP32[(($330)>>2)];
   $x23=$331;
   var $332=$x45;
   var $333=$x23;
   var $334=((($332)+($333))|0);
   var $335=((($334)+(4))|0);
   var $336=$335 >> 3;
   $x12=$336;
   var $337=$x45;
   var $338=$x23;
   var $339=((($337)-($338))|0);
   var $340=((($339)+(4))|0);
   var $341=$340 >> 3;
   $x45=$341;
   var $342=$x12;
   var $343=$2;
   var $344=(($343+4)|0);
   HEAP32[(($344)>>2)]=$342;
   var $345=$x45;
   var $346=$2;
   var $347=(($346+24)|0);
   HEAP32[(($347)>>2)]=$345;
   var $348=$2;
   var $349=(($348+20)|0);
   var $350=HEAP32[(($349)>>2)];
   $x12=$350;
   var $351=$2;
   var $352=(($351+16)|0);
   var $353=HEAP32[(($352)>>2)];
   $x23=$353;
   var $354=$x01;
   var $355=$x12;
   var $356=((($354)+($355))|0);
   var $357=((($356)+(4))|0);
   var $358=$357 >> 3;
   $x45=$358;
   var $359=$x01;
   var $360=$x12;
   var $361=((($359)-($360))|0);
   var $362=((($361)+(4))|0);
   var $363=$362 >> 3;
   $x01=$363;
   var $364=$x34;
   var $365=$x23;
   var $366=((($364)+($365))|0);
   var $367=((($366)+(4))|0);
   var $368=$367 >> 3;
   $x12=$368;
   var $369=$x34;
   var $370=$x23;
   var $371=((($369)-($370))|0);
   var $372=((($371)+(4))|0);
   var $373=$372 >> 3;
   $x34=$373;
   var $374=$x45;
   var $375=$2;
   var $376=(($375+8)|0);
   HEAP32[(($376)>>2)]=$374;
   var $377=$x01;
   var $378=$2;
   var $379=(($378+20)|0);
   HEAP32[(($379)>>2)]=$377;
   var $380=$x34;
   var $381=$2;
   var $382=(($381+12)|0);
   HEAP32[(($382)>>2)]=$380;
   var $383=$x12;
   var $384=$2;
   var $385=(($384+16)|0);
   HEAP32[(($385)>>2)]=$383;
   label = 8; break;
  case 8: 
   var $387=$i;
   var $388=((($387)-(1))|0);
   $i=$388;
   var $389=$3;
   var $390=$2;
   var $391=(($390+($389<<2))|0);
   $2=$391;
   var $392=$work;
   var $393=(($392+4)|0);
   $work=$393;
   label = 6; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegReader8GetBlockEPii($this, $block, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $td;
   var $ta;
   var $tq;
   var $i;
   var $cat;
   var $mask;
   var $val;
   $1=$this;
   $2=$block;
   $3=$c;
   var $4=$1;
   var $5=$2;
   var $6=$5;
   _memset($6, 0, 256);
   var $7=$3;
   var $8=(($4+1088)|0);
   var $9=(($8+((($7)*(12))&-1))|0);
   var $10=(($9+3)|0);
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=(($4+2152)|0);
   var $14=(($13+($12<<2))|0);
   var $15=HEAP32[(($14)>>2)];
   $td=$15;
   var $16=$3;
   var $17=(($4+1088)|0);
   var $18=(($17+((($16)*(12))&-1))|0);
   var $19=(($18+4)|0);
   var $20=HEAP8[($19)];
   var $21=(($20 << 24) >> 24);
   var $22=(($4+2172)|0);
   var $23=(($22+($21<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   $ta=$24;
   var $25=$3;
   var $26=(($4+1088)|0);
   var $27=(($26+((($25)*(12))&-1))|0);
   var $28=(($27+2)|0);
   var $29=HEAP8[($28)];
   var $30=(($29 << 24) >> 24);
   var $31=(($4+1124)|0);
   var $32=(($31+($30<<8))|0);
   var $33=(($32)|0);
   $tq=$33;
   $i=0;
   var $34=(($4+2192)|0);
   var $35=$34;
   var $36=$td;
   var $37=__ZN11RMBitStream7GetHuffEPKs($35, $36);
   $cat=$37;
   var $38=$cat;
   var $39=((7168+($38<<2))|0);
   var $40=((((HEAPU8[($39)])|(HEAPU8[((($39)+(1))|0)]<<8)|(HEAPU8[((($39)+(2))|0)]<<16)|(HEAPU8[((($39)+(3))|0)]<<24))|(0)));
   $mask=$40;
   var $41=(($4+2192)|0);
   var $42=$41;
   var $43=$cat;
   var $44=__ZN11RMBitStream3GetEi($42, $43);
   $val=$44;
   var $45=$val;
   var $46=($45<<1);
   var $47=$mask;
   var $48=(($46)|(0)) <= (($47)|(0));
   if ($48) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $50=$mask;
   var $53 = $50;label = 4; break;
  case 3: 
   var $53 = 0;label = 4; break;
  case 4: 
   var $53;
   var $54=$val;
   var $55=((($54)-($53))|0);
   $val=$55;
   var $56=$3;
   var $57=(($4+1088)|0);
   var $58=(($57+((($56)*(12))&-1))|0);
   var $59=(($58+8)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$val;
   var $62=((($61)+($60))|0);
   $val=$62;
   var $63=$3;
   var $64=(($4+1088)|0);
   var $65=(($64+((($63)*(12))&-1))|0);
   var $66=(($65+8)|0);
   HEAP32[(($66)>>2)]=$62;
   var $67=$val;
   var $68=$tq;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(Math.imul($67,$70)|0);
   var $72=((($71)+(32768))|0);
   var $73=$72 >> 16;
   var $74=$2;
   var $75=(($74)|0);
   HEAP32[(($75)>>2)]=$73;
   label = 5; break;
  case 5: 
   var $77=(($4+2192)|0);
   var $78=$77;
   var $79=$ta;
   var $80=__ZN11RMBitStream7GetHuffEPKs($78, $79);
   $cat=$80;
   var $81=$cat;
   var $82=(($81)|(0))==0;
   if ($82) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 13; break;
  case 7: 
   var $85=$cat;
   var $86=$85 >> 4;
   var $87=((($86)+(1))|0);
   var $88=$i;
   var $89=((($88)+($87))|0);
   $i=$89;
   var $90=$cat;
   var $91=$90 & 15;
   $cat=$91;
   var $92=$cat;
   var $93=((7168+($92<<2))|0);
   var $94=((((HEAPU8[($93)])|(HEAPU8[((($93)+(1))|0)]<<8)|(HEAPU8[((($93)+(2))|0)]<<16)|(HEAPU8[((($93)+(3))|0)]<<24))|(0)));
   $mask=$94;
   var $95=(($4+2192)|0);
   var $96=$95;
   var $97=$cat;
   var $98=__ZN11RMBitStream3GetEi($96, $97);
   $val=$98;
   var $99=$i;
   var $100=((21032+$99)|0);
   var $101=HEAP8[($100)];
   var $102=(($101)&(255));
   $cat=$102;
   var $103=$val;
   var $104=($103<<1);
   var $105=$mask;
   var $106=(($104)|(0)) <= (($105)|(0));
   if ($106) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $108=$mask;
   var $111 = $108;label = 10; break;
  case 9: 
   var $111 = 0;label = 10; break;
  case 10: 
   var $111;
   var $112=$val;
   var $113=((($112)-($111))|0);
   $val=$113;
   var $114=$val;
   var $115=$cat;
   var $116=$tq;
   var $117=(($116+($115<<2))|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(Math.imul($114,$118)|0);
   var $120=((($119)+(32768))|0);
   var $121=$120 >> 16;
   var $122=$cat;
   var $123=$2;
   var $124=(($123+($122<<2))|0);
   HEAP32[(($124)>>2)]=$121;
   var $125=$i;
   var $126=(($125)|(0)) >= 63;
   if ($126) { label = 11; break; } else { label = 12; break; }
  case 11: 
   label = 13; break;
  case 12: 
   label = 5; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WMByteStreamC1Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 __ZN12WMByteStreamC2Ev($2);
 return;
}
function __ZN14WJpegBitStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN14WJpegBitStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14WJpegBitStream4OpenEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$filename;
   var $3=$1;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   FUNCTION_TABLE[$7]($3);
   var $8=$3;
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10+24)|0);
   var $12=HEAP32[(($11)>>2)];
   FUNCTION_TABLE[$12]($8);
   var $13=(($3+44)|0);
   var $14=$13;
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$2;
   var $20=FUNCTION_TABLE[$18]($14, $19);
   var $21=$3;
   var $22=(($21+28)|0);
   var $23=(($20)&(1));
   HEAP8[($22)]=$23;
   var $24=$3;
   var $25=(($24+28)|0);
   var $26=HEAP8[($25)];
   var $27=(($26) & 1);
   if ($27) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $29=$3;
   var $30=(($29+20)|0);
   HEAP32[(($30)>>2)]=0;
   var $31=$3;
   __ZN11WMBitStream11ResetBufferEv($31);
   label = 3; break;
  case 3: 
   var $33=$3;
   var $34=(($33+28)|0);
   var $35=HEAP8[($34)];
   var $36=(($35) & 1);
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14WJpegBitStream5CloseEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+28)|0);
   var $5=HEAP8[($4)];
   var $6=(($5) & 1);
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+28)|0);
   var $11=HEAP32[(($10)>>2)];
   FUNCTION_TABLE[$11]($2);
   var $12=(($2+44)|0);
   var $13=$12;
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+12)|0);
   var $17=HEAP32[(($16)>>2)];
   FUNCTION_TABLE[$17]($13);
   var $18=$2;
   var $19=(($18+28)|0);
   HEAP8[($19)]=0;
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14WJpegBitStreamC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   __ZN11WMBitStreamC2Ev($5);
   var $6=$4;
   HEAP32[(($6)>>2)]=((18936)|0);
   var $7=(($4+44)|0);
   (function() { try { __THREW__ = 0; return __ZN12WMByteStreamC1Ev($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14WJpegBitStreamD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((18936)|0);
   var $6=$4;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+12)|0);
   var $9=HEAP32[(($8)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $11=$4;
   var $12=(($11+28)|0);
   HEAP8[($12)]=0;
   var $13=(($4+44)|0);
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=$4;
   __ZN11WBaseStreamD2Ev($15);
   return;
  case 4: 
   var $17$0 = ___cxa_find_matching_catch(-1, -1); $17$1 = tempRet0;
   var $18=$17$0;
   $2=$18;
   var $19=$17$1;
   $3=$19;
   var $20=(($4+44)|0);
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 6; break; } else { label = 10; break; }
  case 5: 
   var $22$0 = ___cxa_find_matching_catch(-1, -1); $22$1 = tempRet0;
   var $23=$22$0;
   $2=$23;
   var $24=$22$1;
   $3=$24;
   label = 7; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $27=$4;
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 8; break; } else { label = 10; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $30=$2;
   var $31=$3;
   var $32$0=$30;
   var $32$1=0;
   var $33$0=$32$0;
   var $33$1=$31;
   ___resumeException($33$0)
  case 10: 
   var $35$0 = ___cxa_find_matching_catch(-1, -1,0); $35$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14WJpegBitStream5FlushEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 var $4=$2;
 var $5=(($4+32)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6 & 31;
 __ZN11WMBitStream3PutEii($3, -1, $7);
 var $8=$2;
 var $9=(($8+40)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$2;
 var $12=(($11+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+4)|0);
 HEAP32[(($13)>>2)]=$15;
 HEAP32[(($14)>>2)]=$10;
 var $16=$2;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+16)|0);
 var $19=HEAP32[(($18)>>2)];
 FUNCTION_TABLE[$19]($2);
 var $20=$2;
 __ZN11WMBitStream11ResetBufferEv($20);
 return;
}
function __ZN14WJpegBitStream10WriteBlockEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ptr;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+4)|0);
   var $5=HEAP32[(($4)>>2)];
   $ptr=$5;
   var $6=__Z13bsIsBigEndianv();
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$2;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$2;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   __Z12bsBSwapBlockPhS_($10, $13);
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $16=$ptr;
   var $17=$2;
   var $18=(($17+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($16)>>>(0)) < (($19)>>>(0));
   if ($20) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $22=$ptr;
   var $23=(($22+1)|0);
   $ptr=$23;
   var $24=HEAP8[($22)];
   var $25=(($24)&(255));
   $val=$25;
   var $26=(($2+44)|0);
   var $27=$26;
   var $28=$val;
   __ZN12WLByteStream7PutByteEi($27, $28);
   var $29=$val;
   var $30=(($29)|(0))==255;
   if ($30) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $32=(($2+44)|0);
   var $33=$32;
   __ZN12WLByteStream7PutByteEi($33, 0);
   label = 7; break;
  case 7: 
   label = 4; break;
  case 8: 
   var $36=$2;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$2;
   var $40=(($39+12)|0);
   HEAP32[(($40)>>2)]=$38;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegWriterD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN15GrFmtJpegWriterD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegWriterC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtWriterC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((18864)|0);
   var $9=(($5+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN14WJpegBitStreamC2Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   var $15=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $18=$3;
   var $19=$4;
   var $20$0=$18;
   var $20$1=0;
   var $21$0=$20$0;
   var $21$1=$19;
   ___resumeException($21$0)
  case 6: 
   var $23$0 = ___cxa_find_matching_catch(-1, -1,0); $23$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegWriterD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((18864)|0);
   var $6=(($4+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN14WJpegBitStreamD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$4;
   __ZN11GrFmtWriterD2Ev($8);
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtJpegWriter10WriteImageEPKhiiiii($this, $data, $step, $width, $height, $0, $_channels) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $x;
   var $y;
   var $i;
   var $j;
   var $max_quality;
   var $quality;
   var $lowstrm;
   var $fdct_qtab=sp;
   var $huff_dc_tab=(sp)+(512);
   var $huff_ac_tab=(sp)+(640);
   var $channels;
   var $x_scale;
   var $y_scale;
   var $dc_pred=(sp)+(2688);
   var $x_step;
   var $y_step;
   var $block=(sp)+(2704);
   var $buffer=(sp)+(4240);
   var $luma_count;
   var $block_count;
   var $Y_step;
   var $UV_step;
   var $inv_quality;
   var $qtable;
   var $chroma_scale;
   var $idx;
   var $qval;
   var $htable;
   var $is_ac_tab;
   var $idx1;
   var $tableSize;
   var $x_limit;
   var $y_limit;
   var $rgb_data;
   var $Y_data;
   var $UV_data;
   var $r;
   var $g;
   var $b;
   var $Y;
   var $U;
   var $V;
   var $j2;
   var $is_chroma;
   var $src_step;
   var $run;
   var $val;
   var $src_ptr;
   var $htable2;
   var $a=(sp)+(8336);
   var $cat;
   var $a3=(sp)+(8344);
   var $cat4;
   $3=$this;
   $4=$data;
   $5=$step;
   $6=$width;
   $7=$height;
   $8=$0;
   $9=$_channels;
   var $10=$3;
   var $11=(($10+1028)|0);
   var $12=$10;
   var $13=(($12+4)|0);
   var $14=(($13)|0);
   var $15=__ZN14WJpegBitStream4OpenEPKc($11, $14);
   if ($15) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $2=0;
   label = 99; break;
  case 3: 
   $max_quality=12;
   $quality=12;
   var $18=(($10+1028)|0);
   var $19=(($18+44)|0);
   $lowstrm=$19;
   var $20=$9;
   var $21=(($20)|(0)) > 1;
   var $22=$21 ? 3 : 1;
   $channels=$22;
   var $23=$channels;
   var $24=(($23)|(0)) > 1;
   var $25=$24 ? 2 : 1;
   $x_scale=$25;
   var $26=$x_scale;
   $y_scale=$26;
   var $27=$dc_pred;
   HEAP32[(($27)>>2)]=0; HEAP32[((($27)+(4))>>2)]=0; HEAP32[((($27)+(8))>>2)]=0;
   var $28=$x_scale;
   var $29=($28<<3);
   $x_step=$29;
   var $30=$y_scale;
   var $31=($30<<3);
   $y_step=$31;
   var $32=$x_scale;
   var $33=$y_scale;
   var $34=(Math.imul($32,$33)|0);
   $luma_count=$34;
   var $35=$luma_count;
   var $36=$channels;
   var $37=((($35)+($36))|0);
   var $38=((($37)-(1))|0);
   $block_count=$38;
   var $39=$x_scale;
   var $40=($39<<3);
   $Y_step=$40;
   $UV_step=16;
   var $41=$quality;
   var $42=(($41)|(0)) < 3;
   if ($42) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $quality=3;
   label = 5; break;
  case 5: 
   var $45=$quality;
   var $46=(($45)|(0)) > 12;
   if ($46) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $quality=12;
   label = 7; break;
  case 7: 
   var $49=$quality;
   var $50=(($49)|(0));
   var $51=(1)/($50);
   $inv_quality=$51;
   var $52=$lowstrm;
   var $53=$52;
   __ZN12WLByteStream8PutBytesEPKvi($53, ((23536)|0), 20);
   $i=0;
   label = 8; break;
  case 8: 
   var $55=$i;
   var $56=$channels;
   var $57=(($56)|(0)) > 1;
   var $58=$57 ? 2 : 1;
   var $59=(($55)|(0)) < (($58)|(0));
   if ($59) { label = 9; break; } else { label = 25; break; }
  case 9: 
   var $61=$i;
   var $62=(($61)|(0))==0;
   if ($62) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $66 = 22744;label = 12; break;
  case 11: 
   var $66 = 22680;label = 12; break;
  case 12: 
   var $66;
   var $67=(($66)|0);
   $qtable=$67;
   var $68=$i;
   var $69=(($68)|(0)) > 0;
   if ($69) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $71=$luma_count;
   var $74 = $71;label = 15; break;
  case 14: 
   var $74 = 1;label = 15; break;
  case 15: 
   var $74;
   $chroma_scale=$74;
   var $75=$lowstrm;
   __ZN12WMByteStream7PutWordEi($75, 65499);
   var $76=$lowstrm;
   __ZN12WMByteStream7PutWordEi($76, 67);
   var $77=$lowstrm;
   var $78=$77;
   var $79=$i;
   var $80=(($79)|0);
   __ZN12WLByteStream7PutByteEi($78, $80);
   $j=0;
   label = 16; break;
  case 16: 
   var $82=$j;
   var $83=(($82)|(0)) < 64;
   if ($83) { label = 17; break; } else { label = 23; break; }
  case 17: 
   var $85=$j;
   var $86=((21032+$85)|0);
   var $87=HEAP8[($86)];
   var $88=(($87)&(255));
   $idx=$88;
   var $89=$idx;
   var $90=$qtable;
   var $91=(($90+$89)|0);
   var $92=HEAP8[($91)];
   var $93=(($92)&(255));
   var $94=(($93)|(0));
   var $95=$inv_quality;
   var $96=($94)*($95);
   var $97=__Z7cvRoundd($96);
   $qval=$97;
   var $98=$qval;
   var $99=(($98)|(0)) < 1;
   if ($99) { label = 18; break; } else { label = 19; break; }
  case 18: 
   $qval=1;
   label = 19; break;
  case 19: 
   var $102=$qval;
   var $103=(($102)|(0)) > 255;
   if ($103) { label = 20; break; } else { label = 21; break; }
  case 20: 
   $qval=255;
   label = 21; break;
  case 21: 
   var $106=$qval;
   var $107=$chroma_scale;
   var $108=(Math.imul($106,$107)|0);
   var $109=$idx;
   var $110=((22808+($109<<2))|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(Math.imul($108,$111)|0);
   var $113=(((8388608)/((($112)|(0))))&-1);
   var $114=(($113)|(0));
   var $115=__Z7cvRoundd($114);
   var $116=$idx;
   var $117=$i;
   var $118=(($fdct_qtab+($117<<8))|0);
   var $119=(($118+($116<<2))|0);
   HEAP32[(($119)>>2)]=$115;
   var $120=$lowstrm;
   var $121=$120;
   var $122=$qval;
   __ZN12WLByteStream7PutByteEi($121, $122);
   label = 22; break;
  case 22: 
   var $124=$j;
   var $125=((($124)+(1))|0);
   $j=$125;
   label = 16; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $128=$i;
   var $129=((($128)+(1))|0);
   $i=$129;
   label = 8; break;
  case 25: 
   $i=0;
   label = 26; break;
  case 26: 
   var $132=$i;
   var $133=$channels;
   var $134=(($133)|(0)) > 1;
   var $135=$134 ? 4 : 2;
   var $136=(($132)|(0)) < (($135)|(0));
   if ($136) { label = 27; break; } else { label = 38; break; }
  case 27: 
   var $138=$i;
   var $139=(($138)|(0))==0;
   if ($139) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $152 = ((23504)|0);label = 33; break;
  case 29: 
   var $142=$i;
   var $143=(($142)|(0))==1;
   if ($143) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $150 = ((23288)|0);label = 32; break;
  case 31: 
   var $146=$i;
   var $147=(($146)|(0))==2;
   var $148=$147 ? (((23472)|0)) : (((23104)|0));
   var $150 = $148;label = 32; break;
  case 32: 
   var $150;
   var $152 = $150;label = 33; break;
  case 33: 
   var $152;
   $htable=$152;
   var $153=$i;
   var $154=$153 & 1;
   $is_ac_tab=$154;
   var $155=$i;
   var $156=(($155)|(0)) >= 2;
   var $157=(($156)&(1));
   $idx1=$157;
   var $158=$is_ac_tab;
   var $159=(($158)|(0))!=0;
   var $160=$159 ? 162 : 12;
   var $161=((($160)+(16))|0);
   $tableSize=$161;
   var $162=$lowstrm;
   __ZN12WMByteStream7PutWordEi($162, 65476);
   var $163=$lowstrm;
   var $164=$tableSize;
   var $165=((($164)+(3))|0);
   __ZN12WMByteStream7PutWordEi($163, $165);
   var $166=$lowstrm;
   var $167=$166;
   var $168=$is_ac_tab;
   var $169=($168<<4);
   var $170=$idx1;
   var $171=((($169)+($170))|0);
   __ZN12WLByteStream7PutByteEi($167, $171);
   var $172=$lowstrm;
   var $173=$172;
   var $174=$htable;
   var $175=$tableSize;
   __ZN12WLByteStream8PutBytesEPKvi($173, $174, $175);
   var $176=$htable;
   var $177=(($buffer)|0);
   var $178=__Z26bsCreateSourceHuffmanTablePKhPiii($176, $177, 16, 9);
   var $179=$is_ac_tab;
   var $180=(($179)|(0))!=0;
   if ($180) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $182=$idx1;
   var $183=(($huff_ac_tab+($182<<10))|0);
   var $184=(($183)|0);
   var $190 = $184;label = 36; break;
  case 35: 
   var $186=$idx1;
   var $187=(($huff_dc_tab+($186<<6))|0);
   var $188=(($187)|0);
   var $190 = $188;label = 36; break;
  case 36: 
   var $190;
   var $191=$is_ac_tab;
   var $192=(($191)|(0))!=0;
   var $193=$192 ? 256 : 16;
   var $194=__Z26bsCreateEncodeHuffmanTablePKiPmi($178, $190, $193);
   label = 37; break;
  case 37: 
   var $196=$i;
   var $197=((($196)+(1))|0);
   $i=$197;
   label = 26; break;
  case 38: 
   var $199=$lowstrm;
   __ZN12WMByteStream7PutWordEi($199, 65472);
   var $200=$lowstrm;
   var $201=$channels;
   var $202=((($201)*(3))&-1);
   var $203=((($202)+(8))|0);
   __ZN12WMByteStream7PutWordEi($200, $203);
   var $204=$lowstrm;
   var $205=$204;
   __ZN12WLByteStream7PutByteEi($205, 8);
   var $206=$lowstrm;
   var $207=$7;
   __ZN12WMByteStream7PutWordEi($206, $207);
   var $208=$lowstrm;
   var $209=$6;
   __ZN12WMByteStream7PutWordEi($208, $209);
   var $210=$lowstrm;
   var $211=$210;
   var $212=$channels;
   __ZN12WLByteStream7PutByteEi($211, $212);
   $i=0;
   label = 39; break;
  case 39: 
   var $214=$i;
   var $215=$channels;
   var $216=(($214)|(0)) < (($215)|(0));
   if ($216) { label = 40; break; } else { label = 45; break; }
  case 40: 
   var $218=$lowstrm;
   var $219=$218;
   var $220=$i;
   var $221=((($220)+(1))|0);
   __ZN12WLByteStream7PutByteEi($219, $221);
   var $222=$i;
   var $223=(($222)|(0))==0;
   if ($223) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $225=$lowstrm;
   var $226=$225;
   var $227=$x_scale;
   var $228=($227<<4);
   var $229=$y_scale;
   var $230=((($228)+($229))|0);
   __ZN12WLByteStream7PutByteEi($226, $230);
   label = 43; break;
  case 42: 
   var $232=$lowstrm;
   var $233=$232;
   __ZN12WLByteStream7PutByteEi($233, 17);
   label = 43; break;
  case 43: 
   var $235=$lowstrm;
   var $236=$235;
   var $237=$i;
   var $238=(($237)|(0)) > 0;
   var $239=(($238)&(1));
   __ZN12WLByteStream7PutByteEi($236, $239);
   label = 44; break;
  case 44: 
   var $241=$i;
   var $242=((($241)+(1))|0);
   $i=$242;
   label = 39; break;
  case 45: 
   var $244=$lowstrm;
   __ZN12WMByteStream7PutWordEi($244, 65498);
   var $245=$lowstrm;
   var $246=$channels;
   var $247=($246<<1);
   var $248=((($247)+(6))|0);
   __ZN12WMByteStream7PutWordEi($245, $248);
   var $249=$lowstrm;
   var $250=$249;
   var $251=$channels;
   __ZN12WLByteStream7PutByteEi($250, $251);
   $i=0;
   label = 46; break;
  case 46: 
   var $253=$i;
   var $254=$channels;
   var $255=(($253)|(0)) < (($254)|(0));
   if ($255) { label = 47; break; } else { label = 49; break; }
  case 47: 
   var $257=$lowstrm;
   var $258=$257;
   var $259=$i;
   var $260=((($259)+(1))|0);
   __ZN12WLByteStream7PutByteEi($258, $260);
   var $261=$lowstrm;
   var $262=$261;
   var $263=$i;
   var $264=(($263)|(0)) > 0;
   var $265=(($264)&(1));
   var $266=($265<<4);
   var $267=$i;
   var $268=(($267)|(0)) > 0;
   var $269=(($268)&(1));
   var $270=((($266)+($269))|0);
   __ZN12WLByteStream7PutByteEi($262, $270);
   label = 48; break;
  case 48: 
   var $272=$i;
   var $273=((($272)+(1))|0);
   $i=$273;
   label = 46; break;
  case 49: 
   var $275=$lowstrm;
   __ZN12WMByteStream7PutWordEi($275, 63);
   var $276=$lowstrm;
   var $277=$276;
   __ZN12WLByteStream7PutByteEi($277, 0);
   $y=0;
   label = 50; break;
  case 50: 
   var $279=$y;
   var $280=$7;
   var $281=(($279)|(0)) < (($280)|(0));
   if ($281) { label = 51; break; } else { label = 98; break; }
  case 51: 
   $x=0;
   label = 52; break;
  case 52: 
   var $284=$x;
   var $285=$6;
   var $286=(($284)|(0)) < (($285)|(0));
   if ($286) { label = 53; break; } else { label = 96; break; }
  case 53: 
   var $288=$x_step;
   $x_limit=$288;
   var $289=$y_step;
   $y_limit=$289;
   var $290=$4;
   var $291=$x;
   var $292=$9;
   var $293=(Math.imul($291,$292)|0);
   var $294=(($290+$293)|0);
   $rgb_data=$294;
   var $295=(($block)|0);
   var $296=(($295)|0);
   $Y_data=$296;
   var $297=$x;
   var $298=$x_limit;
   var $299=((($297)+($298))|0);
   var $300=$6;
   var $301=(($299)|(0)) > (($300)|(0));
   if ($301) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $303=$6;
   var $304=$x;
   var $305=((($303)-($304))|0);
   $x_limit=$305;
   label = 55; break;
  case 55: 
   var $307=$y;
   var $308=$y_limit;
   var $309=((($307)+($308))|0);
   var $310=$7;
   var $311=(($309)|(0)) > (($310)|(0));
   if ($311) { label = 56; break; } else { label = 57; break; }
  case 56: 
   var $313=$7;
   var $314=$y;
   var $315=((($313)-($314))|0);
   $y_limit=$315;
   label = 57; break;
  case 57: 
   var $317=$block;
   var $318=$block_count;
   var $319=($318<<6);
   var $320=($319<<2);
   _memset($317, 0, $320);
   var $321=$channels;
   var $322=(($321)|(0)) > 1;
   if ($322) { label = 58; break; } else { label = 69; break; }
  case 58: 
   var $324=$luma_count;
   var $325=(($block+($324<<8))|0);
   var $326=(($325)|0);
   $UV_data=$326;
   $i=0;
   label = 59; break;
  case 59: 
   var $328=$i;
   var $329=$y_limit;
   var $330=(($328)|(0)) < (($329)|(0));
   if ($330) { label = 60; break; } else { label = 68; break; }
  case 60: 
   $j=0;
   label = 61; break;
  case 61: 
   var $333=$j;
   var $334=$x_limit;
   var $335=(($333)|(0)) < (($334)|(0));
   if ($335) { label = 62; break; } else { label = 64; break; }
  case 62: 
   var $337=$rgb_data;
   var $338=(($337+2)|0);
   var $339=HEAP8[($338)];
   var $340=(($339)&(255));
   $r=$340;
   var $341=$rgb_data;
   var $342=(($341+1)|0);
   var $343=HEAP8[($342)];
   var $344=(($343)&(255));
   $g=$344;
   var $345=$rgb_data;
   var $346=(($345)|0);
   var $347=HEAP8[($346)];
   var $348=(($347)&(255));
   $b=$348;
   var $349=$r;
   var $350=((($349)*(1225))&-1);
   var $351=$g;
   var $352=((($351)*(2404))&-1);
   var $353=((($350)+($352))|0);
   var $354=$b;
   var $355=((($354)*(467))&-1);
   var $356=((($353)+($355))|0);
   var $357=((($356)+(512))|0);
   var $358=$357 >> 10;
   var $359=((($358)-(512))|0);
   $Y=$359;
   var $360=$r;
   var $361=((($360)*(-691))&-1);
   var $362=$g;
   var $363=((($362)*(-1357))&-1);
   var $364=((($361)+($363))|0);
   var $365=$b;
   var $366=($365<<11);
   var $367=((($364)+($366))|0);
   var $368=((($367)+(512))|0);
   var $369=$368 >> 10;
   $U=$369;
   var $370=$r;
   var $371=($370<<11);
   var $372=$g;
   var $373=((($372)*(-1715))&-1);
   var $374=((($371)+($373))|0);
   var $375=$b;
   var $376=((($375)*(-333))&-1);
   var $377=((($374)+($376))|0);
   var $378=((($377)+(512))|0);
   var $379=$378 >> 10;
   $V=$379;
   var $380=$j;
   var $381=$x_scale;
   var $382=((($381)-(1))|0);
   var $383=$380 >> (($382)|(0));
   $j2=$383;
   var $384=$Y;
   var $385=$j;
   var $386=$Y_data;
   var $387=(($386+($385<<2))|0);
   HEAP32[(($387)>>2)]=$384;
   var $388=$U;
   var $389=$j2;
   var $390=$UV_data;
   var $391=(($390+($389<<2))|0);
   var $392=HEAP32[(($391)>>2)];
   var $393=((($392)+($388))|0);
   HEAP32[(($391)>>2)]=$393;
   var $394=$V;
   var $395=$j2;
   var $396=((($395)+(8))|0);
   var $397=$UV_data;
   var $398=(($397+($396<<2))|0);
   var $399=HEAP32[(($398)>>2)];
   var $400=((($399)+($394))|0);
   HEAP32[(($398)>>2)]=$400;
   label = 63; break;
  case 63: 
   var $402=$j;
   var $403=((($402)+(1))|0);
   $j=$403;
   var $404=$9;
   var $405=$rgb_data;
   var $406=(($405+$404)|0);
   $rgb_data=$406;
   label = 61; break;
  case 64: 
   var $408=$x_limit;
   var $409=$9;
   var $410=(Math.imul($408,$409)|0);
   var $411=$rgb_data;
   var $412=(((-$410))|0);
   var $413=(($411+$412)|0);
   $rgb_data=$413;
   var $414=$i;
   var $415=((($414)+(1))|0);
   var $416=$y_scale;
   var $417=((($416)-(1))|0);
   var $418=$415 & $417;
   var $419=(($418)|(0))==0;
   if ($419) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $421=$UV_data;
   var $422=(($421+64)|0);
   $UV_data=$422;
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $425=$i;
   var $426=((($425)+(1))|0);
   $i=$426;
   var $427=$5;
   var $428=$rgb_data;
   var $429=(($428+$427)|0);
   $rgb_data=$429;
   var $430=$Y_step;
   var $431=$Y_data;
   var $432=(($431+($430<<2))|0);
   $Y_data=$432;
   label = 59; break;
  case 68: 
   label = 78; break;
  case 69: 
   $i=0;
   label = 70; break;
  case 70: 
   var $436=$i;
   var $437=$y_limit;
   var $438=(($436)|(0)) < (($437)|(0));
   if ($438) { label = 71; break; } else { label = 77; break; }
  case 71: 
   $j=0;
   label = 72; break;
  case 72: 
   var $441=$j;
   var $442=$x_limit;
   var $443=(($441)|(0)) < (($442)|(0));
   if ($443) { label = 73; break; } else { label = 75; break; }
  case 73: 
   var $445=$j;
   var $446=$rgb_data;
   var $447=(($446+$445)|0);
   var $448=HEAP8[($447)];
   var $449=(($448)&(255));
   var $450=($449<<2);
   var $451=((($450)-(512))|0);
   var $452=$j;
   var $453=$Y_data;
   var $454=(($453+($452<<2))|0);
   HEAP32[(($454)>>2)]=$451;
   label = 74; break;
  case 74: 
   var $456=$j;
   var $457=((($456)+(1))|0);
   $j=$457;
   label = 72; break;
  case 75: 
   label = 76; break;
  case 76: 
   var $460=$i;
   var $461=((($460)+(1))|0);
   $i=$461;
   var $462=$5;
   var $463=$rgb_data;
   var $464=(($463+$462)|0);
   $rgb_data=$464;
   var $465=$Y_step;
   var $466=$Y_data;
   var $467=(($466+($465<<2))|0);
   $Y_data=$467;
   label = 70; break;
  case 77: 
   label = 78; break;
  case 78: 
   $i=0;
   label = 79; break;
  case 79: 
   var $471=$i;
   var $472=$block_count;
   var $473=(($471)|(0)) < (($472)|(0));
   if ($473) { label = 80; break; } else { label = 94; break; }
  case 80: 
   var $475=$i;
   var $476=$luma_count;
   var $477=(($475)|(0)) >= (($476)|(0));
   var $478=(($477)&(1));
   $is_chroma=$478;
   var $479=$x_scale;
   var $480=($479<<3);
   $src_step=$480;
   $run=0;
   var $481=$i;
   var $482=$481 & -2;
   var $483=(($block+($482<<8))|0);
   var $484=(($483)|0);
   var $485=$i;
   var $486=$485 & 1;
   var $487=($486<<3);
   var $488=(($484+($487<<2))|0);
   $src_ptr=$488;
   var $489=$is_chroma;
   var $490=(($huff_ac_tab+($489<<10))|0);
   var $491=(($490)|0);
   $htable2=$491;
   var $492=$src_ptr;
   var $493=(($buffer)|0);
   var $494=$src_step;
   var $495=$is_chroma;
   var $496=(($fdct_qtab+($495<<8))|0);
   var $497=(($496)|0);
   __ZL11aan_fdct8x8PiS_iPKi($492, $493, $494, $497);
   var $498=$is_chroma;
   var $499=$i;
   var $500=$luma_count;
   var $501=(($499)|(0)) > (($500)|(0));
   var $502=(($501)&(1));
   var $503=((($498)+($502))|0);
   $j=$503;
   var $504=(($buffer)|0);
   var $505=HEAP32[(($504)>>2)];
   var $506=$j;
   var $507=(($dc_pred+($506<<2))|0);
   var $508=HEAP32[(($507)>>2)];
   var $509=((($505)-($508))|0);
   $val=$509;
   var $510=(($buffer)|0);
   var $511=HEAP32[(($510)>>2)];
   var $512=$j;
   var $513=(($dc_pred+($512<<2))|0);
   HEAP32[(($513)>>2)]=$511;
   var $514=$val;
   var $515=(($514)|(0));
   HEAPF32[(($a)>>2)]=$515;
   var $516=$a;
   var $517=HEAP32[(($516)>>2)];
   var $518=$517 >> 23;
   var $519=$518 & 255;
   var $520=$val;
   var $521=(($520)|(0))!=0;
   var $522=$521 ? -1 : 0;
   var $523=126 & $522;
   var $524=((($519)-($523))|0);
   $cat=$524;
   var $525=(($10+1028)|0);
   var $526=$525;
   var $527=$cat;
   var $528=$is_chroma;
   var $529=(($huff_dc_tab+($528<<6))|0);
   var $530=(($529)|0);
   __ZN11WMBitStream7PutHuffEiPKm($526, $527, $530);
   var $531=(($10+1028)|0);
   var $532=$531;
   var $533=$val;
   var $534=$val;
   var $535=(($534)|(0)) < 0;
   var $536=$535 ? 1 : 0;
   var $537=((($533)-($536))|0);
   var $538=$cat;
   __ZN11WMBitStream3PutEii($532, $537, $538);
   $j=1;
   label = 81; break;
  case 81: 
   var $540=$j;
   var $541=(($540)|(0)) < 64;
   if ($541) { label = 82; break; } else { label = 90; break; }
  case 82: 
   var $543=$j;
   var $544=((21032+$543)|0);
   var $545=HEAP8[($544)];
   var $546=(($545)&(255));
   var $547=(($buffer+($546<<2))|0);
   var $548=HEAP32[(($547)>>2)];
   $val=$548;
   var $549=$val;
   var $550=(($549)|(0))==0;
   if ($550) { label = 83; break; } else { label = 84; break; }
  case 83: 
   var $552=$run;
   var $553=((($552)+(1))|0);
   $run=$553;
   label = 88; break;
  case 84: 
   label = 85; break;
  case 85: 
   var $556=$run;
   var $557=(($556)|(0)) >= 16;
   if ($557) { label = 86; break; } else { label = 87; break; }
  case 86: 
   var $559=(($10+1028)|0);
   var $560=$559;
   var $561=$htable2;
   __ZN11WMBitStream7PutHuffEiPKm($560, 240, $561);
   var $562=$run;
   var $563=((($562)-(16))|0);
   $run=$563;
   label = 85; break;
  case 87: 
   var $565=$val;
   var $566=(($565)|(0));
   HEAPF32[(($a3)>>2)]=$566;
   var $567=$a3;
   var $568=HEAP32[(($567)>>2)];
   var $569=$568 >> 23;
   var $570=$569 & 255;
   var $571=$val;
   var $572=(($571)|(0))!=0;
   var $573=$572 ? -1 : 0;
   var $574=126 & $573;
   var $575=((($570)-($574))|0);
   $cat4=$575;
   var $576=(($10+1028)|0);
   var $577=$576;
   var $578=$cat4;
   var $579=$run;
   var $580=($579<<4);
   var $581=((($578)+($580))|0);
   var $582=$htable2;
   __ZN11WMBitStream7PutHuffEiPKm($577, $581, $582);
   var $583=(($10+1028)|0);
   var $584=$583;
   var $585=$val;
   var $586=$val;
   var $587=(($586)|(0)) < 0;
   var $588=$587 ? 1 : 0;
   var $589=((($585)-($588))|0);
   var $590=$cat4;
   __ZN11WMBitStream3PutEii($584, $589, $590);
   $run=0;
   label = 88; break;
  case 88: 
   label = 89; break;
  case 89: 
   var $593=$j;
   var $594=((($593)+(1))|0);
   $j=$594;
   label = 81; break;
  case 90: 
   var $596=$run;
   var $597=(($596)|(0))!=0;
   if ($597) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $599=(($10+1028)|0);
   var $600=$599;
   var $601=$htable2;
   __ZN11WMBitStream7PutHuffEiPKm($600, 0, $601);
   label = 92; break;
  case 92: 
   label = 93; break;
  case 93: 
   var $604=$i;
   var $605=((($604)+(1))|0);
   $i=$605;
   label = 79; break;
  case 94: 
   label = 95; break;
  case 95: 
   var $608=$x_step;
   var $609=$x;
   var $610=((($609)+($608))|0);
   $x=$610;
   label = 52; break;
  case 96: 
   label = 97; break;
  case 97: 
   var $613=$y_step;
   var $614=$y;
   var $615=((($614)+($613))|0);
   $y=$615;
   var $616=$y_step;
   var $617=$5;
   var $618=(Math.imul($616,$617)|0);
   var $619=$4;
   var $620=(($619+$618)|0);
   $4=$620;
   label = 50; break;
  case 98: 
   var $622=(($10+1028)|0);
   __ZN14WJpegBitStream5FlushEv($622);
   var $623=$lowstrm;
   __ZN12WMByteStream7PutWordEi($623, 65497);
   var $624=(($10+1028)|0);
   __ZN14WJpegBitStream5CloseEv($624);
   $2=1;
   label = 99; break;
  case 99: 
   var $626=$2;
   STACKTOP = sp;
   return $626;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL11aan_fdct8x8PiS_iPKi($src, $dst, $step, $postscale) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $workspace=sp;
   var $work;
   var $i;
   var $x0;
   var $x1;
   var $x2;
   var $x3;
   var $x4;
   var $x01;
   var $x12;
   var $x23;
   var $x34;
   var $x45;
   $1=$src;
   $2=$dst;
   $3=$step;
   $4=$postscale;
   var $5=(($workspace)|0);
   $work=$5;
   $i=8;
   label = 2; break;
  case 2: 
   var $7=$i;
   var $8=(($7)|(0)) > 0;
   if ($8) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $10=$1;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   $x0=$12;
   var $13=$1;
   var $14=(($13+28)|0);
   var $15=HEAP32[(($14)>>2)];
   $x1=$15;
   var $16=$1;
   var $17=(($16+12)|0);
   var $18=HEAP32[(($17)>>2)];
   $x2=$18;
   var $19=$1;
   var $20=(($19+16)|0);
   var $21=HEAP32[(($20)>>2)];
   $x3=$21;
   var $22=$x0;
   var $23=$x1;
   var $24=((($22)+($23))|0);
   $x4=$24;
   var $25=$x1;
   var $26=$x0;
   var $27=((($26)-($25))|0);
   $x0=$27;
   var $28=$x2;
   var $29=$x3;
   var $30=((($28)+($29))|0);
   $x1=$30;
   var $31=$x3;
   var $32=$x2;
   var $33=((($32)-($31))|0);
   $x2=$33;
   var $34=$x0;
   var $35=$work;
   var $36=(($35+28)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=$x2;
   var $38=$work;
   var $39=(($38+4)|0);
   HEAP32[(($39)>>2)]=$37;
   var $40=$x4;
   var $41=$x1;
   var $42=((($40)+($41))|0);
   $x2=$42;
   var $43=$x1;
   var $44=$x4;
   var $45=((($44)-($43))|0);
   $x4=$45;
   var $46=$1;
   var $47=(($46+4)|0);
   var $48=HEAP32[(($47)>>2)];
   $x0=$48;
   var $49=$1;
   var $50=(($49+24)|0);
   var $51=HEAP32[(($50)>>2)];
   $x3=$51;
   var $52=$x0;
   var $53=$x3;
   var $54=((($52)+($53))|0);
   $x1=$54;
   var $55=$x3;
   var $56=$x0;
   var $57=((($56)-($55))|0);
   $x0=$57;
   var $58=$x0;
   var $59=$work;
   var $60=(($59+20)|0);
   HEAP32[(($60)>>2)]=$58;
   var $61=$1;
   var $62=(($61+8)|0);
   var $63=HEAP32[(($62)>>2)];
   $x0=$63;
   var $64=$1;
   var $65=(($64+20)|0);
   var $66=HEAP32[(($65)>>2)];
   $x3=$66;
   var $67=$x0;
   var $68=$x3;
   var $69=((($67)-($68))|0);
   var $70=$work;
   var $71=(($70+12)|0);
   HEAP32[(($71)>>2)]=$69;
   var $72=$x3;
   var $73=$x0;
   var $74=((($73)+($72))|0);
   $x0=$74;
   var $75=$x0;
   var $76=$x1;
   var $77=((($75)+($76))|0);
   $x3=$77;
   var $78=$x1;
   var $79=$x0;
   var $80=((($79)-($78))|0);
   $x0=$80;
   var $81=$x2;
   var $82=$x3;
   var $83=((($81)+($82))|0);
   $x1=$83;
   var $84=$x3;
   var $85=$x2;
   var $86=((($85)-($84))|0);
   $x2=$86;
   var $87=$x1;
   var $88=$work;
   var $89=(($88)|0);
   HEAP32[(($89)>>2)]=$87;
   var $90=$x2;
   var $91=$work;
   var $92=(($91+16)|0);
   HEAP32[(($92)>>2)]=$90;
   var $93=$x0;
   var $94=$x4;
   var $95=((($93)-($94))|0);
   var $96=((($95)*(11585))&-1);
   var $97=((($96)+(8192))|0);
   var $98=$97 >> 14;
   $x0=$98;
   var $99=$x4;
   var $100=$x0;
   var $101=((($99)+($100))|0);
   $x1=$101;
   var $102=$x0;
   var $103=$x4;
   var $104=((($103)-($102))|0);
   $x4=$104;
   var $105=$x4;
   var $106=$work;
   var $107=(($106+8)|0);
   HEAP32[(($107)>>2)]=$105;
   var $108=$x1;
   var $109=$work;
   var $110=(($109+24)|0);
   HEAP32[(($110)>>2)]=$108;
   var $111=$work;
   var $112=(($111+4)|0);
   var $113=HEAP32[(($112)>>2)];
   $x0=$113;
   var $114=$work;
   var $115=(($114+12)|0);
   var $116=HEAP32[(($115)>>2)];
   $x1=$116;
   var $117=$work;
   var $118=(($117+20)|0);
   var $119=HEAP32[(($118)>>2)];
   $x2=$119;
   var $120=$work;
   var $121=(($120+28)|0);
   var $122=HEAP32[(($121)>>2)];
   $x3=$122;
   var $123=$x1;
   var $124=$x0;
   var $125=((($124)+($123))|0);
   $x0=$125;
   var $126=$x2;
   var $127=$x1;
   var $128=((($127)+($126))|0);
   $x1=$128;
   var $129=$x3;
   var $130=$x2;
   var $131=((($130)+($129))|0);
   $x2=$131;
   var $132=$x1;
   var $133=((($132)*(11585))&-1);
   var $134=((($133)+(8192))|0);
   var $135=$134 >> 14;
   $x1=$135;
   var $136=$x1;
   var $137=$x3;
   var $138=((($136)+($137))|0);
   $x4=$138;
   var $139=$x1;
   var $140=$x3;
   var $141=((($140)-($139))|0);
   $x3=$141;
   var $142=$x0;
   var $143=$x2;
   var $144=((($142)-($143))|0);
   var $145=((($144)*(6270))&-1);
   $x1=$145;
   var $146=$x0;
   var $147=((($146)*(8867))&-1);
   var $148=$x1;
   var $149=((($147)+($148))|0);
   var $150=((($149)+(8192))|0);
   var $151=$150 >> 14;
   $x0=$151;
   var $152=$x2;
   var $153=((($152)*(21407))&-1);
   var $154=$x1;
   var $155=((($153)+($154))|0);
   var $156=((($155)+(8192))|0);
   var $157=$156 >> 14;
   $x2=$157;
   var $158=$x0;
   var $159=$x3;
   var $160=((($158)+($159))|0);
   $x1=$160;
   var $161=$x0;
   var $162=$x3;
   var $163=((($162)-($161))|0);
   $x3=$163;
   var $164=$x4;
   var $165=$x2;
   var $166=((($164)+($165))|0);
   $x0=$166;
   var $167=$x2;
   var $168=$x4;
   var $169=((($168)-($167))|0);
   $x4=$169;
   var $170=$x1;
   var $171=$work;
   var $172=(($171+20)|0);
   HEAP32[(($172)>>2)]=$170;
   var $173=$x0;
   var $174=$work;
   var $175=(($174+4)|0);
   HEAP32[(($175)>>2)]=$173;
   var $176=$x4;
   var $177=$work;
   var $178=(($177+28)|0);
   HEAP32[(($178)>>2)]=$176;
   var $179=$x3;
   var $180=$work;
   var $181=(($180+12)|0);
   HEAP32[(($181)>>2)]=$179;
   label = 4; break;
  case 4: 
   var $183=$i;
   var $184=((($183)-(1))|0);
   $i=$184;
   var $185=$3;
   var $186=$1;
   var $187=(($186+($185<<2))|0);
   $1=$187;
   var $188=$work;
   var $189=(($188+32)|0);
   $work=$189;
   label = 2; break;
  case 5: 
   var $191=(($workspace)|0);
   $work=$191;
   $i=8;
   label = 6; break;
  case 6: 
   var $193=$i;
   var $194=(($193)|(0)) > 0;
   if ($194) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $196=$work;
   var $197=(($196)|0);
   var $198=HEAP32[(($197)>>2)];
   $x01=$198;
   var $199=$work;
   var $200=(($199+224)|0);
   var $201=HEAP32[(($200)>>2)];
   $x12=$201;
   var $202=$work;
   var $203=(($202+96)|0);
   var $204=HEAP32[(($203)>>2)];
   $x23=$204;
   var $205=$work;
   var $206=(($205+128)|0);
   var $207=HEAP32[(($206)>>2)];
   $x34=$207;
   var $208=$x01;
   var $209=$x12;
   var $210=((($208)+($209))|0);
   $x45=$210;
   var $211=$x12;
   var $212=$x01;
   var $213=((($212)-($211))|0);
   $x01=$213;
   var $214=$x23;
   var $215=$x34;
   var $216=((($214)+($215))|0);
   $x12=$216;
   var $217=$x34;
   var $218=$x23;
   var $219=((($218)-($217))|0);
   $x23=$219;
   var $220=$x01;
   var $221=$work;
   var $222=(($221+224)|0);
   HEAP32[(($222)>>2)]=$220;
   var $223=$x23;
   var $224=$work;
   var $225=(($224)|0);
   HEAP32[(($225)>>2)]=$223;
   var $226=$x45;
   var $227=$x12;
   var $228=((($226)+($227))|0);
   $x23=$228;
   var $229=$x12;
   var $230=$x45;
   var $231=((($230)-($229))|0);
   $x45=$231;
   var $232=$work;
   var $233=(($232+32)|0);
   var $234=HEAP32[(($233)>>2)];
   $x01=$234;
   var $235=$work;
   var $236=(($235+192)|0);
   var $237=HEAP32[(($236)>>2)];
   $x34=$237;
   var $238=$x01;
   var $239=$x34;
   var $240=((($238)+($239))|0);
   $x12=$240;
   var $241=$x34;
   var $242=$x01;
   var $243=((($242)-($241))|0);
   $x01=$243;
   var $244=$x01;
   var $245=$work;
   var $246=(($245+128)|0);
   HEAP32[(($246)>>2)]=$244;
   var $247=$work;
   var $248=(($247+64)|0);
   var $249=HEAP32[(($248)>>2)];
   $x01=$249;
   var $250=$work;
   var $251=(($250+160)|0);
   var $252=HEAP32[(($251)>>2)];
   $x34=$252;
   var $253=$x01;
   var $254=$x34;
   var $255=((($253)-($254))|0);
   var $256=$work;
   var $257=(($256+96)|0);
   HEAP32[(($257)>>2)]=$255;
   var $258=$x34;
   var $259=$x01;
   var $260=((($259)+($258))|0);
   $x01=$260;
   var $261=$x01;
   var $262=$x12;
   var $263=((($261)+($262))|0);
   $x34=$263;
   var $264=$x12;
   var $265=$x01;
   var $266=((($265)-($264))|0);
   $x01=$266;
   var $267=$x23;
   var $268=$x34;
   var $269=((($267)+($268))|0);
   $x12=$269;
   var $270=$x34;
   var $271=$x23;
   var $272=((($271)-($270))|0);
   $x23=$272;
   var $273=$x12;
   var $274=$4;
   var $275=(($274)|0);
   var $276=HEAP32[(($275)>>2)];
   var $277=(Math.imul($273,$276)|0);
   var $278=((($277)+(8192))|0);
   var $279=$278 >> 14;
   var $280=$2;
   var $281=(($280)|0);
   HEAP32[(($281)>>2)]=$279;
   var $282=$x23;
   var $283=$4;
   var $284=(($283+16)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=(Math.imul($282,$285)|0);
   var $287=((($286)+(8192))|0);
   var $288=$287 >> 14;
   var $289=$2;
   var $290=(($289+16)|0);
   HEAP32[(($290)>>2)]=$288;
   var $291=$x01;
   var $292=$x45;
   var $293=((($291)-($292))|0);
   var $294=((($293)*(11585))&-1);
   var $295=((($294)+(8192))|0);
   var $296=$295 >> 14;
   $x01=$296;
   var $297=$x45;
   var $298=$x01;
   var $299=((($297)+($298))|0);
   $x12=$299;
   var $300=$x01;
   var $301=$x45;
   var $302=((($301)-($300))|0);
   $x45=$302;
   var $303=$x45;
   var $304=$4;
   var $305=(($304+8)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(Math.imul($303,$306)|0);
   var $308=((($307)+(8192))|0);
   var $309=$308 >> 14;
   var $310=$2;
   var $311=(($310+8)|0);
   HEAP32[(($311)>>2)]=$309;
   var $312=$x12;
   var $313=$4;
   var $314=(($313+24)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=(Math.imul($312,$315)|0);
   var $317=((($316)+(8192))|0);
   var $318=$317 >> 14;
   var $319=$2;
   var $320=(($319+24)|0);
   HEAP32[(($320)>>2)]=$318;
   var $321=$work;
   var $322=(($321)|0);
   var $323=HEAP32[(($322)>>2)];
   $x01=$323;
   var $324=$work;
   var $325=(($324+96)|0);
   var $326=HEAP32[(($325)>>2)];
   $x12=$326;
   var $327=$work;
   var $328=(($327+128)|0);
   var $329=HEAP32[(($328)>>2)];
   $x23=$329;
   var $330=$work;
   var $331=(($330+224)|0);
   var $332=HEAP32[(($331)>>2)];
   $x34=$332;
   var $333=$x12;
   var $334=$x01;
   var $335=((($334)+($333))|0);
   $x01=$335;
   var $336=$x23;
   var $337=$x12;
   var $338=((($337)+($336))|0);
   $x12=$338;
   var $339=$x34;
   var $340=$x23;
   var $341=((($340)+($339))|0);
   $x23=$341;
   var $342=$x12;
   var $343=((($342)*(11585))&-1);
   var $344=((($343)+(8192))|0);
   var $345=$344 >> 14;
   $x12=$345;
   var $346=$x12;
   var $347=$x34;
   var $348=((($346)+($347))|0);
   $x45=$348;
   var $349=$x12;
   var $350=$x34;
   var $351=((($350)-($349))|0);
   $x34=$351;
   var $352=$x01;
   var $353=$x23;
   var $354=((($352)-($353))|0);
   var $355=((($354)*(6270))&-1);
   $x12=$355;
   var $356=$x01;
   var $357=((($356)*(8867))&-1);
   var $358=$x12;
   var $359=((($357)+($358))|0);
   var $360=((($359)+(8192))|0);
   var $361=$360 >> 14;
   $x01=$361;
   var $362=$x23;
   var $363=((($362)*(21407))&-1);
   var $364=$x12;
   var $365=((($363)+($364))|0);
   var $366=((($365)+(8192))|0);
   var $367=$366 >> 14;
   $x23=$367;
   var $368=$x01;
   var $369=$x34;
   var $370=((($368)+($369))|0);
   $x12=$370;
   var $371=$x01;
   var $372=$x34;
   var $373=((($372)-($371))|0);
   $x34=$373;
   var $374=$x45;
   var $375=$x23;
   var $376=((($374)+($375))|0);
   $x01=$376;
   var $377=$x23;
   var $378=$x45;
   var $379=((($378)-($377))|0);
   $x45=$379;
   var $380=$x12;
   var $381=$4;
   var $382=(($381+20)|0);
   var $383=HEAP32[(($382)>>2)];
   var $384=(Math.imul($380,$383)|0);
   var $385=((($384)+(8192))|0);
   var $386=$385 >> 14;
   var $387=$2;
   var $388=(($387+20)|0);
   HEAP32[(($388)>>2)]=$386;
   var $389=$x01;
   var $390=$4;
   var $391=(($390+4)|0);
   var $392=HEAP32[(($391)>>2)];
   var $393=(Math.imul($389,$392)|0);
   var $394=((($393)+(8192))|0);
   var $395=$394 >> 14;
   var $396=$2;
   var $397=(($396+4)|0);
   HEAP32[(($397)>>2)]=$395;
   var $398=$x45;
   var $399=$4;
   var $400=(($399+28)|0);
   var $401=HEAP32[(($400)>>2)];
   var $402=(Math.imul($398,$401)|0);
   var $403=((($402)+(8192))|0);
   var $404=$403 >> 14;
   var $405=$2;
   var $406=(($405+28)|0);
   HEAP32[(($406)>>2)]=$404;
   var $407=$x34;
   var $408=$4;
   var $409=(($408+12)|0);
   var $410=HEAP32[(($409)>>2)];
   var $411=(Math.imul($407,$410)|0);
   var $412=((($411)+(8192))|0);
   var $413=$412 >> 14;
   var $414=$2;
   var $415=(($414+12)|0);
   HEAP32[(($415)>>2)]=$413;
   label = 8; break;
  case 8: 
   var $417=$i;
   var $418=((($417)-(1))|0);
   $i=$418;
   var $419=$work;
   var $420=(($419+4)|0);
   $work=$420;
   var $421=$4;
   var $422=(($421+32)|0);
   $4=$422;
   var $423=$2;
   var $424=(($423+32)|0);
   $2=$424;
   label = 6; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WMByteStreamC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN12WLByteStreamC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((19216)|0);
 return;
}
function __ZN12RMByteStreamC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN12RLByteStreamC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((19312)|0);
 return;
}
function __ZN11RLBitStreamC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN11RBaseStreamC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((19552)|0);
 return;
}
function __ZN8GrFmtPxMC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((18568)|0);
 var $5=$2;
 var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=3;
 var $7=$2;
 var $8=(($7+12)|0);
 HEAP32[(($8)>>2)]=((36856)|0);
 var $9=$2;
 var $10=(($9+4)|0);
 HEAP32[(($10)>>2)]=((12808)|0);
 return;
}
function __ZN8GrFmtPxMD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN8GrFmtPxMD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN8GrFmtPxMD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryD2Ev($3);
 return;
}
function __ZN8GrFmtPxM14CheckSignatureEPKc($this, $signature) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$signature;
   var $3=$1;
   var $4=$2;
   var $5=(($4)|0);
   var $6=HEAP8[($5)];
   var $7=(($6 << 24) >> 24);
   var $8=(($7)|(0))==80;
   if ($8) { label = 2; break; } else { var $29 = 0;label = 5; break; }
  case 2: 
   var $10=$2;
   var $11=(($10+1)|0);
   var $12=HEAP8[($11)];
   var $13=(($12 << 24) >> 24);
   var $14=49 <= (($13)|(0));
   if ($14) { label = 3; break; } else { var $29 = 0;label = 5; break; }
  case 3: 
   var $16=$2;
   var $17=(($16+1)|0);
   var $18=HEAP8[($17)];
   var $19=(($18 << 24) >> 24);
   var $20=(($19)|(0)) <= 54;
   if ($20) { label = 4; break; } else { var $29 = 0;label = 5; break; }
  case 4: 
   var $22=$2;
   var $23=(($22+2)|0);
   var $24=HEAP8[($23)];
   var $25=(($24 << 24) >> 24);
   var $26=_isspace($25);
   var $27=(($26)|(0))!=0;
   var $29 = $27;label = 5; break;
  case 5: 
   var $29;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN8GrFmtPxM9NewReaderEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(2164);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtPxMReaderC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN8GrFmtPxM9NewWriterEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(1060);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtPxMWriterC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtPxMReaderD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtPxMReaderD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtPxMReader5CloseEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1048)|0);
 var $4=$3;
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($4);
 return;
}
function __ZN14GrFmtPxMReaderC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtReaderC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((19104)|0);
   var $9=(($5+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN12RLByteStreamC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=(($5+1124)|0);
   var $12=(($5+2152)|0);
   HEAP32[(($12)>>2)]=-1;
   return;
  case 3: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   var $15=$14$0;
   $3=$15;
   var $16=$14$1;
   $4=$16;
   var $17=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $20=$3;
   var $21=$4;
   var $22$0=$20;
   var $22$1=0;
   var $23$0=$22$0;
   var $23$1=$21;
   ___resumeException($23$0)
  case 6: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1,0); $25$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtPxMReaderD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((19104)|0);
   var $6=(($4+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$4;
   __ZN11GrFmtReaderD2Ev($8);
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtPxMReader10ReadHeaderEv($this) {
 var label = 0;
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"3": function(value) { label = 27; $20 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $result;
   var $code;
   $2=$this;
   var $3=$2;
   $result=0;
   var $4=(($3+1048)|0);
   var $5=$4;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$3;
   var $11=(($10+20)|0);
   var $12=(($11)|0);
   var $13=FUNCTION_TABLE[$9]($5, $12);
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 26; break;
  case 3: 
   var $16=(($3+1048)|0);
   var $17=$16;
   var $18=__ZN11RBaseStream6JmpBufEv($17);
   var $19=(($18)|0);
   var $20=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($19)>>2)]=tempInt, 0);
   label = 27; break;
  case 27: 
   var $21=(($20)|(0))==0;
   if ($21) { label = 4; break; } else { label = 23; break; }
  case 4: 
   var $23=(($3+1048)|0);
   var $24=__ZN12RLByteStream7GetByteEv($23);
   $code=$24;
   var $25=$code;
   var $26=(($25)|(0))!=80;
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 22; break;
  case 6: 
   var $29=(($3+1048)|0);
   var $30=__ZN12RLByteStream7GetByteEv($29);
   $code=$30;
   var $31=$code;
   if ((($31)|(0))==49 | (($31)|(0))==52) {
    label = 7; break;
   }
   else if ((($31)|(0))==50 | (($31)|(0))==53) {
    label = 8; break;
   }
   else if ((($31)|(0))==51 | (($31)|(0))==54) {
    label = 9; break;
   }
   else {
   label = 10; break;
   }
  case 7: 
   var $33=(($3+2148)|0);
   HEAP32[(($33)>>2)]=1;
   label = 11; break;
  case 8: 
   var $35=(($3+2148)|0);
   HEAP32[(($35)>>2)]=8;
   label = 11; break;
  case 9: 
   var $37=(($3+2148)|0);
   HEAP32[(($37)>>2)]=24;
   label = 11; break;
  case 10: 
   label = 22; break;
  case 11: 
   var $40=$code;
   var $41=(($40)|(0)) >= 52;
   var $42=(($3+2156)|0);
   var $43=(($41)&(1));
   HEAP8[($42)]=$43;
   var $44=(($3+2148)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0)) > 8;
   var $47=$3;
   var $48=(($47+4)|0);
   var $49=(($46)&(1));
   HEAP8[($48)]=$49;
   var $50=(($3+1048)|0);
   var $51=__ZL10ReadNumberR12RLByteStreami($50, 2147483647);
   var $52=$3;
   var $53=(($52+8)|0);
   HEAP32[(($53)>>2)]=$51;
   var $54=(($3+1048)|0);
   var $55=__ZL10ReadNumberR12RLByteStreami($54, 2147483647);
   var $56=$3;
   var $57=(($56+12)|0);
   HEAP32[(($57)>>2)]=$55;
   var $58=(($3+2148)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59)|(0))==1;
   if ($60) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $66 = 1;label = 14; break;
  case 13: 
   var $63=(($3+1048)|0);
   var $64=__ZL10ReadNumberR12RLByteStreami($63, 2147483647);
   var $66 = $64;label = 14; break;
  case 14: 
   var $66;
   var $67=(($3+2160)|0);
   HEAP32[(($67)>>2)]=$66;
   var $68=(($3+2160)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69)|(0)) > 255;
   if ($70) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $72=(($3+2156)|0);
   HEAP8[($72)]=0;
   label = 16; break;
  case 16: 
   var $74=$3;
   var $75=(($74+8)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76)|(0)) > 0;
   if ($77) { label = 17; break; } else { label = 21; break; }
  case 17: 
   var $79=$3;
   var $80=(($79+12)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)|(0)) > 0;
   if ($82) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $84=(($3+2160)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0)) > 0;
   if ($86) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $88=(($3+2160)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89)|(0)) < 65536;
   if ($90) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $92=(($3+1048)|0);
   var $93=$92;
   var $94=__ZN11RBaseStream6GetPosEv($93);
   var $95=(($3+2152)|0);
   HEAP32[(($95)>>2)]=$94;
   $result=1;
   label = 21; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $99=$result;
   var $100=(($99) & 1);
   if ($100) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $102=(($3+2152)|0);
   HEAP32[(($102)>>2)]=-1;
   var $103=$3;
   var $104=(($103+12)|0);
   HEAP32[(($104)>>2)]=-1;
   var $105=$3;
   var $106=(($105+8)|0);
   HEAP32[(($106)>>2)]=-1;
   var $107=(($3+1048)|0);
   var $108=$107;
   var $109=$108;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+12)|0);
   var $112=HEAP32[(($111)>>2)];
   FUNCTION_TABLE[$112]($108);
   label = 25; break;
  case 25: 
   var $114=$result;
   var $115=(($114) & 1);
   $1=$115;
   label = 26; break;
  case 26: 
   var $117=$1;
   return $117;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZL10ReadNumberR12RLByteStreami($strm, $maxdigits) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $code;
   var $val;
   var $digits;
   $1=$strm;
   $2=$maxdigits;
   $val=0;
   $digits=0;
   var $3=$1;
   var $4=__ZN12RLByteStream7GetByteEv($3);
   $code=$4;
   var $5=$code;
   var $6=_isdigit($5);
   var $7=(($6)|(0))!=0;
   if ($7) { label = 16; break; } else { label = 2; break; }
  case 2: 
   label = 3; break;
  case 3: 
   var $10=$code;
   var $11=(($10)|(0))==35;
   if ($11) { label = 4; break; } else { label = 10; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $14=$1;
   var $15=__ZN12RLByteStream7GetByteEv($14);
   $code=$15;
   label = 6; break;
  case 6: 
   var $17=$code;
   var $18=(($17)|(0))!=10;
   if ($18) { label = 7; break; } else { var $23 = 0;label = 8; break; }
  case 7: 
   var $20=$code;
   var $21=(($20)|(0))!=13;
   var $23 = $21;label = 8; break;
  case 8: 
   var $23;
   if ($23) { label = 5; break; } else { label = 9; break; }
  case 9: 
   label = 10; break;
  case 10: 
   var $26=$1;
   var $27=__ZN12RLByteStream7GetByteEv($26);
   $code=$27;
   label = 11; break;
  case 11: 
   var $29=$code;
   var $30=_isspace($29);
   var $31=(($30)|(0))!=0;
   if ($31) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $33=$1;
   var $34=__ZN12RLByteStream7GetByteEv($33);
   $code=$34;
   label = 11; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $37=$code;
   var $38=_isdigit($37);
   var $39=(($38)|(0))!=0;
   var $40=$39 ^ 1;
   if ($40) { label = 3; break; } else { label = 15; break; }
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $44=$val;
   var $45=((($44)*(10))&-1);
   var $46=$code;
   var $47=((($45)+($46))|0);
   var $48=((($47)-(48))|0);
   $val=$48;
   var $49=$digits;
   var $50=((($49)+(1))|0);
   $digits=$50;
   var $51=$2;
   var $52=(($50)|(0)) >= (($51)|(0));
   if ($52) { label = 18; break; } else { label = 19; break; }
  case 18: 
   label = 21; break;
  case 19: 
   var $55=$1;
   var $56=__ZN12RLByteStream7GetByteEv($55);
   $code=$56;
   label = 20; break;
  case 20: 
   var $58=$code;
   var $59=_isdigit($58);
   var $60=(($59)|(0))!=0;
   if ($60) { label = 17; break; } else { label = 21; break; }
  case 21: 
   var $62=$val;
   return $62;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtPxMReader8ReadDataEPhii($this, $data, $step, $color) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 13328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"14": function(value) { label = 77; $113 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $buffer_size;
   var $buffer=sp;
   var $pal_buffer=(sp)+(4096);
   var $bgr_buffer=(sp)+(8192);
   var $palette=(sp)+(12288);
   var $result;
   var $src;
   var $gray_palette;
   var $bgr;
   var $src_pitch;
   var $nch;
   var $width3;
   var $i;
   var $x;
   var $y;
   var $code;
   var $6=(sp)+(13312);
   var $7=(sp)+(13320);
   $2=$this;
   $3=$data;
   $4=$step;
   $5=$color;
   var $8=$2;
   $buffer_size=4096;
   $result=0;
   var $9=(($buffer)|0);
   $src=$9;
   var $10=(($pal_buffer)|0);
   $gray_palette=$10;
   var $11=(($bgr_buffer)|0);
   $bgr=$11;
   var $12=$8;
   var $13=(($12+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($8+2148)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(Math.imul($14,$16)|0);
   var $18=((($17)+(7))|0);
   var $19=((((($18)|(0)))/(8))&-1);
   $src_pitch=$19;
   var $20=$8;
   var $21=(($20+4)|0);
   var $22=HEAP8[($21)];
   var $23=(($22) & 1);
   var $24=$23 ? 3 : 1;
   $nch=$24;
   var $25=$8;
   var $26=(($25+8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$nch;
   var $29=(Math.imul($27,$28)|0);
   $width3=$29;
   var $30=(($8+2152)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0)) < 0;
   if ($32) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $34=(($8+1048)|0);
   var $35=$34;
   var $36=__ZN11RBaseStream8IsOpenedEv($35);
   if ($36) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 76; break;
  case 4: 
   var $39=$src_pitch;
   var $40=((($39)+(32))|0);
   var $41=(($40)|(0)) > 4096;
   if ($41) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $43=$width3;
   var $44=((($43)+(32))|0);
   var $45=(($44)|(0)) < 0;
   var $46=$45 ? -1 : $44;
   var $47=__Znaj($46);
   $src=$47;
   label = 6; break;
  case 6: 
   var $49=(($8+2160)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=((($50)+(1))|0);
   var $52=(($51)|(0)) > 4096;
   if ($52) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $54=(($8+2160)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=((($55)+(1))|0);
   var $57=(($56)|(0)) < 0;
   var $58=$57 ? -1 : $56;
   var $59=__Znaj($58);
   $gray_palette=$59;
   label = 8; break;
  case 8: 
   var $61=$8;
   var $62=(($61+8)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=((($63)*(3))&-1);
   var $65=((($64)+(32))|0);
   var $66=(($65)|(0)) > 4096;
   if ($66) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $68=$8;
   var $69=(($68+8)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)*(3))&-1);
   var $72=((($71)+(32))|0);
   var $73=(($72)|(0)) < 0;
   var $74=$73 ? -1 : $72;
   var $75=__Znaj($74);
   $bgr=$75;
   label = 10; break;
  case 10: 
   $i=0;
   label = 11; break;
  case 11: 
   var $78=$i;
   var $79=(($8+2160)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(($78)|(0)) <= (($80)|(0));
   if ($81) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $83=$i;
   var $84=((($83)*(255))&-1);
   var $85=(($8+2160)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=((((($84)|(0)))/((($86)|(0))))&-1);
   var $88=(($8+2148)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89)|(0))==1;
   var $91=$90 ? 255 : 0;
   var $92=$87 ^ $91;
   var $93=(($92) & 255);
   var $94=$i;
   var $95=$gray_palette;
   var $96=(($95+$94)|0);
   HEAP8[($96)]=$93;
   label = 13; break;
  case 13: 
   var $98=$i;
   var $99=((($98)+(1))|0);
   $i=$99;
   label = 11; break;
  case 14: 
   var $101=(($palette)|0);
   var $102=(($8+2148)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0))==1;
   var $105=$104 ? 1 : 8;
   var $106=(($8+2148)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))==1;
   __Z15FillGrayPaletteP12PaletteEntryib($101, $105, $108);
   var $109=(($8+1048)|0);
   var $110=$109;
   var $111=__ZN11RBaseStream6JmpBufEv($110);
   var $112=(($111)|0);
   var $113=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($112)>>2)]=tempInt, 0);
   label = 77; break;
  case 77: 
   var $114=(($113)|(0))==0;
   if ($114) { label = 15; break; } else { label = 63; break; }
  case 15: 
   var $116=(($8+1048)|0);
   var $117=$116;
   var $118=(($8+2152)|0);
   var $119=HEAP32[(($118)>>2)];
   __ZN11RBaseStream6SetPosEi($117, $119);
   var $120=(($8+2148)|0);
   var $121=HEAP32[(($120)>>2)];
   if ((($121)|(0))==1) {
    label = 16; break;
   }
   else if ((($121)|(0))==8 | (($121)|(0))==24) {
    label = 38; break;
   }
   else {
   label = 61; break;
   }
  case 16: 
   var $123=(($8+2156)|0);
   var $124=HEAP8[($123)];
   var $125=(($124) & 1);
   if ($125) { label = 29; break; } else { label = 17; break; }
  case 17: 
   $y=0;
   label = 18; break;
  case 18: 
   var $128=$y;
   var $129=$8;
   var $130=(($129+12)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($128)|(0)) < (($131)|(0));
   if ($132) { label = 19; break; } else { label = 28; break; }
  case 19: 
   $x=0;
   label = 20; break;
  case 20: 
   var $135=$x;
   var $136=$8;
   var $137=(($136+8)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($135)|(0)) < (($138)|(0));
   if ($139) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $141=(($8+1048)|0);
   var $142=__ZL10ReadNumberR12RLByteStreami($141, 1);
   var $143=(($142)|(0))!=0;
   var $144=(($143)&(1));
   var $145=$x;
   var $146=$src;
   var $147=(($146+$145)|0);
   HEAP8[($147)]=$144;
   label = 22; break;
  case 22: 
   var $149=$x;
   var $150=((($149)+(1))|0);
   $x=$150;
   label = 20; break;
  case 23: 
   var $152=$5;
   var $153=(($152)|(0))!=0;
   if ($153) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $155=$3;
   var $156=$src;
   var $157=$8;
   var $158=(($157+8)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($palette)|0);
   var $161=__Z13FillColorRow8PhS_iP12PaletteEntry($155, $156, $159, $160);
   label = 26; break;
  case 25: 
   var $163=$3;
   var $164=$src;
   var $165=$8;
   var $166=(($165+8)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=$gray_palette;
   var $169=__Z12FillGrayRow8PhS_iS_($163, $164, $167, $168);
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $172=$y;
   var $173=((($172)+(1))|0);
   $y=$173;
   var $174=$4;
   var $175=$3;
   var $176=(($175+$174)|0);
   $3=$176;
   label = 18; break;
  case 28: 
   label = 37; break;
  case 29: 
   $y=0;
   label = 30; break;
  case 30: 
   var $180=$y;
   var $181=$8;
   var $182=(($181+12)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($180)|(0)) < (($183)|(0));
   if ($184) { label = 31; break; } else { label = 36; break; }
  case 31: 
   var $186=(($8+1048)|0);
   var $187=$src;
   var $188=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($186, $187, $188, 0);
   var $189=$5;
   var $190=(($189)|(0))!=0;
   if ($190) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $192=$3;
   var $193=$src;
   var $194=$8;
   var $195=(($194+8)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($palette)|0);
   var $198=__Z13FillColorRow1PhS_iP12PaletteEntry($192, $193, $196, $197);
   label = 34; break;
  case 33: 
   var $200=$3;
   var $201=$src;
   var $202=$8;
   var $203=(($202+8)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=$gray_palette;
   var $206=__Z12FillGrayRow1PhS_iS_($200, $201, $204, $205);
   label = 34; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $209=$y;
   var $210=((($209)+(1))|0);
   $y=$210;
   var $211=$4;
   var $212=$3;
   var $213=(($212+$211)|0);
   $3=$213;
   label = 30; break;
  case 36: 
   label = 37; break;
  case 37: 
   $result=1;
   label = 62; break;
  case 38: 
   $y=0;
   label = 39; break;
  case 39: 
   var $218=$y;
   var $219=$8;
   var $220=(($219+12)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=(($218)|(0)) < (($221)|(0));
   if ($222) { label = 40; break; } else { label = 60; break; }
  case 40: 
   var $224=(($8+2156)|0);
   var $225=HEAP8[($224)];
   var $226=(($225) & 1);
   if ($226) { label = 48; break; } else { label = 41; break; }
  case 41: 
   $x=0;
   label = 42; break;
  case 42: 
   var $229=$x;
   var $230=$width3;
   var $231=(($229)|(0)) < (($230)|(0));
   if ($231) { label = 43; break; } else { label = 47; break; }
  case 43: 
   var $233=(($8+1048)|0);
   var $234=__ZL10ReadNumberR12RLByteStreami($233, 2147483647);
   $code=$234;
   var $235=$code;
   var $236=(($8+2160)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=(($235)>>>(0)) > (($237)>>>(0));
   if ($238) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $240=(($8+2160)|0);
   var $241=HEAP32[(($240)>>2)];
   $code=$241;
   label = 45; break;
  case 45: 
   var $243=$code;
   var $244=$gray_palette;
   var $245=(($244+$243)|0);
   var $246=HEAP8[($245)];
   var $247=$x;
   var $248=$src;
   var $249=(($248+$247)|0);
   HEAP8[($249)]=$246;
   label = 46; break;
  case 46: 
   var $251=$x;
   var $252=((($251)+(1))|0);
   $x=$252;
   label = 42; break;
  case 47: 
   label = 49; break;
  case 48: 
   var $255=(($8+1048)|0);
   var $256=$src;
   var $257=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($255, $256, $257, 0);
   label = 49; break;
  case 49: 
   var $259=(($8+2148)|0);
   var $260=HEAP32[(($259)>>2)];
   var $261=(($260)|(0))==8;
   if ($261) { label = 50; break; } else { label = 54; break; }
  case 50: 
   var $263=$5;
   var $264=(($263)|(0))!=0;
   if ($264) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $266=$3;
   var $267=$src;
   var $268=$8;
   var $269=(($268+8)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=(($palette)|0);
   var $272=__Z13FillColorRow8PhS_iP12PaletteEntry($266, $267, $270, $271);
   label = 53; break;
  case 52: 
   var $274=$3;
   var $275=$src;
   var $276=$8;
   var $277=(($276+8)|0);
   var $278=HEAP32[(($277)>>2)];
   assert($278 % 1 === 0);(_memcpy($274, $275, $278)|0);
   label = 53; break;
  case 53: 
   label = 58; break;
  case 54: 
   var $281=$5;
   var $282=(($281)|(0))!=0;
   if ($282) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $284=$src;
   var $285=$3;
   var $286=$8;
   var $287=(($286+8)|0);
   var $288=HEAP32[(($287)>>2)];
   __Z6cvSizeii($6, $288, 1);
   __Z21icvCvt_BGR2RGB_8u_C3RPKhiPhi6CvSize($284, 0, $285, 0, $6);
   label = 57; break;
  case 56: 
   var $290=$src;
   var $291=$3;
   var $292=$8;
   var $293=(($292+8)|0);
   var $294=HEAP32[(($293)>>2)];
   __Z6cvSizeii($7, $294, 1);
   __Z24icvCvt_BGR2Gray_8u_C3C1RPKhiPhi6CvSizei($290, 0, $291, 0, $7, 2);
   label = 57; break;
  case 57: 
   label = 58; break;
  case 58: 
   label = 59; break;
  case 59: 
   var $298=$y;
   var $299=((($298)+(1))|0);
   $y=$299;
   var $300=$4;
   var $301=$3;
   var $302=(($301+$300)|0);
   $3=$302;
   label = 39; break;
  case 60: 
   $result=1;
   label = 62; break;
  case 61: 
   label = 62; break;
  case 62: 
   label = 63; break;
  case 63: 
   var $307=$src;
   var $308=(($buffer)|0);
   var $309=(($307)|(0))!=(($308)|(0));
   if ($309) { label = 64; break; } else { label = 67; break; }
  case 64: 
   var $311=$src;
   var $312=(($311)|(0))==0;
   if ($312) { label = 66; break; } else { label = 65; break; }
  case 65: 
   __ZdaPv($311);
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $316=$bgr;
   var $317=(($bgr_buffer)|0);
   var $318=(($316)|(0))!=(($317)|(0));
   if ($318) { label = 68; break; } else { label = 71; break; }
  case 68: 
   var $320=$bgr;
   var $321=(($320)|(0))==0;
   if ($321) { label = 70; break; } else { label = 69; break; }
  case 69: 
   __ZdaPv($320);
   label = 70; break;
  case 70: 
   label = 71; break;
  case 71: 
   var $325=$gray_palette;
   var $326=(($pal_buffer)|0);
   var $327=(($325)|(0))!=(($326)|(0));
   if ($327) { label = 72; break; } else { label = 75; break; }
  case 72: 
   var $329=$gray_palette;
   var $330=(($329)|(0))==0;
   if ($330) { label = 74; break; } else { label = 73; break; }
  case 73: 
   __ZdaPv($329);
   label = 74; break;
  case 74: 
   label = 75; break;
  case 75: 
   var $334=$result;
   var $335=(($334) & 1);
   $1=$335;
   label = 76; break;
  case 76: 
   var $337=$1;
   STACKTOP = sp;
   return $337;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN14GrFmtPxMWriterD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtPxMWriterD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtPxMWriterC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtWriterC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((19072)|0);
   var $9=(($5+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN12WLByteStreamC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   var $15=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $18=$3;
   var $19=$4;
   var $20$0=$18;
   var $20$1=0;
   var $21$0=$20$0;
   var $21$1=$19;
   ___resumeException($21$0)
  case 6: 
   var $23$0 = ___cxa_find_matching_catch(-1, -1,0); $23$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtPxMWriter10WriteImageEPKhiiiii($this, $data, $step, $width, $height, $0, $_channels) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $isBinary;
   var $result;
   var $channels;
   var $fileStep;
   var $x;
   var $y;
   var $lineLength;
   var $bufferSize;
   var $buffer;
   var $i;
   var $10=sp;
   var $11=(sp)+(8);
   var $ptr;
   $3=$this;
   $4=$data;
   $5=$step;
   $6=$width;
   $7=$height;
   $8=$0;
   $9=$_channels;
   var $12=$3;
   $isBinary=0;
   $result=0;
   var $13=$9;
   var $14=(($13)|(0)) > 1;
   var $15=$14 ? 3 : 1;
   $channels=$15;
   var $16=$6;
   var $17=$channels;
   var $18=(Math.imul($16,$17)|0);
   $fileStep=$18;
   var $19=(($12+1028)|0);
   var $20=$19;
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$12;
   var $26=(($25+4)|0);
   var $27=(($26)|0);
   var $28=FUNCTION_TABLE[$24]($20, $27);
   if ($28) { label = 2; break; } else { label = 41; break; }
  case 2: 
   var $30=$isBinary;
   var $31=(($30) & 1);
   var $32=$31 ? 1 : 4;
   var $33=$channels;
   var $34=(Math.imul($32,$33)|0);
   var $35=$channels;
   var $36=(($35)|(0)) > 1;
   var $37=$36 ? 2 : 0;
   var $38=((($34)+($37))|0);
   var $39=$6;
   var $40=(Math.imul($38,$39)|0);
   var $41=((($40)+(32))|0);
   $lineLength=$41;
   $bufferSize=128;
   $buffer=0;
   var $42=$bufferSize;
   var $43=$lineLength;
   var $44=(($42)|(0)) < (($43)|(0));
   if ($44) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $46=$lineLength;
   $bufferSize=$46;
   label = 4; break;
  case 4: 
   var $48=$bufferSize;
   var $49=(($48)|(0)) < 0;
   var $50=$49 ? -1 : $48;
   var $51=__Znaj($50);
   $buffer=$51;
   var $52=$buffer;
   var $53=(($52)|(0))!=0;
   if ($53) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $55=(($12+1028)|0);
   var $56=$55;
   var $57=$56;
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+12)|0);
   var $60=HEAP32[(($59)>>2)];
   FUNCTION_TABLE[$60]($56);
   $2=0;
   label = 42; break;
  case 6: 
   var $62=HEAP8[(38888)];
   var $63=(($62) & 1);
   if ($63) { label = 12; break; } else { label = 7; break; }
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $66=$i;
   var $67=(($66)|(0)) < 256;
   if ($67) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $69=$i;
   var $70=((37584+((($69)*(5))&-1))|0);
   var $71=(($70)|0);
   var $72=$i;
   var $73=_sprintf($71, ((11872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$72,tempInt));
   label = 10; break;
  case 10: 
   var $75=$i;
   var $76=((($75)+(1))|0);
   $i=$76;
   label = 8; break;
  case 11: 
   HEAP8[(38888)]=1;
   label = 12; break;
  case 12: 
   var $79=$buffer;
   var $80=$channels;
   var $81=(($80)|(0)) > 1;
   var $82=$81 ? 1 : 0;
   var $83=((($82)+(50))|0);
   var $84=$isBinary;
   var $85=(($84) & 1);
   var $86=$85 ? 3 : 0;
   var $87=((($83)+($86))|0);
   var $88=$6;
   var $89=$7;
   var $90=_sprintf($79, ((10856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$87,HEAP32[(((tempInt)+(8))>>2)]=$88,HEAP32[(((tempInt)+(16))>>2)]=$89,tempInt));
   var $91=(($12+1028)|0);
   var $92=$buffer;
   var $93=$buffer;
   var $94=_strlen($93);
   __ZN12WLByteStream8PutBytesEPKvi($91, $92, $94);
   $y=0;
   label = 13; break;
  case 13: 
   var $96=$y;
   var $97=$7;
   var $98=(($96)|(0)) < (($97)|(0));
   if ($98) { label = 14; break; } else { label = 38; break; }
  case 14: 
   var $100=$isBinary;
   var $101=(($100) & 1);
   if ($101) { label = 15; break; } else { label = 24; break; }
  case 15: 
   var $103=$9;
   var $104=(($103)|(0))==3;
   if ($104) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $106=$4;
   var $107=$buffer;
   var $108=$6;
   __Z6cvSizeii($10, $108, 1);
   __Z21icvCvt_BGR2RGB_8u_C3RPKhiPhi6CvSize($106, 0, $107, 0, $10);
   label = 20; break;
  case 17: 
   var $110=$9;
   var $111=(($110)|(0))==4;
   if ($111) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $113=$4;
   var $114=$buffer;
   var $115=$6;
   __Z6cvSizeii($11, $115, 1);
   __Z24icvCvt_BGRA2BGR_8u_C4C3RPKhiPhi6CvSizei($113, 0, $114, 0, $11, 1);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $118=(($12+1028)|0);
   var $119=$channels;
   var $120=(($119)|(0)) > 1;
   if ($120) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $122=$buffer;
   var $126 = $122;label = 23; break;
  case 22: 
   var $124=$4;
   var $126 = $124;label = 23; break;
  case 23: 
   var $126;
   var $127=$fileStep;
   __ZN12WLByteStream8PutBytesEPKvi($118, $126, $127);
   label = 36; break;
  case 24: 
   var $129=$buffer;
   $ptr=$129;
   var $130=$channels;
   var $131=(($130)|(0)) > 1;
   if ($131) { label = 25; break; } else { label = 30; break; }
  case 25: 
   $x=0;
   label = 26; break;
  case 26: 
   var $134=$x;
   var $135=$6;
   var $136=$channels;
   var $137=(Math.imul($135,$136)|0);
   var $138=(($134)|(0)) < (($137)|(0));
   if ($138) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $140=$ptr;
   var $141=$x;
   var $142=((($141)+(2))|0);
   var $143=$4;
   var $144=(($143+$142)|0);
   var $145=HEAP8[($144)];
   var $146=(($145)&(255));
   var $147=((37584+((($146)*(5))&-1))|0);
   var $148=(($147)|0);
   var $149=_strcpy($140, $148);
   var $150=$ptr;
   var $151=(($150+4)|0);
   $ptr=$151;
   var $152=$ptr;
   var $153=$x;
   var $154=((($153)+(1))|0);
   var $155=$4;
   var $156=(($155+$154)|0);
   var $157=HEAP8[($156)];
   var $158=(($157)&(255));
   var $159=((37584+((($158)*(5))&-1))|0);
   var $160=(($159)|0);
   var $161=_strcpy($152, $160);
   var $162=$ptr;
   var $163=(($162+4)|0);
   $ptr=$163;
   var $164=$ptr;
   var $165=$x;
   var $166=$4;
   var $167=(($166+$165)|0);
   var $168=HEAP8[($167)];
   var $169=(($168)&(255));
   var $170=((37584+((($169)*(5))&-1))|0);
   var $171=(($170)|0);
   var $172=_strcpy($164, $171);
   var $173=$ptr;
   var $174=(($173+4)|0);
   $ptr=$174;
   var $175=$ptr;
   var $176=(($175+1)|0);
   $ptr=$176;
   HEAP8[($175)]=32;
   var $177=$ptr;
   var $178=(($177+1)|0);
   $ptr=$178;
   HEAP8[($177)]=32;
   label = 28; break;
  case 28: 
   var $180=$channels;
   var $181=$x;
   var $182=((($181)+($180))|0);
   $x=$182;
   label = 26; break;
  case 29: 
   label = 35; break;
  case 30: 
   $x=0;
   label = 31; break;
  case 31: 
   var $186=$x;
   var $187=$6;
   var $188=(($186)|(0)) < (($187)|(0));
   if ($188) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $190=$ptr;
   var $191=$x;
   var $192=$4;
   var $193=(($192+$191)|0);
   var $194=HEAP8[($193)];
   var $195=(($194)&(255));
   var $196=((37584+((($195)*(5))&-1))|0);
   var $197=(($196)|0);
   var $198=_strcpy($190, $197);
   var $199=$ptr;
   var $200=(($199+4)|0);
   $ptr=$200;
   label = 33; break;
  case 33: 
   var $202=$x;
   var $203=((($202)+(1))|0);
   $x=$203;
   label = 31; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $206=$ptr;
   var $207=(($206+1)|0);
   $ptr=$207;
   HEAP8[($206)]=10;
   var $208=(($12+1028)|0);
   var $209=$buffer;
   var $210=$ptr;
   var $211=$buffer;
   var $212=$210;
   var $213=$211;
   var $214=((($212)-($213))|0);
   __ZN12WLByteStream8PutBytesEPKvi($208, $209, $214);
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   var $217=$y;
   var $218=((($217)+(1))|0);
   $y=$218;
   var $219=$5;
   var $220=$4;
   var $221=(($220+$219)|0);
   $4=$221;
   label = 13; break;
  case 38: 
   var $223=$buffer;
   var $224=(($223)|(0))==0;
   if ($224) { label = 40; break; } else { label = 39; break; }
  case 39: 
   __ZdaPv($223);
   label = 40; break;
  case 40: 
   var $227=(($12+1028)|0);
   var $228=$227;
   var $229=$228;
   var $230=HEAP32[(($229)>>2)];
   var $231=(($230+12)|0);
   var $232=HEAP32[(($231)>>2)];
   FUNCTION_TABLE[$232]($228);
   $result=1;
   label = 41; break;
  case 41: 
   var $234=$result;
   var $235=(($234) & 1);
   $2=$235;
   label = 42; break;
  case 42: 
   var $237=$2;
   STACKTOP = sp;
   return $237;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtSunRasterC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((19032)|0);
 var $5=$2;
 var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=4;
 var $7=HEAP32[((23096)>>2)];
 var $8=$2;
 var $9=(($8+12)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$2;
 var $11=(($10+4)|0);
 HEAP32[(($11)>>2)]=((8136)|0);
 return;
}
function __ZN14GrFmtSunRasterD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN14GrFmtSunRasterD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtSunRasterD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryD2Ev($3);
 return;
}
function __ZN14GrFmtSunRaster9NewReaderEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(2168);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN20GrFmtSunRasterReaderC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN14GrFmtSunRaster9NewWriterEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(1060);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN20GrFmtSunRasterWriterC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20GrFmtSunRasterReaderD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN20GrFmtSunRasterReaderD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20GrFmtSunRasterReader5CloseEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1048)|0);
 var $4=$3;
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($4);
 return;
}
function __ZN14GrFmtPxMWriterD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((19072)|0);
   var $6=(($4+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$4;
   __ZN11GrFmtWriterD2Ev($8);
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20GrFmtSunRasterReaderC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtReaderC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((18680)|0);
   var $9=(($5+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN12RMByteStreamC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=(($5+1124)|0);
   var $12=(($5+2152)|0);
   HEAP32[(($12)>>2)]=-1;
   return;
  case 3: 
   var $14$0 = ___cxa_find_matching_catch(-1, -1); $14$1 = tempRet0;
   var $15=$14$0;
   $3=$15;
   var $16=$14$1;
   $4=$16;
   var $17=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $20=$3;
   var $21=$4;
   var $22$0=$20;
   var $22$1=0;
   var $23$0=$22$0;
   var $23$1=$21;
   ___resumeException($23$0)
  case 6: 
   var $25$0 = ___cxa_find_matching_catch(-1, -1,0); $25$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20GrFmtSunRasterReaderD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((18680)|0);
   var $6=(($4+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$4;
   __ZN11GrFmtReaderD2Ev($8);
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20GrFmtSunRasterReader10ReadHeaderEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 776)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"3": function(value) { label = 37; $20 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $result;
   var $palSize;
   var $readed=sp;
   var $buffer=(sp)+(8);
   var $i;
   $2=$this;
   var $3=$2;
   $result=0;
   var $4=(($3+1048)|0);
   var $5=$4;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$3;
   var $11=(($10+20)|0);
   var $12=(($11)|0);
   var $13=FUNCTION_TABLE[$9]($5, $12);
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 36; break;
  case 3: 
   var $16=(($3+1048)|0);
   var $17=$16;
   var $18=__ZN11RBaseStream6JmpBufEv($17);
   var $19=(($18)|0);
   var $20=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($19)>>2)]=tempInt, 0);
   label = 37; break;
  case 37: 
   var $21=(($20)|(0))==0;
   if ($21) { label = 4; break; } else { label = 33; break; }
  case 4: 
   var $23=(($3+1048)|0);
   var $24=$23;
   __ZN11RBaseStream4SkipEi($24, 4);
   var $25=(($3+1048)|0);
   var $26=__ZN12RMByteStream8GetDWordEv($25);
   var $27=$3;
   var $28=(($27+8)|0);
   HEAP32[(($28)>>2)]=$26;
   var $29=(($3+1048)|0);
   var $30=__ZN12RMByteStream8GetDWordEv($29);
   var $31=$3;
   var $32=(($31+12)|0);
   HEAP32[(($32)>>2)]=$30;
   var $33=(($3+1048)|0);
   var $34=__ZN12RMByteStream8GetDWordEv($33);
   var $35=(($3+2148)|0);
   HEAP32[(($35)>>2)]=$34;
   var $36=(($3+2148)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=1 << $37;
   var $39=((($38)*(3))&-1);
   $palSize=$39;
   var $40=(($3+1048)|0);
   var $41=$40;
   __ZN11RBaseStream4SkipEi($41, 4);
   var $42=(($3+1048)|0);
   var $43=__ZN12RMByteStream8GetDWordEv($42);
   var $44=(($3+2156)|0);
   HEAP32[(($44)>>2)]=$43;
   var $45=(($3+1048)|0);
   var $46=__ZN12RMByteStream8GetDWordEv($45);
   var $47=(($3+2160)|0);
   HEAP32[(($47)>>2)]=$46;
   var $48=(($3+1048)|0);
   var $49=__ZN12RMByteStream8GetDWordEv($48);
   var $50=(($3+2164)|0);
   HEAP32[(($50)>>2)]=$49;
   var $51=$3;
   var $52=(($51+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53)|(0)) > 0;
   if ($54) { label = 5; break; } else { label = 32; break; }
  case 5: 
   var $56=$3;
   var $57=(($56+12)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0)) > 0;
   if ($59) { label = 6; break; } else { label = 32; break; }
  case 6: 
   var $61=(($3+2148)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))==1;
   if ($63) { label = 10; break; } else { label = 7; break; }
  case 7: 
   var $65=(($3+2148)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66)|(0))==8;
   if ($67) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $69=(($3+2148)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))==24;
   if ($71) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $73=(($3+2148)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74)|(0))==32;
   if ($75) { label = 10; break; } else { label = 32; break; }
  case 10: 
   var $77=(($3+2156)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78)|(0))==0;
   if ($79) { label = 15; break; } else { label = 11; break; }
  case 11: 
   var $81=(($3+2156)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=(($82)|(0))==1;
   if ($83) { label = 15; break; } else { label = 12; break; }
  case 12: 
   var $85=(($3+2156)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86)|(0))==2;
   if ($87) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $89=(($3+2148)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))==8;
   if ($91) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $93=(($3+2156)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94)|(0))==3;
   if ($95) { label = 15; break; } else { label = 32; break; }
  case 15: 
   var $97=(($3+2160)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98)|(0))==0;
   if ($99) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $101=(($3+2164)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))==0;
   if ($103) { label = 20; break; } else { label = 17; break; }
  case 17: 
   var $105=(($3+2160)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106)|(0))==1;
   if ($107) { label = 18; break; } else { label = 32; break; }
  case 18: 
   var $109=(($3+2164)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=$palSize;
   var $112=(($110)|(0)) <= (($111)|(0));
   if ($112) { label = 19; break; } else { label = 32; break; }
  case 19: 
   var $114=(($3+2148)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115)|(0)) <= 8;
   if ($116) { label = 20; break; } else { label = 32; break; }
  case 20: 
   var $118=(($3+1124)|0);
   var $119=$118;
   _memset($119, 0, 1024);
   var $120=(($3+2164)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121)|(0))!=0;
   if ($122) { label = 21; break; } else { label = 28; break; }
  case 21: 
   var $124=(($3+1048)|0);
   var $125=$124;
   var $126=(($buffer)|0);
   var $127=(($3+2164)|0);
   var $128=HEAP32[(($127)>>2)];
   __ZN12RLByteStream8GetBytesEPviPi($125, $126, $128, $readed);
   var $129=HEAP32[(($readed)>>2)];
   var $130=(($3+2164)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($129)|(0))==(($131)|(0));
   if ($132) { label = 22; break; } else { label = 27; break; }
  case 22: 
   var $134=(($3+2164)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=((((($135)|(0)))/(3))&-1);
   $palSize=$136;
   $i=0;
   label = 23; break;
  case 23: 
   var $138=$i;
   var $139=$palSize;
   var $140=(($138)|(0)) < (($139)|(0));
   if ($140) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $142=$i;
   var $143=$palSize;
   var $144=($143<<1);
   var $145=((($142)+($144))|0);
   var $146=(($buffer+$145)|0);
   var $147=HEAP8[($146)];
   var $148=$i;
   var $149=(($3+1124)|0);
   var $150=(($149+($148<<2))|0);
   var $151=(($150)|0);
   HEAP8[($151)]=$147;
   var $152=$i;
   var $153=$palSize;
   var $154=((($152)+($153))|0);
   var $155=(($buffer+$154)|0);
   var $156=HEAP8[($155)];
   var $157=$i;
   var $158=(($3+1124)|0);
   var $159=(($158+($157<<2))|0);
   var $160=(($159+1)|0);
   HEAP8[($160)]=$156;
   var $161=$i;
   var $162=(($buffer+$161)|0);
   var $163=HEAP8[($162)];
   var $164=$i;
   var $165=(($3+1124)|0);
   var $166=(($165+($164<<2))|0);
   var $167=(($166+2)|0);
   HEAP8[($167)]=$163;
   var $168=$i;
   var $169=(($3+1124)|0);
   var $170=(($169+($168<<2))|0);
   var $171=(($170+3)|0);
   HEAP8[($171)]=0;
   label = 25; break;
  case 25: 
   var $173=$i;
   var $174=((($173)+(1))|0);
   $i=$174;
   label = 23; break;
  case 26: 
   var $176=(($3+1124)|0);
   var $177=(($176)|0);
   var $178=(($3+2148)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=__Z14IsColorPaletteP12PaletteEntryi($177, $179);
   var $181=$3;
   var $182=(($181+4)|0);
   var $183=(($180)&(1));
   HEAP8[($182)]=$183;
   var $184=(($3+1048)|0);
   var $185=$184;
   var $186=__ZN11RBaseStream6GetPosEv($185);
   var $187=(($3+2152)|0);
   HEAP32[(($187)>>2)]=$186;
   $result=1;
   label = 27; break;
  case 27: 
   label = 31; break;
  case 28: 
   var $190=(($3+2148)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191)|(0)) > 8;
   var $193=$3;
   var $194=(($193+4)|0);
   var $195=(($192)&(1));
   HEAP8[($194)]=$195;
   var $196=$3;
   var $197=(($196+4)|0);
   var $198=HEAP8[($197)];
   var $199=(($198) & 1);
   if ($199) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $201=(($3+1124)|0);
   var $202=(($201)|0);
   var $203=(($3+2148)|0);
   var $204=HEAP32[(($203)>>2)];
   __Z15FillGrayPaletteP12PaletteEntryib($202, $204, 0);
   label = 30; break;
  case 30: 
   var $206=(($3+1048)|0);
   var $207=$206;
   var $208=__ZN11RBaseStream6GetPosEv($207);
   var $209=(($3+2152)|0);
   HEAP32[(($209)>>2)]=$208;
   $result=1;
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $213=$result;
   var $214=(($213) & 1);
   if ($214) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $216=(($3+2152)|0);
   HEAP32[(($216)>>2)]=-1;
   var $217=$3;
   var $218=(($217+12)|0);
   HEAP32[(($218)>>2)]=-1;
   var $219=$3;
   var $220=(($219+8)|0);
   HEAP32[(($220)>>2)]=-1;
   var $221=(($3+1048)|0);
   var $222=$221;
   var $223=$222;
   var $224=HEAP32[(($223)>>2)];
   var $225=(($224+12)|0);
   var $226=HEAP32[(($225)>>2)];
   FUNCTION_TABLE[$226]($222);
   label = 35; break;
  case 35: 
   var $228=$result;
   var $229=(($228) & 1);
   $1=$229;
   label = 36; break;
  case 36: 
   var $231=$1;
   STACKTOP = sp;
   return $231;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN20GrFmtSunRasterReader8ReadDataEPhii($this, $data, $step, $color) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8504)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"11": function(value) { label = 114; $85 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $buffer_size;
   var $buffer=sp;
   var $bgr_buffer=(sp)+(4096);
   var $gray_palette=(sp)+(8192);
   var $result;
   var $src;
   var $bgr;
   var $src_pitch;
   var $nch;
   var $width3;
   var $y=(sp)+(8448);
   var $line_end;
   var $tsrc;
   var $max_count;
   var $code;
   var $len;
   var $len1;
   var $line_end1=(sp)+(8456);
   var $max_count2;
   var $code3;
   var $len4;
   var $len15;
   var $tsrc6;
   var $6=(sp)+(8464);
   var $7=(sp)+(8472);
   var $8=(sp)+(8480);
   var $9=(sp)+(8488);
   var $10=(sp)+(8496);
   $2=$this;
   $3=$data;
   $4=$step;
   $5=$color;
   var $11=$2;
   $buffer_size=4096;
   $result=0;
   var $12=(($buffer)|0);
   $src=$12;
   var $13=(($bgr_buffer)|0);
   $bgr=$13;
   var $14=$11;
   var $15=(($14+8)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($11+2148)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(Math.imul($16,$18)|0);
   var $20=((($19)+(7))|0);
   var $21=((((($20)|(0)))/(8))&-1);
   var $22=((($21)+(1))|0);
   var $23=$22 & -2;
   $src_pitch=$23;
   var $24=$5;
   var $25=(($24)|(0))!=0;
   var $26=$25 ? 3 : 1;
   $nch=$26;
   var $27=$11;
   var $28=(($27+8)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$nch;
   var $31=(Math.imul($29,$30)|0);
   $width3=$31;
   var $32=(($11+2152)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0)) < 0;
   if ($34) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $36=(($11+1048)|0);
   var $37=$36;
   var $38=__ZN11RBaseStream8IsOpenedEv($37);
   if ($38) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 113; break;
  case 4: 
   var $41=$src_pitch;
   var $42=((($41)+(32))|0);
   var $43=(($42)|(0)) > 4096;
   if ($43) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $45=$src_pitch;
   var $46=((($45)+(32))|0);
   var $47=(($46)|(0)) < 0;
   var $48=$47 ? -1 : $46;
   var $49=__Znaj($48);
   $src=$49;
   label = 6; break;
  case 6: 
   var $51=$11;
   var $52=(($51+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=((($53)*(3))&-1);
   var $55=((($54)+(32))|0);
   var $56=(($55)|(0)) > 4096;
   if ($56) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $58=$11;
   var $59=(($58+8)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=((($60)*(3))&-1);
   var $62=((($61)+(32))|0);
   var $63=(($62)|(0)) < 0;
   var $64=$63 ? -1 : $62;
   var $65=__Znaj($64);
   $bgr=$65;
   label = 8; break;
  case 8: 
   var $67=$5;
   var $68=(($67)|(0))!=0;
   if ($68) { label = 11; break; } else { label = 9; break; }
  case 9: 
   var $70=(($11+2160)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71)|(0))==1;
   if ($72) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $74=(($11+1124)|0);
   var $75=(($74)|0);
   var $76=(($gray_palette)|0);
   var $77=(($11+2148)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=1 << $78;
   __Z16CvtPaletteToGrayPK12PaletteEntryPhi($75, $76, $79);
   label = 11; break;
  case 11: 
   var $81=(($11+1048)|0);
   var $82=$81;
   var $83=__ZN11RBaseStream6JmpBufEv($82);
   var $84=(($83)|0);
   var $85=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($84)>>2)]=tempInt, 0);
   label = 114; break;
  case 114: 
   var $86=(($85)|(0))==0;
   if ($86) { label = 12; break; } else { label = 104; break; }
  case 12: 
   var $88=(($11+1048)|0);
   var $89=$88;
   var $90=(($11+2152)|0);
   var $91=HEAP32[(($90)>>2)];
   __ZN11RBaseStream6SetPosEi($89, $91);
   var $92=(($11+2148)|0);
   var $93=HEAP32[(($92)>>2)];
   if ((($93)|(0))==1) {
    label = 13; break;
   }
   else if ((($93)|(0))==8) {
    label = 45; break;
   }
   else if ((($93)|(0))==24) {
    label = 84; break;
   }
   else if ((($93)|(0))==32) {
    label = 94; break;
   }
   else {
   label = 102; break;
   }
  case 13: 
   var $95=(($11+2156)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96)|(0))!=2;
   if ($97) { label = 14; break; } else { label = 22; break; }
  case 14: 
   HEAP32[(($y)>>2)]=0;
   label = 15; break;
  case 15: 
   var $100=HEAP32[(($y)>>2)];
   var $101=$11;
   var $102=(($101+12)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($100)|(0)) < (($103)|(0));
   if ($104) { label = 16; break; } else { label = 21; break; }
  case 16: 
   var $106=(($11+1048)|0);
   var $107=$106;
   var $108=$src;
   var $109=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($107, $108, $109, 0);
   var $110=$5;
   var $111=(($110)|(0))!=0;
   if ($111) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $113=$3;
   var $114=$src;
   var $115=$11;
   var $116=(($115+8)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($11+1124)|0);
   var $119=(($118)|0);
   var $120=__Z13FillColorRow1PhS_iP12PaletteEntry($113, $114, $117, $119);
   label = 19; break;
  case 18: 
   var $122=$3;
   var $123=$src;
   var $124=$11;
   var $125=(($124+8)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($gray_palette)|0);
   var $128=__Z12FillGrayRow1PhS_iS_($122, $123, $126, $127);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $131=HEAP32[(($y)>>2)];
   var $132=((($131)+(1))|0);
   HEAP32[(($y)>>2)]=$132;
   var $133=$4;
   var $134=$3;
   var $135=(($134+$133)|0);
   $3=$135;
   label = 15; break;
  case 21: 
   $result=1;
   label = 44; break;
  case 22: 
   var $138=$src;
   var $139=$11;
   var $140=(($139+8)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=(($11+2148)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=(Math.imul($141,$143)|0);
   var $145=((($144)+(7))|0);
   var $146=((((($145)|(0)))/(8))&-1);
   var $147=(($138+$146)|0);
   $line_end=$147;
   var $148=$src;
   $tsrc=$148;
   HEAP32[(($y)>>2)]=0;
   label = 23; break;
  case 23: 
   var $150=$line_end;
   var $151=$tsrc;
   var $152=$150;
   var $153=$151;
   var $154=((($152)-($153))|0);
   $max_count=$154;
   $code=0;
   $len=0;
   $len1=0;
   label = 24; break;
  case 24: 
   var $156=(($11+1048)|0);
   var $157=$156;
   var $158=__ZN12RLByteStream7GetByteEv($157);
   $code=$158;
   var $159=$code;
   var $160=(($159)|(0))==128;
   if ($160) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $162=(($11+1048)|0);
   var $163=$162;
   var $164=__ZN12RLByteStream7GetByteEv($163);
   $len=$164;
   var $165=$len;
   var $166=(($165)|(0))!=0;
   if ($166) { label = 26; break; } else { label = 27; break; }
  case 26: 
   label = 30; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $170=$code;
   var $171=(($170) & 255);
   var $172=$len1;
   var $173=$tsrc;
   var $174=(($173+$172)|0);
   HEAP8[($174)]=$171;
   label = 29; break;
  case 29: 
   var $176=$len1;
   var $177=((($176)+(1))|0);
   $len1=$177;
   var $178=$max_count;
   var $179=(($177)|(0)) < (($178)|(0));
   if ($179) { label = 24; break; } else { label = 30; break; }
  case 30: 
   var $181=$len1;
   var $182=$tsrc;
   var $183=(($182+$181)|0);
   $tsrc=$183;
   var $184=$len;
   var $185=(($184)|(0)) > 0;
   if ($185) { label = 31; break; } else { label = 34; break; }
  case 31: 
   var $187=$len;
   var $188=((($187)+(1))|0);
   $len=$188;
   var $189=(($11+1048)|0);
   var $190=$189;
   var $191=__ZN12RLByteStream7GetByteEv($190);
   $code=$191;
   var $192=$len;
   var $193=$line_end;
   var $194=$tsrc;
   var $195=$193;
   var $196=$194;
   var $197=((($195)-($196))|0);
   var $198=(($192)|(0)) > (($197)|(0));
   if ($198) { label = 32; break; } else { label = 33; break; }
  case 32: 
   label = 43; break;
  case 33: 
   var $201=$tsrc;
   var $202=$code;
   var $203=(($202) & 255);
   var $204=$len;
   _memset($201, $203, $204);
   var $205=$len;
   var $206=$tsrc;
   var $207=(($206+$205)|0);
   $tsrc=$207;
   label = 34; break;
  case 34: 
   var $209=$tsrc;
   var $210=$line_end;
   var $211=(($209)>>>(0)) >= (($210)>>>(0));
   if ($211) { label = 35; break; } else { label = 41; break; }
  case 35: 
   var $213=$src;
   $tsrc=$213;
   var $214=$5;
   var $215=(($214)|(0))!=0;
   if ($215) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $217=$3;
   var $218=$src;
   var $219=$11;
   var $220=(($219+8)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=(($11+1124)|0);
   var $223=(($222)|0);
   var $224=__Z13FillColorRow1PhS_iP12PaletteEntry($217, $218, $221, $223);
   label = 38; break;
  case 37: 
   var $226=$3;
   var $227=$src;
   var $228=$11;
   var $229=(($228+8)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=(($gray_palette)|0);
   var $232=__Z12FillGrayRow1PhS_iS_($226, $227, $230, $231);
   label = 38; break;
  case 38: 
   var $234=$4;
   var $235=$3;
   var $236=(($235+$234)|0);
   $3=$236;
   var $237=HEAP32[(($y)>>2)];
   var $238=((($237)+(1))|0);
   HEAP32[(($y)>>2)]=$238;
   var $239=$11;
   var $240=(($239+12)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=(($238)|(0)) >= (($241)|(0));
   if ($242) { label = 39; break; } else { label = 40; break; }
  case 39: 
   label = 42; break;
  case 40: 
   label = 41; break;
  case 41: 
   label = 23; break;
  case 42: 
   $result=1;
   label = 43; break;
  case 43: 
   label = 44; break;
  case 44: 
   label = 103; break;
  case 45: 
   var $250=(($11+2156)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=(($251)|(0))!=2;
   if ($252) { label = 46; break; } else { label = 54; break; }
  case 46: 
   HEAP32[(($y)>>2)]=0;
   label = 47; break;
  case 47: 
   var $255=HEAP32[(($y)>>2)];
   var $256=$11;
   var $257=(($256+12)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=(($255)|(0)) < (($258)|(0));
   if ($259) { label = 48; break; } else { label = 53; break; }
  case 48: 
   var $261=(($11+1048)|0);
   var $262=$261;
   var $263=$src;
   var $264=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($262, $263, $264, 0);
   var $265=$5;
   var $266=(($265)|(0))!=0;
   if ($266) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $268=$3;
   var $269=$src;
   var $270=$11;
   var $271=(($270+8)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=(($11+1124)|0);
   var $274=(($273)|0);
   var $275=__Z13FillColorRow8PhS_iP12PaletteEntry($268, $269, $272, $274);
   label = 51; break;
  case 50: 
   var $277=$3;
   var $278=$src;
   var $279=$11;
   var $280=(($279+8)|0);
   var $281=HEAP32[(($280)>>2)];
   var $282=(($gray_palette)|0);
   var $283=__Z12FillGrayRow8PhS_iS_($277, $278, $281, $282);
   label = 51; break;
  case 51: 
   label = 52; break;
  case 52: 
   var $286=HEAP32[(($y)>>2)];
   var $287=((($286)+(1))|0);
   HEAP32[(($y)>>2)]=$287;
   var $288=$4;
   var $289=$3;
   var $290=(($289+$288)|0);
   $3=$290;
   label = 47; break;
  case 53: 
   $result=1;
   label = 83; break;
  case 54: 
   var $293=$3;
   var $294=$width3;
   var $295=(($293+$294)|0);
   HEAP32[(($line_end1)>>2)]=$295;
   HEAP32[(($y)>>2)]=0;
   label = 55; break;
  case 55: 
   var $297=HEAP32[(($line_end1)>>2)];
   var $298=$3;
   var $299=$297;
   var $300=$298;
   var $301=((($299)-($300))|0);
   $max_count2=$301;
   $code3=0;
   $len4=0;
   var $302=$src;
   $tsrc6=$302;
   label = 56; break;
  case 56: 
   var $304=(($11+1048)|0);
   var $305=$304;
   var $306=__ZN12RLByteStream7GetByteEv($305);
   $code3=$306;
   var $307=$code3;
   var $308=(($307)|(0))==128;
   if ($308) { label = 57; break; } else { label = 60; break; }
  case 57: 
   var $310=(($11+1048)|0);
   var $311=$310;
   var $312=__ZN12RLByteStream7GetByteEv($311);
   $len4=$312;
   var $313=$len4;
   var $314=(($313)|(0))!=0;
   if ($314) { label = 58; break; } else { label = 59; break; }
  case 58: 
   label = 62; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $318=$code3;
   var $319=(($318) & 255);
   var $320=$tsrc6;
   var $321=(($320+1)|0);
   $tsrc6=$321;
   HEAP8[($320)]=$319;
   label = 61; break;
  case 61: 
   var $323=$nch;
   var $324=$max_count2;
   var $325=((($324)-($323))|0);
   $max_count2=$325;
   var $326=(($325)|(0)) > 0;
   if ($326) { label = 56; break; } else { label = 62; break; }
  case 62: 
   var $328=$tsrc6;
   var $329=$src;
   var $330=$328;
   var $331=$329;
   var $332=((($330)-($331))|0);
   $len15=$332;
   var $333=$len15;
   var $334=(($333)|(0)) > 0;
   if ($334) { label = 63; break; } else { label = 67; break; }
  case 63: 
   var $336=$5;
   var $337=(($336)|(0))!=0;
   if ($337) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $339=$3;
   var $340=$src;
   var $341=$len15;
   var $342=(($11+1124)|0);
   var $343=(($342)|0);
   var $344=__Z13FillColorRow8PhS_iP12PaletteEntry($339, $340, $341, $343);
   label = 66; break;
  case 65: 
   var $346=$3;
   var $347=$src;
   var $348=$len15;
   var $349=(($gray_palette)|0);
   var $350=__Z12FillGrayRow8PhS_iS_($346, $347, $348, $349);
   label = 66; break;
  case 66: 
   var $352=$len15;
   var $353=$nch;
   var $354=(Math.imul($352,$353)|0);
   var $355=$3;
   var $356=(($355+$354)|0);
   $3=$356;
   label = 67; break;
  case 67: 
   var $358=$len4;
   var $359=(($358)|(0)) > 0;
   if ($359) { label = 68; break; } else { label = 74; break; }
  case 68: 
   var $361=$len4;
   var $362=((($361)+(1))|0);
   var $363=$nch;
   var $364=(Math.imul($362,$363)|0);
   $len4=$364;
   var $365=(($11+1048)|0);
   var $366=$365;
   var $367=__ZN12RLByteStream7GetByteEv($366);
   $code3=$367;
   var $368=$5;
   var $369=(($368)|(0))!=0;
   if ($369) { label = 69; break; } else { label = 70; break; }
  case 69: 
   var $371=$3;
   var $372=$4;
   var $373=$width3;
   var $374=$11;
   var $375=(($374+12)|0);
   var $376=HEAP32[(($375)>>2)];
   var $377=$len4;
   var $378=$code3;
   var $379=(($11+1124)|0);
   var $380=(($379+($378<<2))|0);
   var $381=$6;
   var $382=$380;
   assert(4 % 1 === 0);HEAP8[($381)]=HEAP8[($382)];HEAP8[((($381)+(1))|0)]=HEAP8[((($382)+(1))|0)];HEAP8[((($381)+(2))|0)]=HEAP8[((($382)+(2))|0)];HEAP8[((($381)+(3))|0)]=HEAP8[((($382)+(3))|0)];
   var $383=__Z12FillUniColorPhRS_iiRiii12PaletteEntry($371, $line_end1, $372, $373, $y, $376, $377, $6);
   $3=$383;
   label = 71; break;
  case 70: 
   var $385=$3;
   var $386=$4;
   var $387=$width3;
   var $388=$11;
   var $389=(($388+12)|0);
   var $390=HEAP32[(($389)>>2)];
   var $391=$len4;
   var $392=$code3;
   var $393=(($gray_palette+$392)|0);
   var $394=HEAP8[($393)];
   var $395=__Z11FillUniGrayPhRS_iiRiiih($385, $line_end1, $386, $387, $y, $390, $391, $394);
   $3=$395;
   label = 71; break;
  case 71: 
   var $397=HEAP32[(($y)>>2)];
   var $398=$11;
   var $399=(($398+12)|0);
   var $400=HEAP32[(($399)>>2)];
   var $401=(($397)|(0)) >= (($400)|(0));
   if ($401) { label = 72; break; } else { label = 73; break; }
  case 72: 
   label = 81; break;
  case 73: 
   label = 74; break;
  case 74: 
   var $405=$3;
   var $406=HEAP32[(($line_end1)>>2)];
   var $407=(($405)|(0))==(($406)|(0));
   if ($407) { label = 75; break; } else { label = 80; break; }
  case 75: 
   var $409=(($11+1048)|0);
   var $410=$409;
   var $411=__ZN12RLByteStream7GetByteEv($410);
   var $412=(($411)|(0))!=0;
   if ($412) { label = 76; break; } else { label = 77; break; }
  case 76: 
   label = 82; break;
  case 77: 
   var $415=$4;
   var $416=HEAP32[(($line_end1)>>2)];
   var $417=(($416+$415)|0);
   HEAP32[(($line_end1)>>2)]=$417;
   var $418=HEAP32[(($line_end1)>>2)];
   var $419=$width3;
   var $420=(((-$419))|0);
   var $421=(($418+$420)|0);
   $3=$421;
   var $422=HEAP32[(($y)>>2)];
   var $423=((($422)+(1))|0);
   HEAP32[(($y)>>2)]=$423;
   var $424=$11;
   var $425=(($424+12)|0);
   var $426=HEAP32[(($425)>>2)];
   var $427=(($423)|(0)) >= (($426)|(0));
   if ($427) { label = 78; break; } else { label = 79; break; }
  case 78: 
   label = 81; break;
  case 79: 
   label = 80; break;
  case 80: 
   label = 55; break;
  case 81: 
   $result=1;
   label = 82; break;
  case 82: 
   label = 83; break;
  case 83: 
   label = 103; break;
  case 84: 
   HEAP32[(($y)>>2)]=0;
   label = 85; break;
  case 85: 
   var $436=HEAP32[(($y)>>2)];
   var $437=$11;
   var $438=(($437+12)|0);
   var $439=HEAP32[(($438)>>2)];
   var $440=(($436)|(0)) < (($439)|(0));
   if ($440) { label = 86; break; } else { label = 93; break; }
  case 86: 
   var $442=(($11+1048)|0);
   var $443=$442;
   var $444=$5;
   var $445=(($444)|(0))!=0;
   var $446=$3;
   var $447=$bgr;
   var $448=$445 ? $446 : $447;
   var $449=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($443, $448, $449, 0);
   var $450=$5;
   var $451=(($450)|(0))!=0;
   if ($451) { label = 87; break; } else { label = 90; break; }
  case 87: 
   var $453=(($11+2156)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455=(($454)|(0))==3;
   if ($455) { label = 88; break; } else { label = 89; break; }
  case 88: 
   var $457=$3;
   var $458=$3;
   var $459=$11;
   var $460=(($459+8)|0);
   var $461=HEAP32[(($460)>>2)];
   __Z6cvSizeii($7, $461, 1);
   __Z21icvCvt_BGR2RGB_8u_C3RPKhiPhi6CvSize($457, 0, $458, 0, $7);
   label = 89; break;
  case 89: 
   label = 91; break;
  case 90: 
   var $464=$bgr;
   var $465=$3;
   var $466=$11;
   var $467=(($466+8)|0);
   var $468=HEAP32[(($467)>>2)];
   __Z6cvSizeii($8, $468, 1);
   var $469=(($11+2156)|0);
   var $470=HEAP32[(($469)>>2)];
   var $471=(($470)|(0))==3;
   var $472=$471 ? 2 : 0;
   __Z24icvCvt_BGR2Gray_8u_C3C1RPKhiPhi6CvSizei($464, 0, $465, 0, $8, $472);
   label = 91; break;
  case 91: 
   label = 92; break;
  case 92: 
   var $475=HEAP32[(($y)>>2)];
   var $476=((($475)+(1))|0);
   HEAP32[(($y)>>2)]=$476;
   var $477=$4;
   var $478=$3;
   var $479=(($478+$477)|0);
   $3=$479;
   label = 85; break;
  case 93: 
   $result=1;
   label = 103; break;
  case 94: 
   HEAP32[(($y)>>2)]=0;
   label = 95; break;
  case 95: 
   var $483=HEAP32[(($y)>>2)];
   var $484=$11;
   var $485=(($484+12)|0);
   var $486=HEAP32[(($485)>>2)];
   var $487=(($483)|(0)) < (($486)|(0));
   if ($487) { label = 96; break; } else { label = 101; break; }
  case 96: 
   var $489=(($11+1048)|0);
   var $490=$489;
   var $491=$src;
   var $492=(($491+3)|0);
   var $493=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($490, $492, $493, 0);
   var $494=$5;
   var $495=(($494)|(0))!=0;
   if ($495) { label = 97; break; } else { label = 98; break; }
  case 97: 
   var $497=$src;
   var $498=(($497+4)|0);
   var $499=$3;
   var $500=$11;
   var $501=(($500+8)|0);
   var $502=HEAP32[(($501)>>2)];
   __Z6cvSizeii($9, $502, 1);
   var $503=(($11+2156)|0);
   var $504=HEAP32[(($503)>>2)];
   var $505=(($504)|(0))==3;
   var $506=$505 ? 2 : 0;
   __Z24icvCvt_BGRA2BGR_8u_C4C3RPKhiPhi6CvSizei($498, 0, $499, 0, $9, $506);
   label = 99; break;
  case 98: 
   var $508=$src;
   var $509=(($508+4)|0);
   var $510=$3;
   var $511=$11;
   var $512=(($511+8)|0);
   var $513=HEAP32[(($512)>>2)];
   __Z6cvSizeii($10, $513, 1);
   var $514=(($11+2156)|0);
   var $515=HEAP32[(($514)>>2)];
   var $516=(($515)|(0))==3;
   var $517=$516 ? 2 : 0;
   __Z25icvCvt_BGRA2Gray_8u_C4C1RPKhiPhi6CvSizei($509, 0, $510, 0, $10, $517);
   label = 99; break;
  case 99: 
   label = 100; break;
  case 100: 
   var $520=HEAP32[(($y)>>2)];
   var $521=((($520)+(1))|0);
   HEAP32[(($y)>>2)]=$521;
   var $522=$4;
   var $523=$3;
   var $524=(($523+$522)|0);
   $3=$524;
   label = 95; break;
  case 101: 
   $result=1;
   label = 103; break;
  case 102: 
   label = 103; break;
  case 103: 
   label = 104; break;
  case 104: 
   var $529=$src;
   var $530=(($buffer)|0);
   var $531=(($529)|(0))!=(($530)|(0));
   if ($531) { label = 105; break; } else { label = 108; break; }
  case 105: 
   var $533=$src;
   var $534=(($533)|(0))==0;
   if ($534) { label = 107; break; } else { label = 106; break; }
  case 106: 
   __ZdaPv($533);
   label = 107; break;
  case 107: 
   label = 108; break;
  case 108: 
   var $538=$bgr;
   var $539=(($bgr_buffer)|0);
   var $540=(($538)|(0))!=(($539)|(0));
   if ($540) { label = 109; break; } else { label = 112; break; }
  case 109: 
   var $542=$bgr;
   var $543=(($542)|(0))==0;
   if ($543) { label = 111; break; } else { label = 110; break; }
  case 110: 
   __ZdaPv($542);
   label = 111; break;
  case 111: 
   label = 112; break;
  case 112: 
   var $547=$result;
   var $548=(($547) & 1);
   $1=$548;
   label = 113; break;
  case 113: 
   var $550=$1;
   STACKTOP = sp;
   return $550;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN20GrFmtSunRasterWriterD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN20GrFmtSunRasterWriterD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20GrFmtSunRasterWriterC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtWriterC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((18648)|0);
   var $9=(($5+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN12WMByteStreamC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   var $15=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $18=$3;
   var $19=$4;
   var $20$0=$18;
   var $20$1=0;
   var $21$0=$20$0;
   var $21$1=$19;
   ___resumeException($21$0)
  case 6: 
   var $23$0 = ___cxa_find_matching_catch(-1, -1,0); $23$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20GrFmtSunRasterWriter10WriteImageEPKhiiiii($this, $data, $step, $width, $height, $0, $channels) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $result;
   var $fileStep;
   var $y;
   $2=$this;
   $3=$data;
   $4=$step;
   $5=$width;
   $6=$height;
   $7=$0;
   $8=$channels;
   var $9=$2;
   $result=0;
   var $10=$5;
   var $11=$8;
   var $12=(Math.imul($10,$11)|0);
   var $13=((($12)+(1))|0);
   var $14=$13 & -2;
   $fileStep=$14;
   var $15=(($9+1028)|0);
   var $16=$15;
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+8)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$9;
   var $22=(($21+4)|0);
   var $23=(($22)|0);
   var $24=FUNCTION_TABLE[$20]($16, $23);
   if ($24) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $26=(($9+1028)|0);
   var $27=$26;
   var $28=HEAP32[((23096)>>2)];
   var $29=HEAP32[((23096)>>2)];
   var $30=_strlen($29);
   __ZN12WLByteStream8PutBytesEPKvi($27, $28, $30);
   var $31=(($9+1028)|0);
   var $32=$5;
   __ZN12WMByteStream8PutDWordEi($31, $32);
   var $33=(($9+1028)|0);
   var $34=$6;
   __ZN12WMByteStream8PutDWordEi($33, $34);
   var $35=(($9+1028)|0);
   var $36=$8;
   var $37=($36<<3);
   __ZN12WMByteStream8PutDWordEi($35, $37);
   var $38=(($9+1028)|0);
   var $39=$fileStep;
   var $40=$6;
   var $41=(Math.imul($39,$40)|0);
   __ZN12WMByteStream8PutDWordEi($38, $41);
   var $42=(($9+1028)|0);
   __ZN12WMByteStream8PutDWordEi($42, 1);
   var $43=(($9+1028)|0);
   __ZN12WMByteStream8PutDWordEi($43, 0);
   var $44=(($9+1028)|0);
   __ZN12WMByteStream8PutDWordEi($44, 0);
   $y=0;
   label = 3; break;
  case 3: 
   var $46=$y;
   var $47=$6;
   var $48=(($46)|(0)) < (($47)|(0));
   if ($48) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $50=(($9+1028)|0);
   var $51=$50;
   var $52=$3;
   var $53=$fileStep;
   __ZN12WLByteStream8PutBytesEPKvi($51, $52, $53);
   label = 5; break;
  case 5: 
   var $55=$y;
   var $56=((($55)+(1))|0);
   $y=$56;
   var $57=$4;
   var $58=$3;
   var $59=(($58+$57)|0);
   $3=$59;
   label = 3; break;
  case 6: 
   var $61=(($9+1028)|0);
   var $62=$61;
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+12)|0);
   var $66=HEAP32[(($65)>>2)];
   FUNCTION_TABLE[$66]($62);
   $result=1;
   label = 7; break;
  case 7: 
   var $68=$result;
   var $69=(($68) & 1);
   return $69;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN9GrFmtTiffC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryC2Ev($3);
 var $4=$2;
 HEAP32[(($4)>>2)]=((18488)|0);
 var $5=$2;
 var $6=(($5+8)|0);
 HEAP32[(($6)>>2)]=4;
 var $7=$2;
 var $8=(($7+12)|0);
 HEAP32[(($8)>>2)]=((36840)|0);
 var $9=$2;
 var $10=(($9+4)|0);
 HEAP32[(($10)>>2)]=((12576)|0);
 return;
}
function __ZN9GrFmtTiffD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN9GrFmtTiffD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN9GrFmtTiffD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 __ZN18GrFmtFilterFactoryD2Ev($3);
 return;
}
function __ZN9GrFmtTiff14CheckSignatureEPKc($this, $signature) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$signature;
   var $3=$1;
   var $4=$2;
   var $5=_memcmp($4, ((23088)|0), 4);
   var $6=(($5)|(0))==0;
   if ($6) { var $12 = 1;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$2;
   var $9=_memcmp($8, ((23080)|0), 4);
   var $10=(($9)|(0))==0;
   var $12 = $10;label = 3; break;
  case 3: 
   var $12;
   return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN9GrFmtTiff9NewReaderEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(2184);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN15GrFmtTiffReaderC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN9GrFmtTiff9NewWriterEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=__Znwj(1060);
   var $7=$6;
   var $8=$2;
   (function() { try { __THREW__ = 0; return __ZN15GrFmtTiffWriterC2EPKc($7, $8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$7;
   return $10;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   __ZdlPv($6);
   label = 4; break;
  case 4: 
   var $16=$3;
   var $17=$4;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffReaderD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN15GrFmtTiffReaderD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffReader5CloseEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+1048)|0);
 var $4=$3;
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 FUNCTION_TABLE[$8]($4);
 return;
}
function __ZN15GrFmtTiffReader9GetWordExEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=(($2+1048)|0);
   var $4=__ZN12RLByteStream7GetWordEv($3);
   $val=$4;
   var $5=(($2+2180)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==19789;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$val;
   var $10=$9 >> 8;
   var $11=$val;
   var $12=$11 & 255;
   var $13=$12 << 8;
   var $14=$10 | $13;
   $val=$14;
   label = 3; break;
  case 3: 
   var $16=$val;
   return $16;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffReader10GetDWordExEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=(($2+1048)|0);
   var $4=__ZN12RLByteStream8GetDWordEv($3);
   $val=$4;
   var $5=(($2+2180)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==19789;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$val;
   var $10=$9 << 24;
   var $11=$val;
   var $12=$11 & 65280;
   var $13=$12 << 8;
   var $14=$10 | $13;
   var $15=$val;
   var $16=$15 >> 8;
   var $17=$16 & 65280;
   var $18=$14 | $17;
   var $19=$val;
   var $20=$19 >>> 24;
   var $21=$18 | $20;
   $val=$21;
   label = 3; break;
  case 3: 
   var $23=$val;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffReader9ReadTableEii13TiffFieldTypeRPiRi($this, $offset, $count, $fieldType, $array, $arraysize) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $i;
   var $pos;
   $2=$this;
   $3=$offset;
   $4=$count;
   $5=$fieldType;
   $6=$array;
   $7=$arraysize;
   var $8=$2;
   var $9=$4;
   var $10=(($9)|(0)) < 0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=-125;
   label = 49; break;
  case 3: 
   var $13=$5;
   var $14=(($13)|(0))!=3;
   if ($14) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $16=$5;
   var $17=(($16)|(0))!=4;
   if ($17) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $19=$5;
   var $20=(($19)|(0))!=1;
   if ($20) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=-125;
   label = 49; break;
  case 7: 
   var $23=$4;
   var $24=$7;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23)|(0)) > (($25)|(0));
   if ($26) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $28=$6;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))==0;
   if ($30) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $32=$29;
   __ZdaPv($32);
   label = 10; break;
  case 10: 
   var $34=$7;
   var $35=HEAP32[(($34)>>2)];
   var $36=((($35)*(3))&-1);
   var $37=((((($36)|(0)))/(2))&-1);
   var $38=$7;
   HEAP32[(($38)>>2)]=$37;
   var $39=$7;
   var $40=HEAP32[(($39)>>2)];
   var $41=$4;
   var $42=(($40)|(0)) < (($41)|(0));
   if ($42) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $44=$4;
   var $45=$7;
   HEAP32[(($45)>>2)]=$44;
   label = 12; break;
  case 12: 
   var $47=$7;
   var $48=HEAP32[(($47)>>2)];
   var $49$0=_llvm_umul_with_overflow_i32($48, 4);
   var $49$1=tempRet0;
   var $50=$49$1;
   var $51=$49$0;
   var $52=$50 ? -1 : $51;
   var $53=__Znaj($52);
   var $54=$53;
   var $55=$6;
   HEAP32[(($55)>>2)]=$54;
   label = 13; break;
  case 13: 
   var $57=$4;
   var $58=(($57)|(0)) > 1;
   if ($58) { label = 14; break; } else { label = 47; break; }
  case 14: 
   var $60=(($8+1048)|0);
   var $61=$60;
   var $62=__ZN11RBaseStream6GetPosEv($61);
   $pos=$62;
   var $63=(($8+1048)|0);
   var $64=$63;
   var $65=$3;
   __ZN11RBaseStream6SetPosEi($64, $65);
   var $66=$5;
   var $67=(($66)|(0))==4;
   if ($67) { label = 15; break; } else { label = 27; break; }
  case 15: 
   var $69=(($8+2180)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))==19789;
   if ($71) { label = 16; break; } else { label = 21; break; }
  case 16: 
   $i=0;
   label = 17; break;
  case 17: 
   var $74=$i;
   var $75=$4;
   var $76=(($74)|(0)) < (($75)|(0));
   if ($76) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $78=(($8+1048)|0);
   var $79=$78;
   var $80=__ZN12RMByteStream8GetDWordEv($79);
   var $81=$i;
   var $82=$6;
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+($81<<2))|0);
   HEAP32[(($84)>>2)]=$80;
   label = 19; break;
  case 19: 
   var $86=$i;
   var $87=((($86)+(1))|0);
   $i=$87;
   label = 17; break;
  case 20: 
   label = 26; break;
  case 21: 
   $i=0;
   label = 22; break;
  case 22: 
   var $91=$i;
   var $92=$4;
   var $93=(($91)|(0)) < (($92)|(0));
   if ($93) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $95=(($8+1048)|0);
   var $96=__ZN12RLByteStream8GetDWordEv($95);
   var $97=$i;
   var $98=$6;
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+($97<<2))|0);
   HEAP32[(($100)>>2)]=$96;
   label = 24; break;
  case 24: 
   var $102=$i;
   var $103=((($102)+(1))|0);
   $i=$103;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   label = 46; break;
  case 27: 
   var $107=$5;
   var $108=(($107)|(0))==3;
   if ($108) { label = 28; break; } else { label = 40; break; }
  case 28: 
   var $110=(($8+2180)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($111)|(0))==19789;
   if ($112) { label = 29; break; } else { label = 34; break; }
  case 29: 
   $i=0;
   label = 30; break;
  case 30: 
   var $115=$i;
   var $116=$4;
   var $117=(($115)|(0)) < (($116)|(0));
   if ($117) { label = 31; break; } else { label = 33; break; }
  case 31: 
   var $119=(($8+1048)|0);
   var $120=$119;
   var $121=__ZN12RMByteStream7GetWordEv($120);
   var $122=$i;
   var $123=$6;
   var $124=HEAP32[(($123)>>2)];
   var $125=(($124+($122<<2))|0);
   HEAP32[(($125)>>2)]=$121;
   label = 32; break;
  case 32: 
   var $127=$i;
   var $128=((($127)+(1))|0);
   $i=$128;
   label = 30; break;
  case 33: 
   label = 39; break;
  case 34: 
   $i=0;
   label = 35; break;
  case 35: 
   var $132=$i;
   var $133=$4;
   var $134=(($132)|(0)) < (($133)|(0));
   if ($134) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $136=(($8+1048)|0);
   var $137=__ZN12RLByteStream7GetWordEv($136);
   var $138=$i;
   var $139=$6;
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140+($138<<2))|0);
   HEAP32[(($141)>>2)]=$137;
   label = 37; break;
  case 37: 
   var $143=$i;
   var $144=((($143)+(1))|0);
   $i=$144;
   label = 35; break;
  case 38: 
   label = 39; break;
  case 39: 
   label = 45; break;
  case 40: 
   $i=0;
   label = 41; break;
  case 41: 
   var $149=$i;
   var $150=$4;
   var $151=(($149)|(0)) < (($150)|(0));
   if ($151) { label = 42; break; } else { label = 44; break; }
  case 42: 
   var $153=(($8+1048)|0);
   var $154=__ZN12RLByteStream7GetByteEv($153);
   var $155=$i;
   var $156=$6;
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157+($155<<2))|0);
   HEAP32[(($158)>>2)]=$154;
   label = 43; break;
  case 43: 
   var $160=$i;
   var $161=((($160)+(1))|0);
   $i=$161;
   label = 41; break;
  case 44: 
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $165=(($8+1048)|0);
   var $166=$165;
   var $167=$pos;
   __ZN11RBaseStream6SetPosEi($166, $167);
   label = 48; break;
  case 47: 
   var $169=$3;
   var $170=$6;
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171)|0);
   HEAP32[(($172)>>2)]=$169;
   label = 48; break;
  case 48: 
   $1=0;
   label = 49; break;
  case 49: 
   var $175=$1;
   return $175;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN20GrFmtSunRasterWriterD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((18648)|0);
   var $6=(($4+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$4;
   __ZN11GrFmtWriterD2Ev($8);
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffReaderC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtReaderC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((18824)|0);
   var $9=(($5+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN12RLByteStreamC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=(($5+1124)|0);
   var $12=(($5+2160)|0);
   HEAP32[(($12)>>2)]=0;
   var $13=(($5+2164)|0);
   HEAP32[(($13)>>2)]=0;
   var $14=(($5+2168)|0);
   HEAP32[(($14)>>2)]=-1;
   var $15=(($5+2156)|0);
   HEAP32[(($15)>>2)]=0;
   var $16=(($5+2152)|0);
   HEAP32[(($16)>>2)]=0;
   return;
  case 3: 
   var $18$0 = ___cxa_find_matching_catch(-1, -1); $18$1 = tempRet0;
   var $19=$18$0;
   $3=$19;
   var $20=$18$1;
   $4=$20;
   var $21=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $24=$3;
   var $25=$4;
   var $26$0=$24;
   var $26$1=0;
   var $27$0=$26$0;
   var $27$1=$25;
   ___resumeException($27$0)
  case 6: 
   var $29$0 = ___cxa_find_matching_catch(-1, -1,0); $29$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffReaderD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((18824)|0);
   var $6=$4;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $11=(($4+2160)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==0;
   if ($13) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $15=$12;
   __ZdaPv($15);
   label = 4; break;
  case 4: 
   var $17=(($4+2152)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))==0;
   if ($19) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $21=$18;
   __ZdaPv($21);
   label = 6; break;
  case 6: 
   var $23=(($4+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $25=$4;
   __ZN11GrFmtReaderD2Ev($25);
   return;
  case 8: 
   var $27$0 = ___cxa_find_matching_catch(-1, -1); $27$1 = tempRet0;
   var $28=$27$0;
   $2=$28;
   var $29=$27$1;
   $3=$29;
   var $30=(($4+1048)|0);
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 10; break; } else { label = 14; break; }
  case 9: 
   var $32$0 = ___cxa_find_matching_catch(-1, -1); $32$1 = tempRet0;
   var $33=$32$0;
   $2=$33;
   var $34=$32$1;
   $3=$34;
   label = 11; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $37=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtReaderD2Ev($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 14; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $40=$2;
   var $41=$3;
   var $42$0=$40;
   var $42$1=0;
   var $43$0=$42$0;
   var $43$1=$41;
   ___resumeException($43$0)
  case 14: 
   var $45$0 = ___cxa_find_matching_catch(-1, -1,0); $45$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffReader10ReadHeaderEv($this) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"3": function(value) { label = 103; $30 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $result;
   var $photometric;
   var $channels;
   var $pal_length;
   var $MAX_CHANNELS;
   var $bpp_arr=sp;
   var $header_offset;
   var $i;
   var $j;
   var $count;
   var $tag;
   var $fieldType;
   var $count1=(sp)+(16);
   var $value;
   var $bpp_arr_ref=(sp)+(24);
   var $planar_config;
   $2=$this;
   var $3=$2;
   $result=0;
   $photometric=-1;
   $channels=1;
   $pal_length=-1;
   $MAX_CHANNELS=4;
   var $4=(($3+1048)|0);
   var $5=$4;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$3;
   var $11=(($10+20)|0);
   var $12=(($11)|0);
   var $13=FUNCTION_TABLE[$9]($5, $12);
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 102; break;
  case 3: 
   var $16=$3;
   var $17=(($16+8)|0);
   HEAP32[(($17)>>2)]=-1;
   var $18=$3;
   var $19=(($18+12)|0);
   HEAP32[(($19)>>2)]=-1;
   var $20=(($3+2168)|0);
   HEAP32[(($20)>>2)]=-1;
   var $21=(($3+2148)|0);
   HEAP32[(($21)>>2)]=1;
   var $22=(($3+2176)|0);
   HEAP32[(($22)>>2)]=1;
   var $23=(($3+2172)|0);
   HEAP32[(($23)>>2)]=-1;
   var $24=$3;
   var $25=(($24+4)|0);
   HEAP8[($25)]=0;
   var $26=(($3+1048)|0);
   var $27=$26;
   var $28=__ZN11RBaseStream6JmpBufEv($27);
   var $29=(($28)|0);
   var $30=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($29)>>2)]=tempInt, 0);
   label = 103; break;
  case 103: 
   var $31=(($30)|(0))==0;
   if ($31) { label = 4; break; } else { label = 99; break; }
  case 4: 
   var $33=(($3+1048)|0);
   var $34=__ZN12RLByteStream7GetWordEv($33);
   var $35=(($3+2180)|0);
   HEAP32[(($35)>>2)]=$34;
   var $36=(($3+1048)|0);
   var $37=$36;
   __ZN11RBaseStream4SkipEi($37, 2);
   var $38=__ZN15GrFmtTiffReader10GetDWordExEv($3);
   $header_offset=$38;
   var $39=(($3+1048)|0);
   var $40=$39;
   var $41=$header_offset;
   __ZN11RBaseStream6SetPosEi($40, $41);
   var $42=__ZN15GrFmtTiffReader9GetWordExEv($3);
   $count=$42;
   $i=0;
   label = 5; break;
  case 5: 
   var $44=$i;
   var $45=$count;
   var $46=(($44)|(0)) < (($45)|(0));
   if ($46) { label = 6; break; } else { label = 64; break; }
  case 6: 
   var $48=__ZN15GrFmtTiffReader9GetWordExEv($3);
   $tag=$48;
   var $49=__ZN15GrFmtTiffReader9GetWordExEv($3);
   $fieldType=$49;
   var $50=__ZN15GrFmtTiffReader10GetDWordExEv($3);
   HEAP32[(($count1)>>2)]=$50;
   var $51=__ZN15GrFmtTiffReader10GetDWordExEv($3);
   $value=$51;
   var $52=HEAP32[(($count1)>>2)];
   var $53=(($52)|(0))==1;
   if ($53) { label = 7; break; } else { label = 15; break; }
  case 7: 
   var $55=(($3+2180)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|(0))==19789;
   if ($57) { label = 8; break; } else { label = 14; break; }
  case 8: 
   var $59=$fieldType;
   var $60=(($59)|(0))==3;
   if ($60) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $62=$value;
   var $63=$62 >>> 16;
   $value=$63;
   label = 13; break;
  case 10: 
   var $65=$fieldType;
   var $66=(($65)|(0))==1;
   if ($66) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $68=$value;
   var $69=$68 >>> 24;
   $value=$69;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $73=$fieldType;
   var $74=((21000+($73<<2))|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$value;
   var $77=$76 & $75;
   $value=$77;
   label = 15; break;
  case 15: 
   var $79=$tag;
   if ((($79)|(0))==256) {
    label = 16; break;
   }
   else if ((($79)|(0))==257) {
    label = 17; break;
   }
   else if ((($79)|(0))==258) {
    label = 18; break;
   }
   else if ((($79)|(0))==259) {
    label = 29; break;
   }
   else if ((($79)|(0))==262) {
    label = 34; break;
   }
   else if ((($79)|(0))==273) {
    label = 37; break;
   }
   else if ((($79)|(0))==277) {
    label = 40; break;
   }
   else if ((($79)|(0))==278) {
    label = 45; break;
   }
   else if ((($79)|(0))==284) {
    label = 46; break;
   }
   else if ((($79)|(0))==320) {
    label = 49; break;
   }
   else if ((($79)|(0))==279) {
    label = 61; break;
   }
   else {
   label = 62; break;
   }
  case 16: 
   var $81=$value;
   var $82=$3;
   var $83=(($82+8)|0);
   HEAP32[(($83)>>2)]=$81;
   label = 62; break;
  case 17: 
   var $85=$value;
   var $86=$3;
   var $87=(($86+12)|0);
   HEAP32[(($87)>>2)]=$85;
   label = 62; break;
  case 18: 
   var $89=(($bpp_arr)|0);
   HEAP32[(($bpp_arr_ref)>>2)]=$89;
   var $90=HEAP32[(($count1)>>2)];
   var $91=(($90)|(0)) > 4;
   if ($91) { label = 19; break; } else { label = 20; break; }
  case 19: 
   label = 98; break;
  case 20: 
   var $94=$value;
   var $95=HEAP32[(($count1)>>2)];
   var $96=$fieldType;
   var $97=__ZN15GrFmtTiffReader9ReadTableEii13TiffFieldTypeRPiRi($3, $94, $95, $96, $bpp_arr_ref, $count1);
   var $98=(($97)|(0)) < 0;
   if ($98) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 98; break;
  case 22: 
   $j=1;
   label = 23; break;
  case 23: 
   var $102=$j;
   var $103=HEAP32[(($count1)>>2)];
   var $104=(($102)|(0)) < (($103)|(0));
   if ($104) { label = 24; break; } else { label = 28; break; }
  case 24: 
   var $106=$j;
   var $107=(($bpp_arr+($106<<2))|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($bpp_arr)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($108)|(0))!=(($110)|(0));
   if ($111) { label = 25; break; } else { label = 26; break; }
  case 25: 
   label = 98; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $115=$j;
   var $116=((($115)+(1))|0);
   $j=$116;
   label = 23; break;
  case 28: 
   var $118=(($bpp_arr)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(($3+2148)|0);
   HEAP32[(($120)>>2)]=$119;
   label = 62; break;
  case 29: 
   var $122=$value;
   var $123=(($3+2176)|0);
   HEAP32[(($123)>>2)]=$122;
   var $124=(($3+2176)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125)|(0))!=1;
   if ($126) { label = 30; break; } else { label = 33; break; }
  case 30: 
   var $128=(($3+2176)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129)|(0))!=2;
   if ($130) { label = 31; break; } else { label = 33; break; }
  case 31: 
   var $132=(($3+2176)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133)|(0))!=32773;
   if ($134) { label = 32; break; } else { label = 33; break; }
  case 32: 
   label = 98; break;
  case 33: 
   label = 62; break;
  case 34: 
   var $138=$value;
   $photometric=$138;
   var $139=$photometric;
   var $140=(($139)>>>(0)) > 3;
   if ($140) { label = 35; break; } else { label = 36; break; }
  case 35: 
   label = 98; break;
  case 36: 
   label = 62; break;
  case 37: 
   var $144=HEAP32[(($count1)>>2)];
   var $145=(($3+2168)|0);
   HEAP32[(($145)>>2)]=$144;
   var $146=$value;
   var $147=HEAP32[(($count1)>>2)];
   var $148=$fieldType;
   var $149=(($3+2160)|0);
   var $150=(($3+2164)|0);
   var $151=__ZN15GrFmtTiffReader9ReadTableEii13TiffFieldTypeRPiRi($3, $146, $147, $148, $149, $150);
   var $152=(($151)|(0)) < 0;
   if ($152) { label = 38; break; } else { label = 39; break; }
  case 38: 
   label = 98; break;
  case 39: 
   label = 62; break;
  case 40: 
   var $156=$value;
   $channels=$156;
   var $157=$channels;
   var $158=(($157)|(0))!=1;
   if ($158) { label = 41; break; } else { label = 44; break; }
  case 41: 
   var $160=$channels;
   var $161=(($160)|(0))!=3;
   if ($161) { label = 42; break; } else { label = 44; break; }
  case 42: 
   var $163=$channels;
   var $164=(($163)|(0))!=4;
   if ($164) { label = 43; break; } else { label = 44; break; }
  case 43: 
   label = 98; break;
  case 44: 
   label = 62; break;
  case 45: 
   var $168=$value;
   var $169=(($3+2172)|0);
   HEAP32[(($169)>>2)]=$168;
   label = 62; break;
  case 46: 
   var $171=$value;
   $planar_config=$171;
   var $172=$planar_config;
   var $173=(($172)|(0))!=1;
   if ($173) { label = 47; break; } else { label = 48; break; }
  case 47: 
   label = 98; break;
  case 48: 
   label = 62; break;
  case 49: 
   var $177=$fieldType;
   var $178=(($177)|(0))!=3;
   if ($178) { label = 51; break; } else { label = 50; break; }
  case 50: 
   var $180=HEAP32[(($count1)>>2)];
   var $181=(($180)|(0)) < 2;
   if ($181) { label = 51; break; } else { label = 52; break; }
  case 51: 
   label = 98; break;
  case 52: 
   var $184=$value;
   var $185=HEAP32[(($count1)>>2)];
   var $186=$fieldType;
   var $187=(($3+2152)|0);
   var $188=(($3+2156)|0);
   var $189=__ZN15GrFmtTiffReader9ReadTableEii13TiffFieldTypeRPiRi($3, $184, $185, $186, $187, $188);
   var $190=(($189)|(0)) < 0;
   if ($190) { label = 53; break; } else { label = 54; break; }
  case 53: 
   label = 98; break;
  case 54: 
   var $193=HEAP32[(($count1)>>2)];
   var $194=((((($193)|(0)))/(3))&-1);
   $pal_length=$194;
   var $195=$pal_length;
   var $196=(($195)|(0)) > 256;
   if ($196) { label = 55; break; } else { label = 56; break; }
  case 55: 
   label = 98; break;
  case 56: 
   $i=0;
   label = 57; break;
  case 57: 
   var $200=$i;
   var $201=$pal_length;
   var $202=(($200)|(0)) < (($201)|(0));
   if ($202) { label = 58; break; } else { label = 60; break; }
  case 58: 
   var $204=$i;
   var $205=(($3+2152)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=(($206+($204<<2))|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=$208 >> 8;
   var $210=(($209) & 255);
   var $211=$i;
   var $212=(($3+1124)|0);
   var $213=(($212+($211<<2))|0);
   var $214=(($213+2)|0);
   HEAP8[($214)]=$210;
   var $215=$i;
   var $216=$pal_length;
   var $217=((($215)+($216))|0);
   var $218=(($3+2152)|0);
   var $219=HEAP32[(($218)>>2)];
   var $220=(($219+($217<<2))|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=$221 >> 8;
   var $223=(($222) & 255);
   var $224=$i;
   var $225=(($3+1124)|0);
   var $226=(($225+($224<<2))|0);
   var $227=(($226+1)|0);
   HEAP8[($227)]=$223;
   var $228=$i;
   var $229=$pal_length;
   var $230=($229<<1);
   var $231=((($228)+($230))|0);
   var $232=(($3+2152)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=(($233+($231<<2))|0);
   var $235=HEAP32[(($234)>>2)];
   var $236=$235 >> 8;
   var $237=(($236) & 255);
   var $238=$i;
   var $239=(($3+1124)|0);
   var $240=(($239+($238<<2))|0);
   var $241=(($240)|0);
   HEAP8[($241)]=$237;
   label = 59; break;
  case 59: 
   var $243=$i;
   var $244=((($243)+(1))|0);
   $i=$244;
   label = 57; break;
  case 60: 
   label = 62; break;
  case 61: 
   label = 62; break;
  case 62: 
   label = 63; break;
  case 63: 
   var $249=$i;
   var $250=((($249)+(1))|0);
   $i=$250;
   label = 5; break;
  case 64: 
   var $252=(($3+2168)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=(($253)|(0))==1;
   if ($254) { label = 65; break; } else { label = 67; break; }
  case 65: 
   var $256=(($3+2172)|0);
   var $257=HEAP32[(($256)>>2)];
   var $258=(($257)|(0))==-1;
   if ($258) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $260=$3;
   var $261=(($260+12)|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=(($3+2172)|0);
   HEAP32[(($263)>>2)]=$262;
   label = 67; break;
  case 67: 
   var $265=$3;
   var $266=(($265+8)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($267)|(0)) > 0;
   if ($268) { label = 68; break; } else { label = 97; break; }
  case 68: 
   var $270=$3;
   var $271=(($270+12)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=(($272)|(0)) > 0;
   if ($273) { label = 69; break; } else { label = 97; break; }
  case 69: 
   var $275=(($3+2168)|0);
   var $276=HEAP32[(($275)>>2)];
   var $277=(($276)|(0)) > 0;
   if ($277) { label = 70; break; } else { label = 97; break; }
  case 70: 
   var $279=$3;
   var $280=(($279+12)|0);
   var $281=HEAP32[(($280)>>2)];
   var $282=(($3+2172)|0);
   var $283=HEAP32[(($282)>>2)];
   var $284=((($281)+($283))|0);
   var $285=((($284)-(1))|0);
   var $286=(($3+2172)|0);
   var $287=HEAP32[(($286)>>2)];
   var $288=((((($285)|(0)))/((($287)|(0))))&-1);
   var $289=(($3+2168)|0);
   var $290=HEAP32[(($289)>>2)];
   var $291=(($288)|(0))==(($290)|(0));
   if ($291) { label = 71; break; } else { label = 97; break; }
  case 71: 
   var $293=(($3+2148)|0);
   var $294=HEAP32[(($293)>>2)];
   if ((($294)|(0))==1) {
    label = 72; break;
   }
   else if ((($294)|(0))==4 | (($294)|(0))==8) {
    label = 77; break;
   }
   else {
   label = 95; break;
   }
  case 72: 
   var $296=$photometric;
   var $297=(($296)|(0))==0;
   if ($297) { label = 75; break; } else { label = 73; break; }
  case 73: 
   var $299=$photometric;
   var $300=(($299)|(0))==1;
   if ($300) { label = 74; break; } else { label = 76; break; }
  case 74: 
   var $302=$channels;
   var $303=(($302)|(0))==1;
   if ($303) { label = 75; break; } else { label = 76; break; }
  case 75: 
   var $305=(($3+1124)|0);
   var $306=(($305)|0);
   var $307=(($3+2148)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=$photometric;
   var $310=(($309)|(0))==0;
   __Z15FillGrayPaletteP12PaletteEntryib($306, $308, $310);
   $result=1;
   var $311=$3;
   var $312=(($311+4)|0);
   HEAP8[($312)]=0;
   label = 76; break;
  case 76: 
   label = 96; break;
  case 77: 
   var $315=$photometric;
   var $316=(($315)|(0))==0;
   if ($316) { label = 81; break; } else { label = 78; break; }
  case 78: 
   var $318=$photometric;
   var $319=(($318)|(0))==1;
   if ($319) { label = 81; break; } else { label = 79; break; }
  case 79: 
   var $321=$photometric;
   var $322=(($321)|(0))==3;
   if ($322) { label = 80; break; } else { label = 87; break; }
  case 80: 
   var $324=$pal_length;
   var $325=(($3+2148)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327=1 << $326;
   var $328=(($324)|(0))==(($327)|(0));
   if ($328) { label = 81; break; } else { label = 87; break; }
  case 81: 
   var $330=(($3+2176)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=(($331)|(0))!=2;
   if ($332) { label = 82; break; } else { label = 87; break; }
  case 82: 
   var $334=$channels;
   var $335=(($334)|(0))==1;
   if ($335) { label = 83; break; } else { label = 87; break; }
  case 83: 
   var $337=$pal_length;
   var $338=(($337)|(0)) < 0;
   if ($338) { label = 84; break; } else { label = 85; break; }
  case 84: 
   var $340=(($3+1124)|0);
   var $341=(($340)|0);
   var $342=(($3+2148)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344=$photometric;
   var $345=(($344)|(0))==0;
   __Z15FillGrayPaletteP12PaletteEntryib($341, $343, $345);
   var $346=$3;
   var $347=(($346+4)|0);
   HEAP8[($347)]=0;
   label = 86; break;
  case 85: 
   var $349=(($3+1124)|0);
   var $350=(($349)|0);
   var $351=(($3+2148)|0);
   var $352=HEAP32[(($351)>>2)];
   var $353=__Z14IsColorPaletteP12PaletteEntryi($350, $352);
   var $354=$3;
   var $355=(($354+4)|0);
   var $356=(($353)&(1));
   HEAP8[($355)]=$356;
   label = 86; break;
  case 86: 
   $result=1;
   label = 94; break;
  case 87: 
   var $359=$photometric;
   var $360=(($359)|(0))==2;
   if ($360) { label = 88; break; } else { label = 93; break; }
  case 88: 
   var $362=$pal_length;
   var $363=(($362)|(0)) < 0;
   if ($363) { label = 89; break; } else { label = 93; break; }
  case 89: 
   var $365=$channels;
   var $366=(($365)|(0))==3;
   if ($366) { label = 91; break; } else { label = 90; break; }
  case 90: 
   var $368=$channels;
   var $369=(($368)|(0))==4;
   if ($369) { label = 91; break; } else { label = 93; break; }
  case 91: 
   var $371=(($3+2176)|0);
   var $372=HEAP32[(($371)>>2)];
   var $373=(($372)|(0))==1;
   if ($373) { label = 92; break; } else { label = 93; break; }
  case 92: 
   var $375=$channels;
   var $376=($375<<3);
   var $377=(($3+2148)|0);
   HEAP32[(($377)>>2)]=$376;
   var $378=$3;
   var $379=(($378+4)|0);
   HEAP8[($379)]=1;
   $result=1;
   label = 93; break;
  case 93: 
   label = 94; break;
  case 94: 
   label = 96; break;
  case 95: 
   label = 98; break;
  case 96: 
   label = 97; break;
  case 97: 
   label = 98; break;
  case 98: 
   label = 99; break;
  case 99: 
   var $387=$result;
   var $388=(($387) & 1);
   if ($388) { label = 101; break; } else { label = 100; break; }
  case 100: 
   var $390=(($3+2168)|0);
   HEAP32[(($390)>>2)]=-1;
   var $391=$3;
   var $392=(($391+12)|0);
   HEAP32[(($392)>>2)]=-1;
   var $393=$3;
   var $394=(($393+8)|0);
   HEAP32[(($394)>>2)]=-1;
   var $395=(($3+1048)|0);
   var $396=$395;
   var $397=$396;
   var $398=HEAP32[(($397)>>2)];
   var $399=(($398+12)|0);
   var $400=HEAP32[(($399)>>2)];
   FUNCTION_TABLE[$400]($396);
   label = 101; break;
  case 101: 
   var $402=$result;
   var $403=(($402) & 1);
   $1=$403;
   label = 102; break;
  case 102: 
   var $405=$1;
   STACKTOP = sp;
   return $405;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN15GrFmtTiffReader8ReadDataEPhii($this, $data, $step, $color) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4384)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"10": function(value) { label = 49; $58 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $buffer_size;
   var $buffer=sp;
   var $gray_palette=(sp)+(4096);
   var $result;
   var $src;
   var $src_pitch;
   var $y;
   var $s;
   var $y_limit;
   var $6=(sp)+(4352);
   var $7=(sp)+(4360);
   var $8=(sp)+(4368);
   var $9=(sp)+(4376);
   $2=$this;
   $3=$data;
   $4=$step;
   $5=$color;
   var $10=$2;
   $buffer_size=4096;
   $result=0;
   var $11=(($buffer)|0);
   $src=$11;
   var $12=$10;
   var $13=(($12+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($10+2148)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(Math.imul($14,$16)|0);
   var $18=((($17)+(7))|0);
   var $19=((((($18)|(0)))/(8))&-1);
   $src_pitch=$19;
   $y=0;
   var $20=(($10+2168)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0)) < 0;
   if ($22) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $24=(($10+1048)|0);
   var $25=$24;
   var $26=__ZN11RBaseStream8IsOpenedEv($25);
   if ($26) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 48; break;
  case 4: 
   var $29=$src_pitch;
   var $30=((($29)+(32))|0);
   var $31=(($30)|(0)) > 4096;
   if ($31) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $33=$src_pitch;
   var $34=((($33)+(32))|0);
   var $35=(($34)|(0)) < 0;
   var $36=$35 ? -1 : $34;
   var $37=__Znaj($36);
   $src=$37;
   label = 6; break;
  case 6: 
   var $39=$5;
   var $40=(($39)|(0))!=0;
   if ($40) { label = 10; break; } else { label = 7; break; }
  case 7: 
   var $42=(($10+2148)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0)) <= 8;
   if ($44) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $46=(($10+1124)|0);
   var $47=(($46)|0);
   var $48=(($gray_palette)|0);
   var $49=(($10+2148)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=1 << $50;
   __Z16CvtPaletteToGrayPK12PaletteEntryPhi($47, $48, $51);
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $54=(($10+1048)|0);
   var $55=$54;
   var $56=__ZN11RBaseStream6JmpBufEv($55);
   var $57=(($56)|0);
   var $58=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($57)>>2)]=tempInt, 0);
   label = 49; break;
  case 49: 
   var $59=(($58)|(0))==0;
   if ($59) { label = 11; break; } else { label = 43; break; }
  case 11: 
   $s=0;
   label = 12; break;
  case 12: 
   var $62=$s;
   var $63=(($10+2168)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($62)|(0)) < (($64)|(0));
   if ($65) { label = 13; break; } else { label = 42; break; }
  case 13: 
   var $67=(($10+2172)|0);
   var $68=HEAP32[(($67)>>2)];
   $y_limit=$68;
   var $69=$y;
   var $70=$y_limit;
   var $71=((($70)+($69))|0);
   $y_limit=$71;
   var $72=$y_limit;
   var $73=$10;
   var $74=(($73+12)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($72)|(0)) > (($75)|(0));
   if ($76) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $78=$10;
   var $79=(($78+12)|0);
   var $80=HEAP32[(($79)>>2)];
   $y_limit=$80;
   label = 15; break;
  case 15: 
   var $82=(($10+1048)|0);
   var $83=$82;
   var $84=$s;
   var $85=(($10+2160)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+($84<<2))|0);
   var $88=HEAP32[(($87)>>2)];
   __ZN11RBaseStream6SetPosEi($83, $88);
   var $89=(($10+2176)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))==1;
   if ($91) { label = 16; break; } else { label = 38; break; }
  case 16: 
   label = 17; break;
  case 17: 
   var $94=$y;
   var $95=$y_limit;
   var $96=(($94)|(0)) < (($95)|(0));
   if ($96) { label = 18; break; } else { label = 37; break; }
  case 18: 
   var $98=(($10+1048)|0);
   var $99=$src;
   var $100=$src_pitch;
   __ZN12RLByteStream8GetBytesEPviPi($98, $99, $100, 0);
   var $101=$5;
   var $102=(($101)|(0))!=0;
   if ($102) { label = 19; break; } else { label = 27; break; }
  case 19: 
   var $104=(($10+2148)|0);
   var $105=HEAP32[(($104)>>2)];
   if ((($105)|(0))==1) {
    label = 20; break;
   }
   else if ((($105)|(0))==4) {
    label = 21; break;
   }
   else if ((($105)|(0))==8) {
    label = 22; break;
   }
   else if ((($105)|(0))==24) {
    label = 23; break;
   }
   else if ((($105)|(0))==32) {
    label = 24; break;
   }
   else {
   label = 25; break;
   }
  case 20: 
   var $107=$3;
   var $108=$src;
   var $109=$10;
   var $110=(($109+8)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($10+1124)|0);
   var $113=(($112)|0);
   var $114=__Z13FillColorRow1PhS_iP12PaletteEntry($107, $108, $111, $113);
   label = 26; break;
  case 21: 
   var $116=$3;
   var $117=$src;
   var $118=$10;
   var $119=(($118+8)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($10+1124)|0);
   var $122=(($121)|0);
   var $123=__Z13FillColorRow4PhS_iP12PaletteEntry($116, $117, $120, $122);
   label = 26; break;
  case 22: 
   var $125=$3;
   var $126=$src;
   var $127=$10;
   var $128=(($127+8)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($10+1124)|0);
   var $131=(($130)|0);
   var $132=__Z13FillColorRow8PhS_iP12PaletteEntry($125, $126, $129, $131);
   label = 26; break;
  case 23: 
   var $134=$src;
   var $135=$3;
   var $136=$10;
   var $137=(($136+8)|0);
   var $138=HEAP32[(($137)>>2)];
   __Z6cvSizeii($6, $138, 1);
   __Z21icvCvt_BGR2RGB_8u_C3RPKhiPhi6CvSize($134, 0, $135, 0, $6);
   label = 26; break;
  case 24: 
   var $140=$src;
   var $141=$3;
   var $142=$10;
   var $143=(($142+8)|0);
   var $144=HEAP32[(($143)>>2)];
   __Z6cvSizeii($7, $144, 1);
   __Z24icvCvt_BGRA2BGR_8u_C4C3RPKhiPhi6CvSizei($140, 0, $141, 0, $7, 2);
   label = 26; break;
  case 25: 
   label = 40; break;
  case 26: 
   label = 35; break;
  case 27: 
   var $148=(($10+2148)|0);
   var $149=HEAP32[(($148)>>2)];
   if ((($149)|(0))==1) {
    label = 28; break;
   }
   else if ((($149)|(0))==4) {
    label = 29; break;
   }
   else if ((($149)|(0))==8) {
    label = 30; break;
   }
   else if ((($149)|(0))==24) {
    label = 31; break;
   }
   else if ((($149)|(0))==32) {
    label = 32; break;
   }
   else {
   label = 33; break;
   }
  case 28: 
   var $151=$3;
   var $152=$src;
   var $153=$10;
   var $154=(($153+8)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($gray_palette)|0);
   var $157=__Z12FillGrayRow1PhS_iS_($151, $152, $155, $156);
   label = 34; break;
  case 29: 
   var $159=$3;
   var $160=$src;
   var $161=$10;
   var $162=(($161+8)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($gray_palette)|0);
   var $165=__Z12FillGrayRow4PhS_iS_($159, $160, $163, $164);
   label = 34; break;
  case 30: 
   var $167=$3;
   var $168=$src;
   var $169=$10;
   var $170=(($169+8)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($gray_palette)|0);
   var $173=__Z12FillGrayRow8PhS_iS_($167, $168, $171, $172);
   label = 34; break;
  case 31: 
   var $175=$src;
   var $176=$3;
   var $177=$10;
   var $178=(($177+8)|0);
   var $179=HEAP32[(($178)>>2)];
   __Z6cvSizeii($8, $179, 1);
   __Z24icvCvt_BGR2Gray_8u_C3C1RPKhiPhi6CvSizei($175, 0, $176, 0, $8, 2);
   label = 34; break;
  case 32: 
   var $181=$src;
   var $182=$3;
   var $183=$10;
   var $184=(($183+8)|0);
   var $185=HEAP32[(($184)>>2)];
   __Z6cvSizeii($9, $185, 1);
   __Z25icvCvt_BGRA2Gray_8u_C4C1RPKhiPhi6CvSizei($181, 0, $182, 0, $9, 2);
   label = 34; break;
  case 33: 
   label = 40; break;
  case 34: 
   label = 35; break;
  case 35: 
   label = 36; break;
  case 36: 
   var $190=$y;
   var $191=((($190)+(1))|0);
   $y=$191;
   var $192=$4;
   var $193=$3;
   var $194=(($193+$192)|0);
   $3=$194;
   label = 17; break;
  case 37: 
   label = 39; break;
  case 38: 
   label = 39; break;
  case 39: 
   $result=1;
   label = 40; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $200=$s;
   var $201=((($200)+(1))|0);
   $s=$201;
   label = 12; break;
  case 42: 
   label = 43; break;
  case 43: 
   var $204=$src;
   var $205=(($buffer)|0);
   var $206=(($204)|(0))!=(($205)|(0));
   if ($206) { label = 44; break; } else { label = 47; break; }
  case 44: 
   var $208=$src;
   var $209=(($208)|(0))==0;
   if ($209) { label = 46; break; } else { label = 45; break; }
  case 45: 
   __ZdaPv($208);
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   var $213=$result;
   var $214=(($213) & 1);
   $1=$214;
   label = 48; break;
  case 48: 
   var $216=$1;
   STACKTOP = sp;
   return $216;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function __ZN15GrFmtTiffWriterD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN15GrFmtTiffWriterD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($this, $tag, $fieldType, $count, $value) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$this;
 $2=$tag;
 $3=$fieldType;
 $4=$count;
 $5=$value;
 var $6=$1;
 var $7=(($6+1028)|0);
 var $8=$2;
 __ZN12WLByteStream7PutWordEi($7, $8);
 var $9=(($6+1028)|0);
 var $10=$3;
 __ZN12WLByteStream7PutWordEi($9, $10);
 var $11=(($6+1028)|0);
 var $12=$4;
 __ZN12WLByteStream8PutDWordEi($11, $12);
 var $13=(($6+1028)|0);
 var $14=$5;
 __ZN12WLByteStream8PutDWordEi($13, $14);
 return;
}
function __ZN15GrFmtTiffWriterC2EPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$this;
   $2=$filename;
   var $5=$1;
   var $6=$5;
   var $7=$2;
   __ZN11GrFmtWriterC2EPKc($6, $7);
   var $8=$5;
   HEAP32[(($8)>>2)]=((18792)|0);
   var $9=(($5+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN12WLByteStreamC1Ev($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return;
  case 3: 
   var $12$0 = ___cxa_find_matching_catch(-1, -1); $12$1 = tempRet0;
   var $13=$12$0;
   $3=$13;
   var $14=$12$1;
   $4=$14;
   var $15=$5;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $18=$3;
   var $19=$4;
   var $20$0=$18;
   var $20$1=0;
   var $21$0=$20$0;
   var $21$1=$19;
   ___resumeException($21$0)
  case 6: 
   var $23$0 = ___cxa_find_matching_catch(-1, -1,0); $23$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN15GrFmtTiffWriterD2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   HEAP32[(($5)>>2)]=((18792)|0);
   var $6=(($4+1028)|0);
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$4;
   __ZN11GrFmtWriterD2Ev($8);
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11GrFmtWriterD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z13bsIsBigEndianv() {
 var label = 0;
 var $1=HEAP32[((7712)>>2)];
 var $2=$1 & 255;
 var $3=(($2)|(0))!=0;
 return $3;
}
function __Z12bsBSwapBlockPhS_($start, $end) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $data;
   var $i;
   var $size;
   var $temp;
   $1=$start;
   $2=$end;
   var $3=$1;
   var $4=$3;
   $data=$4;
   var $5=$2;
   var $6=$1;
   var $7=$5;
   var $8=$6;
   var $9=((($7)-($8))|0);
   var $10=((($9)+(3))|0);
   var $11=((((($10)|(0)))/(4))&-1);
   $size=$11;
   $i=0;
   label = 2; break;
  case 2: 
   var $13=$i;
   var $14=$size;
   var $15=(($13)|(0)) < (($14)|(0));
   if ($15) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $17=$i;
   var $18=$data;
   var $19=(($18+($17<<2))|0);
   var $20=HEAP32[(($19)>>2)];
   $temp=$20;
   var $21=$temp;
   var $22=$21 << 24;
   var $23=$temp;
   var $24=$23 & 65280;
   var $25=$24 << 8;
   var $26=$22 | $25;
   var $27=$temp;
   var $28=$27 >>> 8;
   var $29=$28 & 65280;
   var $30=$26 | $29;
   var $31=$temp;
   var $32=$31 >>> 24;
   var $33=$30 | $32;
   $temp=$33;
   var $34=$temp;
   var $35=$i;
   var $36=$data;
   var $37=(($36+($35<<2))|0);
   HEAP32[(($37)>>2)]=$34;
   label = 4; break;
  case 4: 
   var $39=$i;
   var $40=((($39)+(1))|0);
   $i=$40;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RBaseStream8IsOpenedEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+73)|0);
 var $4=HEAP8[($3)];
 var $5=(($4) & 1);
 return $5;
}
function __ZN11RBaseStreamC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((19600)|0);
 var $4=(($2+52)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($2+48)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($2+44)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($2+56)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($2+64)|0);
 HEAP32[(($8)>>2)]=32768;
 var $9=(($2+60)|0);
 HEAP32[(($9)>>2)]=4;
 var $10=(($2+73)|0);
 HEAP8[($10)]=0;
 var $11=(($2+72)|0);
 HEAP8[($11)]=0;
 return;
}
function __ZN11RBaseStream6SetPosEi($this, $pos) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $offset;
   var $block_pos;
   $1=$this;
   $2=$pos;
   var $3=$1;
   var $4=$2;
   var $5=(($3+64)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=((($6)-(1))|0);
   var $8=$4 & $7;
   $offset=$8;
   var $9=$2;
   var $10=$offset;
   var $11=((($9)-($10))|0);
   $block_pos=$11;
   var $12=(($3+52)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($3+48)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($13)>>>(0)) < (($15)>>>(0));
   if ($16) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $18=$block_pos;
   var $19=(($3+68)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($3+64)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($20)-($22))|0);
   var $24=(($18)|(0))==(($23)|(0));
   if ($24) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $26=(($3+44)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$offset;
   var $29=(($27+$28)|0);
   var $30=(($3+52)|0);
   HEAP32[(($30)>>2)]=$29;
   label = 5; break;
  case 4: 
   var $32=$block_pos;
   var $33=(($3+68)|0);
   HEAP32[(($33)>>2)]=$32;
   var $34=(($3+44)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($3+64)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($35+$37)|0);
   var $39=$offset;
   var $40=(($38+$39)|0);
   var $41=(($3+52)|0);
   HEAP32[(($41)>>2)]=$40;
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RBaseStream6GetPosEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+68)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+64)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=((($4)-($6))|0);
 var $8=(($2+52)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($2+44)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$9;
 var $13=$11;
 var $14=((($12)-($13))|0);
 var $15=((($7)+($14))|0);
 return $15;
}
function __ZN11RBaseStream4SkipEi($this, $bytes) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$bytes;
 var $3=$1;
 var $4=$2;
 var $5=(($3+52)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+$4)|0);
 HEAP32[(($5)>>2)]=$7;
 return;
}
function __ZN11RBaseStream6JmpBufEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+72)|0);
 HEAP8[($3)]=1;
 var $4=(($2+4)|0);
 return $4;
}
function __ZN15GrFmtTiffWriter10WriteImageEPKhiiiii($this, $data, $step, $width, $height, $0, $channels) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $result;
   var $fileStep;
   var $rowsPerStrip;
   var $i;
   var $stripCount;
   var $directoryOffset;
   var $stripOffsets;
   var $stripCounts;
   var $buffer;
   var $stripOffsetsOffset;
   var $stripCountsOffset;
   var $bitsPerSample;
   var $y;
   var $limit;
   var $9=sp;
   var $10=(sp)+(8);
   var $f;
   $2=$this;
   $3=$data;
   $4=$step;
   $5=$width;
   $6=$height;
   $7=$0;
   $8=$channels;
   var $11=$2;
   $result=0;
   var $12=$5;
   var $13=$8;
   var $14=(Math.imul($12,$13)|0);
   $fileStep=$14;
   var $15=(($11+1028)|0);
   var $16=$15;
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+8)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$11;
   var $22=(($21+4)|0);
   var $23=(($22)|0);
   var $24=FUNCTION_TABLE[$20]($16, $23);
   if ($24) { label = 2; break; } else { label = 53; break; }
  case 2: 
   var $26=$fileStep;
   var $27=(((8192)/((($26)|(0))))&-1);
   $rowsPerStrip=$27;
   var $28=$rowsPerStrip;
   var $29=(($28)|(0)) < 1;
   if ($29) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $rowsPerStrip=1;
   label = 4; break;
  case 4: 
   var $32=$rowsPerStrip;
   var $33=$6;
   var $34=(($32)|(0)) > (($33)|(0));
   if ($34) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $36=$6;
   $rowsPerStrip=$36;
   label = 6; break;
  case 6: 
   var $38=$6;
   var $39=$rowsPerStrip;
   var $40=((($38)+($39))|0);
   var $41=((($40)-(1))|0);
   var $42=$rowsPerStrip;
   var $43=((((($41)|(0)))/((($42)|(0))))&-1);
   $stripCount=$43;
   $directoryOffset=0;
   var $44=$stripCount;
   var $45$0=_llvm_umul_with_overflow_i32($44, 4);
   var $45$1=tempRet0;
   var $46=$45$1;
   var $47=$45$0;
   var $48=$46 ? -1 : $47;
   var $49=__Znaj($48);
   var $50=$49;
   $stripOffsets=$50;
   var $51=$stripCount;
   var $52$0=_llvm_umul_with_overflow_i32($51, 2);
   var $52$1=tempRet0;
   var $53=$52$1;
   var $54=$52$0;
   var $55=$53 ? -1 : $54;
   var $56=__Znaj($55);
   var $57=$56;
   $stripCounts=$57;
   var $58=$fileStep;
   var $59=((($58)+(32))|0);
   var $60=(($59)|(0)) < 0;
   var $61=$60 ? -1 : $59;
   var $62=__Znaj($61);
   $buffer=$62;
   $stripOffsetsOffset=0;
   $stripCountsOffset=0;
   $bitsPerSample=8;
   $y=0;
   var $63=(($11+1028)|0);
   __ZN12WLByteStream8PutBytesEPKvi($63, ((23088)|0), 4);
   var $64=(($11+1028)|0);
   var $65=$directoryOffset;
   __ZN12WLByteStream8PutDWordEi($64, $65);
   $i=0;
   label = 7; break;
  case 7: 
   var $67=$i;
   var $68=$stripCount;
   var $69=(($67)|(0)) < (($68)|(0));
   if ($69) { label = 8; break; } else { label = 24; break; }
  case 8: 
   var $71=$y;
   var $72=$rowsPerStrip;
   var $73=((($71)+($72))|0);
   $limit=$73;
   var $74=$limit;
   var $75=$6;
   var $76=(($74)|(0)) > (($75)|(0));
   if ($76) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $78=$6;
   $limit=$78;
   label = 10; break;
  case 10: 
   var $80=(($11+1028)|0);
   var $81=$80;
   var $82=__ZN11WBaseStream6GetPosEv($81);
   var $83=$i;
   var $84=$stripOffsets;
   var $85=(($84+($83<<2))|0);
   HEAP32[(($85)>>2)]=$82;
   label = 11; break;
  case 11: 
   var $87=$y;
   var $88=$limit;
   var $89=(($87)|(0)) < (($88)|(0));
   if ($89) { label = 12; break; } else { label = 22; break; }
  case 12: 
   var $91=$8;
   var $92=(($91)|(0))==3;
   if ($92) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $94=$3;
   var $95=$buffer;
   var $96=$5;
   __Z6cvSizeii($9, $96, 1);
   __Z21icvCvt_BGR2RGB_8u_C3RPKhiPhi6CvSize($94, 0, $95, 0, $9);
   label = 17; break;
  case 14: 
   var $98=$8;
   var $99=(($98)|(0))==4;
   if ($99) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $101=$3;
   var $102=$buffer;
   var $103=$5;
   __Z6cvSizeii($10, $103, 1);
   __Z23icvCvt_BGRA2RGBA_8u_C4RPKhiPhi6CvSize($101, 0, $102, 0, $10);
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $106=(($11+1028)|0);
   var $107=$8;
   var $108=(($107)|(0)) > 1;
   if ($108) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $110=$buffer;
   var $114 = $110;label = 20; break;
  case 19: 
   var $112=$3;
   var $114 = $112;label = 20; break;
  case 20: 
   var $114;
   var $115=$fileStep;
   __ZN12WLByteStream8PutBytesEPKvi($106, $114, $115);
   label = 21; break;
  case 21: 
   var $117=$y;
   var $118=((($117)+(1))|0);
   $y=$118;
   var $119=$4;
   var $120=$3;
   var $121=(($120+$119)|0);
   $3=$121;
   label = 11; break;
  case 22: 
   var $123=(($11+1028)|0);
   var $124=$123;
   var $125=__ZN11WBaseStream6GetPosEv($124);
   var $126=$i;
   var $127=$stripOffsets;
   var $128=(($127+($126<<2))|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=((($125)-($129))|0);
   var $131=(($130) & 65535);
   var $132=$i;
   var $133=$stripCounts;
   var $134=(($133+($132<<1))|0);
   HEAP16[(($134)>>1)]=$131;
   label = 23; break;
  case 23: 
   var $136=$i;
   var $137=((($136)+(1))|0);
   $i=$137;
   label = 7; break;
  case 24: 
   var $139=$stripCount;
   var $140=(($139)|(0)) > 2;
   if ($140) { label = 25; break; } else { label = 34; break; }
  case 25: 
   var $142=(($11+1028)|0);
   var $143=$142;
   var $144=__ZN11WBaseStream6GetPosEv($143);
   $stripOffsetsOffset=$144;
   $i=0;
   label = 26; break;
  case 26: 
   var $146=$i;
   var $147=$stripCount;
   var $148=(($146)|(0)) < (($147)|(0));
   if ($148) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $150=(($11+1028)|0);
   var $151=$i;
   var $152=$stripOffsets;
   var $153=(($152+($151<<2))|0);
   var $154=HEAP32[(($153)>>2)];
   __ZN12WLByteStream8PutDWordEi($150, $154);
   label = 28; break;
  case 28: 
   var $156=$i;
   var $157=((($156)+(1))|0);
   $i=$157;
   label = 26; break;
  case 29: 
   var $159=(($11+1028)|0);
   var $160=$159;
   var $161=__ZN11WBaseStream6GetPosEv($160);
   $stripCountsOffset=$161;
   $i=0;
   label = 30; break;
  case 30: 
   var $163=$i;
   var $164=$stripCount;
   var $165=(($163)|(0)) < (($164)|(0));
   if ($165) { label = 31; break; } else { label = 33; break; }
  case 31: 
   var $167=(($11+1028)|0);
   var $168=$i;
   var $169=$stripCounts;
   var $170=(($169+($168<<1))|0);
   var $171=HEAP16[(($170)>>1)];
   var $172=(($171 << 16) >> 16);
   __ZN12WLByteStream7PutWordEi($167, $172);
   label = 32; break;
  case 32: 
   var $174=$i;
   var $175=((($174)+(1))|0);
   $i=$175;
   label = 30; break;
  case 33: 
   label = 42; break;
  case 34: 
   var $178=$stripCount;
   var $179=(($178)|(0))==2;
   if ($179) { label = 35; break; } else { label = 40; break; }
  case 35: 
   var $181=(($11+1028)|0);
   var $182=$181;
   var $183=__ZN11WBaseStream6GetPosEv($182);
   $stripOffsetsOffset=$183;
   $i=0;
   label = 36; break;
  case 36: 
   var $185=$i;
   var $186=$stripCount;
   var $187=(($185)|(0)) < (($186)|(0));
   if ($187) { label = 37; break; } else { label = 39; break; }
  case 37: 
   var $189=(($11+1028)|0);
   var $190=$i;
   var $191=$stripOffsets;
   var $192=(($191+($190<<2))|0);
   var $193=HEAP32[(($192)>>2)];
   __ZN12WLByteStream8PutDWordEi($189, $193);
   label = 38; break;
  case 38: 
   var $195=$i;
   var $196=((($195)+(1))|0);
   $i=$196;
   label = 36; break;
  case 39: 
   var $198=$stripCounts;
   var $199=(($198)|0);
   var $200=HEAP16[(($199)>>1)];
   var $201=(($200 << 16) >> 16);
   var $202=$stripCounts;
   var $203=(($202+2)|0);
   var $204=HEAP16[(($203)>>1)];
   var $205=(($204 << 16) >> 16);
   var $206=$205 << 16;
   var $207=((($201)+($206))|0);
   $stripCountsOffset=$207;
   label = 41; break;
  case 40: 
   var $209=$stripOffsets;
   var $210=(($209)|0);
   var $211=HEAP32[(($210)>>2)];
   $stripOffsetsOffset=$211;
   var $212=$stripCounts;
   var $213=(($212)|0);
   var $214=HEAP16[(($213)>>1)];
   var $215=(($214 << 16) >> 16);
   $stripCountsOffset=$215;
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   var $218=$8;
   var $219=(($218)|(0)) > 1;
   if ($219) { label = 43; break; } else { label = 46; break; }
  case 43: 
   var $221=(($11+1028)|0);
   var $222=$221;
   var $223=__ZN11WBaseStream6GetPosEv($222);
   $bitsPerSample=$223;
   var $224=(($11+1028)|0);
   __ZN12WLByteStream7PutWordEi($224, 8);
   var $225=(($11+1028)|0);
   __ZN12WLByteStream7PutWordEi($225, 8);
   var $226=(($11+1028)|0);
   __ZN12WLByteStream7PutWordEi($226, 8);
   var $227=$8;
   var $228=(($227)|(0))==4;
   if ($228) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $230=(($11+1028)|0);
   __ZN12WLByteStream7PutWordEi($230, 8);
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $233=(($11+1028)|0);
   var $234=$233;
   var $235=__ZN11WBaseStream6GetPosEv($234);
   $directoryOffset=$235;
   var $236=(($11+1028)|0);
   __ZN12WLByteStream7PutWordEi($236, 9);
   var $237=$5;
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 256, 4, 1, $237);
   var $238=$6;
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 257, 4, 1, $238);
   var $239=$8;
   var $240=$bitsPerSample;
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 258, 3, $239, $240);
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 259, 4, 1, 1);
   var $241=$8;
   var $242=(($241)|(0)) > 1;
   var $243=$242 ? 2 : 1;
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 262, 3, 1, $243);
   var $244=$stripCount;
   var $245=$stripOffsetsOffset;
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 273, 4, $244, $245);
   var $246=$8;
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 277, 3, 1, $246);
   var $247=$rowsPerStrip;
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 278, 4, 1, $247);
   var $248=$stripCount;
   var $249=(($248)|(0)) > 1;
   var $250=$249 ? 3 : 4;
   var $251=$stripCount;
   var $252=$stripCountsOffset;
   __ZN15GrFmtTiffWriter8WriteTagE7TiffTag13TiffFieldTypeii($11, 279, $250, $251, $252);
   var $253=(($11+1028)|0);
   __ZN12WLByteStream8PutDWordEi($253, 0);
   var $254=(($11+1028)|0);
   var $255=$254;
   var $256=$255;
   var $257=HEAP32[(($256)>>2)];
   var $258=(($257+12)|0);
   var $259=HEAP32[(($258)>>2)];
   FUNCTION_TABLE[$259]($255);
   var $260=$11;
   var $261=(($260+4)|0);
   var $262=(($261)|0);
   var $263=_fopen($262, ((11792)|0));
   $f=$263;
   var $264=$directoryOffset;
   var $265=(($264) & 255);
   var $266=$buffer;
   var $267=(($266)|0);
   HEAP8[($267)]=$265;
   var $268=$directoryOffset;
   var $269=$268 >> 8;
   var $270=(($269) & 255);
   var $271=$buffer;
   var $272=(($271+1)|0);
   HEAP8[($272)]=$270;
   var $273=$directoryOffset;
   var $274=$273 >> 16;
   var $275=(($274) & 255);
   var $276=$buffer;
   var $277=(($276+2)|0);
   HEAP8[($277)]=$275;
   var $278=$directoryOffset;
   var $279=$278 >> 24;
   var $280=(($279) & 255);
   var $281=$buffer;
   var $282=(($281+3)|0);
   HEAP8[($282)]=$280;
   var $283=$f;
   var $284=_fseek($283, 4, 0);
   var $285=$buffer;
   var $286=$f;
   var $287=_fwrite($285, 1, 4, $286);
   var $288=$f;
   var $289=_fclose($288);
   var $290=$stripOffsets;
   var $291=(($290)|(0))==0;
   if ($291) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $293=$290;
   __ZdaPv($293);
   label = 48; break;
  case 48: 
   var $295=$stripCounts;
   var $296=(($295)|(0))==0;
   if ($296) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $298=$295;
   __ZdaPv($298);
   label = 50; break;
  case 50: 
   var $300=$buffer;
   var $301=(($300)|(0))==0;
   if ($301) { label = 52; break; } else { label = 51; break; }
  case 51: 
   __ZdaPv($300);
   label = 52; break;
  case 52: 
   $result=1;
   label = 53; break;
  case 53: 
   var $305=$result;
   var $306=(($305) & 1);
   STACKTOP = sp;
   return $306;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RBaseStream8AllocateEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+44)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($2+64)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($2+60)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=((($8)+($10))|0);
   var $12=(($11)|(0)) < 0;
   var $13=$12 ? -1 : $11;
   var $14=__Znaj($13);
   var $15=(($2+44)|0);
   HEAP32[(($15)>>2)]=$14;
   var $16=(($2+60)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($2+44)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+$17)|0);
   HEAP32[(($18)>>2)]=$20;
   label = 3; break;
  case 3: 
   var $22=(($2+44)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($2+64)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($23+$25)|0);
   var $27=(($2+48)|0);
   HEAP32[(($27)>>2)]=$26;
   var $28=(($2+48)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($2+52)|0);
   HEAP32[(($30)>>2)]=$29;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RBaseStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RBaseStreamD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((19600)|0);
 var $4=$2;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+12)|0);
 var $7=HEAP32[(($6)>>2)];
 FUNCTION_TABLE[$7]($2);
 var $8=$2;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+20)|0);
 var $11=HEAP32[(($10)>>2)];
 FUNCTION_TABLE[$11]($2);
 return;
}
function __ZN11RBaseStream9ReadBlockEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $readed;
   $1=$this;
   var $2=$1;
   var $3=(($2+44)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=(($2+44)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($2+60)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(((-$10))|0);
   var $12=(($8+$11)|0);
   var $13=(($2+48)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($2+60)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(((-$16))|0);
   var $18=(($14+$17)|0);
   var $19=(($2+60)|0);
   var $20=HEAP32[(($19)>>2)];
   assert($20 % 1 === 0);(_memcpy($12, $18, $20)|0);
   label = 3; break;
  case 3: 
   var $22=__ZN11RBaseStream6GetPosEv($2);
   __ZN11RBaseStream6SetPosEi($2, $22);
   var $23=(($2+56)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($2+68)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=_fseek($24, $26, 0);
   var $28=(($2+44)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($2+64)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($2+56)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=_fread($29, 1, $31, $33);
   $readed=$34;
   var $35=(($2+44)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$readed;
   var $38=(($36+$37)|0);
   var $39=(($2+48)|0);
   HEAP32[(($39)>>2)]=$38;
   var $40=(($2+64)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($2+52)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(((-$41))|0);
   var $45=(($43+$44)|0);
   HEAP32[(($42)>>2)]=$45;
   var $46=(($2+64)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($2+68)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=((($49)+($47))|0);
   HEAP32[(($48)>>2)]=$50;
   var $51=$readed;
   var $52=(($51)|(0))==0;
   if ($52) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $54=(($2+52)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($2+48)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($55)>>>(0)) >= (($57)>>>(0));
   if ($58) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $60=(($2+72)|0);
   var $61=HEAP8[($60)];
   var $62=(($61) & 1);
   if ($62) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $64=(($2+4)|0);
   var $65=(($64)|0);
   _longjmp($65, -123);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RBaseStream4OpenEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$filename;
   var $3=$1;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   FUNCTION_TABLE[$7]($3);
   var $8=$3;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+24)|0);
   var $11=HEAP32[(($10)>>2)];
   FUNCTION_TABLE[$11]($3);
   var $12=$2;
   var $13=_fopen($12, ((12568)|0));
   var $14=(($3+56)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=(($3+56)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=(($3+73)|0);
   HEAP8[($19)]=1;
   __ZN11RBaseStream6SetPosEi($3, 0);
   label = 3; break;
  case 3: 
   var $21=(($3+56)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))!=0;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RBaseStream5CloseEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+56)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=(($2+56)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=_fclose($8);
   var $10=(($2+56)|0);
   HEAP32[(($10)>>2)]=0;
   label = 3; break;
  case 3: 
   var $12=(($2+73)|0);
   HEAP8[($12)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RBaseStream7ReleaseEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+44)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $7=(($2+44)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($2+60)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(((-$10))|0);
   var $12=(($8+$11)|0);
   var $13=(($12)|(0))==0;
   if ($13) { label = 4; break; } else { label = 3; break; }
  case 3: 
   __ZdaPv($12);
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $17=(($2+52)|0);
   HEAP32[(($17)>>2)]=0;
   var $18=(($2+48)|0);
   HEAP32[(($18)>>2)]=0;
   var $19=(($2+44)|0);
   HEAP32[(($19)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RMBitStream4MoveEi($this, $shift) {
 var label = 0;
 var $1;
 var $2;
 var $new_bit_idx;
 $1=$this;
 $2=$shift;
 var $3=$1;
 var $4=$3;
 var $5=(($4+76)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=((($6)-($7))|0);
 $new_bit_idx=$8;
 var $9=$new_bit_idx;
 var $10=$9 >> 5;
 var $11=$10 << 2;
 var $12=$3;
 var $13=(($12+52)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(((-$11))|0);
 var $16=(($14+$15)|0);
 HEAP32[(($13)>>2)]=$16;
 var $17=$new_bit_idx;
 var $18=$17 & 31;
 var $19=$3;
 var $20=(($19+76)|0);
 HEAP32[(($20)>>2)]=$18;
 return;
}
function __ZN12RLByteStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RLByteStream7GetByteEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $current;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+52)|0);
   var $5=HEAP32[(($4)>>2)];
   $current=$5;
   var $6=$current;
   var $7=$2;
   var $8=(($7+48)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)>>>(0)) >= (($9)>>>(0));
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$2;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+16)|0);
   var $16=HEAP32[(($15)>>2)];
   FUNCTION_TABLE[$16]($12);
   var $17=$2;
   var $18=(($17+52)|0);
   var $19=HEAP32[(($18)>>2)];
   $current=$19;
   label = 3; break;
  case 3: 
   var $21=$current;
   var $22=HEAP8[($21)];
   var $23=(($22)&(255));
   $val=$23;
   var $24=$current;
   var $25=(($24+1)|0);
   var $26=$2;
   var $27=(($26+52)|0);
   HEAP32[(($27)>>2)]=$25;
   var $28=$val;
   return $28;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RLByteStream8GetBytesEPviPi($this, $buffer, $count, $readed) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $data;
   var $l;
   $1=$this;
   $2=$buffer;
   $3=$count;
   $4=$readed;
   var $5=$1;
   var $6=$2;
   $data=$6;
   var $7=$4;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$4;
   HEAP32[(($10)>>2)]=0;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $13=$3;
   var $14=(($13)|(0)) > 0;
   if ($14) { label = 5; break; } else { label = 14; break; }
  case 5: 
   label = 6; break;
  case 6: 
   var $17=$5;
   var $18=(($17+48)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$5;
   var $21=(($20+52)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$19;
   var $24=$22;
   var $25=((($23)-($24))|0);
   $l=$25;
   var $26=$l;
   var $27=$3;
   var $28=(($26)|(0)) > (($27)|(0));
   if ($28) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $30=$3;
   $l=$30;
   label = 8; break;
  case 8: 
   var $32=$l;
   var $33=(($32)|(0)) > 0;
   if ($33) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 11; break;
  case 10: 
   var $36=$5;
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+16)|0);
   var $40=HEAP32[(($39)>>2)];
   FUNCTION_TABLE[$40]($36);
   label = 6; break;
  case 11: 
   var $42=$data;
   var $43=$5;
   var $44=(($43+52)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$l;
   assert($46 % 1 === 0);(_memcpy($42, $45, $46)|0);
   var $47=$l;
   var $48=$5;
   var $49=(($48+52)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50+$47)|0);
   HEAP32[(($49)>>2)]=$51;
   var $52=$l;
   var $53=$data;
   var $54=(($53+$52)|0);
   $data=$54;
   var $55=$l;
   var $56=$3;
   var $57=((($56)-($55))|0);
   $3=$57;
   var $58=$4;
   var $59=(($58)|(0))!=0;
   if ($59) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $61=$l;
   var $62=$4;
   var $63=HEAP32[(($62)>>2)];
   var $64=((($63)+($61))|0);
   HEAP32[(($62)>>2)]=$64;
   label = 13; break;
  case 13: 
   label = 4; break;
  case 14: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RMByteStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RLByteStream7GetWordEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $current;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+52)|0);
   var $5=HEAP32[(($4)>>2)];
   $current=$5;
   var $6=$current;
   var $7=(($6+1)|0);
   var $8=$2;
   var $9=(($8+48)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)>>>(0)) < (($10)>>>(0));
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$current;
   var $14=(($13)|0);
   var $15=HEAP8[($14)];
   var $16=(($15)&(255));
   var $17=$current;
   var $18=(($17+1)|0);
   var $19=HEAP8[($18)];
   var $20=(($19)&(255));
   var $21=$20 << 8;
   var $22=((($16)+($21))|0);
   $val=$22;
   var $23=$current;
   var $24=(($23+2)|0);
   var $25=$2;
   var $26=(($25+52)|0);
   HEAP32[(($26)>>2)]=$24;
   label = 4; break;
  case 3: 
   var $28=__ZN12RLByteStream7GetByteEv($2);
   $val=$28;
   var $29=__ZN12RLByteStream7GetByteEv($2);
   var $30=$29 << 8;
   var $31=$val;
   var $32=$31 | $30;
   $val=$32;
   label = 4; break;
  case 4: 
   var $34=$val;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RLByteStream8GetDWordEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $current;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+52)|0);
   var $5=HEAP32[(($4)>>2)];
   $current=$5;
   var $6=$current;
   var $7=(($6+3)|0);
   var $8=$2;
   var $9=(($8+48)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)>>>(0)) < (($10)>>>(0));
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$current;
   var $14=(($13)|0);
   var $15=HEAP8[($14)];
   var $16=(($15)&(255));
   var $17=$current;
   var $18=(($17+1)|0);
   var $19=HEAP8[($18)];
   var $20=(($19)&(255));
   var $21=$20 << 8;
   var $22=((($16)+($21))|0);
   var $23=$current;
   var $24=(($23+2)|0);
   var $25=HEAP8[($24)];
   var $26=(($25)&(255));
   var $27=$26 << 16;
   var $28=((($22)+($27))|0);
   var $29=$current;
   var $30=(($29+3)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   var $33=$32 << 24;
   var $34=((($28)+($33))|0);
   $val=$34;
   var $35=$current;
   var $36=(($35+4)|0);
   var $37=$2;
   var $38=(($37+52)|0);
   HEAP32[(($38)>>2)]=$36;
   label = 4; break;
  case 3: 
   var $40=__ZN12RLByteStream7GetByteEv($2);
   $val=$40;
   var $41=__ZN12RLByteStream7GetByteEv($2);
   var $42=$41 << 8;
   var $43=$val;
   var $44=$43 | $42;
   $val=$44;
   var $45=__ZN12RLByteStream7GetByteEv($2);
   var $46=$45 << 16;
   var $47=$val;
   var $48=$47 | $46;
   $val=$48;
   var $49=__ZN12RLByteStream7GetByteEv($2);
   var $50=$49 << 24;
   var $51=$val;
   var $52=$51 | $50;
   $val=$52;
   label = 4; break;
  case 4: 
   var $54=$val;
   return $54;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RMByteStream7GetWordEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $current;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+52)|0);
   var $5=HEAP32[(($4)>>2)];
   $current=$5;
   var $6=$current;
   var $7=(($6+1)|0);
   var $8=$2;
   var $9=(($8+48)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)>>>(0)) < (($10)>>>(0));
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$current;
   var $14=(($13)|0);
   var $15=HEAP8[($14)];
   var $16=(($15)&(255));
   var $17=$16 << 8;
   var $18=$current;
   var $19=(($18+1)|0);
   var $20=HEAP8[($19)];
   var $21=(($20)&(255));
   var $22=((($17)+($21))|0);
   $val=$22;
   var $23=$current;
   var $24=(($23+2)|0);
   var $25=$2;
   var $26=(($25+52)|0);
   HEAP32[(($26)>>2)]=$24;
   label = 4; break;
  case 3: 
   var $28=$2;
   var $29=__ZN12RLByteStream7GetByteEv($28);
   var $30=$29 << 8;
   $val=$30;
   var $31=$2;
   var $32=__ZN12RLByteStream7GetByteEv($31);
   var $33=$val;
   var $34=$33 | $32;
   $val=$34;
   label = 4; break;
  case 4: 
   var $36=$val;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12RMByteStream8GetDWordEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $current;
   var $val;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+52)|0);
   var $5=HEAP32[(($4)>>2)];
   $current=$5;
   var $6=$current;
   var $7=(($6+3)|0);
   var $8=$2;
   var $9=(($8+48)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)>>>(0)) < (($10)>>>(0));
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$current;
   var $14=(($13)|0);
   var $15=HEAP8[($14)];
   var $16=(($15)&(255));
   var $17=$16 << 24;
   var $18=$current;
   var $19=(($18+1)|0);
   var $20=HEAP8[($19)];
   var $21=(($20)&(255));
   var $22=$21 << 16;
   var $23=((($17)+($22))|0);
   var $24=$current;
   var $25=(($24+2)|0);
   var $26=HEAP8[($25)];
   var $27=(($26)&(255));
   var $28=$27 << 8;
   var $29=((($23)+($28))|0);
   var $30=$current;
   var $31=(($30+3)|0);
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   var $34=((($29)+($33))|0);
   $val=$34;
   var $35=$current;
   var $36=(($35+4)|0);
   var $37=$2;
   var $38=(($37+52)|0);
   HEAP32[(($38)>>2)]=$36;
   label = 4; break;
  case 3: 
   var $40=$2;
   var $41=__ZN12RLByteStream7GetByteEv($40);
   var $42=$41 << 24;
   $val=$42;
   var $43=$2;
   var $44=__ZN12RLByteStream7GetByteEv($43);
   var $45=$44 << 16;
   var $46=$val;
   var $47=$46 | $45;
   $val=$47;
   var $48=$2;
   var $49=__ZN12RLByteStream7GetByteEv($48);
   var $50=$49 << 8;
   var $51=$val;
   var $52=$51 | $50;
   $val=$52;
   var $53=$2;
   var $54=__ZN12RLByteStream7GetByteEv($53);
   var $55=$val;
   var $56=$55 | $54;
   $val=$56;
   label = 4; break;
  case 4: 
   var $58=$val;
   return $58;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RLBitStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RLBitStream9ReadBlockEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=$2;
   __ZN11RBaseStream9ReadBlockEv($3);
   var $4=__Z13bsIsBigEndianv();
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$2;
   var $7=(($6+44)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$2;
   var $10=(($9+48)|0);
   var $11=HEAP32[(($10)>>2)];
   __Z12bsBSwapBlockPhS_($8, $11);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RMBitStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11RBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RMBitStream9ReadBlockEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=$2;
   __ZN11RBaseStream9ReadBlockEv($3);
   var $4=__Z13bsIsBigEndianv();
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=$2;
   var $7=(($6+44)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$2;
   var $10=(($9+48)|0);
   var $11=HEAP32[(($10)>>2)];
   __Z12bsBSwapBlockPhS_($8, $11);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RMBitStream6SetPosEi($this, $pos) {
 var label = 0;
 var $1;
 var $2;
 var $offset;
 $1=$this;
 $2=$pos;
 var $3=$1;
 var $4=$3;
 var $5=$2;
 __ZN11RBaseStream6SetPosEi($4, $5);
 var $6=$3;
 var $7=(($6+52)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$3;
 var $10=(($9+48)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$8;
 var $13=$11;
 var $14=((($12)-($13))|0);
 $offset=$14;
 var $15=$3;
 var $16=(($15+48)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$offset;
 var $19=((($18)-(1))|0);
 var $20=$19 & -4;
 var $21=(($17+$20)|0);
 var $22=$3;
 var $23=(($22+52)|0);
 HEAP32[(($23)>>2)]=$21;
 var $24=$offset;
 var $25=$24 & 3;
 var $26=($25<<3);
 var $27=(((32)-($26))|0);
 var $28=$27 & 31;
 var $29=$3;
 var $30=(($29+76)|0);
 HEAP32[(($30)>>2)]=$28;
 return;
}
function __ZN11RMBitStream3GetEi($this, $bits) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $bit_idx;
   var $mask;
   var $current;
   $1=$this;
   $2=$bits;
   var $3=$1;
   var $4=$3;
   var $5=(($4+76)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$2;
   var $8=((($6)-($7))|0);
   $bit_idx=$8;
   var $9=$bit_idx;
   var $10=$9 >> 31;
   $mask=$10;
   var $11=$3;
   var $12=(($11+52)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   var $15=$mask;
   var $16=(((-$15))|0);
   var $17=(($14+($16<<2))|0);
   $current=$17;
   var $18=$current;
   var $19=$18;
   var $20=$3;
   var $21=(($20+52)|0);
   HEAP32[(($21)>>2)]=$19;
   var $22=$3;
   var $23=(($22+48)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($19)>>>(0)) >= (($24)>>>(0));
   if ($25) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $27=$3;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+16)|0);
   var $30=HEAP32[(($29)>>2)];
   FUNCTION_TABLE[$30]($3);
   var $31=$3;
   var $32=(($31+52)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$33;
   $current=$34;
   label = 3; break;
  case 3: 
   var $36=$bit_idx;
   var $37=$36 & 31;
   $bit_idx=$37;
   var $38=$3;
   var $39=(($38+76)|0);
   HEAP32[(($39)>>2)]=$37;
   var $40=$current;
   var $41=((($40)-(4))|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$bit_idx;
   var $44=(((-$43))|0);
   var $45=$42 << $44;
   var $46=$mask;
   var $47=$45 & $46;
   var $48=$current;
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$bit_idx;
   var $52=$50 >>> (($51)>>>(0));
   var $53=$47 | $52;
   var $54=$2;
   var $55=((7168+($54<<2))|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$53 & $56;
   return $57;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RMBitStream4ShowEi($this, $bits) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $bit_idx;
   var $mask;
   var $current;
   $1=$this;
   $2=$bits;
   var $3=$1;
   var $4=$3;
   var $5=(($4+76)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$2;
   var $8=((($6)-($7))|0);
   $bit_idx=$8;
   var $9=$bit_idx;
   var $10=$9 >> 31;
   $mask=$10;
   var $11=$3;
   var $12=(($11+52)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   var $15=$mask;
   var $16=(((-$15))|0);
   var $17=(($14+($16<<2))|0);
   $current=$17;
   var $18=$current;
   var $19=$18;
   var $20=$3;
   var $21=(($20+48)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($19)>>>(0)) >= (($22)>>>(0));
   if ($23) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $25=$current;
   var $26=$25;
   var $27=$3;
   var $28=(($27+52)|0);
   HEAP32[(($28)>>2)]=$26;
   var $29=$3;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+16)|0);
   var $32=HEAP32[(($31)>>2)];
   FUNCTION_TABLE[$32]($3);
   var $33=$3;
   var $34=(($33+52)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$35;
   $current=$36;
   var $37=$3;
   var $38=(($37+52)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=((($39)-(4))|0);
   HEAP32[(($38)>>2)]=$40;
   label = 3; break;
  case 3: 
   var $42=$current;
   var $43=((($42)-(4))|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$bit_idx;
   var $46=(((-$45))|0);
   var $47=$44 << $46;
   var $48=$mask;
   var $49=$47 & $48;
   var $50=$current;
   var $51=(($50)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$bit_idx;
   var $54=$52 >>> (($53)>>>(0));
   var $55=$49 | $54;
   var $56=$2;
   var $57=((7168+($56<<2))|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$55 & $58;
   return $59;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11RMBitStream7GetHuffEPKs($this, $table) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $val;
   var $code_bits;
   var $table_bits;
   $1=$this;
   $2=$table;
   var $3=$1;
   label = 2; break;
  case 2: 
   var $5=$2;
   var $6=(($5)|0);
   var $7=HEAP16[(($6)>>1)];
   var $8=(($7 << 16) >> 16);
   $table_bits=$8;
   var $9=$table_bits;
   var $10=__ZN11RMBitStream4ShowEi($3, $9);
   var $11=((($10)+(1))|0);
   var $12=$2;
   var $13=(($12+($11<<1))|0);
   var $14=HEAP16[(($13)>>1)];
   var $15=(($14 << 16) >> 16);
   $val=$15;
   var $16=$val;
   var $17=$16 & 15;
   $code_bits=$17;
   var $18=$val;
   var $19=$18 >> 4;
   $val=$19;
   var $20=$code_bits;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 3; break; } else { label = 4; break; }
  case 3: 
   label = 5; break;
  case 4: 
   var $24=$val;
   var $25=$2;
   var $26=(($25+($24<<1))|0);
   $2=$26;
   var $27=$table_bits;
   __ZN11RMBitStream4MoveEi($3, $27);
   label = 2; break;
  case 5: 
   var $29=$code_bits;
   __ZN11RMBitStream4MoveEi($3, $29);
   var $30=$val;
   var $31=(($30)|(0))==2047;
   if ($31) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $33=$3;
   var $34=(($33+72)|0);
   var $35=HEAP8[($34)];
   var $36=(($35) & 1);
   if ($36) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $38=$3;
   var $39=(($38+4)|0);
   var $40=(($39)|0);
   _longjmp($40, -124);
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $43=$val;
   return $43;
  default: assert(0, "bad label: " + label);
 }
}
function __Z26bsCreateSourceHuffmanTablePKhPiii($src, $dst, $max_bits, $first_bits) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $val_idx;
   var $code;
   var $table;
   var $code_count;
   var $k;
   $1=$src;
   $2=$dst;
   $3=$max_bits;
   $4=$first_bits;
   $code=0;
   var $5=$2;
   $table=$5;
   var $6=$4;
   var $7=$2;
   var $8=(($7+4)|0);
   $2=$8;
   HEAP32[(($7)>>2)]=$6;
   $i=1;
   var $9=$3;
   $val_idx=$9;
   label = 2; break;
  case 2: 
   var $11=$i;
   var $12=$3;
   var $13=(($11)|(0)) <= (($12)|(0));
   if ($13) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $15=$i;
   var $16=((($15)-(1))|0);
   var $17=$1;
   var $18=(($17+$16)|0);
   var $19=HEAP8[($18)];
   var $20=(($19)&(255));
   $code_count=$20;
   var $21=$code_count;
   var $22=$2;
   var $23=(($22)|0);
   HEAP32[(($23)>>2)]=$21;
   var $24=$code;
   var $25=$24 << 1;
   $code=$25;
   $k=0;
   label = 4; break;
  case 4: 
   var $27=$k;
   var $28=$code_count;
   var $29=(($27)|(0)) < (($28)|(0));
   if ($29) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $31=$val_idx;
   var $32=$k;
   var $33=((($31)+($32))|0);
   var $34=$1;
   var $35=(($34+$33)|0);
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=$37 << 20;
   var $39=$code;
   var $40=$k;
   var $41=((($39)+($40))|0);
   var $42=$38 | $41;
   var $43=$k;
   var $44=((($43)+(1))|0);
   var $45=$2;
   var $46=(($45+($44<<2))|0);
   HEAP32[(($46)>>2)]=$42;
   label = 6; break;
  case 6: 
   var $48=$k;
   var $49=((($48)+(1))|0);
   $k=$49;
   label = 4; break;
  case 7: 
   var $51=$code_count;
   var $52=$code;
   var $53=((($52)+($51))|0);
   $code=$53;
   var $54=$code_count;
   var $55=((($54)+(1))|0);
   var $56=$2;
   var $57=(($56+($55<<2))|0);
   $2=$57;
   var $58=$code_count;
   var $59=$val_idx;
   var $60=((($59)+($58))|0);
   $val_idx=$60;
   label = 8; break;
  case 8: 
   var $62=$i;
   var $63=((($62)+(1))|0);
   $i=$63;
   label = 2; break;
  case 9: 
   var $65=$2;
   var $66=(($65)|0);
   HEAP32[(($66)>>2)]=-1;
   var $67=$table;
   return $67;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WBaseStreamC2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((19456)|0);
 var $4=(($2+12)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=(($2+8)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=(($2+24)|0);
 HEAP32[(($7)>>2)]=0;
 var $8=(($2+16)|0);
 HEAP32[(($8)>>2)]=32768;
 var $9=(($2+28)|0);
 HEAP8[($9)]=0;
 return;
}
function __ZN11WBaseStream6GetPosEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+20)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$6;
 var $10=$8;
 var $11=((($9)-($10))|0);
 var $12=((($4)+($11))|0);
 return $12;
}
function __Z26bsCreateDecodeHuffmanTablePKiPsi($src, $table, $max_size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16384)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $forbidden_entry;
   var $first_bits;
   var $sub_tables=sp;
   var $size;
   var $i;
   var $k;
   var $code_count;
   var $sb;
   var $code;
   var $b;
   var $code_count1;
   var $table_bits;
   var $code_bits;
   var $code2;
   var $val;
   var $j;
   var $offset;
   var $idx;
   $2=$src;
   $3=$table;
   $4=$max_size;
   $forbidden_entry=32753;
   var $5=$2;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $first_bits=$7;
   var $8=$first_bits;
   var $9=1 << $8;
   var $10=((($9)+(1))|0);
   $size=$10;
   var $11=$sub_tables;
   var $12=$first_bits;
   var $13=1 << $12;
   var $14=($13<<3);
   _memset($11, 0, $14);
   $i=1;
   $k=1;
   label = 2; break;
  case 2: 
   var $16=$k;
   var $17=$2;
   var $18=(($17+($16<<2))|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0)) >= 0;
   if ($20) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $22=$k;
   var $23=((($22)+(1))|0);
   $k=$23;
   var $24=$2;
   var $25=(($24+($22<<2))|0);
   var $26=HEAP32[(($25)>>2)];
   $code_count=$26;
   var $27=$i;
   var $28=$first_bits;
   var $29=((($27)-($28))|0);
   $sb=$29;
   var $30=$sb;
   var $31=(($30)|(0)) <= 0;
   if ($31) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $33=$code_count;
   var $34=$k;
   var $35=((($34)+($33))|0);
   $k=$35;
   label = 10; break;
  case 5: 
   var $37=$k;
   var $38=$code_count;
   var $39=((($38)+($37))|0);
   $code_count=$39;
   label = 6; break;
  case 6: 
   var $41=$k;
   var $42=$code_count;
   var $43=(($41)|(0)) < (($42)|(0));
   if ($43) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $45=$k;
   var $46=$2;
   var $47=(($46+($45<<2))|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$48 & 1048575;
   $code=$49;
   var $50=$sb;
   var $51=$code;
   var $52=$sb;
   var $53=$51 >> (($52)|(0));
   var $54=(($sub_tables+($53<<3))|0);
   var $55=(($54)|0);
   HEAP32[(($55)>>2)]=$50;
   label = 8; break;
  case 8: 
   var $57=$k;
   var $58=((($57)+(1))|0);
   $k=$58;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $62=$i;
   var $63=((($62)+(1))|0);
   $i=$63;
   label = 2; break;
  case 12: 
   $i=0;
   label = 13; break;
  case 13: 
   var $66=$i;
   var $67=$first_bits;
   var $68=1 << $67;
   var $69=(($66)|(0)) < (($68)|(0));
   if ($69) { label = 14; break; } else { label = 18; break; }
  case 14: 
   var $71=$i;
   var $72=(($sub_tables+($71<<3))|0);
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   $b=$74;
   var $75=$b;
   var $76=(($75)|(0)) > 0;
   if ($76) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $78=$b;
   var $79=1 << $78;
   $b=$79;
   var $80=$size;
   var $81=$i;
   var $82=(($sub_tables+($81<<3))|0);
   var $83=(($82+4)|0);
   HEAP32[(($83)>>2)]=$80;
   var $84=$b;
   var $85=((($84)+(1))|0);
   var $86=$size;
   var $87=((($86)+($85))|0);
   $size=$87;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $90=$i;
   var $91=((($90)+(1))|0);
   $i=$91;
   label = 13; break;
  case 18: 
   var $93=$size;
   var $94=$4;
   var $95=(($93)|(0)) > (($94)|(0));
   if ($95) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $1=0;
   label = 39; break;
  case 20: 
   $i=0;
   label = 21; break;
  case 21: 
   var $99=$i;
   var $100=$size;
   var $101=(($99)|(0)) < (($100)|(0));
   if ($101) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $103=$i;
   var $104=$3;
   var $105=(($104+($103<<1))|0);
   HEAP16[(($105)>>1)]=32753;
   label = 23; break;
  case 23: 
   var $107=$i;
   var $108=((($107)+(1))|0);
   $i=$108;
   label = 21; break;
  case 24: 
   var $110=$first_bits;
   var $111=(($110) & 65535);
   var $112=$3;
   var $113=(($112)|0);
   HEAP16[(($113)>>1)]=$111;
   $i=1;
   $k=1;
   label = 25; break;
  case 25: 
   var $115=$k;
   var $116=$2;
   var $117=(($116+($115<<2))|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(($118)|(0)) >= 0;
   if ($119) { label = 26; break; } else { label = 38; break; }
  case 26: 
   var $121=$k;
   var $122=((($121)+(1))|0);
   $k=$122;
   var $123=$2;
   var $124=(($123+($121<<2))|0);
   var $125=HEAP32[(($124)>>2)];
   $code_count1=$125;
   var $126=$k;
   var $127=$code_count1;
   var $128=((($127)+($126))|0);
   $code_count1=$128;
   label = 27; break;
  case 27: 
   var $130=$k;
   var $131=$code_count1;
   var $132=(($130)|(0)) < (($131)|(0));
   if ($132) { label = 28; break; } else { label = 36; break; }
  case 28: 
   var $134=$first_bits;
   $table_bits=$134;
   var $135=$i;
   $code_bits=$135;
   var $136=$k;
   var $137=$2;
   var $138=(($137+($136<<2))|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=$139 & 1048575;
   $code2=$140;
   var $141=$k;
   var $142=$2;
   var $143=(($142+($141<<2))|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=$144 >> 20;
   $val=$145;
   $offset=0;
   var $146=$code_bits;
   var $147=$table_bits;
   var $148=(($146)|(0)) > (($147)|(0));
   if ($148) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $150=$code2;
   var $151=$table_bits;
   var $152=$code_bits;
   var $153=((($152)-($151))|0);
   $code_bits=$153;
   var $154=$150 >> (($153)|(0));
   $idx=$154;
   var $155=$code_bits;
   var $156=1 << $155;
   var $157=((($156)-(1))|0);
   var $158=$code2;
   var $159=$158 & $157;
   $code2=$159;
   var $160=$idx;
   var $161=(($sub_tables+($160<<3))|0);
   var $162=(($161+4)|0);
   var $163=HEAP32[(($162)>>2)];
   $offset=$163;
   var $164=$idx;
   var $165=(($sub_tables+($164<<3))|0);
   var $166=(($165)|0);
   var $167=HEAP32[(($166)>>2)];
   $table_bits=$167;
   var $168=$table_bits;
   var $169=(($168) & 65535);
   var $170=$offset;
   var $171=$3;
   var $172=(($171+($170<<1))|0);
   HEAP16[(($172)>>1)]=$169;
   var $173=$offset;
   var $174=$173 << 4;
   var $175=(($174) & 65535);
   var $176=$idx;
   var $177=((($176)+(1))|0);
   var $178=$3;
   var $179=(($178+($177<<1))|0);
   HEAP16[(($179)>>1)]=$175;
   label = 30; break;
  case 30: 
   var $181=$code_bits;
   var $182=$table_bits;
   var $183=((($182)-($181))|0);
   $table_bits=$183;
   var $184=$val;
   var $185=$184 << 4;
   var $186=$code_bits;
   var $187=$185 | $186;
   $val=$187;
   var $188=$code2;
   var $189=$table_bits;
   var $190=$188 << $189;
   var $191=((($190)+(1))|0);
   var $192=$offset;
   var $193=((($192)+($191))|0);
   $offset=$193;
   $j=0;
   label = 31; break;
  case 31: 
   var $195=$j;
   var $196=$table_bits;
   var $197=1 << $196;
   var $198=(($195)|(0)) < (($197)|(0));
   if ($198) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $200=$val;
   var $201=(($200) & 65535);
   var $202=$offset;
   var $203=$j;
   var $204=((($202)+($203))|0);
   var $205=$3;
   var $206=(($205+($204<<1))|0);
   HEAP16[(($206)>>1)]=$201;
   label = 33; break;
  case 33: 
   var $208=$j;
   var $209=((($208)+(1))|0);
   $j=$209;
   label = 31; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $212=$k;
   var $213=((($212)+(1))|0);
   $k=$213;
   label = 27; break;
  case 36: 
   label = 37; break;
  case 37: 
   var $216=$i;
   var $217=((($216)+(1))|0);
   $i=$217;
   label = 25; break;
  case 38: 
   $1=1;
   label = 39; break;
  case 39: 
   var $220=$1;
   STACKTOP = sp;
   return $220;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WBaseStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WBaseStreamD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=$2;
 HEAP32[(($3)>>2)]=((19456)|0);
 var $4=$2;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+12)|0);
 var $7=HEAP32[(($6)>>2)];
 FUNCTION_TABLE[$7]($2);
 var $8=$2;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+20)|0);
 var $11=HEAP32[(($10)>>2)];
 FUNCTION_TABLE[$11]($2);
 return;
}
function __ZN11WBaseStream8AllocateEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=(($2+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0)) < 0;
   var $10=$9 ? -1 : $8;
   var $11=__Znaj($10);
   var $12=(($2+4)|0);
   HEAP32[(($12)>>2)]=$11;
   label = 3; break;
  case 3: 
   var $14=(($2+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($2+16)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($15+$17)|0);
   var $19=(($2+8)|0);
   HEAP32[(($19)>>2)]=$18;
   var $20=(($2+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($2+12)|0);
   HEAP32[(($22)>>2)]=$21;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WBaseStream10WriteBlockEv($this) {
 var label = 0;
 var $1;
 var $size;
 $1=$this;
 var $2=$1;
 var $3=(($2+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 $size=$9;
 var $10=(($2+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$size;
 var $13=(($2+24)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=_fwrite($11, 1, $12, $14);
 var $16=(($2+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+12)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=$size;
 var $20=(($2+20)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=((($21)+($19))|0);
 HEAP32[(($20)>>2)]=$22;
 return;
}
function __ZN11WBaseStream4OpenEPKc($this, $filename) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$filename;
   var $3=$1;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   FUNCTION_TABLE[$7]($3);
   var $8=$3;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+24)|0);
   var $11=HEAP32[(($10)>>2)];
   FUNCTION_TABLE[$11]($3);
   var $12=$2;
   var $13=_fopen($12, ((11712)|0));
   var $14=(($3+24)|0);
   HEAP32[(($14)>>2)]=$13;
   var $15=(($3+24)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=(($3+28)|0);
   HEAP8[($19)]=1;
   var $20=(($3+20)|0);
   HEAP32[(($20)>>2)]=0;
   var $21=(($3+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($3+12)|0);
   HEAP32[(($23)>>2)]=$22;
   label = 3; break;
  case 3: 
   var $25=(($3+24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))!=0;
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WBaseStream5CloseEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+24)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$2;
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+16)|0);
   var $10=HEAP32[(($9)>>2)];
   FUNCTION_TABLE[$10]($2);
   var $11=(($2+24)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=_fclose($12);
   var $14=(($2+24)|0);
   HEAP32[(($14)>>2)]=0;
   label = 3; break;
  case 3: 
   var $16=(($2+28)|0);
   HEAP8[($16)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WBaseStream7ReleaseEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $7=(($2+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==0;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   __ZdaPv($8);
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $13=(($2+12)|0);
   HEAP32[(($13)>>2)]=0;
   var $14=(($2+8)|0);
   HEAP32[(($14)>>2)]=0;
   var $15=(($2+4)|0);
   HEAP32[(($15)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WLByteStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WLByteStream7PutByteEi($this, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$this;
   $2=$val;
   var $3=$1;
   var $4=$2;
   var $5=(($4) & 255);
   var $6=$3;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+1)|0);
   HEAP32[(($7)>>2)]=$9;
   HEAP8[($8)]=$5;
   var $10=$3;
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$3;
   var $14=(($13+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($12)>>>(0)) >= (($15)>>>(0));
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $18=$3;
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+16)|0);
   var $22=HEAP32[(($21)>>2)];
   FUNCTION_TABLE[$22]($18);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WLByteStream8PutBytesEPKvi($this, $buffer, $count) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $data;
   var $l;
   $1=$this;
   $2=$buffer;
   $3=$count;
   var $4=$1;
   var $5=$2;
   $data=$5;
   label = 2; break;
  case 2: 
   var $7=$3;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $10=$4;
   var $11=(($10+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$4;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$12;
   var $17=$15;
   var $18=((($16)-($17))|0);
   $l=$18;
   var $19=$l;
   var $20=$3;
   var $21=(($19)|(0)) > (($20)|(0));
   if ($21) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=$3;
   $l=$23;
   label = 5; break;
  case 5: 
   var $25=$l;
   var $26=(($25)|(0)) > 0;
   if ($26) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $28=$4;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$data;
   var $32=$l;
   assert($32 % 1 === 0);(_memcpy($30, $31, $32)|0);
   var $33=$l;
   var $34=$4;
   var $35=(($34+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+$33)|0);
   HEAP32[(($35)>>2)]=$37;
   var $38=$l;
   var $39=$data;
   var $40=(($39+$38)|0);
   $data=$40;
   var $41=$l;
   var $42=$3;
   var $43=((($42)-($41))|0);
   $3=$43;
   label = 7; break;
  case 7: 
   var $45=$4;
   var $46=(($45+12)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$4;
   var $49=(($48+8)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($47)|(0))==(($50)|(0));
   if ($51) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $53=$4;
   var $54=$53;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+16)|0);
   var $57=HEAP32[(($56)>>2)];
   FUNCTION_TABLE[$57]($53);
   label = 9; break;
  case 9: 
   label = 2; break;
  case 10: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WLByteStream7PutWordEi($this, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $current;
   $1=$this;
   $2=$val;
   var $3=$1;
   var $4=$3;
   var $5=(($4+12)|0);
   var $6=HEAP32[(($5)>>2)];
   $current=$6;
   var $7=$current;
   var $8=(($7+1)|0);
   var $9=$3;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($8)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $14=$2;
   var $15=(($14) & 255);
   var $16=$current;
   var $17=(($16)|0);
   HEAP8[($17)]=$15;
   var $18=$2;
   var $19=$18 >> 8;
   var $20=(($19) & 255);
   var $21=$current;
   var $22=(($21+1)|0);
   HEAP8[($22)]=$20;
   var $23=$current;
   var $24=(($23+2)|0);
   var $25=$3;
   var $26=(($25+12)|0);
   HEAP32[(($26)>>2)]=$24;
   var $27=$3;
   var $28=(($27+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$3;
   var $31=(($30+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($29)|(0))==(($32)|(0));
   if ($33) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $35=$3;
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+16)|0);
   var $39=HEAP32[(($38)>>2)];
   FUNCTION_TABLE[$39]($35);
   label = 4; break;
  case 4: 
   label = 6; break;
  case 5: 
   var $42=$2;
   __ZN12WLByteStream7PutByteEi($3, $42);
   var $43=$2;
   var $44=$43 >> 8;
   __ZN12WLByteStream7PutByteEi($3, $44);
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WMBitStream11ResetBufferEv($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2+40)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($2+32)|0);
 HEAP32[(($4)>>2)]=32;
 var $5=$2;
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $9=(($8+12)|0);
 HEAP32[(($9)>>2)]=$7;
 return;
}
function __ZN12WLByteStream8PutDWordEi($this, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $current;
   $1=$this;
   $2=$val;
   var $3=$1;
   var $4=$3;
   var $5=(($4+12)|0);
   var $6=HEAP32[(($5)>>2)];
   $current=$6;
   var $7=$current;
   var $8=(($7+3)|0);
   var $9=$3;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($8)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $14=$2;
   var $15=(($14) & 255);
   var $16=$current;
   var $17=(($16)|0);
   HEAP8[($17)]=$15;
   var $18=$2;
   var $19=$18 >> 8;
   var $20=(($19) & 255);
   var $21=$current;
   var $22=(($21+1)|0);
   HEAP8[($22)]=$20;
   var $23=$2;
   var $24=$23 >> 16;
   var $25=(($24) & 255);
   var $26=$current;
   var $27=(($26+2)|0);
   HEAP8[($27)]=$25;
   var $28=$2;
   var $29=$28 >> 24;
   var $30=(($29) & 255);
   var $31=$current;
   var $32=(($31+3)|0);
   HEAP8[($32)]=$30;
   var $33=$current;
   var $34=(($33+4)|0);
   var $35=$3;
   var $36=(($35+12)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=$3;
   var $38=(($37+12)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$3;
   var $41=(($40+8)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($39)|(0))==(($42)|(0));
   if ($43) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $45=$3;
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+16)|0);
   var $49=HEAP32[(($48)>>2)];
   FUNCTION_TABLE[$49]($45);
   label = 4; break;
  case 4: 
   label = 6; break;
  case 5: 
   var $52=$2;
   __ZN12WLByteStream7PutByteEi($3, $52);
   var $53=$2;
   var $54=$53 >> 8;
   __ZN12WLByteStream7PutByteEi($3, $54);
   var $55=$2;
   var $56=$55 >> 16;
   __ZN12WLByteStream7PutByteEi($3, $56);
   var $57=$2;
   var $58=$57 >> 24;
   __ZN12WLByteStream7PutByteEi($3, $58);
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WMByteStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WMByteStream7PutWordEi($this, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $current;
   $1=$this;
   $2=$val;
   var $3=$1;
   var $4=$3;
   var $5=(($4+12)|0);
   var $6=HEAP32[(($5)>>2)];
   $current=$6;
   var $7=$current;
   var $8=(($7+1)|0);
   var $9=$3;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($8)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $14=$2;
   var $15=$14 >> 8;
   var $16=(($15) & 255);
   var $17=$current;
   var $18=(($17)|0);
   HEAP8[($18)]=$16;
   var $19=$2;
   var $20=(($19) & 255);
   var $21=$current;
   var $22=(($21+1)|0);
   HEAP8[($22)]=$20;
   var $23=$current;
   var $24=(($23+2)|0);
   var $25=$3;
   var $26=(($25+12)|0);
   HEAP32[(($26)>>2)]=$24;
   var $27=$3;
   var $28=(($27+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$3;
   var $31=(($30+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($29)|(0))==(($32)|(0));
   if ($33) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $35=$3;
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+16)|0);
   var $39=HEAP32[(($38)>>2)];
   FUNCTION_TABLE[$39]($35);
   label = 4; break;
  case 4: 
   label = 6; break;
  case 5: 
   var $42=$3;
   var $43=$2;
   var $44=$43 >> 8;
   __ZN12WLByteStream7PutByteEi($42, $44);
   var $45=$3;
   var $46=$2;
   __ZN12WLByteStream7PutByteEi($45, $46);
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN12WMByteStream8PutDWordEi($this, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $current;
   $1=$this;
   $2=$val;
   var $3=$1;
   var $4=$3;
   var $5=(($4+12)|0);
   var $6=HEAP32[(($5)>>2)];
   $current=$6;
   var $7=$current;
   var $8=(($7+3)|0);
   var $9=$3;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($8)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $14=$2;
   var $15=$14 >> 24;
   var $16=(($15) & 255);
   var $17=$current;
   var $18=(($17)|0);
   HEAP8[($18)]=$16;
   var $19=$2;
   var $20=$19 >> 16;
   var $21=(($20) & 255);
   var $22=$current;
   var $23=(($22+1)|0);
   HEAP8[($23)]=$21;
   var $24=$2;
   var $25=$24 >> 8;
   var $26=(($25) & 255);
   var $27=$current;
   var $28=(($27+2)|0);
   HEAP8[($28)]=$26;
   var $29=$2;
   var $30=(($29) & 255);
   var $31=$current;
   var $32=(($31+3)|0);
   HEAP8[($32)]=$30;
   var $33=$current;
   var $34=(($33+4)|0);
   var $35=$3;
   var $36=(($35+12)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=$3;
   var $38=(($37+12)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$3;
   var $41=(($40+8)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($39)|(0))==(($42)|(0));
   if ($43) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $45=$3;
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+16)|0);
   var $49=HEAP32[(($48)>>2)];
   FUNCTION_TABLE[$49]($45);
   label = 4; break;
  case 4: 
   label = 6; break;
  case 5: 
   var $52=$3;
   var $53=$2;
   var $54=$53 >> 24;
   __ZN12WLByteStream7PutByteEi($52, $54);
   var $55=$3;
   var $56=$2;
   var $57=$56 >> 16;
   __ZN12WLByteStream7PutByteEi($55, $57);
   var $58=$3;
   var $59=$2;
   var $60=$59 >> 8;
   __ZN12WLByteStream7PutByteEi($58, $60);
   var $61=$3;
   var $62=$2;
   __ZN12WLByteStream7PutByteEi($61, $62);
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WMBitStreamD0Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$4;
   __ZdlPv($6);
   return;
  case 3: 
   var $8$0 = ___cxa_find_matching_catch(-1, -1); $8$1 = tempRet0;
   var $9=$8$0;
   $2=$9;
   var $10=$8$1;
   $3=$10;
   var $11=$4;
   __ZdlPv($11);
   label = 4; break;
  case 4: 
   var $13=$2;
   var $14=$3;
   var $15$0=$13;
   var $15$1=0;
   var $16$0=$15$0;
   var $16$1=$14;
   ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WMBitStream4OpenEPKc($this, $filename) {
 var label = 0;
 var $1;
 var $2;
 $1=$this;
 $2=$filename;
 var $3=$1;
 __ZN11WMBitStream11ResetBufferEv($3);
 var $4=$3;
 var $5=$2;
 var $6=__ZN11WBaseStream4OpenEPKc($4, $5);
 return $6;
}
function __ZN11WMBitStream5FlushEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=(($2+32)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0)) < 32;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=(($2+36)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($2+32)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & 7;
   __ZN11WMBitStream3PutEii($2, $8, $11);
   var $12=(($2+40)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$2;
   var $15=(($14+12)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+4)|0);
   HEAP32[(($16)>>2)]=$18;
   HEAP32[(($17)>>2)]=$13;
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WMBitStream3PutEii($this, $val, $bits) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $bit_idx;
   var $curval;
   $1=$this;
   $2=$val;
   $3=$bits;
   var $4=$1;
   var $5=(($4+32)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$3;
   var $8=((($6)-($7))|0);
   $bit_idx=$8;
   var $9=(($4+40)|0);
   var $10=HEAP32[(($9)>>2)];
   $curval=$10;
   var $11=$3;
   var $12=((7168+($11<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$2;
   var $15=$14 & $13;
   $2=$15;
   var $16=$bit_idx;
   var $17=(($16)|(0)) >= 0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=$2;
   var $20=$bit_idx;
   var $21=$19 << $20;
   var $22=$curval;
   var $23=$22 | $21;
   $curval=$23;
   label = 6; break;
  case 3: 
   var $25=$curval;
   var $26=$2;
   var $27=$bit_idx;
   var $28=(((-$27))|0);
   var $29=$26 >>> (($28)>>>(0));
   var $30=$25 | $29;
   var $31=$4;
   var $32=(($31+12)|0);
   var $33=$32;
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+4)|0);
   HEAP32[(($33)>>2)]=$35;
   HEAP32[(($34)>>2)]=$30;
   var $36=$4;
   var $37=(($36+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$4;
   var $40=(($39+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($38)>>>(0)) >= (($41)>>>(0));
   if ($42) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $44=$4;
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45+16)|0);
   var $47=HEAP32[(($46)>>2)];
   FUNCTION_TABLE[$47]($4);
   label = 5; break;
  case 5: 
   var $49=$bit_idx;
   var $50=((($49)+(32))|0);
   $bit_idx=$50;
   var $51=$2;
   var $52=$bit_idx;
   var $53=$51 << $52;
   $curval=$53;
   label = 6; break;
  case 6: 
   var $55=$curval;
   var $56=(($4+40)|0);
   HEAP32[(($56)>>2)]=$55;
   var $57=$bit_idx;
   var $58=(($4+32)|0);
   HEAP32[(($58)>>2)]=$57;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WMBitStream5CloseEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=$2;
   var $4=(($3+28)|0);
   var $5=HEAP8[($4)];
   var $6=(($5) & 1);
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+28)|0);
   var $11=HEAP32[(($10)>>2)];
   FUNCTION_TABLE[$11]($2);
   var $12=$2;
   __ZN11WBaseStream5CloseEv($12);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WMBitStream10WriteBlockEv($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$this;
   var $2=$1;
   var $3=__Z13bsIsBigEndianv();
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $5=$2;
   var $6=(($5+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$2;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   __Z12bsBSwapBlockPhS_($7, $10);
   label = 3; break;
  case 3: 
   var $12=$2;
   __ZN11WBaseStream10WriteBlockEv($12);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WMBitStream7PutHuffEiPKm($this, $val, $table) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $min_val;
 var $code;
 $1=$this;
 $2=$val;
 $3=$table;
 var $4=$1;
 var $5=$3;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 $min_val=$7;
 var $8=$min_val;
 var $9=$2;
 var $10=((($9)-($8))|0);
 $2=$10;
 var $11=$2;
 var $12=((($11)+(2))|0);
 var $13=$3;
 var $14=(($13+($12<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 $code=$15;
 var $16=$code;
 var $17=$16 >>> 8;
 var $18=$code;
 var $19=$18 & 255;
 __ZN11WMBitStream3PutEii($4, $17, $19);
 return;
}
function __Z26bsCreateEncodeHuffmanTablePKiPmi($src, $table, $max_size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $k;
   var $min_val;
   var $max_val;
   var $size;
   var $code_count;
   var $val;
   var $code_count1;
   var $val2;
   var $code;
   $2=$src;
   $3=$table;
   $4=$max_size;
   $min_val=2147483647;
   $max_val=-2147483648;
   $i=1;
   $k=1;
   label = 2; break;
  case 2: 
   var $6=$k;
   var $7=$2;
   var $8=(($7+($6<<2))|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0)) >= 0;
   if ($10) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $12=$k;
   var $13=((($12)+(1))|0);
   $k=$13;
   var $14=$2;
   var $15=(($14+($12<<2))|0);
   var $16=HEAP32[(($15)>>2)];
   $code_count=$16;
   var $17=$k;
   var $18=$code_count;
   var $19=((($18)+($17))|0);
   $code_count=$19;
   label = 4; break;
  case 4: 
   var $21=$k;
   var $22=$code_count;
   var $23=(($21)|(0)) < (($22)|(0));
   if ($23) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $25=$k;
   var $26=$2;
   var $27=(($26+($25<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$28 >> 20;
   $val=$29;
   var $30=$val;
   var $31=$min_val;
   var $32=(($30)|(0)) < (($31)|(0));
   if ($32) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $34=$val;
   $min_val=$34;
   label = 7; break;
  case 7: 
   var $36=$val;
   var $37=$max_val;
   var $38=(($36)|(0)) > (($37)|(0));
   if ($38) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $40=$val;
   $max_val=$40;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $43=$k;
   var $44=((($43)+(1))|0);
   $k=$44;
   label = 4; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $47=$i;
   var $48=((($47)+(1))|0);
   $i=$48;
   label = 2; break;
  case 13: 
   var $50=$max_val;
   var $51=$min_val;
   var $52=((($50)-($51))|0);
   var $53=((($52)+(3))|0);
   $size=$53;
   var $54=$size;
   var $55=$4;
   var $56=(($54)|(0)) > (($55)|(0));
   if ($56) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $1=0;
   label = 24; break;
  case 15: 
   var $59=$3;
   var $60=$59;
   var $61=$size;
   var $62=($61<<2);
   _memset($60, 0, $62);
   var $63=$min_val;
   var $64=$3;
   var $65=(($64)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$size;
   var $67=((($66)-(2))|0);
   var $68=$3;
   var $69=(($68+4)|0);
   HEAP32[(($69)>>2)]=$67;
   $i=1;
   $k=1;
   label = 16; break;
  case 16: 
   var $71=$k;
   var $72=$2;
   var $73=(($72+($71<<2))|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74)|(0)) >= 0;
   if ($75) { label = 17; break; } else { label = 23; break; }
  case 17: 
   var $77=$k;
   var $78=((($77)+(1))|0);
   $k=$78;
   var $79=$2;
   var $80=(($79+($77<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   $code_count1=$81;
   var $82=$k;
   var $83=$code_count1;
   var $84=((($83)+($82))|0);
   $code_count1=$84;
   label = 18; break;
  case 18: 
   var $86=$k;
   var $87=$code_count1;
   var $88=(($86)|(0)) < (($87)|(0));
   if ($88) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $90=$k;
   var $91=$2;
   var $92=(($91+($90<<2))|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$93 >> 20;
   $val2=$94;
   var $95=$k;
   var $96=$2;
   var $97=(($96+($95<<2))|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$98 & 1048575;
   $code=$99;
   var $100=$code;
   var $101=$100 << 8;
   var $102=$i;
   var $103=$101 | $102;
   var $104=$val2;
   var $105=$min_val;
   var $106=((($104)-($105))|0);
   var $107=((($106)+(2))|0);
   var $108=$3;
   var $109=(($108+($107<<2))|0);
   HEAP32[(($109)>>2)]=$103;
   label = 20; break;
  case 20: 
   var $111=$k;
   var $112=((($111)+(1))|0);
   $k=$112;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $115=$i;
   var $116=((($115)+(1))|0);
   $i=$116;
   label = 16; break;
  case 23: 
   $1=1;
   label = 24; break;
  case 24: 
   var $119=$1;
   return $119;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL15icvDefaultAllocjPv($size, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $ptr;
   var $ptr0;
   $3=$size;
   $4=$0;
   var $5=$3;
   var $6=$3;
   var $7=(($6)>>>(0)) >= 4096;
   var $8=(($7)&(1));
   var $9=((($8)+(1))|0);
   var $10=($9<<5);
   var $11=((($5)+($10))|0);
   var $12=((($11)+(4))|0);
   var $13=_malloc($12);
   $ptr0=$13;
   var $14=$ptr0;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $2=0;
   label = 4; break;
  case 3: 
   var $18=$ptr0;
   var $19=(($18+4)|0);
   var $20=(($19+1)|0);
   var $21=__Z10cvAlignPtrPKvi($20, 32);
   $ptr=$21;
   var $22=$ptr0;
   var $23=$ptr;
   var $24=((($23)-(4))|0);
   var $25=$24;
   HEAP32[(($25)>>2)]=$22;
   var $26=$ptr;
   $2=$26;
   label = 4; break;
  case 4: 
   var $28=$2;
   return $28;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL14icvDefaultFreePvS_($ptr, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   $3=$ptr;
   $4=$0;
   var $5=$3;
   var $6=$5;
   var $7=$6 & 31;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=-49;
   label = 4; break;
  case 3: 
   var $11=$3;
   var $12=$11;
   var $13=((($12)-(4))|0);
   var $14=HEAP32[(($13)>>2)];
   _free($14);
   $2=0;
   label = 4; break;
  case 4: 
   var $16=$2;
   return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _cvAlloc($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ptr;
   $1=$size;
   $ptr=0;
   var $2=$1;
   var $3=(($2)>>>(0)) > 1073741824;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-211, ((6856)|0), ((11392)|0), ((15544)|0), 107);
   label = 6; break;
  case 3: 
   var $6=HEAP32[((20992)>>2)];
   var $7=$1;
   var $8=HEAP32[((38896)>>2)];
   var $9=FUNCTION_TABLE[$6]($7, $8);
   $ptr=$9;
   var $10=$ptr;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 5; break; } else { label = 4; break; }
  case 4: 
   _cvError(-4, ((6856)|0), ((10544)|0), ((15544)|0), 111);
   label = 6; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $15=$ptr;
   return $15;
  default: assert(0, "bad label: " + label);
 }
}
function _cvFree_($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $status;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $5=HEAP32[((21024)>>2)];
   var $6=$1;
   var $7=HEAP32[((38896)>>2)];
   var $8=FUNCTION_TABLE[$5]($6, $7);
   $status=$8;
   var $9=$status;
   var $10=(($9)|(0)) < 0;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=$status;
   _cvError($12, ((6192)|0), ((9072)|0), ((15544)|0), 129);
   label = 6; break;
  case 4: 
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateMat($height, $width, $type) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $arr=sp;
   $1=$height;
   $2=$width;
   $3=$type;
   HEAP32[(($arr)>>2)]=0;
   var $4=$1;
   var $5=$2;
   var $6=$3;
   var $7=_cvCreateMatHeader($4, $5, $6);
   HEAP32[(($arr)>>2)]=$7;
   var $8=_cvGetErrStatus();
   var $9=(($8)|(0)) < 0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((6784)|0), ((11328)|0), ((15440)|0), 104);
   label = 6; break;
  case 3: 
   var $12=HEAP32[(($arr)>>2)];
   var $13=$12;
   _cvCreateData($13);
   var $14=_cvGetErrStatus();
   var $15=(($14)|(0)) < 0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((6784)|0), ((11328)|0), ((15440)|0), 105);
   label = 6; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $19=_cvGetErrStatus();
   var $20=(($19)|(0)) < 0;
   if ($20) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvReleaseMat($arr);
   label = 8; break;
  case 8: 
   var $23=HEAP32[(($arr)>>2)];
   STACKTOP = sp;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN11WMBitStreamC2Ev($this) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$this;
   var $4=$1;
   var $5=$4;
   __ZN11WBaseStreamC2Ev($5);
   var $6=$4;
   HEAP32[(($6)>>2)]=((19408)|0);
   var $7=(($4+36)|0);
   HEAP32[(($7)>>2)]=0;
   (function() { try { __THREW__ = 0; return __ZN11WMBitStream11ResetBufferEv($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return;
  case 3: 
   var $10$0 = ___cxa_find_matching_catch(-1, -1); $10$1 = tempRet0;
   var $11=$10$0;
   $2=$11;
   var $12=$10$1;
   $3=$12;
   var $13=$4;
   (function() { try { __THREW__ = 0; return __ZN11WBaseStreamD2Ev($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$2;
   var $17=$3;
   var $18$0=$16;
   var $18$1=0;
   var $19$0=$18$0;
   var $19$1=$17;
   ___resumeException($19$0)
  case 6: 
   var $21$0 = ___cxa_find_matching_catch(-1, -1,0); $21$1 = tempRet0;
   __ZSt9terminatev();
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Z7cvAlignii($size, $align) {
 var label = 0;
 var $1;
 var $2;
 $1=$size;
 $2=$align;
 var $3=$1;
 var $4=$2;
 var $5=((($3)+($4))|0);
 var $6=((($5)-(1))|0);
 var $7=$2;
 var $8=(((-$7))|0);
 var $9=$6 & $8;
 return $9;
}
function __ZL12icvCheckHugeP5CvMat($arr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$arr;
   var $2=$1;
   var $3=(($2+4)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5$0=$4;
   var $5$1=((($4)|(0)) < 0 ? -1 : 0);
   var $6=$1;
   var $7=(($6+20)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10$0=$9;
   var $10$1=((($9)|(0)) < 0 ? -1 : 0);
   var $11$0 = ___muldi3($5$0,$5$1,$10$0,$10$1); var $11$1 = tempRet0;
   var $$etemp$0$0=2147483647;
   var $$etemp$0$1=0;
   var $12=(($11$1|0) > ($$etemp$0$1|0)) | (((($11$1|0) == ($$etemp$0$1|0) & ($11$0>>>0) >  ($$etemp$0$0>>>0))));
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$1;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & -16385;
   HEAP32[(($15)>>2)]=$17;
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateMatHeader($rows, $cols, $type) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $arr=sp;
   var $min_step;
   $1=$rows;
   $2=$cols;
   $3=$type;
   HEAP32[(($arr)>>2)]=0;
   var $4=$3;
   var $5=$4 & 511;
   $3=$5;
   var $6=$1;
   var $7=(($6)|(0)) <= 0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=$2;
   var $10=(($9)|(0)) <= 0;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-201, ((6368)|0), ((9504)|0), ((15440)|0), 136);
   label = 14; break;
  case 4: 
   var $13=$3;
   var $14=$13 & 504;
   var $15=$14 >> 3;
   var $16=((($15)+(1))|0);
   var $17=$3;
   var $18=$17 & 7;
   var $19=($18<<1);
   var $20=47696 >>> (($19)>>>(0));
   var $21=$20 & 3;
   var $22=$16 << $21;
   var $23=$2;
   var $24=(Math.imul($22,$23)|0);
   $min_step=$24;
   var $25=$min_step;
   var $26=(($25)|(0)) <= 0;
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-210, ((6368)|0), ((9032)|0), ((15440)|0), 140);
   label = 14; break;
  case 6: 
   var $29=_cvAlloc(28);
   var $30=$29;
   HEAP32[(($arr)>>2)]=$30;
   var $31=_cvGetErrStatus();
   var $32=(($31)|(0)) < 0;
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((6368)|0), ((11328)|0), ((15440)|0), 142);
   label = 14; break;
  case 8: 
   var $35=$1;
   var $36=(($35)|(0))==1;
   if ($36) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $42 = 0;label = 11; break;
  case 10: 
   var $39=$min_step;
   var $40=__Z7cvAlignii($39, 1);
   var $42 = $40;label = 11; break;
  case 11: 
   var $42;
   var $43=HEAP32[(($arr)>>2)];
   var $44=(($43+4)|0);
   HEAP32[(($44)>>2)]=$42;
   var $45=$3;
   var $46=1111621632 | $45;
   var $47=HEAP32[(($arr)>>2)];
   var $48=(($47+4)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)|(0))==0;
   if ($50) { var $58 = 1;label = 13; break; } else { label = 12; break; }
  case 12: 
   var $52=HEAP32[(($arr)>>2)];
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$min_step;
   var $56=(($54)|(0))==(($55)|(0));
   var $58 = $56;label = 13; break;
  case 13: 
   var $58;
   var $59=$58 ? 16384 : 0;
   var $60=$46 | $59;
   var $61=HEAP32[(($arr)>>2)];
   var $62=(($61)|0);
   HEAP32[(($62)>>2)]=$60;
   var $63=$1;
   var $64=HEAP32[(($arr)>>2)];
   var $65=(($64+20)|0);
   var $66=$65;
   HEAP32[(($66)>>2)]=$63;
   var $67=$2;
   var $68=HEAP32[(($arr)>>2)];
   var $69=(($68+24)|0);
   var $70=$69;
   HEAP32[(($70)>>2)]=$67;
   var $71=HEAP32[(($arr)>>2)];
   var $72=(($71+16)|0);
   var $73=$72;
   HEAP32[(($73)>>2)]=0;
   var $74=HEAP32[(($arr)>>2)];
   var $75=(($74+8)|0);
   HEAP32[(($75)>>2)]=0;
   var $76=HEAP32[(($arr)>>2)];
   var $77=(($76+12)|0);
   HEAP32[(($77)>>2)]=1;
   var $78=HEAP32[(($arr)>>2)];
   __ZL12icvCheckHugeP5CvMat($78);
   label = 14; break;
  case 14: 
   var $80=_cvGetErrStatus();
   var $81=(($80)|(0)) < 0;
   if ($81) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _cvReleaseMat($arr);
   label = 16; break;
  case 16: 
   var $84=HEAP32[(($arr)>>2)];
   STACKTOP = sp;
   return $84;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateData($arr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $step;
   var $total_size;
   var $mat;
   var $img;
   var $depth;
   var $width;
   var $mat1;
   var $i;
   var $total_size2;
   var $size;
   $1=$arr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1111621632;
   if ($10) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $12=$1;
   var $13=$12;
   var $14=(($13+24)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0)) > 0;
   if ($17) { label = 4; break; } else { label = 12; break; }
  case 4: 
   var $19=$1;
   var $20=$19;
   var $21=(($20+20)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0)) > 0;
   if ($24) { label = 5; break; } else { label = 12; break; }
  case 5: 
   var $26=$1;
   var $27=$26;
   $mat=$27;
   var $28=$mat;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   $step=$30;
   var $31=$mat;
   var $32=(($31+16)|0);
   var $33=$32;
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0))!=0;
   if ($35) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-2, ((6296)|0), ((10368)|0), ((15440)|0), 965);
   label = 48; break;
  case 7: 
   var $38=$step;
   var $39=(($38)|(0))==0;
   if ($39) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $41=$mat;
   var $42=(($41)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$43 & 504;
   var $45=$44 >> 3;
   var $46=((($45)+(1))|0);
   var $47=$mat;
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 & 7;
   var $51=($50<<1);
   var $52=47696 >>> (($51)>>>(0));
   var $53=$52 & 3;
   var $54=$46 << $53;
   var $55=$mat;
   var $56=(($55+24)|0);
   var $57=$56;
   var $58=HEAP32[(($57)>>2)];
   var $59=(Math.imul($54,$58)|0);
   $step=$59;
   label = 9; break;
  case 9: 
   var $61=$step;
   var $62=$mat;
   var $63=(($62+20)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=(Math.imul($61,$65)|0);
   var $67=((($66)+(4))|0);
   var $68=((($67)+(32))|0);
   $total_size=$68;
   var $69=$total_size;
   var $70=_cvAlloc($69);
   var $71=$70;
   var $72=$mat;
   var $73=(($72+8)|0);
   HEAP32[(($73)>>2)]=$71;
   var $74=_cvGetErrStatus();
   var $75=(($74)|(0)) < 0;
   if ($75) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-1, ((6296)|0), ((11328)|0), ((15440)|0), 971);
   label = 48; break;
  case 11: 
   var $78=$mat;
   var $79=(($78+8)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(($80+4)|0);
   var $82=$81;
   var $83=__Z10cvAlignPtrPKvi($82, 32);
   var $84=$mat;
   var $85=(($84+16)|0);
   var $86=$85;
   HEAP32[(($86)>>2)]=$83;
   var $87=$mat;
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   HEAP32[(($89)>>2)]=1;
   label = 47; break;
  case 12: 
   var $91=$1;
   var $92=(($91)|(0))!=0;
   if ($92) { label = 13; break; } else { label = 25; break; }
  case 13: 
   var $94=$1;
   var $95=$94;
   var $96=(($95)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97)|(0))==112;
   if ($98) { label = 14; break; } else { label = 25; break; }
  case 14: 
   var $100=$1;
   var $101=$100;
   $img=$101;
   var $102=$img;
   var $103=(($102+68)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104)|(0))!=0;
   if ($105) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _cvError(-2, ((6296)|0), ((10368)|0), ((15440)|0), 980);
   label = 48; break;
  case 16: 
   var $108=HEAP32[((((38868)|0))>>2)];
   var $109=(($108)|(0))!=0;
   if ($109) { label = 20; break; } else { label = 17; break; }
  case 17: 
   var $111=$img;
   var $112=(($111+64)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=_cvAlloc($113);
   var $115=$img;
   var $116=(($115+108)|0);
   HEAP32[(($116)>>2)]=$114;
   var $117=$img;
   var $118=(($117+68)|0);
   HEAP32[(($118)>>2)]=$114;
   var $119=_cvGetErrStatus();
   var $120=(($119)|(0)) < 0;
   if ($120) { label = 18; break; } else { label = 19; break; }
  case 18: 
   _cvError(-1, ((6296)|0), ((11328)|0), ((15440)|0), 985);
   label = 48; break;
  case 19: 
   label = 24; break;
  case 20: 
   var $124=$img;
   var $125=(($124+16)|0);
   var $126=HEAP32[(($125)>>2)];
   $depth=$126;
   var $127=$img;
   var $128=(($127+40)|0);
   var $129=HEAP32[(($128)>>2)];
   $width=$129;
   var $130=$img;
   var $131=(($130+16)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132)|(0))==32;
   if ($133) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $135=$img;
   var $136=(($135+8)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(($137)|(0))==64;
   if ($138) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $140=$img;
   var $141=(($140+16)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=(($142)|(0))==32;
   var $144=$143 ? 4 : 8;
   var $145=$img;
   var $146=(($145+40)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=(Math.imul($147,$144)|0);
   HEAP32[(($146)>>2)]=$148;
   var $149=$img;
   var $150=(($149+16)|0);
   HEAP32[(($150)>>2)]=8;
   label = 23; break;
  case 23: 
   var $152=HEAP32[((((38868)|0))>>2)];
   var $153=$img;
   FUNCTION_TABLE[$152]($153, 0, 0);
   var $154=$width;
   var $155=$img;
   var $156=(($155+40)|0);
   HEAP32[(($156)>>2)]=$154;
   var $157=$depth;
   var $158=$img;
   var $159=(($158+16)|0);
   HEAP32[(($159)>>2)]=$157;
   label = 24; break;
  case 24: 
   label = 46; break;
  case 25: 
   var $162=$1;
   var $163=(($162)|(0))!=0;
   if ($163) { label = 26; break; } else { label = 44; break; }
  case 26: 
   var $165=$1;
   var $166=$165;
   var $167=(($166)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=$168 & -65536;
   var $170=(($169)|(0))==1111687168;
   if ($170) { label = 27; break; } else { label = 44; break; }
  case 27: 
   var $172=$1;
   var $173=$172;
   $mat1=$173;
   var $174=$mat1;
   var $175=(($174)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=$176 & 504;
   var $178=$177 >> 3;
   var $179=((($178)+(1))|0);
   var $180=$mat1;
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=$182 & 7;
   var $184=($183<<1);
   var $185=47696 >>> (($184)>>>(0));
   var $186=$185 & 3;
   var $187=$179 << $186;
   $total_size2=$187;
   var $188=$mat1;
   var $189=(($188+16)|0);
   var $190=$189;
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191)|(0))!=0;
   if ($192) { label = 28; break; } else { label = 29; break; }
  case 28: 
   _cvError(-2, ((6296)|0), ((10368)|0), ((15440)|0), 1011);
   label = 48; break;
  case 29: 
   var $195=$mat1;
   var $196=(($195)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=$197 & 16384;
   var $199=(($198)|(0))!=0;
   if ($199) { label = 30; break; } else { label = 34; break; }
  case 30: 
   var $201=$mat1;
   var $202=(($201+20)|0);
   var $203=(($202)|0);
   var $204=(($203)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=$mat1;
   var $207=(($206+20)|0);
   var $208=(($207)|0);
   var $209=(($208+4)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=(($210)|(0))!=0;
   if ($211) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $213=$mat1;
   var $214=(($213+20)|0);
   var $215=(($214)|0);
   var $216=(($215+4)|0);
   var $217=HEAP32[(($216)>>2)];
   var $221 = $217;label = 33; break;
  case 32: 
   var $219=$total_size2;
   var $221 = $219;label = 33; break;
  case 33: 
   var $221;
   var $222=(Math.imul($205,$221)|0);
   $total_size2=$222;
   label = 41; break;
  case 34: 
   var $224=$mat1;
   var $225=(($224+4)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=((($226)-(1))|0);
   $i=$227;
   label = 35; break;
  case 35: 
   var $229=$i;
   var $230=(($229)|(0)) >= 0;
   if ($230) { label = 36; break; } else { label = 40; break; }
  case 36: 
   var $232=$i;
   var $233=$mat1;
   var $234=(($233+20)|0);
   var $235=(($234+($232<<3))|0);
   var $236=(($235+4)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=$i;
   var $239=$mat1;
   var $240=(($239+20)|0);
   var $241=(($240+($238<<3))|0);
   var $242=(($241)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=(Math.imul($237,$243)|0);
   $size=$244;
   var $245=$total_size2;
   var $246=$size;
   var $247=(($245)>>>(0)) < (($246)>>>(0));
   if ($247) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $249=$size;
   $total_size2=$249;
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $252=$i;
   var $253=((($252)-(1))|0);
   $i=$253;
   label = 35; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $256=$total_size2;
   var $257=((($256)+(4))|0);
   var $258=((($257)+(32))|0);
   var $259=_cvAlloc($258);
   var $260=$259;
   var $261=$mat1;
   var $262=(($261+8)|0);
   HEAP32[(($262)>>2)]=$260;
   var $263=_cvGetErrStatus();
   var $264=(($263)|(0)) < 0;
   if ($264) { label = 42; break; } else { label = 43; break; }
  case 42: 
   _cvError(-1, ((6296)|0), ((11328)|0), ((15440)|0), 1030);
   label = 48; break;
  case 43: 
   var $267=$mat1;
   var $268=(($267+8)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=(($269+4)|0);
   var $271=$270;
   var $272=__Z10cvAlignPtrPKvi($271, 32);
   var $273=$mat1;
   var $274=(($273+16)|0);
   var $275=$274;
   HEAP32[(($275)>>2)]=$272;
   var $276=$mat1;
   var $277=(($276+8)|0);
   var $278=HEAP32[(($277)>>2)];
   HEAP32[(($278)>>2)]=1;
   label = 45; break;
  case 44: 
   _cvError(-5, ((6296)|0), ((10176)|0), ((15440)|0), 1036);
   label = 48; break;
  case 45: 
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReleaseMat($array) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $arr;
   $1=$array;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-9, ((7136)|0), ((36848)|0), ((15440)|0), 227);
   label = 13; break;
  case 3: 
   var $6=$1;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 4; break; } else { label = 12; break; }
  case 4: 
   var $10=$1;
   var $11=HEAP32[(($10)>>2)];
   $arr=$11;
   var $12=$arr;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $15=$arr;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$17 & -65536;
   var $19=(($18)|(0))==1111621632;
   if ($19) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $21=$arr;
   var $22=(($21+24)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0)) > 0;
   if ($25) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $27=$arr;
   var $28=(($27+20)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0)) > 0;
   if ($31) { label = 11; break; } else { label = 8; break; }
  case 8: 
   var $33=$arr;
   var $34=(($33)|(0))!=0;
   if ($34) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $36=$arr;
   var $37=$36;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$39 & -65536;
   var $41=(($40)|(0))==1111687168;
   if ($41) { label = 11; break; } else { label = 10; break; }
  case 10: 
   _cvError(-206, ((7136)|0), ((36848)|0), ((15440)|0), 234);
   label = 13; break;
  case 11: 
   var $44=$1;
   HEAP32[(($44)>>2)]=0;
   var $45=$arr;
   var $46=$45;
   _cvDecRefData($46);
   var $47=$arr;
   var $48=$47;
   _cvFree_($48);
   $arr=0;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvInitMatHeader($arr, $rows, $cols, $type, $data, $step) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $mask;
   var $pix_size;
   var $min_step;
   $1=$arr;
   $2=$rows;
   $3=$cols;
   $4=$type;
   $5=$data;
   $6=$step;
   var $7=$1;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((5920)|0), ((36848)|0), ((15440)|0), 176);
   label = 15; break;
  case 3: 
   var $11=$4;
   var $12=$11 & 7;
   var $13=(($12)>>>(0)) > 8;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-15, ((5920)|0), ((36848)|0), ((15440)|0), 179);
   label = 15; break;
  case 5: 
   var $16=$2;
   var $17=(($16)|(0)) <= 0;
   if ($17) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $19=$3;
   var $20=(($19)|(0)) <= 0;
   if ($20) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-201, ((5920)|0), ((7600)|0), ((15440)|0), 182);
   label = 15; break;
  case 8: 
   var $23=$4;
   var $24=$23 & 511;
   $4=$24;
   var $25=$4;
   var $26=$25 | 1111621632;
   var $27=$1;
   var $28=(($27)|0);
   HEAP32[(($28)>>2)]=$26;
   var $29=$2;
   var $30=$1;
   var $31=(($30+20)|0);
   var $32=$31;
   HEAP32[(($32)>>2)]=$29;
   var $33=$3;
   var $34=$1;
   var $35=(($34+24)|0);
   var $36=$35;
   HEAP32[(($36)>>2)]=$33;
   var $37=$5;
   var $38=$1;
   var $39=(($38+16)|0);
   var $40=$39;
   HEAP32[(($40)>>2)]=$37;
   var $41=$1;
   var $42=(($41+8)|0);
   HEAP32[(($42)>>2)]=0;
   var $43=$1;
   var $44=(($43+12)|0);
   HEAP32[(($44)>>2)]=0;
   var $45=$1;
   var $46=(($45+20)|0);
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|(0)) <= 1;
   var $50=(($49)&(1));
   var $51=((($50)-(1))|0);
   $mask=$51;
   var $52=$4;
   var $53=$52 & 504;
   var $54=$53 >> 3;
   var $55=((($54)+(1))|0);
   var $56=$4;
   var $57=$56 & 7;
   var $58=($57<<1);
   var $59=47696 >>> (($58)>>>(0));
   var $60=$59 & 3;
   var $61=$55 << $60;
   $pix_size=$61;
   var $62=$1;
   var $63=(($62+24)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=$pix_size;
   var $67=(Math.imul($65,$66)|0);
   var $68=$mask;
   var $69=$67 & $68;
   $min_step=$69;
   var $70=$6;
   var $71=(($70)|(0))!=2147483647;
   if ($71) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $73=$6;
   var $74=(($73)|(0))!=0;
   if ($74) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $76=$6;
   var $77=$min_step;
   var $78=(($76)|(0)) < (($77)|(0));
   if ($78) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-13, ((5920)|0), ((36848)|0), ((15440)|0), 199);
   label = 15; break;
  case 12: 
   var $81=$6;
   var $82=$mask;
   var $83=$81 & $82;
   var $84=$1;
   var $85=(($84+4)|0);
   HEAP32[(($85)>>2)]=$83;
   label = 14; break;
  case 13: 
   var $87=$min_step;
   var $88=$1;
   var $89=(($88+4)|0);
   HEAP32[(($89)>>2)]=$87;
   label = 14; break;
  case 14: 
   var $91=$4;
   var $92=1111621632 | $91;
   var $93=$1;
   var $94=(($93+4)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=$min_step;
   var $97=(($95)|(0))==(($96)|(0));
   var $98=$97 ? 16384 : 0;
   var $99=$92 | $98;
   var $100=$1;
   var $101=(($100)|0);
   HEAP32[(($101)>>2)]=$99;
   var $102=$1;
   __ZL12icvCheckHugeP5CvMat($102);
   label = 15; break;
  case 15: 
   var $104=$1;
   return $104;
  default: assert(0, "bad label: " + label);
 }
}
function _cvDecRefData($arr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $mat;
   var $mat1;
   $1=$arr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 10; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1111621632;
   if ($10) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $12=$1;
   var $13=$12;
   var $14=(($13+24)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0)) > 0;
   if ($17) { label = 4; break; } else { label = 10; break; }
  case 4: 
   var $19=$1;
   var $20=$19;
   var $21=(($20+20)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0)) > 0;
   if ($24) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $26=$1;
   var $27=$26;
   var $28=(($27+16)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))!=0;
   if ($31) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $33=$1;
   var $34=$33;
   $mat=$34;
   var $35=$mat;
   var $36=(($35+16)|0);
   var $37=$36;
   HEAP32[(($37)>>2)]=0;
   var $38=$mat;
   var $39=(($38+8)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0))!=0;
   if ($41) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $43=$mat;
   var $44=(($43+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=HEAP32[(($45)>>2)];
   var $47=((($46)-(1))|0);
   HEAP32[(($45)>>2)]=$47;
   var $48=(($47)|(0))==0;
   if ($48) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $50=$mat;
   var $51=(($50+8)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$52;
   _cvFree_($53);
   var $54=$mat;
   var $55=(($54+8)|0);
   HEAP32[(($55)>>2)]=0;
   label = 9; break;
  case 9: 
   var $57=$mat;
   var $58=(($57+8)|0);
   HEAP32[(($58)>>2)]=0;
   label = 18; break;
  case 10: 
   var $60=$1;
   var $61=(($60)|(0))!=0;
   if ($61) { label = 11; break; } else { label = 17; break; }
  case 11: 
   var $63=$1;
   var $64=$63;
   var $65=(($64)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$66 & -65536;
   var $68=(($67)|(0))==1111687168;
   if ($68) { label = 12; break; } else { label = 17; break; }
  case 12: 
   var $70=$1;
   var $71=$70;
   var $72=(($71+16)|0);
   var $73=$72;
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74)|(0))!=0;
   if ($75) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $77=$1;
   var $78=$77;
   $mat1=$78;
   var $79=$mat1;
   var $80=(($79+16)|0);
   var $81=$80;
   HEAP32[(($81)>>2)]=0;
   var $82=$mat1;
   var $83=(($82+8)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0))!=0;
   if ($85) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $87=$mat1;
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=HEAP32[(($89)>>2)];
   var $91=((($90)-(1))|0);
   HEAP32[(($89)>>2)]=$91;
   var $92=(($91)|(0))==0;
   if ($92) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $94=$mat1;
   var $95=(($94+8)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$96;
   _cvFree_($97);
   var $98=$mat1;
   var $99=(($98+8)|0);
   HEAP32[(($99)>>2)]=0;
   label = 16; break;
  case 16: 
   var $101=$mat1;
   var $102=(($101+8)|0);
   HEAP32[(($102)>>2)]=0;
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCloneMat($src) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $dst;
   $1=$src;
   $dst=0;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & -65536;
   var $9=(($8)|(0))==1111621632;
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$1;
   var $12=(($11+24)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0)) > 0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$1;
   var $18=(($17+20)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0)) > 0;
   if ($21) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-5, ((7080)|0), ((15280)|0), ((15440)|0), 256);
   label = 15; break;
  case 6: 
   var $24=$1;
   var $25=(($24+20)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$1;
   var $29=(($28+24)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$1;
   var $33=(($32)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=_cvCreateMatHeader($27, $31, $34);
   $dst=$35;
   var $36=_cvGetErrStatus();
   var $37=(($36)|(0)) < 0;
   if ($37) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((7080)|0), ((11328)|0), ((15440)|0), 258);
   label = 15; break;
  case 8: 
   var $40=$1;
   var $41=(($40+16)|0);
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0))!=0;
   if ($44) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $46=$dst;
   var $47=$46;
   _cvCreateData($47);
   var $48=_cvGetErrStatus();
   var $49=(($48)|(0)) < 0;
   if ($49) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-1, ((7080)|0), ((11328)|0), ((15440)|0), 262);
   label = 15; break;
  case 11: 
   var $52=$1;
   var $53=$52;
   var $54=$dst;
   var $55=$54;
   _cvCopy($53, $55, 0);
   var $56=_cvGetErrStatus();
   var $57=(($56)|(0)) < 0;
   if ($57) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _cvError(-1, ((7080)|0), ((11328)|0), ((15440)|0), 263);
   label = 15; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $62=$dst;
   return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _cvInitMatNDHeader($mat, $dims, $sizes, $type, $data) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $result;
   var $i;
   var $step=sp;
   $1=$mat;
   $2=$dims;
   $3=$sizes;
   $4=$type;
   $5=$data;
   $result=0;
   var $6=$4;
   var $7=$6 & 511;
   $4=$7;
   var $8=$4;
   var $9=$8 & 504;
   var $10=$9 >> 3;
   var $11=((($10)+(1))|0);
   var $12=$4;
   var $13=$12 & 7;
   var $14=($13<<1);
   var $15=47696 >>> (($14)>>>(0));
   var $16=$15 & 3;
   var $17=$11 << $16;
   var $18$0=$17;
   var $18$1=((($17)|(0)) < 0 ? -1 : 0);
   var $st$0$0=(($step)|0);
   HEAP32[(($st$0$0)>>2)]=$18$0;
   var $st$1$1=(($step+4)|0);
   HEAP32[(($st$1$1)>>2)]=$18$1;
   var $19=$1;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6936)|0), ((14560)|0), ((15440)|0), 291);
   label = 19; break;
  case 3: 
   var $ld$2$0=(($step)|0);
   var $23$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($step+4)|0);
   var $23$1=HEAP32[(($ld$3$1)>>2)];
   var $$etemp$4$0=0;
   var $$etemp$4$1=0;
   var $24=(($23$0|0) == ($$etemp$4$0|0)) & (($23$1|0) == ($$etemp$4$1|0));
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-210, ((6936)|0), ((13856)|0), ((15440)|0), 294);
   label = 19; break;
  case 5: 
   var $27=$3;
   var $28=(($27)|(0))!=0;
   if ($28) { label = 7; break; } else { label = 6; break; }
  case 6: 
   _cvError(-27, ((6936)|0), ((13496)|0), ((15440)|0), 297);
   label = 19; break;
  case 7: 
   var $31=$2;
   var $32=(($31)|(0)) <= 0;
   if ($32) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $34=$2;
   var $35=(($34)|(0)) > 32;
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-211, ((6936)|0), ((13088)|0), ((15440)|0), 301);
   label = 19; break;
  case 10: 
   var $38=$2;
   var $39=((($38)-(1))|0);
   $i=$39;
   label = 11; break;
  case 11: 
   var $41=$i;
   var $42=(($41)|(0)) >= 0;
   if ($42) { label = 12; break; } else { label = 18; break; }
  case 12: 
   var $44=$i;
   var $45=$3;
   var $46=(($45+($44<<2))|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0)) <= 0;
   if ($48) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-201, ((6936)|0), ((12672)|0), ((15440)|0), 306);
   label = 19; break;
  case 14: 
   var $51=$i;
   var $52=$3;
   var $53=(($52+($51<<2))|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$i;
   var $56=$1;
   var $57=(($56+20)|0);
   var $58=(($57+($55<<3))|0);
   var $59=(($58)|0);
   HEAP32[(($59)>>2)]=$54;
   var $ld$5$0=(($step)|0);
   var $60$0=HEAP32[(($ld$5$0)>>2)];
   var $ld$6$1=(($step+4)|0);
   var $60$1=HEAP32[(($ld$6$1)>>2)];
   var $$etemp$7$0=2147483647;
   var $$etemp$7$1=0;
   var $61=(($60$1|0) > ($$etemp$7$1|0)) | (((($60$1|0) == ($$etemp$7$1|0) & ($60$0>>>0) >  ($$etemp$7$0>>>0))));
   if ($61) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _cvError(-211, ((6936)|0), ((12544)|0), ((15440)|0), 309);
   label = 19; break;
  case 16: 
   var $ld$8$0=(($step)|0);
   var $64$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($step+4)|0);
   var $64$1=HEAP32[(($ld$9$1)>>2)];
   var $65$0=$64$0;
   var $65=$65$0;
   var $66=$i;
   var $67=$1;
   var $68=(($67+20)|0);
   var $69=(($68+($66<<3))|0);
   var $70=(($69+4)|0);
   HEAP32[(($70)>>2)]=$65;
   var $71=$i;
   var $72=$3;
   var $73=(($72+($71<<2))|0);
   var $74=HEAP32[(($73)>>2)];
   var $75$0=$74;
   var $75$1=((($74)|(0)) < 0 ? -1 : 0);
   var $ld$10$0=(($step)|0);
   var $76$0=HEAP32[(($ld$10$0)>>2)];
   var $ld$11$1=(($step+4)|0);
   var $76$1=HEAP32[(($ld$11$1)>>2)];
   var $77$0 = ___muldi3($76$0,$76$1,$75$0,$75$1); var $77$1 = tempRet0;
   var $st$12$0=(($step)|0);
   HEAP32[(($st$12$0)>>2)]=$77$0;
   var $st$13$1=(($step+4)|0);
   HEAP32[(($st$13$1)>>2)]=$77$1;
   label = 17; break;
  case 17: 
   var $79=$i;
   var $80=((($79)-(1))|0);
   $i=$80;
   label = 11; break;
  case 18: 
   var $ld$14$0=(($step)|0);
   var $82$0=HEAP32[(($ld$14$0)>>2)];
   var $ld$15$1=(($step+4)|0);
   var $82$1=HEAP32[(($ld$15$1)>>2)];
   var $$etemp$16$0=2147483647;
   var $$etemp$16$1=0;
   var $83=(($82$1|0) <= ($$etemp$16$1|0)) & (((($82$1|0) <  ($$etemp$16$1|0)) | ($82$0>>>0) <= ($$etemp$16$0>>>0)));
   var $84=$83 ? 16384 : 0;
   var $85=1111687168 | $84;
   var $86=$4;
   var $87=$85 | $86;
   var $88=$1;
   var $89=(($88)|0);
   HEAP32[(($89)>>2)]=$87;
   var $90=$2;
   var $91=$1;
   var $92=(($91+4)|0);
   HEAP32[(($92)>>2)]=$90;
   var $93=$5;
   var $94=$1;
   var $95=(($94+16)|0);
   var $96=$95;
   HEAP32[(($96)>>2)]=$93;
   var $97=$1;
   var $98=(($97+8)|0);
   HEAP32[(($98)>>2)]=0;
   var $99=$1;
   var $100=(($99+12)|0);
   HEAP32[(($100)>>2)]=0;
   var $101=$1;
   $result=$101;
   label = 19; break;
  case 19: 
   var $103=_cvGetErrStatus();
   var $104=(($103)|(0)) < 0;
   if ($104) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $106=$1;
   var $107=(($106)|(0))!=0;
   if ($107) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $109=$1;
   var $110=(($109)|0);
   HEAP32[(($110)>>2)]=0;
   var $111=$1;
   var $112=(($111+16)|0);
   var $113=$112;
   HEAP32[(($113)>>2)]=0;
   label = 22; break;
  case 22: 
   var $115=$result;
   STACKTOP = sp;
   return $115;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateMatND($dims, $sizes, $type) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $arr=sp;
   $1=$dims;
   $2=$sizes;
   $3=$type;
   HEAP32[(($arr)>>2)]=0;
   var $4=$1;
   var $5=$2;
   var $6=$3;
   var $7=_cvCreateMatNDHeader($4, $5, $6);
   HEAP32[(($arr)>>2)]=$7;
   var $8=_cvGetErrStatus();
   var $9=(($8)|(0)) < 0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((6840)|0), ((11328)|0), ((15440)|0), 343);
   label = 6; break;
  case 3: 
   var $12=HEAP32[(($arr)>>2)];
   var $13=$12;
   _cvCreateData($13);
   var $14=_cvGetErrStatus();
   var $15=(($14)|(0)) < 0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((6840)|0), ((11328)|0), ((15440)|0), 344);
   label = 6; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $19=_cvGetErrStatus();
   var $20=(($19)|(0)) < 0;
   if ($20) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvReleaseMatND($arr);
   label = 8; break;
  case 8: 
   var $23=HEAP32[(($arr)>>2)];
   STACKTOP = sp;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateMatNDHeader($dims, $sizes, $type) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $arr=sp;
   $1=$dims;
   $2=$sizes;
   $3=$type;
   HEAP32[(($arr)>>2)]=0;
   var $4=$1;
   var $5=(($4)|(0)) <= 0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$1;
   var $8=(($7)|(0)) > 32;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-211, ((6816)|0), ((13088)|0), ((15440)|0), 367);
   label = 9; break;
  case 4: 
   var $11=_cvAlloc(276);
   var $12=$11;
   HEAP32[(($arr)>>2)]=$12;
   var $13=_cvGetErrStatus();
   var $14=(($13)|(0)) < 0;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((6816)|0), ((11328)|0), ((15440)|0), 369);
   label = 9; break;
  case 6: 
   var $17=HEAP32[(($arr)>>2)];
   var $18=$1;
   var $19=$2;
   var $20=$3;
   var $21=_cvInitMatNDHeader($17, $18, $19, $20, 0);
   var $22=_cvGetErrStatus();
   var $23=(($22)|(0)) < 0;
   if ($23) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((6816)|0), ((11328)|0), ((15440)|0), 371);
   label = 9; break;
  case 8: 
   var $26=HEAP32[(($arr)>>2)];
   var $27=(($26+12)|0);
   HEAP32[(($27)>>2)]=1;
   label = 9; break;
  case 9: 
   var $29=_cvGetErrStatus();
   var $30=(($29)|(0)) < 0;
   if ($30) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvReleaseMatND($arr);
   label = 11; break;
  case 11: 
   var $33=HEAP32[(($arr)>>2)];
   STACKTOP = sp;
   return $33;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReleaseMatND($mat) {
 var label = 0;
 var $1;
 $1=$mat;
 var $2=$1;
 var $3=$2;
 _cvReleaseMat($3);
 return;
}
function _cvCloneMatND($src) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $dst;
   var $i;
   var $sizes;
   $1=$src;
   $dst=0;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & -65536;
   var $9=(($8)|(0))==1111687168;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-5, ((6800)|0), ((12328)|0), ((15440)|0), 395);
   label = 17; break;
  case 4: 
   var $12=$1;
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=($14<<2);
   var $16=STACKTOP;STACKTOP = (STACKTOP + $15)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $17=$16;
   $sizes=$17;
   $i=0;
   label = 5; break;
  case 5: 
   var $19=$i;
   var $20=$1;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($19)|(0)) < (($22)|(0));
   if ($23) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $25=$i;
   var $26=$1;
   var $27=(($26+20)|0);
   var $28=(($27+($25<<3))|0);
   var $29=(($28)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$i;
   var $32=$sizes;
   var $33=(($32+($31<<2))|0);
   HEAP32[(($33)>>2)]=$30;
   label = 7; break;
  case 7: 
   var $35=$i;
   var $36=((($35)+(1))|0);
   $i=$36;
   label = 5; break;
  case 8: 
   var $38=$1;
   var $39=(($38+4)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$sizes;
   var $42=$1;
   var $43=(($42)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=_cvCreateMatNDHeader($40, $41, $44);
   $dst=$45;
   var $46=_cvGetErrStatus();
   var $47=(($46)|(0)) < 0;
   if ($47) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-1, ((6800)|0), ((11328)|0), ((15440)|0), 402);
   label = 17; break;
  case 10: 
   var $50=$1;
   var $51=(($50+16)|0);
   var $52=$51;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53)|(0))!=0;
   if ($54) { label = 11; break; } else { label = 16; break; }
  case 11: 
   var $56=$dst;
   var $57=$56;
   _cvCreateData($57);
   var $58=_cvGetErrStatus();
   var $59=(($58)|(0)) < 0;
   if ($59) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _cvError(-1, ((6800)|0), ((11328)|0), ((15440)|0), 406);
   label = 17; break;
  case 13: 
   var $62=$1;
   var $63=$62;
   var $64=$dst;
   var $65=$64;
   _cvCopy($63, $65, 0);
   var $66=_cvGetErrStatus();
   var $67=(($66)|(0)) < 0;
   if ($67) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _cvError(-1, ((6800)|0), ((11328)|0), ((15440)|0), 407);
   label = 17; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $72=$dst;
   STACKTOP = sp;
   return $72;
  default: assert(0, "bad label: " + label);
 }
}
function _cvNextNArraySlice($iterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $dims;
   var $size;
   $1=$iterator;
   $size=0;
   var $2=$1;
   var $3=(($2+4)|0);
   var $4=HEAP32[(($3)>>2)];
   $dims=$4;
   label = 2; break;
  case 2: 
   var $6=$dims;
   var $7=(($6)|(0)) > 0;
   if ($7) { label = 3; break; } else { label = 15; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $10=$i;
   var $11=$1;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($10)|(0)) < (($13)|(0));
   if ($14) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $16=$dims;
   var $17=((($16)-(1))|0);
   var $18=$i;
   var $19=$1;
   var $20=(($19+184)|0);
   var $21=(($20+($18<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+20)|0);
   var $24=(($23+($17<<3))|0);
   var $25=(($24+4)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$i;
   var $28=$1;
   var $29=(($28+16)|0);
   var $30=(($29+($27<<2))|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+$26)|0);
   HEAP32[(($30)>>2)]=$32;
   label = 6; break;
  case 6: 
   var $34=$i;
   var $35=((($34)+(1))|0);
   $i=$35;
   label = 4; break;
  case 7: 
   var $37=$dims;
   var $38=((($37)-(1))|0);
   var $39=$1;
   var $40=(($39+56)|0);
   var $41=(($40+($38<<2))|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=((($42)-(1))|0);
   HEAP32[(($41)>>2)]=$43;
   var $44=(($43)|(0)) > 0;
   if ($44) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 15; break;
  case 9: 
   var $47=$dims;
   var $48=((($47)-(1))|0);
   var $49=$1;
   var $50=(($49+184)|0);
   var $51=(($50)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+20)|0);
   var $54=(($53+($48<<3))|0);
   var $55=(($54)|0);
   var $56=HEAP32[(($55)>>2)];
   $size=$56;
   $i=0;
   label = 10; break;
  case 10: 
   var $58=$i;
   var $59=$1;
   var $60=(($59)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($58)|(0)) < (($61)|(0));
   if ($62) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $64=$size;
   var $65=$dims;
   var $66=((($65)-(1))|0);
   var $67=$i;
   var $68=$1;
   var $69=(($68+184)|0);
   var $70=(($69+($67<<2))|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+20)|0);
   var $73=(($72+($66<<3))|0);
   var $74=(($73+4)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(Math.imul($64,$75)|0);
   var $77=$i;
   var $78=$1;
   var $79=(($78+16)|0);
   var $80=(($79+($77<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(((-$76))|0);
   var $83=(($81+$82)|0);
   HEAP32[(($80)>>2)]=$83;
   label = 12; break;
  case 12: 
   var $85=$i;
   var $86=((($85)+(1))|0);
   $i=$86;
   label = 10; break;
  case 13: 
   var $88=$size;
   var $89=$dims;
   var $90=((($89)-(1))|0);
   var $91=$1;
   var $92=(($91+56)|0);
   var $93=(($92+($90<<2))|0);
   HEAP32[(($93)>>2)]=$88;
   label = 14; break;
  case 14: 
   var $95=$dims;
   var $96=((($95)-(1))|0);
   $dims=$96;
   label = 2; break;
  case 15: 
   var $98=$dims;
   var $99=(($98)|(0)) > 0;
   var $100=(($99)&(1));
   return $100;
  default: assert(0, "bad label: " + label);
 }
}
function _cvInitNArrayIterator($count, $arrs, $mask, $stubs, $iterator, $flags) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $dims;
   var $i;
   var $j;
   var $size;
   var $dim0;
   var $step=sp;
   var $hdr0;
   var $arr;
   var $hdr;
   var $coi=(sp)+(8);
   var $7=(sp)+(16);
   $1=$count;
   $2=$arrs;
   $3=$mask;
   $4=$stubs;
   $5=$iterator;
   $6=$flags;
   $dims=-1;
   $dim0=-1;
   $hdr0=0;
   var $8=$1;
   var $9=(($8)|(0)) < 1;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   var $12=(($11)|(0)) > 10;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-211, ((6736)|0), ((12088)|0), ((15440)|0), 494);
   label = 77; break;
  case 4: 
   var $15=$2;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $18=$4;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 7; break; } else { label = 6; break; }
  case 6: 
   _cvError(-27, ((6736)|0), ((12000)|0), ((15440)|0), 497);
   label = 77; break;
  case 7: 
   var $22=$5;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 9; break; } else { label = 8; break; }
  case 8: 
   _cvError(-27, ((6736)|0), ((11936)|0), ((15440)|0), 500);
   label = 77; break;
  case 9: 
   $i=0;
   label = 10; break;
  case 10: 
   var $27=$i;
   var $28=$1;
   var $29=(($27)|(0)) <= (($28)|(0));
   if ($29) { label = 11; break; } else { label = 68; break; }
  case 11: 
   var $31=$i;
   var $32=$1;
   var $33=(($31)|(0)) < (($32)|(0));
   if ($33) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $35=$i;
   var $36=$2;
   var $37=(($36+($35<<2))|0);
   var $38=HEAP32[(($37)>>2)];
   var $42 = $38;label = 14; break;
  case 13: 
   var $40=$3;
   var $42 = $40;label = 14; break;
  case 14: 
   var $42;
   $arr=$42;
   var $43=$arr;
   var $44=(($43)|(0))!=0;
   if ($44) { label = 18; break; } else { label = 15; break; }
  case 15: 
   var $46=$i;
   var $47=$1;
   var $48=(($46)|(0)) < (($47)|(0));
   if ($48) { label = 16; break; } else { label = 17; break; }
  case 16: 
   _cvError(-27, ((6736)|0), ((12000)|0), ((15440)|0), 510);
   label = 77; break;
  case 17: 
   label = 68; break;
  case 18: 
   var $52=$arr;
   var $53=(($52)|(0))!=0;
   if ($53) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $55=$arr;
   var $56=$55;
   var $57=(($56)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$58 & -65536;
   var $60=(($59)|(0))==1111687168;
   if ($60) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $62=$arr;
   var $63=$62;
   var $64=(($63+16)|0);
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66)|(0))!=0;
   if ($67) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $69=$arr;
   var $70=$69;
   $hdr=$70;
   label = 27; break;
  case 22: 
   HEAP32[(($coi)>>2)]=0;
   var $72=$arr;
   var $73=$4;
   var $74=$i;
   var $75=(($73+((($74)*(276))&-1))|0);
   var $76=__ZL10cvGetMatNDPKvP7CvMatNDPi($72, $75, $coi);
   $hdr=$76;
   var $77=_cvGetErrStatus();
   var $78=(($77)|(0)) < 0;
   if ($78) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-1, ((6736)|0), ((11328)|0), ((15440)|0), 519);
   label = 77; break;
  case 24: 
   var $81=HEAP32[(($coi)>>2)];
   var $82=(($81)|(0))!=0;
   if ($82) { label = 25; break; } else { label = 26; break; }
  case 25: 
   _cvError(-24, ((6736)|0), ((11840)|0), ((15440)|0), 521);
   label = 77; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $86=$hdr;
   var $87=$i;
   var $88=$5;
   var $89=(($88+184)|0);
   var $90=(($89+($87<<2))|0);
   HEAP32[(($90)>>2)]=$86;
   var $91=$i;
   var $92=(($91)|(0)) > 0;
   if ($92) { label = 28; break; } else { label = 54; break; }
  case 28: 
   var $94=$hdr;
   var $95=(($94+4)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$hdr0;
   var $98=(($97+4)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($96)|(0))!=(($99)|(0));
   if ($100) { label = 29; break; } else { label = 30; break; }
  case 29: 
   _cvError(-209, ((6736)|0), ((11744)|0), ((15440)|0), 530);
   label = 77; break;
  case 30: 
   var $103=$i;
   var $104=$1;
   var $105=(($103)|(0)) < (($104)|(0));
   if ($105) { label = 31; break; } else { label = 42; break; }
  case 31: 
   var $107=$6;
   var $108=$107 & 3;
   if ((($108)|(0))==0) {
    label = 32; break;
   }
   else if ((($108)|(0))==1) {
    label = 35; break;
   }
   else if ((($108)|(0))==2) {
    label = 38; break;
   }
   else {
   label = 41; break;
   }
  case 32: 
   var $110=$hdr;
   var $111=(($110)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=$hdr0;
   var $114=(($113)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$112 ^ $115;
   var $117=$116 & 511;
   var $118=(($117)|(0))==0;
   if ($118) { label = 34; break; } else { label = 33; break; }
  case 33: 
   _cvError(-205, ((6736)|0), ((11616)|0), ((15440)|0), 539);
   label = 77; break;
  case 34: 
   label = 41; break;
  case 35: 
   var $122=$hdr;
   var $123=(($122)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=$hdr0;
   var $126=(($125)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=$124 ^ $127;
   var $129=$128 & 504;
   var $130=(($129)|(0))==0;
   if ($130) { label = 37; break; } else { label = 36; break; }
  case 36: 
   _cvError(-205, ((6736)|0), ((11528)|0), ((15440)|0), 544);
   label = 77; break;
  case 37: 
   label = 41; break;
  case 38: 
   var $134=$hdr;
   var $135=(($134)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=$hdr0;
   var $138=(($137)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=$136 ^ $139;
   var $141=$140 & 504;
   var $142=(($141)|(0))==0;
   if ($142) { label = 40; break; } else { label = 39; break; }
  case 39: 
   _cvError(-205, ((6736)|0), ((11352)|0), ((15440)|0), 549);
   label = 77; break;
  case 40: 
   label = 41; break;
  case 41: 
   label = 45; break;
  case 42: 
   var $147=$hdr;
   var $148=(($147)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=$149 & 510;
   var $151=(($150)|(0))==0;
   if ($151) { label = 44; break; } else { label = 43; break; }
  case 43: 
   _cvError(-208, ((6736)|0), ((11168)|0), ((15440)|0), 556);
   label = 77; break;
  case 44: 
   label = 45; break;
  case 45: 
   var $155=$6;
   var $156=$155 & 4;
   var $157=(($156)|(0))!=0;
   if ($157) { label = 53; break; } else { label = 46; break; }
  case 46: 
   $j=0;
   label = 47; break;
  case 47: 
   var $160=$j;
   var $161=$hdr;
   var $162=(($161+4)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($160)|(0)) < (($163)|(0));
   if ($164) { label = 48; break; } else { label = 52; break; }
  case 48: 
   var $166=$j;
   var $167=$hdr;
   var $168=(($167+20)|0);
   var $169=(($168+($166<<3))|0);
   var $170=(($169)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=$j;
   var $173=$hdr0;
   var $174=(($173+20)|0);
   var $175=(($174+($172<<3))|0);
   var $176=(($175)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=(($171)|(0))!=(($177)|(0));
   if ($178) { label = 49; break; } else { label = 50; break; }
  case 49: 
   _cvError(-209, ((6736)|0), ((11040)|0), ((15440)|0), 564);
   label = 77; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $182=$j;
   var $183=((($182)+(1))|0);
   $j=$183;
   label = 47; break;
  case 52: 
   label = 53; break;
  case 53: 
   label = 55; break;
  case 54: 
   var $187=$hdr;
   $hdr0=$187;
   label = 55; break;
  case 55: 
   var $189=$hdr;
   var $190=(($189)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=$191 & 504;
   var $193=$192 >> 3;
   var $194=((($193)+(1))|0);
   var $195=$hdr;
   var $196=(($195)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=$197 & 7;
   var $199=($198<<1);
   var $200=47696 >>> (($199)>>>(0));
   var $201=$200 & 3;
   var $202=$194 << $201;
   var $203$0=$202;
   var $203$1=((($202)|(0)) < 0 ? -1 : 0);
   var $st$0$0=(($step)|0);
   HEAP32[(($st$0$0)>>2)]=$203$0;
   var $st$1$1=(($step+4)|0);
   HEAP32[(($st$1$1)>>2)]=$203$1;
   var $204=$hdr;
   var $205=(($204+4)|0);
   var $206=HEAP32[(($205)>>2)];
   var $207=((($206)-(1))|0);
   $j=$207;
   label = 56; break;
  case 56: 
   var $209=$j;
   var $210=$dim0;
   var $211=(($209)|(0)) > (($210)|(0));
   if ($211) { label = 57; break; } else { label = 61; break; }
  case 57: 
   var $ld$2$0=(($step)|0);
   var $213$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($step+4)|0);
   var $213$1=HEAP32[(($ld$3$1)>>2)];
   var $214=$j;
   var $215=$hdr;
   var $216=(($215+20)|0);
   var $217=(($216+($214<<3))|0);
   var $218=(($217+4)|0);
   var $219=HEAP32[(($218)>>2)];
   var $220$0=$219;
   var $220$1=((($219)|(0)) < 0 ? -1 : 0);
   var $221=(($213$0|0) != ($220$0|0)) | (($213$1|0) != ($220$1|0));
   if ($221) { label = 58; break; } else { label = 59; break; }
  case 58: 
   label = 61; break;
  case 59: 
   var $224=$j;
   var $225=$hdr;
   var $226=(($225+20)|0);
   var $227=(($226+($224<<3))|0);
   var $228=(($227)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230$0=$229;
   var $230$1=((($229)|(0)) < 0 ? -1 : 0);
   var $ld$4$0=(($step)|0);
   var $231$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($step+4)|0);
   var $231$1=HEAP32[(($ld$5$1)>>2)];
   var $232$0 = ___muldi3($231$0,$231$1,$230$0,$230$1); var $232$1 = tempRet0;
   var $st$6$0=(($step)|0);
   HEAP32[(($st$6$0)>>2)]=$232$0;
   var $st$7$1=(($step+4)|0);
   HEAP32[(($st$7$1)>>2)]=$232$1;
   label = 60; break;
  case 60: 
   var $234=$j;
   var $235=((($234)-(1))|0);
   $j=$235;
   label = 56; break;
  case 61: 
   var $237=$j;
   var $238=$dim0;
   var $239=(($237)|(0))==(($238)|(0));
   if ($239) { label = 62; break; } else { label = 64; break; }
  case 62: 
   var $ld$8$0=(($step)|0);
   var $241$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($step+4)|0);
   var $241$1=HEAP32[(($ld$9$1)>>2)];
   var $$etemp$10$0=2147483647;
   var $$etemp$10$1=0;
   var $242=(($241$1|0) > ($$etemp$10$1|0)) | (((($241$1|0) == ($$etemp$10$1|0) & ($241$0>>>0) >  ($$etemp$10$0>>>0))));
   if ($242) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $244=$j;
   var $245=((($244)+(1))|0);
   $j=$245;
   label = 64; break;
  case 64: 
   var $247=$j;
   var $248=$dim0;
   var $249=(($247)|(0)) > (($248)|(0));
   if ($249) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $251=$j;
   $dim0=$251;
   label = 66; break;
  case 66: 
   var $253=$hdr;
   var $254=$i;
   var $255=$5;
   var $256=(($255+184)|0);
   var $257=(($256+($254<<2))|0);
   HEAP32[(($257)>>2)]=$253;
   var $258=$hdr;
   var $259=(($258+16)|0);
   var $260=$259;
   var $261=HEAP32[(($260)>>2)];
   var $262=$i;
   var $263=$5;
   var $264=(($263+16)|0);
   var $265=(($264+($262<<2))|0);
   HEAP32[(($265)>>2)]=$261;
   label = 67; break;
  case 67: 
   var $267=$i;
   var $268=((($267)+(1))|0);
   $i=$268;
   label = 10; break;
  case 68: 
   $size=1;
   var $270=$hdr0;
   var $271=(($270+4)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=((($272)-(1))|0);
   $j=$273;
   label = 69; break;
  case 69: 
   var $275=$j;
   var $276=$dim0;
   var $277=(($275)|(0)) > (($276)|(0));
   if ($277) { label = 70; break; } else { label = 72; break; }
  case 70: 
   var $279=$j;
   var $280=$hdr0;
   var $281=(($280+20)|0);
   var $282=(($281+($279<<3))|0);
   var $283=(($282)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=$size;
   var $286=(Math.imul($285,$284)|0);
   $size=$286;
   label = 71; break;
  case 71: 
   var $288=$j;
   var $289=((($288)-(1))|0);
   $j=$289;
   label = 69; break;
  case 72: 
   var $291=$dim0;
   var $292=((($291)+(1))|0);
   $dims=$292;
   var $293=$dims;
   var $294=$5;
   var $295=(($294+4)|0);
   HEAP32[(($295)>>2)]=$293;
   var $296=$1;
   var $297=$5;
   var $298=(($297)|0);
   HEAP32[(($298)>>2)]=$296;
   var $299=$5;
   var $300=(($299+8)|0);
   var $301=$size;
   __Z6cvSizeii($7, $301, 1);
   var $302=$300;
   var $303=$7;
   assert(8 % 1 === 0);HEAP32[(($302)>>2)]=HEAP32[(($303)>>2)];HEAP32[((($302)+(4))>>2)]=HEAP32[((($303)+(4))>>2)];
   $i=0;
   label = 73; break;
  case 73: 
   var $305=$i;
   var $306=$dims;
   var $307=(($305)|(0)) < (($306)|(0));
   if ($307) { label = 74; break; } else { label = 76; break; }
  case 74: 
   var $309=$i;
   var $310=$hdr0;
   var $311=(($310+20)|0);
   var $312=(($311+($309<<3))|0);
   var $313=(($312)|0);
   var $314=HEAP32[(($313)>>2)];
   var $315=$i;
   var $316=$5;
   var $317=(($316+56)|0);
   var $318=(($317+($315<<2))|0);
   HEAP32[(($318)>>2)]=$314;
   label = 75; break;
  case 75: 
   var $320=$i;
   var $321=((($320)+(1))|0);
   $i=$321;
   label = 73; break;
  case 76: 
   label = 77; break;
  case 77: 
   var $324=$dims;
   STACKTOP = sp;
   return $324;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL10cvGetMatNDPKvP7CvMatNDPi($arr, $matnd, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $result;
   var $stub=sp;
   var $mat;
   $1=$arr;
   $2=$matnd;
   $3=$coi;
   $result=0;
   var $4=$3;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$3;
   HEAP32[(($7)>>2)]=0;
   label = 3; break;
  case 3: 
   var $9=$2;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $12=$1;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-27, ((18408)|0), ((8088)|0), ((15440)|0), 429);
   label = 25; break;
  case 6: 
   var $16=$1;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $19=$1;
   var $20=$19;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22 & -65536;
   var $24=(($23)|(0))==1111687168;
   if ($24) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $26=$1;
   var $27=$26;
   var $28=(($27+16)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))!=0;
   if ($31) { label = 10; break; } else { label = 9; break; }
  case 9: 
   _cvError(-27, ((18408)|0), ((7992)|0), ((15440)|0), 434);
   label = 25; break;
  case 10: 
   var $34=$1;
   var $35=$34;
   $result=$35;
   label = 24; break;
  case 11: 
   var $37=$1;
   var $38=$37;
   $mat=$38;
   var $39=$mat;
   var $40=(($39)|(0))!=0;
   if ($40) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $42=$mat;
   var $43=$42;
   var $44=(($43)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0))==112;
   if ($46) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $48=$mat;
   var $49=$48;
   var $50=$3;
   var $51=_cvGetMat($49, $stub, $50, 0);
   $mat=$51;
   var $52=_cvGetErrStatus();
   var $53=(($52)|(0)) < 0;
   if ($53) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _cvError(-1, ((18408)|0), ((11328)|0), ((15440)|0), 443);
   label = 25; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $57=$mat;
   var $58=(($57)|(0))!=0;
   if ($58) { label = 17; break; } else { label = 20; break; }
  case 17: 
   var $60=$mat;
   var $61=(($60)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$62 & -65536;
   var $64=(($63)|(0))==1111621632;
   if ($64) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $66=$mat;
   var $67=(($66+24)|0);
   var $68=$67;
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69)|(0)) > 0;
   if ($70) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $72=$mat;
   var $73=(($72+20)|0);
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75)|(0)) > 0;
   if ($76) { label = 21; break; } else { label = 20; break; }
  case 20: 
   _cvError(-5, ((18408)|0), ((7632)|0), ((15440)|0), 446);
   label = 25; break;
  case 21: 
   var $79=$mat;
   var $80=(($79+16)|0);
   var $81=$80;
   var $82=HEAP32[(($81)>>2)];
   var $83=(($82)|(0))!=0;
   if ($83) { label = 23; break; } else { label = 22; break; }
  case 22: 
   _cvError(-27, ((18408)|0), ((7672)|0), ((15440)|0), 449);
   label = 25; break;
  case 23: 
   var $86=$mat;
   var $87=(($86+16)|0);
   var $88=$87;
   var $89=HEAP32[(($88)>>2)];
   var $90=$2;
   var $91=(($90+16)|0);
   var $92=$91;
   HEAP32[(($92)>>2)]=$89;
   var $93=$2;
   var $94=(($93+8)|0);
   HEAP32[(($94)>>2)]=0;
   var $95=$2;
   var $96=(($95+12)|0);
   HEAP32[(($96)>>2)]=0;
   var $97=$mat;
   var $98=(($97)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$2;
   var $101=(($100)|0);
   HEAP32[(($101)>>2)]=$99;
   var $102=$2;
   var $103=(($102+4)|0);
   HEAP32[(($103)>>2)]=2;
   var $104=$mat;
   var $105=(($104+20)|0);
   var $106=$105;
   var $107=HEAP32[(($106)>>2)];
   var $108=$2;
   var $109=(($108+20)|0);
   var $110=(($109)|0);
   var $111=(($110)|0);
   HEAP32[(($111)>>2)]=$107;
   var $112=$mat;
   var $113=(($112+4)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=$2;
   var $116=(($115+20)|0);
   var $117=(($116)|0);
   var $118=(($117+4)|0);
   HEAP32[(($118)>>2)]=$114;
   var $119=$mat;
   var $120=(($119+24)|0);
   var $121=$120;
   var $122=HEAP32[(($121)>>2)];
   var $123=$2;
   var $124=(($123+20)|0);
   var $125=(($124+8)|0);
   var $126=(($125)|0);
   HEAP32[(($126)>>2)]=$122;
   var $127=$mat;
   var $128=(($127)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$129 & 504;
   var $131=$130 >> 3;
   var $132=((($131)+(1))|0);
   var $133=$mat;
   var $134=(($133)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=$135 & 7;
   var $137=($136<<1);
   var $138=47696 >>> (($137)>>>(0));
   var $139=$138 & 3;
   var $140=$132 << $139;
   var $141=$2;
   var $142=(($141+20)|0);
   var $143=(($142+8)|0);
   var $144=(($143+4)|0);
   HEAP32[(($144)>>2)]=$140;
   var $145=$2;
   $result=$145;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $148=$result;
   STACKTOP = sp;
   return $148;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateSparseMat($dims, $sizes, $type) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $arr=sp;
   var $pix_size1;
   var $pix_size;
   var $i;
   var $size;
   var $storage;
   $1=$dims;
   $2=$sizes;
   $3=$type;
   HEAP32[(($arr)>>2)]=0;
   var $4=$3;
   var $5=$4 & 511;
   $3=$5;
   var $6=$3;
   var $7=$6 & 7;
   var $8=($7<<2);
   var $9=1212424721 >>> (($8)>>>(0));
   var $10=$9 & 15;
   $pix_size1=$10;
   var $11=$pix_size1;
   var $12=$3;
   var $13=$12 & 504;
   var $14=$13 >> 3;
   var $15=((($14)+(1))|0);
   var $16=(Math.imul($11,$15)|0);
   $pix_size=$16;
   var $17=$pix_size;
   var $18=(($17)|(0))==0;
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-210, ((6488)|0), ((13856)|0), ((15440)|0), 654);
   label = 26; break;
  case 3: 
   var $21=$1;
   var $22=(($21)|(0)) <= 0;
   if ($22) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $24=$1;
   var $25=(($24)|(0)) > 65536;
   if ($25) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-211, ((6488)|0), ((10936)|0), ((15440)|0), 657);
   label = 26; break;
  case 6: 
   var $28=$2;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 8; break; } else { label = 7; break; }
  case 7: 
   _cvError(-27, ((6488)|0), ((13496)|0), ((15440)|0), 660);
   label = 26; break;
  case 8: 
   $i=0;
   label = 9; break;
  case 9: 
   var $33=$i;
   var $34=$1;
   var $35=(($33)|(0)) < (($34)|(0));
   if ($35) { label = 10; break; } else { label = 14; break; }
  case 10: 
   var $37=$i;
   var $38=$2;
   var $39=(($38+($37<<2))|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0)) <= 0;
   if ($41) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-201, ((6488)|0), ((12672)|0), ((15440)|0), 665);
   label = 26; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $45=$i;
   var $46=((($45)+(1))|0);
   $i=$46;
   label = 9; break;
  case 14: 
   var $48=$1;
   var $49=((($48)-(32))|0);
   var $50=0 < (($49)|(0));
   if ($50) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $52=$1;
   var $53=((($52)-(32))|0);
   var $56 = $53;label = 17; break;
  case 16: 
   var $56 = 0;label = 17; break;
  case 17: 
   var $56;
   var $57=($56<<2);
   var $58=((($57)+(164))|0);
   var $59=_cvAlloc($58);
   var $60=$59;
   HEAP32[(($arr)>>2)]=$60;
   var $61=_cvGetErrStatus();
   var $62=(($61)|(0)) < 0;
   if ($62) { label = 18; break; } else { label = 19; break; }
  case 18: 
   _cvError(-1, ((6488)|0), ((11328)|0), ((15440)|0), 668);
   label = 26; break;
  case 19: 
   var $65=$3;
   var $66=1111752704 | $65;
   var $67=HEAP32[(($arr)>>2)];
   var $68=(($67)|0);
   HEAP32[(($68)>>2)]=$66;
   var $69=$1;
   var $70=HEAP32[(($arr)>>2)];
   var $71=(($70+4)|0);
   HEAP32[(($71)>>2)]=$69;
   var $72=HEAP32[(($arr)>>2)];
   var $73=(($72+8)|0);
   HEAP32[(($73)>>2)]=0;
   var $74=HEAP32[(($arr)>>2)];
   var $75=(($74+12)|0);
   HEAP32[(($75)>>2)]=1;
   var $76=HEAP32[(($arr)>>2)];
   var $77=(($76+36)|0);
   var $78=$77;
   var $79=$2;
   var $80=$79;
   var $81=$1;
   var $82=($81<<2);
   assert($82 % 1 === 0);(_memcpy($78, $80, $82)|0);
   var $83=$pix_size1;
   var $84=__Z7cvAlignii(8, $83);
   var $85=HEAP32[(($arr)>>2)];
   var $86=(($85+28)|0);
   HEAP32[(($86)>>2)]=$84;
   var $87=HEAP32[(($arr)>>2)];
   var $88=(($87+28)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=$pix_size;
   var $91=((($89)+($90))|0);
   var $92=__Z7cvAlignii($91, 4);
   var $93=HEAP32[(($arr)>>2)];
   var $94=(($93+32)|0);
   HEAP32[(($94)>>2)]=$92;
   var $95=HEAP32[(($arr)>>2)];
   var $96=(($95+32)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=$1;
   var $99=($98<<2);
   var $100=((($97)+($99))|0);
   var $101=__Z7cvAlignii($100, 8);
   $size=$101;
   var $102=_cvCreateMemStorage(4096);
   $storage=$102;
   var $103=_cvGetErrStatus();
   var $104=(($103)|(0)) < 0;
   if ($104) { label = 20; break; } else { label = 21; break; }
  case 20: 
   _cvError(-1, ((6488)|0), ((11328)|0), ((15440)|0), 680);
   label = 26; break;
  case 21: 
   var $107=$size;
   var $108=$storage;
   var $109=_cvCreateSet(0, 64, $107, $108);
   var $110=HEAP32[(($arr)>>2)];
   var $111=(($110+16)|0);
   HEAP32[(($111)>>2)]=$109;
   var $112=_cvGetErrStatus();
   var $113=(($112)|(0)) < 0;
   if ($113) { label = 22; break; } else { label = 23; break; }
  case 22: 
   _cvError(-1, ((6488)|0), ((11328)|0), ((15440)|0), 681);
   label = 26; break;
  case 23: 
   var $116=HEAP32[(($arr)>>2)];
   var $117=(($116+24)|0);
   HEAP32[(($117)>>2)]=1024;
   var $118=HEAP32[(($arr)>>2)];
   var $119=(($118+24)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=($120<<2);
   $size=$121;
   var $122=$size;
   var $123=_cvAlloc($122);
   var $124=$123;
   var $125=HEAP32[(($arr)>>2)];
   var $126=(($125+20)|0);
   HEAP32[(($126)>>2)]=$124;
   var $127=_cvGetErrStatus();
   var $128=(($127)|(0)) < 0;
   if ($128) { label = 24; break; } else { label = 25; break; }
  case 24: 
   _cvError(-1, ((6488)|0), ((11328)|0), ((15440)|0), 686);
   label = 26; break;
  case 25: 
   var $131=HEAP32[(($arr)>>2)];
   var $132=(($131+20)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$133;
   var $135=$size;
   _memset($134, 0, $135);
   label = 26; break;
  case 26: 
   var $137=_cvGetErrStatus();
   var $138=(($137)|(0)) < 0;
   if ($138) { label = 27; break; } else { label = 28; break; }
  case 27: 
   _cvReleaseSparseMat($arr);
   label = 28; break;
  case 28: 
   var $141=HEAP32[(($arr)>>2)];
   STACKTOP = sp;
   return $141;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReleaseSparseMat($array) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $arr;
   $1=$array;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-9, ((6448)|0), ((36848)|0), ((15440)|0), 707);
   label = 9; break;
  case 3: 
   var $6=$1;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $10=$1;
   var $11=HEAP32[(($10)>>2)];
   $arr=$11;
   var $12=$arr;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $15=$arr;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$17 & -65536;
   var $19=(($18)|(0))==1111752704;
   if ($19) { label = 7; break; } else { label = 6; break; }
  case 6: 
   _cvError(-206, ((6448)|0), ((36848)|0), ((15440)|0), 714);
   label = 9; break;
  case 7: 
   var $22=$1;
   HEAP32[(($22)>>2)]=0;
   var $23=$arr;
   var $24=(($23+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+44)|0);
   _cvReleaseMemStorage($26);
   var $27=$arr;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$29;
   _cvFree_($30);
   var $31=$arr;
   var $32=(($31+20)|0);
   HEAP32[(($32)>>2)]=0;
   var $33=$arr;
   var $34=$33;
   _cvFree_($34);
   $arr=0;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCloneSparseMat($src) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $dst=sp;
   $1=$src;
   HEAP32[(($dst)>>2)]=0;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & -65536;
   var $9=(($8)|(0))==1111752704;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-5, ((6408)|0), ((10784)|0), ((15440)|0), 738);
   label = 9; break;
  case 4: 
   var $12=$1;
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$1;
   var $16=(($15+36)|0);
   var $17=(($16)|0);
   var $18=$1;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=_cvCreateSparseMat($14, $17, $20);
   HEAP32[(($dst)>>2)]=$21;
   var $22=_cvGetErrStatus();
   var $23=(($22)|(0)) < 0;
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((6408)|0), ((11328)|0), ((15440)|0), 740);
   label = 9; break;
  case 6: 
   var $26=$1;
   var $27=$26;
   var $28=HEAP32[(($dst)>>2)];
   var $29=$28;
   _cvCopy($27, $29, 0);
   var $30=_cvGetErrStatus();
   var $31=(($30)|(0)) < 0;
   if ($31) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((6408)|0), ((11328)|0), ((15440)|0), 741);
   label = 9; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $35=_cvGetErrStatus();
   var $36=(($35)|(0)) < 0;
   if ($36) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvReleaseSparseMat($dst);
   label = 11; break;
  case 11: 
   var $39=HEAP32[(($dst)>>2)];
   STACKTOP = sp;
   return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _cvInitSparseMatIterator($mat, $iterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $node;
   var $idx;
   $1=$mat;
   $2=$iterator;
   $node=0;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1111752704;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-5, ((18424)|0), ((10664)|0), ((15440)|0), 764);
   label = 13; break;
  case 4: 
   var $13=$2;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-27, ((18424)|0), ((10608)|0), ((15440)|0), 767);
   label = 13; break;
  case 6: 
   var $17=$1;
   var $18=$2;
   var $19=(($18)|0);
   HEAP32[(($19)>>2)]=$17;
   var $20=$2;
   var $21=(($20+4)|0);
   HEAP32[(($21)>>2)]=0;
   $idx=0;
   label = 7; break;
  case 7: 
   var $23=$idx;
   var $24=$1;
   var $25=(($24+24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($23)|(0)) < (($26)|(0));
   if ($27) { label = 8; break; } else { label = 12; break; }
  case 8: 
   var $29=$idx;
   var $30=$1;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+($29<<2))|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0))!=0;
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $37=$idx;
   var $38=$1;
   var $39=(($38+20)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+($37<<2))|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$42;
   var $44=$2;
   var $45=(($44+4)|0);
   HEAP32[(($45)>>2)]=$43;
   $node=$43;
   label = 12; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $48=$idx;
   var $49=((($48)+(1))|0);
   $idx=$49;
   label = 7; break;
  case 12: 
   var $51=$idx;
   var $52=$2;
   var $53=(($52+8)|0);
   HEAP32[(($53)>>2)]=$51;
   label = 13; break;
  case 13: 
   var $55=$node;
   return $55;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReleaseData($arr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $mat;
   var $img;
   var $ptr;
   $1=$arr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1111621632;
   if ($10) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $12=$1;
   var $13=$12;
   var $14=(($13+24)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0)) > 0;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$1;
   var $20=$19;
   var $21=(($20+20)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0)) > 0;
   if ($24) { label = 7; break; } else { label = 5; break; }
  case 5: 
   var $26=$1;
   var $27=(($26)|(0))!=0;
   if ($27) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $29=$1;
   var $30=$29;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$32 & -65536;
   var $34=(($33)|(0))==1111687168;
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $36=$1;
   var $37=$36;
   $mat=$37;
   var $38=$mat;
   var $39=$38;
   _cvDecRefData($39);
   label = 16; break;
  case 8: 
   var $41=$1;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $44=$1;
   var $45=$44;
   var $46=(($45)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))==112;
   if ($48) { label = 10; break; } else { label = 14; break; }
  case 10: 
   var $50=$1;
   var $51=$50;
   $img=$51;
   var $52=HEAP32[((((38872)|0))>>2)];
   var $53=(($52)|(0))!=0;
   if ($53) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $55=$img;
   var $56=(($55+108)|0);
   var $57=HEAP32[(($56)>>2)];
   $ptr=$57;
   var $58=$img;
   var $59=(($58+108)|0);
   HEAP32[(($59)>>2)]=0;
   var $60=$img;
   var $61=(($60+68)|0);
   HEAP32[(($61)>>2)]=0;
   var $62=$ptr;
   _cvFree_($62);
   $ptr=0;
   label = 13; break;
  case 12: 
   var $64=HEAP32[((((38872)|0))>>2)];
   var $65=$img;
   FUNCTION_TABLE[$64]($65, 2);
   label = 13; break;
  case 13: 
   label = 15; break;
  case 14: 
   _cvError(-5, ((6216)|0), ((10176)|0), ((15440)|0), 1171);
   label = 17; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvPtr2D($arr, $y, $x, $_type) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $ptr;
   var $mat;
   var $type;
   var $img;
   var $pix_size;
   var $width;
   var $height;
   var $coi;
   var $type1;
   var $mat2;
   var $idx=sp;
   $1=$arr;
   $2=$y;
   $3=$x;
   $4=$_type;
   $ptr=0;
   var $5=$1;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $8=$1;
   var $9=$8;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11 & -65536;
   var $13=(($12)|(0))==1111621632;
   if ($13) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $15=$1;
   var $16=$15;
   var $17=(($16+24)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0)) > 0;
   if ($20) { label = 4; break; } else { label = 12; break; }
  case 4: 
   var $22=$1;
   var $23=$22;
   var $24=(($23+20)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0)) > 0;
   if ($27) { label = 5; break; } else { label = 12; break; }
  case 5: 
   var $29=$1;
   var $30=$29;
   var $31=(($30+16)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))!=0;
   if ($34) { label = 6; break; } else { label = 12; break; }
  case 6: 
   var $36=$1;
   var $37=$36;
   $mat=$37;
   var $38=$2;
   var $39=$mat;
   var $40=(($39+20)|0);
   var $41=$40;
   var $42=HEAP32[(($41)>>2)];
   var $43=(($38)>>>(0)) >= (($42)>>>(0));
   if ($43) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $45=$3;
   var $46=$mat;
   var $47=(($46+24)|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($45)>>>(0)) >= (($49)>>>(0));
   if ($50) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _cvError(-211, ((6024)|0), ((8944)|0), ((15440)|0), 2023);
   label = 51; break;
  case 9: 
   var $53=$mat;
   var $54=(($53)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$55 & 511;
   $type=$56;
   var $57=$4;
   var $58=(($57)|(0))!=0;
   if ($58) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $60=$type;
   var $61=$4;
   HEAP32[(($61)>>2)]=$60;
   label = 11; break;
  case 11: 
   var $63=$mat;
   var $64=(($63+16)|0);
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   var $67=$2;
   var $68=$mat;
   var $69=(($68+4)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(Math.imul($67,$70)|0);
   var $72=(($66+$71)|0);
   var $73=$3;
   var $74=$type;
   var $75=$74 & 504;
   var $76=$75 >> 3;
   var $77=((($76)+(1))|0);
   var $78=$type;
   var $79=$78 & 7;
   var $80=($79<<1);
   var $81=47696 >>> (($80)>>>(0));
   var $82=$81 & 3;
   var $83=$77 << $82;
   var $84=(Math.imul($73,$83)|0);
   var $85=(($72+$84)|0);
   $ptr=$85;
   label = 50; break;
  case 12: 
   var $87=$1;
   var $88=(($87)|(0))!=0;
   if ($88) { label = 13; break; } else { label = 33; break; }
  case 13: 
   var $90=$1;
   var $91=$90;
   var $92=(($91)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93)|(0))==112;
   if ($94) { label = 14; break; } else { label = 33; break; }
  case 14: 
   var $96=$1;
   var $97=$96;
   var $98=(($97+68)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))!=0;
   if ($100) { label = 15; break; } else { label = 33; break; }
  case 15: 
   var $102=$1;
   var $103=$102;
   $img=$103;
   var $104=$img;
   var $105=(($104+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$106 & 255;
   var $108=$107 >> 3;
   $pix_size=$108;
   var $109=$img;
   var $110=(($109+68)|0);
   var $111=HEAP32[(($110)>>2)];
   $ptr=$111;
   var $112=$img;
   var $113=(($112+28)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114)|(0))==0;
   if ($115) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $117=$img;
   var $118=(($117+8)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=$pix_size;
   var $121=(Math.imul($120,$119)|0);
   $pix_size=$121;
   label = 17; break;
  case 17: 
   var $123=$img;
   var $124=(($123+48)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125)|(0))!=0;
   if ($126) { label = 18; break; } else { label = 23; break; }
  case 18: 
   var $128=$img;
   var $129=(($128+48)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($130+12)|0);
   var $132=HEAP32[(($131)>>2)];
   $width=$132;
   var $133=$img;
   var $134=(($133+48)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135+16)|0);
   var $137=HEAP32[(($136)>>2)];
   $height=$137;
   var $138=$img;
   var $139=(($138+48)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140+8)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=$img;
   var $144=(($143+72)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(Math.imul($142,$145)|0);
   var $147=$img;
   var $148=(($147+48)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=(($149+4)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=$pix_size;
   var $153=(Math.imul($151,$152)|0);
   var $154=((($146)+($153))|0);
   var $155=$ptr;
   var $156=(($155+$154)|0);
   $ptr=$156;
   var $157=$img;
   var $158=(($157+28)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($159)|(0))!=0;
   if ($160) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $162=$img;
   var $163=(($162+48)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|0);
   var $166=HEAP32[(($165)>>2)];
   $coi=$166;
   var $167=$coi;
   var $168=(($167)|(0))!=0;
   if ($168) { label = 21; break; } else { label = 20; break; }
  case 20: 
   _cvError(-24, ((6024)|0), ((8808)|0), ((15440)|0), 2054);
   label = 51; break;
  case 21: 
   var $171=$coi;
   var $172=((($171)-(1))|0);
   var $173=$img;
   var $174=(($173+64)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(Math.imul($172,$175)|0);
   var $177=$ptr;
   var $178=(($177+$176)|0);
   $ptr=$178;
   label = 22; break;
  case 22: 
   label = 24; break;
  case 23: 
   var $181=$img;
   var $182=(($181+40)|0);
   var $183=HEAP32[(($182)>>2)];
   $width=$183;
   var $184=$img;
   var $185=(($184+44)|0);
   var $186=HEAP32[(($185)>>2)];
   $height=$186;
   label = 24; break;
  case 24: 
   var $188=$2;
   var $189=$height;
   var $190=(($188)>>>(0)) >= (($189)>>>(0));
   if ($190) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $192=$3;
   var $193=$width;
   var $194=(($192)>>>(0)) >= (($193)>>>(0));
   if ($194) { label = 26; break; } else { label = 27; break; }
  case 26: 
   _cvError(-211, ((6024)|0), ((8944)|0), ((15440)|0), 2066);
   label = 51; break;
  case 27: 
   var $197=$2;
   var $198=$img;
   var $199=(($198+72)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(Math.imul($197,$200)|0);
   var $202=$3;
   var $203=$pix_size;
   var $204=(Math.imul($202,$203)|0);
   var $205=((($201)+($204))|0);
   var $206=$ptr;
   var $207=(($206+$205)|0);
   $ptr=$207;
   var $208=$4;
   var $209=(($208)|(0))!=0;
   if ($209) { label = 28; break; } else { label = 32; break; }
  case 28: 
   var $211=$img;
   var $212=(($211+16)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=$213 & 255;
   var $215=$214 >> 2;
   var $216=$img;
   var $217=(($216+16)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=(($218)|(0)) < 0;
   var $220=(($219)&(1));
   var $221=((($215)+($220))|0);
   var $222=((784+$221)|0);
   var $223=HEAP8[($222)];
   var $224=(($223 << 24) >> 24);
   $type1=$224;
   var $225=$type1;
   var $226=(($225)|(0)) < 0;
   if ($226) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $228=$img;
   var $229=(($228+8)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=((($230)-(1))|0);
   var $232=(($231)>>>(0)) > 3;
   if ($232) { label = 30; break; } else { label = 31; break; }
  case 30: 
   _cvError(-210, ((6024)|0), ((36848)|0), ((15440)|0), 2074);
   label = 51; break;
  case 31: 
   var $235=$type1;
   var $236=$img;
   var $237=(($236+8)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=((($238)-(1))|0);
   var $240=$239 << 3;
   var $241=((($235)+($240))|0);
   var $242=$4;
   HEAP32[(($242)>>2)]=$241;
   label = 32; break;
  case 32: 
   label = 49; break;
  case 33: 
   var $245=$1;
   var $246=(($245)|(0))!=0;
   if ($246) { label = 34; break; } else { label = 43; break; }
  case 34: 
   var $248=$1;
   var $249=$248;
   var $250=(($249)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=$251 & -65536;
   var $253=(($252)|(0))==1111687168;
   if ($253) { label = 35; break; } else { label = 43; break; }
  case 35: 
   var $255=$1;
   var $256=$255;
   var $257=(($256+16)|0);
   var $258=$257;
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259)|(0))!=0;
   if ($260) { label = 36; break; } else { label = 43; break; }
  case 36: 
   var $262=$1;
   var $263=$262;
   $mat2=$263;
   var $264=$mat2;
   var $265=(($264+4)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=(($266)|(0))!=2;
   if ($267) { label = 39; break; } else { label = 37; break; }
  case 37: 
   var $269=$2;
   var $270=$mat2;
   var $271=(($270+20)|0);
   var $272=(($271)|0);
   var $273=(($272)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($269)>>>(0)) >= (($274)>>>(0));
   if ($275) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $277=$3;
   var $278=$mat2;
   var $279=(($278+20)|0);
   var $280=(($279+8)|0);
   var $281=(($280)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($277)>>>(0)) >= (($282)>>>(0));
   if ($283) { label = 39; break; } else { label = 40; break; }
  case 39: 
   _cvError(-211, ((6024)|0), ((8944)|0), ((15440)|0), 2086);
   label = 51; break;
  case 40: 
   var $286=$mat2;
   var $287=(($286+16)|0);
   var $288=$287;
   var $289=HEAP32[(($288)>>2)];
   var $290=$2;
   var $291=$mat2;
   var $292=(($291+20)|0);
   var $293=(($292)|0);
   var $294=(($293+4)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296=(Math.imul($290,$295)|0);
   var $297=(($289+$296)|0);
   var $298=$3;
   var $299=$mat2;
   var $300=(($299+20)|0);
   var $301=(($300+8)|0);
   var $302=(($301+4)|0);
   var $303=HEAP32[(($302)>>2)];
   var $304=(Math.imul($298,$303)|0);
   var $305=(($297+$304)|0);
   $ptr=$305;
   var $306=$4;
   var $307=(($306)|(0))!=0;
   if ($307) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $309=$mat2;
   var $310=(($309)|0);
   var $311=HEAP32[(($310)>>2)];
   var $312=$311 & 511;
   var $313=$4;
   HEAP32[(($313)>>2)]=$312;
   label = 42; break;
  case 42: 
   label = 48; break;
  case 43: 
   var $316=$1;
   var $317=(($316)|(0))!=0;
   if ($317) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $319=$1;
   var $320=$319;
   var $321=(($320)|0);
   var $322=HEAP32[(($321)>>2)];
   var $323=$322 & -65536;
   var $324=(($323)|(0))==1111752704;
   if ($324) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $326=(($idx)|0);
   var $327=$2;
   HEAP32[(($326)>>2)]=$327;
   var $328=(($326+4)|0);
   var $329=$3;
   HEAP32[(($328)>>2)]=$329;
   var $330=$1;
   var $331=$330;
   var $332=(($idx)|0);
   var $333=$4;
   var $334=__ZL13icvGetNodePtrP11CvSparseMatPKiPiiPj($331, $332, $333, 1, 0);
   $ptr=$334;
   label = 47; break;
  case 46: 
   _cvError(-5, ((6024)|0), ((10176)|0), ((15440)|0), 2099);
   label = 51; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $341=$ptr;
   STACKTOP = sp;
   return $341;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetElemType($arr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $type;
   var $img;
   $1=$arr;
   $type=-1;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1111621632;
   if ($10) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $12=$1;
   var $13=$12;
   var $14=(($13+24)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0)) > 0;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$1;
   var $20=$19;
   var $21=(($20+20)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0)) > 0;
   if ($24) { label = 9; break; } else { label = 5; break; }
  case 5: 
   var $26=$1;
   var $27=(($26)|(0))!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$1;
   var $30=$29;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$32 & -65536;
   var $34=(($33)|(0))==1111687168;
   if ($34) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $36=$1;
   var $37=(($36)|(0))!=0;
   if ($37) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $39=$1;
   var $40=$39;
   var $41=(($40)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$42 & -65536;
   var $44=(($43)|(0))==1111752704;
   if ($44) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $46=$1;
   var $47=$46;
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 & 511;
   $type=$50;
   label = 16; break;
  case 10: 
   var $52=$1;
   var $53=(($52)|(0))!=0;
   if ($53) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $55=$1;
   var $56=$55;
   var $57=(($56)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0))==112;
   if ($59) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $61=$1;
   var $62=$61;
   var $63=(($62+68)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $67=$1;
   var $68=$67;
   $img=$68;
   var $69=$img;
   var $70=(($69+16)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=$71 & 255;
   var $73=$72 >> 2;
   var $74=$img;
   var $75=(($74+16)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76)|(0)) < 0;
   var $78=(($77)&(1));
   var $79=((($73)+($78))|0);
   var $80=((784+$79)|0);
   var $81=HEAP8[($80)];
   var $82=(($81 << 24) >> 24);
   var $83=$img;
   var $84=(($83+8)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=((($85)-(1))|0);
   var $87=$86 << 3;
   var $88=((($82)+($87))|0);
   $type=$88;
   label = 15; break;
  case 14: 
   _cvError(-5, ((6176)|0), ((10176)|0), ((15440)|0), 1279);
   label = 17; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $93=$type;
   return $93;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetDims($arr, $sizes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $dims;
   var $mat;
   var $img;
   var $mat1;
   var $i;
   var $mat2;
   $1=$arr;
   $2=$sizes;
   $dims=-1;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $6=$1;
   var $7=$6;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 & -65536;
   var $11=(($10)|(0))==1111621632;
   if ($11) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $13=$1;
   var $14=$13;
   var $15=(($14+24)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0)) > 0;
   if ($18) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $20=$1;
   var $21=$20;
   var $22=(($21+20)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0)) > 0;
   if ($25) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $27=$1;
   var $28=$27;
   $mat=$28;
   $dims=2;
   var $29=$2;
   var $30=(($29)|(0))!=0;
   if ($30) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $32=$mat;
   var $33=(($32+20)|0);
   var $34=$33;
   var $35=HEAP32[(($34)>>2)];
   var $36=$2;
   var $37=(($36)|0);
   HEAP32[(($37)>>2)]=$35;
   var $38=$mat;
   var $39=(($38+24)|0);
   var $40=$39;
   var $41=HEAP32[(($40)>>2)];
   var $42=$2;
   var $43=(($42+4)|0);
   HEAP32[(($43)>>2)]=$41;
   label = 7; break;
  case 7: 
   label = 32; break;
  case 8: 
   var $46=$1;
   var $47=(($46)|(0))!=0;
   if ($47) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $49=$1;
   var $50=$49;
   var $51=(($50)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))==112;
   if ($53) { label = 10; break; } else { label = 14; break; }
  case 10: 
   var $55=$1;
   var $56=$55;
   var $57=(($56+68)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0))!=0;
   if ($59) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $61=$1;
   var $62=$61;
   $img=$62;
   $dims=2;
   var $63=$2;
   var $64=(($63)|(0))!=0;
   if ($64) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $66=$img;
   var $67=(($66+44)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$2;
   var $70=(($69)|0);
   HEAP32[(($70)>>2)]=$68;
   var $71=$img;
   var $72=(($71+40)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$2;
   var $75=(($74+4)|0);
   HEAP32[(($75)>>2)]=$73;
   label = 13; break;
  case 13: 
   label = 31; break;
  case 14: 
   var $78=$1;
   var $79=(($78)|(0))!=0;
   if ($79) { label = 15; break; } else { label = 23; break; }
  case 15: 
   var $81=$1;
   var $82=$81;
   var $83=(($82)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$84 & -65536;
   var $86=(($85)|(0))==1111687168;
   if ($86) { label = 16; break; } else { label = 23; break; }
  case 16: 
   var $88=$1;
   var $89=$88;
   $mat1=$89;
   var $90=$mat1;
   var $91=(($90+4)|0);
   var $92=HEAP32[(($91)>>2)];
   $dims=$92;
   var $93=$2;
   var $94=(($93)|(0))!=0;
   if ($94) { label = 17; break; } else { label = 22; break; }
  case 17: 
   $i=0;
   label = 18; break;
  case 18: 
   var $97=$i;
   var $98=$dims;
   var $99=(($97)|(0)) < (($98)|(0));
   if ($99) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $101=$i;
   var $102=$mat1;
   var $103=(($102+20)|0);
   var $104=(($103+($101<<3))|0);
   var $105=(($104)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$i;
   var $108=$2;
   var $109=(($108+($107<<2))|0);
   HEAP32[(($109)>>2)]=$106;
   label = 20; break;
  case 20: 
   var $111=$i;
   var $112=((($111)+(1))|0);
   $i=$112;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 30; break;
  case 23: 
   var $116=$1;
   var $117=(($116)|(0))!=0;
   if ($117) { label = 24; break; } else { label = 28; break; }
  case 24: 
   var $119=$1;
   var $120=$119;
   var $121=(($120)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$122 & -65536;
   var $124=(($123)|(0))==1111752704;
   if ($124) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $126=$1;
   var $127=$126;
   $mat2=$127;
   var $128=$mat2;
   var $129=(($128+4)|0);
   var $130=HEAP32[(($129)>>2)];
   $dims=$130;
   var $131=$2;
   var $132=(($131)|(0))!=0;
   if ($132) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $134=$2;
   var $135=$134;
   var $136=$mat2;
   var $137=(($136+36)|0);
   var $138=$137;
   var $139=$dims;
   var $140=($139<<2);
   assert($140 % 1 === 0);(_memcpy($135, $138, $140)|0);
   label = 27; break;
  case 27: 
   label = 29; break;
  case 28: 
   _cvError(-5, ((6160)|0), ((10176)|0), ((15440)|0), 1340);
   label = 33; break;
  case 29: 
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $148=$dims;
   return $148;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetSize($agg_result, $arr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $mat;
   var $img;
   $1=$arr;
   var $2=$agg_result;
   HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $6=$1;
   var $7=$6;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 & -65536;
   var $11=(($10)|(0))==1111621632;
   if ($11) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $13=$1;
   var $14=$13;
   var $15=(($14+24)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0)) > 0;
   if ($18) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $20=$1;
   var $21=$20;
   var $22=(($21+20)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0)) > 0;
   if ($25) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $27=$1;
   var $28=$27;
   $mat=$28;
   var $29=$mat;
   var $30=(($29+24)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=(($agg_result)|0);
   HEAP32[(($33)>>2)]=$32;
   var $34=$mat;
   var $35=(($34+20)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=(($agg_result+4)|0);
   HEAP32[(($38)>>2)]=$37;
   label = 14; break;
  case 6: 
   var $40=$1;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 7; break; } else { label = 12; break; }
  case 7: 
   var $43=$1;
   var $44=$43;
   var $45=(($44)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46)|(0))==112;
   if ($47) { label = 8; break; } else { label = 12; break; }
  case 8: 
   var $49=$1;
   var $50=$49;
   $img=$50;
   var $51=$img;
   var $52=(($51+48)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53)|(0))!=0;
   if ($54) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $56=$img;
   var $57=(($56+48)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+12)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($agg_result)|0);
   HEAP32[(($61)>>2)]=$60;
   var $62=$img;
   var $63=(($62+48)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+16)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($agg_result+4)|0);
   HEAP32[(($67)>>2)]=$66;
   label = 11; break;
  case 10: 
   var $69=$img;
   var $70=(($69+40)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($agg_result)|0);
   HEAP32[(($72)>>2)]=$71;
   var $73=$img;
   var $74=(($73+44)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($agg_result+4)|0);
   HEAP32[(($76)>>2)]=$75;
   label = 11; break;
  case 11: 
   label = 13; break;
  case 12: 
   _cvError(-5, ((6128)|0), ((9272)|0), ((15440)|0), 1453);
   label = 15; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetMat($array, $mat, $pCOI, $allowND) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $result;
   var $src;
   var $coi;
   var $img;
   var $depth;
   var $order;
   var $type;
   var $type1;
   var $type2;
   var $matnd;
   var $i;
   var $size1;
   var $size2;
   $1=$array;
   $2=$mat;
   $3=$pCOI;
   $4=$allowND;
   $result=0;
   var $5=$1;
   var $6=$5;
   $src=$6;
   $coi=0;
   var $7=$2;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$src;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-27, ((5824)|0), ((8088)|0), ((15440)|0), 2780);
   label = 58; break;
  case 4: 
   var $14=$src;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $17=$src;
   var $18=(($17)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$19 & -65536;
   var $21=(($20)|(0))==1111621632;
   if ($21) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $23=$src;
   var $24=(($23+24)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0)) > 0;
   if ($27) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $29=$src;
   var $30=(($29+20)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0)) > 0;
   if ($33) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $35=$src;
   var $36=(($35+16)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))!=0;
   if ($39) { label = 10; break; } else { label = 9; break; }
  case 9: 
   _cvError(-27, ((5824)|0), ((7992)|0), ((15440)|0), 2785);
   label = 58; break;
  case 10: 
   var $42=$src;
   $result=$42;
   label = 57; break;
  case 11: 
   var $44=$src;
   var $45=(($44)|(0))!=0;
   if ($45) { label = 12; break; } else { label = 36; break; }
  case 12: 
   var $47=$src;
   var $48=$47;
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==112;
   if ($51) { label = 13; break; } else { label = 36; break; }
  case 13: 
   var $53=$src;
   var $54=$53;
   $img=$54;
   var $55=$img;
   var $56=(($55+68)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|(0))==0;
   if ($58) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _cvError(-27, ((5824)|0), ((7960)|0), ((15440)|0), 2795);
   label = 58; break;
  case 15: 
   var $61=$img;
   var $62=(($61+16)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=$63 & 255;
   var $65=$64 >> 2;
   var $66=$img;
   var $67=(($66+16)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68)|(0)) < 0;
   var $70=(($69)&(1));
   var $71=((($65)+($70))|0);
   var $72=((784+$71)|0);
   var $73=HEAP8[($72)];
   var $74=(($73 << 24) >> 24);
   $depth=$74;
   var $75=$depth;
   var $76=(($75)|(0)) < 0;
   if ($76) { label = 16; break; } else { label = 17; break; }
  case 16: 
   _cvError(-17, ((5824)|0), ((36848)|0), ((15440)|0), 2799);
   label = 58; break;
  case 17: 
   var $79=$img;
   var $80=(($79+28)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$img;
   var $83=(($82+8)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0)) > 1;
   var $86=$85 ? -1 : 0;
   var $87=$81 & $86;
   $order=$87;
   var $88=$img;
   var $89=(($88+48)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))!=0;
   if ($91) { label = 18; break; } else { label = 30; break; }
  case 18: 
   var $93=$order;
   var $94=(($93)|(0))==1;
   if ($94) { label = 19; break; } else { label = 24; break; }
  case 19: 
   var $96=$depth;
   $type=$96;
   var $97=$img;
   var $98=(($97+48)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==0;
   if ($102) { label = 20; break; } else { label = 21; break; }
  case 20: 
   _cvError(-206, ((5824)|0), ((7896)|0), ((15440)|0), 2811);
   label = 58; break;
  case 21: 
   var $105=$2;
   var $106=$img;
   var $107=(($106+48)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108+16)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=$img;
   var $112=(($111+48)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$type;
   var $117=$img;
   var $118=(($117+68)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=$img;
   var $121=(($120+48)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=((($124)-(1))|0);
   var $126=$img;
   var $127=(($126+64)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(Math.imul($125,$128)|0);
   var $130=(($119+$129)|0);
   var $131=$img;
   var $132=(($131+48)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+8)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=$img;
   var $137=(($136+72)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(Math.imul($135,$138)|0);
   var $140=(($130+$139)|0);
   var $141=$img;
   var $142=(($141+48)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=(($143+4)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=$type;
   var $147=$146 & 504;
   var $148=$147 >> 3;
   var $149=((($148)+(1))|0);
   var $150=$type;
   var $151=$150 & 7;
   var $152=($151<<1);
   var $153=47696 >>> (($152)>>>(0));
   var $154=$153 & 3;
   var $155=$149 << $154;
   var $156=(Math.imul($145,$155)|0);
   var $157=(($140+$156)|0);
   var $158=$img;
   var $159=(($158+72)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=_cvInitMatHeader($105, $110, $115, $116, $157, $160);
   var $162=_cvGetErrStatus();
   var $163=(($162)|(0)) < 0;
   if ($163) { label = 22; break; } else { label = 23; break; }
  case 22: 
   _cvError(-1, ((5824)|0), ((11328)|0), ((15440)|0), 2818);
   label = 58; break;
  case 23: 
   label = 29; break;
  case 24: 
   var $167=$depth;
   var $168=$img;
   var $169=(($168+8)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=((($170)-(1))|0);
   var $172=$171 << 3;
   var $173=((($167)+($172))|0);
   $type1=$173;
   var $174=$img;
   var $175=(($174+48)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=(($176)|0);
   var $178=HEAP32[(($177)>>2)];
   $coi=$178;
   var $179=$img;
   var $180=(($179+8)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($181)|(0)) > 64;
   if ($182) { label = 25; break; } else { label = 26; break; }
  case 25: 
   _cvError(-15, ((5824)|0), ((7800)|0), ((15440)|0), 2827);
   label = 58; break;
  case 26: 
   var $185=$2;
   var $186=$img;
   var $187=(($186+48)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=(($188+16)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=$img;
   var $192=(($191+48)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+12)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=$type1;
   var $197=$img;
   var $198=(($197+68)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=$img;
   var $201=(($200+48)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=(($202+8)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=$img;
   var $206=(($205+72)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=(Math.imul($204,$207)|0);
   var $209=(($199+$208)|0);
   var $210=$img;
   var $211=(($210+48)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=(($212+4)|0);
   var $214=HEAP32[(($213)>>2)];
   var $215=$type1;
   var $216=$215 & 504;
   var $217=$216 >> 3;
   var $218=((($217)+(1))|0);
   var $219=$type1;
   var $220=$219 & 7;
   var $221=($220<<1);
   var $222=47696 >>> (($221)>>>(0));
   var $223=$222 & 3;
   var $224=$218 << $223;
   var $225=(Math.imul($214,$224)|0);
   var $226=(($209+$225)|0);
   var $227=$img;
   var $228=(($227+72)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=_cvInitMatHeader($185, $190, $195, $196, $226, $229);
   var $231=_cvGetErrStatus();
   var $232=(($231)|(0)) < 0;
   if ($232) { label = 27; break; } else { label = 28; break; }
  case 27: 
   _cvError(-1, ((5824)|0), ((11328)|0), ((15440)|0), 2833);
   label = 58; break;
  case 28: 
   label = 29; break;
  case 29: 
   label = 35; break;
  case 30: 
   var $237=$depth;
   var $238=$img;
   var $239=(($238+8)|0);
   var $240=HEAP32[(($239)>>2)];
   var $241=((($240)-(1))|0);
   var $242=$241 << 3;
   var $243=((($237)+($242))|0);
   $type2=$243;
   var $244=$order;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 31; break; } else { label = 32; break; }
  case 31: 
   _cvError(-206, ((5824)|0), ((7728)|0), ((15440)|0), 2841);
   label = 58; break;
  case 32: 
   var $248=$2;
   var $249=$img;
   var $250=(($249+44)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=$img;
   var $253=(($252+40)|0);
   var $254=HEAP32[(($253)>>2)];
   var $255=$type2;
   var $256=$img;
   var $257=(($256+68)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=$img;
   var $260=(($259+72)|0);
   var $261=HEAP32[(($260)>>2)];
   var $262=_cvInitMatHeader($248, $251, $254, $255, $258, $261);
   var $263=_cvGetErrStatus();
   var $264=(($263)|(0)) < 0;
   if ($264) { label = 33; break; } else { label = 34; break; }
  case 33: 
   _cvError(-1, ((5824)|0), ((11328)|0), ((15440)|0), 2844);
   label = 58; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $268=$2;
   $result=$268;
   label = 56; break;
  case 36: 
   var $270=$4;
   var $271=(($270)|(0))!=0;
   if ($271) { label = 37; break; } else { label = 54; break; }
  case 37: 
   var $273=$src;
   var $274=(($273)|(0))!=0;
   if ($274) { label = 38; break; } else { label = 54; break; }
  case 38: 
   var $276=$src;
   var $277=$276;
   var $278=(($277)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=$279 & -65536;
   var $281=(($280)|(0))==1111687168;
   if ($281) { label = 39; break; } else { label = 54; break; }
  case 39: 
   var $283=$src;
   var $284=$283;
   $matnd=$284;
   var $285=$matnd;
   var $286=(($285+20)|0);
   var $287=(($286)|0);
   var $288=(($287)|0);
   var $289=HEAP32[(($288)>>2)];
   $size1=$289;
   $size2=1;
   var $290=$src;
   var $291=(($290+16)|0);
   var $292=$291;
   var $293=HEAP32[(($292)>>2)];
   var $294=(($293)|(0))!=0;
   if ($294) { label = 41; break; } else { label = 40; break; }
  case 40: 
   _cvError(-27, ((5824)|0), ((7672)|0), ((15440)|0), 2856);
   label = 58; break;
  case 41: 
   var $297=$matnd;
   var $298=(($297)|0);
   var $299=HEAP32[(($298)>>2)];
   var $300=$299 & 16384;
   var $301=(($300)|(0))!=0;
   if ($301) { label = 43; break; } else { label = 42; break; }
  case 42: 
   _cvError(-5, ((5824)|0), ((9736)|0), ((15440)|0), 2859);
   label = 58; break;
  case 43: 
   var $304=$matnd;
   var $305=(($304+4)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306)|(0)) > 2;
   if ($307) { label = 44; break; } else { label = 49; break; }
  case 44: 
   $i=1;
   label = 45; break;
  case 45: 
   var $310=$i;
   var $311=$matnd;
   var $312=(($311+4)|0);
   var $313=HEAP32[(($312)>>2)];
   var $314=(($310)|(0)) < (($313)|(0));
   if ($314) { label = 46; break; } else { label = 48; break; }
  case 46: 
   var $316=$i;
   var $317=$matnd;
   var $318=(($317+20)|0);
   var $319=(($318+($316<<3))|0);
   var $320=(($319)|0);
   var $321=HEAP32[(($320)>>2)];
   var $322=$size2;
   var $323=(Math.imul($322,$321)|0);
   $size2=$323;
   label = 47; break;
  case 47: 
   var $325=$i;
   var $326=((($325)+(1))|0);
   $i=$326;
   label = 45; break;
  case 48: 
   label = 53; break;
  case 49: 
   var $329=$matnd;
   var $330=(($329+4)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=(($331)|(0))==1;
   if ($332) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $341 = 1;label = 52; break;
  case 51: 
   var $335=$matnd;
   var $336=(($335+20)|0);
   var $337=(($336+8)|0);
   var $338=(($337)|0);
   var $339=HEAP32[(($338)>>2)];
   var $341 = $339;label = 52; break;
  case 52: 
   var $341;
   $size2=$341;
   label = 53; break;
  case 53: 
   var $343=$2;
   var $344=(($343+8)|0);
   HEAP32[(($344)>>2)]=0;
   var $345=$2;
   var $346=(($345+12)|0);
   HEAP32[(($346)>>2)]=0;
   var $347=$matnd;
   var $348=(($347+16)|0);
   var $349=$348;
   var $350=HEAP32[(($349)>>2)];
   var $351=$2;
   var $352=(($351+16)|0);
   var $353=$352;
   HEAP32[(($353)>>2)]=$350;
   var $354=$size1;
   var $355=$2;
   var $356=(($355+20)|0);
   var $357=$356;
   HEAP32[(($357)>>2)]=$354;
   var $358=$size2;
   var $359=$2;
   var $360=(($359+24)|0);
   var $361=$360;
   HEAP32[(($361)>>2)]=$358;
   var $362=$matnd;
   var $363=(($362)|0);
   var $364=HEAP32[(($363)>>2)];
   var $365=$364 & 511;
   var $366=$365 | 1111621632;
   var $367=$366 | 16384;
   var $368=$2;
   var $369=(($368)|0);
   HEAP32[(($369)>>2)]=$367;
   var $370=$size2;
   var $371=$matnd;
   var $372=(($371)|0);
   var $373=HEAP32[(($372)>>2)];
   var $374=$373 & 504;
   var $375=$374 >> 3;
   var $376=((($375)+(1))|0);
   var $377=$matnd;
   var $378=(($377)|0);
   var $379=HEAP32[(($378)>>2)];
   var $380=$379 & 7;
   var $381=($380<<1);
   var $382=47696 >>> (($381)>>>(0));
   var $383=$382 & 3;
   var $384=$376 << $383;
   var $385=(Math.imul($370,$384)|0);
   var $386=$2;
   var $387=(($386+4)|0);
   HEAP32[(($387)>>2)]=$385;
   var $388=$size1;
   var $389=(($388)|(0)) > 1;
   var $390=$389 ? -1 : 0;
   var $391=$2;
   var $392=(($391+4)|0);
   var $393=HEAP32[(($392)>>2)];
   var $394=$393 & $390;
   HEAP32[(($392)>>2)]=$394;
   var $395=$2;
   __ZL12icvCheckHugeP5CvMat($395);
   var $396=$2;
   $result=$396;
   label = 55; break;
  case 54: 
   _cvError(-206, ((5824)|0), ((7632)|0), ((15440)|0), 2881);
   label = 58; break;
  case 55: 
   label = 56; break;
  case 56: 
   label = 57; break;
  case 57: 
   label = 58; break;
  case 58: 
   var $402=$3;
   var $403=(($402)|(0))!=0;
   if ($403) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $405=$coi;
   var $406=$3;
   HEAP32[(($406)>>2)]=$405;
   label = 60; break;
  case 60: 
   var $408=$result;
   return $408;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL13icvGetNodePtrP11CvSparseMatPKiPiiPj($mat, $idx, $_type, $create_node, $precalc_hashval) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $ptr;
   var $i;
   var $tabidx;
   var $hashval;
   var $node;
   var $t;
   var $nodeidx;
   var $newtable;
   var $newsize;
   var $newrawsize;
   var $iterator=sp;
   var $next;
   var $newidx;
   var $_icv_memcpy_i_;
   var $_icv_memcpy_len_;
   var $_icv_memcpy_dst_;
   var $_icv_memcpy_src_;
   var $_icv_memcpy_i_1;
   var $_icv_memcpy_len_2;
   var $_icv_memcpy_dst_3;
   $1=$mat;
   $2=$idx;
   $3=$_type;
   $4=$create_node;
   $5=$precalc_hashval;
   $ptr=0;
   $hashval=0;
   var $6=$5;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 9; break; } else { label = 2; break; }
  case 2: 
   $i=0;
   label = 3; break;
  case 3: 
   var $10=$i;
   var $11=$1;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($10)|(0)) < (($13)|(0));
   if ($14) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $16=$i;
   var $17=$2;
   var $18=(($17+($16<<2))|0);
   var $19=HEAP32[(($18)>>2)];
   $t=$19;
   var $20=$t;
   var $21=$i;
   var $22=$1;
   var $23=(($22+36)|0);
   var $24=(($23+($21<<2))|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($20)>>>(0)) >= (($25)>>>(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-211, ((18200)|0), ((14504)|0), ((15440)|0), 809);
   label = 50; break;
  case 6: 
   var $29=$hashval;
   var $30=((($29)*(33))&-1);
   var $31=$t;
   var $32=((($30)+($31))|0);
   $hashval=$32;
   label = 7; break;
  case 7: 
   var $34=$i;
   var $35=((($34)+(1))|0);
   $i=$35;
   label = 3; break;
  case 8: 
   label = 10; break;
  case 9: 
   var $38=$5;
   var $39=HEAP32[(($38)>>2)];
   $hashval=$39;
   label = 10; break;
  case 10: 
   var $41=$hashval;
   var $42=$1;
   var $43=(($42+24)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=((($44)-(1))|0);
   var $46=$41 & $45;
   $tabidx=$46;
   var $47=$hashval;
   var $48=$47 & 2147483647;
   $hashval=$48;
   var $49=$tabidx;
   var $50=$1;
   var $51=(($50+20)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+($49<<2))|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$54;
   $node=$55;
   label = 11; break;
  case 11: 
   var $57=$node;
   var $58=(($57)|(0))!=0;
   if ($58) { label = 12; break; } else { label = 24; break; }
  case 12: 
   var $60=$node;
   var $61=(($60)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$hashval;
   var $64=(($62)|(0))==(($63)|(0));
   if ($64) { label = 13; break; } else { label = 22; break; }
  case 13: 
   var $66=$node;
   var $67=$66;
   var $68=$1;
   var $69=(($68+32)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($67+$70)|0);
   var $72=$71;
   $nodeidx=$72;
   $i=0;
   label = 14; break;
  case 14: 
   var $74=$i;
   var $75=$1;
   var $76=(($75+4)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($74)|(0)) < (($77)|(0));
   if ($78) { label = 15; break; } else { label = 19; break; }
  case 15: 
   var $80=$i;
   var $81=$2;
   var $82=(($81+($80<<2))|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=$i;
   var $85=$nodeidx;
   var $86=(($85+($84<<2))|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($83)|(0))!=(($87)|(0));
   if ($88) { label = 16; break; } else { label = 17; break; }
  case 16: 
   label = 19; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $92=$i;
   var $93=((($92)+(1))|0);
   $i=$93;
   label = 14; break;
  case 19: 
   var $95=$i;
   var $96=$1;
   var $97=(($96+4)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($95)|(0))==(($98)|(0));
   if ($99) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $101=$node;
   var $102=$101;
   var $103=$1;
   var $104=(($103+28)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($102+$105)|0);
   $ptr=$106;
   label = 24; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $110=$node;
   var $111=(($110+4)|0);
   var $112=HEAP32[(($111)>>2)];
   $node=$112;
   label = 11; break;
  case 24: 
   var $114=$ptr;
   var $115=(($114)|(0))!=0;
   if ($115) { label = 47; break; } else { label = 25; break; }
  case 25: 
   var $117=$4;
   var $118=(($117)|(0))!=0;
   if ($118) { label = 26; break; } else { label = 47; break; }
  case 26: 
   var $120=$1;
   var $121=(($120+16)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122+60)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=$1;
   var $126=(($125+24)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=((($127)*(3))&-1);
   var $129=(($124)|(0)) >= (($128)|(0));
   if ($129) { label = 27; break; } else { label = 36; break; }
  case 27: 
   var $131=$1;
   var $132=(($131+24)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=($133<<1);
   var $135=(($134)|(0)) < 1024;
   if ($135) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $143 = 1024;label = 30; break;
  case 29: 
   var $138=$1;
   var $139=(($138+24)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=($140<<1);
   var $143 = $141;label = 30; break;
  case 30: 
   var $143;
   $newsize=$143;
   var $144=$newsize;
   var $145=($144<<2);
   $newrawsize=$145;
   var $146=$newrawsize;
   var $147=_cvAlloc($146);
   var $148=$147;
   $newtable=$148;
   var $149=_cvGetErrStatus();
   var $150=(($149)|(0)) < 0;
   if ($150) { label = 31; break; } else { label = 32; break; }
  case 31: 
   _cvError(-1, ((18200)|0), ((11328)|0), ((15440)|0), 850);
   label = 50; break;
  case 32: 
   var $153=$newtable;
   var $154=$153;
   var $155=$newrawsize;
   _memset($154, 0, $155);
   var $156=$1;
   var $157=_cvInitSparseMatIterator($156, $iterator);
   $node=$157;
   label = 33; break;
  case 33: 
   var $159=$node;
   var $160=(($159)|(0))!=0;
   if ($160) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $162=_cvGetNextSparseNode($iterator);
   $next=$162;
   var $163=$node;
   var $164=(($163)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=$newsize;
   var $167=((($166)-(1))|0);
   var $168=$165 & $167;
   $newidx=$168;
   var $169=$newidx;
   var $170=$newtable;
   var $171=(($170+($169<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=$172;
   var $174=$node;
   var $175=(($174+4)|0);
   HEAP32[(($175)>>2)]=$173;
   var $176=$node;
   var $177=$176;
   var $178=$newidx;
   var $179=$newtable;
   var $180=(($179+($178<<2))|0);
   HEAP32[(($180)>>2)]=$177;
   var $181=$next;
   $node=$181;
   label = 33; break;
  case 35: 
   var $183=$1;
   var $184=(($183+20)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=$185;
   _cvFree_($186);
   var $187=$1;
   var $188=(($187+20)|0);
   HEAP32[(($188)>>2)]=0;
   var $189=$newtable;
   var $190=$1;
   var $191=(($190+20)|0);
   HEAP32[(($191)>>2)]=$189;
   var $192=$newsize;
   var $193=$1;
   var $194=(($193+24)|0);
   HEAP32[(($194)>>2)]=$192;
   var $195=$hashval;
   var $196=$newsize;
   var $197=((($196)-(1))|0);
   var $198=$195 & $197;
   $tabidx=$198;
   label = 36; break;
  case 36: 
   var $200=$1;
   var $201=(($200+16)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=_cvSetNew($202);
   var $204=$203;
   $node=$204;
   var $205=$hashval;
   var $206=$node;
   var $207=(($206)|0);
   HEAP32[(($207)>>2)]=$205;
   var $208=$tabidx;
   var $209=$1;
   var $210=(($209+20)|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=(($211+($208<<2))|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=$213;
   var $215=$node;
   var $216=(($215+4)|0);
   HEAP32[(($216)>>2)]=$214;
   var $217=$node;
   var $218=$217;
   var $219=$tabidx;
   var $220=$1;
   var $221=(($220+20)|0);
   var $222=HEAP32[(($221)>>2)];
   var $223=(($222+($219<<2))|0);
   HEAP32[(($223)>>2)]=$218;
   var $224=$1;
   var $225=(($224+4)|0);
   var $226=HEAP32[(($225)>>2)];
   $_icv_memcpy_len_=$226;
   var $227=$node;
   var $228=$227;
   var $229=$1;
   var $230=(($229+32)|0);
   var $231=HEAP32[(($230)>>2)];
   var $232=(($228+$231)|0);
   var $233=$232;
   $_icv_memcpy_dst_=$233;
   var $234=$2;
   $_icv_memcpy_src_=$234;
   $_icv_memcpy_i_=0;
   label = 37; break;
  case 37: 
   var $236=$_icv_memcpy_i_;
   var $237=$_icv_memcpy_len_;
   var $238=(($236)>>>(0)) < (($237)>>>(0));
   if ($238) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $240=$_icv_memcpy_i_;
   var $241=$_icv_memcpy_src_;
   var $242=(($241+($240<<2))|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=$_icv_memcpy_i_;
   var $245=$_icv_memcpy_dst_;
   var $246=(($245+($244<<2))|0);
   HEAP32[(($246)>>2)]=$243;
   label = 39; break;
  case 39: 
   var $248=$_icv_memcpy_i_;
   var $249=((($248)+(1))|0);
   $_icv_memcpy_i_=$249;
   label = 37; break;
  case 40: 
   var $251=$node;
   var $252=$251;
   var $253=$1;
   var $254=(($253+28)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=(($252+$255)|0);
   $ptr=$256;
   var $257=$4;
   var $258=(($257)|(0)) > 0;
   if ($258) { label = 41; break; } else { label = 46; break; }
  case 41: 
   var $260=$1;
   var $261=(($260)|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=$262 & 504;
   var $264=$263 >> 3;
   var $265=((($264)+(1))|0);
   var $266=$1;
   var $267=(($266)|0);
   var $268=HEAP32[(($267)>>2)];
   var $269=$268 & 7;
   var $270=($269<<1);
   var $271=47696 >>> (($270)>>>(0));
   var $272=$271 & 3;
   var $273=$265 << $272;
   $_icv_memcpy_len_2=$273;
   var $274=$ptr;
   $_icv_memcpy_dst_3=$274;
   $_icv_memcpy_i_1=0;
   label = 42; break;
  case 42: 
   var $276=$_icv_memcpy_i_1;
   var $277=$_icv_memcpy_len_2;
   var $278=(($276)>>>(0)) < (($277)>>>(0));
   if ($278) { label = 43; break; } else { label = 45; break; }
  case 43: 
   var $280=$_icv_memcpy_i_1;
   var $281=$_icv_memcpy_dst_3;
   var $282=(($281+$280)|0);
   HEAP8[($282)]=0;
   label = 44; break;
  case 44: 
   var $284=$_icv_memcpy_i_1;
   var $285=((($284)+(1))|0);
   $_icv_memcpy_i_1=$285;
   label = 42; break;
  case 45: 
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   var $289=$3;
   var $290=(($289)|(0))!=0;
   if ($290) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $292=$1;
   var $293=(($292)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=$294 & 511;
   var $296=$3;
   HEAP32[(($296)>>2)]=$295;
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   var $299=$ptr;
   STACKTOP = sp;
   return $299;
  default: assert(0, "bad label: " + label);
 }
}
function _cvPtrND($arr, $idx, $_type, $create_node, $precalc_hashval) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $ptr;
   var $mat;
   var $i;
   $1=$arr;
   $2=$idx;
   $3=$_type;
   $4=$create_node;
   $5=$precalc_hashval;
   $ptr=0;
   var $6=$2;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((5984)|0), ((8616)|0), ((15440)|0), 2161);
   label = 29; break;
  case 3: 
   var $10=$1;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $13=$1;
   var $14=$13;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & -65536;
   var $18=(($17)|(0))==1111752704;
   if ($18) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $20=$1;
   var $21=$20;
   var $22=$2;
   var $23=$3;
   var $24=$4;
   var $25=$5;
   var $26=__ZL13icvGetNodePtrP11CvSparseMatPKiPiiPj($21, $22, $23, $24, $25);
   $ptr=$26;
   label = 28; break;
  case 6: 
   var $28=$1;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 7; break; } else { label = 18; break; }
  case 7: 
   var $31=$1;
   var $32=$31;
   var $33=(($32)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$34 & -65536;
   var $36=(($35)|(0))==1111687168;
   if ($36) { label = 8; break; } else { label = 18; break; }
  case 8: 
   var $38=$1;
   var $39=$38;
   var $40=(($39+16)|0);
   var $41=$40;
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))!=0;
   if ($43) { label = 9; break; } else { label = 18; break; }
  case 9: 
   var $45=$1;
   var $46=$45;
   $mat=$46;
   var $47=$mat;
   var $48=(($47+16)|0);
   var $49=$48;
   var $50=HEAP32[(($49)>>2)];
   $ptr=$50;
   $i=0;
   label = 10; break;
  case 10: 
   var $52=$i;
   var $53=$mat;
   var $54=(($53+4)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($52)|(0)) < (($55)|(0));
   if ($56) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $58=$i;
   var $59=$2;
   var $60=(($59+($58<<2))|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$i;
   var $63=$mat;
   var $64=(($63+20)|0);
   var $65=(($64+($62<<3))|0);
   var $66=(($65)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($61)>>>(0)) >= (($67)>>>(0));
   if ($68) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _cvError(-211, ((5984)|0), ((8944)|0), ((15440)|0), 2175);
   label = 29; break;
  case 13: 
   var $71=$i;
   var $72=$2;
   var $73=(($72+($71<<2))|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$i;
   var $76=$mat;
   var $77=(($76+20)|0);
   var $78=(($77+($75<<3))|0);
   var $79=(($78+4)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(Math.imul($74,$80)|0);
   var $82=$ptr;
   var $83=(($82+$81)|0);
   $ptr=$83;
   label = 14; break;
  case 14: 
   var $85=$i;
   var $86=((($85)+(1))|0);
   $i=$86;
   label = 10; break;
  case 15: 
   var $88=$3;
   var $89=(($88)|(0))!=0;
   if ($89) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $91=$mat;
   var $92=(($91)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$93 & 511;
   var $95=$3;
   HEAP32[(($95)>>2)]=$94;
   label = 17; break;
  case 17: 
   label = 27; break;
  case 18: 
   var $98=$1;
   var $99=(($98)|(0))!=0;
   if ($99) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $101=$1;
   var $102=$101;
   var $103=(($102)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=$104 & -65536;
   var $106=(($105)|(0))==1111621632;
   if ($106) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $108=$1;
   var $109=$108;
   var $110=(($109+24)|0);
   var $111=$110;
   var $112=HEAP32[(($111)>>2)];
   var $113=(($112)|(0)) > 0;
   if ($113) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $115=$1;
   var $116=$115;
   var $117=(($116+20)|0);
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119)|(0)) > 0;
   if ($120) { label = 24; break; } else { label = 22; break; }
  case 22: 
   var $122=$1;
   var $123=(($122)|(0))!=0;
   if ($123) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $125=$1;
   var $126=$125;
   var $127=(($126)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($128)|(0))==112;
   if ($129) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $131=$1;
   var $132=$2;
   var $133=(($132)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=$2;
   var $136=(($135+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=$3;
   var $139=_cvPtr2D($131, $134, $137, $138);
   $ptr=$139;
   label = 26; break;
  case 25: 
   _cvError(-5, ((5984)|0), ((10176)|0), ((15440)|0), 2185);
   label = 29; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   var $145=$ptr;
   return $145;
  default: assert(0, "bad label: " + label);
 }
}
function _cvInitImageHeader($image, $size, $depth, $channels, $origin, $align) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $result;
   var $colorModel=sp;
   var $channelSeq=(sp)+(8);
   $1=$image;
   $2=$depth;
   $3=$channels;
   $4=$origin;
   $5=$align;
   $result=0;
   var $6=$1;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-9, ((7016)|0), ((15560)|0), ((15440)|0), 3353);
   label = 30; break;
  case 3: 
   var $10=$1;
   var $11=$10;
   _memset($11, 0, 112);
   var $12=$1;
   var $13=(($12)|0);
   HEAP32[(($13)>>2)]=112;
   var $14=$3;
   __ZL16icvGetColorModeliPPcS0_($14, $colorModel, $channelSeq);
   var $15=_cvGetErrStatus();
   var $16=(($15)|(0)) < 0;
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((7016)|0), ((11328)|0), ((15440)|0), 3358);
   label = 30; break;
  case 5: 
   var $19=$1;
   var $20=(($19+20)|0);
   var $21=(($20)|0);
   var $22=HEAP32[(($colorModel)>>2)];
   var $23=_strncpy($21, $22, 4);
   var $24=$1;
   var $25=(($24+24)|0);
   var $26=(($25)|0);
   var $27=HEAP32[(($channelSeq)>>2)];
   var $28=_strncpy($26, $27, 4);
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0)) < 0;
   if ($31) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $33=(($size+4)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0)) < 0;
   if ($35) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-25, ((7016)|0), ((15456)|0), ((15440)|0), 3363);
   label = 30; break;
  case 8: 
   var $38=$2;
   var $39=(($38)|(0))!=1;
   if ($39) { label = 9; break; } else { label = 16; break; }
  case 9: 
   var $41=$2;
   var $42=(($41)|(0))!=8;
   if ($42) { label = 10; break; } else { label = 16; break; }
  case 10: 
   var $44=$2;
   var $45=(($44)|(0))!=-2147483640;
   if ($45) { label = 11; break; } else { label = 16; break; }
  case 11: 
   var $47=$2;
   var $48=(($47)|(0))!=16;
   if ($48) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $50=$2;
   var $51=(($50)|(0))!=-2147483632;
   if ($51) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $53=$2;
   var $54=(($53)|(0))!=-2147483616;
   if ($54) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $56=$2;
   var $57=(($56)|(0))!=32;
   if ($57) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $59=$2;
   var $60=(($59)|(0))!=64;
   if ($60) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $62=$3;
   var $63=(($62)|(0)) < 0;
   if ($63) { label = 17; break; } else { label = 18; break; }
  case 17: 
   _cvError(-17, ((7016)|0), ((15360)|0), ((15440)|0), 3370);
   label = 30; break;
  case 18: 
   var $66=$4;
   var $67=(($66)|(0))!=1;
   if ($67) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $69=$4;
   var $70=(($69)|(0))!=0;
   if ($70) { label = 20; break; } else { label = 21; break; }
  case 20: 
   _cvError(-20, ((7016)|0), ((15304)|0), ((15440)|0), 3372);
   label = 30; break;
  case 21: 
   var $73=$5;
   var $74=(($73)|(0))!=4;
   if ($74) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $76=$5;
   var $77=(($76)|(0))!=8;
   if ($77) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-21, ((7016)|0), ((15256)|0), ((15440)|0), 3375);
   label = 30; break;
  case 24: 
   var $80=(($size)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$1;
   var $83=(($82+40)|0);
   HEAP32[(($83)>>2)]=$81;
   var $84=(($size+4)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$1;
   var $87=(($86+44)|0);
   HEAP32[(($87)>>2)]=$85;
   var $88=$1;
   var $89=(($88+48)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))!=0;
   if ($91) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $93=$1;
   var $94=(($93+48)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|0);
   HEAP32[(($96)>>2)]=0;
   var $97=$1;
   var $98=(($97+48)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+8)|0);
   HEAP32[(($100)>>2)]=0;
   var $101=$1;
   var $102=(($101+48)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+4)|0);
   HEAP32[(($104)>>2)]=0;
   var $105=(($size)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$1;
   var $108=(($107+48)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109+12)|0);
   HEAP32[(($110)>>2)]=$106;
   var $111=(($size+4)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=$1;
   var $114=(($113+48)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115+16)|0);
   HEAP32[(($116)>>2)]=$112;
   label = 26; break;
  case 26: 
   var $118=$3;
   var $119=(($118)|(0)) < 1;
   if ($119) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $124 = 1;label = 29; break;
  case 28: 
   var $122=$3;
   var $124 = $122;label = 29; break;
  case 29: 
   var $124;
   var $125=$1;
   var $126=(($125+8)|0);
   HEAP32[(($126)>>2)]=$124;
   var $127=$2;
   var $128=$1;
   var $129=(($128+16)|0);
   HEAP32[(($129)>>2)]=$127;
   var $130=$5;
   var $131=$1;
   var $132=(($131+36)|0);
   HEAP32[(($132)>>2)]=$130;
   var $133=$1;
   var $134=(($133+40)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=$1;
   var $137=(($136+8)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(Math.imul($135,$138)|0);
   var $140=$1;
   var $141=(($140+16)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=$142 & 2147483647;
   var $144=(Math.imul($139,$143)|0);
   var $145=((($144)+(7))|0);
   var $146=((((($145)>>>(0)))/(8))&-1);
   var $147=$5;
   var $148=((($146)+($147))|0);
   var $149=((($148)-(1))|0);
   var $150=$5;
   var $151=((($150)-(1))|0);
   var $152=$151 ^ -1;
   var $153=$149 & $152;
   var $154=$1;
   var $155=(($154+72)|0);
   HEAP32[(($155)>>2)]=$153;
   var $156=$4;
   var $157=$1;
   var $158=(($157+32)|0);
   HEAP32[(($158)>>2)]=$156;
   var $159=$1;
   var $160=(($159+72)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=$1;
   var $163=(($162+44)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(Math.imul($161,$164)|0);
   var $166=$1;
   var $167=(($166+64)|0);
   HEAP32[(($167)>>2)]=$165;
   var $168=$1;
   $result=$168;
   label = 30; break;
  case 30: 
   var $170=$result;
   STACKTOP = sp;
   return $170;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvGetColorModeliPPcS0_($nchannels, $colorModel, $channelSeq) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$nchannels;
   $2=$colorModel;
   $3=$channelSeq;
   var $4=$1;
   var $5=((($4)-(1))|0);
   $1=$5;
   var $6=$3;
   HEAP32[(($6)>>2)]=((36848)|0);
   var $7=$2;
   HEAP32[(($7)>>2)]=((36848)|0);
   var $8=$1;
   var $9=(($8)>>>(0)) <= 3;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=((18000+($11<<3))|0);
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$2;
   HEAP32[(($15)>>2)]=$14;
   var $16=$1;
   var $17=((18000+($16<<3))|0);
   var $18=(($17+4)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$3;
   HEAP32[(($20)>>2)]=$19;
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetNextSparseNode($mat_iterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $idx;
   var $node;
   $2=$mat_iterator;
   var $3=$2;
   var $4=(($3+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$2;
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$2;
   var $16=(($15+4)|0);
   HEAP32[(($16)>>2)]=$14;
   $1=$14;
   label = 10; break;
  case 3: 
   var $18=$2;
   var $19=(($18+8)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)+(1))|0);
   HEAP32[(($19)>>2)]=$21;
   $idx=$21;
   label = 4; break;
  case 4: 
   var $23=$idx;
   var $24=$2;
   var $25=(($24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+24)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($23)|(0)) < (($28)|(0));
   if ($29) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $31=$idx;
   var $32=$2;
   var $33=(($32)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+20)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+($31<<2))|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$38;
   $node=$39;
   var $40=$node;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $43=$idx;
   var $44=$2;
   var $45=(($44+8)|0);
   HEAP32[(($45)>>2)]=$43;
   var $46=$node;
   var $47=$2;
   var $48=(($47+4)|0);
   HEAP32[(($48)>>2)]=$46;
   $1=$46;
   label = 10; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $51=$idx;
   var $52=((($51)+(1))|0);
   $idx=$52;
   label = 4; break;
  case 9: 
   $1=0;
   label = 10; break;
  case 10: 
   var $55=$1;
   return $55;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_8u_C2P2R_fPKhiPPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$2;
   var $12=(((($11)>>>(0)))&-1);
   $2=$12;
   var $13=$4;
   var $14=(((($13)>>>(0)))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($22)|(0)) < (($24)|(0));
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=$1;
   var $28=(($27)|0);
   var $29=HEAP8[($28)];
   $t0=$29;
   var $30=$1;
   var $31=(($30+1)|0);
   var $32=HEAP8[($31)];
   $t1=$32;
   var $33=$t0;
   var $34=$j;
   var $35=$plane0;
   var $36=(($35+$34)|0);
   HEAP8[($36)]=$33;
   var $37=$t1;
   var $38=$j;
   var $39=$plane1;
   var $40=(($39+$38)|0);
   HEAP8[($40)]=$37;
   label = 6; break;
  case 6: 
   var $42=$j;
   var $43=((($42)+(1))|0);
   $j=$43;
   var $44=$1;
   var $45=(($44+2)|0);
   $1=$45;
   label = 4; break;
  case 7: 
   var $47=$4;
   var $48=$plane0;
   var $49=(($48+$47)|0);
   $plane0=$49;
   var $50=$4;
   var $51=$plane1;
   var $52=(($51+$50)|0);
   $plane1=$52;
   var $53=(($size)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($54<<1);
   var $56=$1;
   var $57=(((-$55))|0);
   var $58=(($56+$57)|0);
   $1=$58;
   label = 8; break;
  case 8: 
   var $60=$2;
   var $61=$1;
   var $62=(($61+$60)|0);
   $1=$62;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateImageHeader($size, $depth, $channels) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $img=sp;
   var $3=(sp)+(8);
   var $colorModel=(sp)+(16);
   var $channelSeq=(sp)+(24);
   $1=$depth;
   $2=$channels;
   HEAP32[(($img)>>2)]=0;
   var $4=HEAP32[((((38864)|0))>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 7; break; } else { label = 2; break; }
  case 2: 
   var $7=_cvAlloc(112);
   var $8=$7;
   HEAP32[(($img)>>2)]=$8;
   var $9=_cvGetErrStatus();
   var $10=(($9)|(0)) < 0;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-1, ((7056)|0), ((11328)|0), ((15440)|0), 3290);
   label = 9; break;
  case 4: 
   var $13=HEAP32[(($img)>>2)];
   var $14=$3;
   var $15=$size;
   assert(8 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];
   var $16=$1;
   var $17=$2;
   var $18=_cvInitImageHeader($13, $3, $16, $17, 0, 4);
   var $19=_cvGetErrStatus();
   var $20=(($19)|(0)) < 0;
   if ($20) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((7056)|0), ((11328)|0), ((15440)|0), 3292);
   label = 9; break;
  case 6: 
   label = 8; break;
  case 7: 
   var $24=$2;
   __ZL16icvGetColorModeliPPcS0_($24, $colorModel, $channelSeq);
   var $25=HEAP32[((((38864)|0))>>2)];
   var $26=$2;
   var $27=$1;
   var $28=HEAP32[(($colorModel)>>2)];
   var $29=HEAP32[(($channelSeq)>>2)];
   var $30=(($size)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($size+4)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=FUNCTION_TABLE[$25]($26, 0, $27, $28, $29, 0, 0, 4, $31, $33, 0, 0, 0, 0);
   HEAP32[(($img)>>2)]=$34;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $37=_cvGetErrStatus();
   var $38=(($37)|(0)) < 0;
   if ($38) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $40=HEAP32[(($img)>>2)];
   var $41=(($40)|(0))!=0;
   if ($41) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvReleaseImageHeader($img);
   label = 12; break;
  case 12: 
   var $44=HEAP32[(($img)>>2)];
   STACKTOP = sp;
   return $44;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReleaseImageHeader($image) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $img;
   $1=$image;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6992)|0), ((36848)|0), ((15440)|0), 3412);
   label = 9; break;
  case 3: 
   var $6=$1;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $10=$1;
   var $11=HEAP32[(($10)>>2)];
   $img=$11;
   var $12=$1;
   HEAP32[(($12)>>2)]=0;
   var $13=HEAP32[((((38872)|0))>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $16=$img;
   var $17=(($16+48)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   _cvFree_($19);
   var $20=$img;
   var $21=(($20+48)|0);
   HEAP32[(($21)>>2)]=0;
   var $22=$img;
   var $23=$22;
   _cvFree_($23);
   $img=0;
   label = 7; break;
  case 6: 
   var $25=HEAP32[((((38872)|0))>>2)];
   var $26=$img;
   FUNCTION_TABLE[$25]($26, 5);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateImage($size, $depth, $channels) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $img=sp;
   var $3=(sp)+(8);
   $1=$depth;
   $2=$channels;
   HEAP32[(($img)>>2)]=0;
   var $4=$3;
   var $5=$size;
   assert(8 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];
   var $6=$1;
   var $7=$2;
   var $8=_cvCreateImageHeader($3, $6, $7);
   HEAP32[(($img)>>2)]=$8;
   var $9=_cvGetErrStatus();
   var $10=(($9)|(0)) < 0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((7040)|0), ((11328)|0), ((15440)|0), 3326);
   label = 6; break;
  case 3: 
   var $13=HEAP32[(($img)>>2)];
   var $14=$13;
   _cvCreateData($14);
   var $15=_cvGetErrStatus();
   var $16=(($15)|(0)) < 0;
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((7040)|0), ((11328)|0), ((15440)|0), 3328);
   label = 6; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $20=_cvGetErrStatus();
   var $21=(($20)|(0)) < 0;
   if ($21) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvReleaseImage($img);
   label = 8; break;
  case 8: 
   var $24=HEAP32[(($img)>>2)];
   STACKTOP = sp;
   return $24;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReleaseImage($image) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $img=sp;
   $1=$image;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6976)|0), ((36848)|0), ((15440)|0), 3441);
   label = 6; break;
  case 3: 
   var $6=$1;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $10=$1;
   var $11=HEAP32[(($10)>>2)];
   HEAP32[(($img)>>2)]=$11;
   var $12=$1;
   HEAP32[(($12)>>2)]=0;
   var $13=HEAP32[(($img)>>2)];
   var $14=$13;
   _cvReleaseData($14);
   _cvReleaseImageHeader($img);
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSetImageROI($image, $rect) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $rect; $rect = STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($rect)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($rect)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($rect)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($rect)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$image;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-9, ((6960)|0), ((36848)|0), ((15440)|0), 3464);
   label = 23; break;
  case 3: 
   var $6=(($rect)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$1;
   var $9=(($8+40)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)|(0)) > (($10)|(0));
   if ($11) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $13=(($rect+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$1;
   var $16=(($15+44)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($14)|(0)) > (($17)|(0));
   if ($18) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-25, ((6960)|0), ((36848)|0), ((15440)|0), 3467);
   label = 23; break;
  case 6: 
   var $21=(($rect)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($rect+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($22)+($24))|0);
   var $26=(($25)|(0)) < 0;
   if ($26) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $28=(($rect+4)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($rect+12)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=((($29)+($31))|0);
   var $33=(($32)|(0)) < 0;
   if ($33) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _cvError(-25, ((6960)|0), ((36848)|0), ((15440)|0), 3470);
   label = 23; break;
  case 9: 
   var $36=(($rect)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0)) < 0;
   if ($38) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $40=(($rect)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($rect+8)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=((($43)+($41))|0);
   HEAP32[(($42)>>2)]=$44;
   var $45=(($rect)|0);
   HEAP32[(($45)>>2)]=0;
   label = 11; break;
  case 11: 
   var $47=(($rect+4)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|(0)) < 0;
   if ($49) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $51=(($rect+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($rect+12)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=((($54)+($52))|0);
   HEAP32[(($53)>>2)]=$55;
   var $56=(($rect+4)|0);
   HEAP32[(($56)>>2)]=0;
   label = 13; break;
  case 13: 
   var $58=(($rect)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($rect+8)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=((($59)+($61))|0);
   var $63=$1;
   var $64=(($63+40)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($62)|(0)) > (($65)|(0));
   if ($66) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $68=$1;
   var $69=(($68+40)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($rect)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=((($70)-($72))|0);
   var $74=(($rect+8)|0);
   HEAP32[(($74)>>2)]=$73;
   label = 15; break;
  case 15: 
   var $76=(($rect+4)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($rect+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=((($77)+($79))|0);
   var $81=$1;
   var $82=(($81+44)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($80)|(0)) > (($83)|(0));
   if ($84) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $86=$1;
   var $87=(($86+44)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($rect+4)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=((($88)-($90))|0);
   var $92=(($rect+12)|0);
   HEAP32[(($92)>>2)]=$91;
   label = 17; break;
  case 17: 
   var $94=$1;
   var $95=(($94+48)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96)|(0))!=0;
   if ($97) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $99=(($rect)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$1;
   var $102=(($101+48)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+4)|0);
   HEAP32[(($104)>>2)]=$100;
   var $105=(($rect+4)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$1;
   var $108=(($107+48)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109+8)|0);
   HEAP32[(($110)>>2)]=$106;
   var $111=(($rect+8)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=$1;
   var $114=(($113+48)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115+12)|0);
   HEAP32[(($116)>>2)]=$112;
   var $117=(($rect+12)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=$1;
   var $120=(($119+48)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+16)|0);
   HEAP32[(($122)>>2)]=$118;
   label = 22; break;
  case 19: 
   var $124=(($rect)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($rect+4)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($rect+8)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($rect+12)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=__ZL12icvCreateROIiiiii(0, $125, $127, $129, $131);
   var $133=$1;
   var $134=(($133+48)|0);
   HEAP32[(($134)>>2)]=$132;
   var $135=_cvGetErrStatus();
   var $136=(($135)|(0)) < 0;
   if ($136) { label = 20; break; } else { label = 21; break; }
  case 20: 
   _cvError(-1, ((6960)|0), ((11328)|0), ((15440)|0), 3499);
   label = 23; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL12icvCreateROIiiiii($coi, $xOffset, $yOffset, $width, $height) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $roi;
   $1=$coi;
   $2=$xOffset;
   $3=$yOffset;
   $4=$width;
   $5=$height;
   $roi=0;
   var $6=HEAP32[((((38876)|0))>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $9=_cvAlloc(20);
   var $10=$9;
   $roi=$10;
   var $11=_cvGetErrStatus();
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-1, ((18312)|0), ((11328)|0), ((15440)|0), 3238);
   label = 7; break;
  case 4: 
   var $15=$1;
   var $16=$roi;
   var $17=(($16)|0);
   HEAP32[(($17)>>2)]=$15;
   var $18=$2;
   var $19=$roi;
   var $20=(($19+4)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$3;
   var $22=$roi;
   var $23=(($22+8)|0);
   HEAP32[(($23)>>2)]=$21;
   var $24=$4;
   var $25=$roi;
   var $26=(($25+12)|0);
   HEAP32[(($26)>>2)]=$24;
   var $27=$5;
   var $28=$roi;
   var $29=(($28+16)|0);
   HEAP32[(($29)>>2)]=$27;
   label = 6; break;
  case 5: 
   var $31=HEAP32[((((38876)|0))>>2)];
   var $32=$1;
   var $33=$2;
   var $34=$3;
   var $35=$4;
   var $36=$5;
   var $37=FUNCTION_TABLE[$31]($32, $33, $34, $35, $36);
   $roi=$37;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $40=$roi;
   return $40;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSetImageCOI($image, $coi) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$image;
   $2=$coi;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-9, ((6920)|0), ((36848)|0), ((15440)|0), 3565);
   label = 14; break;
  case 3: 
   var $7=$2;
   var $8=$1;
   var $9=(($8+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)>>>(0)) > (($10)>>>(0));
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-24, ((6920)|0), ((36848)|0), ((15440)|0), 3568);
   label = 14; break;
  case 5: 
   var $14=$1;
   var $15=(($14+48)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $19=$2;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 7; break; } else { label = 13; break; }
  case 7: 
   var $22=$1;
   var $23=(($22+48)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))!=0;
   if ($25) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $27=$2;
   var $28=$1;
   var $29=(($28+48)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|0);
   HEAP32[(($31)>>2)]=$27;
   label = 12; break;
  case 9: 
   var $33=$2;
   var $34=$1;
   var $35=(($34+40)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$1;
   var $38=(($37+44)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=__ZL12icvCreateROIiiiii($33, 0, 0, $36, $39);
   var $41=$1;
   var $42=(($41+48)|0);
   HEAP32[(($42)>>2)]=$40;
   var $43=_cvGetErrStatus();
   var $44=(($43)|(0)) < 0;
   if ($44) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-1, ((6920)|0), ((11328)|0), ((15440)|0), 3578);
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCloneImage($src) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $dst;
   var $size;
   $1=$src;
   $dst=0;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==112;
   if ($8) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-5, ((6904)|0), ((15048)|0), ((15440)|0), 3614);
   label = 14; break;
  case 4: 
   var $11=HEAP32[((((38880)|0))>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 12; break; } else { label = 5; break; }
  case 5: 
   var $14=_cvAlloc(112);
   var $15=$14;
   $dst=$15;
   var $16=_cvGetErrStatus();
   var $17=(($16)|(0)) < 0;
   if ($17) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-1, ((6904)|0), ((11328)|0), ((15440)|0), 3618);
   label = 14; break;
  case 7: 
   var $20=$dst;
   var $21=$20;
   var $22=$1;
   var $23=$22;
   assert(112 % 1 === 0);(_memcpy($21, $23, 112)|0);
   var $24=$dst;
   var $25=(($24+108)|0);
   HEAP32[(($25)>>2)]=0;
   var $26=$dst;
   var $27=(($26+68)|0);
   HEAP32[(($27)>>2)]=0;
   var $28=$dst;
   var $29=(($28+48)|0);
   HEAP32[(($29)>>2)]=0;
   var $30=$1;
   var $31=(($30+48)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))!=0;
   if ($33) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $35=$1;
   var $36=(($35+48)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$1;
   var $41=(($40+48)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42+4)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$1;
   var $46=(($45+48)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+8)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$1;
   var $51=(($50+48)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+12)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$1;
   var $56=(($55+48)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+16)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=__ZL12icvCreateROIiiiii($39, $44, $49, $54, $59);
   var $61=$dst;
   var $62=(($61+48)|0);
   HEAP32[(($62)>>2)]=$60;
   label = 9; break;
  case 9: 
   var $64=$1;
   var $65=(($64+68)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66)|(0))!=0;
   if ($67) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $69=$1;
   var $70=(($69+64)|0);
   var $71=HEAP32[(($70)>>2)];
   $size=$71;
   var $72=$dst;
   var $73=$72;
   _cvCreateData($73);
   var $74=$dst;
   var $75=(($74+68)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$1;
   var $78=(($77+68)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=$size;
   assert($80 % 1 === 0);(_memcpy($76, $79, $80)|0);
   label = 11; break;
  case 11: 
   label = 13; break;
  case 12: 
   var $83=HEAP32[((((38880)|0))>>2)];
   var $84=$1;
   var $85=FUNCTION_TABLE[$83]($84);
   $dst=$85;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $88=$dst;
   return $88;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSetNew($set_header) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $elem=sp;
   $1=$set_header;
   var $2=$1;
   var $3=(($2+56)|0);
   var $4=HEAP32[(($3)>>2)];
   HEAP32[(($elem)>>2)]=$4;
   var $5=HEAP32[(($elem)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=HEAP32[(($elem)>>2)];
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$1;
   var $12=(($11+56)|0);
   HEAP32[(($12)>>2)]=$10;
   var $13=HEAP32[(($elem)>>2)];
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 67108863;
   var $17=HEAP32[(($elem)>>2)];
   var $18=(($17)|0);
   HEAP32[(($18)>>2)]=$16;
   var $19=$1;
   var $20=(($19+60)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=((($21)+(1))|0);
   HEAP32[(($20)>>2)]=$22;
   label = 4; break;
  case 3: 
   var $24=$1;
   var $25=_cvSetAdd($24, 0, $elem);
   label = 4; break;
  case 4: 
   var $27=HEAP32[(($elem)>>2)];
   STACKTOP = sp;
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_8u_C3P3R_fPKhiPPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $j;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$3;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$2;
   var $15=(((($14)>>>(0)))&-1);
   $2=$15;
   var $16=$4;
   var $17=(((($16)>>>(0)))&-1);
   $4=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $25=$j;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$1;
   var $31=(($30)|0);
   var $32=HEAP8[($31)];
   $t0=$32;
   var $33=$1;
   var $34=(($33+1)|0);
   var $35=HEAP8[($34)];
   $t1=$35;
   var $36=$1;
   var $37=(($36+2)|0);
   var $38=HEAP8[($37)];
   $t2=$38;
   var $39=$t0;
   var $40=$j;
   var $41=$plane0;
   var $42=(($41+$40)|0);
   HEAP8[($42)]=$39;
   var $43=$t1;
   var $44=$j;
   var $45=$plane1;
   var $46=(($45+$44)|0);
   HEAP8[($46)]=$43;
   var $47=$t2;
   var $48=$j;
   var $49=$plane2;
   var $50=(($49+$48)|0);
   HEAP8[($50)]=$47;
   label = 6; break;
  case 6: 
   var $52=$j;
   var $53=((($52)+(1))|0);
   $j=$53;
   var $54=$1;
   var $55=(($54+3)|0);
   $1=$55;
   label = 4; break;
  case 7: 
   var $57=$4;
   var $58=$plane0;
   var $59=(($58+$57)|0);
   $plane0=$59;
   var $60=$4;
   var $61=$plane1;
   var $62=(($61+$60)|0);
   $plane1=$62;
   var $63=$4;
   var $64=$plane2;
   var $65=(($64+$63)|0);
   $plane2=$65;
   var $66=(($size)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)*(3))&-1);
   var $69=$1;
   var $70=(((-$68))|0);
   var $71=(($69+$70)|0);
   $1=$71;
   label = 8; break;
  case 8: 
   var $73=$2;
   var $74=$1;
   var $75=(($74+$73)|0);
   $1=$75;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_8u_C4P4R_fPKhiPPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $plane3;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$3;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$3;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $plane3=$16;
   var $17=$2;
   var $18=(((($17)>>>(0)))&-1);
   $2=$18;
   var $19=$4;
   var $20=(((($19)>>>(0)))&-1);
   $4=$20;
   label = 2; break;
  case 2: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $28=$j;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $33=$1;
   var $34=(($33)|0);
   var $35=HEAP8[($34)];
   $t0=$35;
   var $36=$1;
   var $37=(($36+1)|0);
   var $38=HEAP8[($37)];
   $t1=$38;
   var $39=$t0;
   var $40=$j;
   var $41=$plane0;
   var $42=(($41+$40)|0);
   HEAP8[($42)]=$39;
   var $43=$t1;
   var $44=$j;
   var $45=$plane1;
   var $46=(($45+$44)|0);
   HEAP8[($46)]=$43;
   var $47=$1;
   var $48=(($47+2)|0);
   var $49=HEAP8[($48)];
   $t0=$49;
   var $50=$1;
   var $51=(($50+3)|0);
   var $52=HEAP8[($51)];
   $t1=$52;
   var $53=$t0;
   var $54=$j;
   var $55=$plane2;
   var $56=(($55+$54)|0);
   HEAP8[($56)]=$53;
   var $57=$t1;
   var $58=$j;
   var $59=$plane3;
   var $60=(($59+$58)|0);
   HEAP8[($60)]=$57;
   label = 6; break;
  case 6: 
   var $62=$j;
   var $63=((($62)+(1))|0);
   $j=$63;
   var $64=$1;
   var $65=(($64+4)|0);
   $1=$65;
   label = 4; break;
  case 7: 
   var $67=$4;
   var $68=$plane0;
   var $69=(($68+$67)|0);
   $plane0=$69;
   var $70=$4;
   var $71=$plane1;
   var $72=(($71+$70)|0);
   $plane1=$72;
   var $73=$4;
   var $74=$plane2;
   var $75=(($74+$73)|0);
   $plane2=$75;
   var $76=$4;
   var $77=$plane3;
   var $78=(($77+$76)|0);
   $plane3=$78;
   var $79=(($size)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=($80<<2);
   var $82=$1;
   var $83=(((-$81))|0);
   var $84=(($82+$83)|0);
   $1=$84;
   label = 8; break;
  case 8: 
   var $86=$2;
   var $87=$1;
   var $88=(($87+$86)|0);
   $1=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_16s_C2P2R_fPKtiPPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(2))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(2))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($22)|(0)) < (($24)|(0));
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=$1;
   var $28=(($27)|0);
   var $29=HEAP16[(($28)>>1)];
   $t0=$29;
   var $30=$1;
   var $31=(($30+2)|0);
   var $32=HEAP16[(($31)>>1)];
   $t1=$32;
   var $33=$t0;
   var $34=$j;
   var $35=$plane0;
   var $36=(($35+($34<<1))|0);
   HEAP16[(($36)>>1)]=$33;
   var $37=$t1;
   var $38=$j;
   var $39=$plane1;
   var $40=(($39+($38<<1))|0);
   HEAP16[(($40)>>1)]=$37;
   label = 6; break;
  case 6: 
   var $42=$j;
   var $43=((($42)+(1))|0);
   $j=$43;
   var $44=$1;
   var $45=(($44+4)|0);
   $1=$45;
   label = 4; break;
  case 7: 
   var $47=$4;
   var $48=$plane0;
   var $49=(($48+($47<<1))|0);
   $plane0=$49;
   var $50=$4;
   var $51=$plane1;
   var $52=(($51+($50<<1))|0);
   $plane1=$52;
   var $53=(($size)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($54<<1);
   var $56=$1;
   var $57=(((-$55))|0);
   var $58=(($56+($57<<1))|0);
   $1=$58;
   label = 8; break;
  case 8: 
   var $60=$2;
   var $61=$1;
   var $62=(($61+($60<<1))|0);
   $1=$62;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_16s_C3P3R_fPKtiPPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $j;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$3;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$2;
   var $15=((((($14)>>>(0)))/(2))&-1);
   $2=$15;
   var $16=$4;
   var $17=((((($16)>>>(0)))/(2))&-1);
   $4=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $25=$j;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$1;
   var $31=(($30)|0);
   var $32=HEAP16[(($31)>>1)];
   $t0=$32;
   var $33=$1;
   var $34=(($33+2)|0);
   var $35=HEAP16[(($34)>>1)];
   $t1=$35;
   var $36=$1;
   var $37=(($36+4)|0);
   var $38=HEAP16[(($37)>>1)];
   $t2=$38;
   var $39=$t0;
   var $40=$j;
   var $41=$plane0;
   var $42=(($41+($40<<1))|0);
   HEAP16[(($42)>>1)]=$39;
   var $43=$t1;
   var $44=$j;
   var $45=$plane1;
   var $46=(($45+($44<<1))|0);
   HEAP16[(($46)>>1)]=$43;
   var $47=$t2;
   var $48=$j;
   var $49=$plane2;
   var $50=(($49+($48<<1))|0);
   HEAP16[(($50)>>1)]=$47;
   label = 6; break;
  case 6: 
   var $52=$j;
   var $53=((($52)+(1))|0);
   $j=$53;
   var $54=$1;
   var $55=(($54+6)|0);
   $1=$55;
   label = 4; break;
  case 7: 
   var $57=$4;
   var $58=$plane0;
   var $59=(($58+($57<<1))|0);
   $plane0=$59;
   var $60=$4;
   var $61=$plane1;
   var $62=(($61+($60<<1))|0);
   $plane1=$62;
   var $63=$4;
   var $64=$plane2;
   var $65=(($64+($63<<1))|0);
   $plane2=$65;
   var $66=(($size)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)*(3))&-1);
   var $69=$1;
   var $70=(((-$68))|0);
   var $71=(($69+($70<<1))|0);
   $1=$71;
   label = 8; break;
  case 8: 
   var $73=$2;
   var $74=$1;
   var $75=(($74+($73<<1))|0);
   $1=$75;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_16s_C4P4R_fPKtiPPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $plane3;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$3;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$3;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $plane3=$16;
   var $17=$2;
   var $18=((((($17)>>>(0)))/(2))&-1);
   $2=$18;
   var $19=$4;
   var $20=((((($19)>>>(0)))/(2))&-1);
   $4=$20;
   label = 2; break;
  case 2: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $28=$j;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $33=$1;
   var $34=(($33)|0);
   var $35=HEAP16[(($34)>>1)];
   $t0=$35;
   var $36=$1;
   var $37=(($36+2)|0);
   var $38=HEAP16[(($37)>>1)];
   $t1=$38;
   var $39=$t0;
   var $40=$j;
   var $41=$plane0;
   var $42=(($41+($40<<1))|0);
   HEAP16[(($42)>>1)]=$39;
   var $43=$t1;
   var $44=$j;
   var $45=$plane1;
   var $46=(($45+($44<<1))|0);
   HEAP16[(($46)>>1)]=$43;
   var $47=$1;
   var $48=(($47+4)|0);
   var $49=HEAP16[(($48)>>1)];
   $t0=$49;
   var $50=$1;
   var $51=(($50+6)|0);
   var $52=HEAP16[(($51)>>1)];
   $t1=$52;
   var $53=$t0;
   var $54=$j;
   var $55=$plane2;
   var $56=(($55+($54<<1))|0);
   HEAP16[(($56)>>1)]=$53;
   var $57=$t1;
   var $58=$j;
   var $59=$plane3;
   var $60=(($59+($58<<1))|0);
   HEAP16[(($60)>>1)]=$57;
   label = 6; break;
  case 6: 
   var $62=$j;
   var $63=((($62)+(1))|0);
   $j=$63;
   var $64=$1;
   var $65=(($64+8)|0);
   $1=$65;
   label = 4; break;
  case 7: 
   var $67=$4;
   var $68=$plane0;
   var $69=(($68+($67<<1))|0);
   $plane0=$69;
   var $70=$4;
   var $71=$plane1;
   var $72=(($71+($70<<1))|0);
   $plane1=$72;
   var $73=$4;
   var $74=$plane2;
   var $75=(($74+($73<<1))|0);
   $plane2=$75;
   var $76=$4;
   var $77=$plane3;
   var $78=(($77+($76<<1))|0);
   $plane3=$78;
   var $79=(($size)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=($80<<2);
   var $82=$1;
   var $83=(((-$81))|0);
   var $84=(($82+($83<<1))|0);
   $1=$84;
   label = 8; break;
  case 8: 
   var $86=$2;
   var $87=$1;
   var $88=(($87+($86<<1))|0);
   $1=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_32f_C2P2R_fPKiiPPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(4))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(4))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($22)|(0)) < (($24)|(0));
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=$1;
   var $28=(($27)|0);
   var $29=HEAP32[(($28)>>2)];
   $t0=$29;
   var $30=$1;
   var $31=(($30+4)|0);
   var $32=HEAP32[(($31)>>2)];
   $t1=$32;
   var $33=$t0;
   var $34=$j;
   var $35=$plane0;
   var $36=(($35+($34<<2))|0);
   HEAP32[(($36)>>2)]=$33;
   var $37=$t1;
   var $38=$j;
   var $39=$plane1;
   var $40=(($39+($38<<2))|0);
   HEAP32[(($40)>>2)]=$37;
   label = 6; break;
  case 6: 
   var $42=$j;
   var $43=((($42)+(1))|0);
   $j=$43;
   var $44=$1;
   var $45=(($44+8)|0);
   $1=$45;
   label = 4; break;
  case 7: 
   var $47=$4;
   var $48=$plane0;
   var $49=(($48+($47<<2))|0);
   $plane0=$49;
   var $50=$4;
   var $51=$plane1;
   var $52=(($51+($50<<2))|0);
   $plane1=$52;
   var $53=(($size)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($54<<1);
   var $56=$1;
   var $57=(((-$55))|0);
   var $58=(($56+($57<<2))|0);
   $1=$58;
   label = 8; break;
  case 8: 
   var $60=$2;
   var $61=$1;
   var $62=(($61+($60<<2))|0);
   $1=$62;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z16icvCopy_8u_C2P2RPKhiPPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((872)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z16icvCopy_8u_C3P3RPKhiPPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((856)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z16icvCopy_8u_C4P4RPKhiPPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((840)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_16s_C2P2RPKtiPPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1128)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_16s_C3P3RPKtiPPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1112)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_16s_C4P4RPKtiPPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1096)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_32f_C2P2RPKiiPPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1048)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __ZL19icvCopy_32f_C3P3R_fPKiiPPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $j;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$3;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$2;
   var $15=((((($14)>>>(0)))/(4))&-1);
   $2=$15;
   var $16=$4;
   var $17=((((($16)>>>(0)))/(4))&-1);
   $4=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $25=$j;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$1;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   $t0=$32;
   var $33=$1;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   $t1=$35;
   var $36=$1;
   var $37=(($36+8)|0);
   var $38=HEAP32[(($37)>>2)];
   $t2=$38;
   var $39=$t0;
   var $40=$j;
   var $41=$plane0;
   var $42=(($41+($40<<2))|0);
   HEAP32[(($42)>>2)]=$39;
   var $43=$t1;
   var $44=$j;
   var $45=$plane1;
   var $46=(($45+($44<<2))|0);
   HEAP32[(($46)>>2)]=$43;
   var $47=$t2;
   var $48=$j;
   var $49=$plane2;
   var $50=(($49+($48<<2))|0);
   HEAP32[(($50)>>2)]=$47;
   label = 6; break;
  case 6: 
   var $52=$j;
   var $53=((($52)+(1))|0);
   $j=$53;
   var $54=$1;
   var $55=(($54+12)|0);
   $1=$55;
   label = 4; break;
  case 7: 
   var $57=$4;
   var $58=$plane0;
   var $59=(($58+($57<<2))|0);
   $plane0=$59;
   var $60=$4;
   var $61=$plane1;
   var $62=(($61+($60<<2))|0);
   $plane1=$62;
   var $63=$4;
   var $64=$plane2;
   var $65=(($64+($63<<2))|0);
   $plane2=$65;
   var $66=(($size)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)*(3))&-1);
   var $69=$1;
   var $70=(((-$68))|0);
   var $71=(($69+($70<<2))|0);
   $1=$71;
   label = 8; break;
  case 8: 
   var $73=$2;
   var $74=$1;
   var $75=(($74+($73<<2))|0);
   $1=$75;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_32f_C4P4R_fPKiiPPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $plane3;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$3;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$3;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $plane3=$16;
   var $17=$2;
   var $18=((((($17)>>>(0)))/(4))&-1);
   $2=$18;
   var $19=$4;
   var $20=((((($19)>>>(0)))/(4))&-1);
   $4=$20;
   label = 2; break;
  case 2: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $28=$j;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $33=$1;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   $t0=$35;
   var $36=$1;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   $t1=$38;
   var $39=$t0;
   var $40=$j;
   var $41=$plane0;
   var $42=(($41+($40<<2))|0);
   HEAP32[(($42)>>2)]=$39;
   var $43=$t1;
   var $44=$j;
   var $45=$plane1;
   var $46=(($45+($44<<2))|0);
   HEAP32[(($46)>>2)]=$43;
   var $47=$1;
   var $48=(($47+8)|0);
   var $49=HEAP32[(($48)>>2)];
   $t0=$49;
   var $50=$1;
   var $51=(($50+12)|0);
   var $52=HEAP32[(($51)>>2)];
   $t1=$52;
   var $53=$t0;
   var $54=$j;
   var $55=$plane2;
   var $56=(($55+($54<<2))|0);
   HEAP32[(($56)>>2)]=$53;
   var $57=$t1;
   var $58=$j;
   var $59=$plane3;
   var $60=(($59+($58<<2))|0);
   HEAP32[(($60)>>2)]=$57;
   label = 6; break;
  case 6: 
   var $62=$j;
   var $63=((($62)+(1))|0);
   $j=$63;
   var $64=$1;
   var $65=(($64+16)|0);
   $1=$65;
   label = 4; break;
  case 7: 
   var $67=$4;
   var $68=$plane0;
   var $69=(($68+($67<<2))|0);
   $plane0=$69;
   var $70=$4;
   var $71=$plane1;
   var $72=(($71+($70<<2))|0);
   $plane1=$72;
   var $73=$4;
   var $74=$plane2;
   var $75=(($74+($73<<2))|0);
   $plane2=$75;
   var $76=$4;
   var $77=$plane3;
   var $78=(($77+($76<<2))|0);
   $plane3=$78;
   var $79=(($size)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=($80<<2);
   var $82=$1;
   var $83=(((-$81))|0);
   var $84=(($82+($83<<2))|0);
   $1=$84;
   label = 8; break;
  case 8: 
   var $86=$2;
   var $87=$1;
   var $88=(($87+($86<<2))|0);
   $1=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_64f_C2P2R_fPKxiPPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $j;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(8))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(8))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($22)|(0)) < (($24)|(0));
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=$1;
   var $28=(($27)|0);
   var $ld$0$0=(($28)|0);
   var $29$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($28+4)|0);
   var $29$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$29$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$29$1;
   var $30=$1;
   var $31=(($30+8)|0);
   var $ld$4$0=(($31)|0);
   var $32$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($31+4)|0);
   var $32$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$32$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$32$1;
   var $ld$8$0=(($t0)|0);
   var $33$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t0+4)|0);
   var $33$1=HEAP32[(($ld$9$1)>>2)];
   var $34=$j;
   var $35=$plane0;
   var $36=(($35+($34<<3))|0);
   var $st$10$0=(($36)|0);
   HEAP32[(($st$10$0)>>2)]=$33$0;
   var $st$11$1=(($36+4)|0);
   HEAP32[(($st$11$1)>>2)]=$33$1;
   var $ld$12$0=(($t1)|0);
   var $37$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t1+4)|0);
   var $37$1=HEAP32[(($ld$13$1)>>2)];
   var $38=$j;
   var $39=$plane1;
   var $40=(($39+($38<<3))|0);
   var $st$14$0=(($40)|0);
   HEAP32[(($st$14$0)>>2)]=$37$0;
   var $st$15$1=(($40+4)|0);
   HEAP32[(($st$15$1)>>2)]=$37$1;
   label = 6; break;
  case 6: 
   var $42=$j;
   var $43=((($42)+(1))|0);
   $j=$43;
   var $44=$1;
   var $45=(($44+16)|0);
   $1=$45;
   label = 4; break;
  case 7: 
   var $47=$4;
   var $48=$plane0;
   var $49=(($48+($47<<3))|0);
   $plane0=$49;
   var $50=$4;
   var $51=$plane1;
   var $52=(($51+($50<<3))|0);
   $plane1=$52;
   var $53=(($size)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($54<<1);
   var $56=$1;
   var $57=(((-$55))|0);
   var $58=(($56+($57<<3))|0);
   $1=$58;
   label = 8; break;
  case 8: 
   var $60=$2;
   var $61=$1;
   var $62=(($61+($60<<3))|0);
   $1=$62;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_64f_C3P3R_fPKxiPPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $j;
   var $t0=sp;
   var $t1=(sp)+(8);
   var $t2=(sp)+(16);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$3;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$2;
   var $15=((((($14)>>>(0)))/(8))&-1);
   $2=$15;
   var $16=$4;
   var $17=((((($16)>>>(0)))/(8))&-1);
   $4=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $25=$j;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$1;
   var $31=(($30)|0);
   var $ld$0$0=(($31)|0);
   var $32$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($31+4)|0);
   var $32$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$32$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$32$1;
   var $33=$1;
   var $34=(($33+8)|0);
   var $ld$4$0=(($34)|0);
   var $35$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($34+4)|0);
   var $35$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$35$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$35$1;
   var $36=$1;
   var $37=(($36+16)|0);
   var $ld$8$0=(($37)|0);
   var $38$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($37+4)|0);
   var $38$1=HEAP32[(($ld$9$1)>>2)];
   var $st$10$0=(($t2)|0);
   HEAP32[(($st$10$0)>>2)]=$38$0;
   var $st$11$1=(($t2+4)|0);
   HEAP32[(($st$11$1)>>2)]=$38$1;
   var $ld$12$0=(($t0)|0);
   var $39$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t0+4)|0);
   var $39$1=HEAP32[(($ld$13$1)>>2)];
   var $40=$j;
   var $41=$plane0;
   var $42=(($41+($40<<3))|0);
   var $st$14$0=(($42)|0);
   HEAP32[(($st$14$0)>>2)]=$39$0;
   var $st$15$1=(($42+4)|0);
   HEAP32[(($st$15$1)>>2)]=$39$1;
   var $ld$16$0=(($t1)|0);
   var $43$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($t1+4)|0);
   var $43$1=HEAP32[(($ld$17$1)>>2)];
   var $44=$j;
   var $45=$plane1;
   var $46=(($45+($44<<3))|0);
   var $st$18$0=(($46)|0);
   HEAP32[(($st$18$0)>>2)]=$43$0;
   var $st$19$1=(($46+4)|0);
   HEAP32[(($st$19$1)>>2)]=$43$1;
   var $ld$20$0=(($t2)|0);
   var $47$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($t2+4)|0);
   var $47$1=HEAP32[(($ld$21$1)>>2)];
   var $48=$j;
   var $49=$plane2;
   var $50=(($49+($48<<3))|0);
   var $st$22$0=(($50)|0);
   HEAP32[(($st$22$0)>>2)]=$47$0;
   var $st$23$1=(($50+4)|0);
   HEAP32[(($st$23$1)>>2)]=$47$1;
   label = 6; break;
  case 6: 
   var $52=$j;
   var $53=((($52)+(1))|0);
   $j=$53;
   var $54=$1;
   var $55=(($54+24)|0);
   $1=$55;
   label = 4; break;
  case 7: 
   var $57=$4;
   var $58=$plane0;
   var $59=(($58+($57<<3))|0);
   $plane0=$59;
   var $60=$4;
   var $61=$plane1;
   var $62=(($61+($60<<3))|0);
   $plane1=$62;
   var $63=$4;
   var $64=$plane2;
   var $65=(($64+($63<<3))|0);
   $plane2=$65;
   var $66=(($size)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)*(3))&-1);
   var $69=$1;
   var $70=(((-$68))|0);
   var $71=(($69+($70<<3))|0);
   $1=$71;
   label = 8; break;
  case 8: 
   var $73=$2;
   var $74=$1;
   var $75=(($74+($73<<3))|0);
   $1=$75;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_64f_C4P4R_fPKxiPPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $plane3;
   var $j;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$3;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$3;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$3;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$3;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $plane3=$16;
   var $17=$2;
   var $18=((((($17)>>>(0)))/(8))&-1);
   $2=$18;
   var $19=$4;
   var $20=((((($19)>>>(0)))/(8))&-1);
   $4=$20;
   label = 2; break;
  case 2: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $28=$j;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $33=$1;
   var $34=(($33)|0);
   var $ld$0$0=(($34)|0);
   var $35$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($34+4)|0);
   var $35$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$35$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$35$1;
   var $36=$1;
   var $37=(($36+8)|0);
   var $ld$4$0=(($37)|0);
   var $38$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($37+4)|0);
   var $38$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$38$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$38$1;
   var $ld$8$0=(($t0)|0);
   var $39$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t0+4)|0);
   var $39$1=HEAP32[(($ld$9$1)>>2)];
   var $40=$j;
   var $41=$plane0;
   var $42=(($41+($40<<3))|0);
   var $st$10$0=(($42)|0);
   HEAP32[(($st$10$0)>>2)]=$39$0;
   var $st$11$1=(($42+4)|0);
   HEAP32[(($st$11$1)>>2)]=$39$1;
   var $ld$12$0=(($t1)|0);
   var $43$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t1+4)|0);
   var $43$1=HEAP32[(($ld$13$1)>>2)];
   var $44=$j;
   var $45=$plane1;
   var $46=(($45+($44<<3))|0);
   var $st$14$0=(($46)|0);
   HEAP32[(($st$14$0)>>2)]=$43$0;
   var $st$15$1=(($46+4)|0);
   HEAP32[(($st$15$1)>>2)]=$43$1;
   var $47=$1;
   var $48=(($47+16)|0);
   var $ld$16$0=(($48)|0);
   var $49$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($48+4)|0);
   var $49$1=HEAP32[(($ld$17$1)>>2)];
   var $st$18$0=(($t0)|0);
   HEAP32[(($st$18$0)>>2)]=$49$0;
   var $st$19$1=(($t0+4)|0);
   HEAP32[(($st$19$1)>>2)]=$49$1;
   var $50=$1;
   var $51=(($50+24)|0);
   var $ld$20$0=(($51)|0);
   var $52$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($51+4)|0);
   var $52$1=HEAP32[(($ld$21$1)>>2)];
   var $st$22$0=(($t1)|0);
   HEAP32[(($st$22$0)>>2)]=$52$0;
   var $st$23$1=(($t1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$52$1;
   var $ld$24$0=(($t0)|0);
   var $53$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($t0+4)|0);
   var $53$1=HEAP32[(($ld$25$1)>>2)];
   var $54=$j;
   var $55=$plane2;
   var $56=(($55+($54<<3))|0);
   var $st$26$0=(($56)|0);
   HEAP32[(($st$26$0)>>2)]=$53$0;
   var $st$27$1=(($56+4)|0);
   HEAP32[(($st$27$1)>>2)]=$53$1;
   var $ld$28$0=(($t1)|0);
   var $57$0=HEAP32[(($ld$28$0)>>2)];
   var $ld$29$1=(($t1+4)|0);
   var $57$1=HEAP32[(($ld$29$1)>>2)];
   var $58=$j;
   var $59=$plane3;
   var $60=(($59+($58<<3))|0);
   var $st$30$0=(($60)|0);
   HEAP32[(($st$30$0)>>2)]=$57$0;
   var $st$31$1=(($60+4)|0);
   HEAP32[(($st$31$1)>>2)]=$57$1;
   label = 6; break;
  case 6: 
   var $62=$j;
   var $63=((($62)+(1))|0);
   $j=$63;
   var $64=$1;
   var $65=(($64+32)|0);
   $1=$65;
   label = 4; break;
  case 7: 
   var $67=$4;
   var $68=$plane0;
   var $69=(($68+($67<<3))|0);
   $plane0=$69;
   var $70=$4;
   var $71=$plane1;
   var $72=(($71+($70<<3))|0);
   $plane1=$72;
   var $73=$4;
   var $74=$plane2;
   var $75=(($74+($73<<3))|0);
   $plane2=$75;
   var $76=$4;
   var $77=$plane3;
   var $78=(($77+($76<<3))|0);
   $plane3=$78;
   var $79=(($size)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=($80<<2);
   var $82=$1;
   var $83=(((-$81))|0);
   var $84=(($82+($83<<3))|0);
   $1=$84;
   label = 8; break;
  case 8: 
   var $86=$2;
   var $87=$1;
   var $88=(($87+($86<<3))|0);
   $1=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_8u_CnC1CR_fPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$coi;
   var $7=$6;
   var $8=((($7)-(1))|0);
   var $9=$1;
   var $10=(($9+$8)|0);
   $1=$10;
   var $11=$2;
   var $12=(((($11)>>>(0)))&-1);
   $2=$12;
   var $13=$4;
   var $14=(((($13)>>>(0)))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$1;
   var $29=(($28)|0);
   var $30=HEAP8[($29)];
   $t0=$30;
   var $31=$5;
   var $32=$1;
   var $33=(($32+$31)|0);
   var $34=HEAP8[($33)];
   $t1=$34;
   var $35=$t0;
   var $36=$j;
   var $37=$3;
   var $38=(($37+$36)|0);
   HEAP8[($38)]=$35;
   var $39=$t1;
   var $40=$j;
   var $41=((($40)+(1))|0);
   var $42=$3;
   var $43=(($42+$41)|0);
   HEAP8[($43)]=$39;
   var $44=$5;
   var $45=($44<<1);
   var $46=$1;
   var $47=(($46+$45)|0);
   var $48=HEAP8[($47)];
   $t0=$48;
   var $49=$5;
   var $50=((($49)*(3))&-1);
   var $51=$1;
   var $52=(($51+$50)|0);
   var $53=HEAP8[($52)];
   $t1=$53;
   var $54=$t0;
   var $55=$j;
   var $56=((($55)+(2))|0);
   var $57=$3;
   var $58=(($57+$56)|0);
   HEAP8[($58)]=$54;
   var $59=$t1;
   var $60=$j;
   var $61=((($60)+(3))|0);
   var $62=$3;
   var $63=(($62+$61)|0);
   HEAP8[($63)]=$59;
   label = 6; break;
  case 6: 
   var $65=$j;
   var $66=((($65)+(4))|0);
   $j=$66;
   var $67=$5;
   var $68=($67<<2);
   var $69=$1;
   var $70=(($69+$68)|0);
   $1=$70;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$j;
   var $74=(($size)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0)) < (($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=$1;
   var $79=(($78)|0);
   var $80=HEAP8[($79)];
   var $81=$j;
   var $82=$3;
   var $83=(($82+$81)|0);
   HEAP8[($83)]=$80;
   label = 10; break;
  case 10: 
   var $85=$j;
   var $86=((($85)+(1))|0);
   $j=$86;
   var $87=$5;
   var $88=$1;
   var $89=(($88+$87)|0);
   $1=$89;
   label = 8; break;
  case 11: 
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$5;
   var $94=(Math.imul($92,$93)|0);
   var $95=$1;
   var $96=(((-$94))|0);
   var $97=(($95+$96)|0);
   $1=$97;
   label = 12; break;
  case 12: 
   var $99=$2;
   var $100=$1;
   var $101=(($100+$99)|0);
   $1=$101;
   var $102=$4;
   var $103=$3;
   var $104=(($103+$102)|0);
   $3=$104;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z17icvCopy_32f_C3P3RPKiiPPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1032)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_32f_C4P4RPKiiPPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1016)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_64f_C2P2RPKxiPPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((968)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_64f_C3P3RPKxiPPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((960)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_64f_C4P4RPKxiPPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((952)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_8u_CnC1CRPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$cn;
 $6=$coi;
 var $8=HEAP32[((832)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __ZL20icvCopy_16s_CnC1CR_fPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$coi;
   var $7=$6;
   var $8=((($7)-(1))|0);
   var $9=$1;
   var $10=(($9+($8<<1))|0);
   $1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(2))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(2))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$1;
   var $29=(($28)|0);
   var $30=HEAP16[(($29)>>1)];
   $t0=$30;
   var $31=$5;
   var $32=$1;
   var $33=(($32+($31<<1))|0);
   var $34=HEAP16[(($33)>>1)];
   $t1=$34;
   var $35=$t0;
   var $36=$j;
   var $37=$3;
   var $38=(($37+($36<<1))|0);
   HEAP16[(($38)>>1)]=$35;
   var $39=$t1;
   var $40=$j;
   var $41=((($40)+(1))|0);
   var $42=$3;
   var $43=(($42+($41<<1))|0);
   HEAP16[(($43)>>1)]=$39;
   var $44=$5;
   var $45=($44<<1);
   var $46=$1;
   var $47=(($46+($45<<1))|0);
   var $48=HEAP16[(($47)>>1)];
   $t0=$48;
   var $49=$5;
   var $50=((($49)*(3))&-1);
   var $51=$1;
   var $52=(($51+($50<<1))|0);
   var $53=HEAP16[(($52)>>1)];
   $t1=$53;
   var $54=$t0;
   var $55=$j;
   var $56=((($55)+(2))|0);
   var $57=$3;
   var $58=(($57+($56<<1))|0);
   HEAP16[(($58)>>1)]=$54;
   var $59=$t1;
   var $60=$j;
   var $61=((($60)+(3))|0);
   var $62=$3;
   var $63=(($62+($61<<1))|0);
   HEAP16[(($63)>>1)]=$59;
   label = 6; break;
  case 6: 
   var $65=$j;
   var $66=((($65)+(4))|0);
   $j=$66;
   var $67=$5;
   var $68=($67<<2);
   var $69=$1;
   var $70=(($69+($68<<1))|0);
   $1=$70;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$j;
   var $74=(($size)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0)) < (($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=$1;
   var $79=(($78)|0);
   var $80=HEAP16[(($79)>>1)];
   var $81=$j;
   var $82=$3;
   var $83=(($82+($81<<1))|0);
   HEAP16[(($83)>>1)]=$80;
   label = 10; break;
  case 10: 
   var $85=$j;
   var $86=((($85)+(1))|0);
   $j=$86;
   var $87=$5;
   var $88=$1;
   var $89=(($88+($87<<1))|0);
   $1=$89;
   label = 8; break;
  case 11: 
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$5;
   var $94=(Math.imul($92,$93)|0);
   var $95=$1;
   var $96=(((-$94))|0);
   var $97=(($95+($96<<1))|0);
   $1=$97;
   label = 12; break;
  case 12: 
   var $99=$2;
   var $100=$1;
   var $101=(($100+($99<<1))|0);
   $1=$101;
   var $102=$4;
   var $103=$3;
   var $104=(($103+($102<<1))|0);
   $3=$104;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvCopy_32f_CnC1CR_fPKiiPii6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$coi;
   var $7=$6;
   var $8=((($7)-(1))|0);
   var $9=$1;
   var $10=(($9+($8<<2))|0);
   $1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(4))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(4))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$1;
   var $29=(($28)|0);
   var $30=HEAP32[(($29)>>2)];
   $t0=$30;
   var $31=$5;
   var $32=$1;
   var $33=(($32+($31<<2))|0);
   var $34=HEAP32[(($33)>>2)];
   $t1=$34;
   var $35=$t0;
   var $36=$j;
   var $37=$3;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=$35;
   var $39=$t1;
   var $40=$j;
   var $41=((($40)+(1))|0);
   var $42=$3;
   var $43=(($42+($41<<2))|0);
   HEAP32[(($43)>>2)]=$39;
   var $44=$5;
   var $45=($44<<1);
   var $46=$1;
   var $47=(($46+($45<<2))|0);
   var $48=HEAP32[(($47)>>2)];
   $t0=$48;
   var $49=$5;
   var $50=((($49)*(3))&-1);
   var $51=$1;
   var $52=(($51+($50<<2))|0);
   var $53=HEAP32[(($52)>>2)];
   $t1=$53;
   var $54=$t0;
   var $55=$j;
   var $56=((($55)+(2))|0);
   var $57=$3;
   var $58=(($57+($56<<2))|0);
   HEAP32[(($58)>>2)]=$54;
   var $59=$t1;
   var $60=$j;
   var $61=((($60)+(3))|0);
   var $62=$3;
   var $63=(($62+($61<<2))|0);
   HEAP32[(($63)>>2)]=$59;
   label = 6; break;
  case 6: 
   var $65=$j;
   var $66=((($65)+(4))|0);
   $j=$66;
   var $67=$5;
   var $68=($67<<2);
   var $69=$1;
   var $70=(($69+($68<<2))|0);
   $1=$70;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$j;
   var $74=(($size)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0)) < (($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=$1;
   var $79=(($78)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$j;
   var $82=$3;
   var $83=(($82+($81<<2))|0);
   HEAP32[(($83)>>2)]=$80;
   label = 10; break;
  case 10: 
   var $85=$j;
   var $86=((($85)+(1))|0);
   $j=$86;
   var $87=$5;
   var $88=$1;
   var $89=(($88+($87<<2))|0);
   $1=$89;
   label = 8; break;
  case 11: 
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$5;
   var $94=(Math.imul($92,$93)|0);
   var $95=$1;
   var $96=(((-$94))|0);
   var $97=(($95+($96<<2))|0);
   $1=$97;
   label = 12; break;
  case 12: 
   var $99=$2;
   var $100=$1;
   var $101=(($100+($99<<2))|0);
   $1=$101;
   var $102=$4;
   var $103=$3;
   var $104=(($103+($102<<2))|0);
   $3=$104;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvCopy_64f_CnC1CR_fPKxiPxi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $j;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$coi;
   var $7=$6;
   var $8=((($7)-(1))|0);
   var $9=$1;
   var $10=(($9+($8<<3))|0);
   $1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(8))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(8))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$1;
   var $29=(($28)|0);
   var $ld$0$0=(($29)|0);
   var $30$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($29+4)|0);
   var $30$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$30$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$30$1;
   var $31=$5;
   var $32=$1;
   var $33=(($32+($31<<3))|0);
   var $ld$4$0=(($33)|0);
   var $34$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($33+4)|0);
   var $34$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$34$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$34$1;
   var $ld$8$0=(($t0)|0);
   var $35$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t0+4)|0);
   var $35$1=HEAP32[(($ld$9$1)>>2)];
   var $36=$j;
   var $37=$3;
   var $38=(($37+($36<<3))|0);
   var $st$10$0=(($38)|0);
   HEAP32[(($st$10$0)>>2)]=$35$0;
   var $st$11$1=(($38+4)|0);
   HEAP32[(($st$11$1)>>2)]=$35$1;
   var $ld$12$0=(($t1)|0);
   var $39$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t1+4)|0);
   var $39$1=HEAP32[(($ld$13$1)>>2)];
   var $40=$j;
   var $41=((($40)+(1))|0);
   var $42=$3;
   var $43=(($42+($41<<3))|0);
   var $st$14$0=(($43)|0);
   HEAP32[(($st$14$0)>>2)]=$39$0;
   var $st$15$1=(($43+4)|0);
   HEAP32[(($st$15$1)>>2)]=$39$1;
   var $44=$5;
   var $45=($44<<1);
   var $46=$1;
   var $47=(($46+($45<<3))|0);
   var $ld$16$0=(($47)|0);
   var $48$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($47+4)|0);
   var $48$1=HEAP32[(($ld$17$1)>>2)];
   var $st$18$0=(($t0)|0);
   HEAP32[(($st$18$0)>>2)]=$48$0;
   var $st$19$1=(($t0+4)|0);
   HEAP32[(($st$19$1)>>2)]=$48$1;
   var $49=$5;
   var $50=((($49)*(3))&-1);
   var $51=$1;
   var $52=(($51+($50<<3))|0);
   var $ld$20$0=(($52)|0);
   var $53$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($52+4)|0);
   var $53$1=HEAP32[(($ld$21$1)>>2)];
   var $st$22$0=(($t1)|0);
   HEAP32[(($st$22$0)>>2)]=$53$0;
   var $st$23$1=(($t1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$53$1;
   var $ld$24$0=(($t0)|0);
   var $54$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($t0+4)|0);
   var $54$1=HEAP32[(($ld$25$1)>>2)];
   var $55=$j;
   var $56=((($55)+(2))|0);
   var $57=$3;
   var $58=(($57+($56<<3))|0);
   var $st$26$0=(($58)|0);
   HEAP32[(($st$26$0)>>2)]=$54$0;
   var $st$27$1=(($58+4)|0);
   HEAP32[(($st$27$1)>>2)]=$54$1;
   var $ld$28$0=(($t1)|0);
   var $59$0=HEAP32[(($ld$28$0)>>2)];
   var $ld$29$1=(($t1+4)|0);
   var $59$1=HEAP32[(($ld$29$1)>>2)];
   var $60=$j;
   var $61=((($60)+(3))|0);
   var $62=$3;
   var $63=(($62+($61<<3))|0);
   var $st$30$0=(($63)|0);
   HEAP32[(($st$30$0)>>2)]=$59$0;
   var $st$31$1=(($63+4)|0);
   HEAP32[(($st$31$1)>>2)]=$59$1;
   label = 6; break;
  case 6: 
   var $65=$j;
   var $66=((($65)+(4))|0);
   $j=$66;
   var $67=$5;
   var $68=($67<<2);
   var $69=$1;
   var $70=(($69+($68<<3))|0);
   $1=$70;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$j;
   var $74=(($size)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0)) < (($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=$1;
   var $79=(($78)|0);
   var $ld$32$0=(($79)|0);
   var $80$0=HEAP32[(($ld$32$0)>>2)];
   var $ld$33$1=(($79+4)|0);
   var $80$1=HEAP32[(($ld$33$1)>>2)];
   var $81=$j;
   var $82=$3;
   var $83=(($82+($81<<3))|0);
   var $st$34$0=(($83)|0);
   HEAP32[(($st$34$0)>>2)]=$80$0;
   var $st$35$1=(($83+4)|0);
   HEAP32[(($st$35$1)>>2)]=$80$1;
   label = 10; break;
  case 10: 
   var $85=$j;
   var $86=((($85)+(1))|0);
   $j=$86;
   var $87=$5;
   var $88=$1;
   var $89=(($88+($87<<3))|0);
   $1=$89;
   label = 8; break;
  case 11: 
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$5;
   var $94=(Math.imul($92,$93)|0);
   var $95=$1;
   var $96=(((-$94))|0);
   var $97=(($95+($96<<3))|0);
   $1=$97;
   label = 12; break;
  case 12: 
   var $99=$2;
   var $100=$1;
   var $101=(($100+($99<<3))|0);
   $1=$101;
   var $102=$4;
   var $103=$3;
   var $104=(($103+($102<<3))|0);
   $3=$104;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_8u_P2C2R_fPPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$2;
   var $12=(((($11)>>>(0)))&-1);
   $2=$12;
   var $13=$4;
   var $14=(((($13)>>>(0)))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($22)|(0)) < (($24)|(0));
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=$j;
   var $28=$plane0;
   var $29=(($28+$27)|0);
   var $30=HEAP8[($29)];
   $t0=$30;
   var $31=$j;
   var $32=$plane1;
   var $33=(($32+$31)|0);
   var $34=HEAP8[($33)];
   $t1=$34;
   var $35=$t0;
   var $36=$3;
   var $37=(($36)|0);
   HEAP8[($37)]=$35;
   var $38=$t1;
   var $39=$3;
   var $40=(($39+1)|0);
   HEAP8[($40)]=$38;
   label = 6; break;
  case 6: 
   var $42=$j;
   var $43=((($42)+(1))|0);
   $j=$43;
   var $44=$3;
   var $45=(($44+2)|0);
   $3=$45;
   label = 4; break;
  case 7: 
   var $47=$2;
   var $48=$plane0;
   var $49=(($48+$47)|0);
   $plane0=$49;
   var $50=$2;
   var $51=$plane1;
   var $52=(($51+$50)|0);
   $plane1=$52;
   var $53=(($size)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($54<<1);
   var $56=$3;
   var $57=(((-$55))|0);
   var $58=(($56+$57)|0);
   $3=$58;
   label = 8; break;
  case 8: 
   var $60=$4;
   var $61=$3;
   var $62=(($61+$60)|0);
   $3=$62;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_8u_P3C3R_fPPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $j;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$2;
   var $15=(((($14)>>>(0)))&-1);
   $2=$15;
   var $16=$4;
   var $17=(((($16)>>>(0)))&-1);
   $4=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $25=$j;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$j;
   var $31=$plane0;
   var $32=(($31+$30)|0);
   var $33=HEAP8[($32)];
   $t0=$33;
   var $34=$j;
   var $35=$plane1;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   $t1=$37;
   var $38=$j;
   var $39=$plane2;
   var $40=(($39+$38)|0);
   var $41=HEAP8[($40)];
   $t2=$41;
   var $42=$t0;
   var $43=$3;
   var $44=(($43)|0);
   HEAP8[($44)]=$42;
   var $45=$t1;
   var $46=$3;
   var $47=(($46+1)|0);
   HEAP8[($47)]=$45;
   var $48=$t2;
   var $49=$3;
   var $50=(($49+2)|0);
   HEAP8[($50)]=$48;
   label = 6; break;
  case 6: 
   var $52=$j;
   var $53=((($52)+(1))|0);
   $j=$53;
   var $54=$3;
   var $55=(($54+3)|0);
   $3=$55;
   label = 4; break;
  case 7: 
   var $57=$2;
   var $58=$plane0;
   var $59=(($58+$57)|0);
   $plane0=$59;
   var $60=$2;
   var $61=$plane1;
   var $62=(($61+$60)|0);
   $plane1=$62;
   var $63=$2;
   var $64=$plane2;
   var $65=(($64+$63)|0);
   $plane2=$65;
   var $66=(($size)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)*(3))&-1);
   var $69=$3;
   var $70=(((-$68))|0);
   var $71=(($69+$70)|0);
   $3=$71;
   label = 8; break;
  case 8: 
   var $73=$4;
   var $74=$3;
   var $75=(($74+$73)|0);
   $3=$75;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_8u_P4C4R_fPPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $plane3;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$1;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $plane3=$16;
   var $17=$2;
   var $18=(((($17)>>>(0)))&-1);
   $2=$18;
   var $19=$4;
   var $20=(((($19)>>>(0)))&-1);
   $4=$20;
   label = 2; break;
  case 2: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $28=$j;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $33=$j;
   var $34=$plane0;
   var $35=(($34+$33)|0);
   var $36=HEAP8[($35)];
   $t0=$36;
   var $37=$j;
   var $38=$plane1;
   var $39=(($38+$37)|0);
   var $40=HEAP8[($39)];
   $t1=$40;
   var $41=$t0;
   var $42=$3;
   var $43=(($42)|0);
   HEAP8[($43)]=$41;
   var $44=$t1;
   var $45=$3;
   var $46=(($45+1)|0);
   HEAP8[($46)]=$44;
   var $47=$j;
   var $48=$plane2;
   var $49=(($48+$47)|0);
   var $50=HEAP8[($49)];
   $t0=$50;
   var $51=$j;
   var $52=$plane3;
   var $53=(($52+$51)|0);
   var $54=HEAP8[($53)];
   $t1=$54;
   var $55=$t0;
   var $56=$3;
   var $57=(($56+2)|0);
   HEAP8[($57)]=$55;
   var $58=$t1;
   var $59=$3;
   var $60=(($59+3)|0);
   HEAP8[($60)]=$58;
   label = 6; break;
  case 6: 
   var $62=$j;
   var $63=((($62)+(1))|0);
   $j=$63;
   var $64=$3;
   var $65=(($64+4)|0);
   $3=$65;
   label = 4; break;
  case 7: 
   var $67=$2;
   var $68=$plane0;
   var $69=(($68+$67)|0);
   $plane0=$69;
   var $70=$2;
   var $71=$plane1;
   var $72=(($71+$70)|0);
   $plane1=$72;
   var $73=$2;
   var $74=$plane2;
   var $75=(($74+$73)|0);
   $plane2=$75;
   var $76=$2;
   var $77=$plane3;
   var $78=(($77+$76)|0);
   $plane3=$78;
   var $79=(($size)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=($80<<2);
   var $82=$3;
   var $83=(((-$81))|0);
   var $84=(($82+$83)|0);
   $3=$84;
   label = 8; break;
  case 8: 
   var $86=$4;
   var $87=$3;
   var $88=(($87+$86)|0);
   $3=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z18icvCopy_16s_CnC1CRPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$cn;
 $6=$coi;
 var $8=HEAP32[((1088)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z18icvCopy_32f_CnC1CRPKiiPii6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$cn;
 $6=$coi;
 var $8=HEAP32[((1008)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z18icvCopy_64f_CnC1CRPKxiPxi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$cn;
 $6=$coi;
 var $8=HEAP32[((944)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z16icvCopy_8u_P2C2RPPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((824)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z16icvCopy_8u_P3C3RPPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((816)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __ZL19icvCopy_16s_P2C2R_fPPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(2))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(2))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($22)|(0)) < (($24)|(0));
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=$j;
   var $28=$plane0;
   var $29=(($28+($27<<1))|0);
   var $30=HEAP16[(($29)>>1)];
   $t0=$30;
   var $31=$j;
   var $32=$plane1;
   var $33=(($32+($31<<1))|0);
   var $34=HEAP16[(($33)>>1)];
   $t1=$34;
   var $35=$t0;
   var $36=$3;
   var $37=(($36)|0);
   HEAP16[(($37)>>1)]=$35;
   var $38=$t1;
   var $39=$3;
   var $40=(($39+2)|0);
   HEAP16[(($40)>>1)]=$38;
   label = 6; break;
  case 6: 
   var $42=$j;
   var $43=((($42)+(1))|0);
   $j=$43;
   var $44=$3;
   var $45=(($44+4)|0);
   $3=$45;
   label = 4; break;
  case 7: 
   var $47=$2;
   var $48=$plane0;
   var $49=(($48+($47<<1))|0);
   $plane0=$49;
   var $50=$2;
   var $51=$plane1;
   var $52=(($51+($50<<1))|0);
   $plane1=$52;
   var $53=(($size)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($54<<1);
   var $56=$3;
   var $57=(((-$55))|0);
   var $58=(($56+($57<<1))|0);
   $3=$58;
   label = 8; break;
  case 8: 
   var $60=$4;
   var $61=$3;
   var $62=(($61+($60<<1))|0);
   $3=$62;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_16s_P3C3R_fPPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $j;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$2;
   var $15=((((($14)>>>(0)))/(2))&-1);
   $2=$15;
   var $16=$4;
   var $17=((((($16)>>>(0)))/(2))&-1);
   $4=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $25=$j;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$j;
   var $31=$plane0;
   var $32=(($31+($30<<1))|0);
   var $33=HEAP16[(($32)>>1)];
   $t0=$33;
   var $34=$j;
   var $35=$plane1;
   var $36=(($35+($34<<1))|0);
   var $37=HEAP16[(($36)>>1)];
   $t1=$37;
   var $38=$j;
   var $39=$plane2;
   var $40=(($39+($38<<1))|0);
   var $41=HEAP16[(($40)>>1)];
   $t2=$41;
   var $42=$t0;
   var $43=$3;
   var $44=(($43)|0);
   HEAP16[(($44)>>1)]=$42;
   var $45=$t1;
   var $46=$3;
   var $47=(($46+2)|0);
   HEAP16[(($47)>>1)]=$45;
   var $48=$t2;
   var $49=$3;
   var $50=(($49+4)|0);
   HEAP16[(($50)>>1)]=$48;
   label = 6; break;
  case 6: 
   var $52=$j;
   var $53=((($52)+(1))|0);
   $j=$53;
   var $54=$3;
   var $55=(($54+6)|0);
   $3=$55;
   label = 4; break;
  case 7: 
   var $57=$2;
   var $58=$plane0;
   var $59=(($58+($57<<1))|0);
   $plane0=$59;
   var $60=$2;
   var $61=$plane1;
   var $62=(($61+($60<<1))|0);
   $plane1=$62;
   var $63=$2;
   var $64=$plane2;
   var $65=(($64+($63<<1))|0);
   $plane2=$65;
   var $66=(($size)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)*(3))&-1);
   var $69=$3;
   var $70=(((-$68))|0);
   var $71=(($69+($70<<1))|0);
   $3=$71;
   label = 8; break;
  case 8: 
   var $73=$4;
   var $74=$3;
   var $75=(($74+($73<<1))|0);
   $3=$75;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_16s_P4C4R_fPPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $plane3;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$1;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $plane3=$16;
   var $17=$2;
   var $18=((((($17)>>>(0)))/(2))&-1);
   $2=$18;
   var $19=$4;
   var $20=((((($19)>>>(0)))/(2))&-1);
   $4=$20;
   label = 2; break;
  case 2: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $28=$j;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $33=$j;
   var $34=$plane0;
   var $35=(($34+($33<<1))|0);
   var $36=HEAP16[(($35)>>1)];
   $t0=$36;
   var $37=$j;
   var $38=$plane1;
   var $39=(($38+($37<<1))|0);
   var $40=HEAP16[(($39)>>1)];
   $t1=$40;
   var $41=$t0;
   var $42=$3;
   var $43=(($42)|0);
   HEAP16[(($43)>>1)]=$41;
   var $44=$t1;
   var $45=$3;
   var $46=(($45+2)|0);
   HEAP16[(($46)>>1)]=$44;
   var $47=$j;
   var $48=$plane2;
   var $49=(($48+($47<<1))|0);
   var $50=HEAP16[(($49)>>1)];
   $t0=$50;
   var $51=$j;
   var $52=$plane3;
   var $53=(($52+($51<<1))|0);
   var $54=HEAP16[(($53)>>1)];
   $t1=$54;
   var $55=$t0;
   var $56=$3;
   var $57=(($56+4)|0);
   HEAP16[(($57)>>1)]=$55;
   var $58=$t1;
   var $59=$3;
   var $60=(($59+6)|0);
   HEAP16[(($60)>>1)]=$58;
   label = 6; break;
  case 6: 
   var $62=$j;
   var $63=((($62)+(1))|0);
   $j=$63;
   var $64=$3;
   var $65=(($64+8)|0);
   $3=$65;
   label = 4; break;
  case 7: 
   var $67=$2;
   var $68=$plane0;
   var $69=(($68+($67<<1))|0);
   $plane0=$69;
   var $70=$2;
   var $71=$plane1;
   var $72=(($71+($70<<1))|0);
   $plane1=$72;
   var $73=$2;
   var $74=$plane2;
   var $75=(($74+($73<<1))|0);
   $plane2=$75;
   var $76=$2;
   var $77=$plane3;
   var $78=(($77+($76<<1))|0);
   $plane3=$78;
   var $79=(($size)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=($80<<2);
   var $82=$3;
   var $83=(((-$81))|0);
   var $84=(($82+($83<<1))|0);
   $3=$84;
   label = 8; break;
  case 8: 
   var $86=$4;
   var $87=$3;
   var $88=(($87+($86<<1))|0);
   $3=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_32f_P2C2R_fPPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(4))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(4))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($22)|(0)) < (($24)|(0));
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=$j;
   var $28=$plane0;
   var $29=(($28+($27<<2))|0);
   var $30=HEAP32[(($29)>>2)];
   $t0=$30;
   var $31=$j;
   var $32=$plane1;
   var $33=(($32+($31<<2))|0);
   var $34=HEAP32[(($33)>>2)];
   $t1=$34;
   var $35=$t0;
   var $36=$3;
   var $37=(($36)|0);
   HEAP32[(($37)>>2)]=$35;
   var $38=$t1;
   var $39=$3;
   var $40=(($39+4)|0);
   HEAP32[(($40)>>2)]=$38;
   label = 6; break;
  case 6: 
   var $42=$j;
   var $43=((($42)+(1))|0);
   $j=$43;
   var $44=$3;
   var $45=(($44+8)|0);
   $3=$45;
   label = 4; break;
  case 7: 
   var $47=$2;
   var $48=$plane0;
   var $49=(($48+($47<<2))|0);
   $plane0=$49;
   var $50=$2;
   var $51=$plane1;
   var $52=(($51+($50<<2))|0);
   $plane1=$52;
   var $53=(($size)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($54<<1);
   var $56=$3;
   var $57=(((-$55))|0);
   var $58=(($56+($57<<2))|0);
   $3=$58;
   label = 8; break;
  case 8: 
   var $60=$4;
   var $61=$3;
   var $62=(($61+($60<<2))|0);
   $3=$62;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_32f_P3C3R_fPPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $j;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$2;
   var $15=((((($14)>>>(0)))/(4))&-1);
   $2=$15;
   var $16=$4;
   var $17=((((($16)>>>(0)))/(4))&-1);
   $4=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $25=$j;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$j;
   var $31=$plane0;
   var $32=(($31+($30<<2))|0);
   var $33=HEAP32[(($32)>>2)];
   $t0=$33;
   var $34=$j;
   var $35=$plane1;
   var $36=(($35+($34<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   $t1=$37;
   var $38=$j;
   var $39=$plane2;
   var $40=(($39+($38<<2))|0);
   var $41=HEAP32[(($40)>>2)];
   $t2=$41;
   var $42=$t0;
   var $43=$3;
   var $44=(($43)|0);
   HEAP32[(($44)>>2)]=$42;
   var $45=$t1;
   var $46=$3;
   var $47=(($46+4)|0);
   HEAP32[(($47)>>2)]=$45;
   var $48=$t2;
   var $49=$3;
   var $50=(($49+8)|0);
   HEAP32[(($50)>>2)]=$48;
   label = 6; break;
  case 6: 
   var $52=$j;
   var $53=((($52)+(1))|0);
   $j=$53;
   var $54=$3;
   var $55=(($54+12)|0);
   $3=$55;
   label = 4; break;
  case 7: 
   var $57=$2;
   var $58=$plane0;
   var $59=(($58+($57<<2))|0);
   $plane0=$59;
   var $60=$2;
   var $61=$plane1;
   var $62=(($61+($60<<2))|0);
   $plane1=$62;
   var $63=$2;
   var $64=$plane2;
   var $65=(($64+($63<<2))|0);
   $plane2=$65;
   var $66=(($size)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)*(3))&-1);
   var $69=$3;
   var $70=(((-$68))|0);
   var $71=(($69+($70<<2))|0);
   $3=$71;
   label = 8; break;
  case 8: 
   var $73=$4;
   var $74=$3;
   var $75=(($74+($73<<2))|0);
   $3=$75;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_32f_P4C4R_fPPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $plane3;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$1;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $plane3=$16;
   var $17=$2;
   var $18=((((($17)>>>(0)))/(4))&-1);
   $2=$18;
   var $19=$4;
   var $20=((((($19)>>>(0)))/(4))&-1);
   $4=$20;
   label = 2; break;
  case 2: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $28=$j;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $33=$j;
   var $34=$plane0;
   var $35=(($34+($33<<2))|0);
   var $36=HEAP32[(($35)>>2)];
   $t0=$36;
   var $37=$j;
   var $38=$plane1;
   var $39=(($38+($37<<2))|0);
   var $40=HEAP32[(($39)>>2)];
   $t1=$40;
   var $41=$t0;
   var $42=$3;
   var $43=(($42)|0);
   HEAP32[(($43)>>2)]=$41;
   var $44=$t1;
   var $45=$3;
   var $46=(($45+4)|0);
   HEAP32[(($46)>>2)]=$44;
   var $47=$j;
   var $48=$plane2;
   var $49=(($48+($47<<2))|0);
   var $50=HEAP32[(($49)>>2)];
   $t0=$50;
   var $51=$j;
   var $52=$plane3;
   var $53=(($52+($51<<2))|0);
   var $54=HEAP32[(($53)>>2)];
   $t1=$54;
   var $55=$t0;
   var $56=$3;
   var $57=(($56+8)|0);
   HEAP32[(($57)>>2)]=$55;
   var $58=$t1;
   var $59=$3;
   var $60=(($59+12)|0);
   HEAP32[(($60)>>2)]=$58;
   label = 6; break;
  case 6: 
   var $62=$j;
   var $63=((($62)+(1))|0);
   $j=$63;
   var $64=$3;
   var $65=(($64+16)|0);
   $3=$65;
   label = 4; break;
  case 7: 
   var $67=$2;
   var $68=$plane0;
   var $69=(($68+($67<<2))|0);
   $plane0=$69;
   var $70=$2;
   var $71=$plane1;
   var $72=(($71+($70<<2))|0);
   $plane1=$72;
   var $73=$2;
   var $74=$plane2;
   var $75=(($74+($73<<2))|0);
   $plane2=$75;
   var $76=$2;
   var $77=$plane3;
   var $78=(($77+($76<<2))|0);
   $plane3=$78;
   var $79=(($size)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=($80<<2);
   var $82=$3;
   var $83=(((-$81))|0);
   var $84=(($82+($83<<2))|0);
   $3=$84;
   label = 8; break;
  case 8: 
   var $86=$4;
   var $87=$3;
   var $88=(($87+($86<<2))|0);
   $3=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z16icvCopy_8u_P4C4RPPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((808)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_16s_P2C2RPPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1080)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_16s_P3C3RPPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1072)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_16s_P4C4RPPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1064)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_32f_P2C2RPPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((1000)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_32f_P3C3RPPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((992)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_32f_P4C4RPPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((984)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __ZL19icvCopy_64f_P2C2R_fPPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $j;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(8))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(8))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($22)|(0)) < (($24)|(0));
   if ($25) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $27=$j;
   var $28=$plane0;
   var $29=(($28+($27<<3))|0);
   var $ld$0$0=(($29)|0);
   var $30$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($29+4)|0);
   var $30$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$30$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$30$1;
   var $31=$j;
   var $32=$plane1;
   var $33=(($32+($31<<3))|0);
   var $ld$4$0=(($33)|0);
   var $34$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($33+4)|0);
   var $34$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$34$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$34$1;
   var $ld$8$0=(($t0)|0);
   var $35$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t0+4)|0);
   var $35$1=HEAP32[(($ld$9$1)>>2)];
   var $36=$3;
   var $37=(($36)|0);
   var $st$10$0=(($37)|0);
   HEAP32[(($st$10$0)>>2)]=$35$0;
   var $st$11$1=(($37+4)|0);
   HEAP32[(($st$11$1)>>2)]=$35$1;
   var $ld$12$0=(($t1)|0);
   var $38$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t1+4)|0);
   var $38$1=HEAP32[(($ld$13$1)>>2)];
   var $39=$3;
   var $40=(($39+8)|0);
   var $st$14$0=(($40)|0);
   HEAP32[(($st$14$0)>>2)]=$38$0;
   var $st$15$1=(($40+4)|0);
   HEAP32[(($st$15$1)>>2)]=$38$1;
   label = 6; break;
  case 6: 
   var $42=$j;
   var $43=((($42)+(1))|0);
   $j=$43;
   var $44=$3;
   var $45=(($44+16)|0);
   $3=$45;
   label = 4; break;
  case 7: 
   var $47=$2;
   var $48=$plane0;
   var $49=(($48+($47<<3))|0);
   $plane0=$49;
   var $50=$2;
   var $51=$plane1;
   var $52=(($51+($50<<3))|0);
   $plane1=$52;
   var $53=(($size)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=($54<<1);
   var $56=$3;
   var $57=(((-$55))|0);
   var $58=(($56+($57<<3))|0);
   $3=$58;
   label = 8; break;
  case 8: 
   var $60=$4;
   var $61=$3;
   var $62=(($61+($60<<3))|0);
   $3=$62;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_64f_P3C3R_fPPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $j;
   var $t0=sp;
   var $t1=(sp)+(8);
   var $t2=(sp)+(16);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$2;
   var $15=((((($14)>>>(0)))/(8))&-1);
   $2=$15;
   var $16=$4;
   var $17=((((($16)>>>(0)))/(8))&-1);
   $4=$17;
   label = 2; break;
  case 2: 
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $25=$j;
   var $26=(($size)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($25)|(0)) < (($27)|(0));
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$j;
   var $31=$plane0;
   var $32=(($31+($30<<3))|0);
   var $ld$0$0=(($32)|0);
   var $33$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($32+4)|0);
   var $33$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$33$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$33$1;
   var $34=$j;
   var $35=$plane1;
   var $36=(($35+($34<<3))|0);
   var $ld$4$0=(($36)|0);
   var $37$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($36+4)|0);
   var $37$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$37$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$37$1;
   var $38=$j;
   var $39=$plane2;
   var $40=(($39+($38<<3))|0);
   var $ld$8$0=(($40)|0);
   var $41$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($40+4)|0);
   var $41$1=HEAP32[(($ld$9$1)>>2)];
   var $st$10$0=(($t2)|0);
   HEAP32[(($st$10$0)>>2)]=$41$0;
   var $st$11$1=(($t2+4)|0);
   HEAP32[(($st$11$1)>>2)]=$41$1;
   var $ld$12$0=(($t0)|0);
   var $42$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t0+4)|0);
   var $42$1=HEAP32[(($ld$13$1)>>2)];
   var $43=$3;
   var $44=(($43)|0);
   var $st$14$0=(($44)|0);
   HEAP32[(($st$14$0)>>2)]=$42$0;
   var $st$15$1=(($44+4)|0);
   HEAP32[(($st$15$1)>>2)]=$42$1;
   var $ld$16$0=(($t1)|0);
   var $45$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($t1+4)|0);
   var $45$1=HEAP32[(($ld$17$1)>>2)];
   var $46=$3;
   var $47=(($46+8)|0);
   var $st$18$0=(($47)|0);
   HEAP32[(($st$18$0)>>2)]=$45$0;
   var $st$19$1=(($47+4)|0);
   HEAP32[(($st$19$1)>>2)]=$45$1;
   var $ld$20$0=(($t2)|0);
   var $48$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($t2+4)|0);
   var $48$1=HEAP32[(($ld$21$1)>>2)];
   var $49=$3;
   var $50=(($49+16)|0);
   var $st$22$0=(($50)|0);
   HEAP32[(($st$22$0)>>2)]=$48$0;
   var $st$23$1=(($50+4)|0);
   HEAP32[(($st$23$1)>>2)]=$48$1;
   label = 6; break;
  case 6: 
   var $52=$j;
   var $53=((($52)+(1))|0);
   $j=$53;
   var $54=$3;
   var $55=(($54+24)|0);
   $3=$55;
   label = 4; break;
  case 7: 
   var $57=$2;
   var $58=$plane0;
   var $59=(($58+($57<<3))|0);
   $plane0=$59;
   var $60=$2;
   var $61=$plane1;
   var $62=(($61+($60<<3))|0);
   $plane1=$62;
   var $63=$2;
   var $64=$plane2;
   var $65=(($64+($63<<3))|0);
   $plane2=$65;
   var $66=(($size)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)*(3))&-1);
   var $69=$3;
   var $70=(((-$68))|0);
   var $71=(($69+($70<<3))|0);
   $3=$71;
   label = 8; break;
  case 8: 
   var $73=$4;
   var $74=$3;
   var $75=(($74+($73<<3))|0);
   $3=$75;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_64f_P4C4R_fPPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $plane0;
   var $plane1;
   var $plane2;
   var $plane3;
   var $j;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   $plane0=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $plane1=$10;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   $plane2=$13;
   var $14=$1;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $plane3=$16;
   var $17=$2;
   var $18=((((($17)>>>(0)))/(8))&-1);
   $2=$18;
   var $19=$4;
   var $20=((((($19)>>>(0)))/(8))&-1);
   $4=$20;
   label = 2; break;
  case 2: 
   var $22=(($size+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=((($23)-(1))|0);
   HEAP32[(($22)>>2)]=$24;
   var $25=(($23)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $28=$j;
   var $29=(($size)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($28)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $33=$j;
   var $34=$plane0;
   var $35=(($34+($33<<3))|0);
   var $ld$0$0=(($35)|0);
   var $36$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($35+4)|0);
   var $36$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$36$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$36$1;
   var $37=$j;
   var $38=$plane1;
   var $39=(($38+($37<<3))|0);
   var $ld$4$0=(($39)|0);
   var $40$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($39+4)|0);
   var $40$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$40$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$40$1;
   var $ld$8$0=(($t0)|0);
   var $41$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t0+4)|0);
   var $41$1=HEAP32[(($ld$9$1)>>2)];
   var $42=$3;
   var $43=(($42)|0);
   var $st$10$0=(($43)|0);
   HEAP32[(($st$10$0)>>2)]=$41$0;
   var $st$11$1=(($43+4)|0);
   HEAP32[(($st$11$1)>>2)]=$41$1;
   var $ld$12$0=(($t1)|0);
   var $44$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t1+4)|0);
   var $44$1=HEAP32[(($ld$13$1)>>2)];
   var $45=$3;
   var $46=(($45+8)|0);
   var $st$14$0=(($46)|0);
   HEAP32[(($st$14$0)>>2)]=$44$0;
   var $st$15$1=(($46+4)|0);
   HEAP32[(($st$15$1)>>2)]=$44$1;
   var $47=$j;
   var $48=$plane2;
   var $49=(($48+($47<<3))|0);
   var $ld$16$0=(($49)|0);
   var $50$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($49+4)|0);
   var $50$1=HEAP32[(($ld$17$1)>>2)];
   var $st$18$0=(($t0)|0);
   HEAP32[(($st$18$0)>>2)]=$50$0;
   var $st$19$1=(($t0+4)|0);
   HEAP32[(($st$19$1)>>2)]=$50$1;
   var $51=$j;
   var $52=$plane3;
   var $53=(($52+($51<<3))|0);
   var $ld$20$0=(($53)|0);
   var $54$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($53+4)|0);
   var $54$1=HEAP32[(($ld$21$1)>>2)];
   var $st$22$0=(($t1)|0);
   HEAP32[(($st$22$0)>>2)]=$54$0;
   var $st$23$1=(($t1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$54$1;
   var $ld$24$0=(($t0)|0);
   var $55$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($t0+4)|0);
   var $55$1=HEAP32[(($ld$25$1)>>2)];
   var $56=$3;
   var $57=(($56+16)|0);
   var $st$26$0=(($57)|0);
   HEAP32[(($st$26$0)>>2)]=$55$0;
   var $st$27$1=(($57+4)|0);
   HEAP32[(($st$27$1)>>2)]=$55$1;
   var $ld$28$0=(($t1)|0);
   var $58$0=HEAP32[(($ld$28$0)>>2)];
   var $ld$29$1=(($t1+4)|0);
   var $58$1=HEAP32[(($ld$29$1)>>2)];
   var $59=$3;
   var $60=(($59+24)|0);
   var $st$30$0=(($60)|0);
   HEAP32[(($st$30$0)>>2)]=$58$0;
   var $st$31$1=(($60+4)|0);
   HEAP32[(($st$31$1)>>2)]=$58$1;
   label = 6; break;
  case 6: 
   var $62=$j;
   var $63=((($62)+(1))|0);
   $j=$63;
   var $64=$3;
   var $65=(($64+32)|0);
   $3=$65;
   label = 4; break;
  case 7: 
   var $67=$2;
   var $68=$plane0;
   var $69=(($68+($67<<3))|0);
   $plane0=$69;
   var $70=$2;
   var $71=$plane1;
   var $72=(($71+($70<<3))|0);
   $plane1=$72;
   var $73=$2;
   var $74=$plane2;
   var $75=(($74+($73<<3))|0);
   $plane2=$75;
   var $76=$2;
   var $77=$plane3;
   var $78=(($77+($76<<3))|0);
   $plane3=$78;
   var $79=(($size)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=($80<<2);
   var $82=$3;
   var $83=(((-$81))|0);
   var $84=(($82+($83<<3))|0);
   $3=$84;
   label = 8; break;
  case 8: 
   var $86=$4;
   var $87=$3;
   var $88=(($87+($86<<3))|0);
   $3=$88;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvCopy_8u_C1CnCR_fPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$coi;
   var $7=$6;
   var $8=((($7)-(1))|0);
   var $9=$3;
   var $10=(($9+$8)|0);
   $3=$10;
   var $11=$2;
   var $12=(((($11)>>>(0)))&-1);
   $2=$12;
   var $13=$4;
   var $14=(((($13)>>>(0)))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$j;
   var $29=$1;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   $t0=$31;
   var $32=$j;
   var $33=((($32)+(1))|0);
   var $34=$1;
   var $35=(($34+$33)|0);
   var $36=HEAP8[($35)];
   $t1=$36;
   var $37=$t0;
   var $38=$3;
   var $39=(($38)|0);
   HEAP8[($39)]=$37;
   var $40=$t1;
   var $41=$5;
   var $42=$3;
   var $43=(($42+$41)|0);
   HEAP8[($43)]=$40;
   var $44=$j;
   var $45=((($44)+(2))|0);
   var $46=$1;
   var $47=(($46+$45)|0);
   var $48=HEAP8[($47)];
   $t0=$48;
   var $49=$j;
   var $50=((($49)+(3))|0);
   var $51=$1;
   var $52=(($51+$50)|0);
   var $53=HEAP8[($52)];
   $t1=$53;
   var $54=$t0;
   var $55=$5;
   var $56=($55<<1);
   var $57=$3;
   var $58=(($57+$56)|0);
   HEAP8[($58)]=$54;
   var $59=$t1;
   var $60=$5;
   var $61=((($60)*(3))&-1);
   var $62=$3;
   var $63=(($62+$61)|0);
   HEAP8[($63)]=$59;
   label = 6; break;
  case 6: 
   var $65=$j;
   var $66=((($65)+(4))|0);
   $j=$66;
   var $67=$5;
   var $68=($67<<2);
   var $69=$3;
   var $70=(($69+$68)|0);
   $3=$70;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$j;
   var $74=(($size)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0)) < (($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=$j;
   var $79=$1;
   var $80=(($79+$78)|0);
   var $81=HEAP8[($80)];
   var $82=$3;
   var $83=(($82)|0);
   HEAP8[($83)]=$81;
   label = 10; break;
  case 10: 
   var $85=$j;
   var $86=((($85)+(1))|0);
   $j=$86;
   var $87=$5;
   var $88=$3;
   var $89=(($88+$87)|0);
   $3=$89;
   label = 8; break;
  case 11: 
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$5;
   var $94=(Math.imul($92,$93)|0);
   var $95=$3;
   var $96=(((-$94))|0);
   var $97=(($95+$96)|0);
   $3=$97;
   label = 12; break;
  case 12: 
   var $99=$2;
   var $100=$1;
   var $101=(($100+$99)|0);
   $1=$101;
   var $102=$4;
   var $103=$3;
   var $104=(($103+$102)|0);
   $3=$104;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvCopy_16s_C1CnCR_fPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$coi;
   var $7=$6;
   var $8=((($7)-(1))|0);
   var $9=$3;
   var $10=(($9+($8<<1))|0);
   $3=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(2))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(2))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$j;
   var $29=$1;
   var $30=(($29+($28<<1))|0);
   var $31=HEAP16[(($30)>>1)];
   $t0=$31;
   var $32=$j;
   var $33=((($32)+(1))|0);
   var $34=$1;
   var $35=(($34+($33<<1))|0);
   var $36=HEAP16[(($35)>>1)];
   $t1=$36;
   var $37=$t0;
   var $38=$3;
   var $39=(($38)|0);
   HEAP16[(($39)>>1)]=$37;
   var $40=$t1;
   var $41=$5;
   var $42=$3;
   var $43=(($42+($41<<1))|0);
   HEAP16[(($43)>>1)]=$40;
   var $44=$j;
   var $45=((($44)+(2))|0);
   var $46=$1;
   var $47=(($46+($45<<1))|0);
   var $48=HEAP16[(($47)>>1)];
   $t0=$48;
   var $49=$j;
   var $50=((($49)+(3))|0);
   var $51=$1;
   var $52=(($51+($50<<1))|0);
   var $53=HEAP16[(($52)>>1)];
   $t1=$53;
   var $54=$t0;
   var $55=$5;
   var $56=($55<<1);
   var $57=$3;
   var $58=(($57+($56<<1))|0);
   HEAP16[(($58)>>1)]=$54;
   var $59=$t1;
   var $60=$5;
   var $61=((($60)*(3))&-1);
   var $62=$3;
   var $63=(($62+($61<<1))|0);
   HEAP16[(($63)>>1)]=$59;
   label = 6; break;
  case 6: 
   var $65=$j;
   var $66=((($65)+(4))|0);
   $j=$66;
   var $67=$5;
   var $68=($67<<2);
   var $69=$3;
   var $70=(($69+($68<<1))|0);
   $3=$70;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$j;
   var $74=(($size)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0)) < (($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=$j;
   var $79=$1;
   var $80=(($79+($78<<1))|0);
   var $81=HEAP16[(($80)>>1)];
   var $82=$3;
   var $83=(($82)|0);
   HEAP16[(($83)>>1)]=$81;
   label = 10; break;
  case 10: 
   var $85=$j;
   var $86=((($85)+(1))|0);
   $j=$86;
   var $87=$5;
   var $88=$3;
   var $89=(($88+($87<<1))|0);
   $3=$89;
   label = 8; break;
  case 11: 
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$5;
   var $94=(Math.imul($92,$93)|0);
   var $95=$3;
   var $96=(((-$94))|0);
   var $97=(($95+($96<<1))|0);
   $3=$97;
   label = 12; break;
  case 12: 
   var $99=$2;
   var $100=$1;
   var $101=(($100+($99<<1))|0);
   $1=$101;
   var $102=$4;
   var $103=$3;
   var $104=(($103+($102<<1))|0);
   $3=$104;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvCopy_32f_C1CnCR_fPKiiPii6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $j;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$coi;
   var $7=$6;
   var $8=((($7)-(1))|0);
   var $9=$3;
   var $10=(($9+($8<<2))|0);
   $3=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(4))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(4))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$j;
   var $29=$1;
   var $30=(($29+($28<<2))|0);
   var $31=HEAP32[(($30)>>2)];
   $t0=$31;
   var $32=$j;
   var $33=((($32)+(1))|0);
   var $34=$1;
   var $35=(($34+($33<<2))|0);
   var $36=HEAP32[(($35)>>2)];
   $t1=$36;
   var $37=$t0;
   var $38=$3;
   var $39=(($38)|0);
   HEAP32[(($39)>>2)]=$37;
   var $40=$t1;
   var $41=$5;
   var $42=$3;
   var $43=(($42+($41<<2))|0);
   HEAP32[(($43)>>2)]=$40;
   var $44=$j;
   var $45=((($44)+(2))|0);
   var $46=$1;
   var $47=(($46+($45<<2))|0);
   var $48=HEAP32[(($47)>>2)];
   $t0=$48;
   var $49=$j;
   var $50=((($49)+(3))|0);
   var $51=$1;
   var $52=(($51+($50<<2))|0);
   var $53=HEAP32[(($52)>>2)];
   $t1=$53;
   var $54=$t0;
   var $55=$5;
   var $56=($55<<1);
   var $57=$3;
   var $58=(($57+($56<<2))|0);
   HEAP32[(($58)>>2)]=$54;
   var $59=$t1;
   var $60=$5;
   var $61=((($60)*(3))&-1);
   var $62=$3;
   var $63=(($62+($61<<2))|0);
   HEAP32[(($63)>>2)]=$59;
   label = 6; break;
  case 6: 
   var $65=$j;
   var $66=((($65)+(4))|0);
   $j=$66;
   var $67=$5;
   var $68=($67<<2);
   var $69=$3;
   var $70=(($69+($68<<2))|0);
   $3=$70;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$j;
   var $74=(($size)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0)) < (($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=$j;
   var $79=$1;
   var $80=(($79+($78<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$3;
   var $83=(($82)|0);
   HEAP32[(($83)>>2)]=$81;
   label = 10; break;
  case 10: 
   var $85=$j;
   var $86=((($85)+(1))|0);
   $j=$86;
   var $87=$5;
   var $88=$3;
   var $89=(($88+($87<<2))|0);
   $3=$89;
   label = 8; break;
  case 11: 
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$5;
   var $94=(Math.imul($92,$93)|0);
   var $95=$3;
   var $96=(((-$94))|0);
   var $97=(($95+($96<<2))|0);
   $3=$97;
   label = 12; break;
  case 12: 
   var $99=$2;
   var $100=$1;
   var $101=(($100+($99<<2))|0);
   $1=$101;
   var $102=$4;
   var $103=$3;
   var $104=(($103+($102<<2))|0);
   $3=$104;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z17icvCopy_64f_P2C2RPPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((936)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_64f_P3C3RPPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((928)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_64f_P4C4RPPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((920)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __Z17icvCopy_8u_C1CnCRPKhiPhi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$cn;
 $6=$coi;
 var $8=HEAP32[((896)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z18icvCopy_16s_C1CnCRPKtiPti6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$cn;
 $6=$coi;
 var $8=HEAP32[((1144)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __ZL20icvCopy_64f_C1CnCR_fPKxiPxi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $j;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$cn;
   $6=$coi;
   var $7=$6;
   var $8=((($7)-(1))|0);
   var $9=$3;
   var $10=(($9+($8<<3))|0);
   $3=$10;
   var $11=$2;
   var $12=((((($11)>>>(0)))/(8))&-1);
   $2=$12;
   var $13=$4;
   var $14=((((($13)>>>(0)))/(8))&-1);
   $4=$14;
   label = 2; break;
  case 2: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $j=0;
   label = 4; break;
  case 4: 
   var $22=$j;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $28=$j;
   var $29=$1;
   var $30=(($29+($28<<3))|0);
   var $ld$0$0=(($30)|0);
   var $31$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($30+4)|0);
   var $31$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$31$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$31$1;
   var $32=$j;
   var $33=((($32)+(1))|0);
   var $34=$1;
   var $35=(($34+($33<<3))|0);
   var $ld$4$0=(($35)|0);
   var $36$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($35+4)|0);
   var $36$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$36$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$36$1;
   var $ld$8$0=(($t0)|0);
   var $37$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t0+4)|0);
   var $37$1=HEAP32[(($ld$9$1)>>2)];
   var $38=$3;
   var $39=(($38)|0);
   var $st$10$0=(($39)|0);
   HEAP32[(($st$10$0)>>2)]=$37$0;
   var $st$11$1=(($39+4)|0);
   HEAP32[(($st$11$1)>>2)]=$37$1;
   var $ld$12$0=(($t1)|0);
   var $40$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t1+4)|0);
   var $40$1=HEAP32[(($ld$13$1)>>2)];
   var $41=$5;
   var $42=$3;
   var $43=(($42+($41<<3))|0);
   var $st$14$0=(($43)|0);
   HEAP32[(($st$14$0)>>2)]=$40$0;
   var $st$15$1=(($43+4)|0);
   HEAP32[(($st$15$1)>>2)]=$40$1;
   var $44=$j;
   var $45=((($44)+(2))|0);
   var $46=$1;
   var $47=(($46+($45<<3))|0);
   var $ld$16$0=(($47)|0);
   var $48$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($47+4)|0);
   var $48$1=HEAP32[(($ld$17$1)>>2)];
   var $st$18$0=(($t0)|0);
   HEAP32[(($st$18$0)>>2)]=$48$0;
   var $st$19$1=(($t0+4)|0);
   HEAP32[(($st$19$1)>>2)]=$48$1;
   var $49=$j;
   var $50=((($49)+(3))|0);
   var $51=$1;
   var $52=(($51+($50<<3))|0);
   var $ld$20$0=(($52)|0);
   var $53$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($52+4)|0);
   var $53$1=HEAP32[(($ld$21$1)>>2)];
   var $st$22$0=(($t1)|0);
   HEAP32[(($st$22$0)>>2)]=$53$0;
   var $st$23$1=(($t1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$53$1;
   var $ld$24$0=(($t0)|0);
   var $54$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($t0+4)|0);
   var $54$1=HEAP32[(($ld$25$1)>>2)];
   var $55=$5;
   var $56=($55<<1);
   var $57=$3;
   var $58=(($57+($56<<3))|0);
   var $st$26$0=(($58)|0);
   HEAP32[(($st$26$0)>>2)]=$54$0;
   var $st$27$1=(($58+4)|0);
   HEAP32[(($st$27$1)>>2)]=$54$1;
   var $ld$28$0=(($t1)|0);
   var $59$0=HEAP32[(($ld$28$0)>>2)];
   var $ld$29$1=(($t1+4)|0);
   var $59$1=HEAP32[(($ld$29$1)>>2)];
   var $60=$5;
   var $61=((($60)*(3))&-1);
   var $62=$3;
   var $63=(($62+($61<<3))|0);
   var $st$30$0=(($63)|0);
   HEAP32[(($st$30$0)>>2)]=$59$0;
   var $st$31$1=(($63+4)|0);
   HEAP32[(($st$31$1)>>2)]=$59$1;
   label = 6; break;
  case 6: 
   var $65=$j;
   var $66=((($65)+(4))|0);
   $j=$66;
   var $67=$5;
   var $68=($67<<2);
   var $69=$3;
   var $70=(($69+($68<<3))|0);
   $3=$70;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$j;
   var $74=(($size)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($73)|(0)) < (($75)|(0));
   if ($76) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $78=$j;
   var $79=$1;
   var $80=(($79+($78<<3))|0);
   var $ld$32$0=(($80)|0);
   var $81$0=HEAP32[(($ld$32$0)>>2)];
   var $ld$33$1=(($80+4)|0);
   var $81$1=HEAP32[(($ld$33$1)>>2)];
   var $82=$3;
   var $83=(($82)|0);
   var $st$34$0=(($83)|0);
   HEAP32[(($st$34$0)>>2)]=$81$0;
   var $st$35$1=(($83+4)|0);
   HEAP32[(($st$35$1)>>2)]=$81$1;
   label = 10; break;
  case 10: 
   var $85=$j;
   var $86=((($85)+(1))|0);
   $j=$86;
   var $87=$5;
   var $88=$3;
   var $89=(($88+($87<<3))|0);
   $3=$89;
   label = 8; break;
  case 11: 
   var $91=(($size)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$5;
   var $94=(Math.imul($92,$93)|0);
   var $95=$3;
   var $96=(((-$94))|0);
   var $97=(($95+($96<<3))|0);
   $3=$97;
   label = 12; break;
  case 12: 
   var $99=$2;
   var $100=$1;
   var $101=(($100+($99<<3))|0);
   $1=$101;
   var $102=$4;
   var $103=$3;
   var $104=(($103+($102<<3))|0);
   $3=$104;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvInitSplitRTableP14CvBigFuncTable($tab) {
 var label = 0;
 var $1;
 $1=$tab;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3+32)|0);
 HEAP32[(($4)>>2)]=(666);
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+64)|0);
 HEAP32[(($7)>>2)]=(726);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+96)|0);
 HEAP32[(($10)>>2)]=(140);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+36)|0);
 HEAP32[(($13)>>2)]=(666);
 var $14=$1;
 var $15=(($14)|0);
 var $16=(($15+68)|0);
 HEAP32[(($16)>>2)]=(726);
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18+100)|0);
 HEAP32[(($19)>>2)]=(140);
 var $20=$1;
 var $21=(($20)|0);
 var $22=(($21+40)|0);
 HEAP32[(($22)>>2)]=(284);
 var $23=$1;
 var $24=(($23)|0);
 var $25=(($24+72)|0);
 HEAP32[(($25)>>2)]=(500);
 var $26=$1;
 var $27=(($26)|0);
 var $28=(($27+104)|0);
 HEAP32[(($28)>>2)]=(224);
 var $29=$1;
 var $30=(($29)|0);
 var $31=(($30+44)|0);
 HEAP32[(($31)>>2)]=(284);
 var $32=$1;
 var $33=(($32)|0);
 var $34=(($33+76)|0);
 HEAP32[(($34)>>2)]=(500);
 var $35=$1;
 var $36=(($35)|0);
 var $37=(($36+108)|0);
 HEAP32[(($37)>>2)]=(224);
 var $38=$1;
 var $39=(($38)|0);
 var $40=(($39+48)|0);
 HEAP32[(($40)>>2)]=(288);
 var $41=$1;
 var $42=(($41)|0);
 var $43=(($42+80)|0);
 HEAP32[(($43)>>2)]=(392);
 var $44=$1;
 var $45=(($44)|0);
 var $46=(($45+112)|0);
 HEAP32[(($46)>>2)]=(600);
 var $47=$1;
 var $48=(($47)|0);
 var $49=(($48+52)|0);
 HEAP32[(($49)>>2)]=(288);
 var $50=$1;
 var $51=(($50)|0);
 var $52=(($51+84)|0);
 HEAP32[(($52)>>2)]=(392);
 var $53=$1;
 var $54=(($53)|0);
 var $55=(($54+116)|0);
 HEAP32[(($55)>>2)]=(600);
 var $56=$1;
 var $57=(($56)|0);
 var $58=(($57+56)|0);
 HEAP32[(($58)>>2)]=(684);
 var $59=$1;
 var $60=(($59)|0);
 var $61=(($60+88)|0);
 HEAP32[(($61)>>2)]=(50);
 var $62=$1;
 var $63=(($62)|0);
 var $64=(($63+120)|0);
 HEAP32[(($64)>>2)]=(88);
 return;
}
function __ZL21icvInitSplitRCoiTableP11CvFuncTable($tab) {
 var label = 0;
 var $1;
 $1=$tab;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=(440);
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+4)|0);
 HEAP32[(($7)>>2)]=(440);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+8)|0);
 HEAP32[(($10)>>2)]=(728);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+12)|0);
 HEAP32[(($13)>>2)]=(728);
 var $14=$1;
 var $15=(($14)|0);
 var $16=(($15+16)|0);
 HEAP32[(($16)>>2)]=(428);
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=(428);
 var $20=$1;
 var $21=(($20)|0);
 var $22=(($21+24)|0);
 HEAP32[(($22)>>2)]=(496);
 return;
}
function __Z18icvCopy_32f_C1CnCRPKiiPii6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$cn;
 $6=$coi;
 var $8=HEAP32[((1056)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z18icvCopy_64f_C1CnCRPKxiPxi6CvSizeii($src, $srcstep, $dst, $dststep, $size, $cn, $coi) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$cn;
 $6=$coi;
 var $8=HEAP32[((976)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function _cvSplit($srcarr, $dstarr0, $dstarr1, $dstarr2, $dstarr3) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $stub=sp;
   var $dst=(sp)+(144);
   var $src;
   var $size=(sp)+(160);
   var $dstptr=(sp)+(168);
   var $type;
   var $cn;
   var $coi=(sp)+(184);
   var $i;
   var $nzplanes;
   var $nzidx;
   var $cont_flag;
   var $src_step;
   var $dst_step;
   var $6=(sp)+(192);
   var $func;
   var $ippi_call_result;
   var $7=(sp)+(200);
   var $func1;
   var $ippi_call_result2;
   var $8=(sp)+(208);
   $1=$srcarr;
   $2=$dstarr0;
   $3=$dstarr1;
   $4=$dstarr2;
   $5=$dstarr3;
   var $9=$1;
   var $10=$9;
   $src=$10;
   var $11=$dstptr;
   HEAP32[(($11)>>2)]=0; HEAP32[((($11)+(4))>>2)]=0; HEAP32[((($11)+(8))>>2)]=0; HEAP32[((($11)+(12))>>2)]=0;
   HEAP32[(($coi)>>2)]=0;
   $nzplanes=0;
   $nzidx=-1;
   $dst_step=0;
   var $12=HEAP32[((27960)>>2)];
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   __ZL18icvInitSplitRTableP14CvBigFuncTable(23768);
   __ZL21icvInitSplitRCoiTableP11CvFuncTable(23736);
   HEAP32[((27960)>>2)]=1;
   label = 3; break;
  case 3: 
   var $16=$2;
   var $17=$16;
   var $18=(($dst)|0);
   HEAP32[(($18)>>2)]=$17;
   var $19=$3;
   var $20=$19;
   var $21=(($dst+4)|0);
   HEAP32[(($21)>>2)]=$20;
   var $22=$4;
   var $23=$22;
   var $24=(($dst+8)|0);
   HEAP32[(($24)>>2)]=$23;
   var $25=$5;
   var $26=$25;
   var $27=(($dst+12)|0);
   HEAP32[(($27)>>2)]=$26;
   var $28=$src;
   var $29=$28;
   var $30=(($stub)|0);
   var $31=(($30+112)|0);
   var $32=_cvGetMat($29, $31, $coi, 0);
   $src=$32;
   var $33=_cvGetErrStatus();
   var $34=(($33)|(0)) < 0;
   if ($34) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((6728)|0), ((12120)|0), ((15184)|0), 464);
   label = 43; break;
  case 5: 
   var $37=$src;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$39 & 511;
   $type=$40;
   var $41=$type;
   var $42=$41 & 504;
   var $43=$42 >> 3;
   var $44=((($43)+(1))|0);
   $cn=$44;
   var $45=$src;
   var $46=(($45)|0);
   var $47=HEAP32[(($46)>>2)];
   $cont_flag=$47;
   var $48=$cn;
   var $49=(($48)|(0))==1;
   if ($49) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-15, ((6728)|0), ((36904)|0), ((15184)|0), 475);
   label = 43; break;
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $53=$i;
   var $54=(($53)|(0)) < 4;
   if ($54) { label = 9; break; } else { label = 26; break; }
  case 9: 
   var $56=$i;
   var $57=(($dst+($56<<2))|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0))!=0;
   if ($59) { label = 10; break; } else { label = 24; break; }
  case 10: 
   var $61=$nzplanes;
   var $62=((($61)+(1))|0);
   $nzplanes=$62;
   var $63=$i;
   $nzidx=$63;
   var $64=$i;
   var $65=(($dst+($64<<2))|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$66;
   var $68=(($stub)|0);
   var $69=$i;
   var $70=(($68+((($69)*(28))&-1))|0);
   var $71=_cvGetMat($67, $70, 0, 0);
   var $72=$i;
   var $73=(($dst+($72<<2))|0);
   HEAP32[(($73)>>2)]=$71;
   var $74=_cvGetErrStatus();
   var $75=(($74)|(0)) < 0;
   if ($75) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-1, ((6728)|0), ((12120)|0), ((15184)|0), 483);
   label = 43; break;
  case 12: 
   var $78=$i;
   var $79=(($dst+($78<<2))|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(($80)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=$82 & 504;
   var $84=$83 >> 3;
   var $85=((($84)+(1))|0);
   var $86=(($85)|(0))!=1;
   if ($86) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-15, ((6728)|0), ((36904)|0), ((15184)|0), 485);
   label = 43; break;
  case 14: 
   var $89=$i;
   var $90=(($dst+($89<<2))|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$src;
   var $95=(($94)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$93 ^ $96;
   var $98=$97 & 7;
   var $99=(($98)|(0))==0;
   if ($99) { label = 16; break; } else { label = 15; break; }
  case 15: 
   _cvError(-205, ((6728)|0), ((36904)|0), ((15184)|0), 487);
   label = 43; break;
  case 16: 
   var $102=$i;
   var $103=(($dst+($102<<2))|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+20)|0);
   var $106=$105;
   var $107=HEAP32[(($106)>>2)];
   var $108=$src;
   var $109=(($108+20)|0);
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=(($107)|(0))==(($111)|(0));
   if ($112) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $114=$i;
   var $115=(($dst+($114<<2))|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($116+24)|0);
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=$src;
   var $121=(($120+24)|0);
   var $122=$121;
   var $123=HEAP32[(($122)>>2)];
   var $124=(($119)|(0))==(($123)|(0));
   if ($124) { label = 19; break; } else { label = 18; break; }
  case 18: 
   _cvError(-209, ((6728)|0), ((36904)|0), ((15184)|0), 489);
   label = 43; break;
  case 19: 
   var $127=$nzplanes;
   var $128=$i;
   var $129=(($127)|(0)) > (($128)|(0));
   if ($129) { label = 20; break; } else { label = 23; break; }
  case 20: 
   var $131=$i;
   var $132=(($131)|(0)) > 0;
   if ($132) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $134=$i;
   var $135=(($dst+($134<<2))|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136+4)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=$i;
   var $140=((($139)-(1))|0);
   var $141=(($dst+($140<<2))|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=(($142+4)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(($138)|(0))!=(($144)|(0));
   if ($145) { label = 22; break; } else { label = 23; break; }
  case 22: 
   _cvError(-13, ((6728)|0), ((36904)|0), ((15184)|0), 491);
   label = 43; break;
  case 23: 
   var $148=$i;
   var $149=(($dst+($148<<2))|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($150+4)|0);
   var $152=HEAP32[(($151)>>2)];
   $dst_step=$152;
   var $153=$i;
   var $154=(($dst+($153<<2))|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155+16)|0);
   var $157=$156;
   var $158=HEAP32[(($157)>>2)];
   var $159=$nzplanes;
   var $160=((($159)-(1))|0);
   var $161=(($dstptr+($160<<2))|0);
   HEAP32[(($161)>>2)]=$158;
   var $162=$i;
   var $163=(($dst+($162<<2))|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=$cont_flag;
   var $168=$167 & $166;
   $cont_flag=$168;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $171=$i;
   var $172=((($171)+(1))|0);
   $i=$172;
   label = 8; break;
  case 26: 
   var $174=$src;
   var $175=(($174+4)|0);
   var $176=HEAP32[(($175)>>2)];
   $src_step=$176;
   var $177=$src;
   __Z12cvGetMatSizePK5CvMat($6, $177);
   var $178=$size;
   var $179=$6;
   assert(8 % 1 === 0);HEAP32[(($178)>>2)]=HEAP32[(($179)>>2)];HEAP32[((($178)+(4))>>2)]=HEAP32[((($179)+(4))>>2)];
   var $180=$cont_flag;
   var $181=$180 & 16384;
   var $182=(($181)|(0))!=0;
   if ($182) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $184=(($size+4)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($size)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(Math.imul($187,$185)|0);
   HEAP32[(($186)>>2)]=$188;
   $dst_step=1073741824;
   $src_step=1073741824;
   var $189=(($size+4)|0);
   HEAP32[(($189)>>2)]=1;
   label = 28; break;
  case 28: 
   var $191=$nzplanes;
   var $192=$cn;
   var $193=(($191)|(0))==(($192)|(0));
   if ($193) { label = 29; break; } else { label = 34; break; }
  case 29: 
   var $195=$type;
   var $196=((((23768)|0)+($195<<2))|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=$197;
   $func=$198;
   var $199=$func;
   var $200=(($199)|(0))!=0;
   if ($200) { label = 31; break; } else { label = 30; break; }
  case 30: 
   _cvError(-210, ((6728)|0), ((36904)|0), ((15184)|0), 515);
   label = 43; break;
  case 31: 
   var $203=$func;
   var $204=$src;
   var $205=(($204+16)|0);
   var $206=$205;
   var $207=HEAP32[(($206)>>2)];
   var $208=$src_step;
   var $209=(($dstptr)|0);
   var $210=$dst_step;
   var $211=$7;
   var $212=$size;
   assert(8 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($212)+(4))>>2)];
   var $213=FUNCTION_TABLE[$203]($207, $208, $209, $210, $7);
   $ippi_call_result=$213;
   var $214=$ippi_call_result;
   var $215=(($214)|(0)) < 0;
   if ($215) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $217=$ippi_call_result;
   var $218=_cvErrorFromIppStatus($217);
   _cvError($218, ((6728)|0), ((11264)|0), ((15184)|0), 517);
   label = 43; break;
  case 33: 
   label = 42; break;
  case 34: 
   var $221=$nzplanes;
   var $222=(($221)|(0))==1;
   if ($222) { label = 35; break; } else { label = 40; break; }
  case 35: 
   var $224=$type;
   var $225=$224 & 7;
   var $226=((((23736)|0)+($225<<2))|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=$227;
   $func1=$228;
   var $229=$func1;
   var $230=(($229)|(0))!=0;
   if ($230) { label = 37; break; } else { label = 36; break; }
  case 36: 
   _cvError(-210, ((6728)|0), ((36904)|0), ((15184)|0), 524);
   label = 43; break;
  case 37: 
   var $233=$func1;
   var $234=$src;
   var $235=(($234+16)|0);
   var $236=$235;
   var $237=HEAP32[(($236)>>2)];
   var $238=$src_step;
   var $239=$nzidx;
   var $240=(($dst+($239<<2))|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=(($241+16)|0);
   var $243=$242;
   var $244=HEAP32[(($243)>>2)];
   var $245=$dst_step;
   var $246=$8;
   var $247=$size;
   assert(8 % 1 === 0);HEAP32[(($246)>>2)]=HEAP32[(($247)>>2)];HEAP32[((($246)+(4))>>2)]=HEAP32[((($247)+(4))>>2)];
   var $248=$cn;
   var $249=$nzidx;
   var $250=((($249)+(1))|0);
   var $251=FUNCTION_TABLE[$233]($237, $238, $244, $245, $8, $248, $250);
   $ippi_call_result2=$251;
   var $252=$ippi_call_result2;
   var $253=(($252)|(0)) < 0;
   if ($253) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $255=$ippi_call_result2;
   var $256=_cvErrorFromIppStatus($255);
   _cvError($256, ((6728)|0), ((11264)|0), ((15184)|0), 528);
   label = 43; break;
  case 39: 
   label = 41; break;
  case 40: 
   _cvError(-5, ((6728)|0), ((10472)|0), ((15184)|0), 533);
   label = 43; break;
  case 41: 
   label = 42; break;
  case 42: 
   label = 43; break;
  case 43: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL26icvInitCvtPlaneToPixRTableP14CvBigFuncTable($tab) {
 var label = 0;
 var $1;
 $1=$tab;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3+32)|0);
 HEAP32[(($4)>>2)]=(206);
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+64)|0);
 HEAP32[(($7)>>2)]=(778);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+96)|0);
 HEAP32[(($10)>>2)]=(66);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+36)|0);
 HEAP32[(($13)>>2)]=(206);
 var $14=$1;
 var $15=(($14)|0);
 var $16=(($15+68)|0);
 HEAP32[(($16)>>2)]=(778);
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18+100)|0);
 HEAP32[(($19)>>2)]=(66);
 var $20=$1;
 var $21=(($20)|0);
 var $22=(($21+40)|0);
 HEAP32[(($22)>>2)]=(346);
 var $23=$1;
 var $24=(($23)|0);
 var $25=(($24+72)|0);
 HEAP32[(($25)>>2)]=(776);
 var $26=$1;
 var $27=(($26)|0);
 var $28=(($27+104)|0);
 HEAP32[(($28)>>2)]=(112);
 var $29=$1;
 var $30=(($29)|0);
 var $31=(($30+44)|0);
 HEAP32[(($31)>>2)]=(346);
 var $32=$1;
 var $33=(($32)|0);
 var $34=(($33+76)|0);
 HEAP32[(($34)>>2)]=(776);
 var $35=$1;
 var $36=(($35)|0);
 var $37=(($36+108)|0);
 HEAP32[(($37)>>2)]=(112);
 var $38=$1;
 var $39=(($38)|0);
 var $40=(($39+48)|0);
 HEAP32[(($40)>>2)]=(478);
 var $41=$1;
 var $42=(($41)|0);
 var $43=(($42+80)|0);
 HEAP32[(($43)>>2)]=(132);
 var $44=$1;
 var $45=(($44)|0);
 var $46=(($45+112)|0);
 HEAP32[(($46)>>2)]=(602);
 var $47=$1;
 var $48=(($47)|0);
 var $49=(($48+52)|0);
 HEAP32[(($49)>>2)]=(478);
 var $50=$1;
 var $51=(($50)|0);
 var $52=(($51+84)|0);
 HEAP32[(($52)>>2)]=(132);
 var $53=$1;
 var $54=(($53)|0);
 var $55=(($54+116)|0);
 HEAP32[(($55)>>2)]=(602);
 var $56=$1;
 var $57=(($56)|0);
 var $58=(($57+56)|0);
 HEAP32[(($58)>>2)]=(782);
 var $59=$1;
 var $60=(($59)|0);
 var $61=(($60+88)|0);
 HEAP32[(($61)>>2)]=(368);
 var $62=$1;
 var $63=(($62)|0);
 var $64=(($63+120)|0);
 HEAP32[(($64)>>2)]=(308);
 return;
}
function __ZL29icvInitCvtPlaneToPixRCoiTableP11CvFuncTable($tab) {
 var label = 0;
 var $1;
 $1=$tab;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=(696);
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+4)|0);
 HEAP32[(($7)>>2)]=(696);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+8)|0);
 HEAP32[(($10)>>2)]=(514);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+12)|0);
 HEAP32[(($13)>>2)]=(514);
 var $14=$1;
 var $15=(($14)|0);
 var $16=(($15+16)|0);
 HEAP32[(($16)>>2)]=(294);
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=(294);
 var $20=$1;
 var $21=(($20)|0);
 var $22=(($21+24)|0);
 HEAP32[(($22)>>2)]=(616);
 return;
}
function _cvMerge($srcarr0, $srcarr1, $srcarr2, $srcarr3, $dstarr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $src_step;
   var $dst_step;
   var $stub=sp;
   var $src=(sp)+(144);
   var $dst;
   var $size=(sp)+(160);
   var $srcptr=(sp)+(168);
   var $type;
   var $cn;
   var $coi=(sp)+(184);
   var $i;
   var $nzplanes;
   var $nzidx;
   var $cont_flag;
   var $6=(sp)+(192);
   var $func;
   var $ippi_call_result;
   var $7=(sp)+(200);
   var $func1;
   var $ippi_call_result2;
   var $8=(sp)+(208);
   $1=$srcarr0;
   $2=$srcarr1;
   $3=$srcarr2;
   $4=$srcarr3;
   $5=$dstarr;
   $src_step=0;
   var $9=$5;
   var $10=$9;
   $dst=$10;
   var $11=$srcptr;
   HEAP32[(($11)>>2)]=0; HEAP32[((($11)+(4))>>2)]=0; HEAP32[((($11)+(8))>>2)]=0; HEAP32[((($11)+(12))>>2)]=0;
   HEAP32[(($coi)>>2)]=0;
   $nzplanes=0;
   $nzidx=-1;
   var $12=HEAP32[((27952)>>2)];
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   __ZL26icvInitCvtPlaneToPixRTableP14CvBigFuncTable(25856);
   __ZL29icvInitCvtPlaneToPixRCoiTableP11CvFuncTable(25824);
   HEAP32[((27952)>>2)]=1;
   label = 3; break;
  case 3: 
   var $16=$1;
   var $17=$16;
   var $18=(($src)|0);
   HEAP32[(($18)>>2)]=$17;
   var $19=$2;
   var $20=$19;
   var $21=(($src+4)|0);
   HEAP32[(($21)>>2)]=$20;
   var $22=$3;
   var $23=$22;
   var $24=(($src+8)|0);
   HEAP32[(($24)>>2)]=$23;
   var $25=$4;
   var $26=$25;
   var $27=(($src+12)|0);
   HEAP32[(($27)>>2)]=$26;
   var $28=$dst;
   var $29=$28;
   var $30=(($stub)|0);
   var $31=(($30+112)|0);
   var $32=_cvGetMat($29, $31, $coi, 0);
   $dst=$32;
   var $33=_cvGetErrStatus();
   var $34=(($33)|(0)) < 0;
   if ($34) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((6104)|0), ((12120)|0), ((15184)|0), 573);
   label = 43; break;
  case 5: 
   var $37=$dst;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$39 & 511;
   $type=$40;
   var $41=$type;
   var $42=$41 & 504;
   var $43=$42 >> 3;
   var $44=((($43)+(1))|0);
   $cn=$44;
   var $45=$dst;
   var $46=(($45)|0);
   var $47=HEAP32[(($46)>>2)];
   $cont_flag=$47;
   var $48=$cn;
   var $49=(($48)|(0))==1;
   if ($49) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-15, ((6104)|0), ((36904)|0), ((15184)|0), 581);
   label = 43; break;
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $53=$i;
   var $54=(($53)|(0)) < 4;
   if ($54) { label = 9; break; } else { label = 26; break; }
  case 9: 
   var $56=$i;
   var $57=(($src+($56<<2))|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0))!=0;
   if ($59) { label = 10; break; } else { label = 24; break; }
  case 10: 
   var $61=$nzplanes;
   var $62=((($61)+(1))|0);
   $nzplanes=$62;
   var $63=$i;
   $nzidx=$63;
   var $64=$i;
   var $65=(($src+($64<<2))|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$66;
   var $68=(($stub)|0);
   var $69=$i;
   var $70=(($68+((($69)*(28))&-1))|0);
   var $71=_cvGetMat($67, $70, 0, 0);
   var $72=$i;
   var $73=(($src+($72<<2))|0);
   HEAP32[(($73)>>2)]=$71;
   var $74=_cvGetErrStatus();
   var $75=(($74)|(0)) < 0;
   if ($75) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-1, ((6104)|0), ((12120)|0), ((15184)|0), 589);
   label = 43; break;
  case 12: 
   var $78=$i;
   var $79=(($src+($78<<2))|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(($80)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=$82 & 504;
   var $84=$83 >> 3;
   var $85=((($84)+(1))|0);
   var $86=(($85)|(0))!=1;
   if ($86) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-15, ((6104)|0), ((36904)|0), ((15184)|0), 591);
   label = 43; break;
  case 14: 
   var $89=$i;
   var $90=(($src+($89<<2))|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$dst;
   var $95=(($94)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$93 ^ $96;
   var $98=$97 & 7;
   var $99=(($98)|(0))==0;
   if ($99) { label = 16; break; } else { label = 15; break; }
  case 15: 
   _cvError(-205, ((6104)|0), ((36904)|0), ((15184)|0), 593);
   label = 43; break;
  case 16: 
   var $102=$i;
   var $103=(($src+($102<<2))|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+20)|0);
   var $106=$105;
   var $107=HEAP32[(($106)>>2)];
   var $108=$dst;
   var $109=(($108+20)|0);
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=(($107)|(0))==(($111)|(0));
   if ($112) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $114=$i;
   var $115=(($src+($114<<2))|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($116+24)|0);
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=$dst;
   var $121=(($120+24)|0);
   var $122=$121;
   var $123=HEAP32[(($122)>>2)];
   var $124=(($119)|(0))==(($123)|(0));
   if ($124) { label = 19; break; } else { label = 18; break; }
  case 18: 
   _cvError(-209, ((6104)|0), ((36904)|0), ((15184)|0), 595);
   label = 43; break;
  case 19: 
   var $127=$nzplanes;
   var $128=$i;
   var $129=(($127)|(0)) > (($128)|(0));
   if ($129) { label = 20; break; } else { label = 23; break; }
  case 20: 
   var $131=$i;
   var $132=(($131)|(0)) > 0;
   if ($132) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $134=$i;
   var $135=(($src+($134<<2))|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136+4)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=$i;
   var $140=((($139)-(1))|0);
   var $141=(($src+($140<<2))|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=(($142+4)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(($138)|(0))!=(($144)|(0));
   if ($145) { label = 22; break; } else { label = 23; break; }
  case 22: 
   _cvError(-13, ((6104)|0), ((36904)|0), ((15184)|0), 597);
   label = 43; break;
  case 23: 
   var $148=$i;
   var $149=(($src+($148<<2))|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($150+4)|0);
   var $152=HEAP32[(($151)>>2)];
   $src_step=$152;
   var $153=$i;
   var $154=(($src+($153<<2))|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155+16)|0);
   var $157=$156;
   var $158=HEAP32[(($157)>>2)];
   var $159=$nzplanes;
   var $160=((($159)-(1))|0);
   var $161=(($srcptr+($160<<2))|0);
   HEAP32[(($161)>>2)]=$158;
   var $162=$i;
   var $163=(($src+($162<<2))|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=$cont_flag;
   var $168=$167 & $166;
   $cont_flag=$168;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $171=$i;
   var $172=((($171)+(1))|0);
   $i=$172;
   label = 8; break;
  case 26: 
   var $174=$dst;
   __Z12cvGetMatSizePK5CvMat($6, $174);
   var $175=$size;
   var $176=$6;
   assert(8 % 1 === 0);HEAP32[(($175)>>2)]=HEAP32[(($176)>>2)];HEAP32[((($175)+(4))>>2)]=HEAP32[((($176)+(4))>>2)];
   var $177=$dst;
   var $178=(($177+4)|0);
   var $179=HEAP32[(($178)>>2)];
   $dst_step=$179;
   var $180=$cont_flag;
   var $181=$180 & 16384;
   var $182=(($181)|(0))!=0;
   if ($182) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $184=(($size+4)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($size)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(Math.imul($187,$185)|0);
   HEAP32[(($186)>>2)]=$188;
   $dst_step=1073741824;
   $src_step=1073741824;
   var $189=(($size+4)|0);
   HEAP32[(($189)>>2)]=1;
   label = 28; break;
  case 28: 
   var $191=$nzplanes;
   var $192=$cn;
   var $193=(($191)|(0))==(($192)|(0));
   if ($193) { label = 29; break; } else { label = 34; break; }
  case 29: 
   var $195=$type;
   var $196=((((25856)|0)+($195<<2))|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=$197;
   $func=$198;
   var $199=$func;
   var $200=(($199)|(0))!=0;
   if ($200) { label = 31; break; } else { label = 30; break; }
  case 30: 
   _cvError(-210, ((6104)|0), ((36904)|0), ((15184)|0), 620);
   label = 43; break;
  case 31: 
   var $203=$func;
   var $204=(($srcptr)|0);
   var $205=$src_step;
   var $206=$dst;
   var $207=(($206+16)|0);
   var $208=$207;
   var $209=HEAP32[(($208)>>2)];
   var $210=$dst_step;
   var $211=$7;
   var $212=$size;
   assert(8 % 1 === 0);HEAP32[(($211)>>2)]=HEAP32[(($212)>>2)];HEAP32[((($211)+(4))>>2)]=HEAP32[((($212)+(4))>>2)];
   var $213=FUNCTION_TABLE[$203]($204, $205, $209, $210, $7);
   $ippi_call_result=$213;
   var $214=$ippi_call_result;
   var $215=(($214)|(0)) < 0;
   if ($215) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $217=$ippi_call_result;
   var $218=_cvErrorFromIppStatus($217);
   _cvError($218, ((6104)|0), ((11264)|0), ((15184)|0), 622);
   label = 43; break;
  case 33: 
   label = 42; break;
  case 34: 
   var $221=$nzplanes;
   var $222=(($221)|(0))==1;
   if ($222) { label = 35; break; } else { label = 40; break; }
  case 35: 
   var $224=$type;
   var $225=$224 & 7;
   var $226=((((25824)|0)+($225<<2))|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=$227;
   $func1=$228;
   var $229=$func1;
   var $230=(($229)|(0))!=0;
   if ($230) { label = 37; break; } else { label = 36; break; }
  case 36: 
   _cvError(-210, ((6104)|0), ((36904)|0), ((15184)|0), 629);
   label = 43; break;
  case 37: 
   var $233=$func1;
   var $234=$nzidx;
   var $235=(($src+($234<<2))|0);
   var $236=HEAP32[(($235)>>2)];
   var $237=(($236+16)|0);
   var $238=$237;
   var $239=HEAP32[(($238)>>2)];
   var $240=$src_step;
   var $241=$dst;
   var $242=(($241+16)|0);
   var $243=$242;
   var $244=HEAP32[(($243)>>2)];
   var $245=$dst_step;
   var $246=$8;
   var $247=$size;
   assert(8 % 1 === 0);HEAP32[(($246)>>2)]=HEAP32[(($247)>>2)];HEAP32[((($246)+(4))>>2)]=HEAP32[((($247)+(4))>>2)];
   var $248=$cn;
   var $249=$nzidx;
   var $250=((($249)+(1))|0);
   var $251=FUNCTION_TABLE[$233]($239, $240, $244, $245, $8, $248, $250);
   $ippi_call_result2=$251;
   var $252=$ippi_call_result2;
   var $253=(($252)|(0)) < 0;
   if ($253) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $255=$ippi_call_result2;
   var $256=_cvErrorFromIppStatus($255);
   _cvError($256, ((6104)|0), ((11264)|0), ((15184)|0), 633);
   label = 43; break;
  case 39: 
   label = 41; break;
  case 40: 
   _cvError(-5, ((6104)|0), ((8392)|0), ((15184)|0), 638);
   label = 43; break;
  case 41: 
   label = 42; break;
  case 42: 
   label = 43; break;
  case 43: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvInitCvtToC1RTableP11CvFuncTable($tab) {
 var label = 0;
 var $1;
 $1=$tab;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=(160);
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+4)|0);
 HEAP32[(($7)>>2)]=(700);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+8)|0);
 HEAP32[(($10)>>2)]=(230);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+12)|0);
 HEAP32[(($13)>>2)]=(606);
 var $14=$1;
 var $15=(($14)|0);
 var $16=(($15+16)|0);
 HEAP32[(($16)>>2)]=(526);
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=(506);
 var $20=$1;
 var $21=(($20)|0);
 var $22=(($21+24)|0);
 HEAP32[(($22)>>2)]=(234);
 return;
}
function __ZL25icvInitCvtScaleToC1RTableP11CvFuncTable($tab) {
 var label = 0;
 var $1;
 $1=$tab;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=(670);
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+4)|0);
 HEAP32[(($7)>>2)]=(396);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+8)|0);
 HEAP32[(($10)>>2)]=(690);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+12)|0);
 HEAP32[(($13)>>2)]=(604);
 var $14=$1;
 var $15=(($14)|0);
 var $16=(($15+16)|0);
 HEAP32[(($16)>>2)]=(26);
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=(662);
 var $20=$1;
 var $21=(($20)|0);
 var $22=(($21+24)|0);
 HEAP32[(($22)>>2)]=(272);
 return;
}
function _cvConvertScale($srcarr, $dstarr, $scale, $shift) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 912)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $type;
   var $is_nd;
   var $srcstub=sp;
   var $src;
   var $dststub=(sp)+(32);
   var $dst;
   var $size=(sp)+(64);
   var $src_step;
   var $dst_step;
   var $no_scale;
   var $coi=(sp)+(72);
   var $coi1=(sp)+(80);
   var $arrs=(sp)+(88);
   var $stubs=(sp)+(96);
   var $iterator=(sp)+(648);
   var $dsttype;
   var $func;
   var $ippi_call_result;
   var $5=(sp)+(872);
   var $func2;
   var $ippi_call_result3;
   var $6=(sp)+(880);
   var $7=(sp)+(888);
   var $srcdata;
   var $dstdata;
   var $srcdata4;
   var $dstdata5;
   var $func6;
   var $ippi_call_result7;
   var $8=(sp)+(896);
   var $func8;
   var $ippi_call_result9;
   var $9=(sp)+(904);
   $1=$srcarr;
   $2=$dstarr;
   $3=$scale;
   $4=$shift;
   $is_nd=0;
   var $10=$1;
   var $11=$10;
   $src=$11;
   var $12=$2;
   var $13=$12;
   $dst=$13;
   var $14=$3;
   var $15=$14 == 1;
   if ($15) { label = 2; break; } else { var $20 = 0;label = 3; break; }
  case 2: 
   var $17=$4;
   var $18=$17 == 0;
   var $20 = $18;label = 3; break;
  case 3: 
   var $20;
   var $21=(($20)&(1));
   $no_scale=$21;
   var $22=$src;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $25=$src;
   var $26=(($25)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$27 & -65536;
   var $29=(($28)|(0))==1111621632;
   if ($29) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $31=$src;
   var $32=(($31+24)|0);
   var $33=$32;
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0)) > 0;
   if ($35) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $37=$src;
   var $38=(($37+20)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0)) > 0;
   if ($41) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $43=$src;
   var $44=(($43+16)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46)|(0))!=0;
   if ($47) { label = 18; break; } else { label = 8; break; }
  case 8: 
   var $49=$src;
   var $50=(($49)|(0))!=0;
   if ($50) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $52=$src;
   var $53=$52;
   var $54=(($53)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$55 & -65536;
   var $57=(($56)|(0))==1111687168;
   if ($57) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $59=$src;
   var $60=$59;
   var $61=(($60+16)|0);
   var $62=$61;
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63)|(0))!=0;
   if ($64) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $is_nd=1;
   label = 17; break;
  case 12: 
   HEAP32[(($coi)>>2)]=0;
   var $67=$src;
   var $68=$67;
   var $69=_cvGetMat($68, $srcstub, $coi, 0);
   $src=$69;
   var $70=_cvGetErrStatus();
   var $71=(($70)|(0)) < 0;
   if ($71) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-1, ((6768)|0), ((12120)|0), ((15184)|0), 1520);
   label = 96; break;
  case 14: 
   var $74=HEAP32[(($coi)>>2)];
   var $75=(($74)|(0))!=0;
   if ($75) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _cvError(-24, ((6768)|0), ((36904)|0), ((15184)|0), 1523);
   label = 96; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $80=$dst;
   var $81=(($80)|(0))!=0;
   if ($81) { label = 19; break; } else { label = 23; break; }
  case 19: 
   var $83=$dst;
   var $84=(($83)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$85 & -65536;
   var $87=(($86)|(0))==1111621632;
   if ($87) { label = 20; break; } else { label = 23; break; }
  case 20: 
   var $89=$dst;
   var $90=(($89+24)|0);
   var $91=$90;
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0)) > 0;
   if ($93) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $95=$dst;
   var $96=(($95+20)|0);
   var $97=$96;
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98)|(0)) > 0;
   if ($99) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $101=$dst;
   var $102=(($101+16)|0);
   var $103=$102;
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104)|(0))!=0;
   if ($105) { label = 33; break; } else { label = 23; break; }
  case 23: 
   var $107=$dst;
   var $108=(($107)|(0))!=0;
   if ($108) { label = 24; break; } else { label = 27; break; }
  case 24: 
   var $110=$dst;
   var $111=$110;
   var $112=(($111)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=$113 & -65536;
   var $115=(($114)|(0))==1111687168;
   if ($115) { label = 25; break; } else { label = 27; break; }
  case 25: 
   var $117=$dst;
   var $118=$117;
   var $119=(($118+16)|0);
   var $120=$119;
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121)|(0))!=0;
   if ($122) { label = 26; break; } else { label = 27; break; }
  case 26: 
   $is_nd=1;
   label = 32; break;
  case 27: 
   HEAP32[(($coi1)>>2)]=0;
   var $125=$dst;
   var $126=$125;
   var $127=_cvGetMat($126, $dststub, $coi1, 0);
   $dst=$127;
   var $128=_cvGetErrStatus();
   var $129=(($128)|(0)) < 0;
   if ($129) { label = 28; break; } else { label = 29; break; }
  case 28: 
   _cvError(-1, ((6768)|0), ((12120)|0), ((15184)|0), 1534);
   label = 96; break;
  case 29: 
   var $132=HEAP32[(($coi1)>>2)];
   var $133=(($132)|(0))!=0;
   if ($133) { label = 30; break; } else { label = 31; break; }
  case 30: 
   _cvError(-24, ((6768)|0), ((36904)|0), ((15184)|0), 1537);
   label = 96; break;
  case 31: 
   label = 32; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $138=$is_nd;
   var $139=(($138)|(0))!=0;
   if ($139) { label = 34; break; } else { label = 56; break; }
  case 34: 
   var $141=(($arrs)|0);
   var $142=$src;
   var $143=$142;
   HEAP32[(($141)>>2)]=$143;
   var $144=(($141+4)|0);
   var $145=$dst;
   var $146=$145;
   HEAP32[(($144)>>2)]=$146;
   var $147=(($arrs)|0);
   var $148=(($stubs)|0);
   var $149=_cvInitNArrayIterator(2, $147, 0, $148, $iterator, 1);
   var $150=_cvGetErrStatus();
   var $151=(($150)|(0)) < 0;
   if ($151) { label = 35; break; } else { label = 36; break; }
  case 35: 
   _cvError(-1, ((6768)|0), ((12120)|0), ((15184)|0), 1548);
   label = 96; break;
  case 36: 
   var $154=(($iterator+184)|0);
   var $155=(($154)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156)|0);
   var $158=HEAP32[(($157)>>2)];
   $type=$158;
   var $159=(($iterator+184)|0);
   var $160=(($159+4)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161)|0);
   var $163=HEAP32[(($162)>>2)];
   $dsttype=$163;
   var $164=$type;
   var $165=$164 & 504;
   var $166=$165 >> 3;
   var $167=((($166)+(1))|0);
   var $168=(($iterator+8)|0);
   var $169=(($168)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=(Math.imul($170,$167)|0);
   HEAP32[(($169)>>2)]=$171;
   var $172=HEAP32[((27968)>>2)];
   var $173=(($172)|(0))!=0;
   if ($173) { label = 38; break; } else { label = 37; break; }
  case 37: 
   __ZL20icvInitCvtToC1RTableP11CvFuncTable(36424);
   __ZL25icvInitCvtScaleToC1RTableP11CvFuncTable(36392);
   HEAP32[((27968)>>2)]=1;
   label = 38; break;
  case 38: 
   var $176=$no_scale;
   var $177=(($176)|(0))!=0;
   if ($177) { label = 39; break; } else { label = 47; break; }
  case 39: 
   var $179=$dsttype;
   var $180=$179 & 7;
   var $181=((((36424)|0)+($180<<2))|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=$182;
   $func=$183;
   var $184=$func;
   var $185=(($184)|(0))!=0;
   if ($185) { label = 41; break; } else { label = 40; break; }
  case 40: 
   _cvError(-210, ((6768)|0), ((36904)|0), ((15184)|0), 1565);
   label = 96; break;
  case 41: 
   label = 42; break;
  case 42: 
   var $189=$func;
   var $190=(($iterator+16)|0);
   var $191=(($190)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=(($iterator+16)|0);
   var $194=(($193+4)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($iterator+8)|0);
   var $197=$5;
   var $198=$196;
   assert(8 % 1 === 0);HEAP32[(($197)>>2)]=HEAP32[(($198)>>2)];HEAP32[((($197)+(4))>>2)]=HEAP32[((($198)+(4))>>2)];
   var $199=$type;
   var $200=FUNCTION_TABLE[$189]($192, 1073741824, $195, 1073741824, $5, $199);
   $ippi_call_result=$200;
   var $201=$ippi_call_result;
   var $202=(($201)|(0)) < 0;
   if ($202) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $204=$ippi_call_result;
   var $205=_cvErrorFromIppStatus($204);
   _cvError($205, ((6768)|0), ((11264)|0), ((15184)|0), 1571);
   label = 96; break;
  case 44: 
   label = 45; break;
  case 45: 
   var $208=_cvNextNArraySlice($iterator);
   var $209=(($208)|(0))!=0;
   if ($209) { label = 42; break; } else { label = 46; break; }
  case 46: 
   label = 55; break;
  case 47: 
   var $212=$dsttype;
   var $213=$212 & 7;
   var $214=((((36392)|0)+($213<<2))|0);
   var $215=HEAP32[(($214)>>2)];
   var $216=$215;
   $func2=$216;
   var $217=$func2;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 49; break; } else { label = 48; break; }
  case 48: 
   _cvError(-210, ((6768)|0), ((36904)|0), ((15184)|0), 1580);
   label = 96; break;
  case 49: 
   label = 50; break;
  case 50: 
   var $222=$func2;
   var $223=(($iterator+16)|0);
   var $224=(($223)|0);
   var $225=HEAP32[(($224)>>2)];
   var $226=(($iterator+16)|0);
   var $227=(($226+4)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=(($iterator+8)|0);
   var $230=$6;
   var $231=$229;
   assert(8 % 1 === 0);HEAP32[(($230)>>2)]=HEAP32[(($231)>>2)];HEAP32[((($230)+(4))>>2)]=HEAP32[((($231)+(4))>>2)];
   var $232=$3;
   var $233=$4;
   var $234=$type;
   var $235=FUNCTION_TABLE[$222]($225, 1073741824, $228, 1073741824, $6, $232, $233, $234);
   $ippi_call_result3=$235;
   var $236=$ippi_call_result3;
   var $237=(($236)|(0)) < 0;
   if ($237) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $239=$ippi_call_result3;
   var $240=_cvErrorFromIppStatus($239);
   _cvError($240, ((6768)|0), ((11264)|0), ((15184)|0), 1586);
   label = 96; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $243=_cvNextNArraySlice($iterator);
   var $244=(($243)|(0))!=0;
   if ($244) { label = 50; break; } else { label = 54; break; }
  case 54: 
   label = 55; break;
  case 55: 
   label = 96; break;
  case 56: 
   var $248=$no_scale;
   var $249=(($248)|(0))!=0;
   if ($249) { label = 57; break; } else { label = 61; break; }
  case 57: 
   var $251=$src;
   var $252=(($251)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=$dst;
   var $255=(($254)|0);
   var $256=HEAP32[(($255)>>2)];
   var $257=$253 ^ $256;
   var $258=$257 & 511;
   var $259=(($258)|(0))==0;
   if ($259) { label = 58; break; } else { label = 61; break; }
  case 58: 
   var $261=$src;
   var $262=$dst;
   var $263=(($261)|(0))!=(($262)|(0));
   if ($263) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $265=$src;
   var $266=$265;
   var $267=$dst;
   var $268=$267;
   _cvCopy($266, $268, 0);
   label = 60; break;
  case 60: 
   label = 96; break;
  case 61: 
   var $271=$src;
   var $272=(($271+20)|0);
   var $273=$272;
   var $274=HEAP32[(($273)>>2)];
   var $275=$dst;
   var $276=(($275+20)|0);
   var $277=$276;
   var $278=HEAP32[(($277)>>2)];
   var $279=(($274)|(0))==(($278)|(0));
   if ($279) { label = 62; break; } else { label = 63; break; }
  case 62: 
   var $281=$src;
   var $282=(($281+24)|0);
   var $283=$282;
   var $284=HEAP32[(($283)>>2)];
   var $285=$dst;
   var $286=(($285+24)|0);
   var $287=$286;
   var $288=HEAP32[(($287)>>2)];
   var $289=(($284)|(0))==(($288)|(0));
   if ($289) { label = 64; break; } else { label = 63; break; }
  case 63: 
   _cvError(-209, ((6768)|0), ((36904)|0), ((15184)|0), 1601);
   label = 96; break;
  case 64: 
   var $292=$src;
   __Z12cvGetMatSizePK5CvMat($7, $292);
   var $293=$size;
   var $294=$7;
   assert(8 % 1 === 0);HEAP32[(($293)>>2)]=HEAP32[(($294)>>2)];HEAP32[((($293)+(4))>>2)]=HEAP32[((($294)+(4))>>2)];
   var $295=$src;
   var $296=(($295)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=$297 & 511;
   $type=$298;
   var $299=$src;
   var $300=(($299+4)|0);
   var $301=HEAP32[(($300)>>2)];
   $src_step=$301;
   var $302=$dst;
   var $303=(($302+4)|0);
   var $304=HEAP32[(($303)>>2)];
   $dst_step=$304;
   var $305=$src;
   var $306=(($305)|0);
   var $307=HEAP32[(($306)>>2)];
   var $308=$dst;
   var $309=(($308)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=$307 & $310;
   var $312=$311 & 16384;
   var $313=(($312)|(0))!=0;
   if ($313) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $315=(($size+4)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($size)|0);
   var $318=HEAP32[(($317)>>2)];
   var $319=(Math.imul($318,$316)|0);
   HEAP32[(($317)>>2)]=$319;
   $dst_step=1073741824;
   $src_step=1073741824;
   var $320=(($size+4)|0);
   HEAP32[(($320)>>2)]=1;
   label = 66; break;
  case 66: 
   var $322=$type;
   var $323=$322 & 504;
   var $324=$323 >> 3;
   var $325=((($324)+(1))|0);
   var $326=(($size)|0);
   var $327=HEAP32[(($326)>>2)];
   var $328=(Math.imul($327,$325)|0);
   HEAP32[(($326)>>2)]=$328;
   var $329=$src;
   var $330=(($329)|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=$dst;
   var $333=(($332)|0);
   var $334=HEAP32[(($333)>>2)];
   var $335=$331 ^ $334;
   var $336=$335 & 511;
   var $337=(($336)|(0))==0;
   if ($337) { label = 67; break; } else { label = 80; break; }
  case 67: 
   var $339=(($size+4)|0);
   var $340=HEAP32[(($339)>>2)];
   var $341=(($340)|(0))==1;
   if ($341) { label = 68; break; } else { label = 80; break; }
  case 68: 
   var $343=(($size)|0);
   var $344=HEAP32[(($343)>>2)];
   var $345=(($344)|(0)) <= 10;
   if ($345) { label = 69; break; } else { label = 80; break; }
  case 69: 
   var $347=$type;
   var $348=$347 & 7;
   var $349=(($348)|(0))==5;
   if ($349) { label = 70; break; } else { label = 74; break; }
  case 70: 
   var $351=$src;
   var $352=(($351+16)|0);
   var $353=$352;
   var $354=HEAP32[(($353)>>2)];
   var $355=$354;
   $srcdata=$355;
   var $356=$dst;
   var $357=(($356+16)|0);
   var $358=$357;
   var $359=HEAP32[(($358)>>2)];
   var $360=$359;
   $dstdata=$360;
   label = 71; break;
  case 71: 
   var $362=(($size)|0);
   var $363=HEAP32[(($362)>>2)];
   var $364=((($363)-(1))|0);
   var $365=$srcdata;
   var $366=(($365+($364<<2))|0);
   var $367=HEAPF32[(($366)>>2)];
   var $368=$367;
   var $369=$3;
   var $370=($368)*($369);
   var $371=$4;
   var $372=($370)+($371);
   var $373=$372;
   var $374=(($size)|0);
   var $375=HEAP32[(($374)>>2)];
   var $376=((($375)-(1))|0);
   var $377=$dstdata;
   var $378=(($377+($376<<2))|0);
   HEAPF32[(($378)>>2)]=$373;
   label = 72; break;
  case 72: 
   var $380=(($size)|0);
   var $381=HEAP32[(($380)>>2)];
   var $382=((($381)-(1))|0);
   HEAP32[(($380)>>2)]=$382;
   var $383=(($382)|(0))!=0;
   if ($383) { label = 71; break; } else { label = 73; break; }
  case 73: 
   label = 96; break;
  case 74: 
   var $386=$type;
   var $387=$386 & 7;
   var $388=(($387)|(0))==6;
   if ($388) { label = 75; break; } else { label = 79; break; }
  case 75: 
   var $390=$src;
   var $391=(($390+16)|0);
   var $392=$391;
   var $393=HEAP32[(($392)>>2)];
   var $394=$393;
   $srcdata4=$394;
   var $395=$dst;
   var $396=(($395+16)|0);
   var $397=$396;
   var $398=HEAP32[(($397)>>2)];
   var $399=$398;
   $dstdata5=$399;
   label = 76; break;
  case 76: 
   var $401=(($size)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=((($402)-(1))|0);
   var $404=$srcdata4;
   var $405=(($404+($403<<3))|0);
   var $406=HEAPF64[(($405)>>3)];
   var $407=$3;
   var $408=($406)*($407);
   var $409=$4;
   var $410=($408)+($409);
   var $411=(($size)|0);
   var $412=HEAP32[(($411)>>2)];
   var $413=((($412)-(1))|0);
   var $414=$dstdata5;
   var $415=(($414+($413<<3))|0);
   HEAPF64[(($415)>>3)]=$410;
   label = 77; break;
  case 77: 
   var $417=(($size)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=((($418)-(1))|0);
   HEAP32[(($417)>>2)]=$419;
   var $420=(($419)|(0))!=0;
   if ($420) { label = 76; break; } else { label = 78; break; }
  case 78: 
   label = 96; break;
  case 79: 
   label = 80; break;
  case 80: 
   var $424=HEAP32[((27968)>>2)];
   var $425=(($424)|(0))!=0;
   if ($425) { label = 82; break; } else { label = 81; break; }
  case 81: 
   __ZL20icvInitCvtToC1RTableP11CvFuncTable(36424);
   __ZL25icvInitCvtScaleToC1RTableP11CvFuncTable(36392);
   HEAP32[((27968)>>2)]=1;
   label = 82; break;
  case 82: 
   var $428=$src;
   var $429=(($428)|0);
   var $430=HEAP32[(($429)>>2)];
   var $431=$dst;
   var $432=(($431)|0);
   var $433=HEAP32[(($432)>>2)];
   var $434=$430 ^ $433;
   var $435=$434 & 504;
   var $436=(($435)|(0))==0;
   if ($436) { label = 84; break; } else { label = 83; break; }
  case 83: 
   _cvError(-205, ((6768)|0), ((36904)|0), ((15184)|0), 1657);
   label = 96; break;
  case 84: 
   var $439=$no_scale;
   var $440=(($439)|(0))!=0;
   if ($440) { label = 85; break; } else { label = 90; break; }
  case 85: 
   var $442=$dst;
   var $443=(($442)|0);
   var $444=HEAP32[(($443)>>2)];
   var $445=$444 & 7;
   var $446=((((36424)|0)+($445<<2))|0);
   var $447=HEAP32[(($446)>>2)];
   var $448=$447;
   $func6=$448;
   var $449=$func6;
   var $450=(($449)|(0))!=0;
   if ($450) { label = 87; break; } else { label = 86; break; }
  case 86: 
   _cvError(-210, ((6768)|0), ((36904)|0), ((15184)|0), 1664);
   label = 96; break;
  case 87: 
   var $453=$func6;
   var $454=$src;
   var $455=(($454+16)|0);
   var $456=$455;
   var $457=HEAP32[(($456)>>2)];
   var $458=$src_step;
   var $459=$dst;
   var $460=(($459+16)|0);
   var $461=$460;
   var $462=HEAP32[(($461)>>2)];
   var $463=$dst_step;
   var $464=$8;
   var $465=$size;
   assert(8 % 1 === 0);HEAP32[(($464)>>2)]=HEAP32[(($465)>>2)];HEAP32[((($464)+(4))>>2)]=HEAP32[((($465)+(4))>>2)];
   var $466=$type;
   var $467=FUNCTION_TABLE[$453]($457, $458, $462, $463, $8, $466);
   $ippi_call_result7=$467;
   var $468=$ippi_call_result7;
   var $469=(($468)|(0)) < 0;
   if ($469) { label = 88; break; } else { label = 89; break; }
  case 88: 
   var $471=$ippi_call_result7;
   var $472=_cvErrorFromIppStatus($471);
   _cvError($472, ((6768)|0), ((11264)|0), ((15184)|0), 1667);
   label = 96; break;
  case 89: 
   label = 95; break;
  case 90: 
   var $475=$dst;
   var $476=(($475)|0);
   var $477=HEAP32[(($476)>>2)];
   var $478=$477 & 7;
   var $479=((((36392)|0)+($478<<2))|0);
   var $480=HEAP32[(($479)>>2)];
   var $481=$480;
   $func8=$481;
   var $482=$func8;
   var $483=(($482)|(0))!=0;
   if ($483) { label = 92; break; } else { label = 91; break; }
  case 91: 
   _cvError(-210, ((6768)|0), ((36904)|0), ((15184)|0), 1675);
   label = 96; break;
  case 92: 
   var $486=$func8;
   var $487=$src;
   var $488=(($487+16)|0);
   var $489=$488;
   var $490=HEAP32[(($489)>>2)];
   var $491=$src_step;
   var $492=$dst;
   var $493=(($492+16)|0);
   var $494=$493;
   var $495=HEAP32[(($494)>>2)];
   var $496=$dst_step;
   var $497=$9;
   var $498=$size;
   assert(8 % 1 === 0);HEAP32[(($497)>>2)]=HEAP32[(($498)>>2)];HEAP32[((($497)+(4))>>2)]=HEAP32[((($498)+(4))>>2)];
   var $499=$3;
   var $500=$4;
   var $501=$type;
   var $502=FUNCTION_TABLE[$486]($490, $491, $495, $496, $9, $499, $500, $501);
   $ippi_call_result9=$502;
   var $503=$ippi_call_result9;
   var $504=(($503)|(0)) < 0;
   if ($504) { label = 93; break; } else { label = 94; break; }
  case 93: 
   var $506=$ippi_call_result9;
   var $507=_cvErrorFromIppStatus($506);
   _cvError($507, ((6768)|0), ((11264)|0), ((15184)|0), 1679);
   label = 96; break;
  case 94: 
   label = 95; break;
  case 95: 
   label = 96; break;
  case 96: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvCvtScaleTo_8u_C1RPKhiPhi6CvSizeddi($src, $srcstep, $dst, $dststep, $size, $scale, $shift, $param) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $i;
   var $srctype;
   var $lut=sp;
   var $val;
   var $t;
   var $9=(sp)+(256);
   var $iscale;
   var $ishift;
   var $_src;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $t03;
   var $t14;
   var $t05;
   var $t6;
   var $10=(sp)+(264);
   var $iscale7;
   var $ishift8;
   var $_src9;
   var $t010;
   var $t111;
   var $t012;
   var $_src13;
   var $t014;
   var $t115;
   var $t016;
   var $iscale17;
   var $_src18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $t023;
   var $t124;
   var $t025;
   var $iscale26;
   var $ishift27;
   var $_src28;
   var $t029;
   var $t130;
   var $t031;
   var $_src32;
   var $t033;
   var $t134;
   var $t035;
   var $_src36;
   var $t037;
   var $t138;
   var $t039;
   var $_src40;
   var $t041;
   var $t142;
   var $t043;
   var $_src44;
   var $t045;
   var $t146;
   var $t047;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$scale;
   $7=$shift;
   $8=$param;
   var $11=$8;
   $srctype=$11;
   var $12=$5;
   var $13=(((($12)>>>(0)))&-1);
   $5=$13;
   var $14=$srctype;
   var $15=$14 & 7;
   if ((($15)|(0))==0) {
    label = 2; break;
   }
   else if ((($15)|(0))==1) {
    label = 71; break;
   }
   else if ((($15)|(0))==2) {
    label = 140; break;
   }
   else if ((($15)|(0))==3) {
    label = 199; break;
   }
   else if ((($15)|(0))==4) {
    label = 258; break;
   }
   else if ((($15)|(0))==5) {
    label = 286; break;
   }
   else if ((($15)|(0))==6) {
    label = 314; break;
   }
   else {
   label = 342; break;
   }
  case 2: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(Math.imul($18,$20)|0);
   var $22=(($21)|(0)) >= 256;
   if ($22) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $24=$7;
   $val=$24;
   $i=0;
   label = 4; break;
  case 4: 
   var $26=$i;
   var $27=(($26)|(0)) < 256;
   if ($27) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $29=$val;
   var $30=__Z7cvRoundd($29);
   $t=$30;
   var $31=$t;
   var $32=$31 & -256;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $35=$t;
   var $41 = $35;label = 8; break;
  case 7: 
   var $37=$t;
   var $38=(($37)|(0)) > 0;
   var $39=$38 ? 255 : 0;
   var $41 = $39;label = 8; break;
  case 8: 
   var $41;
   var $42=(($41) & 255);
   var $43=$i;
   var $44=(($lut+$43)|0);
   HEAP8[($44)]=$42;
   label = 9; break;
  case 9: 
   var $46=$i;
   var $47=((($46)+(1))|0);
   $i=$47;
   var $48=$6;
   var $49=$val;
   var $50=($49)+($48);
   $val=$50;
   label = 4; break;
  case 10: 
   var $52=$2;
   var $53=$3;
   var $54=$4;
   var $55=$5;
   var $56=$55;
   var $57=$9;
   var $58=$size;
   assert(8 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
   var $59=(($lut)|0);
   var $60=__Z25icvLUT_Transform8u_8u_C1RPKhiPhi6CvSizeS0_($52, $53, $54, $56, $9, $59);
   label = 70; break;
  case 11: 
   var $62=$6;
   var $63=Math.abs($62);
   var $64=$63 <= 128;
   if ($64) { label = 12; break; } else { label = 41; break; }
  case 12: 
   var $66=$7;
   var $67=Math.abs($66);
   var $68=$67 <= 32767.99998474121;
   if ($68) { label = 13; break; } else { label = 41; break; }
  case 13: 
   var $70=$6;
   var $71=($70)*(32768);
   var $72=__Z7cvRoundd($71);
   $iscale=$72;
   var $73=$7;
   var $74=($73)*(32768);
   var $75=__Z7cvRoundd($74);
   $ishift=$75;
   var $76=$2;
   $_src=$76;
   var $77=$3;
   var $78=(((($77)>>>(0)))&-1);
   $3=$78;
   label = 14; break;
  case 14: 
   var $80=(($size+4)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=((($81)-(1))|0);
   HEAP32[(($80)>>2)]=$82;
   var $83=(($81)|(0))!=0;
   if ($83) { label = 15; break; } else { label = 40; break; }
  case 15: 
   $i=0;
   label = 16; break;
  case 16: 
   var $86=$i;
   var $87=(($size)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=((($88)-(4))|0);
   var $90=(($86)|(0)) <= (($89)|(0));
   if ($90) { label = 17; break; } else { label = 31; break; }
  case 17: 
   var $92=$iscale;
   var $93=$i;
   var $94=$_src;
   var $95=(($94+$93)|0);
   var $96=HEAP8[($95)];
   var $97=(($96)&(255));
   var $98=(Math.imul($92,$97)|0);
   var $99=$ishift;
   var $100=((($98)+($99))|0);
   var $101=((($100)+(16384))|0);
   var $102=$101 >> 15;
   $t0=$102;
   var $103=$iscale;
   var $104=$i;
   var $105=((($104)+(1))|0);
   var $106=$_src;
   var $107=(($106+$105)|0);
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=(Math.imul($103,$109)|0);
   var $111=$ishift;
   var $112=((($110)+($111))|0);
   var $113=((($112)+(16384))|0);
   var $114=$113 >> 15;
   $t1=$114;
   var $115=$t0;
   var $116=$115 & -256;
   var $117=(($116)|(0))!=0;
   if ($117) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $119=$t0;
   var $125 = $119;label = 20; break;
  case 19: 
   var $121=$t0;
   var $122=(($121)|(0)) > 0;
   var $123=$122 ? 255 : 0;
   var $125 = $123;label = 20; break;
  case 20: 
   var $125;
   var $126=(($125) & 255);
   var $127=$i;
   var $128=$4;
   var $129=(($128+$127)|0);
   HEAP8[($129)]=$126;
   var $130=$t1;
   var $131=$130 & -256;
   var $132=(($131)|(0))!=0;
   if ($132) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $134=$t1;
   var $140 = $134;label = 23; break;
  case 22: 
   var $136=$t1;
   var $137=(($136)|(0)) > 0;
   var $138=$137 ? 255 : 0;
   var $140 = $138;label = 23; break;
  case 23: 
   var $140;
   var $141=(($140) & 255);
   var $142=$i;
   var $143=((($142)+(1))|0);
   var $144=$4;
   var $145=(($144+$143)|0);
   HEAP8[($145)]=$141;
   var $146=$iscale;
   var $147=$i;
   var $148=((($147)+(2))|0);
   var $149=$_src;
   var $150=(($149+$148)|0);
   var $151=HEAP8[($150)];
   var $152=(($151)&(255));
   var $153=(Math.imul($146,$152)|0);
   var $154=$ishift;
   var $155=((($153)+($154))|0);
   var $156=((($155)+(16384))|0);
   var $157=$156 >> 15;
   $t0=$157;
   var $158=$iscale;
   var $159=$i;
   var $160=((($159)+(3))|0);
   var $161=$_src;
   var $162=(($161+$160)|0);
   var $163=HEAP8[($162)];
   var $164=(($163)&(255));
   var $165=(Math.imul($158,$164)|0);
   var $166=$ishift;
   var $167=((($165)+($166))|0);
   var $168=((($167)+(16384))|0);
   var $169=$168 >> 15;
   $t1=$169;
   var $170=$t0;
   var $171=$170 & -256;
   var $172=(($171)|(0))!=0;
   if ($172) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $174=$t0;
   var $180 = $174;label = 26; break;
  case 25: 
   var $176=$t0;
   var $177=(($176)|(0)) > 0;
   var $178=$177 ? 255 : 0;
   var $180 = $178;label = 26; break;
  case 26: 
   var $180;
   var $181=(($180) & 255);
   var $182=$i;
   var $183=((($182)+(2))|0);
   var $184=$4;
   var $185=(($184+$183)|0);
   HEAP8[($185)]=$181;
   var $186=$t1;
   var $187=$186 & -256;
   var $188=(($187)|(0))!=0;
   if ($188) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $190=$t1;
   var $196 = $190;label = 29; break;
  case 28: 
   var $192=$t1;
   var $193=(($192)|(0)) > 0;
   var $194=$193 ? 255 : 0;
   var $196 = $194;label = 29; break;
  case 29: 
   var $196;
   var $197=(($196) & 255);
   var $198=$i;
   var $199=((($198)+(3))|0);
   var $200=$4;
   var $201=(($200+$199)|0);
   HEAP8[($201)]=$197;
   label = 30; break;
  case 30: 
   var $203=$i;
   var $204=((($203)+(4))|0);
   $i=$204;
   label = 16; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $207=$i;
   var $208=(($size)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=(($207)|(0)) < (($209)|(0));
   if ($210) { label = 33; break; } else { label = 38; break; }
  case 33: 
   var $212=$iscale;
   var $213=$i;
   var $214=$_src;
   var $215=(($214+$213)|0);
   var $216=HEAP8[($215)];
   var $217=(($216)&(255));
   var $218=(Math.imul($212,$217)|0);
   var $219=$ishift;
   var $220=((($218)+($219))|0);
   var $221=((($220)+(16384))|0);
   var $222=$221 >> 15;
   $t01=$222;
   var $223=$t01;
   var $224=$223 & -256;
   var $225=(($224)|(0))!=0;
   if ($225) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $227=$t01;
   var $233 = $227;label = 36; break;
  case 35: 
   var $229=$t01;
   var $230=(($229)|(0)) > 0;
   var $231=$230 ? 255 : 0;
   var $233 = $231;label = 36; break;
  case 36: 
   var $233;
   var $234=(($233) & 255);
   var $235=$i;
   var $236=$4;
   var $237=(($236+$235)|0);
   HEAP8[($237)]=$234;
   label = 37; break;
  case 37: 
   var $239=$i;
   var $240=((($239)+(1))|0);
   $i=$240;
   label = 32; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $243=$3;
   var $244=$_src;
   var $245=(($244+$243)|0);
   $_src=$245;
   var $246=$5;
   var $247=$4;
   var $248=(($247+$246)|0);
   $4=$248;
   label = 14; break;
  case 40: 
   label = 69; break;
  case 41: 
   var $251=$2;
   $_src2=$251;
   var $252=$3;
   var $253=(((($252)>>>(0)))&-1);
   $3=$253;
   label = 42; break;
  case 42: 
   var $255=(($size+4)|0);
   var $256=HEAP32[(($255)>>2)];
   var $257=((($256)-(1))|0);
   HEAP32[(($255)>>2)]=$257;
   var $258=(($256)|(0))!=0;
   if ($258) { label = 43; break; } else { label = 68; break; }
  case 43: 
   $i=0;
   label = 44; break;
  case 44: 
   var $261=$i;
   var $262=(($size)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=((($263)-(4))|0);
   var $265=(($261)|(0)) <= (($264)|(0));
   if ($265) { label = 45; break; } else { label = 59; break; }
  case 45: 
   var $267=$6;
   var $268=$i;
   var $269=$_src2;
   var $270=(($269+$268)|0);
   var $271=HEAP8[($270)];
   var $272=(($271)&(255));
   var $273=(($272)|(0));
   var $274=($267)*($273);
   var $275=$7;
   var $276=($274)+($275);
   var $277=__Z7cvRoundd($276);
   $t03=$277;
   var $278=$6;
   var $279=$i;
   var $280=((($279)+(1))|0);
   var $281=$_src2;
   var $282=(($281+$280)|0);
   var $283=HEAP8[($282)];
   var $284=(($283)&(255));
   var $285=(($284)|(0));
   var $286=($278)*($285);
   var $287=$7;
   var $288=($286)+($287);
   var $289=__Z7cvRoundd($288);
   $t14=$289;
   var $290=$t03;
   var $291=$290 & -256;
   var $292=(($291)|(0))!=0;
   if ($292) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $294=$t03;
   var $300 = $294;label = 48; break;
  case 47: 
   var $296=$t03;
   var $297=(($296)|(0)) > 0;
   var $298=$297 ? 255 : 0;
   var $300 = $298;label = 48; break;
  case 48: 
   var $300;
   var $301=(($300) & 255);
   var $302=$i;
   var $303=$4;
   var $304=(($303+$302)|0);
   HEAP8[($304)]=$301;
   var $305=$t14;
   var $306=$305 & -256;
   var $307=(($306)|(0))!=0;
   if ($307) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $309=$t14;
   var $315 = $309;label = 51; break;
  case 50: 
   var $311=$t14;
   var $312=(($311)|(0)) > 0;
   var $313=$312 ? 255 : 0;
   var $315 = $313;label = 51; break;
  case 51: 
   var $315;
   var $316=(($315) & 255);
   var $317=$i;
   var $318=((($317)+(1))|0);
   var $319=$4;
   var $320=(($319+$318)|0);
   HEAP8[($320)]=$316;
   var $321=$6;
   var $322=$i;
   var $323=((($322)+(2))|0);
   var $324=$_src2;
   var $325=(($324+$323)|0);
   var $326=HEAP8[($325)];
   var $327=(($326)&(255));
   var $328=(($327)|(0));
   var $329=($321)*($328);
   var $330=$7;
   var $331=($329)+($330);
   var $332=__Z7cvRoundd($331);
   $t03=$332;
   var $333=$6;
   var $334=$i;
   var $335=((($334)+(3))|0);
   var $336=$_src2;
   var $337=(($336+$335)|0);
   var $338=HEAP8[($337)];
   var $339=(($338)&(255));
   var $340=(($339)|(0));
   var $341=($333)*($340);
   var $342=$7;
   var $343=($341)+($342);
   var $344=__Z7cvRoundd($343);
   $t14=$344;
   var $345=$t03;
   var $346=$345 & -256;
   var $347=(($346)|(0))!=0;
   if ($347) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $349=$t03;
   var $355 = $349;label = 54; break;
  case 53: 
   var $351=$t03;
   var $352=(($351)|(0)) > 0;
   var $353=$352 ? 255 : 0;
   var $355 = $353;label = 54; break;
  case 54: 
   var $355;
   var $356=(($355) & 255);
   var $357=$i;
   var $358=((($357)+(2))|0);
   var $359=$4;
   var $360=(($359+$358)|0);
   HEAP8[($360)]=$356;
   var $361=$t14;
   var $362=$361 & -256;
   var $363=(($362)|(0))!=0;
   if ($363) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $365=$t14;
   var $371 = $365;label = 57; break;
  case 56: 
   var $367=$t14;
   var $368=(($367)|(0)) > 0;
   var $369=$368 ? 255 : 0;
   var $371 = $369;label = 57; break;
  case 57: 
   var $371;
   var $372=(($371) & 255);
   var $373=$i;
   var $374=((($373)+(3))|0);
   var $375=$4;
   var $376=(($375+$374)|0);
   HEAP8[($376)]=$372;
   label = 58; break;
  case 58: 
   var $378=$i;
   var $379=((($378)+(4))|0);
   $i=$379;
   label = 44; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $382=$i;
   var $383=(($size)|0);
   var $384=HEAP32[(($383)>>2)];
   var $385=(($382)|(0)) < (($384)|(0));
   if ($385) { label = 61; break; } else { label = 66; break; }
  case 61: 
   var $387=$6;
   var $388=$i;
   var $389=$_src2;
   var $390=(($389+$388)|0);
   var $391=HEAP8[($390)];
   var $392=(($391)&(255));
   var $393=(($392)|(0));
   var $394=($387)*($393);
   var $395=$7;
   var $396=($394)+($395);
   var $397=__Z7cvRoundd($396);
   $t05=$397;
   var $398=$t05;
   var $399=$398 & -256;
   var $400=(($399)|(0))!=0;
   if ($400) { label = 63; break; } else { label = 62; break; }
  case 62: 
   var $402=$t05;
   var $408 = $402;label = 64; break;
  case 63: 
   var $404=$t05;
   var $405=(($404)|(0)) > 0;
   var $406=$405 ? 255 : 0;
   var $408 = $406;label = 64; break;
  case 64: 
   var $408;
   var $409=(($408) & 255);
   var $410=$i;
   var $411=$4;
   var $412=(($411+$410)|0);
   HEAP8[($412)]=$409;
   label = 65; break;
  case 65: 
   var $414=$i;
   var $415=((($414)+(1))|0);
   $i=$415;
   label = 60; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $418=$3;
   var $419=$_src2;
   var $420=(($419+$418)|0);
   $_src2=$420;
   var $421=$5;
   var $422=$4;
   var $423=(($422+$421)|0);
   $4=$423;
   label = 42; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   label = 343; break;
  case 71: 
   var $428=(($size)|0);
   var $429=HEAP32[(($428)>>2)];
   var $430=(($size+4)|0);
   var $431=HEAP32[(($430)>>2)];
   var $432=(Math.imul($429,$431)|0);
   var $433=(($432)|(0)) >= 256;
   if ($433) { label = 72; break; } else { label = 80; break; }
  case 72: 
   $i=0;
   label = 73; break;
  case 73: 
   var $436=$i;
   var $437=(($436)|(0)) < 256;
   if ($437) { label = 74; break; } else { label = 79; break; }
  case 74: 
   var $439=$i;
   var $440=(($439) & 255);
   var $441=(($440 << 24) >> 24);
   var $442=(($441)|(0));
   var $443=$6;
   var $444=($442)*($443);
   var $445=$7;
   var $446=($444)+($445);
   var $447=__Z7cvRoundd($446);
   $t6=$447;
   var $448=$t6;
   var $449=$448 & -256;
   var $450=(($449)|(0))!=0;
   if ($450) { label = 76; break; } else { label = 75; break; }
  case 75: 
   var $452=$t6;
   var $458 = $452;label = 77; break;
  case 76: 
   var $454=$t6;
   var $455=(($454)|(0)) > 0;
   var $456=$455 ? 255 : 0;
   var $458 = $456;label = 77; break;
  case 77: 
   var $458;
   var $459=(($458) & 255);
   var $460=$i;
   var $461=(($lut+$460)|0);
   HEAP8[($461)]=$459;
   label = 78; break;
  case 78: 
   var $463=$i;
   var $464=((($463)+(1))|0);
   $i=$464;
   label = 73; break;
  case 79: 
   var $466=$2;
   var $467=$3;
   var $468=$4;
   var $469=$5;
   var $470=$469;
   var $471=$10;
   var $472=$size;
   assert(8 % 1 === 0);HEAP32[(($471)>>2)]=HEAP32[(($472)>>2)];HEAP32[((($471)+(4))>>2)]=HEAP32[((($472)+(4))>>2)];
   var $473=(($lut)|0);
   var $474=__Z25icvLUT_Transform8u_8u_C1RPKhiPhi6CvSizeS0_($466, $467, $468, $470, $10, $473);
   label = 139; break;
  case 80: 
   var $476=$6;
   var $477=Math.abs($476);
   var $478=$477 <= 128;
   if ($478) { label = 81; break; } else { label = 110; break; }
  case 81: 
   var $480=$7;
   var $481=Math.abs($480);
   var $482=$481 <= 32767.99998474121;
   if ($482) { label = 82; break; } else { label = 110; break; }
  case 82: 
   var $484=$6;
   var $485=($484)*(32768);
   var $486=__Z7cvRoundd($485);
   $iscale7=$486;
   var $487=$7;
   var $488=($487)*(32768);
   var $489=__Z7cvRoundd($488);
   $ishift8=$489;
   var $490=$2;
   $_src9=$490;
   var $491=$3;
   var $492=(((($491)>>>(0)))&-1);
   $3=$492;
   label = 83; break;
  case 83: 
   var $494=(($size+4)|0);
   var $495=HEAP32[(($494)>>2)];
   var $496=((($495)-(1))|0);
   HEAP32[(($494)>>2)]=$496;
   var $497=(($495)|(0))!=0;
   if ($497) { label = 84; break; } else { label = 109; break; }
  case 84: 
   $i=0;
   label = 85; break;
  case 85: 
   var $500=$i;
   var $501=(($size)|0);
   var $502=HEAP32[(($501)>>2)];
   var $503=((($502)-(4))|0);
   var $504=(($500)|(0)) <= (($503)|(0));
   if ($504) { label = 86; break; } else { label = 100; break; }
  case 86: 
   var $506=$iscale7;
   var $507=$i;
   var $508=$_src9;
   var $509=(($508+$507)|0);
   var $510=HEAP8[($509)];
   var $511=(($510 << 24) >> 24);
   var $512=(Math.imul($506,$511)|0);
   var $513=$ishift8;
   var $514=((($512)+($513))|0);
   var $515=((($514)+(16384))|0);
   var $516=$515 >> 15;
   $t010=$516;
   var $517=$iscale7;
   var $518=$i;
   var $519=((($518)+(1))|0);
   var $520=$_src9;
   var $521=(($520+$519)|0);
   var $522=HEAP8[($521)];
   var $523=(($522 << 24) >> 24);
   var $524=(Math.imul($517,$523)|0);
   var $525=$ishift8;
   var $526=((($524)+($525))|0);
   var $527=((($526)+(16384))|0);
   var $528=$527 >> 15;
   $t111=$528;
   var $529=$t010;
   var $530=$529 & -256;
   var $531=(($530)|(0))!=0;
   if ($531) { label = 88; break; } else { label = 87; break; }
  case 87: 
   var $533=$t010;
   var $539 = $533;label = 89; break;
  case 88: 
   var $535=$t010;
   var $536=(($535)|(0)) > 0;
   var $537=$536 ? 255 : 0;
   var $539 = $537;label = 89; break;
  case 89: 
   var $539;
   var $540=(($539) & 255);
   var $541=$i;
   var $542=$4;
   var $543=(($542+$541)|0);
   HEAP8[($543)]=$540;
   var $544=$t111;
   var $545=$544 & -256;
   var $546=(($545)|(0))!=0;
   if ($546) { label = 91; break; } else { label = 90; break; }
  case 90: 
   var $548=$t111;
   var $554 = $548;label = 92; break;
  case 91: 
   var $550=$t111;
   var $551=(($550)|(0)) > 0;
   var $552=$551 ? 255 : 0;
   var $554 = $552;label = 92; break;
  case 92: 
   var $554;
   var $555=(($554) & 255);
   var $556=$i;
   var $557=((($556)+(1))|0);
   var $558=$4;
   var $559=(($558+$557)|0);
   HEAP8[($559)]=$555;
   var $560=$iscale7;
   var $561=$i;
   var $562=((($561)+(2))|0);
   var $563=$_src9;
   var $564=(($563+$562)|0);
   var $565=HEAP8[($564)];
   var $566=(($565 << 24) >> 24);
   var $567=(Math.imul($560,$566)|0);
   var $568=$ishift8;
   var $569=((($567)+($568))|0);
   var $570=((($569)+(16384))|0);
   var $571=$570 >> 15;
   $t010=$571;
   var $572=$iscale7;
   var $573=$i;
   var $574=((($573)+(3))|0);
   var $575=$_src9;
   var $576=(($575+$574)|0);
   var $577=HEAP8[($576)];
   var $578=(($577 << 24) >> 24);
   var $579=(Math.imul($572,$578)|0);
   var $580=$ishift8;
   var $581=((($579)+($580))|0);
   var $582=((($581)+(16384))|0);
   var $583=$582 >> 15;
   $t111=$583;
   var $584=$t010;
   var $585=$584 & -256;
   var $586=(($585)|(0))!=0;
   if ($586) { label = 94; break; } else { label = 93; break; }
  case 93: 
   var $588=$t010;
   var $594 = $588;label = 95; break;
  case 94: 
   var $590=$t010;
   var $591=(($590)|(0)) > 0;
   var $592=$591 ? 255 : 0;
   var $594 = $592;label = 95; break;
  case 95: 
   var $594;
   var $595=(($594) & 255);
   var $596=$i;
   var $597=((($596)+(2))|0);
   var $598=$4;
   var $599=(($598+$597)|0);
   HEAP8[($599)]=$595;
   var $600=$t111;
   var $601=$600 & -256;
   var $602=(($601)|(0))!=0;
   if ($602) { label = 97; break; } else { label = 96; break; }
  case 96: 
   var $604=$t111;
   var $610 = $604;label = 98; break;
  case 97: 
   var $606=$t111;
   var $607=(($606)|(0)) > 0;
   var $608=$607 ? 255 : 0;
   var $610 = $608;label = 98; break;
  case 98: 
   var $610;
   var $611=(($610) & 255);
   var $612=$i;
   var $613=((($612)+(3))|0);
   var $614=$4;
   var $615=(($614+$613)|0);
   HEAP8[($615)]=$611;
   label = 99; break;
  case 99: 
   var $617=$i;
   var $618=((($617)+(4))|0);
   $i=$618;
   label = 85; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $621=$i;
   var $622=(($size)|0);
   var $623=HEAP32[(($622)>>2)];
   var $624=(($621)|(0)) < (($623)|(0));
   if ($624) { label = 102; break; } else { label = 107; break; }
  case 102: 
   var $626=$iscale7;
   var $627=$i;
   var $628=$_src9;
   var $629=(($628+$627)|0);
   var $630=HEAP8[($629)];
   var $631=(($630 << 24) >> 24);
   var $632=(Math.imul($626,$631)|0);
   var $633=$ishift8;
   var $634=((($632)+($633))|0);
   var $635=((($634)+(16384))|0);
   var $636=$635 >> 15;
   $t012=$636;
   var $637=$t012;
   var $638=$637 & -256;
   var $639=(($638)|(0))!=0;
   if ($639) { label = 104; break; } else { label = 103; break; }
  case 103: 
   var $641=$t012;
   var $647 = $641;label = 105; break;
  case 104: 
   var $643=$t012;
   var $644=(($643)|(0)) > 0;
   var $645=$644 ? 255 : 0;
   var $647 = $645;label = 105; break;
  case 105: 
   var $647;
   var $648=(($647) & 255);
   var $649=$i;
   var $650=$4;
   var $651=(($650+$649)|0);
   HEAP8[($651)]=$648;
   label = 106; break;
  case 106: 
   var $653=$i;
   var $654=((($653)+(1))|0);
   $i=$654;
   label = 101; break;
  case 107: 
   label = 108; break;
  case 108: 
   var $657=$3;
   var $658=$_src9;
   var $659=(($658+$657)|0);
   $_src9=$659;
   var $660=$5;
   var $661=$4;
   var $662=(($661+$660)|0);
   $4=$662;
   label = 83; break;
  case 109: 
   label = 138; break;
  case 110: 
   var $665=$2;
   $_src13=$665;
   var $666=$3;
   var $667=(((($666)>>>(0)))&-1);
   $3=$667;
   label = 111; break;
  case 111: 
   var $669=(($size+4)|0);
   var $670=HEAP32[(($669)>>2)];
   var $671=((($670)-(1))|0);
   HEAP32[(($669)>>2)]=$671;
   var $672=(($670)|(0))!=0;
   if ($672) { label = 112; break; } else { label = 137; break; }
  case 112: 
   $i=0;
   label = 113; break;
  case 113: 
   var $675=$i;
   var $676=(($size)|0);
   var $677=HEAP32[(($676)>>2)];
   var $678=((($677)-(4))|0);
   var $679=(($675)|(0)) <= (($678)|(0));
   if ($679) { label = 114; break; } else { label = 128; break; }
  case 114: 
   var $681=$6;
   var $682=$i;
   var $683=$_src13;
   var $684=(($683+$682)|0);
   var $685=HEAP8[($684)];
   var $686=(($685 << 24) >> 24);
   var $687=(($686)|(0));
   var $688=($681)*($687);
   var $689=$7;
   var $690=($688)+($689);
   var $691=__Z7cvRoundd($690);
   $t014=$691;
   var $692=$6;
   var $693=$i;
   var $694=((($693)+(1))|0);
   var $695=$_src13;
   var $696=(($695+$694)|0);
   var $697=HEAP8[($696)];
   var $698=(($697 << 24) >> 24);
   var $699=(($698)|(0));
   var $700=($692)*($699);
   var $701=$7;
   var $702=($700)+($701);
   var $703=__Z7cvRoundd($702);
   $t115=$703;
   var $704=$t014;
   var $705=$704 & -256;
   var $706=(($705)|(0))!=0;
   if ($706) { label = 116; break; } else { label = 115; break; }
  case 115: 
   var $708=$t014;
   var $714 = $708;label = 117; break;
  case 116: 
   var $710=$t014;
   var $711=(($710)|(0)) > 0;
   var $712=$711 ? 255 : 0;
   var $714 = $712;label = 117; break;
  case 117: 
   var $714;
   var $715=(($714) & 255);
   var $716=$i;
   var $717=$4;
   var $718=(($717+$716)|0);
   HEAP8[($718)]=$715;
   var $719=$t115;
   var $720=$719 & -256;
   var $721=(($720)|(0))!=0;
   if ($721) { label = 119; break; } else { label = 118; break; }
  case 118: 
   var $723=$t115;
   var $729 = $723;label = 120; break;
  case 119: 
   var $725=$t115;
   var $726=(($725)|(0)) > 0;
   var $727=$726 ? 255 : 0;
   var $729 = $727;label = 120; break;
  case 120: 
   var $729;
   var $730=(($729) & 255);
   var $731=$i;
   var $732=((($731)+(1))|0);
   var $733=$4;
   var $734=(($733+$732)|0);
   HEAP8[($734)]=$730;
   var $735=$6;
   var $736=$i;
   var $737=((($736)+(2))|0);
   var $738=$_src13;
   var $739=(($738+$737)|0);
   var $740=HEAP8[($739)];
   var $741=(($740 << 24) >> 24);
   var $742=(($741)|(0));
   var $743=($735)*($742);
   var $744=$7;
   var $745=($743)+($744);
   var $746=__Z7cvRoundd($745);
   $t014=$746;
   var $747=$6;
   var $748=$i;
   var $749=((($748)+(3))|0);
   var $750=$_src13;
   var $751=(($750+$749)|0);
   var $752=HEAP8[($751)];
   var $753=(($752 << 24) >> 24);
   var $754=(($753)|(0));
   var $755=($747)*($754);
   var $756=$7;
   var $757=($755)+($756);
   var $758=__Z7cvRoundd($757);
   $t115=$758;
   var $759=$t014;
   var $760=$759 & -256;
   var $761=(($760)|(0))!=0;
   if ($761) { label = 122; break; } else { label = 121; break; }
  case 121: 
   var $763=$t014;
   var $769 = $763;label = 123; break;
  case 122: 
   var $765=$t014;
   var $766=(($765)|(0)) > 0;
   var $767=$766 ? 255 : 0;
   var $769 = $767;label = 123; break;
  case 123: 
   var $769;
   var $770=(($769) & 255);
   var $771=$i;
   var $772=((($771)+(2))|0);
   var $773=$4;
   var $774=(($773+$772)|0);
   HEAP8[($774)]=$770;
   var $775=$t115;
   var $776=$775 & -256;
   var $777=(($776)|(0))!=0;
   if ($777) { label = 125; break; } else { label = 124; break; }
  case 124: 
   var $779=$t115;
   var $785 = $779;label = 126; break;
  case 125: 
   var $781=$t115;
   var $782=(($781)|(0)) > 0;
   var $783=$782 ? 255 : 0;
   var $785 = $783;label = 126; break;
  case 126: 
   var $785;
   var $786=(($785) & 255);
   var $787=$i;
   var $788=((($787)+(3))|0);
   var $789=$4;
   var $790=(($789+$788)|0);
   HEAP8[($790)]=$786;
   label = 127; break;
  case 127: 
   var $792=$i;
   var $793=((($792)+(4))|0);
   $i=$793;
   label = 113; break;
  case 128: 
   label = 129; break;
  case 129: 
   var $796=$i;
   var $797=(($size)|0);
   var $798=HEAP32[(($797)>>2)];
   var $799=(($796)|(0)) < (($798)|(0));
   if ($799) { label = 130; break; } else { label = 135; break; }
  case 130: 
   var $801=$6;
   var $802=$i;
   var $803=$_src13;
   var $804=(($803+$802)|0);
   var $805=HEAP8[($804)];
   var $806=(($805 << 24) >> 24);
   var $807=(($806)|(0));
   var $808=($801)*($807);
   var $809=$7;
   var $810=($808)+($809);
   var $811=__Z7cvRoundd($810);
   $t016=$811;
   var $812=$t016;
   var $813=$812 & -256;
   var $814=(($813)|(0))!=0;
   if ($814) { label = 132; break; } else { label = 131; break; }
  case 131: 
   var $816=$t016;
   var $822 = $816;label = 133; break;
  case 132: 
   var $818=$t016;
   var $819=(($818)|(0)) > 0;
   var $820=$819 ? 255 : 0;
   var $822 = $820;label = 133; break;
  case 133: 
   var $822;
   var $823=(($822) & 255);
   var $824=$i;
   var $825=$4;
   var $826=(($825+$824)|0);
   HEAP8[($826)]=$823;
   label = 134; break;
  case 134: 
   var $828=$i;
   var $829=((($828)+(1))|0);
   $i=$829;
   label = 129; break;
  case 135: 
   label = 136; break;
  case 136: 
   var $832=$3;
   var $833=$_src13;
   var $834=(($833+$832)|0);
   $_src13=$834;
   var $835=$5;
   var $836=$4;
   var $837=(($836+$835)|0);
   $4=$837;
   label = 111; break;
  case 137: 
   label = 138; break;
  case 138: 
   label = 139; break;
  case 139: 
   label = 343; break;
  case 140: 
   var $842=$6;
   var $843=Math.abs($842);
   var $844=$843 <= 1;
   if ($844) { label = 141; break; } else { label = 170; break; }
  case 141: 
   var $846=$7;
   var $847=Math.abs($846);
   var $848=$847 < 2.220446049250313e-16;
   if ($848) { label = 142; break; } else { label = 170; break; }
  case 142: 
   var $850=$6;
   var $851=($850)*(32768);
   var $852=__Z7cvRoundd($851);
   $iscale17=$852;
   var $853=$2;
   var $854=$853;
   $_src18=$854;
   var $855=$3;
   var $856=((((($855)>>>(0)))/(2))&-1);
   $3=$856;
   label = 143; break;
  case 143: 
   var $858=(($size+4)|0);
   var $859=HEAP32[(($858)>>2)];
   var $860=((($859)-(1))|0);
   HEAP32[(($858)>>2)]=$860;
   var $861=(($859)|(0))!=0;
   if ($861) { label = 144; break; } else { label = 169; break; }
  case 144: 
   $i=0;
   label = 145; break;
  case 145: 
   var $864=$i;
   var $865=(($size)|0);
   var $866=HEAP32[(($865)>>2)];
   var $867=((($866)-(4))|0);
   var $868=(($864)|(0)) <= (($867)|(0));
   if ($868) { label = 146; break; } else { label = 160; break; }
  case 146: 
   var $870=$iscale17;
   var $871=$i;
   var $872=$_src18;
   var $873=(($872+($871<<1))|0);
   var $874=HEAP16[(($873)>>1)];
   var $875=(($874)&(65535));
   var $876=(Math.imul($870,$875)|0);
   var $877=(($876)|0);
   var $878=((($877)+(16384))|0);
   var $879=$878 >> 15;
   $t019=$879;
   var $880=$iscale17;
   var $881=$i;
   var $882=((($881)+(1))|0);
   var $883=$_src18;
   var $884=(($883+($882<<1))|0);
   var $885=HEAP16[(($884)>>1)];
   var $886=(($885)&(65535));
   var $887=(Math.imul($880,$886)|0);
   var $888=(($887)|0);
   var $889=((($888)+(16384))|0);
   var $890=$889 >> 15;
   $t120=$890;
   var $891=$t019;
   var $892=$891 & -256;
   var $893=(($892)|(0))!=0;
   if ($893) { label = 148; break; } else { label = 147; break; }
  case 147: 
   var $895=$t019;
   var $901 = $895;label = 149; break;
  case 148: 
   var $897=$t019;
   var $898=(($897)|(0)) > 0;
   var $899=$898 ? 255 : 0;
   var $901 = $899;label = 149; break;
  case 149: 
   var $901;
   var $902=(($901) & 255);
   var $903=$i;
   var $904=$4;
   var $905=(($904+$903)|0);
   HEAP8[($905)]=$902;
   var $906=$t120;
   var $907=$906 & -256;
   var $908=(($907)|(0))!=0;
   if ($908) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $910=$t120;
   var $916 = $910;label = 152; break;
  case 151: 
   var $912=$t120;
   var $913=(($912)|(0)) > 0;
   var $914=$913 ? 255 : 0;
   var $916 = $914;label = 152; break;
  case 152: 
   var $916;
   var $917=(($916) & 255);
   var $918=$i;
   var $919=((($918)+(1))|0);
   var $920=$4;
   var $921=(($920+$919)|0);
   HEAP8[($921)]=$917;
   var $922=$iscale17;
   var $923=$i;
   var $924=((($923)+(2))|0);
   var $925=$_src18;
   var $926=(($925+($924<<1))|0);
   var $927=HEAP16[(($926)>>1)];
   var $928=(($927)&(65535));
   var $929=(Math.imul($922,$928)|0);
   var $930=(($929)|0);
   var $931=((($930)+(16384))|0);
   var $932=$931 >> 15;
   $t019=$932;
   var $933=$iscale17;
   var $934=$i;
   var $935=((($934)+(3))|0);
   var $936=$_src18;
   var $937=(($936+($935<<1))|0);
   var $938=HEAP16[(($937)>>1)];
   var $939=(($938)&(65535));
   var $940=(Math.imul($933,$939)|0);
   var $941=(($940)|0);
   var $942=((($941)+(16384))|0);
   var $943=$942 >> 15;
   $t120=$943;
   var $944=$t019;
   var $945=$944 & -256;
   var $946=(($945)|(0))!=0;
   if ($946) { label = 154; break; } else { label = 153; break; }
  case 153: 
   var $948=$t019;
   var $954 = $948;label = 155; break;
  case 154: 
   var $950=$t019;
   var $951=(($950)|(0)) > 0;
   var $952=$951 ? 255 : 0;
   var $954 = $952;label = 155; break;
  case 155: 
   var $954;
   var $955=(($954) & 255);
   var $956=$i;
   var $957=((($956)+(2))|0);
   var $958=$4;
   var $959=(($958+$957)|0);
   HEAP8[($959)]=$955;
   var $960=$t120;
   var $961=$960 & -256;
   var $962=(($961)|(0))!=0;
   if ($962) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $964=$t120;
   var $970 = $964;label = 158; break;
  case 157: 
   var $966=$t120;
   var $967=(($966)|(0)) > 0;
   var $968=$967 ? 255 : 0;
   var $970 = $968;label = 158; break;
  case 158: 
   var $970;
   var $971=(($970) & 255);
   var $972=$i;
   var $973=((($972)+(3))|0);
   var $974=$4;
   var $975=(($974+$973)|0);
   HEAP8[($975)]=$971;
   label = 159; break;
  case 159: 
   var $977=$i;
   var $978=((($977)+(4))|0);
   $i=$978;
   label = 145; break;
  case 160: 
   label = 161; break;
  case 161: 
   var $981=$i;
   var $982=(($size)|0);
   var $983=HEAP32[(($982)>>2)];
   var $984=(($981)|(0)) < (($983)|(0));
   if ($984) { label = 162; break; } else { label = 167; break; }
  case 162: 
   var $986=$iscale17;
   var $987=$i;
   var $988=$_src18;
   var $989=(($988+($987<<1))|0);
   var $990=HEAP16[(($989)>>1)];
   var $991=(($990)&(65535));
   var $992=(Math.imul($986,$991)|0);
   var $993=(($992)|0);
   var $994=((($993)+(16384))|0);
   var $995=$994 >> 15;
   $t021=$995;
   var $996=$t021;
   var $997=$996 & -256;
   var $998=(($997)|(0))!=0;
   if ($998) { label = 164; break; } else { label = 163; break; }
  case 163: 
   var $1000=$t021;
   var $1006 = $1000;label = 165; break;
  case 164: 
   var $1002=$t021;
   var $1003=(($1002)|(0)) > 0;
   var $1004=$1003 ? 255 : 0;
   var $1006 = $1004;label = 165; break;
  case 165: 
   var $1006;
   var $1007=(($1006) & 255);
   var $1008=$i;
   var $1009=$4;
   var $1010=(($1009+$1008)|0);
   HEAP8[($1010)]=$1007;
   label = 166; break;
  case 166: 
   var $1012=$i;
   var $1013=((($1012)+(1))|0);
   $i=$1013;
   label = 161; break;
  case 167: 
   label = 168; break;
  case 168: 
   var $1016=$3;
   var $1017=$_src18;
   var $1018=(($1017+($1016<<1))|0);
   $_src18=$1018;
   var $1019=$5;
   var $1020=$4;
   var $1021=(($1020+$1019)|0);
   $4=$1021;
   label = 143; break;
  case 169: 
   label = 198; break;
  case 170: 
   var $1024=$2;
   var $1025=$1024;
   $_src22=$1025;
   var $1026=$3;
   var $1027=((((($1026)>>>(0)))/(2))&-1);
   $3=$1027;
   label = 171; break;
  case 171: 
   var $1029=(($size+4)|0);
   var $1030=HEAP32[(($1029)>>2)];
   var $1031=((($1030)-(1))|0);
   HEAP32[(($1029)>>2)]=$1031;
   var $1032=(($1030)|(0))!=0;
   if ($1032) { label = 172; break; } else { label = 197; break; }
  case 172: 
   $i=0;
   label = 173; break;
  case 173: 
   var $1035=$i;
   var $1036=(($size)|0);
   var $1037=HEAP32[(($1036)>>2)];
   var $1038=((($1037)-(4))|0);
   var $1039=(($1035)|(0)) <= (($1038)|(0));
   if ($1039) { label = 174; break; } else { label = 188; break; }
  case 174: 
   var $1041=$6;
   var $1042=$i;
   var $1043=$_src22;
   var $1044=(($1043+($1042<<1))|0);
   var $1045=HEAP16[(($1044)>>1)];
   var $1046=(($1045)&(65535));
   var $1047=(($1046)|(0));
   var $1048=($1041)*($1047);
   var $1049=$7;
   var $1050=($1048)+($1049);
   var $1051=__Z7cvRoundd($1050);
   $t023=$1051;
   var $1052=$6;
   var $1053=$i;
   var $1054=((($1053)+(1))|0);
   var $1055=$_src22;
   var $1056=(($1055+($1054<<1))|0);
   var $1057=HEAP16[(($1056)>>1)];
   var $1058=(($1057)&(65535));
   var $1059=(($1058)|(0));
   var $1060=($1052)*($1059);
   var $1061=$7;
   var $1062=($1060)+($1061);
   var $1063=__Z7cvRoundd($1062);
   $t124=$1063;
   var $1064=$t023;
   var $1065=$1064 & -256;
   var $1066=(($1065)|(0))!=0;
   if ($1066) { label = 176; break; } else { label = 175; break; }
  case 175: 
   var $1068=$t023;
   var $1074 = $1068;label = 177; break;
  case 176: 
   var $1070=$t023;
   var $1071=(($1070)|(0)) > 0;
   var $1072=$1071 ? 255 : 0;
   var $1074 = $1072;label = 177; break;
  case 177: 
   var $1074;
   var $1075=(($1074) & 255);
   var $1076=$i;
   var $1077=$4;
   var $1078=(($1077+$1076)|0);
   HEAP8[($1078)]=$1075;
   var $1079=$t124;
   var $1080=$1079 & -256;
   var $1081=(($1080)|(0))!=0;
   if ($1081) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $1083=$t124;
   var $1089 = $1083;label = 180; break;
  case 179: 
   var $1085=$t124;
   var $1086=(($1085)|(0)) > 0;
   var $1087=$1086 ? 255 : 0;
   var $1089 = $1087;label = 180; break;
  case 180: 
   var $1089;
   var $1090=(($1089) & 255);
   var $1091=$i;
   var $1092=((($1091)+(1))|0);
   var $1093=$4;
   var $1094=(($1093+$1092)|0);
   HEAP8[($1094)]=$1090;
   var $1095=$6;
   var $1096=$i;
   var $1097=((($1096)+(2))|0);
   var $1098=$_src22;
   var $1099=(($1098+($1097<<1))|0);
   var $1100=HEAP16[(($1099)>>1)];
   var $1101=(($1100)&(65535));
   var $1102=(($1101)|(0));
   var $1103=($1095)*($1102);
   var $1104=$7;
   var $1105=($1103)+($1104);
   var $1106=__Z7cvRoundd($1105);
   $t023=$1106;
   var $1107=$6;
   var $1108=$i;
   var $1109=((($1108)+(3))|0);
   var $1110=$_src22;
   var $1111=(($1110+($1109<<1))|0);
   var $1112=HEAP16[(($1111)>>1)];
   var $1113=(($1112)&(65535));
   var $1114=(($1113)|(0));
   var $1115=($1107)*($1114);
   var $1116=$7;
   var $1117=($1115)+($1116);
   var $1118=__Z7cvRoundd($1117);
   $t124=$1118;
   var $1119=$t023;
   var $1120=$1119 & -256;
   var $1121=(($1120)|(0))!=0;
   if ($1121) { label = 182; break; } else { label = 181; break; }
  case 181: 
   var $1123=$t023;
   var $1129 = $1123;label = 183; break;
  case 182: 
   var $1125=$t023;
   var $1126=(($1125)|(0)) > 0;
   var $1127=$1126 ? 255 : 0;
   var $1129 = $1127;label = 183; break;
  case 183: 
   var $1129;
   var $1130=(($1129) & 255);
   var $1131=$i;
   var $1132=((($1131)+(2))|0);
   var $1133=$4;
   var $1134=(($1133+$1132)|0);
   HEAP8[($1134)]=$1130;
   var $1135=$t124;
   var $1136=$1135 & -256;
   var $1137=(($1136)|(0))!=0;
   if ($1137) { label = 185; break; } else { label = 184; break; }
  case 184: 
   var $1139=$t124;
   var $1145 = $1139;label = 186; break;
  case 185: 
   var $1141=$t124;
   var $1142=(($1141)|(0)) > 0;
   var $1143=$1142 ? 255 : 0;
   var $1145 = $1143;label = 186; break;
  case 186: 
   var $1145;
   var $1146=(($1145) & 255);
   var $1147=$i;
   var $1148=((($1147)+(3))|0);
   var $1149=$4;
   var $1150=(($1149+$1148)|0);
   HEAP8[($1150)]=$1146;
   label = 187; break;
  case 187: 
   var $1152=$i;
   var $1153=((($1152)+(4))|0);
   $i=$1153;
   label = 173; break;
  case 188: 
   label = 189; break;
  case 189: 
   var $1156=$i;
   var $1157=(($size)|0);
   var $1158=HEAP32[(($1157)>>2)];
   var $1159=(($1156)|(0)) < (($1158)|(0));
   if ($1159) { label = 190; break; } else { label = 195; break; }
  case 190: 
   var $1161=$6;
   var $1162=$i;
   var $1163=$_src22;
   var $1164=(($1163+($1162<<1))|0);
   var $1165=HEAP16[(($1164)>>1)];
   var $1166=(($1165)&(65535));
   var $1167=(($1166)|(0));
   var $1168=($1161)*($1167);
   var $1169=$7;
   var $1170=($1168)+($1169);
   var $1171=__Z7cvRoundd($1170);
   $t025=$1171;
   var $1172=$t025;
   var $1173=$1172 & -256;
   var $1174=(($1173)|(0))!=0;
   if ($1174) { label = 192; break; } else { label = 191; break; }
  case 191: 
   var $1176=$t025;
   var $1182 = $1176;label = 193; break;
  case 192: 
   var $1178=$t025;
   var $1179=(($1178)|(0)) > 0;
   var $1180=$1179 ? 255 : 0;
   var $1182 = $1180;label = 193; break;
  case 193: 
   var $1182;
   var $1183=(($1182) & 255);
   var $1184=$i;
   var $1185=$4;
   var $1186=(($1185+$1184)|0);
   HEAP8[($1186)]=$1183;
   label = 194; break;
  case 194: 
   var $1188=$i;
   var $1189=((($1188)+(1))|0);
   $i=$1189;
   label = 189; break;
  case 195: 
   label = 196; break;
  case 196: 
   var $1192=$3;
   var $1193=$_src22;
   var $1194=(($1193+($1192<<1))|0);
   $_src22=$1194;
   var $1195=$5;
   var $1196=$4;
   var $1197=(($1196+$1195)|0);
   $4=$1197;
   label = 171; break;
  case 197: 
   label = 198; break;
  case 198: 
   label = 343; break;
  case 199: 
   var $1201=$6;
   var $1202=Math.abs($1201);
   var $1203=$1202 <= 1;
   if ($1203) { label = 200; break; } else { label = 229; break; }
  case 200: 
   var $1205=$7;
   var $1206=Math.abs($1205);
   var $1207=$1206 <= 32767.99998474121;
   if ($1207) { label = 201; break; } else { label = 229; break; }
  case 201: 
   var $1209=$6;
   var $1210=($1209)*(32768);
   var $1211=__Z7cvRoundd($1210);
   $iscale26=$1211;
   var $1212=$7;
   var $1213=($1212)*(32768);
   var $1214=__Z7cvRoundd($1213);
   $ishift27=$1214;
   var $1215=$2;
   var $1216=$1215;
   $_src28=$1216;
   var $1217=$3;
   var $1218=((((($1217)>>>(0)))/(2))&-1);
   $3=$1218;
   label = 202; break;
  case 202: 
   var $1220=(($size+4)|0);
   var $1221=HEAP32[(($1220)>>2)];
   var $1222=((($1221)-(1))|0);
   HEAP32[(($1220)>>2)]=$1222;
   var $1223=(($1221)|(0))!=0;
   if ($1223) { label = 203; break; } else { label = 228; break; }
  case 203: 
   $i=0;
   label = 204; break;
  case 204: 
   var $1226=$i;
   var $1227=(($size)|0);
   var $1228=HEAP32[(($1227)>>2)];
   var $1229=((($1228)-(4))|0);
   var $1230=(($1226)|(0)) <= (($1229)|(0));
   if ($1230) { label = 205; break; } else { label = 219; break; }
  case 205: 
   var $1232=$iscale26;
   var $1233=$i;
   var $1234=$_src28;
   var $1235=(($1234+($1233<<1))|0);
   var $1236=HEAP16[(($1235)>>1)];
   var $1237=(($1236 << 16) >> 16);
   var $1238=(Math.imul($1232,$1237)|0);
   var $1239=$ishift27;
   var $1240=((($1238)+($1239))|0);
   var $1241=((($1240)+(16384))|0);
   var $1242=$1241 >> 15;
   $t029=$1242;
   var $1243=$iscale26;
   var $1244=$i;
   var $1245=((($1244)+(1))|0);
   var $1246=$_src28;
   var $1247=(($1246+($1245<<1))|0);
   var $1248=HEAP16[(($1247)>>1)];
   var $1249=(($1248 << 16) >> 16);
   var $1250=(Math.imul($1243,$1249)|0);
   var $1251=$ishift27;
   var $1252=((($1250)+($1251))|0);
   var $1253=((($1252)+(16384))|0);
   var $1254=$1253 >> 15;
   $t130=$1254;
   var $1255=$t029;
   var $1256=$1255 & -256;
   var $1257=(($1256)|(0))!=0;
   if ($1257) { label = 207; break; } else { label = 206; break; }
  case 206: 
   var $1259=$t029;
   var $1265 = $1259;label = 208; break;
  case 207: 
   var $1261=$t029;
   var $1262=(($1261)|(0)) > 0;
   var $1263=$1262 ? 255 : 0;
   var $1265 = $1263;label = 208; break;
  case 208: 
   var $1265;
   var $1266=(($1265) & 255);
   var $1267=$i;
   var $1268=$4;
   var $1269=(($1268+$1267)|0);
   HEAP8[($1269)]=$1266;
   var $1270=$t130;
   var $1271=$1270 & -256;
   var $1272=(($1271)|(0))!=0;
   if ($1272) { label = 210; break; } else { label = 209; break; }
  case 209: 
   var $1274=$t130;
   var $1280 = $1274;label = 211; break;
  case 210: 
   var $1276=$t130;
   var $1277=(($1276)|(0)) > 0;
   var $1278=$1277 ? 255 : 0;
   var $1280 = $1278;label = 211; break;
  case 211: 
   var $1280;
   var $1281=(($1280) & 255);
   var $1282=$i;
   var $1283=((($1282)+(1))|0);
   var $1284=$4;
   var $1285=(($1284+$1283)|0);
   HEAP8[($1285)]=$1281;
   var $1286=$iscale26;
   var $1287=$i;
   var $1288=((($1287)+(2))|0);
   var $1289=$_src28;
   var $1290=(($1289+($1288<<1))|0);
   var $1291=HEAP16[(($1290)>>1)];
   var $1292=(($1291 << 16) >> 16);
   var $1293=(Math.imul($1286,$1292)|0);
   var $1294=$ishift27;
   var $1295=((($1293)+($1294))|0);
   var $1296=((($1295)+(16384))|0);
   var $1297=$1296 >> 15;
   $t029=$1297;
   var $1298=$iscale26;
   var $1299=$i;
   var $1300=((($1299)+(3))|0);
   var $1301=$_src28;
   var $1302=(($1301+($1300<<1))|0);
   var $1303=HEAP16[(($1302)>>1)];
   var $1304=(($1303 << 16) >> 16);
   var $1305=(Math.imul($1298,$1304)|0);
   var $1306=$ishift27;
   var $1307=((($1305)+($1306))|0);
   var $1308=((($1307)+(16384))|0);
   var $1309=$1308 >> 15;
   $t130=$1309;
   var $1310=$t029;
   var $1311=$1310 & -256;
   var $1312=(($1311)|(0))!=0;
   if ($1312) { label = 213; break; } else { label = 212; break; }
  case 212: 
   var $1314=$t029;
   var $1320 = $1314;label = 214; break;
  case 213: 
   var $1316=$t029;
   var $1317=(($1316)|(0)) > 0;
   var $1318=$1317 ? 255 : 0;
   var $1320 = $1318;label = 214; break;
  case 214: 
   var $1320;
   var $1321=(($1320) & 255);
   var $1322=$i;
   var $1323=((($1322)+(2))|0);
   var $1324=$4;
   var $1325=(($1324+$1323)|0);
   HEAP8[($1325)]=$1321;
   var $1326=$t130;
   var $1327=$1326 & -256;
   var $1328=(($1327)|(0))!=0;
   if ($1328) { label = 216; break; } else { label = 215; break; }
  case 215: 
   var $1330=$t130;
   var $1336 = $1330;label = 217; break;
  case 216: 
   var $1332=$t130;
   var $1333=(($1332)|(0)) > 0;
   var $1334=$1333 ? 255 : 0;
   var $1336 = $1334;label = 217; break;
  case 217: 
   var $1336;
   var $1337=(($1336) & 255);
   var $1338=$i;
   var $1339=((($1338)+(3))|0);
   var $1340=$4;
   var $1341=(($1340+$1339)|0);
   HEAP8[($1341)]=$1337;
   label = 218; break;
  case 218: 
   var $1343=$i;
   var $1344=((($1343)+(4))|0);
   $i=$1344;
   label = 204; break;
  case 219: 
   label = 220; break;
  case 220: 
   var $1347=$i;
   var $1348=(($size)|0);
   var $1349=HEAP32[(($1348)>>2)];
   var $1350=(($1347)|(0)) < (($1349)|(0));
   if ($1350) { label = 221; break; } else { label = 226; break; }
  case 221: 
   var $1352=$iscale26;
   var $1353=$i;
   var $1354=$_src28;
   var $1355=(($1354+($1353<<1))|0);
   var $1356=HEAP16[(($1355)>>1)];
   var $1357=(($1356 << 16) >> 16);
   var $1358=(Math.imul($1352,$1357)|0);
   var $1359=$ishift27;
   var $1360=((($1358)+($1359))|0);
   var $1361=((($1360)+(16384))|0);
   var $1362=$1361 >> 15;
   $t031=$1362;
   var $1363=$t031;
   var $1364=$1363 & -256;
   var $1365=(($1364)|(0))!=0;
   if ($1365) { label = 223; break; } else { label = 222; break; }
  case 222: 
   var $1367=$t031;
   var $1373 = $1367;label = 224; break;
  case 223: 
   var $1369=$t031;
   var $1370=(($1369)|(0)) > 0;
   var $1371=$1370 ? 255 : 0;
   var $1373 = $1371;label = 224; break;
  case 224: 
   var $1373;
   var $1374=(($1373) & 255);
   var $1375=$i;
   var $1376=$4;
   var $1377=(($1376+$1375)|0);
   HEAP8[($1377)]=$1374;
   label = 225; break;
  case 225: 
   var $1379=$i;
   var $1380=((($1379)+(1))|0);
   $i=$1380;
   label = 220; break;
  case 226: 
   label = 227; break;
  case 227: 
   var $1383=$3;
   var $1384=$_src28;
   var $1385=(($1384+($1383<<1))|0);
   $_src28=$1385;
   var $1386=$5;
   var $1387=$4;
   var $1388=(($1387+$1386)|0);
   $4=$1388;
   label = 202; break;
  case 228: 
   label = 257; break;
  case 229: 
   var $1391=$2;
   var $1392=$1391;
   $_src32=$1392;
   var $1393=$3;
   var $1394=((((($1393)>>>(0)))/(2))&-1);
   $3=$1394;
   label = 230; break;
  case 230: 
   var $1396=(($size+4)|0);
   var $1397=HEAP32[(($1396)>>2)];
   var $1398=((($1397)-(1))|0);
   HEAP32[(($1396)>>2)]=$1398;
   var $1399=(($1397)|(0))!=0;
   if ($1399) { label = 231; break; } else { label = 256; break; }
  case 231: 
   $i=0;
   label = 232; break;
  case 232: 
   var $1402=$i;
   var $1403=(($size)|0);
   var $1404=HEAP32[(($1403)>>2)];
   var $1405=((($1404)-(4))|0);
   var $1406=(($1402)|(0)) <= (($1405)|(0));
   if ($1406) { label = 233; break; } else { label = 247; break; }
  case 233: 
   var $1408=$6;
   var $1409=$i;
   var $1410=$_src32;
   var $1411=(($1410+($1409<<1))|0);
   var $1412=HEAP16[(($1411)>>1)];
   var $1413=(($1412 << 16) >> 16);
   var $1414=(($1413)|(0));
   var $1415=($1408)*($1414);
   var $1416=$7;
   var $1417=($1415)+($1416);
   var $1418=__Z7cvRoundd($1417);
   $t033=$1418;
   var $1419=$6;
   var $1420=$i;
   var $1421=((($1420)+(1))|0);
   var $1422=$_src32;
   var $1423=(($1422+($1421<<1))|0);
   var $1424=HEAP16[(($1423)>>1)];
   var $1425=(($1424 << 16) >> 16);
   var $1426=(($1425)|(0));
   var $1427=($1419)*($1426);
   var $1428=$7;
   var $1429=($1427)+($1428);
   var $1430=__Z7cvRoundd($1429);
   $t134=$1430;
   var $1431=$t033;
   var $1432=$1431 & -256;
   var $1433=(($1432)|(0))!=0;
   if ($1433) { label = 235; break; } else { label = 234; break; }
  case 234: 
   var $1435=$t033;
   var $1441 = $1435;label = 236; break;
  case 235: 
   var $1437=$t033;
   var $1438=(($1437)|(0)) > 0;
   var $1439=$1438 ? 255 : 0;
   var $1441 = $1439;label = 236; break;
  case 236: 
   var $1441;
   var $1442=(($1441) & 255);
   var $1443=$i;
   var $1444=$4;
   var $1445=(($1444+$1443)|0);
   HEAP8[($1445)]=$1442;
   var $1446=$t134;
   var $1447=$1446 & -256;
   var $1448=(($1447)|(0))!=0;
   if ($1448) { label = 238; break; } else { label = 237; break; }
  case 237: 
   var $1450=$t134;
   var $1456 = $1450;label = 239; break;
  case 238: 
   var $1452=$t134;
   var $1453=(($1452)|(0)) > 0;
   var $1454=$1453 ? 255 : 0;
   var $1456 = $1454;label = 239; break;
  case 239: 
   var $1456;
   var $1457=(($1456) & 255);
   var $1458=$i;
   var $1459=((($1458)+(1))|0);
   var $1460=$4;
   var $1461=(($1460+$1459)|0);
   HEAP8[($1461)]=$1457;
   var $1462=$6;
   var $1463=$i;
   var $1464=((($1463)+(2))|0);
   var $1465=$_src32;
   var $1466=(($1465+($1464<<1))|0);
   var $1467=HEAP16[(($1466)>>1)];
   var $1468=(($1467 << 16) >> 16);
   var $1469=(($1468)|(0));
   var $1470=($1462)*($1469);
   var $1471=$7;
   var $1472=($1470)+($1471);
   var $1473=__Z7cvRoundd($1472);
   $t033=$1473;
   var $1474=$6;
   var $1475=$i;
   var $1476=((($1475)+(3))|0);
   var $1477=$_src32;
   var $1478=(($1477+($1476<<1))|0);
   var $1479=HEAP16[(($1478)>>1)];
   var $1480=(($1479 << 16) >> 16);
   var $1481=(($1480)|(0));
   var $1482=($1474)*($1481);
   var $1483=$7;
   var $1484=($1482)+($1483);
   var $1485=__Z7cvRoundd($1484);
   $t134=$1485;
   var $1486=$t033;
   var $1487=$1486 & -256;
   var $1488=(($1487)|(0))!=0;
   if ($1488) { label = 241; break; } else { label = 240; break; }
  case 240: 
   var $1490=$t033;
   var $1496 = $1490;label = 242; break;
  case 241: 
   var $1492=$t033;
   var $1493=(($1492)|(0)) > 0;
   var $1494=$1493 ? 255 : 0;
   var $1496 = $1494;label = 242; break;
  case 242: 
   var $1496;
   var $1497=(($1496) & 255);
   var $1498=$i;
   var $1499=((($1498)+(2))|0);
   var $1500=$4;
   var $1501=(($1500+$1499)|0);
   HEAP8[($1501)]=$1497;
   var $1502=$t134;
   var $1503=$1502 & -256;
   var $1504=(($1503)|(0))!=0;
   if ($1504) { label = 244; break; } else { label = 243; break; }
  case 243: 
   var $1506=$t134;
   var $1512 = $1506;label = 245; break;
  case 244: 
   var $1508=$t134;
   var $1509=(($1508)|(0)) > 0;
   var $1510=$1509 ? 255 : 0;
   var $1512 = $1510;label = 245; break;
  case 245: 
   var $1512;
   var $1513=(($1512) & 255);
   var $1514=$i;
   var $1515=((($1514)+(3))|0);
   var $1516=$4;
   var $1517=(($1516+$1515)|0);
   HEAP8[($1517)]=$1513;
   label = 246; break;
  case 246: 
   var $1519=$i;
   var $1520=((($1519)+(4))|0);
   $i=$1520;
   label = 232; break;
  case 247: 
   label = 248; break;
  case 248: 
   var $1523=$i;
   var $1524=(($size)|0);
   var $1525=HEAP32[(($1524)>>2)];
   var $1526=(($1523)|(0)) < (($1525)|(0));
   if ($1526) { label = 249; break; } else { label = 254; break; }
  case 249: 
   var $1528=$6;
   var $1529=$i;
   var $1530=$_src32;
   var $1531=(($1530+($1529<<1))|0);
   var $1532=HEAP16[(($1531)>>1)];
   var $1533=(($1532 << 16) >> 16);
   var $1534=(($1533)|(0));
   var $1535=($1528)*($1534);
   var $1536=$7;
   var $1537=($1535)+($1536);
   var $1538=__Z7cvRoundd($1537);
   $t035=$1538;
   var $1539=$t035;
   var $1540=$1539 & -256;
   var $1541=(($1540)|(0))!=0;
   if ($1541) { label = 251; break; } else { label = 250; break; }
  case 250: 
   var $1543=$t035;
   var $1549 = $1543;label = 252; break;
  case 251: 
   var $1545=$t035;
   var $1546=(($1545)|(0)) > 0;
   var $1547=$1546 ? 255 : 0;
   var $1549 = $1547;label = 252; break;
  case 252: 
   var $1549;
   var $1550=(($1549) & 255);
   var $1551=$i;
   var $1552=$4;
   var $1553=(($1552+$1551)|0);
   HEAP8[($1553)]=$1550;
   label = 253; break;
  case 253: 
   var $1555=$i;
   var $1556=((($1555)+(1))|0);
   $i=$1556;
   label = 248; break;
  case 254: 
   label = 255; break;
  case 255: 
   var $1559=$3;
   var $1560=$_src32;
   var $1561=(($1560+($1559<<1))|0);
   $_src32=$1561;
   var $1562=$5;
   var $1563=$4;
   var $1564=(($1563+$1562)|0);
   $4=$1564;
   label = 230; break;
  case 256: 
   label = 257; break;
  case 257: 
   label = 343; break;
  case 258: 
   var $1568=$2;
   var $1569=$1568;
   $_src36=$1569;
   var $1570=$3;
   var $1571=((((($1570)>>>(0)))/(4))&-1);
   $3=$1571;
   label = 259; break;
  case 259: 
   var $1573=(($size+4)|0);
   var $1574=HEAP32[(($1573)>>2)];
   var $1575=((($1574)-(1))|0);
   HEAP32[(($1573)>>2)]=$1575;
   var $1576=(($1574)|(0))!=0;
   if ($1576) { label = 260; break; } else { label = 285; break; }
  case 260: 
   $i=0;
   label = 261; break;
  case 261: 
   var $1579=$i;
   var $1580=(($size)|0);
   var $1581=HEAP32[(($1580)>>2)];
   var $1582=((($1581)-(4))|0);
   var $1583=(($1579)|(0)) <= (($1582)|(0));
   if ($1583) { label = 262; break; } else { label = 276; break; }
  case 262: 
   var $1585=$6;
   var $1586=$i;
   var $1587=$_src36;
   var $1588=(($1587+($1586<<2))|0);
   var $1589=HEAP32[(($1588)>>2)];
   var $1590=(($1589)|(0));
   var $1591=($1585)*($1590);
   var $1592=$7;
   var $1593=($1591)+($1592);
   var $1594=__Z7cvRoundd($1593);
   $t037=$1594;
   var $1595=$6;
   var $1596=$i;
   var $1597=((($1596)+(1))|0);
   var $1598=$_src36;
   var $1599=(($1598+($1597<<2))|0);
   var $1600=HEAP32[(($1599)>>2)];
   var $1601=(($1600)|(0));
   var $1602=($1595)*($1601);
   var $1603=$7;
   var $1604=($1602)+($1603);
   var $1605=__Z7cvRoundd($1604);
   $t138=$1605;
   var $1606=$t037;
   var $1607=$1606 & -256;
   var $1608=(($1607)|(0))!=0;
   if ($1608) { label = 264; break; } else { label = 263; break; }
  case 263: 
   var $1610=$t037;
   var $1616 = $1610;label = 265; break;
  case 264: 
   var $1612=$t037;
   var $1613=(($1612)|(0)) > 0;
   var $1614=$1613 ? 255 : 0;
   var $1616 = $1614;label = 265; break;
  case 265: 
   var $1616;
   var $1617=(($1616) & 255);
   var $1618=$i;
   var $1619=$4;
   var $1620=(($1619+$1618)|0);
   HEAP8[($1620)]=$1617;
   var $1621=$t138;
   var $1622=$1621 & -256;
   var $1623=(($1622)|(0))!=0;
   if ($1623) { label = 267; break; } else { label = 266; break; }
  case 266: 
   var $1625=$t138;
   var $1631 = $1625;label = 268; break;
  case 267: 
   var $1627=$t138;
   var $1628=(($1627)|(0)) > 0;
   var $1629=$1628 ? 255 : 0;
   var $1631 = $1629;label = 268; break;
  case 268: 
   var $1631;
   var $1632=(($1631) & 255);
   var $1633=$i;
   var $1634=((($1633)+(1))|0);
   var $1635=$4;
   var $1636=(($1635+$1634)|0);
   HEAP8[($1636)]=$1632;
   var $1637=$6;
   var $1638=$i;
   var $1639=((($1638)+(2))|0);
   var $1640=$_src36;
   var $1641=(($1640+($1639<<2))|0);
   var $1642=HEAP32[(($1641)>>2)];
   var $1643=(($1642)|(0));
   var $1644=($1637)*($1643);
   var $1645=$7;
   var $1646=($1644)+($1645);
   var $1647=__Z7cvRoundd($1646);
   $t037=$1647;
   var $1648=$6;
   var $1649=$i;
   var $1650=((($1649)+(3))|0);
   var $1651=$_src36;
   var $1652=(($1651+($1650<<2))|0);
   var $1653=HEAP32[(($1652)>>2)];
   var $1654=(($1653)|(0));
   var $1655=($1648)*($1654);
   var $1656=$7;
   var $1657=($1655)+($1656);
   var $1658=__Z7cvRoundd($1657);
   $t138=$1658;
   var $1659=$t037;
   var $1660=$1659 & -256;
   var $1661=(($1660)|(0))!=0;
   if ($1661) { label = 270; break; } else { label = 269; break; }
  case 269: 
   var $1663=$t037;
   var $1669 = $1663;label = 271; break;
  case 270: 
   var $1665=$t037;
   var $1666=(($1665)|(0)) > 0;
   var $1667=$1666 ? 255 : 0;
   var $1669 = $1667;label = 271; break;
  case 271: 
   var $1669;
   var $1670=(($1669) & 255);
   var $1671=$i;
   var $1672=((($1671)+(2))|0);
   var $1673=$4;
   var $1674=(($1673+$1672)|0);
   HEAP8[($1674)]=$1670;
   var $1675=$t138;
   var $1676=$1675 & -256;
   var $1677=(($1676)|(0))!=0;
   if ($1677) { label = 273; break; } else { label = 272; break; }
  case 272: 
   var $1679=$t138;
   var $1685 = $1679;label = 274; break;
  case 273: 
   var $1681=$t138;
   var $1682=(($1681)|(0)) > 0;
   var $1683=$1682 ? 255 : 0;
   var $1685 = $1683;label = 274; break;
  case 274: 
   var $1685;
   var $1686=(($1685) & 255);
   var $1687=$i;
   var $1688=((($1687)+(3))|0);
   var $1689=$4;
   var $1690=(($1689+$1688)|0);
   HEAP8[($1690)]=$1686;
   label = 275; break;
  case 275: 
   var $1692=$i;
   var $1693=((($1692)+(4))|0);
   $i=$1693;
   label = 261; break;
  case 276: 
   label = 277; break;
  case 277: 
   var $1696=$i;
   var $1697=(($size)|0);
   var $1698=HEAP32[(($1697)>>2)];
   var $1699=(($1696)|(0)) < (($1698)|(0));
   if ($1699) { label = 278; break; } else { label = 283; break; }
  case 278: 
   var $1701=$6;
   var $1702=$i;
   var $1703=$_src36;
   var $1704=(($1703+($1702<<2))|0);
   var $1705=HEAP32[(($1704)>>2)];
   var $1706=(($1705)|(0));
   var $1707=($1701)*($1706);
   var $1708=$7;
   var $1709=($1707)+($1708);
   var $1710=__Z7cvRoundd($1709);
   $t039=$1710;
   var $1711=$t039;
   var $1712=$1711 & -256;
   var $1713=(($1712)|(0))!=0;
   if ($1713) { label = 280; break; } else { label = 279; break; }
  case 279: 
   var $1715=$t039;
   var $1721 = $1715;label = 281; break;
  case 280: 
   var $1717=$t039;
   var $1718=(($1717)|(0)) > 0;
   var $1719=$1718 ? 255 : 0;
   var $1721 = $1719;label = 281; break;
  case 281: 
   var $1721;
   var $1722=(($1721) & 255);
   var $1723=$i;
   var $1724=$4;
   var $1725=(($1724+$1723)|0);
   HEAP8[($1725)]=$1722;
   label = 282; break;
  case 282: 
   var $1727=$i;
   var $1728=((($1727)+(1))|0);
   $i=$1728;
   label = 277; break;
  case 283: 
   label = 284; break;
  case 284: 
   var $1731=$3;
   var $1732=$_src36;
   var $1733=(($1732+($1731<<2))|0);
   $_src36=$1733;
   var $1734=$5;
   var $1735=$4;
   var $1736=(($1735+$1734)|0);
   $4=$1736;
   label = 259; break;
  case 285: 
   label = 343; break;
  case 286: 
   var $1739=$2;
   var $1740=$1739;
   $_src40=$1740;
   var $1741=$3;
   var $1742=((((($1741)>>>(0)))/(4))&-1);
   $3=$1742;
   label = 287; break;
  case 287: 
   var $1744=(($size+4)|0);
   var $1745=HEAP32[(($1744)>>2)];
   var $1746=((($1745)-(1))|0);
   HEAP32[(($1744)>>2)]=$1746;
   var $1747=(($1745)|(0))!=0;
   if ($1747) { label = 288; break; } else { label = 313; break; }
  case 288: 
   $i=0;
   label = 289; break;
  case 289: 
   var $1750=$i;
   var $1751=(($size)|0);
   var $1752=HEAP32[(($1751)>>2)];
   var $1753=((($1752)-(4))|0);
   var $1754=(($1750)|(0)) <= (($1753)|(0));
   if ($1754) { label = 290; break; } else { label = 304; break; }
  case 290: 
   var $1756=$6;
   var $1757=$i;
   var $1758=$_src40;
   var $1759=(($1758+($1757<<2))|0);
   var $1760=HEAPF32[(($1759)>>2)];
   var $1761=$1760;
   var $1762=($1756)*($1761);
   var $1763=$7;
   var $1764=($1762)+($1763);
   var $1765=__Z7cvRoundd($1764);
   $t041=$1765;
   var $1766=$6;
   var $1767=$i;
   var $1768=((($1767)+(1))|0);
   var $1769=$_src40;
   var $1770=(($1769+($1768<<2))|0);
   var $1771=HEAPF32[(($1770)>>2)];
   var $1772=$1771;
   var $1773=($1766)*($1772);
   var $1774=$7;
   var $1775=($1773)+($1774);
   var $1776=__Z7cvRoundd($1775);
   $t142=$1776;
   var $1777=$t041;
   var $1778=$1777 & -256;
   var $1779=(($1778)|(0))!=0;
   if ($1779) { label = 292; break; } else { label = 291; break; }
  case 291: 
   var $1781=$t041;
   var $1787 = $1781;label = 293; break;
  case 292: 
   var $1783=$t041;
   var $1784=(($1783)|(0)) > 0;
   var $1785=$1784 ? 255 : 0;
   var $1787 = $1785;label = 293; break;
  case 293: 
   var $1787;
   var $1788=(($1787) & 255);
   var $1789=$i;
   var $1790=$4;
   var $1791=(($1790+$1789)|0);
   HEAP8[($1791)]=$1788;
   var $1792=$t142;
   var $1793=$1792 & -256;
   var $1794=(($1793)|(0))!=0;
   if ($1794) { label = 295; break; } else { label = 294; break; }
  case 294: 
   var $1796=$t142;
   var $1802 = $1796;label = 296; break;
  case 295: 
   var $1798=$t142;
   var $1799=(($1798)|(0)) > 0;
   var $1800=$1799 ? 255 : 0;
   var $1802 = $1800;label = 296; break;
  case 296: 
   var $1802;
   var $1803=(($1802) & 255);
   var $1804=$i;
   var $1805=((($1804)+(1))|0);
   var $1806=$4;
   var $1807=(($1806+$1805)|0);
   HEAP8[($1807)]=$1803;
   var $1808=$6;
   var $1809=$i;
   var $1810=((($1809)+(2))|0);
   var $1811=$_src40;
   var $1812=(($1811+($1810<<2))|0);
   var $1813=HEAPF32[(($1812)>>2)];
   var $1814=$1813;
   var $1815=($1808)*($1814);
   var $1816=$7;
   var $1817=($1815)+($1816);
   var $1818=__Z7cvRoundd($1817);
   $t041=$1818;
   var $1819=$6;
   var $1820=$i;
   var $1821=((($1820)+(3))|0);
   var $1822=$_src40;
   var $1823=(($1822+($1821<<2))|0);
   var $1824=HEAPF32[(($1823)>>2)];
   var $1825=$1824;
   var $1826=($1819)*($1825);
   var $1827=$7;
   var $1828=($1826)+($1827);
   var $1829=__Z7cvRoundd($1828);
   $t142=$1829;
   var $1830=$t041;
   var $1831=$1830 & -256;
   var $1832=(($1831)|(0))!=0;
   if ($1832) { label = 298; break; } else { label = 297; break; }
  case 297: 
   var $1834=$t041;
   var $1840 = $1834;label = 299; break;
  case 298: 
   var $1836=$t041;
   var $1837=(($1836)|(0)) > 0;
   var $1838=$1837 ? 255 : 0;
   var $1840 = $1838;label = 299; break;
  case 299: 
   var $1840;
   var $1841=(($1840) & 255);
   var $1842=$i;
   var $1843=((($1842)+(2))|0);
   var $1844=$4;
   var $1845=(($1844+$1843)|0);
   HEAP8[($1845)]=$1841;
   var $1846=$t142;
   var $1847=$1846 & -256;
   var $1848=(($1847)|(0))!=0;
   if ($1848) { label = 301; break; } else { label = 300; break; }
  case 300: 
   var $1850=$t142;
   var $1856 = $1850;label = 302; break;
  case 301: 
   var $1852=$t142;
   var $1853=(($1852)|(0)) > 0;
   var $1854=$1853 ? 255 : 0;
   var $1856 = $1854;label = 302; break;
  case 302: 
   var $1856;
   var $1857=(($1856) & 255);
   var $1858=$i;
   var $1859=((($1858)+(3))|0);
   var $1860=$4;
   var $1861=(($1860+$1859)|0);
   HEAP8[($1861)]=$1857;
   label = 303; break;
  case 303: 
   var $1863=$i;
   var $1864=((($1863)+(4))|0);
   $i=$1864;
   label = 289; break;
  case 304: 
   label = 305; break;
  case 305: 
   var $1867=$i;
   var $1868=(($size)|0);
   var $1869=HEAP32[(($1868)>>2)];
   var $1870=(($1867)|(0)) < (($1869)|(0));
   if ($1870) { label = 306; break; } else { label = 311; break; }
  case 306: 
   var $1872=$6;
   var $1873=$i;
   var $1874=$_src40;
   var $1875=(($1874+($1873<<2))|0);
   var $1876=HEAPF32[(($1875)>>2)];
   var $1877=$1876;
   var $1878=($1872)*($1877);
   var $1879=$7;
   var $1880=($1878)+($1879);
   var $1881=__Z7cvRoundd($1880);
   $t043=$1881;
   var $1882=$t043;
   var $1883=$1882 & -256;
   var $1884=(($1883)|(0))!=0;
   if ($1884) { label = 308; break; } else { label = 307; break; }
  case 307: 
   var $1886=$t043;
   var $1892 = $1886;label = 309; break;
  case 308: 
   var $1888=$t043;
   var $1889=(($1888)|(0)) > 0;
   var $1890=$1889 ? 255 : 0;
   var $1892 = $1890;label = 309; break;
  case 309: 
   var $1892;
   var $1893=(($1892) & 255);
   var $1894=$i;
   var $1895=$4;
   var $1896=(($1895+$1894)|0);
   HEAP8[($1896)]=$1893;
   label = 310; break;
  case 310: 
   var $1898=$i;
   var $1899=((($1898)+(1))|0);
   $i=$1899;
   label = 305; break;
  case 311: 
   label = 312; break;
  case 312: 
   var $1902=$3;
   var $1903=$_src40;
   var $1904=(($1903+($1902<<2))|0);
   $_src40=$1904;
   var $1905=$5;
   var $1906=$4;
   var $1907=(($1906+$1905)|0);
   $4=$1907;
   label = 287; break;
  case 313: 
   label = 343; break;
  case 314: 
   var $1910=$2;
   var $1911=$1910;
   $_src44=$1911;
   var $1912=$3;
   var $1913=((((($1912)>>>(0)))/(8))&-1);
   $3=$1913;
   label = 315; break;
  case 315: 
   var $1915=(($size+4)|0);
   var $1916=HEAP32[(($1915)>>2)];
   var $1917=((($1916)-(1))|0);
   HEAP32[(($1915)>>2)]=$1917;
   var $1918=(($1916)|(0))!=0;
   if ($1918) { label = 316; break; } else { label = 341; break; }
  case 316: 
   $i=0;
   label = 317; break;
  case 317: 
   var $1921=$i;
   var $1922=(($size)|0);
   var $1923=HEAP32[(($1922)>>2)];
   var $1924=((($1923)-(4))|0);
   var $1925=(($1921)|(0)) <= (($1924)|(0));
   if ($1925) { label = 318; break; } else { label = 332; break; }
  case 318: 
   var $1927=$6;
   var $1928=$i;
   var $1929=$_src44;
   var $1930=(($1929+($1928<<3))|0);
   var $1931=HEAPF64[(($1930)>>3)];
   var $1932=($1927)*($1931);
   var $1933=$7;
   var $1934=($1932)+($1933);
   var $1935=__Z7cvRoundd($1934);
   $t045=$1935;
   var $1936=$6;
   var $1937=$i;
   var $1938=((($1937)+(1))|0);
   var $1939=$_src44;
   var $1940=(($1939+($1938<<3))|0);
   var $1941=HEAPF64[(($1940)>>3)];
   var $1942=($1936)*($1941);
   var $1943=$7;
   var $1944=($1942)+($1943);
   var $1945=__Z7cvRoundd($1944);
   $t146=$1945;
   var $1946=$t045;
   var $1947=$1946 & -256;
   var $1948=(($1947)|(0))!=0;
   if ($1948) { label = 320; break; } else { label = 319; break; }
  case 319: 
   var $1950=$t045;
   var $1956 = $1950;label = 321; break;
  case 320: 
   var $1952=$t045;
   var $1953=(($1952)|(0)) > 0;
   var $1954=$1953 ? 255 : 0;
   var $1956 = $1954;label = 321; break;
  case 321: 
   var $1956;
   var $1957=(($1956) & 255);
   var $1958=$i;
   var $1959=$4;
   var $1960=(($1959+$1958)|0);
   HEAP8[($1960)]=$1957;
   var $1961=$t146;
   var $1962=$1961 & -256;
   var $1963=(($1962)|(0))!=0;
   if ($1963) { label = 323; break; } else { label = 322; break; }
  case 322: 
   var $1965=$t146;
   var $1971 = $1965;label = 324; break;
  case 323: 
   var $1967=$t146;
   var $1968=(($1967)|(0)) > 0;
   var $1969=$1968 ? 255 : 0;
   var $1971 = $1969;label = 324; break;
  case 324: 
   var $1971;
   var $1972=(($1971) & 255);
   var $1973=$i;
   var $1974=((($1973)+(1))|0);
   var $1975=$4;
   var $1976=(($1975+$1974)|0);
   HEAP8[($1976)]=$1972;
   var $1977=$6;
   var $1978=$i;
   var $1979=((($1978)+(2))|0);
   var $1980=$_src44;
   var $1981=(($1980+($1979<<3))|0);
   var $1982=HEAPF64[(($1981)>>3)];
   var $1983=($1977)*($1982);
   var $1984=$7;
   var $1985=($1983)+($1984);
   var $1986=__Z7cvRoundd($1985);
   $t045=$1986;
   var $1987=$6;
   var $1988=$i;
   var $1989=((($1988)+(3))|0);
   var $1990=$_src44;
   var $1991=(($1990+($1989<<3))|0);
   var $1992=HEAPF64[(($1991)>>3)];
   var $1993=($1987)*($1992);
   var $1994=$7;
   var $1995=($1993)+($1994);
   var $1996=__Z7cvRoundd($1995);
   $t146=$1996;
   var $1997=$t045;
   var $1998=$1997 & -256;
   var $1999=(($1998)|(0))!=0;
   if ($1999) { label = 326; break; } else { label = 325; break; }
  case 325: 
   var $2001=$t045;
   var $2007 = $2001;label = 327; break;
  case 326: 
   var $2003=$t045;
   var $2004=(($2003)|(0)) > 0;
   var $2005=$2004 ? 255 : 0;
   var $2007 = $2005;label = 327; break;
  case 327: 
   var $2007;
   var $2008=(($2007) & 255);
   var $2009=$i;
   var $2010=((($2009)+(2))|0);
   var $2011=$4;
   var $2012=(($2011+$2010)|0);
   HEAP8[($2012)]=$2008;
   var $2013=$t146;
   var $2014=$2013 & -256;
   var $2015=(($2014)|(0))!=0;
   if ($2015) { label = 329; break; } else { label = 328; break; }
  case 328: 
   var $2017=$t146;
   var $2023 = $2017;label = 330; break;
  case 329: 
   var $2019=$t146;
   var $2020=(($2019)|(0)) > 0;
   var $2021=$2020 ? 255 : 0;
   var $2023 = $2021;label = 330; break;
  case 330: 
   var $2023;
   var $2024=(($2023) & 255);
   var $2025=$i;
   var $2026=((($2025)+(3))|0);
   var $2027=$4;
   var $2028=(($2027+$2026)|0);
   HEAP8[($2028)]=$2024;
   label = 331; break;
  case 331: 
   var $2030=$i;
   var $2031=((($2030)+(4))|0);
   $i=$2031;
   label = 317; break;
  case 332: 
   label = 333; break;
  case 333: 
   var $2034=$i;
   var $2035=(($size)|0);
   var $2036=HEAP32[(($2035)>>2)];
   var $2037=(($2034)|(0)) < (($2036)|(0));
   if ($2037) { label = 334; break; } else { label = 339; break; }
  case 334: 
   var $2039=$6;
   var $2040=$i;
   var $2041=$_src44;
   var $2042=(($2041+($2040<<3))|0);
   var $2043=HEAPF64[(($2042)>>3)];
   var $2044=($2039)*($2043);
   var $2045=$7;
   var $2046=($2044)+($2045);
   var $2047=__Z7cvRoundd($2046);
   $t047=$2047;
   var $2048=$t047;
   var $2049=$2048 & -256;
   var $2050=(($2049)|(0))!=0;
   if ($2050) { label = 336; break; } else { label = 335; break; }
  case 335: 
   var $2052=$t047;
   var $2058 = $2052;label = 337; break;
  case 336: 
   var $2054=$t047;
   var $2055=(($2054)|(0)) > 0;
   var $2056=$2055 ? 255 : 0;
   var $2058 = $2056;label = 337; break;
  case 337: 
   var $2058;
   var $2059=(($2058) & 255);
   var $2060=$i;
   var $2061=$4;
   var $2062=(($2061+$2060)|0);
   HEAP8[($2062)]=$2059;
   label = 338; break;
  case 338: 
   var $2064=$i;
   var $2065=((($2064)+(1))|0);
   $i=$2065;
   label = 333; break;
  case 339: 
   label = 340; break;
  case 340: 
   var $2068=$3;
   var $2069=$_src44;
   var $2070=(($2069+($2068<<3))|0);
   $_src44=$2070;
   var $2071=$5;
   var $2072=$4;
   var $2073=(($2072+$2071)|0);
   $4=$2073;
   label = 315; break;
  case 341: 
   label = 343; break;
  case 342: 
   $1=-12;
   label = 344; break;
  case 343: 
   $1=0;
   label = 344; break;
  case 344: 
   var $2078=$1;
   STACKTOP = sp;
   return $2078;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvCvtScaleTo_8s_C1RPKhiPci6CvSizeddi($src, $srcstep, $dst, $dststep, $size, $scale, $shift, $param) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $i;
   var $srctype;
   var $lut=sp;
   var $val;
   var $t;
   var $9=(sp)+(256);
   var $iscale;
   var $ishift;
   var $_src;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $t03;
   var $t14;
   var $t05;
   var $t6;
   var $10=(sp)+(264);
   var $iscale7;
   var $ishift8;
   var $_src9;
   var $t010;
   var $t111;
   var $t012;
   var $_src13;
   var $t014;
   var $t115;
   var $t016;
   var $iscale17;
   var $_src18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $t023;
   var $t124;
   var $t025;
   var $iscale26;
   var $ishift27;
   var $_src28;
   var $t029;
   var $t130;
   var $t031;
   var $_src32;
   var $t033;
   var $t134;
   var $t035;
   var $_src36;
   var $t037;
   var $t138;
   var $t039;
   var $_src40;
   var $t041;
   var $t142;
   var $t043;
   var $_src44;
   var $t045;
   var $t146;
   var $t047;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$scale;
   $7=$shift;
   $8=$param;
   var $11=$8;
   $srctype=$11;
   var $12=$5;
   var $13=(((($12)>>>(0)))&-1);
   $5=$13;
   var $14=$srctype;
   var $15=$14 & 7;
   if ((($15)|(0))==0) {
    label = 2; break;
   }
   else if ((($15)|(0))==1) {
    label = 71; break;
   }
   else if ((($15)|(0))==2) {
    label = 140; break;
   }
   else if ((($15)|(0))==3) {
    label = 199; break;
   }
   else if ((($15)|(0))==4) {
    label = 258; break;
   }
   else if ((($15)|(0))==5) {
    label = 286; break;
   }
   else if ((($15)|(0))==6) {
    label = 314; break;
   }
   else {
   label = 342; break;
   }
  case 2: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(Math.imul($18,$20)|0);
   var $22=(($21)|(0)) >= 256;
   if ($22) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $24=$7;
   $val=$24;
   $i=0;
   label = 4; break;
  case 4: 
   var $26=$i;
   var $27=(($26)|(0)) < 256;
   if ($27) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $29=$val;
   var $30=__Z7cvRoundd($29);
   $t=$30;
   var $31=$t;
   var $32=((($31)+(128))|0);
   var $33=$32 & -256;
   var $34=(($33)|(0))!=0;
   if ($34) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $36=$t;
   var $42 = $36;label = 8; break;
  case 7: 
   var $38=$t;
   var $39=(($38)|(0)) > 0;
   var $40=$39 ? 127 : -128;
   var $42 = $40;label = 8; break;
  case 8: 
   var $42;
   var $43=(($42) & 255);
   var $44=$i;
   var $45=(($lut+$44)|0);
   HEAP8[($45)]=$43;
   label = 9; break;
  case 9: 
   var $47=$i;
   var $48=((($47)+(1))|0);
   $i=$48;
   var $49=$6;
   var $50=$val;
   var $51=($50)+($49);
   $val=$51;
   label = 4; break;
  case 10: 
   var $53=$2;
   var $54=$3;
   var $55=$4;
   var $56=$5;
   var $57=$56;
   var $58=$9;
   var $59=$size;
   assert(8 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];
   var $60=(($lut)|0);
   var $61=__Z25icvLUT_Transform8u_8s_C1RPKhiPci6CvSizePKc($53, $54, $55, $57, $9, $60);
   label = 70; break;
  case 11: 
   var $63=$6;
   var $64=Math.abs($63);
   var $65=$64 <= 128;
   if ($65) { label = 12; break; } else { label = 41; break; }
  case 12: 
   var $67=$7;
   var $68=Math.abs($67);
   var $69=$68 <= 32767.99998474121;
   if ($69) { label = 13; break; } else { label = 41; break; }
  case 13: 
   var $71=$6;
   var $72=($71)*(32768);
   var $73=__Z7cvRoundd($72);
   $iscale=$73;
   var $74=$7;
   var $75=($74)*(32768);
   var $76=__Z7cvRoundd($75);
   $ishift=$76;
   var $77=$2;
   $_src=$77;
   var $78=$3;
   var $79=(((($78)>>>(0)))&-1);
   $3=$79;
   label = 14; break;
  case 14: 
   var $81=(($size+4)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=((($82)-(1))|0);
   HEAP32[(($81)>>2)]=$83;
   var $84=(($82)|(0))!=0;
   if ($84) { label = 15; break; } else { label = 40; break; }
  case 15: 
   $i=0;
   label = 16; break;
  case 16: 
   var $87=$i;
   var $88=(($size)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=((($89)-(4))|0);
   var $91=(($87)|(0)) <= (($90)|(0));
   if ($91) { label = 17; break; } else { label = 31; break; }
  case 17: 
   var $93=$iscale;
   var $94=$i;
   var $95=$_src;
   var $96=(($95+$94)|0);
   var $97=HEAP8[($96)];
   var $98=(($97)&(255));
   var $99=(Math.imul($93,$98)|0);
   var $100=$ishift;
   var $101=((($99)+($100))|0);
   var $102=((($101)+(16384))|0);
   var $103=$102 >> 15;
   $t0=$103;
   var $104=$iscale;
   var $105=$i;
   var $106=((($105)+(1))|0);
   var $107=$_src;
   var $108=(($107+$106)|0);
   var $109=HEAP8[($108)];
   var $110=(($109)&(255));
   var $111=(Math.imul($104,$110)|0);
   var $112=$ishift;
   var $113=((($111)+($112))|0);
   var $114=((($113)+(16384))|0);
   var $115=$114 >> 15;
   $t1=$115;
   var $116=$t0;
   var $117=((($116)+(128))|0);
   var $118=$117 & -256;
   var $119=(($118)|(0))!=0;
   if ($119) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $121=$t0;
   var $127 = $121;label = 20; break;
  case 19: 
   var $123=$t0;
   var $124=(($123)|(0)) > 0;
   var $125=$124 ? 127 : -128;
   var $127 = $125;label = 20; break;
  case 20: 
   var $127;
   var $128=(($127) & 255);
   var $129=$i;
   var $130=$4;
   var $131=(($130+$129)|0);
   HEAP8[($131)]=$128;
   var $132=$t1;
   var $133=((($132)+(128))|0);
   var $134=$133 & -256;
   var $135=(($134)|(0))!=0;
   if ($135) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $137=$t1;
   var $143 = $137;label = 23; break;
  case 22: 
   var $139=$t1;
   var $140=(($139)|(0)) > 0;
   var $141=$140 ? 127 : -128;
   var $143 = $141;label = 23; break;
  case 23: 
   var $143;
   var $144=(($143) & 255);
   var $145=$i;
   var $146=((($145)+(1))|0);
   var $147=$4;
   var $148=(($147+$146)|0);
   HEAP8[($148)]=$144;
   var $149=$iscale;
   var $150=$i;
   var $151=((($150)+(2))|0);
   var $152=$_src;
   var $153=(($152+$151)|0);
   var $154=HEAP8[($153)];
   var $155=(($154)&(255));
   var $156=(Math.imul($149,$155)|0);
   var $157=$ishift;
   var $158=((($156)+($157))|0);
   var $159=((($158)+(16384))|0);
   var $160=$159 >> 15;
   $t0=$160;
   var $161=$iscale;
   var $162=$i;
   var $163=((($162)+(3))|0);
   var $164=$_src;
   var $165=(($164+$163)|0);
   var $166=HEAP8[($165)];
   var $167=(($166)&(255));
   var $168=(Math.imul($161,$167)|0);
   var $169=$ishift;
   var $170=((($168)+($169))|0);
   var $171=((($170)+(16384))|0);
   var $172=$171 >> 15;
   $t1=$172;
   var $173=$t0;
   var $174=((($173)+(128))|0);
   var $175=$174 & -256;
   var $176=(($175)|(0))!=0;
   if ($176) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $178=$t0;
   var $184 = $178;label = 26; break;
  case 25: 
   var $180=$t0;
   var $181=(($180)|(0)) > 0;
   var $182=$181 ? 127 : -128;
   var $184 = $182;label = 26; break;
  case 26: 
   var $184;
   var $185=(($184) & 255);
   var $186=$i;
   var $187=((($186)+(2))|0);
   var $188=$4;
   var $189=(($188+$187)|0);
   HEAP8[($189)]=$185;
   var $190=$t1;
   var $191=((($190)+(128))|0);
   var $192=$191 & -256;
   var $193=(($192)|(0))!=0;
   if ($193) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $195=$t1;
   var $201 = $195;label = 29; break;
  case 28: 
   var $197=$t1;
   var $198=(($197)|(0)) > 0;
   var $199=$198 ? 127 : -128;
   var $201 = $199;label = 29; break;
  case 29: 
   var $201;
   var $202=(($201) & 255);
   var $203=$i;
   var $204=((($203)+(3))|0);
   var $205=$4;
   var $206=(($205+$204)|0);
   HEAP8[($206)]=$202;
   label = 30; break;
  case 30: 
   var $208=$i;
   var $209=((($208)+(4))|0);
   $i=$209;
   label = 16; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $212=$i;
   var $213=(($size)|0);
   var $214=HEAP32[(($213)>>2)];
   var $215=(($212)|(0)) < (($214)|(0));
   if ($215) { label = 33; break; } else { label = 38; break; }
  case 33: 
   var $217=$iscale;
   var $218=$i;
   var $219=$_src;
   var $220=(($219+$218)|0);
   var $221=HEAP8[($220)];
   var $222=(($221)&(255));
   var $223=(Math.imul($217,$222)|0);
   var $224=$ishift;
   var $225=((($223)+($224))|0);
   var $226=((($225)+(16384))|0);
   var $227=$226 >> 15;
   $t01=$227;
   var $228=$t01;
   var $229=((($228)+(128))|0);
   var $230=$229 & -256;
   var $231=(($230)|(0))!=0;
   if ($231) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $233=$t01;
   var $239 = $233;label = 36; break;
  case 35: 
   var $235=$t01;
   var $236=(($235)|(0)) > 0;
   var $237=$236 ? 127 : -128;
   var $239 = $237;label = 36; break;
  case 36: 
   var $239;
   var $240=(($239) & 255);
   var $241=$i;
   var $242=$4;
   var $243=(($242+$241)|0);
   HEAP8[($243)]=$240;
   label = 37; break;
  case 37: 
   var $245=$i;
   var $246=((($245)+(1))|0);
   $i=$246;
   label = 32; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $249=$3;
   var $250=$_src;
   var $251=(($250+$249)|0);
   $_src=$251;
   var $252=$5;
   var $253=$4;
   var $254=(($253+$252)|0);
   $4=$254;
   label = 14; break;
  case 40: 
   label = 69; break;
  case 41: 
   var $257=$2;
   $_src2=$257;
   var $258=$3;
   var $259=(((($258)>>>(0)))&-1);
   $3=$259;
   label = 42; break;
  case 42: 
   var $261=(($size+4)|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=((($262)-(1))|0);
   HEAP32[(($261)>>2)]=$263;
   var $264=(($262)|(0))!=0;
   if ($264) { label = 43; break; } else { label = 68; break; }
  case 43: 
   $i=0;
   label = 44; break;
  case 44: 
   var $267=$i;
   var $268=(($size)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=((($269)-(4))|0);
   var $271=(($267)|(0)) <= (($270)|(0));
   if ($271) { label = 45; break; } else { label = 59; break; }
  case 45: 
   var $273=$6;
   var $274=$i;
   var $275=$_src2;
   var $276=(($275+$274)|0);
   var $277=HEAP8[($276)];
   var $278=(($277)&(255));
   var $279=(($278)|(0));
   var $280=($273)*($279);
   var $281=$7;
   var $282=($280)+($281);
   var $283=__Z7cvRoundd($282);
   $t03=$283;
   var $284=$6;
   var $285=$i;
   var $286=((($285)+(1))|0);
   var $287=$_src2;
   var $288=(($287+$286)|0);
   var $289=HEAP8[($288)];
   var $290=(($289)&(255));
   var $291=(($290)|(0));
   var $292=($284)*($291);
   var $293=$7;
   var $294=($292)+($293);
   var $295=__Z7cvRoundd($294);
   $t14=$295;
   var $296=$t03;
   var $297=((($296)+(128))|0);
   var $298=$297 & -256;
   var $299=(($298)|(0))!=0;
   if ($299) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $301=$t03;
   var $307 = $301;label = 48; break;
  case 47: 
   var $303=$t03;
   var $304=(($303)|(0)) > 0;
   var $305=$304 ? 127 : -128;
   var $307 = $305;label = 48; break;
  case 48: 
   var $307;
   var $308=(($307) & 255);
   var $309=$i;
   var $310=$4;
   var $311=(($310+$309)|0);
   HEAP8[($311)]=$308;
   var $312=$t14;
   var $313=((($312)+(128))|0);
   var $314=$313 & -256;
   var $315=(($314)|(0))!=0;
   if ($315) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $317=$t14;
   var $323 = $317;label = 51; break;
  case 50: 
   var $319=$t14;
   var $320=(($319)|(0)) > 0;
   var $321=$320 ? 127 : -128;
   var $323 = $321;label = 51; break;
  case 51: 
   var $323;
   var $324=(($323) & 255);
   var $325=$i;
   var $326=((($325)+(1))|0);
   var $327=$4;
   var $328=(($327+$326)|0);
   HEAP8[($328)]=$324;
   var $329=$6;
   var $330=$i;
   var $331=((($330)+(2))|0);
   var $332=$_src2;
   var $333=(($332+$331)|0);
   var $334=HEAP8[($333)];
   var $335=(($334)&(255));
   var $336=(($335)|(0));
   var $337=($329)*($336);
   var $338=$7;
   var $339=($337)+($338);
   var $340=__Z7cvRoundd($339);
   $t03=$340;
   var $341=$6;
   var $342=$i;
   var $343=((($342)+(3))|0);
   var $344=$_src2;
   var $345=(($344+$343)|0);
   var $346=HEAP8[($345)];
   var $347=(($346)&(255));
   var $348=(($347)|(0));
   var $349=($341)*($348);
   var $350=$7;
   var $351=($349)+($350);
   var $352=__Z7cvRoundd($351);
   $t14=$352;
   var $353=$t03;
   var $354=((($353)+(128))|0);
   var $355=$354 & -256;
   var $356=(($355)|(0))!=0;
   if ($356) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $358=$t03;
   var $364 = $358;label = 54; break;
  case 53: 
   var $360=$t03;
   var $361=(($360)|(0)) > 0;
   var $362=$361 ? 127 : -128;
   var $364 = $362;label = 54; break;
  case 54: 
   var $364;
   var $365=(($364) & 255);
   var $366=$i;
   var $367=((($366)+(2))|0);
   var $368=$4;
   var $369=(($368+$367)|0);
   HEAP8[($369)]=$365;
   var $370=$t14;
   var $371=((($370)+(128))|0);
   var $372=$371 & -256;
   var $373=(($372)|(0))!=0;
   if ($373) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $375=$t14;
   var $381 = $375;label = 57; break;
  case 56: 
   var $377=$t14;
   var $378=(($377)|(0)) > 0;
   var $379=$378 ? 127 : -128;
   var $381 = $379;label = 57; break;
  case 57: 
   var $381;
   var $382=(($381) & 255);
   var $383=$i;
   var $384=((($383)+(3))|0);
   var $385=$4;
   var $386=(($385+$384)|0);
   HEAP8[($386)]=$382;
   label = 58; break;
  case 58: 
   var $388=$i;
   var $389=((($388)+(4))|0);
   $i=$389;
   label = 44; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $392=$i;
   var $393=(($size)|0);
   var $394=HEAP32[(($393)>>2)];
   var $395=(($392)|(0)) < (($394)|(0));
   if ($395) { label = 61; break; } else { label = 66; break; }
  case 61: 
   var $397=$6;
   var $398=$i;
   var $399=$_src2;
   var $400=(($399+$398)|0);
   var $401=HEAP8[($400)];
   var $402=(($401)&(255));
   var $403=(($402)|(0));
   var $404=($397)*($403);
   var $405=$7;
   var $406=($404)+($405);
   var $407=__Z7cvRoundd($406);
   $t05=$407;
   var $408=$t05;
   var $409=((($408)+(128))|0);
   var $410=$409 & -256;
   var $411=(($410)|(0))!=0;
   if ($411) { label = 63; break; } else { label = 62; break; }
  case 62: 
   var $413=$t05;
   var $419 = $413;label = 64; break;
  case 63: 
   var $415=$t05;
   var $416=(($415)|(0)) > 0;
   var $417=$416 ? 127 : -128;
   var $419 = $417;label = 64; break;
  case 64: 
   var $419;
   var $420=(($419) & 255);
   var $421=$i;
   var $422=$4;
   var $423=(($422+$421)|0);
   HEAP8[($423)]=$420;
   label = 65; break;
  case 65: 
   var $425=$i;
   var $426=((($425)+(1))|0);
   $i=$426;
   label = 60; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $429=$3;
   var $430=$_src2;
   var $431=(($430+$429)|0);
   $_src2=$431;
   var $432=$5;
   var $433=$4;
   var $434=(($433+$432)|0);
   $4=$434;
   label = 42; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   label = 343; break;
  case 71: 
   var $439=(($size)|0);
   var $440=HEAP32[(($439)>>2)];
   var $441=(($size+4)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=(Math.imul($440,$442)|0);
   var $444=(($443)|(0)) >= 256;
   if ($444) { label = 72; break; } else { label = 80; break; }
  case 72: 
   $i=0;
   label = 73; break;
  case 73: 
   var $447=$i;
   var $448=(($447)|(0)) < 256;
   if ($448) { label = 74; break; } else { label = 79; break; }
  case 74: 
   var $450=$i;
   var $451=(($450) & 255);
   var $452=(($451 << 24) >> 24);
   var $453=(($452)|(0));
   var $454=$6;
   var $455=($453)*($454);
   var $456=$7;
   var $457=($455)+($456);
   var $458=__Z7cvRoundd($457);
   $t6=$458;
   var $459=$t6;
   var $460=((($459)+(128))|0);
   var $461=$460 & -256;
   var $462=(($461)|(0))!=0;
   if ($462) { label = 76; break; } else { label = 75; break; }
  case 75: 
   var $464=$t6;
   var $470 = $464;label = 77; break;
  case 76: 
   var $466=$t6;
   var $467=(($466)|(0)) > 0;
   var $468=$467 ? 127 : -128;
   var $470 = $468;label = 77; break;
  case 77: 
   var $470;
   var $471=(($470) & 255);
   var $472=$i;
   var $473=(($lut+$472)|0);
   HEAP8[($473)]=$471;
   label = 78; break;
  case 78: 
   var $475=$i;
   var $476=((($475)+(1))|0);
   $i=$476;
   label = 73; break;
  case 79: 
   var $478=$2;
   var $479=$3;
   var $480=$4;
   var $481=$5;
   var $482=$481;
   var $483=$10;
   var $484=$size;
   assert(8 % 1 === 0);HEAP32[(($483)>>2)]=HEAP32[(($484)>>2)];HEAP32[((($483)+(4))>>2)]=HEAP32[((($484)+(4))>>2)];
   var $485=(($lut)|0);
   var $486=__Z25icvLUT_Transform8u_8s_C1RPKhiPci6CvSizePKc($478, $479, $480, $482, $10, $485);
   label = 139; break;
  case 80: 
   var $488=$6;
   var $489=Math.abs($488);
   var $490=$489 <= 128;
   if ($490) { label = 81; break; } else { label = 110; break; }
  case 81: 
   var $492=$7;
   var $493=Math.abs($492);
   var $494=$493 <= 32767.99998474121;
   if ($494) { label = 82; break; } else { label = 110; break; }
  case 82: 
   var $496=$6;
   var $497=($496)*(32768);
   var $498=__Z7cvRoundd($497);
   $iscale7=$498;
   var $499=$7;
   var $500=($499)*(32768);
   var $501=__Z7cvRoundd($500);
   $ishift8=$501;
   var $502=$2;
   $_src9=$502;
   var $503=$3;
   var $504=(((($503)>>>(0)))&-1);
   $3=$504;
   label = 83; break;
  case 83: 
   var $506=(($size+4)|0);
   var $507=HEAP32[(($506)>>2)];
   var $508=((($507)-(1))|0);
   HEAP32[(($506)>>2)]=$508;
   var $509=(($507)|(0))!=0;
   if ($509) { label = 84; break; } else { label = 109; break; }
  case 84: 
   $i=0;
   label = 85; break;
  case 85: 
   var $512=$i;
   var $513=(($size)|0);
   var $514=HEAP32[(($513)>>2)];
   var $515=((($514)-(4))|0);
   var $516=(($512)|(0)) <= (($515)|(0));
   if ($516) { label = 86; break; } else { label = 100; break; }
  case 86: 
   var $518=$iscale7;
   var $519=$i;
   var $520=$_src9;
   var $521=(($520+$519)|0);
   var $522=HEAP8[($521)];
   var $523=(($522 << 24) >> 24);
   var $524=(Math.imul($518,$523)|0);
   var $525=$ishift8;
   var $526=((($524)+($525))|0);
   var $527=((($526)+(16384))|0);
   var $528=$527 >> 15;
   $t010=$528;
   var $529=$iscale7;
   var $530=$i;
   var $531=((($530)+(1))|0);
   var $532=$_src9;
   var $533=(($532+$531)|0);
   var $534=HEAP8[($533)];
   var $535=(($534 << 24) >> 24);
   var $536=(Math.imul($529,$535)|0);
   var $537=$ishift8;
   var $538=((($536)+($537))|0);
   var $539=((($538)+(16384))|0);
   var $540=$539 >> 15;
   $t111=$540;
   var $541=$t010;
   var $542=((($541)+(128))|0);
   var $543=$542 & -256;
   var $544=(($543)|(0))!=0;
   if ($544) { label = 88; break; } else { label = 87; break; }
  case 87: 
   var $546=$t010;
   var $552 = $546;label = 89; break;
  case 88: 
   var $548=$t010;
   var $549=(($548)|(0)) > 0;
   var $550=$549 ? 127 : -128;
   var $552 = $550;label = 89; break;
  case 89: 
   var $552;
   var $553=(($552) & 255);
   var $554=$i;
   var $555=$4;
   var $556=(($555+$554)|0);
   HEAP8[($556)]=$553;
   var $557=$t111;
   var $558=((($557)+(128))|0);
   var $559=$558 & -256;
   var $560=(($559)|(0))!=0;
   if ($560) { label = 91; break; } else { label = 90; break; }
  case 90: 
   var $562=$t111;
   var $568 = $562;label = 92; break;
  case 91: 
   var $564=$t111;
   var $565=(($564)|(0)) > 0;
   var $566=$565 ? 127 : -128;
   var $568 = $566;label = 92; break;
  case 92: 
   var $568;
   var $569=(($568) & 255);
   var $570=$i;
   var $571=((($570)+(1))|0);
   var $572=$4;
   var $573=(($572+$571)|0);
   HEAP8[($573)]=$569;
   var $574=$iscale7;
   var $575=$i;
   var $576=((($575)+(2))|0);
   var $577=$_src9;
   var $578=(($577+$576)|0);
   var $579=HEAP8[($578)];
   var $580=(($579 << 24) >> 24);
   var $581=(Math.imul($574,$580)|0);
   var $582=$ishift8;
   var $583=((($581)+($582))|0);
   var $584=((($583)+(16384))|0);
   var $585=$584 >> 15;
   $t010=$585;
   var $586=$iscale7;
   var $587=$i;
   var $588=((($587)+(3))|0);
   var $589=$_src9;
   var $590=(($589+$588)|0);
   var $591=HEAP8[($590)];
   var $592=(($591 << 24) >> 24);
   var $593=(Math.imul($586,$592)|0);
   var $594=$ishift8;
   var $595=((($593)+($594))|0);
   var $596=((($595)+(16384))|0);
   var $597=$596 >> 15;
   $t111=$597;
   var $598=$t010;
   var $599=((($598)+(128))|0);
   var $600=$599 & -256;
   var $601=(($600)|(0))!=0;
   if ($601) { label = 94; break; } else { label = 93; break; }
  case 93: 
   var $603=$t010;
   var $609 = $603;label = 95; break;
  case 94: 
   var $605=$t010;
   var $606=(($605)|(0)) > 0;
   var $607=$606 ? 127 : -128;
   var $609 = $607;label = 95; break;
  case 95: 
   var $609;
   var $610=(($609) & 255);
   var $611=$i;
   var $612=((($611)+(2))|0);
   var $613=$4;
   var $614=(($613+$612)|0);
   HEAP8[($614)]=$610;
   var $615=$t111;
   var $616=((($615)+(128))|0);
   var $617=$616 & -256;
   var $618=(($617)|(0))!=0;
   if ($618) { label = 97; break; } else { label = 96; break; }
  case 96: 
   var $620=$t111;
   var $626 = $620;label = 98; break;
  case 97: 
   var $622=$t111;
   var $623=(($622)|(0)) > 0;
   var $624=$623 ? 127 : -128;
   var $626 = $624;label = 98; break;
  case 98: 
   var $626;
   var $627=(($626) & 255);
   var $628=$i;
   var $629=((($628)+(3))|0);
   var $630=$4;
   var $631=(($630+$629)|0);
   HEAP8[($631)]=$627;
   label = 99; break;
  case 99: 
   var $633=$i;
   var $634=((($633)+(4))|0);
   $i=$634;
   label = 85; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $637=$i;
   var $638=(($size)|0);
   var $639=HEAP32[(($638)>>2)];
   var $640=(($637)|(0)) < (($639)|(0));
   if ($640) { label = 102; break; } else { label = 107; break; }
  case 102: 
   var $642=$iscale7;
   var $643=$i;
   var $644=$_src9;
   var $645=(($644+$643)|0);
   var $646=HEAP8[($645)];
   var $647=(($646 << 24) >> 24);
   var $648=(Math.imul($642,$647)|0);
   var $649=$ishift8;
   var $650=((($648)+($649))|0);
   var $651=((($650)+(16384))|0);
   var $652=$651 >> 15;
   $t012=$652;
   var $653=$t012;
   var $654=((($653)+(128))|0);
   var $655=$654 & -256;
   var $656=(($655)|(0))!=0;
   if ($656) { label = 104; break; } else { label = 103; break; }
  case 103: 
   var $658=$t012;
   var $664 = $658;label = 105; break;
  case 104: 
   var $660=$t012;
   var $661=(($660)|(0)) > 0;
   var $662=$661 ? 127 : -128;
   var $664 = $662;label = 105; break;
  case 105: 
   var $664;
   var $665=(($664) & 255);
   var $666=$i;
   var $667=$4;
   var $668=(($667+$666)|0);
   HEAP8[($668)]=$665;
   label = 106; break;
  case 106: 
   var $670=$i;
   var $671=((($670)+(1))|0);
   $i=$671;
   label = 101; break;
  case 107: 
   label = 108; break;
  case 108: 
   var $674=$3;
   var $675=$_src9;
   var $676=(($675+$674)|0);
   $_src9=$676;
   var $677=$5;
   var $678=$4;
   var $679=(($678+$677)|0);
   $4=$679;
   label = 83; break;
  case 109: 
   label = 138; break;
  case 110: 
   var $682=$2;
   $_src13=$682;
   var $683=$3;
   var $684=(((($683)>>>(0)))&-1);
   $3=$684;
   label = 111; break;
  case 111: 
   var $686=(($size+4)|0);
   var $687=HEAP32[(($686)>>2)];
   var $688=((($687)-(1))|0);
   HEAP32[(($686)>>2)]=$688;
   var $689=(($687)|(0))!=0;
   if ($689) { label = 112; break; } else { label = 137; break; }
  case 112: 
   $i=0;
   label = 113; break;
  case 113: 
   var $692=$i;
   var $693=(($size)|0);
   var $694=HEAP32[(($693)>>2)];
   var $695=((($694)-(4))|0);
   var $696=(($692)|(0)) <= (($695)|(0));
   if ($696) { label = 114; break; } else { label = 128; break; }
  case 114: 
   var $698=$6;
   var $699=$i;
   var $700=$_src13;
   var $701=(($700+$699)|0);
   var $702=HEAP8[($701)];
   var $703=(($702 << 24) >> 24);
   var $704=(($703)|(0));
   var $705=($698)*($704);
   var $706=$7;
   var $707=($705)+($706);
   var $708=__Z7cvRoundd($707);
   $t014=$708;
   var $709=$6;
   var $710=$i;
   var $711=((($710)+(1))|0);
   var $712=$_src13;
   var $713=(($712+$711)|0);
   var $714=HEAP8[($713)];
   var $715=(($714 << 24) >> 24);
   var $716=(($715)|(0));
   var $717=($709)*($716);
   var $718=$7;
   var $719=($717)+($718);
   var $720=__Z7cvRoundd($719);
   $t115=$720;
   var $721=$t014;
   var $722=((($721)+(128))|0);
   var $723=$722 & -256;
   var $724=(($723)|(0))!=0;
   if ($724) { label = 116; break; } else { label = 115; break; }
  case 115: 
   var $726=$t014;
   var $732 = $726;label = 117; break;
  case 116: 
   var $728=$t014;
   var $729=(($728)|(0)) > 0;
   var $730=$729 ? 127 : -128;
   var $732 = $730;label = 117; break;
  case 117: 
   var $732;
   var $733=(($732) & 255);
   var $734=$i;
   var $735=$4;
   var $736=(($735+$734)|0);
   HEAP8[($736)]=$733;
   var $737=$t115;
   var $738=((($737)+(128))|0);
   var $739=$738 & -256;
   var $740=(($739)|(0))!=0;
   if ($740) { label = 119; break; } else { label = 118; break; }
  case 118: 
   var $742=$t115;
   var $748 = $742;label = 120; break;
  case 119: 
   var $744=$t115;
   var $745=(($744)|(0)) > 0;
   var $746=$745 ? 127 : -128;
   var $748 = $746;label = 120; break;
  case 120: 
   var $748;
   var $749=(($748) & 255);
   var $750=$i;
   var $751=((($750)+(1))|0);
   var $752=$4;
   var $753=(($752+$751)|0);
   HEAP8[($753)]=$749;
   var $754=$6;
   var $755=$i;
   var $756=((($755)+(2))|0);
   var $757=$_src13;
   var $758=(($757+$756)|0);
   var $759=HEAP8[($758)];
   var $760=(($759 << 24) >> 24);
   var $761=(($760)|(0));
   var $762=($754)*($761);
   var $763=$7;
   var $764=($762)+($763);
   var $765=__Z7cvRoundd($764);
   $t014=$765;
   var $766=$6;
   var $767=$i;
   var $768=((($767)+(3))|0);
   var $769=$_src13;
   var $770=(($769+$768)|0);
   var $771=HEAP8[($770)];
   var $772=(($771 << 24) >> 24);
   var $773=(($772)|(0));
   var $774=($766)*($773);
   var $775=$7;
   var $776=($774)+($775);
   var $777=__Z7cvRoundd($776);
   $t115=$777;
   var $778=$t014;
   var $779=((($778)+(128))|0);
   var $780=$779 & -256;
   var $781=(($780)|(0))!=0;
   if ($781) { label = 122; break; } else { label = 121; break; }
  case 121: 
   var $783=$t014;
   var $789 = $783;label = 123; break;
  case 122: 
   var $785=$t014;
   var $786=(($785)|(0)) > 0;
   var $787=$786 ? 127 : -128;
   var $789 = $787;label = 123; break;
  case 123: 
   var $789;
   var $790=(($789) & 255);
   var $791=$i;
   var $792=((($791)+(2))|0);
   var $793=$4;
   var $794=(($793+$792)|0);
   HEAP8[($794)]=$790;
   var $795=$t115;
   var $796=((($795)+(128))|0);
   var $797=$796 & -256;
   var $798=(($797)|(0))!=0;
   if ($798) { label = 125; break; } else { label = 124; break; }
  case 124: 
   var $800=$t115;
   var $806 = $800;label = 126; break;
  case 125: 
   var $802=$t115;
   var $803=(($802)|(0)) > 0;
   var $804=$803 ? 127 : -128;
   var $806 = $804;label = 126; break;
  case 126: 
   var $806;
   var $807=(($806) & 255);
   var $808=$i;
   var $809=((($808)+(3))|0);
   var $810=$4;
   var $811=(($810+$809)|0);
   HEAP8[($811)]=$807;
   label = 127; break;
  case 127: 
   var $813=$i;
   var $814=((($813)+(4))|0);
   $i=$814;
   label = 113; break;
  case 128: 
   label = 129; break;
  case 129: 
   var $817=$i;
   var $818=(($size)|0);
   var $819=HEAP32[(($818)>>2)];
   var $820=(($817)|(0)) < (($819)|(0));
   if ($820) { label = 130; break; } else { label = 135; break; }
  case 130: 
   var $822=$6;
   var $823=$i;
   var $824=$_src13;
   var $825=(($824+$823)|0);
   var $826=HEAP8[($825)];
   var $827=(($826 << 24) >> 24);
   var $828=(($827)|(0));
   var $829=($822)*($828);
   var $830=$7;
   var $831=($829)+($830);
   var $832=__Z7cvRoundd($831);
   $t016=$832;
   var $833=$t016;
   var $834=((($833)+(128))|0);
   var $835=$834 & -256;
   var $836=(($835)|(0))!=0;
   if ($836) { label = 132; break; } else { label = 131; break; }
  case 131: 
   var $838=$t016;
   var $844 = $838;label = 133; break;
  case 132: 
   var $840=$t016;
   var $841=(($840)|(0)) > 0;
   var $842=$841 ? 127 : -128;
   var $844 = $842;label = 133; break;
  case 133: 
   var $844;
   var $845=(($844) & 255);
   var $846=$i;
   var $847=$4;
   var $848=(($847+$846)|0);
   HEAP8[($848)]=$845;
   label = 134; break;
  case 134: 
   var $850=$i;
   var $851=((($850)+(1))|0);
   $i=$851;
   label = 129; break;
  case 135: 
   label = 136; break;
  case 136: 
   var $854=$3;
   var $855=$_src13;
   var $856=(($855+$854)|0);
   $_src13=$856;
   var $857=$5;
   var $858=$4;
   var $859=(($858+$857)|0);
   $4=$859;
   label = 111; break;
  case 137: 
   label = 138; break;
  case 138: 
   label = 139; break;
  case 139: 
   label = 343; break;
  case 140: 
   var $864=$6;
   var $865=Math.abs($864);
   var $866=$865 <= 1;
   if ($866) { label = 141; break; } else { label = 170; break; }
  case 141: 
   var $868=$7;
   var $869=Math.abs($868);
   var $870=$869 < 2.220446049250313e-16;
   if ($870) { label = 142; break; } else { label = 170; break; }
  case 142: 
   var $872=$6;
   var $873=($872)*(32768);
   var $874=__Z7cvRoundd($873);
   $iscale17=$874;
   var $875=$2;
   var $876=$875;
   $_src18=$876;
   var $877=$3;
   var $878=((((($877)>>>(0)))/(2))&-1);
   $3=$878;
   label = 143; break;
  case 143: 
   var $880=(($size+4)|0);
   var $881=HEAP32[(($880)>>2)];
   var $882=((($881)-(1))|0);
   HEAP32[(($880)>>2)]=$882;
   var $883=(($881)|(0))!=0;
   if ($883) { label = 144; break; } else { label = 169; break; }
  case 144: 
   $i=0;
   label = 145; break;
  case 145: 
   var $886=$i;
   var $887=(($size)|0);
   var $888=HEAP32[(($887)>>2)];
   var $889=((($888)-(4))|0);
   var $890=(($886)|(0)) <= (($889)|(0));
   if ($890) { label = 146; break; } else { label = 160; break; }
  case 146: 
   var $892=$iscale17;
   var $893=$i;
   var $894=$_src18;
   var $895=(($894+($893<<1))|0);
   var $896=HEAP16[(($895)>>1)];
   var $897=(($896)&(65535));
   var $898=(Math.imul($892,$897)|0);
   var $899=(($898)|0);
   var $900=((($899)+(16384))|0);
   var $901=$900 >> 15;
   $t019=$901;
   var $902=$iscale17;
   var $903=$i;
   var $904=((($903)+(1))|0);
   var $905=$_src18;
   var $906=(($905+($904<<1))|0);
   var $907=HEAP16[(($906)>>1)];
   var $908=(($907)&(65535));
   var $909=(Math.imul($902,$908)|0);
   var $910=(($909)|0);
   var $911=((($910)+(16384))|0);
   var $912=$911 >> 15;
   $t120=$912;
   var $913=$t019;
   var $914=((($913)+(128))|0);
   var $915=$914 & -256;
   var $916=(($915)|(0))!=0;
   if ($916) { label = 148; break; } else { label = 147; break; }
  case 147: 
   var $918=$t019;
   var $924 = $918;label = 149; break;
  case 148: 
   var $920=$t019;
   var $921=(($920)|(0)) > 0;
   var $922=$921 ? 127 : -128;
   var $924 = $922;label = 149; break;
  case 149: 
   var $924;
   var $925=(($924) & 255);
   var $926=$i;
   var $927=$4;
   var $928=(($927+$926)|0);
   HEAP8[($928)]=$925;
   var $929=$t120;
   var $930=((($929)+(128))|0);
   var $931=$930 & -256;
   var $932=(($931)|(0))!=0;
   if ($932) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $934=$t120;
   var $940 = $934;label = 152; break;
  case 151: 
   var $936=$t120;
   var $937=(($936)|(0)) > 0;
   var $938=$937 ? 127 : -128;
   var $940 = $938;label = 152; break;
  case 152: 
   var $940;
   var $941=(($940) & 255);
   var $942=$i;
   var $943=((($942)+(1))|0);
   var $944=$4;
   var $945=(($944+$943)|0);
   HEAP8[($945)]=$941;
   var $946=$iscale17;
   var $947=$i;
   var $948=((($947)+(2))|0);
   var $949=$_src18;
   var $950=(($949+($948<<1))|0);
   var $951=HEAP16[(($950)>>1)];
   var $952=(($951)&(65535));
   var $953=(Math.imul($946,$952)|0);
   var $954=(($953)|0);
   var $955=((($954)+(16384))|0);
   var $956=$955 >> 15;
   $t019=$956;
   var $957=$iscale17;
   var $958=$i;
   var $959=((($958)+(3))|0);
   var $960=$_src18;
   var $961=(($960+($959<<1))|0);
   var $962=HEAP16[(($961)>>1)];
   var $963=(($962)&(65535));
   var $964=(Math.imul($957,$963)|0);
   var $965=(($964)|0);
   var $966=((($965)+(16384))|0);
   var $967=$966 >> 15;
   $t120=$967;
   var $968=$t019;
   var $969=((($968)+(128))|0);
   var $970=$969 & -256;
   var $971=(($970)|(0))!=0;
   if ($971) { label = 154; break; } else { label = 153; break; }
  case 153: 
   var $973=$t019;
   var $979 = $973;label = 155; break;
  case 154: 
   var $975=$t019;
   var $976=(($975)|(0)) > 0;
   var $977=$976 ? 127 : -128;
   var $979 = $977;label = 155; break;
  case 155: 
   var $979;
   var $980=(($979) & 255);
   var $981=$i;
   var $982=((($981)+(2))|0);
   var $983=$4;
   var $984=(($983+$982)|0);
   HEAP8[($984)]=$980;
   var $985=$t120;
   var $986=((($985)+(128))|0);
   var $987=$986 & -256;
   var $988=(($987)|(0))!=0;
   if ($988) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $990=$t120;
   var $996 = $990;label = 158; break;
  case 157: 
   var $992=$t120;
   var $993=(($992)|(0)) > 0;
   var $994=$993 ? 127 : -128;
   var $996 = $994;label = 158; break;
  case 158: 
   var $996;
   var $997=(($996) & 255);
   var $998=$i;
   var $999=((($998)+(3))|0);
   var $1000=$4;
   var $1001=(($1000+$999)|0);
   HEAP8[($1001)]=$997;
   label = 159; break;
  case 159: 
   var $1003=$i;
   var $1004=((($1003)+(4))|0);
   $i=$1004;
   label = 145; break;
  case 160: 
   label = 161; break;
  case 161: 
   var $1007=$i;
   var $1008=(($size)|0);
   var $1009=HEAP32[(($1008)>>2)];
   var $1010=(($1007)|(0)) < (($1009)|(0));
   if ($1010) { label = 162; break; } else { label = 167; break; }
  case 162: 
   var $1012=$iscale17;
   var $1013=$i;
   var $1014=$_src18;
   var $1015=(($1014+($1013<<1))|0);
   var $1016=HEAP16[(($1015)>>1)];
   var $1017=(($1016)&(65535));
   var $1018=(Math.imul($1012,$1017)|0);
   var $1019=(($1018)|0);
   var $1020=((($1019)+(16384))|0);
   var $1021=$1020 >> 15;
   $t021=$1021;
   var $1022=$t021;
   var $1023=((($1022)+(128))|0);
   var $1024=$1023 & -256;
   var $1025=(($1024)|(0))!=0;
   if ($1025) { label = 164; break; } else { label = 163; break; }
  case 163: 
   var $1027=$t021;
   var $1033 = $1027;label = 165; break;
  case 164: 
   var $1029=$t021;
   var $1030=(($1029)|(0)) > 0;
   var $1031=$1030 ? 127 : -128;
   var $1033 = $1031;label = 165; break;
  case 165: 
   var $1033;
   var $1034=(($1033) & 255);
   var $1035=$i;
   var $1036=$4;
   var $1037=(($1036+$1035)|0);
   HEAP8[($1037)]=$1034;
   label = 166; break;
  case 166: 
   var $1039=$i;
   var $1040=((($1039)+(1))|0);
   $i=$1040;
   label = 161; break;
  case 167: 
   label = 168; break;
  case 168: 
   var $1043=$3;
   var $1044=$_src18;
   var $1045=(($1044+($1043<<1))|0);
   $_src18=$1045;
   var $1046=$5;
   var $1047=$4;
   var $1048=(($1047+$1046)|0);
   $4=$1048;
   label = 143; break;
  case 169: 
   label = 198; break;
  case 170: 
   var $1051=$2;
   var $1052=$1051;
   $_src22=$1052;
   var $1053=$3;
   var $1054=((((($1053)>>>(0)))/(2))&-1);
   $3=$1054;
   label = 171; break;
  case 171: 
   var $1056=(($size+4)|0);
   var $1057=HEAP32[(($1056)>>2)];
   var $1058=((($1057)-(1))|0);
   HEAP32[(($1056)>>2)]=$1058;
   var $1059=(($1057)|(0))!=0;
   if ($1059) { label = 172; break; } else { label = 197; break; }
  case 172: 
   $i=0;
   label = 173; break;
  case 173: 
   var $1062=$i;
   var $1063=(($size)|0);
   var $1064=HEAP32[(($1063)>>2)];
   var $1065=((($1064)-(4))|0);
   var $1066=(($1062)|(0)) <= (($1065)|(0));
   if ($1066) { label = 174; break; } else { label = 188; break; }
  case 174: 
   var $1068=$6;
   var $1069=$i;
   var $1070=$_src22;
   var $1071=(($1070+($1069<<1))|0);
   var $1072=HEAP16[(($1071)>>1)];
   var $1073=(($1072)&(65535));
   var $1074=(($1073)|(0));
   var $1075=($1068)*($1074);
   var $1076=$7;
   var $1077=($1075)+($1076);
   var $1078=__Z7cvRoundd($1077);
   $t023=$1078;
   var $1079=$6;
   var $1080=$i;
   var $1081=((($1080)+(1))|0);
   var $1082=$_src22;
   var $1083=(($1082+($1081<<1))|0);
   var $1084=HEAP16[(($1083)>>1)];
   var $1085=(($1084)&(65535));
   var $1086=(($1085)|(0));
   var $1087=($1079)*($1086);
   var $1088=$7;
   var $1089=($1087)+($1088);
   var $1090=__Z7cvRoundd($1089);
   $t124=$1090;
   var $1091=$t023;
   var $1092=((($1091)+(128))|0);
   var $1093=$1092 & -256;
   var $1094=(($1093)|(0))!=0;
   if ($1094) { label = 176; break; } else { label = 175; break; }
  case 175: 
   var $1096=$t023;
   var $1102 = $1096;label = 177; break;
  case 176: 
   var $1098=$t023;
   var $1099=(($1098)|(0)) > 0;
   var $1100=$1099 ? 127 : -128;
   var $1102 = $1100;label = 177; break;
  case 177: 
   var $1102;
   var $1103=(($1102) & 255);
   var $1104=$i;
   var $1105=$4;
   var $1106=(($1105+$1104)|0);
   HEAP8[($1106)]=$1103;
   var $1107=$t124;
   var $1108=((($1107)+(128))|0);
   var $1109=$1108 & -256;
   var $1110=(($1109)|(0))!=0;
   if ($1110) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $1112=$t124;
   var $1118 = $1112;label = 180; break;
  case 179: 
   var $1114=$t124;
   var $1115=(($1114)|(0)) > 0;
   var $1116=$1115 ? 127 : -128;
   var $1118 = $1116;label = 180; break;
  case 180: 
   var $1118;
   var $1119=(($1118) & 255);
   var $1120=$i;
   var $1121=((($1120)+(1))|0);
   var $1122=$4;
   var $1123=(($1122+$1121)|0);
   HEAP8[($1123)]=$1119;
   var $1124=$6;
   var $1125=$i;
   var $1126=((($1125)+(2))|0);
   var $1127=$_src22;
   var $1128=(($1127+($1126<<1))|0);
   var $1129=HEAP16[(($1128)>>1)];
   var $1130=(($1129)&(65535));
   var $1131=(($1130)|(0));
   var $1132=($1124)*($1131);
   var $1133=$7;
   var $1134=($1132)+($1133);
   var $1135=__Z7cvRoundd($1134);
   $t023=$1135;
   var $1136=$6;
   var $1137=$i;
   var $1138=((($1137)+(3))|0);
   var $1139=$_src22;
   var $1140=(($1139+($1138<<1))|0);
   var $1141=HEAP16[(($1140)>>1)];
   var $1142=(($1141)&(65535));
   var $1143=(($1142)|(0));
   var $1144=($1136)*($1143);
   var $1145=$7;
   var $1146=($1144)+($1145);
   var $1147=__Z7cvRoundd($1146);
   $t124=$1147;
   var $1148=$t023;
   var $1149=((($1148)+(128))|0);
   var $1150=$1149 & -256;
   var $1151=(($1150)|(0))!=0;
   if ($1151) { label = 182; break; } else { label = 181; break; }
  case 181: 
   var $1153=$t023;
   var $1159 = $1153;label = 183; break;
  case 182: 
   var $1155=$t023;
   var $1156=(($1155)|(0)) > 0;
   var $1157=$1156 ? 127 : -128;
   var $1159 = $1157;label = 183; break;
  case 183: 
   var $1159;
   var $1160=(($1159) & 255);
   var $1161=$i;
   var $1162=((($1161)+(2))|0);
   var $1163=$4;
   var $1164=(($1163+$1162)|0);
   HEAP8[($1164)]=$1160;
   var $1165=$t124;
   var $1166=((($1165)+(128))|0);
   var $1167=$1166 & -256;
   var $1168=(($1167)|(0))!=0;
   if ($1168) { label = 185; break; } else { label = 184; break; }
  case 184: 
   var $1170=$t124;
   var $1176 = $1170;label = 186; break;
  case 185: 
   var $1172=$t124;
   var $1173=(($1172)|(0)) > 0;
   var $1174=$1173 ? 127 : -128;
   var $1176 = $1174;label = 186; break;
  case 186: 
   var $1176;
   var $1177=(($1176) & 255);
   var $1178=$i;
   var $1179=((($1178)+(3))|0);
   var $1180=$4;
   var $1181=(($1180+$1179)|0);
   HEAP8[($1181)]=$1177;
   label = 187; break;
  case 187: 
   var $1183=$i;
   var $1184=((($1183)+(4))|0);
   $i=$1184;
   label = 173; break;
  case 188: 
   label = 189; break;
  case 189: 
   var $1187=$i;
   var $1188=(($size)|0);
   var $1189=HEAP32[(($1188)>>2)];
   var $1190=(($1187)|(0)) < (($1189)|(0));
   if ($1190) { label = 190; break; } else { label = 195; break; }
  case 190: 
   var $1192=$6;
   var $1193=$i;
   var $1194=$_src22;
   var $1195=(($1194+($1193<<1))|0);
   var $1196=HEAP16[(($1195)>>1)];
   var $1197=(($1196)&(65535));
   var $1198=(($1197)|(0));
   var $1199=($1192)*($1198);
   var $1200=$7;
   var $1201=($1199)+($1200);
   var $1202=__Z7cvRoundd($1201);
   $t025=$1202;
   var $1203=$t025;
   var $1204=((($1203)+(128))|0);
   var $1205=$1204 & -256;
   var $1206=(($1205)|(0))!=0;
   if ($1206) { label = 192; break; } else { label = 191; break; }
  case 191: 
   var $1208=$t025;
   var $1214 = $1208;label = 193; break;
  case 192: 
   var $1210=$t025;
   var $1211=(($1210)|(0)) > 0;
   var $1212=$1211 ? 127 : -128;
   var $1214 = $1212;label = 193; break;
  case 193: 
   var $1214;
   var $1215=(($1214) & 255);
   var $1216=$i;
   var $1217=$4;
   var $1218=(($1217+$1216)|0);
   HEAP8[($1218)]=$1215;
   label = 194; break;
  case 194: 
   var $1220=$i;
   var $1221=((($1220)+(1))|0);
   $i=$1221;
   label = 189; break;
  case 195: 
   label = 196; break;
  case 196: 
   var $1224=$3;
   var $1225=$_src22;
   var $1226=(($1225+($1224<<1))|0);
   $_src22=$1226;
   var $1227=$5;
   var $1228=$4;
   var $1229=(($1228+$1227)|0);
   $4=$1229;
   label = 171; break;
  case 197: 
   label = 198; break;
  case 198: 
   label = 343; break;
  case 199: 
   var $1233=$6;
   var $1234=Math.abs($1233);
   var $1235=$1234 <= 1;
   if ($1235) { label = 200; break; } else { label = 229; break; }
  case 200: 
   var $1237=$7;
   var $1238=Math.abs($1237);
   var $1239=$1238 <= 32767.99998474121;
   if ($1239) { label = 201; break; } else { label = 229; break; }
  case 201: 
   var $1241=$6;
   var $1242=($1241)*(32768);
   var $1243=__Z7cvRoundd($1242);
   $iscale26=$1243;
   var $1244=$7;
   var $1245=($1244)*(32768);
   var $1246=__Z7cvRoundd($1245);
   $ishift27=$1246;
   var $1247=$2;
   var $1248=$1247;
   $_src28=$1248;
   var $1249=$3;
   var $1250=((((($1249)>>>(0)))/(2))&-1);
   $3=$1250;
   label = 202; break;
  case 202: 
   var $1252=(($size+4)|0);
   var $1253=HEAP32[(($1252)>>2)];
   var $1254=((($1253)-(1))|0);
   HEAP32[(($1252)>>2)]=$1254;
   var $1255=(($1253)|(0))!=0;
   if ($1255) { label = 203; break; } else { label = 228; break; }
  case 203: 
   $i=0;
   label = 204; break;
  case 204: 
   var $1258=$i;
   var $1259=(($size)|0);
   var $1260=HEAP32[(($1259)>>2)];
   var $1261=((($1260)-(4))|0);
   var $1262=(($1258)|(0)) <= (($1261)|(0));
   if ($1262) { label = 205; break; } else { label = 219; break; }
  case 205: 
   var $1264=$iscale26;
   var $1265=$i;
   var $1266=$_src28;
   var $1267=(($1266+($1265<<1))|0);
   var $1268=HEAP16[(($1267)>>1)];
   var $1269=(($1268 << 16) >> 16);
   var $1270=(Math.imul($1264,$1269)|0);
   var $1271=$ishift27;
   var $1272=((($1270)+($1271))|0);
   var $1273=((($1272)+(16384))|0);
   var $1274=$1273 >> 15;
   $t029=$1274;
   var $1275=$iscale26;
   var $1276=$i;
   var $1277=((($1276)+(1))|0);
   var $1278=$_src28;
   var $1279=(($1278+($1277<<1))|0);
   var $1280=HEAP16[(($1279)>>1)];
   var $1281=(($1280 << 16) >> 16);
   var $1282=(Math.imul($1275,$1281)|0);
   var $1283=$ishift27;
   var $1284=((($1282)+($1283))|0);
   var $1285=((($1284)+(16384))|0);
   var $1286=$1285 >> 15;
   $t130=$1286;
   var $1287=$t029;
   var $1288=((($1287)+(128))|0);
   var $1289=$1288 & -256;
   var $1290=(($1289)|(0))!=0;
   if ($1290) { label = 207; break; } else { label = 206; break; }
  case 206: 
   var $1292=$t029;
   var $1298 = $1292;label = 208; break;
  case 207: 
   var $1294=$t029;
   var $1295=(($1294)|(0)) > 0;
   var $1296=$1295 ? 127 : -128;
   var $1298 = $1296;label = 208; break;
  case 208: 
   var $1298;
   var $1299=(($1298) & 255);
   var $1300=$i;
   var $1301=$4;
   var $1302=(($1301+$1300)|0);
   HEAP8[($1302)]=$1299;
   var $1303=$t130;
   var $1304=((($1303)+(128))|0);
   var $1305=$1304 & -256;
   var $1306=(($1305)|(0))!=0;
   if ($1306) { label = 210; break; } else { label = 209; break; }
  case 209: 
   var $1308=$t130;
   var $1314 = $1308;label = 211; break;
  case 210: 
   var $1310=$t130;
   var $1311=(($1310)|(0)) > 0;
   var $1312=$1311 ? 127 : -128;
   var $1314 = $1312;label = 211; break;
  case 211: 
   var $1314;
   var $1315=(($1314) & 255);
   var $1316=$i;
   var $1317=((($1316)+(1))|0);
   var $1318=$4;
   var $1319=(($1318+$1317)|0);
   HEAP8[($1319)]=$1315;
   var $1320=$iscale26;
   var $1321=$i;
   var $1322=((($1321)+(2))|0);
   var $1323=$_src28;
   var $1324=(($1323+($1322<<1))|0);
   var $1325=HEAP16[(($1324)>>1)];
   var $1326=(($1325 << 16) >> 16);
   var $1327=(Math.imul($1320,$1326)|0);
   var $1328=$ishift27;
   var $1329=((($1327)+($1328))|0);
   var $1330=((($1329)+(16384))|0);
   var $1331=$1330 >> 15;
   $t029=$1331;
   var $1332=$iscale26;
   var $1333=$i;
   var $1334=((($1333)+(3))|0);
   var $1335=$_src28;
   var $1336=(($1335+($1334<<1))|0);
   var $1337=HEAP16[(($1336)>>1)];
   var $1338=(($1337 << 16) >> 16);
   var $1339=(Math.imul($1332,$1338)|0);
   var $1340=$ishift27;
   var $1341=((($1339)+($1340))|0);
   var $1342=((($1341)+(16384))|0);
   var $1343=$1342 >> 15;
   $t130=$1343;
   var $1344=$t029;
   var $1345=((($1344)+(128))|0);
   var $1346=$1345 & -256;
   var $1347=(($1346)|(0))!=0;
   if ($1347) { label = 213; break; } else { label = 212; break; }
  case 212: 
   var $1349=$t029;
   var $1355 = $1349;label = 214; break;
  case 213: 
   var $1351=$t029;
   var $1352=(($1351)|(0)) > 0;
   var $1353=$1352 ? 127 : -128;
   var $1355 = $1353;label = 214; break;
  case 214: 
   var $1355;
   var $1356=(($1355) & 255);
   var $1357=$i;
   var $1358=((($1357)+(2))|0);
   var $1359=$4;
   var $1360=(($1359+$1358)|0);
   HEAP8[($1360)]=$1356;
   var $1361=$t130;
   var $1362=((($1361)+(128))|0);
   var $1363=$1362 & -256;
   var $1364=(($1363)|(0))!=0;
   if ($1364) { label = 216; break; } else { label = 215; break; }
  case 215: 
   var $1366=$t130;
   var $1372 = $1366;label = 217; break;
  case 216: 
   var $1368=$t130;
   var $1369=(($1368)|(0)) > 0;
   var $1370=$1369 ? 127 : -128;
   var $1372 = $1370;label = 217; break;
  case 217: 
   var $1372;
   var $1373=(($1372) & 255);
   var $1374=$i;
   var $1375=((($1374)+(3))|0);
   var $1376=$4;
   var $1377=(($1376+$1375)|0);
   HEAP8[($1377)]=$1373;
   label = 218; break;
  case 218: 
   var $1379=$i;
   var $1380=((($1379)+(4))|0);
   $i=$1380;
   label = 204; break;
  case 219: 
   label = 220; break;
  case 220: 
   var $1383=$i;
   var $1384=(($size)|0);
   var $1385=HEAP32[(($1384)>>2)];
   var $1386=(($1383)|(0)) < (($1385)|(0));
   if ($1386) { label = 221; break; } else { label = 226; break; }
  case 221: 
   var $1388=$iscale26;
   var $1389=$i;
   var $1390=$_src28;
   var $1391=(($1390+($1389<<1))|0);
   var $1392=HEAP16[(($1391)>>1)];
   var $1393=(($1392 << 16) >> 16);
   var $1394=(Math.imul($1388,$1393)|0);
   var $1395=$ishift27;
   var $1396=((($1394)+($1395))|0);
   var $1397=((($1396)+(16384))|0);
   var $1398=$1397 >> 15;
   $t031=$1398;
   var $1399=$t031;
   var $1400=((($1399)+(128))|0);
   var $1401=$1400 & -256;
   var $1402=(($1401)|(0))!=0;
   if ($1402) { label = 223; break; } else { label = 222; break; }
  case 222: 
   var $1404=$t031;
   var $1410 = $1404;label = 224; break;
  case 223: 
   var $1406=$t031;
   var $1407=(($1406)|(0)) > 0;
   var $1408=$1407 ? 127 : -128;
   var $1410 = $1408;label = 224; break;
  case 224: 
   var $1410;
   var $1411=(($1410) & 255);
   var $1412=$i;
   var $1413=$4;
   var $1414=(($1413+$1412)|0);
   HEAP8[($1414)]=$1411;
   label = 225; break;
  case 225: 
   var $1416=$i;
   var $1417=((($1416)+(1))|0);
   $i=$1417;
   label = 220; break;
  case 226: 
   label = 227; break;
  case 227: 
   var $1420=$3;
   var $1421=$_src28;
   var $1422=(($1421+($1420<<1))|0);
   $_src28=$1422;
   var $1423=$5;
   var $1424=$4;
   var $1425=(($1424+$1423)|0);
   $4=$1425;
   label = 202; break;
  case 228: 
   label = 257; break;
  case 229: 
   var $1428=$2;
   var $1429=$1428;
   $_src32=$1429;
   var $1430=$3;
   var $1431=((((($1430)>>>(0)))/(2))&-1);
   $3=$1431;
   label = 230; break;
  case 230: 
   var $1433=(($size+4)|0);
   var $1434=HEAP32[(($1433)>>2)];
   var $1435=((($1434)-(1))|0);
   HEAP32[(($1433)>>2)]=$1435;
   var $1436=(($1434)|(0))!=0;
   if ($1436) { label = 231; break; } else { label = 256; break; }
  case 231: 
   $i=0;
   label = 232; break;
  case 232: 
   var $1439=$i;
   var $1440=(($size)|0);
   var $1441=HEAP32[(($1440)>>2)];
   var $1442=((($1441)-(4))|0);
   var $1443=(($1439)|(0)) <= (($1442)|(0));
   if ($1443) { label = 233; break; } else { label = 247; break; }
  case 233: 
   var $1445=$6;
   var $1446=$i;
   var $1447=$_src32;
   var $1448=(($1447+($1446<<1))|0);
   var $1449=HEAP16[(($1448)>>1)];
   var $1450=(($1449 << 16) >> 16);
   var $1451=(($1450)|(0));
   var $1452=($1445)*($1451);
   var $1453=$7;
   var $1454=($1452)+($1453);
   var $1455=__Z7cvRoundd($1454);
   $t033=$1455;
   var $1456=$6;
   var $1457=$i;
   var $1458=((($1457)+(1))|0);
   var $1459=$_src32;
   var $1460=(($1459+($1458<<1))|0);
   var $1461=HEAP16[(($1460)>>1)];
   var $1462=(($1461 << 16) >> 16);
   var $1463=(($1462)|(0));
   var $1464=($1456)*($1463);
   var $1465=$7;
   var $1466=($1464)+($1465);
   var $1467=__Z7cvRoundd($1466);
   $t134=$1467;
   var $1468=$t033;
   var $1469=((($1468)+(128))|0);
   var $1470=$1469 & -256;
   var $1471=(($1470)|(0))!=0;
   if ($1471) { label = 235; break; } else { label = 234; break; }
  case 234: 
   var $1473=$t033;
   var $1479 = $1473;label = 236; break;
  case 235: 
   var $1475=$t033;
   var $1476=(($1475)|(0)) > 0;
   var $1477=$1476 ? 127 : -128;
   var $1479 = $1477;label = 236; break;
  case 236: 
   var $1479;
   var $1480=(($1479) & 255);
   var $1481=$i;
   var $1482=$4;
   var $1483=(($1482+$1481)|0);
   HEAP8[($1483)]=$1480;
   var $1484=$t134;
   var $1485=((($1484)+(128))|0);
   var $1486=$1485 & -256;
   var $1487=(($1486)|(0))!=0;
   if ($1487) { label = 238; break; } else { label = 237; break; }
  case 237: 
   var $1489=$t134;
   var $1495 = $1489;label = 239; break;
  case 238: 
   var $1491=$t134;
   var $1492=(($1491)|(0)) > 0;
   var $1493=$1492 ? 127 : -128;
   var $1495 = $1493;label = 239; break;
  case 239: 
   var $1495;
   var $1496=(($1495) & 255);
   var $1497=$i;
   var $1498=((($1497)+(1))|0);
   var $1499=$4;
   var $1500=(($1499+$1498)|0);
   HEAP8[($1500)]=$1496;
   var $1501=$6;
   var $1502=$i;
   var $1503=((($1502)+(2))|0);
   var $1504=$_src32;
   var $1505=(($1504+($1503<<1))|0);
   var $1506=HEAP16[(($1505)>>1)];
   var $1507=(($1506 << 16) >> 16);
   var $1508=(($1507)|(0));
   var $1509=($1501)*($1508);
   var $1510=$7;
   var $1511=($1509)+($1510);
   var $1512=__Z7cvRoundd($1511);
   $t033=$1512;
   var $1513=$6;
   var $1514=$i;
   var $1515=((($1514)+(3))|0);
   var $1516=$_src32;
   var $1517=(($1516+($1515<<1))|0);
   var $1518=HEAP16[(($1517)>>1)];
   var $1519=(($1518 << 16) >> 16);
   var $1520=(($1519)|(0));
   var $1521=($1513)*($1520);
   var $1522=$7;
   var $1523=($1521)+($1522);
   var $1524=__Z7cvRoundd($1523);
   $t134=$1524;
   var $1525=$t033;
   var $1526=((($1525)+(128))|0);
   var $1527=$1526 & -256;
   var $1528=(($1527)|(0))!=0;
   if ($1528) { label = 241; break; } else { label = 240; break; }
  case 240: 
   var $1530=$t033;
   var $1536 = $1530;label = 242; break;
  case 241: 
   var $1532=$t033;
   var $1533=(($1532)|(0)) > 0;
   var $1534=$1533 ? 127 : -128;
   var $1536 = $1534;label = 242; break;
  case 242: 
   var $1536;
   var $1537=(($1536) & 255);
   var $1538=$i;
   var $1539=((($1538)+(2))|0);
   var $1540=$4;
   var $1541=(($1540+$1539)|0);
   HEAP8[($1541)]=$1537;
   var $1542=$t134;
   var $1543=((($1542)+(128))|0);
   var $1544=$1543 & -256;
   var $1545=(($1544)|(0))!=0;
   if ($1545) { label = 244; break; } else { label = 243; break; }
  case 243: 
   var $1547=$t134;
   var $1553 = $1547;label = 245; break;
  case 244: 
   var $1549=$t134;
   var $1550=(($1549)|(0)) > 0;
   var $1551=$1550 ? 127 : -128;
   var $1553 = $1551;label = 245; break;
  case 245: 
   var $1553;
   var $1554=(($1553) & 255);
   var $1555=$i;
   var $1556=((($1555)+(3))|0);
   var $1557=$4;
   var $1558=(($1557+$1556)|0);
   HEAP8[($1558)]=$1554;
   label = 246; break;
  case 246: 
   var $1560=$i;
   var $1561=((($1560)+(4))|0);
   $i=$1561;
   label = 232; break;
  case 247: 
   label = 248; break;
  case 248: 
   var $1564=$i;
   var $1565=(($size)|0);
   var $1566=HEAP32[(($1565)>>2)];
   var $1567=(($1564)|(0)) < (($1566)|(0));
   if ($1567) { label = 249; break; } else { label = 254; break; }
  case 249: 
   var $1569=$6;
   var $1570=$i;
   var $1571=$_src32;
   var $1572=(($1571+($1570<<1))|0);
   var $1573=HEAP16[(($1572)>>1)];
   var $1574=(($1573 << 16) >> 16);
   var $1575=(($1574)|(0));
   var $1576=($1569)*($1575);
   var $1577=$7;
   var $1578=($1576)+($1577);
   var $1579=__Z7cvRoundd($1578);
   $t035=$1579;
   var $1580=$t035;
   var $1581=((($1580)+(128))|0);
   var $1582=$1581 & -256;
   var $1583=(($1582)|(0))!=0;
   if ($1583) { label = 251; break; } else { label = 250; break; }
  case 250: 
   var $1585=$t035;
   var $1591 = $1585;label = 252; break;
  case 251: 
   var $1587=$t035;
   var $1588=(($1587)|(0)) > 0;
   var $1589=$1588 ? 127 : -128;
   var $1591 = $1589;label = 252; break;
  case 252: 
   var $1591;
   var $1592=(($1591) & 255);
   var $1593=$i;
   var $1594=$4;
   var $1595=(($1594+$1593)|0);
   HEAP8[($1595)]=$1592;
   label = 253; break;
  case 253: 
   var $1597=$i;
   var $1598=((($1597)+(1))|0);
   $i=$1598;
   label = 248; break;
  case 254: 
   label = 255; break;
  case 255: 
   var $1601=$3;
   var $1602=$_src32;
   var $1603=(($1602+($1601<<1))|0);
   $_src32=$1603;
   var $1604=$5;
   var $1605=$4;
   var $1606=(($1605+$1604)|0);
   $4=$1606;
   label = 230; break;
  case 256: 
   label = 257; break;
  case 257: 
   label = 343; break;
  case 258: 
   var $1610=$2;
   var $1611=$1610;
   $_src36=$1611;
   var $1612=$3;
   var $1613=((((($1612)>>>(0)))/(4))&-1);
   $3=$1613;
   label = 259; break;
  case 259: 
   var $1615=(($size+4)|0);
   var $1616=HEAP32[(($1615)>>2)];
   var $1617=((($1616)-(1))|0);
   HEAP32[(($1615)>>2)]=$1617;
   var $1618=(($1616)|(0))!=0;
   if ($1618) { label = 260; break; } else { label = 285; break; }
  case 260: 
   $i=0;
   label = 261; break;
  case 261: 
   var $1621=$i;
   var $1622=(($size)|0);
   var $1623=HEAP32[(($1622)>>2)];
   var $1624=((($1623)-(4))|0);
   var $1625=(($1621)|(0)) <= (($1624)|(0));
   if ($1625) { label = 262; break; } else { label = 276; break; }
  case 262: 
   var $1627=$6;
   var $1628=$i;
   var $1629=$_src36;
   var $1630=(($1629+($1628<<2))|0);
   var $1631=HEAP32[(($1630)>>2)];
   var $1632=(($1631)|(0));
   var $1633=($1627)*($1632);
   var $1634=$7;
   var $1635=($1633)+($1634);
   var $1636=__Z7cvRoundd($1635);
   $t037=$1636;
   var $1637=$6;
   var $1638=$i;
   var $1639=((($1638)+(1))|0);
   var $1640=$_src36;
   var $1641=(($1640+($1639<<2))|0);
   var $1642=HEAP32[(($1641)>>2)];
   var $1643=(($1642)|(0));
   var $1644=($1637)*($1643);
   var $1645=$7;
   var $1646=($1644)+($1645);
   var $1647=__Z7cvRoundd($1646);
   $t138=$1647;
   var $1648=$t037;
   var $1649=((($1648)+(128))|0);
   var $1650=$1649 & -256;
   var $1651=(($1650)|(0))!=0;
   if ($1651) { label = 264; break; } else { label = 263; break; }
  case 263: 
   var $1653=$t037;
   var $1659 = $1653;label = 265; break;
  case 264: 
   var $1655=$t037;
   var $1656=(($1655)|(0)) > 0;
   var $1657=$1656 ? 127 : -128;
   var $1659 = $1657;label = 265; break;
  case 265: 
   var $1659;
   var $1660=(($1659) & 255);
   var $1661=$i;
   var $1662=$4;
   var $1663=(($1662+$1661)|0);
   HEAP8[($1663)]=$1660;
   var $1664=$t138;
   var $1665=((($1664)+(128))|0);
   var $1666=$1665 & -256;
   var $1667=(($1666)|(0))!=0;
   if ($1667) { label = 267; break; } else { label = 266; break; }
  case 266: 
   var $1669=$t138;
   var $1675 = $1669;label = 268; break;
  case 267: 
   var $1671=$t138;
   var $1672=(($1671)|(0)) > 0;
   var $1673=$1672 ? 127 : -128;
   var $1675 = $1673;label = 268; break;
  case 268: 
   var $1675;
   var $1676=(($1675) & 255);
   var $1677=$i;
   var $1678=((($1677)+(1))|0);
   var $1679=$4;
   var $1680=(($1679+$1678)|0);
   HEAP8[($1680)]=$1676;
   var $1681=$6;
   var $1682=$i;
   var $1683=((($1682)+(2))|0);
   var $1684=$_src36;
   var $1685=(($1684+($1683<<2))|0);
   var $1686=HEAP32[(($1685)>>2)];
   var $1687=(($1686)|(0));
   var $1688=($1681)*($1687);
   var $1689=$7;
   var $1690=($1688)+($1689);
   var $1691=__Z7cvRoundd($1690);
   $t037=$1691;
   var $1692=$6;
   var $1693=$i;
   var $1694=((($1693)+(3))|0);
   var $1695=$_src36;
   var $1696=(($1695+($1694<<2))|0);
   var $1697=HEAP32[(($1696)>>2)];
   var $1698=(($1697)|(0));
   var $1699=($1692)*($1698);
   var $1700=$7;
   var $1701=($1699)+($1700);
   var $1702=__Z7cvRoundd($1701);
   $t138=$1702;
   var $1703=$t037;
   var $1704=((($1703)+(128))|0);
   var $1705=$1704 & -256;
   var $1706=(($1705)|(0))!=0;
   if ($1706) { label = 270; break; } else { label = 269; break; }
  case 269: 
   var $1708=$t037;
   var $1714 = $1708;label = 271; break;
  case 270: 
   var $1710=$t037;
   var $1711=(($1710)|(0)) > 0;
   var $1712=$1711 ? 127 : -128;
   var $1714 = $1712;label = 271; break;
  case 271: 
   var $1714;
   var $1715=(($1714) & 255);
   var $1716=$i;
   var $1717=((($1716)+(2))|0);
   var $1718=$4;
   var $1719=(($1718+$1717)|0);
   HEAP8[($1719)]=$1715;
   var $1720=$t138;
   var $1721=((($1720)+(128))|0);
   var $1722=$1721 & -256;
   var $1723=(($1722)|(0))!=0;
   if ($1723) { label = 273; break; } else { label = 272; break; }
  case 272: 
   var $1725=$t138;
   var $1731 = $1725;label = 274; break;
  case 273: 
   var $1727=$t138;
   var $1728=(($1727)|(0)) > 0;
   var $1729=$1728 ? 127 : -128;
   var $1731 = $1729;label = 274; break;
  case 274: 
   var $1731;
   var $1732=(($1731) & 255);
   var $1733=$i;
   var $1734=((($1733)+(3))|0);
   var $1735=$4;
   var $1736=(($1735+$1734)|0);
   HEAP8[($1736)]=$1732;
   label = 275; break;
  case 275: 
   var $1738=$i;
   var $1739=((($1738)+(4))|0);
   $i=$1739;
   label = 261; break;
  case 276: 
   label = 277; break;
  case 277: 
   var $1742=$i;
   var $1743=(($size)|0);
   var $1744=HEAP32[(($1743)>>2)];
   var $1745=(($1742)|(0)) < (($1744)|(0));
   if ($1745) { label = 278; break; } else { label = 283; break; }
  case 278: 
   var $1747=$6;
   var $1748=$i;
   var $1749=$_src36;
   var $1750=(($1749+($1748<<2))|0);
   var $1751=HEAP32[(($1750)>>2)];
   var $1752=(($1751)|(0));
   var $1753=($1747)*($1752);
   var $1754=$7;
   var $1755=($1753)+($1754);
   var $1756=__Z7cvRoundd($1755);
   $t039=$1756;
   var $1757=$t039;
   var $1758=((($1757)+(128))|0);
   var $1759=$1758 & -256;
   var $1760=(($1759)|(0))!=0;
   if ($1760) { label = 280; break; } else { label = 279; break; }
  case 279: 
   var $1762=$t039;
   var $1768 = $1762;label = 281; break;
  case 280: 
   var $1764=$t039;
   var $1765=(($1764)|(0)) > 0;
   var $1766=$1765 ? 127 : -128;
   var $1768 = $1766;label = 281; break;
  case 281: 
   var $1768;
   var $1769=(($1768) & 255);
   var $1770=$i;
   var $1771=$4;
   var $1772=(($1771+$1770)|0);
   HEAP8[($1772)]=$1769;
   label = 282; break;
  case 282: 
   var $1774=$i;
   var $1775=((($1774)+(1))|0);
   $i=$1775;
   label = 277; break;
  case 283: 
   label = 284; break;
  case 284: 
   var $1778=$3;
   var $1779=$_src36;
   var $1780=(($1779+($1778<<2))|0);
   $_src36=$1780;
   var $1781=$5;
   var $1782=$4;
   var $1783=(($1782+$1781)|0);
   $4=$1783;
   label = 259; break;
  case 285: 
   label = 343; break;
  case 286: 
   var $1786=$2;
   var $1787=$1786;
   $_src40=$1787;
   var $1788=$3;
   var $1789=((((($1788)>>>(0)))/(4))&-1);
   $3=$1789;
   label = 287; break;
  case 287: 
   var $1791=(($size+4)|0);
   var $1792=HEAP32[(($1791)>>2)];
   var $1793=((($1792)-(1))|0);
   HEAP32[(($1791)>>2)]=$1793;
   var $1794=(($1792)|(0))!=0;
   if ($1794) { label = 288; break; } else { label = 313; break; }
  case 288: 
   $i=0;
   label = 289; break;
  case 289: 
   var $1797=$i;
   var $1798=(($size)|0);
   var $1799=HEAP32[(($1798)>>2)];
   var $1800=((($1799)-(4))|0);
   var $1801=(($1797)|(0)) <= (($1800)|(0));
   if ($1801) { label = 290; break; } else { label = 304; break; }
  case 290: 
   var $1803=$6;
   var $1804=$i;
   var $1805=$_src40;
   var $1806=(($1805+($1804<<2))|0);
   var $1807=HEAPF32[(($1806)>>2)];
   var $1808=$1807;
   var $1809=($1803)*($1808);
   var $1810=$7;
   var $1811=($1809)+($1810);
   var $1812=__Z7cvRoundd($1811);
   $t041=$1812;
   var $1813=$6;
   var $1814=$i;
   var $1815=((($1814)+(1))|0);
   var $1816=$_src40;
   var $1817=(($1816+($1815<<2))|0);
   var $1818=HEAPF32[(($1817)>>2)];
   var $1819=$1818;
   var $1820=($1813)*($1819);
   var $1821=$7;
   var $1822=($1820)+($1821);
   var $1823=__Z7cvRoundd($1822);
   $t142=$1823;
   var $1824=$t041;
   var $1825=((($1824)+(128))|0);
   var $1826=$1825 & -256;
   var $1827=(($1826)|(0))!=0;
   if ($1827) { label = 292; break; } else { label = 291; break; }
  case 291: 
   var $1829=$t041;
   var $1835 = $1829;label = 293; break;
  case 292: 
   var $1831=$t041;
   var $1832=(($1831)|(0)) > 0;
   var $1833=$1832 ? 127 : -128;
   var $1835 = $1833;label = 293; break;
  case 293: 
   var $1835;
   var $1836=(($1835) & 255);
   var $1837=$i;
   var $1838=$4;
   var $1839=(($1838+$1837)|0);
   HEAP8[($1839)]=$1836;
   var $1840=$t142;
   var $1841=((($1840)+(128))|0);
   var $1842=$1841 & -256;
   var $1843=(($1842)|(0))!=0;
   if ($1843) { label = 295; break; } else { label = 294; break; }
  case 294: 
   var $1845=$t142;
   var $1851 = $1845;label = 296; break;
  case 295: 
   var $1847=$t142;
   var $1848=(($1847)|(0)) > 0;
   var $1849=$1848 ? 127 : -128;
   var $1851 = $1849;label = 296; break;
  case 296: 
   var $1851;
   var $1852=(($1851) & 255);
   var $1853=$i;
   var $1854=((($1853)+(1))|0);
   var $1855=$4;
   var $1856=(($1855+$1854)|0);
   HEAP8[($1856)]=$1852;
   var $1857=$6;
   var $1858=$i;
   var $1859=((($1858)+(2))|0);
   var $1860=$_src40;
   var $1861=(($1860+($1859<<2))|0);
   var $1862=HEAPF32[(($1861)>>2)];
   var $1863=$1862;
   var $1864=($1857)*($1863);
   var $1865=$7;
   var $1866=($1864)+($1865);
   var $1867=__Z7cvRoundd($1866);
   $t041=$1867;
   var $1868=$6;
   var $1869=$i;
   var $1870=((($1869)+(3))|0);
   var $1871=$_src40;
   var $1872=(($1871+($1870<<2))|0);
   var $1873=HEAPF32[(($1872)>>2)];
   var $1874=$1873;
   var $1875=($1868)*($1874);
   var $1876=$7;
   var $1877=($1875)+($1876);
   var $1878=__Z7cvRoundd($1877);
   $t142=$1878;
   var $1879=$t041;
   var $1880=((($1879)+(128))|0);
   var $1881=$1880 & -256;
   var $1882=(($1881)|(0))!=0;
   if ($1882) { label = 298; break; } else { label = 297; break; }
  case 297: 
   var $1884=$t041;
   var $1890 = $1884;label = 299; break;
  case 298: 
   var $1886=$t041;
   var $1887=(($1886)|(0)) > 0;
   var $1888=$1887 ? 127 : -128;
   var $1890 = $1888;label = 299; break;
  case 299: 
   var $1890;
   var $1891=(($1890) & 255);
   var $1892=$i;
   var $1893=((($1892)+(2))|0);
   var $1894=$4;
   var $1895=(($1894+$1893)|0);
   HEAP8[($1895)]=$1891;
   var $1896=$t142;
   var $1897=((($1896)+(128))|0);
   var $1898=$1897 & -256;
   var $1899=(($1898)|(0))!=0;
   if ($1899) { label = 301; break; } else { label = 300; break; }
  case 300: 
   var $1901=$t142;
   var $1907 = $1901;label = 302; break;
  case 301: 
   var $1903=$t142;
   var $1904=(($1903)|(0)) > 0;
   var $1905=$1904 ? 127 : -128;
   var $1907 = $1905;label = 302; break;
  case 302: 
   var $1907;
   var $1908=(($1907) & 255);
   var $1909=$i;
   var $1910=((($1909)+(3))|0);
   var $1911=$4;
   var $1912=(($1911+$1910)|0);
   HEAP8[($1912)]=$1908;
   label = 303; break;
  case 303: 
   var $1914=$i;
   var $1915=((($1914)+(4))|0);
   $i=$1915;
   label = 289; break;
  case 304: 
   label = 305; break;
  case 305: 
   var $1918=$i;
   var $1919=(($size)|0);
   var $1920=HEAP32[(($1919)>>2)];
   var $1921=(($1918)|(0)) < (($1920)|(0));
   if ($1921) { label = 306; break; } else { label = 311; break; }
  case 306: 
   var $1923=$6;
   var $1924=$i;
   var $1925=$_src40;
   var $1926=(($1925+($1924<<2))|0);
   var $1927=HEAPF32[(($1926)>>2)];
   var $1928=$1927;
   var $1929=($1923)*($1928);
   var $1930=$7;
   var $1931=($1929)+($1930);
   var $1932=__Z7cvRoundd($1931);
   $t043=$1932;
   var $1933=$t043;
   var $1934=((($1933)+(128))|0);
   var $1935=$1934 & -256;
   var $1936=(($1935)|(0))!=0;
   if ($1936) { label = 308; break; } else { label = 307; break; }
  case 307: 
   var $1938=$t043;
   var $1944 = $1938;label = 309; break;
  case 308: 
   var $1940=$t043;
   var $1941=(($1940)|(0)) > 0;
   var $1942=$1941 ? 127 : -128;
   var $1944 = $1942;label = 309; break;
  case 309: 
   var $1944;
   var $1945=(($1944) & 255);
   var $1946=$i;
   var $1947=$4;
   var $1948=(($1947+$1946)|0);
   HEAP8[($1948)]=$1945;
   label = 310; break;
  case 310: 
   var $1950=$i;
   var $1951=((($1950)+(1))|0);
   $i=$1951;
   label = 305; break;
  case 311: 
   label = 312; break;
  case 312: 
   var $1954=$3;
   var $1955=$_src40;
   var $1956=(($1955+($1954<<2))|0);
   $_src40=$1956;
   var $1957=$5;
   var $1958=$4;
   var $1959=(($1958+$1957)|0);
   $4=$1959;
   label = 287; break;
  case 313: 
   label = 343; break;
  case 314: 
   var $1962=$2;
   var $1963=$1962;
   $_src44=$1963;
   var $1964=$3;
   var $1965=((((($1964)>>>(0)))/(8))&-1);
   $3=$1965;
   label = 315; break;
  case 315: 
   var $1967=(($size+4)|0);
   var $1968=HEAP32[(($1967)>>2)];
   var $1969=((($1968)-(1))|0);
   HEAP32[(($1967)>>2)]=$1969;
   var $1970=(($1968)|(0))!=0;
   if ($1970) { label = 316; break; } else { label = 341; break; }
  case 316: 
   $i=0;
   label = 317; break;
  case 317: 
   var $1973=$i;
   var $1974=(($size)|0);
   var $1975=HEAP32[(($1974)>>2)];
   var $1976=((($1975)-(4))|0);
   var $1977=(($1973)|(0)) <= (($1976)|(0));
   if ($1977) { label = 318; break; } else { label = 332; break; }
  case 318: 
   var $1979=$6;
   var $1980=$i;
   var $1981=$_src44;
   var $1982=(($1981+($1980<<3))|0);
   var $1983=HEAPF64[(($1982)>>3)];
   var $1984=($1979)*($1983);
   var $1985=$7;
   var $1986=($1984)+($1985);
   var $1987=__Z7cvRoundd($1986);
   $t045=$1987;
   var $1988=$6;
   var $1989=$i;
   var $1990=((($1989)+(1))|0);
   var $1991=$_src44;
   var $1992=(($1991+($1990<<3))|0);
   var $1993=HEAPF64[(($1992)>>3)];
   var $1994=($1988)*($1993);
   var $1995=$7;
   var $1996=($1994)+($1995);
   var $1997=__Z7cvRoundd($1996);
   $t146=$1997;
   var $1998=$t045;
   var $1999=((($1998)+(128))|0);
   var $2000=$1999 & -256;
   var $2001=(($2000)|(0))!=0;
   if ($2001) { label = 320; break; } else { label = 319; break; }
  case 319: 
   var $2003=$t045;
   var $2009 = $2003;label = 321; break;
  case 320: 
   var $2005=$t045;
   var $2006=(($2005)|(0)) > 0;
   var $2007=$2006 ? 127 : -128;
   var $2009 = $2007;label = 321; break;
  case 321: 
   var $2009;
   var $2010=(($2009) & 255);
   var $2011=$i;
   var $2012=$4;
   var $2013=(($2012+$2011)|0);
   HEAP8[($2013)]=$2010;
   var $2014=$t146;
   var $2015=((($2014)+(128))|0);
   var $2016=$2015 & -256;
   var $2017=(($2016)|(0))!=0;
   if ($2017) { label = 323; break; } else { label = 322; break; }
  case 322: 
   var $2019=$t146;
   var $2025 = $2019;label = 324; break;
  case 323: 
   var $2021=$t146;
   var $2022=(($2021)|(0)) > 0;
   var $2023=$2022 ? 127 : -128;
   var $2025 = $2023;label = 324; break;
  case 324: 
   var $2025;
   var $2026=(($2025) & 255);
   var $2027=$i;
   var $2028=((($2027)+(1))|0);
   var $2029=$4;
   var $2030=(($2029+$2028)|0);
   HEAP8[($2030)]=$2026;
   var $2031=$6;
   var $2032=$i;
   var $2033=((($2032)+(2))|0);
   var $2034=$_src44;
   var $2035=(($2034+($2033<<3))|0);
   var $2036=HEAPF64[(($2035)>>3)];
   var $2037=($2031)*($2036);
   var $2038=$7;
   var $2039=($2037)+($2038);
   var $2040=__Z7cvRoundd($2039);
   $t045=$2040;
   var $2041=$6;
   var $2042=$i;
   var $2043=((($2042)+(3))|0);
   var $2044=$_src44;
   var $2045=(($2044+($2043<<3))|0);
   var $2046=HEAPF64[(($2045)>>3)];
   var $2047=($2041)*($2046);
   var $2048=$7;
   var $2049=($2047)+($2048);
   var $2050=__Z7cvRoundd($2049);
   $t146=$2050;
   var $2051=$t045;
   var $2052=((($2051)+(128))|0);
   var $2053=$2052 & -256;
   var $2054=(($2053)|(0))!=0;
   if ($2054) { label = 326; break; } else { label = 325; break; }
  case 325: 
   var $2056=$t045;
   var $2062 = $2056;label = 327; break;
  case 326: 
   var $2058=$t045;
   var $2059=(($2058)|(0)) > 0;
   var $2060=$2059 ? 127 : -128;
   var $2062 = $2060;label = 327; break;
  case 327: 
   var $2062;
   var $2063=(($2062) & 255);
   var $2064=$i;
   var $2065=((($2064)+(2))|0);
   var $2066=$4;
   var $2067=(($2066+$2065)|0);
   HEAP8[($2067)]=$2063;
   var $2068=$t146;
   var $2069=((($2068)+(128))|0);
   var $2070=$2069 & -256;
   var $2071=(($2070)|(0))!=0;
   if ($2071) { label = 329; break; } else { label = 328; break; }
  case 328: 
   var $2073=$t146;
   var $2079 = $2073;label = 330; break;
  case 329: 
   var $2075=$t146;
   var $2076=(($2075)|(0)) > 0;
   var $2077=$2076 ? 127 : -128;
   var $2079 = $2077;label = 330; break;
  case 330: 
   var $2079;
   var $2080=(($2079) & 255);
   var $2081=$i;
   var $2082=((($2081)+(3))|0);
   var $2083=$4;
   var $2084=(($2083+$2082)|0);
   HEAP8[($2084)]=$2080;
   label = 331; break;
  case 331: 
   var $2086=$i;
   var $2087=((($2086)+(4))|0);
   $i=$2087;
   label = 317; break;
  case 332: 
   label = 333; break;
  case 333: 
   var $2090=$i;
   var $2091=(($size)|0);
   var $2092=HEAP32[(($2091)>>2)];
   var $2093=(($2090)|(0)) < (($2092)|(0));
   if ($2093) { label = 334; break; } else { label = 339; break; }
  case 334: 
   var $2095=$6;
   var $2096=$i;
   var $2097=$_src44;
   var $2098=(($2097+($2096<<3))|0);
   var $2099=HEAPF64[(($2098)>>3)];
   var $2100=($2095)*($2099);
   var $2101=$7;
   var $2102=($2100)+($2101);
   var $2103=__Z7cvRoundd($2102);
   $t047=$2103;
   var $2104=$t047;
   var $2105=((($2104)+(128))|0);
   var $2106=$2105 & -256;
   var $2107=(($2106)|(0))!=0;
   if ($2107) { label = 336; break; } else { label = 335; break; }
  case 335: 
   var $2109=$t047;
   var $2115 = $2109;label = 337; break;
  case 336: 
   var $2111=$t047;
   var $2112=(($2111)|(0)) > 0;
   var $2113=$2112 ? 127 : -128;
   var $2115 = $2113;label = 337; break;
  case 337: 
   var $2115;
   var $2116=(($2115) & 255);
   var $2117=$i;
   var $2118=$4;
   var $2119=(($2118+$2117)|0);
   HEAP8[($2119)]=$2116;
   label = 338; break;
  case 338: 
   var $2121=$i;
   var $2122=((($2121)+(1))|0);
   $i=$2122;
   label = 333; break;
  case 339: 
   label = 340; break;
  case 340: 
   var $2125=$3;
   var $2126=$_src44;
   var $2127=(($2126+($2125<<3))|0);
   $_src44=$2127;
   var $2128=$5;
   var $2129=$4;
   var $2130=(($2129+$2128)|0);
   $4=$2130;
   label = 315; break;
  case 341: 
   label = 343; break;
  case 342: 
   $1=-12;
   label = 344; break;
  case 343: 
   $1=0;
   label = 344; break;
  case 344: 
   var $2135=$1;
   STACKTOP = sp;
   return $2135;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvCvtScaleTo_16u_C1RPKhiPti6CvSizeddi($src, $srcstep, $dst, $dststep, $size, $scale, $shift, $param) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $i;
   var $srctype;
   var $lut=sp;
   var $val;
   var $t;
   var $9=(sp)+(512);
   var $iscale;
   var $ishift;
   var $_src;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $t03;
   var $t14;
   var $t05;
   var $t6;
   var $10=(sp)+(520);
   var $iscale7;
   var $ishift8;
   var $_src9;
   var $t010;
   var $t111;
   var $t012;
   var $_src13;
   var $t014;
   var $t115;
   var $t016;
   var $iscale17;
   var $_src18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $t023;
   var $t124;
   var $t025;
   var $iscale26;
   var $ishift27;
   var $_src28;
   var $t029;
   var $t130;
   var $t031;
   var $_src32;
   var $t033;
   var $t134;
   var $t035;
   var $_src36;
   var $t037;
   var $t138;
   var $t039;
   var $_src40;
   var $t041;
   var $t142;
   var $t043;
   var $_src44;
   var $t045;
   var $t146;
   var $t047;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$scale;
   $7=$shift;
   $8=$param;
   var $11=$8;
   $srctype=$11;
   var $12=$5;
   var $13=((((($12)>>>(0)))/(2))&-1);
   $5=$13;
   var $14=$srctype;
   var $15=$14 & 7;
   if ((($15)|(0))==0) {
    label = 2; break;
   }
   else if ((($15)|(0))==1) {
    label = 71; break;
   }
   else if ((($15)|(0))==2) {
    label = 140; break;
   }
   else if ((($15)|(0))==3) {
    label = 199; break;
   }
   else if ((($15)|(0))==4) {
    label = 258; break;
   }
   else if ((($15)|(0))==5) {
    label = 286; break;
   }
   else if ((($15)|(0))==6) {
    label = 314; break;
   }
   else {
   label = 342; break;
   }
  case 2: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(Math.imul($18,$20)|0);
   var $22=(($21)|(0)) >= 256;
   if ($22) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $24=$7;
   $val=$24;
   $i=0;
   label = 4; break;
  case 4: 
   var $26=$i;
   var $27=(($26)|(0)) < 256;
   if ($27) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $29=$val;
   var $30=__Z7cvRoundd($29);
   $t=$30;
   var $31=$t;
   var $32=$31 & -65536;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $35=$t;
   var $41 = $35;label = 8; break;
  case 7: 
   var $37=$t;
   var $38=(($37)|(0)) > 0;
   var $39=$38 ? 65535 : 0;
   var $41 = $39;label = 8; break;
  case 8: 
   var $41;
   var $42=(($41) & 65535);
   var $43=$i;
   var $44=(($lut+($43<<1))|0);
   HEAP16[(($44)>>1)]=$42;
   label = 9; break;
  case 9: 
   var $46=$i;
   var $47=((($46)+(1))|0);
   $i=$47;
   var $48=$6;
   var $49=$val;
   var $50=($49)+($48);
   $val=$50;
   label = 4; break;
  case 10: 
   var $52=$2;
   var $53=$3;
   var $54=$4;
   var $55=$5;
   var $56=($55<<1);
   var $57=$9;
   var $58=$size;
   assert(8 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
   var $59=(($lut)|0);
   var $60=__Z26icvLUT_Transform8u_16u_C1RPKhiPti6CvSizePKt($52, $53, $54, $56, $9, $59);
   label = 70; break;
  case 11: 
   var $62=$6;
   var $63=Math.abs($62);
   var $64=$63 <= 128;
   if ($64) { label = 12; break; } else { label = 41; break; }
  case 12: 
   var $66=$7;
   var $67=Math.abs($66);
   var $68=$67 <= 32767.99998474121;
   if ($68) { label = 13; break; } else { label = 41; break; }
  case 13: 
   var $70=$6;
   var $71=($70)*(32768);
   var $72=__Z7cvRoundd($71);
   $iscale=$72;
   var $73=$7;
   var $74=($73)*(32768);
   var $75=__Z7cvRoundd($74);
   $ishift=$75;
   var $76=$2;
   $_src=$76;
   var $77=$3;
   var $78=(((($77)>>>(0)))&-1);
   $3=$78;
   label = 14; break;
  case 14: 
   var $80=(($size+4)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=((($81)-(1))|0);
   HEAP32[(($80)>>2)]=$82;
   var $83=(($81)|(0))!=0;
   if ($83) { label = 15; break; } else { label = 40; break; }
  case 15: 
   $i=0;
   label = 16; break;
  case 16: 
   var $86=$i;
   var $87=(($size)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=((($88)-(4))|0);
   var $90=(($86)|(0)) <= (($89)|(0));
   if ($90) { label = 17; break; } else { label = 31; break; }
  case 17: 
   var $92=$iscale;
   var $93=$i;
   var $94=$_src;
   var $95=(($94+$93)|0);
   var $96=HEAP8[($95)];
   var $97=(($96)&(255));
   var $98=(Math.imul($92,$97)|0);
   var $99=$ishift;
   var $100=((($98)+($99))|0);
   var $101=((($100)+(16384))|0);
   var $102=$101 >> 15;
   $t0=$102;
   var $103=$iscale;
   var $104=$i;
   var $105=((($104)+(1))|0);
   var $106=$_src;
   var $107=(($106+$105)|0);
   var $108=HEAP8[($107)];
   var $109=(($108)&(255));
   var $110=(Math.imul($103,$109)|0);
   var $111=$ishift;
   var $112=((($110)+($111))|0);
   var $113=((($112)+(16384))|0);
   var $114=$113 >> 15;
   $t1=$114;
   var $115=$t0;
   var $116=$115 & -65536;
   var $117=(($116)|(0))!=0;
   if ($117) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $119=$t0;
   var $125 = $119;label = 20; break;
  case 19: 
   var $121=$t0;
   var $122=(($121)|(0)) > 0;
   var $123=$122 ? 65535 : 0;
   var $125 = $123;label = 20; break;
  case 20: 
   var $125;
   var $126=(($125) & 65535);
   var $127=$i;
   var $128=$4;
   var $129=(($128+($127<<1))|0);
   HEAP16[(($129)>>1)]=$126;
   var $130=$t1;
   var $131=$130 & -65536;
   var $132=(($131)|(0))!=0;
   if ($132) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $134=$t1;
   var $140 = $134;label = 23; break;
  case 22: 
   var $136=$t1;
   var $137=(($136)|(0)) > 0;
   var $138=$137 ? 65535 : 0;
   var $140 = $138;label = 23; break;
  case 23: 
   var $140;
   var $141=(($140) & 65535);
   var $142=$i;
   var $143=((($142)+(1))|0);
   var $144=$4;
   var $145=(($144+($143<<1))|0);
   HEAP16[(($145)>>1)]=$141;
   var $146=$iscale;
   var $147=$i;
   var $148=((($147)+(2))|0);
   var $149=$_src;
   var $150=(($149+$148)|0);
   var $151=HEAP8[($150)];
   var $152=(($151)&(255));
   var $153=(Math.imul($146,$152)|0);
   var $154=$ishift;
   var $155=((($153)+($154))|0);
   var $156=((($155)+(16384))|0);
   var $157=$156 >> 15;
   $t0=$157;
   var $158=$iscale;
   var $159=$i;
   var $160=((($159)+(3))|0);
   var $161=$_src;
   var $162=(($161+$160)|0);
   var $163=HEAP8[($162)];
   var $164=(($163)&(255));
   var $165=(Math.imul($158,$164)|0);
   var $166=$ishift;
   var $167=((($165)+($166))|0);
   var $168=((($167)+(16384))|0);
   var $169=$168 >> 15;
   $t1=$169;
   var $170=$t0;
   var $171=$170 & -65536;
   var $172=(($171)|(0))!=0;
   if ($172) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $174=$t0;
   var $180 = $174;label = 26; break;
  case 25: 
   var $176=$t0;
   var $177=(($176)|(0)) > 0;
   var $178=$177 ? 65535 : 0;
   var $180 = $178;label = 26; break;
  case 26: 
   var $180;
   var $181=(($180) & 65535);
   var $182=$i;
   var $183=((($182)+(2))|0);
   var $184=$4;
   var $185=(($184+($183<<1))|0);
   HEAP16[(($185)>>1)]=$181;
   var $186=$t1;
   var $187=$186 & -65536;
   var $188=(($187)|(0))!=0;
   if ($188) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $190=$t1;
   var $196 = $190;label = 29; break;
  case 28: 
   var $192=$t1;
   var $193=(($192)|(0)) > 0;
   var $194=$193 ? 65535 : 0;
   var $196 = $194;label = 29; break;
  case 29: 
   var $196;
   var $197=(($196) & 65535);
   var $198=$i;
   var $199=((($198)+(3))|0);
   var $200=$4;
   var $201=(($200+($199<<1))|0);
   HEAP16[(($201)>>1)]=$197;
   label = 30; break;
  case 30: 
   var $203=$i;
   var $204=((($203)+(4))|0);
   $i=$204;
   label = 16; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $207=$i;
   var $208=(($size)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=(($207)|(0)) < (($209)|(0));
   if ($210) { label = 33; break; } else { label = 38; break; }
  case 33: 
   var $212=$iscale;
   var $213=$i;
   var $214=$_src;
   var $215=(($214+$213)|0);
   var $216=HEAP8[($215)];
   var $217=(($216)&(255));
   var $218=(Math.imul($212,$217)|0);
   var $219=$ishift;
   var $220=((($218)+($219))|0);
   var $221=((($220)+(16384))|0);
   var $222=$221 >> 15;
   $t01=$222;
   var $223=$t01;
   var $224=$223 & -65536;
   var $225=(($224)|(0))!=0;
   if ($225) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $227=$t01;
   var $233 = $227;label = 36; break;
  case 35: 
   var $229=$t01;
   var $230=(($229)|(0)) > 0;
   var $231=$230 ? 65535 : 0;
   var $233 = $231;label = 36; break;
  case 36: 
   var $233;
   var $234=(($233) & 65535);
   var $235=$i;
   var $236=$4;
   var $237=(($236+($235<<1))|0);
   HEAP16[(($237)>>1)]=$234;
   label = 37; break;
  case 37: 
   var $239=$i;
   var $240=((($239)+(1))|0);
   $i=$240;
   label = 32; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $243=$3;
   var $244=$_src;
   var $245=(($244+$243)|0);
   $_src=$245;
   var $246=$5;
   var $247=$4;
   var $248=(($247+($246<<1))|0);
   $4=$248;
   label = 14; break;
  case 40: 
   label = 69; break;
  case 41: 
   var $251=$2;
   $_src2=$251;
   var $252=$3;
   var $253=(((($252)>>>(0)))&-1);
   $3=$253;
   label = 42; break;
  case 42: 
   var $255=(($size+4)|0);
   var $256=HEAP32[(($255)>>2)];
   var $257=((($256)-(1))|0);
   HEAP32[(($255)>>2)]=$257;
   var $258=(($256)|(0))!=0;
   if ($258) { label = 43; break; } else { label = 68; break; }
  case 43: 
   $i=0;
   label = 44; break;
  case 44: 
   var $261=$i;
   var $262=(($size)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=((($263)-(4))|0);
   var $265=(($261)|(0)) <= (($264)|(0));
   if ($265) { label = 45; break; } else { label = 59; break; }
  case 45: 
   var $267=$6;
   var $268=$i;
   var $269=$_src2;
   var $270=(($269+$268)|0);
   var $271=HEAP8[($270)];
   var $272=(($271)&(255));
   var $273=(($272)|(0));
   var $274=($267)*($273);
   var $275=$7;
   var $276=($274)+($275);
   var $277=__Z7cvRoundd($276);
   $t03=$277;
   var $278=$6;
   var $279=$i;
   var $280=((($279)+(1))|0);
   var $281=$_src2;
   var $282=(($281+$280)|0);
   var $283=HEAP8[($282)];
   var $284=(($283)&(255));
   var $285=(($284)|(0));
   var $286=($278)*($285);
   var $287=$7;
   var $288=($286)+($287);
   var $289=__Z7cvRoundd($288);
   $t14=$289;
   var $290=$t03;
   var $291=$290 & -65536;
   var $292=(($291)|(0))!=0;
   if ($292) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $294=$t03;
   var $300 = $294;label = 48; break;
  case 47: 
   var $296=$t03;
   var $297=(($296)|(0)) > 0;
   var $298=$297 ? 65535 : 0;
   var $300 = $298;label = 48; break;
  case 48: 
   var $300;
   var $301=(($300) & 65535);
   var $302=$i;
   var $303=$4;
   var $304=(($303+($302<<1))|0);
   HEAP16[(($304)>>1)]=$301;
   var $305=$t14;
   var $306=$305 & -65536;
   var $307=(($306)|(0))!=0;
   if ($307) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $309=$t14;
   var $315 = $309;label = 51; break;
  case 50: 
   var $311=$t14;
   var $312=(($311)|(0)) > 0;
   var $313=$312 ? 65535 : 0;
   var $315 = $313;label = 51; break;
  case 51: 
   var $315;
   var $316=(($315) & 65535);
   var $317=$i;
   var $318=((($317)+(1))|0);
   var $319=$4;
   var $320=(($319+($318<<1))|0);
   HEAP16[(($320)>>1)]=$316;
   var $321=$6;
   var $322=$i;
   var $323=((($322)+(2))|0);
   var $324=$_src2;
   var $325=(($324+$323)|0);
   var $326=HEAP8[($325)];
   var $327=(($326)&(255));
   var $328=(($327)|(0));
   var $329=($321)*($328);
   var $330=$7;
   var $331=($329)+($330);
   var $332=__Z7cvRoundd($331);
   $t03=$332;
   var $333=$6;
   var $334=$i;
   var $335=((($334)+(3))|0);
   var $336=$_src2;
   var $337=(($336+$335)|0);
   var $338=HEAP8[($337)];
   var $339=(($338)&(255));
   var $340=(($339)|(0));
   var $341=($333)*($340);
   var $342=$7;
   var $343=($341)+($342);
   var $344=__Z7cvRoundd($343);
   $t14=$344;
   var $345=$t03;
   var $346=$345 & -65536;
   var $347=(($346)|(0))!=0;
   if ($347) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $349=$t03;
   var $355 = $349;label = 54; break;
  case 53: 
   var $351=$t03;
   var $352=(($351)|(0)) > 0;
   var $353=$352 ? 65535 : 0;
   var $355 = $353;label = 54; break;
  case 54: 
   var $355;
   var $356=(($355) & 65535);
   var $357=$i;
   var $358=((($357)+(2))|0);
   var $359=$4;
   var $360=(($359+($358<<1))|0);
   HEAP16[(($360)>>1)]=$356;
   var $361=$t14;
   var $362=$361 & -65536;
   var $363=(($362)|(0))!=0;
   if ($363) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $365=$t14;
   var $371 = $365;label = 57; break;
  case 56: 
   var $367=$t14;
   var $368=(($367)|(0)) > 0;
   var $369=$368 ? 65535 : 0;
   var $371 = $369;label = 57; break;
  case 57: 
   var $371;
   var $372=(($371) & 65535);
   var $373=$i;
   var $374=((($373)+(3))|0);
   var $375=$4;
   var $376=(($375+($374<<1))|0);
   HEAP16[(($376)>>1)]=$372;
   label = 58; break;
  case 58: 
   var $378=$i;
   var $379=((($378)+(4))|0);
   $i=$379;
   label = 44; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $382=$i;
   var $383=(($size)|0);
   var $384=HEAP32[(($383)>>2)];
   var $385=(($382)|(0)) < (($384)|(0));
   if ($385) { label = 61; break; } else { label = 66; break; }
  case 61: 
   var $387=$6;
   var $388=$i;
   var $389=$_src2;
   var $390=(($389+$388)|0);
   var $391=HEAP8[($390)];
   var $392=(($391)&(255));
   var $393=(($392)|(0));
   var $394=($387)*($393);
   var $395=$7;
   var $396=($394)+($395);
   var $397=__Z7cvRoundd($396);
   $t05=$397;
   var $398=$t05;
   var $399=$398 & -65536;
   var $400=(($399)|(0))!=0;
   if ($400) { label = 63; break; } else { label = 62; break; }
  case 62: 
   var $402=$t05;
   var $408 = $402;label = 64; break;
  case 63: 
   var $404=$t05;
   var $405=(($404)|(0)) > 0;
   var $406=$405 ? 65535 : 0;
   var $408 = $406;label = 64; break;
  case 64: 
   var $408;
   var $409=(($408) & 65535);
   var $410=$i;
   var $411=$4;
   var $412=(($411+($410<<1))|0);
   HEAP16[(($412)>>1)]=$409;
   label = 65; break;
  case 65: 
   var $414=$i;
   var $415=((($414)+(1))|0);
   $i=$415;
   label = 60; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $418=$3;
   var $419=$_src2;
   var $420=(($419+$418)|0);
   $_src2=$420;
   var $421=$5;
   var $422=$4;
   var $423=(($422+($421<<1))|0);
   $4=$423;
   label = 42; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   label = 343; break;
  case 71: 
   var $428=(($size)|0);
   var $429=HEAP32[(($428)>>2)];
   var $430=(($size+4)|0);
   var $431=HEAP32[(($430)>>2)];
   var $432=(Math.imul($429,$431)|0);
   var $433=(($432)|(0)) >= 256;
   if ($433) { label = 72; break; } else { label = 80; break; }
  case 72: 
   $i=0;
   label = 73; break;
  case 73: 
   var $436=$i;
   var $437=(($436)|(0)) < 256;
   if ($437) { label = 74; break; } else { label = 79; break; }
  case 74: 
   var $439=$i;
   var $440=(($439) & 255);
   var $441=(($440 << 24) >> 24);
   var $442=(($441)|(0));
   var $443=$6;
   var $444=($442)*($443);
   var $445=$7;
   var $446=($444)+($445);
   var $447=__Z7cvRoundd($446);
   $t6=$447;
   var $448=$t6;
   var $449=$448 & -65536;
   var $450=(($449)|(0))!=0;
   if ($450) { label = 76; break; } else { label = 75; break; }
  case 75: 
   var $452=$t6;
   var $458 = $452;label = 77; break;
  case 76: 
   var $454=$t6;
   var $455=(($454)|(0)) > 0;
   var $456=$455 ? 65535 : 0;
   var $458 = $456;label = 77; break;
  case 77: 
   var $458;
   var $459=(($458) & 65535);
   var $460=$i;
   var $461=(($lut+($460<<1))|0);
   HEAP16[(($461)>>1)]=$459;
   label = 78; break;
  case 78: 
   var $463=$i;
   var $464=((($463)+(1))|0);
   $i=$464;
   label = 73; break;
  case 79: 
   var $466=$2;
   var $467=$3;
   var $468=$4;
   var $469=$5;
   var $470=($469<<1);
   var $471=$10;
   var $472=$size;
   assert(8 % 1 === 0);HEAP32[(($471)>>2)]=HEAP32[(($472)>>2)];HEAP32[((($471)+(4))>>2)]=HEAP32[((($472)+(4))>>2)];
   var $473=(($lut)|0);
   var $474=__Z26icvLUT_Transform8u_16u_C1RPKhiPti6CvSizePKt($466, $467, $468, $470, $10, $473);
   label = 139; break;
  case 80: 
   var $476=$6;
   var $477=Math.abs($476);
   var $478=$477 <= 128;
   if ($478) { label = 81; break; } else { label = 110; break; }
  case 81: 
   var $480=$7;
   var $481=Math.abs($480);
   var $482=$481 <= 32767.99998474121;
   if ($482) { label = 82; break; } else { label = 110; break; }
  case 82: 
   var $484=$6;
   var $485=($484)*(32768);
   var $486=__Z7cvRoundd($485);
   $iscale7=$486;
   var $487=$7;
   var $488=($487)*(32768);
   var $489=__Z7cvRoundd($488);
   $ishift8=$489;
   var $490=$2;
   $_src9=$490;
   var $491=$3;
   var $492=(((($491)>>>(0)))&-1);
   $3=$492;
   label = 83; break;
  case 83: 
   var $494=(($size+4)|0);
   var $495=HEAP32[(($494)>>2)];
   var $496=((($495)-(1))|0);
   HEAP32[(($494)>>2)]=$496;
   var $497=(($495)|(0))!=0;
   if ($497) { label = 84; break; } else { label = 109; break; }
  case 84: 
   $i=0;
   label = 85; break;
  case 85: 
   var $500=$i;
   var $501=(($size)|0);
   var $502=HEAP32[(($501)>>2)];
   var $503=((($502)-(4))|0);
   var $504=(($500)|(0)) <= (($503)|(0));
   if ($504) { label = 86; break; } else { label = 100; break; }
  case 86: 
   var $506=$iscale7;
   var $507=$i;
   var $508=$_src9;
   var $509=(($508+$507)|0);
   var $510=HEAP8[($509)];
   var $511=(($510 << 24) >> 24);
   var $512=(Math.imul($506,$511)|0);
   var $513=$ishift8;
   var $514=((($512)+($513))|0);
   var $515=((($514)+(16384))|0);
   var $516=$515 >> 15;
   $t010=$516;
   var $517=$iscale7;
   var $518=$i;
   var $519=((($518)+(1))|0);
   var $520=$_src9;
   var $521=(($520+$519)|0);
   var $522=HEAP8[($521)];
   var $523=(($522 << 24) >> 24);
   var $524=(Math.imul($517,$523)|0);
   var $525=$ishift8;
   var $526=((($524)+($525))|0);
   var $527=((($526)+(16384))|0);
   var $528=$527 >> 15;
   $t111=$528;
   var $529=$t010;
   var $530=$529 & -65536;
   var $531=(($530)|(0))!=0;
   if ($531) { label = 88; break; } else { label = 87; break; }
  case 87: 
   var $533=$t010;
   var $539 = $533;label = 89; break;
  case 88: 
   var $535=$t010;
   var $536=(($535)|(0)) > 0;
   var $537=$536 ? 65535 : 0;
   var $539 = $537;label = 89; break;
  case 89: 
   var $539;
   var $540=(($539) & 65535);
   var $541=$i;
   var $542=$4;
   var $543=(($542+($541<<1))|0);
   HEAP16[(($543)>>1)]=$540;
   var $544=$t111;
   var $545=$544 & -65536;
   var $546=(($545)|(0))!=0;
   if ($546) { label = 91; break; } else { label = 90; break; }
  case 90: 
   var $548=$t111;
   var $554 = $548;label = 92; break;
  case 91: 
   var $550=$t111;
   var $551=(($550)|(0)) > 0;
   var $552=$551 ? 65535 : 0;
   var $554 = $552;label = 92; break;
  case 92: 
   var $554;
   var $555=(($554) & 65535);
   var $556=$i;
   var $557=((($556)+(1))|0);
   var $558=$4;
   var $559=(($558+($557<<1))|0);
   HEAP16[(($559)>>1)]=$555;
   var $560=$iscale7;
   var $561=$i;
   var $562=((($561)+(2))|0);
   var $563=$_src9;
   var $564=(($563+$562)|0);
   var $565=HEAP8[($564)];
   var $566=(($565 << 24) >> 24);
   var $567=(Math.imul($560,$566)|0);
   var $568=$ishift8;
   var $569=((($567)+($568))|0);
   var $570=((($569)+(16384))|0);
   var $571=$570 >> 15;
   $t010=$571;
   var $572=$iscale7;
   var $573=$i;
   var $574=((($573)+(3))|0);
   var $575=$_src9;
   var $576=(($575+$574)|0);
   var $577=HEAP8[($576)];
   var $578=(($577 << 24) >> 24);
   var $579=(Math.imul($572,$578)|0);
   var $580=$ishift8;
   var $581=((($579)+($580))|0);
   var $582=((($581)+(16384))|0);
   var $583=$582 >> 15;
   $t111=$583;
   var $584=$t010;
   var $585=$584 & -65536;
   var $586=(($585)|(0))!=0;
   if ($586) { label = 94; break; } else { label = 93; break; }
  case 93: 
   var $588=$t010;
   var $594 = $588;label = 95; break;
  case 94: 
   var $590=$t010;
   var $591=(($590)|(0)) > 0;
   var $592=$591 ? 65535 : 0;
   var $594 = $592;label = 95; break;
  case 95: 
   var $594;
   var $595=(($594) & 65535);
   var $596=$i;
   var $597=((($596)+(2))|0);
   var $598=$4;
   var $599=(($598+($597<<1))|0);
   HEAP16[(($599)>>1)]=$595;
   var $600=$t111;
   var $601=$600 & -65536;
   var $602=(($601)|(0))!=0;
   if ($602) { label = 97; break; } else { label = 96; break; }
  case 96: 
   var $604=$t111;
   var $610 = $604;label = 98; break;
  case 97: 
   var $606=$t111;
   var $607=(($606)|(0)) > 0;
   var $608=$607 ? 65535 : 0;
   var $610 = $608;label = 98; break;
  case 98: 
   var $610;
   var $611=(($610) & 65535);
   var $612=$i;
   var $613=((($612)+(3))|0);
   var $614=$4;
   var $615=(($614+($613<<1))|0);
   HEAP16[(($615)>>1)]=$611;
   label = 99; break;
  case 99: 
   var $617=$i;
   var $618=((($617)+(4))|0);
   $i=$618;
   label = 85; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $621=$i;
   var $622=(($size)|0);
   var $623=HEAP32[(($622)>>2)];
   var $624=(($621)|(0)) < (($623)|(0));
   if ($624) { label = 102; break; } else { label = 107; break; }
  case 102: 
   var $626=$iscale7;
   var $627=$i;
   var $628=$_src9;
   var $629=(($628+$627)|0);
   var $630=HEAP8[($629)];
   var $631=(($630 << 24) >> 24);
   var $632=(Math.imul($626,$631)|0);
   var $633=$ishift8;
   var $634=((($632)+($633))|0);
   var $635=((($634)+(16384))|0);
   var $636=$635 >> 15;
   $t012=$636;
   var $637=$t012;
   var $638=$637 & -65536;
   var $639=(($638)|(0))!=0;
   if ($639) { label = 104; break; } else { label = 103; break; }
  case 103: 
   var $641=$t012;
   var $647 = $641;label = 105; break;
  case 104: 
   var $643=$t012;
   var $644=(($643)|(0)) > 0;
   var $645=$644 ? 65535 : 0;
   var $647 = $645;label = 105; break;
  case 105: 
   var $647;
   var $648=(($647) & 65535);
   var $649=$i;
   var $650=$4;
   var $651=(($650+($649<<1))|0);
   HEAP16[(($651)>>1)]=$648;
   label = 106; break;
  case 106: 
   var $653=$i;
   var $654=((($653)+(1))|0);
   $i=$654;
   label = 101; break;
  case 107: 
   label = 108; break;
  case 108: 
   var $657=$3;
   var $658=$_src9;
   var $659=(($658+$657)|0);
   $_src9=$659;
   var $660=$5;
   var $661=$4;
   var $662=(($661+($660<<1))|0);
   $4=$662;
   label = 83; break;
  case 109: 
   label = 138; break;
  case 110: 
   var $665=$2;
   $_src13=$665;
   var $666=$3;
   var $667=(((($666)>>>(0)))&-1);
   $3=$667;
   label = 111; break;
  case 111: 
   var $669=(($size+4)|0);
   var $670=HEAP32[(($669)>>2)];
   var $671=((($670)-(1))|0);
   HEAP32[(($669)>>2)]=$671;
   var $672=(($670)|(0))!=0;
   if ($672) { label = 112; break; } else { label = 137; break; }
  case 112: 
   $i=0;
   label = 113; break;
  case 113: 
   var $675=$i;
   var $676=(($size)|0);
   var $677=HEAP32[(($676)>>2)];
   var $678=((($677)-(4))|0);
   var $679=(($675)|(0)) <= (($678)|(0));
   if ($679) { label = 114; break; } else { label = 128; break; }
  case 114: 
   var $681=$6;
   var $682=$i;
   var $683=$_src13;
   var $684=(($683+$682)|0);
   var $685=HEAP8[($684)];
   var $686=(($685 << 24) >> 24);
   var $687=(($686)|(0));
   var $688=($681)*($687);
   var $689=$7;
   var $690=($688)+($689);
   var $691=__Z7cvRoundd($690);
   $t014=$691;
   var $692=$6;
   var $693=$i;
   var $694=((($693)+(1))|0);
   var $695=$_src13;
   var $696=(($695+$694)|0);
   var $697=HEAP8[($696)];
   var $698=(($697 << 24) >> 24);
   var $699=(($698)|(0));
   var $700=($692)*($699);
   var $701=$7;
   var $702=($700)+($701);
   var $703=__Z7cvRoundd($702);
   $t115=$703;
   var $704=$t014;
   var $705=$704 & -65536;
   var $706=(($705)|(0))!=0;
   if ($706) { label = 116; break; } else { label = 115; break; }
  case 115: 
   var $708=$t014;
   var $714 = $708;label = 117; break;
  case 116: 
   var $710=$t014;
   var $711=(($710)|(0)) > 0;
   var $712=$711 ? 65535 : 0;
   var $714 = $712;label = 117; break;
  case 117: 
   var $714;
   var $715=(($714) & 65535);
   var $716=$i;
   var $717=$4;
   var $718=(($717+($716<<1))|0);
   HEAP16[(($718)>>1)]=$715;
   var $719=$t115;
   var $720=$719 & -65536;
   var $721=(($720)|(0))!=0;
   if ($721) { label = 119; break; } else { label = 118; break; }
  case 118: 
   var $723=$t115;
   var $729 = $723;label = 120; break;
  case 119: 
   var $725=$t115;
   var $726=(($725)|(0)) > 0;
   var $727=$726 ? 65535 : 0;
   var $729 = $727;label = 120; break;
  case 120: 
   var $729;
   var $730=(($729) & 65535);
   var $731=$i;
   var $732=((($731)+(1))|0);
   var $733=$4;
   var $734=(($733+($732<<1))|0);
   HEAP16[(($734)>>1)]=$730;
   var $735=$6;
   var $736=$i;
   var $737=((($736)+(2))|0);
   var $738=$_src13;
   var $739=(($738+$737)|0);
   var $740=HEAP8[($739)];
   var $741=(($740 << 24) >> 24);
   var $742=(($741)|(0));
   var $743=($735)*($742);
   var $744=$7;
   var $745=($743)+($744);
   var $746=__Z7cvRoundd($745);
   $t014=$746;
   var $747=$6;
   var $748=$i;
   var $749=((($748)+(3))|0);
   var $750=$_src13;
   var $751=(($750+$749)|0);
   var $752=HEAP8[($751)];
   var $753=(($752 << 24) >> 24);
   var $754=(($753)|(0));
   var $755=($747)*($754);
   var $756=$7;
   var $757=($755)+($756);
   var $758=__Z7cvRoundd($757);
   $t115=$758;
   var $759=$t014;
   var $760=$759 & -65536;
   var $761=(($760)|(0))!=0;
   if ($761) { label = 122; break; } else { label = 121; break; }
  case 121: 
   var $763=$t014;
   var $769 = $763;label = 123; break;
  case 122: 
   var $765=$t014;
   var $766=(($765)|(0)) > 0;
   var $767=$766 ? 65535 : 0;
   var $769 = $767;label = 123; break;
  case 123: 
   var $769;
   var $770=(($769) & 65535);
   var $771=$i;
   var $772=((($771)+(2))|0);
   var $773=$4;
   var $774=(($773+($772<<1))|0);
   HEAP16[(($774)>>1)]=$770;
   var $775=$t115;
   var $776=$775 & -65536;
   var $777=(($776)|(0))!=0;
   if ($777) { label = 125; break; } else { label = 124; break; }
  case 124: 
   var $779=$t115;
   var $785 = $779;label = 126; break;
  case 125: 
   var $781=$t115;
   var $782=(($781)|(0)) > 0;
   var $783=$782 ? 65535 : 0;
   var $785 = $783;label = 126; break;
  case 126: 
   var $785;
   var $786=(($785) & 65535);
   var $787=$i;
   var $788=((($787)+(3))|0);
   var $789=$4;
   var $790=(($789+($788<<1))|0);
   HEAP16[(($790)>>1)]=$786;
   label = 127; break;
  case 127: 
   var $792=$i;
   var $793=((($792)+(4))|0);
   $i=$793;
   label = 113; break;
  case 128: 
   label = 129; break;
  case 129: 
   var $796=$i;
   var $797=(($size)|0);
   var $798=HEAP32[(($797)>>2)];
   var $799=(($796)|(0)) < (($798)|(0));
   if ($799) { label = 130; break; } else { label = 135; break; }
  case 130: 
   var $801=$6;
   var $802=$i;
   var $803=$_src13;
   var $804=(($803+$802)|0);
   var $805=HEAP8[($804)];
   var $806=(($805 << 24) >> 24);
   var $807=(($806)|(0));
   var $808=($801)*($807);
   var $809=$7;
   var $810=($808)+($809);
   var $811=__Z7cvRoundd($810);
   $t016=$811;
   var $812=$t016;
   var $813=$812 & -65536;
   var $814=(($813)|(0))!=0;
   if ($814) { label = 132; break; } else { label = 131; break; }
  case 131: 
   var $816=$t016;
   var $822 = $816;label = 133; break;
  case 132: 
   var $818=$t016;
   var $819=(($818)|(0)) > 0;
   var $820=$819 ? 65535 : 0;
   var $822 = $820;label = 133; break;
  case 133: 
   var $822;
   var $823=(($822) & 65535);
   var $824=$i;
   var $825=$4;
   var $826=(($825+($824<<1))|0);
   HEAP16[(($826)>>1)]=$823;
   label = 134; break;
  case 134: 
   var $828=$i;
   var $829=((($828)+(1))|0);
   $i=$829;
   label = 129; break;
  case 135: 
   label = 136; break;
  case 136: 
   var $832=$3;
   var $833=$_src13;
   var $834=(($833+$832)|0);
   $_src13=$834;
   var $835=$5;
   var $836=$4;
   var $837=(($836+($835<<1))|0);
   $4=$837;
   label = 111; break;
  case 137: 
   label = 138; break;
  case 138: 
   label = 139; break;
  case 139: 
   label = 343; break;
  case 140: 
   var $842=$6;
   var $843=Math.abs($842);
   var $844=$843 <= 1;
   if ($844) { label = 141; break; } else { label = 170; break; }
  case 141: 
   var $846=$7;
   var $847=Math.abs($846);
   var $848=$847 < 2.220446049250313e-16;
   if ($848) { label = 142; break; } else { label = 170; break; }
  case 142: 
   var $850=$6;
   var $851=($850)*(32768);
   var $852=__Z7cvRoundd($851);
   $iscale17=$852;
   var $853=$2;
   var $854=$853;
   $_src18=$854;
   var $855=$3;
   var $856=((((($855)>>>(0)))/(2))&-1);
   $3=$856;
   label = 143; break;
  case 143: 
   var $858=(($size+4)|0);
   var $859=HEAP32[(($858)>>2)];
   var $860=((($859)-(1))|0);
   HEAP32[(($858)>>2)]=$860;
   var $861=(($859)|(0))!=0;
   if ($861) { label = 144; break; } else { label = 169; break; }
  case 144: 
   $i=0;
   label = 145; break;
  case 145: 
   var $864=$i;
   var $865=(($size)|0);
   var $866=HEAP32[(($865)>>2)];
   var $867=((($866)-(4))|0);
   var $868=(($864)|(0)) <= (($867)|(0));
   if ($868) { label = 146; break; } else { label = 160; break; }
  case 146: 
   var $870=$iscale17;
   var $871=$i;
   var $872=$_src18;
   var $873=(($872+($871<<1))|0);
   var $874=HEAP16[(($873)>>1)];
   var $875=(($874)&(65535));
   var $876=(Math.imul($870,$875)|0);
   var $877=(($876)|0);
   var $878=((($877)+(16384))|0);
   var $879=$878 >> 15;
   $t019=$879;
   var $880=$iscale17;
   var $881=$i;
   var $882=((($881)+(1))|0);
   var $883=$_src18;
   var $884=(($883+($882<<1))|0);
   var $885=HEAP16[(($884)>>1)];
   var $886=(($885)&(65535));
   var $887=(Math.imul($880,$886)|0);
   var $888=(($887)|0);
   var $889=((($888)+(16384))|0);
   var $890=$889 >> 15;
   $t120=$890;
   var $891=$t019;
   var $892=$891 & -65536;
   var $893=(($892)|(0))!=0;
   if ($893) { label = 148; break; } else { label = 147; break; }
  case 147: 
   var $895=$t019;
   var $901 = $895;label = 149; break;
  case 148: 
   var $897=$t019;
   var $898=(($897)|(0)) > 0;
   var $899=$898 ? 65535 : 0;
   var $901 = $899;label = 149; break;
  case 149: 
   var $901;
   var $902=(($901) & 65535);
   var $903=$i;
   var $904=$4;
   var $905=(($904+($903<<1))|0);
   HEAP16[(($905)>>1)]=$902;
   var $906=$t120;
   var $907=$906 & -65536;
   var $908=(($907)|(0))!=0;
   if ($908) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $910=$t120;
   var $916 = $910;label = 152; break;
  case 151: 
   var $912=$t120;
   var $913=(($912)|(0)) > 0;
   var $914=$913 ? 65535 : 0;
   var $916 = $914;label = 152; break;
  case 152: 
   var $916;
   var $917=(($916) & 65535);
   var $918=$i;
   var $919=((($918)+(1))|0);
   var $920=$4;
   var $921=(($920+($919<<1))|0);
   HEAP16[(($921)>>1)]=$917;
   var $922=$iscale17;
   var $923=$i;
   var $924=((($923)+(2))|0);
   var $925=$_src18;
   var $926=(($925+($924<<1))|0);
   var $927=HEAP16[(($926)>>1)];
   var $928=(($927)&(65535));
   var $929=(Math.imul($922,$928)|0);
   var $930=(($929)|0);
   var $931=((($930)+(16384))|0);
   var $932=$931 >> 15;
   $t019=$932;
   var $933=$iscale17;
   var $934=$i;
   var $935=((($934)+(3))|0);
   var $936=$_src18;
   var $937=(($936+($935<<1))|0);
   var $938=HEAP16[(($937)>>1)];
   var $939=(($938)&(65535));
   var $940=(Math.imul($933,$939)|0);
   var $941=(($940)|0);
   var $942=((($941)+(16384))|0);
   var $943=$942 >> 15;
   $t120=$943;
   var $944=$t019;
   var $945=$944 & -65536;
   var $946=(($945)|(0))!=0;
   if ($946) { label = 154; break; } else { label = 153; break; }
  case 153: 
   var $948=$t019;
   var $954 = $948;label = 155; break;
  case 154: 
   var $950=$t019;
   var $951=(($950)|(0)) > 0;
   var $952=$951 ? 65535 : 0;
   var $954 = $952;label = 155; break;
  case 155: 
   var $954;
   var $955=(($954) & 65535);
   var $956=$i;
   var $957=((($956)+(2))|0);
   var $958=$4;
   var $959=(($958+($957<<1))|0);
   HEAP16[(($959)>>1)]=$955;
   var $960=$t120;
   var $961=$960 & -65536;
   var $962=(($961)|(0))!=0;
   if ($962) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $964=$t120;
   var $970 = $964;label = 158; break;
  case 157: 
   var $966=$t120;
   var $967=(($966)|(0)) > 0;
   var $968=$967 ? 65535 : 0;
   var $970 = $968;label = 158; break;
  case 158: 
   var $970;
   var $971=(($970) & 65535);
   var $972=$i;
   var $973=((($972)+(3))|0);
   var $974=$4;
   var $975=(($974+($973<<1))|0);
   HEAP16[(($975)>>1)]=$971;
   label = 159; break;
  case 159: 
   var $977=$i;
   var $978=((($977)+(4))|0);
   $i=$978;
   label = 145; break;
  case 160: 
   label = 161; break;
  case 161: 
   var $981=$i;
   var $982=(($size)|0);
   var $983=HEAP32[(($982)>>2)];
   var $984=(($981)|(0)) < (($983)|(0));
   if ($984) { label = 162; break; } else { label = 167; break; }
  case 162: 
   var $986=$iscale17;
   var $987=$i;
   var $988=$_src18;
   var $989=(($988+($987<<1))|0);
   var $990=HEAP16[(($989)>>1)];
   var $991=(($990)&(65535));
   var $992=(Math.imul($986,$991)|0);
   var $993=(($992)|0);
   var $994=((($993)+(16384))|0);
   var $995=$994 >> 15;
   $t021=$995;
   var $996=$t021;
   var $997=$996 & -65536;
   var $998=(($997)|(0))!=0;
   if ($998) { label = 164; break; } else { label = 163; break; }
  case 163: 
   var $1000=$t021;
   var $1006 = $1000;label = 165; break;
  case 164: 
   var $1002=$t021;
   var $1003=(($1002)|(0)) > 0;
   var $1004=$1003 ? 65535 : 0;
   var $1006 = $1004;label = 165; break;
  case 165: 
   var $1006;
   var $1007=(($1006) & 65535);
   var $1008=$i;
   var $1009=$4;
   var $1010=(($1009+($1008<<1))|0);
   HEAP16[(($1010)>>1)]=$1007;
   label = 166; break;
  case 166: 
   var $1012=$i;
   var $1013=((($1012)+(1))|0);
   $i=$1013;
   label = 161; break;
  case 167: 
   label = 168; break;
  case 168: 
   var $1016=$3;
   var $1017=$_src18;
   var $1018=(($1017+($1016<<1))|0);
   $_src18=$1018;
   var $1019=$5;
   var $1020=$4;
   var $1021=(($1020+($1019<<1))|0);
   $4=$1021;
   label = 143; break;
  case 169: 
   label = 198; break;
  case 170: 
   var $1024=$2;
   var $1025=$1024;
   $_src22=$1025;
   var $1026=$3;
   var $1027=((((($1026)>>>(0)))/(2))&-1);
   $3=$1027;
   label = 171; break;
  case 171: 
   var $1029=(($size+4)|0);
   var $1030=HEAP32[(($1029)>>2)];
   var $1031=((($1030)-(1))|0);
   HEAP32[(($1029)>>2)]=$1031;
   var $1032=(($1030)|(0))!=0;
   if ($1032) { label = 172; break; } else { label = 197; break; }
  case 172: 
   $i=0;
   label = 173; break;
  case 173: 
   var $1035=$i;
   var $1036=(($size)|0);
   var $1037=HEAP32[(($1036)>>2)];
   var $1038=((($1037)-(4))|0);
   var $1039=(($1035)|(0)) <= (($1038)|(0));
   if ($1039) { label = 174; break; } else { label = 188; break; }
  case 174: 
   var $1041=$6;
   var $1042=$i;
   var $1043=$_src22;
   var $1044=(($1043+($1042<<1))|0);
   var $1045=HEAP16[(($1044)>>1)];
   var $1046=(($1045)&(65535));
   var $1047=(($1046)|(0));
   var $1048=($1041)*($1047);
   var $1049=$7;
   var $1050=($1048)+($1049);
   var $1051=__Z7cvRoundd($1050);
   $t023=$1051;
   var $1052=$6;
   var $1053=$i;
   var $1054=((($1053)+(1))|0);
   var $1055=$_src22;
   var $1056=(($1055+($1054<<1))|0);
   var $1057=HEAP16[(($1056)>>1)];
   var $1058=(($1057)&(65535));
   var $1059=(($1058)|(0));
   var $1060=($1052)*($1059);
   var $1061=$7;
   var $1062=($1060)+($1061);
   var $1063=__Z7cvRoundd($1062);
   $t124=$1063;
   var $1064=$t023;
   var $1065=$1064 & -65536;
   var $1066=(($1065)|(0))!=0;
   if ($1066) { label = 176; break; } else { label = 175; break; }
  case 175: 
   var $1068=$t023;
   var $1074 = $1068;label = 177; break;
  case 176: 
   var $1070=$t023;
   var $1071=(($1070)|(0)) > 0;
   var $1072=$1071 ? 65535 : 0;
   var $1074 = $1072;label = 177; break;
  case 177: 
   var $1074;
   var $1075=(($1074) & 65535);
   var $1076=$i;
   var $1077=$4;
   var $1078=(($1077+($1076<<1))|0);
   HEAP16[(($1078)>>1)]=$1075;
   var $1079=$t124;
   var $1080=$1079 & -65536;
   var $1081=(($1080)|(0))!=0;
   if ($1081) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $1083=$t124;
   var $1089 = $1083;label = 180; break;
  case 179: 
   var $1085=$t124;
   var $1086=(($1085)|(0)) > 0;
   var $1087=$1086 ? 65535 : 0;
   var $1089 = $1087;label = 180; break;
  case 180: 
   var $1089;
   var $1090=(($1089) & 65535);
   var $1091=$i;
   var $1092=((($1091)+(1))|0);
   var $1093=$4;
   var $1094=(($1093+($1092<<1))|0);
   HEAP16[(($1094)>>1)]=$1090;
   var $1095=$6;
   var $1096=$i;
   var $1097=((($1096)+(2))|0);
   var $1098=$_src22;
   var $1099=(($1098+($1097<<1))|0);
   var $1100=HEAP16[(($1099)>>1)];
   var $1101=(($1100)&(65535));
   var $1102=(($1101)|(0));
   var $1103=($1095)*($1102);
   var $1104=$7;
   var $1105=($1103)+($1104);
   var $1106=__Z7cvRoundd($1105);
   $t023=$1106;
   var $1107=$6;
   var $1108=$i;
   var $1109=((($1108)+(3))|0);
   var $1110=$_src22;
   var $1111=(($1110+($1109<<1))|0);
   var $1112=HEAP16[(($1111)>>1)];
   var $1113=(($1112)&(65535));
   var $1114=(($1113)|(0));
   var $1115=($1107)*($1114);
   var $1116=$7;
   var $1117=($1115)+($1116);
   var $1118=__Z7cvRoundd($1117);
   $t124=$1118;
   var $1119=$t023;
   var $1120=$1119 & -65536;
   var $1121=(($1120)|(0))!=0;
   if ($1121) { label = 182; break; } else { label = 181; break; }
  case 181: 
   var $1123=$t023;
   var $1129 = $1123;label = 183; break;
  case 182: 
   var $1125=$t023;
   var $1126=(($1125)|(0)) > 0;
   var $1127=$1126 ? 65535 : 0;
   var $1129 = $1127;label = 183; break;
  case 183: 
   var $1129;
   var $1130=(($1129) & 65535);
   var $1131=$i;
   var $1132=((($1131)+(2))|0);
   var $1133=$4;
   var $1134=(($1133+($1132<<1))|0);
   HEAP16[(($1134)>>1)]=$1130;
   var $1135=$t124;
   var $1136=$1135 & -65536;
   var $1137=(($1136)|(0))!=0;
   if ($1137) { label = 185; break; } else { label = 184; break; }
  case 184: 
   var $1139=$t124;
   var $1145 = $1139;label = 186; break;
  case 185: 
   var $1141=$t124;
   var $1142=(($1141)|(0)) > 0;
   var $1143=$1142 ? 65535 : 0;
   var $1145 = $1143;label = 186; break;
  case 186: 
   var $1145;
   var $1146=(($1145) & 65535);
   var $1147=$i;
   var $1148=((($1147)+(3))|0);
   var $1149=$4;
   var $1150=(($1149+($1148<<1))|0);
   HEAP16[(($1150)>>1)]=$1146;
   label = 187; break;
  case 187: 
   var $1152=$i;
   var $1153=((($1152)+(4))|0);
   $i=$1153;
   label = 173; break;
  case 188: 
   label = 189; break;
  case 189: 
   var $1156=$i;
   var $1157=(($size)|0);
   var $1158=HEAP32[(($1157)>>2)];
   var $1159=(($1156)|(0)) < (($1158)|(0));
   if ($1159) { label = 190; break; } else { label = 195; break; }
  case 190: 
   var $1161=$6;
   var $1162=$i;
   var $1163=$_src22;
   var $1164=(($1163+($1162<<1))|0);
   var $1165=HEAP16[(($1164)>>1)];
   var $1166=(($1165)&(65535));
   var $1167=(($1166)|(0));
   var $1168=($1161)*($1167);
   var $1169=$7;
   var $1170=($1168)+($1169);
   var $1171=__Z7cvRoundd($1170);
   $t025=$1171;
   var $1172=$t025;
   var $1173=$1172 & -65536;
   var $1174=(($1173)|(0))!=0;
   if ($1174) { label = 192; break; } else { label = 191; break; }
  case 191: 
   var $1176=$t025;
   var $1182 = $1176;label = 193; break;
  case 192: 
   var $1178=$t025;
   var $1179=(($1178)|(0)) > 0;
   var $1180=$1179 ? 65535 : 0;
   var $1182 = $1180;label = 193; break;
  case 193: 
   var $1182;
   var $1183=(($1182) & 65535);
   var $1184=$i;
   var $1185=$4;
   var $1186=(($1185+($1184<<1))|0);
   HEAP16[(($1186)>>1)]=$1183;
   label = 194; break;
  case 194: 
   var $1188=$i;
   var $1189=((($1188)+(1))|0);
   $i=$1189;
   label = 189; break;
  case 195: 
   label = 196; break;
  case 196: 
   var $1192=$3;
   var $1193=$_src22;
   var $1194=(($1193+($1192<<1))|0);
   $_src22=$1194;
   var $1195=$5;
   var $1196=$4;
   var $1197=(($1196+($1195<<1))|0);
   $4=$1197;
   label = 171; break;
  case 197: 
   label = 198; break;
  case 198: 
   label = 343; break;
  case 199: 
   var $1201=$6;
   var $1202=Math.abs($1201);
   var $1203=$1202 <= 1;
   if ($1203) { label = 200; break; } else { label = 229; break; }
  case 200: 
   var $1205=$7;
   var $1206=Math.abs($1205);
   var $1207=$1206 <= 32767.99998474121;
   if ($1207) { label = 201; break; } else { label = 229; break; }
  case 201: 
   var $1209=$6;
   var $1210=($1209)*(32768);
   var $1211=__Z7cvRoundd($1210);
   $iscale26=$1211;
   var $1212=$7;
   var $1213=($1212)*(32768);
   var $1214=__Z7cvRoundd($1213);
   $ishift27=$1214;
   var $1215=$2;
   var $1216=$1215;
   $_src28=$1216;
   var $1217=$3;
   var $1218=((((($1217)>>>(0)))/(2))&-1);
   $3=$1218;
   label = 202; break;
  case 202: 
   var $1220=(($size+4)|0);
   var $1221=HEAP32[(($1220)>>2)];
   var $1222=((($1221)-(1))|0);
   HEAP32[(($1220)>>2)]=$1222;
   var $1223=(($1221)|(0))!=0;
   if ($1223) { label = 203; break; } else { label = 228; break; }
  case 203: 
   $i=0;
   label = 204; break;
  case 204: 
   var $1226=$i;
   var $1227=(($size)|0);
   var $1228=HEAP32[(($1227)>>2)];
   var $1229=((($1228)-(4))|0);
   var $1230=(($1226)|(0)) <= (($1229)|(0));
   if ($1230) { label = 205; break; } else { label = 219; break; }
  case 205: 
   var $1232=$iscale26;
   var $1233=$i;
   var $1234=$_src28;
   var $1235=(($1234+($1233<<1))|0);
   var $1236=HEAP16[(($1235)>>1)];
   var $1237=(($1236 << 16) >> 16);
   var $1238=(Math.imul($1232,$1237)|0);
   var $1239=$ishift27;
   var $1240=((($1238)+($1239))|0);
   var $1241=((($1240)+(16384))|0);
   var $1242=$1241 >> 15;
   $t029=$1242;
   var $1243=$iscale26;
   var $1244=$i;
   var $1245=((($1244)+(1))|0);
   var $1246=$_src28;
   var $1247=(($1246+($1245<<1))|0);
   var $1248=HEAP16[(($1247)>>1)];
   var $1249=(($1248 << 16) >> 16);
   var $1250=(Math.imul($1243,$1249)|0);
   var $1251=$ishift27;
   var $1252=((($1250)+($1251))|0);
   var $1253=((($1252)+(16384))|0);
   var $1254=$1253 >> 15;
   $t130=$1254;
   var $1255=$t029;
   var $1256=$1255 & -65536;
   var $1257=(($1256)|(0))!=0;
   if ($1257) { label = 207; break; } else { label = 206; break; }
  case 206: 
   var $1259=$t029;
   var $1265 = $1259;label = 208; break;
  case 207: 
   var $1261=$t029;
   var $1262=(($1261)|(0)) > 0;
   var $1263=$1262 ? 65535 : 0;
   var $1265 = $1263;label = 208; break;
  case 208: 
   var $1265;
   var $1266=(($1265) & 65535);
   var $1267=$i;
   var $1268=$4;
   var $1269=(($1268+($1267<<1))|0);
   HEAP16[(($1269)>>1)]=$1266;
   var $1270=$t130;
   var $1271=$1270 & -65536;
   var $1272=(($1271)|(0))!=0;
   if ($1272) { label = 210; break; } else { label = 209; break; }
  case 209: 
   var $1274=$t130;
   var $1280 = $1274;label = 211; break;
  case 210: 
   var $1276=$t130;
   var $1277=(($1276)|(0)) > 0;
   var $1278=$1277 ? 65535 : 0;
   var $1280 = $1278;label = 211; break;
  case 211: 
   var $1280;
   var $1281=(($1280) & 65535);
   var $1282=$i;
   var $1283=((($1282)+(1))|0);
   var $1284=$4;
   var $1285=(($1284+($1283<<1))|0);
   HEAP16[(($1285)>>1)]=$1281;
   var $1286=$iscale26;
   var $1287=$i;
   var $1288=((($1287)+(2))|0);
   var $1289=$_src28;
   var $1290=(($1289+($1288<<1))|0);
   var $1291=HEAP16[(($1290)>>1)];
   var $1292=(($1291 << 16) >> 16);
   var $1293=(Math.imul($1286,$1292)|0);
   var $1294=$ishift27;
   var $1295=((($1293)+($1294))|0);
   var $1296=((($1295)+(16384))|0);
   var $1297=$1296 >> 15;
   $t029=$1297;
   var $1298=$iscale26;
   var $1299=$i;
   var $1300=((($1299)+(3))|0);
   var $1301=$_src28;
   var $1302=(($1301+($1300<<1))|0);
   var $1303=HEAP16[(($1302)>>1)];
   var $1304=(($1303 << 16) >> 16);
   var $1305=(Math.imul($1298,$1304)|0);
   var $1306=$ishift27;
   var $1307=((($1305)+($1306))|0);
   var $1308=((($1307)+(16384))|0);
   var $1309=$1308 >> 15;
   $t130=$1309;
   var $1310=$t029;
   var $1311=$1310 & -65536;
   var $1312=(($1311)|(0))!=0;
   if ($1312) { label = 213; break; } else { label = 212; break; }
  case 212: 
   var $1314=$t029;
   var $1320 = $1314;label = 214; break;
  case 213: 
   var $1316=$t029;
   var $1317=(($1316)|(0)) > 0;
   var $1318=$1317 ? 65535 : 0;
   var $1320 = $1318;label = 214; break;
  case 214: 
   var $1320;
   var $1321=(($1320) & 65535);
   var $1322=$i;
   var $1323=((($1322)+(2))|0);
   var $1324=$4;
   var $1325=(($1324+($1323<<1))|0);
   HEAP16[(($1325)>>1)]=$1321;
   var $1326=$t130;
   var $1327=$1326 & -65536;
   var $1328=(($1327)|(0))!=0;
   if ($1328) { label = 216; break; } else { label = 215; break; }
  case 215: 
   var $1330=$t130;
   var $1336 = $1330;label = 217; break;
  case 216: 
   var $1332=$t130;
   var $1333=(($1332)|(0)) > 0;
   var $1334=$1333 ? 65535 : 0;
   var $1336 = $1334;label = 217; break;
  case 217: 
   var $1336;
   var $1337=(($1336) & 65535);
   var $1338=$i;
   var $1339=((($1338)+(3))|0);
   var $1340=$4;
   var $1341=(($1340+($1339<<1))|0);
   HEAP16[(($1341)>>1)]=$1337;
   label = 218; break;
  case 218: 
   var $1343=$i;
   var $1344=((($1343)+(4))|0);
   $i=$1344;
   label = 204; break;
  case 219: 
   label = 220; break;
  case 220: 
   var $1347=$i;
   var $1348=(($size)|0);
   var $1349=HEAP32[(($1348)>>2)];
   var $1350=(($1347)|(0)) < (($1349)|(0));
   if ($1350) { label = 221; break; } else { label = 226; break; }
  case 221: 
   var $1352=$iscale26;
   var $1353=$i;
   var $1354=$_src28;
   var $1355=(($1354+($1353<<1))|0);
   var $1356=HEAP16[(($1355)>>1)];
   var $1357=(($1356 << 16) >> 16);
   var $1358=(Math.imul($1352,$1357)|0);
   var $1359=$ishift27;
   var $1360=((($1358)+($1359))|0);
   var $1361=((($1360)+(16384))|0);
   var $1362=$1361 >> 15;
   $t031=$1362;
   var $1363=$t031;
   var $1364=$1363 & -65536;
   var $1365=(($1364)|(0))!=0;
   if ($1365) { label = 223; break; } else { label = 222; break; }
  case 222: 
   var $1367=$t031;
   var $1373 = $1367;label = 224; break;
  case 223: 
   var $1369=$t031;
   var $1370=(($1369)|(0)) > 0;
   var $1371=$1370 ? 65535 : 0;
   var $1373 = $1371;label = 224; break;
  case 224: 
   var $1373;
   var $1374=(($1373) & 65535);
   var $1375=$i;
   var $1376=$4;
   var $1377=(($1376+($1375<<1))|0);
   HEAP16[(($1377)>>1)]=$1374;
   label = 225; break;
  case 225: 
   var $1379=$i;
   var $1380=((($1379)+(1))|0);
   $i=$1380;
   label = 220; break;
  case 226: 
   label = 227; break;
  case 227: 
   var $1383=$3;
   var $1384=$_src28;
   var $1385=(($1384+($1383<<1))|0);
   $_src28=$1385;
   var $1386=$5;
   var $1387=$4;
   var $1388=(($1387+($1386<<1))|0);
   $4=$1388;
   label = 202; break;
  case 228: 
   label = 257; break;
  case 229: 
   var $1391=$2;
   var $1392=$1391;
   $_src32=$1392;
   var $1393=$3;
   var $1394=((((($1393)>>>(0)))/(2))&-1);
   $3=$1394;
   label = 230; break;
  case 230: 
   var $1396=(($size+4)|0);
   var $1397=HEAP32[(($1396)>>2)];
   var $1398=((($1397)-(1))|0);
   HEAP32[(($1396)>>2)]=$1398;
   var $1399=(($1397)|(0))!=0;
   if ($1399) { label = 231; break; } else { label = 256; break; }
  case 231: 
   $i=0;
   label = 232; break;
  case 232: 
   var $1402=$i;
   var $1403=(($size)|0);
   var $1404=HEAP32[(($1403)>>2)];
   var $1405=((($1404)-(4))|0);
   var $1406=(($1402)|(0)) <= (($1405)|(0));
   if ($1406) { label = 233; break; } else { label = 247; break; }
  case 233: 
   var $1408=$6;
   var $1409=$i;
   var $1410=$_src32;
   var $1411=(($1410+($1409<<1))|0);
   var $1412=HEAP16[(($1411)>>1)];
   var $1413=(($1412 << 16) >> 16);
   var $1414=(($1413)|(0));
   var $1415=($1408)*($1414);
   var $1416=$7;
   var $1417=($1415)+($1416);
   var $1418=__Z7cvRoundd($1417);
   $t033=$1418;
   var $1419=$6;
   var $1420=$i;
   var $1421=((($1420)+(1))|0);
   var $1422=$_src32;
   var $1423=(($1422+($1421<<1))|0);
   var $1424=HEAP16[(($1423)>>1)];
   var $1425=(($1424 << 16) >> 16);
   var $1426=(($1425)|(0));
   var $1427=($1419)*($1426);
   var $1428=$7;
   var $1429=($1427)+($1428);
   var $1430=__Z7cvRoundd($1429);
   $t134=$1430;
   var $1431=$t033;
   var $1432=$1431 & -65536;
   var $1433=(($1432)|(0))!=0;
   if ($1433) { label = 235; break; } else { label = 234; break; }
  case 234: 
   var $1435=$t033;
   var $1441 = $1435;label = 236; break;
  case 235: 
   var $1437=$t033;
   var $1438=(($1437)|(0)) > 0;
   var $1439=$1438 ? 65535 : 0;
   var $1441 = $1439;label = 236; break;
  case 236: 
   var $1441;
   var $1442=(($1441) & 65535);
   var $1443=$i;
   var $1444=$4;
   var $1445=(($1444+($1443<<1))|0);
   HEAP16[(($1445)>>1)]=$1442;
   var $1446=$t134;
   var $1447=$1446 & -65536;
   var $1448=(($1447)|(0))!=0;
   if ($1448) { label = 238; break; } else { label = 237; break; }
  case 237: 
   var $1450=$t134;
   var $1456 = $1450;label = 239; break;
  case 238: 
   var $1452=$t134;
   var $1453=(($1452)|(0)) > 0;
   var $1454=$1453 ? 65535 : 0;
   var $1456 = $1454;label = 239; break;
  case 239: 
   var $1456;
   var $1457=(($1456) & 65535);
   var $1458=$i;
   var $1459=((($1458)+(1))|0);
   var $1460=$4;
   var $1461=(($1460+($1459<<1))|0);
   HEAP16[(($1461)>>1)]=$1457;
   var $1462=$6;
   var $1463=$i;
   var $1464=((($1463)+(2))|0);
   var $1465=$_src32;
   var $1466=(($1465+($1464<<1))|0);
   var $1467=HEAP16[(($1466)>>1)];
   var $1468=(($1467 << 16) >> 16);
   var $1469=(($1468)|(0));
   var $1470=($1462)*($1469);
   var $1471=$7;
   var $1472=($1470)+($1471);
   var $1473=__Z7cvRoundd($1472);
   $t033=$1473;
   var $1474=$6;
   var $1475=$i;
   var $1476=((($1475)+(3))|0);
   var $1477=$_src32;
   var $1478=(($1477+($1476<<1))|0);
   var $1479=HEAP16[(($1478)>>1)];
   var $1480=(($1479 << 16) >> 16);
   var $1481=(($1480)|(0));
   var $1482=($1474)*($1481);
   var $1483=$7;
   var $1484=($1482)+($1483);
   var $1485=__Z7cvRoundd($1484);
   $t134=$1485;
   var $1486=$t033;
   var $1487=$1486 & -65536;
   var $1488=(($1487)|(0))!=0;
   if ($1488) { label = 241; break; } else { label = 240; break; }
  case 240: 
   var $1490=$t033;
   var $1496 = $1490;label = 242; break;
  case 241: 
   var $1492=$t033;
   var $1493=(($1492)|(0)) > 0;
   var $1494=$1493 ? 65535 : 0;
   var $1496 = $1494;label = 242; break;
  case 242: 
   var $1496;
   var $1497=(($1496) & 65535);
   var $1498=$i;
   var $1499=((($1498)+(2))|0);
   var $1500=$4;
   var $1501=(($1500+($1499<<1))|0);
   HEAP16[(($1501)>>1)]=$1497;
   var $1502=$t134;
   var $1503=$1502 & -65536;
   var $1504=(($1503)|(0))!=0;
   if ($1504) { label = 244; break; } else { label = 243; break; }
  case 243: 
   var $1506=$t134;
   var $1512 = $1506;label = 245; break;
  case 244: 
   var $1508=$t134;
   var $1509=(($1508)|(0)) > 0;
   var $1510=$1509 ? 65535 : 0;
   var $1512 = $1510;label = 245; break;
  case 245: 
   var $1512;
   var $1513=(($1512) & 65535);
   var $1514=$i;
   var $1515=((($1514)+(3))|0);
   var $1516=$4;
   var $1517=(($1516+($1515<<1))|0);
   HEAP16[(($1517)>>1)]=$1513;
   label = 246; break;
  case 246: 
   var $1519=$i;
   var $1520=((($1519)+(4))|0);
   $i=$1520;
   label = 232; break;
  case 247: 
   label = 248; break;
  case 248: 
   var $1523=$i;
   var $1524=(($size)|0);
   var $1525=HEAP32[(($1524)>>2)];
   var $1526=(($1523)|(0)) < (($1525)|(0));
   if ($1526) { label = 249; break; } else { label = 254; break; }
  case 249: 
   var $1528=$6;
   var $1529=$i;
   var $1530=$_src32;
   var $1531=(($1530+($1529<<1))|0);
   var $1532=HEAP16[(($1531)>>1)];
   var $1533=(($1532 << 16) >> 16);
   var $1534=(($1533)|(0));
   var $1535=($1528)*($1534);
   var $1536=$7;
   var $1537=($1535)+($1536);
   var $1538=__Z7cvRoundd($1537);
   $t035=$1538;
   var $1539=$t035;
   var $1540=$1539 & -65536;
   var $1541=(($1540)|(0))!=0;
   if ($1541) { label = 251; break; } else { label = 250; break; }
  case 250: 
   var $1543=$t035;
   var $1549 = $1543;label = 252; break;
  case 251: 
   var $1545=$t035;
   var $1546=(($1545)|(0)) > 0;
   var $1547=$1546 ? 65535 : 0;
   var $1549 = $1547;label = 252; break;
  case 252: 
   var $1549;
   var $1550=(($1549) & 65535);
   var $1551=$i;
   var $1552=$4;
   var $1553=(($1552+($1551<<1))|0);
   HEAP16[(($1553)>>1)]=$1550;
   label = 253; break;
  case 253: 
   var $1555=$i;
   var $1556=((($1555)+(1))|0);
   $i=$1556;
   label = 248; break;
  case 254: 
   label = 255; break;
  case 255: 
   var $1559=$3;
   var $1560=$_src32;
   var $1561=(($1560+($1559<<1))|0);
   $_src32=$1561;
   var $1562=$5;
   var $1563=$4;
   var $1564=(($1563+($1562<<1))|0);
   $4=$1564;
   label = 230; break;
  case 256: 
   label = 257; break;
  case 257: 
   label = 343; break;
  case 258: 
   var $1568=$2;
   var $1569=$1568;
   $_src36=$1569;
   var $1570=$3;
   var $1571=((((($1570)>>>(0)))/(4))&-1);
   $3=$1571;
   label = 259; break;
  case 259: 
   var $1573=(($size+4)|0);
   var $1574=HEAP32[(($1573)>>2)];
   var $1575=((($1574)-(1))|0);
   HEAP32[(($1573)>>2)]=$1575;
   var $1576=(($1574)|(0))!=0;
   if ($1576) { label = 260; break; } else { label = 285; break; }
  case 260: 
   $i=0;
   label = 261; break;
  case 261: 
   var $1579=$i;
   var $1580=(($size)|0);
   var $1581=HEAP32[(($1580)>>2)];
   var $1582=((($1581)-(4))|0);
   var $1583=(($1579)|(0)) <= (($1582)|(0));
   if ($1583) { label = 262; break; } else { label = 276; break; }
  case 262: 
   var $1585=$6;
   var $1586=$i;
   var $1587=$_src36;
   var $1588=(($1587+($1586<<2))|0);
   var $1589=HEAP32[(($1588)>>2)];
   var $1590=(($1589)|(0));
   var $1591=($1585)*($1590);
   var $1592=$7;
   var $1593=($1591)+($1592);
   var $1594=__Z7cvRoundd($1593);
   $t037=$1594;
   var $1595=$6;
   var $1596=$i;
   var $1597=((($1596)+(1))|0);
   var $1598=$_src36;
   var $1599=(($1598+($1597<<2))|0);
   var $1600=HEAP32[(($1599)>>2)];
   var $1601=(($1600)|(0));
   var $1602=($1595)*($1601);
   var $1603=$7;
   var $1604=($1602)+($1603);
   var $1605=__Z7cvRoundd($1604);
   $t138=$1605;
   var $1606=$t037;
   var $1607=$1606 & -65536;
   var $1608=(($1607)|(0))!=0;
   if ($1608) { label = 264; break; } else { label = 263; break; }
  case 263: 
   var $1610=$t037;
   var $1616 = $1610;label = 265; break;
  case 264: 
   var $1612=$t037;
   var $1613=(($1612)|(0)) > 0;
   var $1614=$1613 ? 65535 : 0;
   var $1616 = $1614;label = 265; break;
  case 265: 
   var $1616;
   var $1617=(($1616) & 65535);
   var $1618=$i;
   var $1619=$4;
   var $1620=(($1619+($1618<<1))|0);
   HEAP16[(($1620)>>1)]=$1617;
   var $1621=$t138;
   var $1622=$1621 & -65536;
   var $1623=(($1622)|(0))!=0;
   if ($1623) { label = 267; break; } else { label = 266; break; }
  case 266: 
   var $1625=$t138;
   var $1631 = $1625;label = 268; break;
  case 267: 
   var $1627=$t138;
   var $1628=(($1627)|(0)) > 0;
   var $1629=$1628 ? 65535 : 0;
   var $1631 = $1629;label = 268; break;
  case 268: 
   var $1631;
   var $1632=(($1631) & 65535);
   var $1633=$i;
   var $1634=((($1633)+(1))|0);
   var $1635=$4;
   var $1636=(($1635+($1634<<1))|0);
   HEAP16[(($1636)>>1)]=$1632;
   var $1637=$6;
   var $1638=$i;
   var $1639=((($1638)+(2))|0);
   var $1640=$_src36;
   var $1641=(($1640+($1639<<2))|0);
   var $1642=HEAP32[(($1641)>>2)];
   var $1643=(($1642)|(0));
   var $1644=($1637)*($1643);
   var $1645=$7;
   var $1646=($1644)+($1645);
   var $1647=__Z7cvRoundd($1646);
   $t037=$1647;
   var $1648=$6;
   var $1649=$i;
   var $1650=((($1649)+(3))|0);
   var $1651=$_src36;
   var $1652=(($1651+($1650<<2))|0);
   var $1653=HEAP32[(($1652)>>2)];
   var $1654=(($1653)|(0));
   var $1655=($1648)*($1654);
   var $1656=$7;
   var $1657=($1655)+($1656);
   var $1658=__Z7cvRoundd($1657);
   $t138=$1658;
   var $1659=$t037;
   var $1660=$1659 & -65536;
   var $1661=(($1660)|(0))!=0;
   if ($1661) { label = 270; break; } else { label = 269; break; }
  case 269: 
   var $1663=$t037;
   var $1669 = $1663;label = 271; break;
  case 270: 
   var $1665=$t037;
   var $1666=(($1665)|(0)) > 0;
   var $1667=$1666 ? 65535 : 0;
   var $1669 = $1667;label = 271; break;
  case 271: 
   var $1669;
   var $1670=(($1669) & 65535);
   var $1671=$i;
   var $1672=((($1671)+(2))|0);
   var $1673=$4;
   var $1674=(($1673+($1672<<1))|0);
   HEAP16[(($1674)>>1)]=$1670;
   var $1675=$t138;
   var $1676=$1675 & -65536;
   var $1677=(($1676)|(0))!=0;
   if ($1677) { label = 273; break; } else { label = 272; break; }
  case 272: 
   var $1679=$t138;
   var $1685 = $1679;label = 274; break;
  case 273: 
   var $1681=$t138;
   var $1682=(($1681)|(0)) > 0;
   var $1683=$1682 ? 65535 : 0;
   var $1685 = $1683;label = 274; break;
  case 274: 
   var $1685;
   var $1686=(($1685) & 65535);
   var $1687=$i;
   var $1688=((($1687)+(3))|0);
   var $1689=$4;
   var $1690=(($1689+($1688<<1))|0);
   HEAP16[(($1690)>>1)]=$1686;
   label = 275; break;
  case 275: 
   var $1692=$i;
   var $1693=((($1692)+(4))|0);
   $i=$1693;
   label = 261; break;
  case 276: 
   label = 277; break;
  case 277: 
   var $1696=$i;
   var $1697=(($size)|0);
   var $1698=HEAP32[(($1697)>>2)];
   var $1699=(($1696)|(0)) < (($1698)|(0));
   if ($1699) { label = 278; break; } else { label = 283; break; }
  case 278: 
   var $1701=$6;
   var $1702=$i;
   var $1703=$_src36;
   var $1704=(($1703+($1702<<2))|0);
   var $1705=HEAP32[(($1704)>>2)];
   var $1706=(($1705)|(0));
   var $1707=($1701)*($1706);
   var $1708=$7;
   var $1709=($1707)+($1708);
   var $1710=__Z7cvRoundd($1709);
   $t039=$1710;
   var $1711=$t039;
   var $1712=$1711 & -65536;
   var $1713=(($1712)|(0))!=0;
   if ($1713) { label = 280; break; } else { label = 279; break; }
  case 279: 
   var $1715=$t039;
   var $1721 = $1715;label = 281; break;
  case 280: 
   var $1717=$t039;
   var $1718=(($1717)|(0)) > 0;
   var $1719=$1718 ? 65535 : 0;
   var $1721 = $1719;label = 281; break;
  case 281: 
   var $1721;
   var $1722=(($1721) & 65535);
   var $1723=$i;
   var $1724=$4;
   var $1725=(($1724+($1723<<1))|0);
   HEAP16[(($1725)>>1)]=$1722;
   label = 282; break;
  case 282: 
   var $1727=$i;
   var $1728=((($1727)+(1))|0);
   $i=$1728;
   label = 277; break;
  case 283: 
   label = 284; break;
  case 284: 
   var $1731=$3;
   var $1732=$_src36;
   var $1733=(($1732+($1731<<2))|0);
   $_src36=$1733;
   var $1734=$5;
   var $1735=$4;
   var $1736=(($1735+($1734<<1))|0);
   $4=$1736;
   label = 259; break;
  case 285: 
   label = 343; break;
  case 286: 
   var $1739=$2;
   var $1740=$1739;
   $_src40=$1740;
   var $1741=$3;
   var $1742=((((($1741)>>>(0)))/(4))&-1);
   $3=$1742;
   label = 287; break;
  case 287: 
   var $1744=(($size+4)|0);
   var $1745=HEAP32[(($1744)>>2)];
   var $1746=((($1745)-(1))|0);
   HEAP32[(($1744)>>2)]=$1746;
   var $1747=(($1745)|(0))!=0;
   if ($1747) { label = 288; break; } else { label = 313; break; }
  case 288: 
   $i=0;
   label = 289; break;
  case 289: 
   var $1750=$i;
   var $1751=(($size)|0);
   var $1752=HEAP32[(($1751)>>2)];
   var $1753=((($1752)-(4))|0);
   var $1754=(($1750)|(0)) <= (($1753)|(0));
   if ($1754) { label = 290; break; } else { label = 304; break; }
  case 290: 
   var $1756=$6;
   var $1757=$i;
   var $1758=$_src40;
   var $1759=(($1758+($1757<<2))|0);
   var $1760=HEAPF32[(($1759)>>2)];
   var $1761=$1760;
   var $1762=($1756)*($1761);
   var $1763=$7;
   var $1764=($1762)+($1763);
   var $1765=__Z7cvRoundd($1764);
   $t041=$1765;
   var $1766=$6;
   var $1767=$i;
   var $1768=((($1767)+(1))|0);
   var $1769=$_src40;
   var $1770=(($1769+($1768<<2))|0);
   var $1771=HEAPF32[(($1770)>>2)];
   var $1772=$1771;
   var $1773=($1766)*($1772);
   var $1774=$7;
   var $1775=($1773)+($1774);
   var $1776=__Z7cvRoundd($1775);
   $t142=$1776;
   var $1777=$t041;
   var $1778=$1777 & -65536;
   var $1779=(($1778)|(0))!=0;
   if ($1779) { label = 292; break; } else { label = 291; break; }
  case 291: 
   var $1781=$t041;
   var $1787 = $1781;label = 293; break;
  case 292: 
   var $1783=$t041;
   var $1784=(($1783)|(0)) > 0;
   var $1785=$1784 ? 65535 : 0;
   var $1787 = $1785;label = 293; break;
  case 293: 
   var $1787;
   var $1788=(($1787) & 65535);
   var $1789=$i;
   var $1790=$4;
   var $1791=(($1790+($1789<<1))|0);
   HEAP16[(($1791)>>1)]=$1788;
   var $1792=$t142;
   var $1793=$1792 & -65536;
   var $1794=(($1793)|(0))!=0;
   if ($1794) { label = 295; break; } else { label = 294; break; }
  case 294: 
   var $1796=$t142;
   var $1802 = $1796;label = 296; break;
  case 295: 
   var $1798=$t142;
   var $1799=(($1798)|(0)) > 0;
   var $1800=$1799 ? 65535 : 0;
   var $1802 = $1800;label = 296; break;
  case 296: 
   var $1802;
   var $1803=(($1802) & 65535);
   var $1804=$i;
   var $1805=((($1804)+(1))|0);
   var $1806=$4;
   var $1807=(($1806+($1805<<1))|0);
   HEAP16[(($1807)>>1)]=$1803;
   var $1808=$6;
   var $1809=$i;
   var $1810=((($1809)+(2))|0);
   var $1811=$_src40;
   var $1812=(($1811+($1810<<2))|0);
   var $1813=HEAPF32[(($1812)>>2)];
   var $1814=$1813;
   var $1815=($1808)*($1814);
   var $1816=$7;
   var $1817=($1815)+($1816);
   var $1818=__Z7cvRoundd($1817);
   $t041=$1818;
   var $1819=$6;
   var $1820=$i;
   var $1821=((($1820)+(3))|0);
   var $1822=$_src40;
   var $1823=(($1822+($1821<<2))|0);
   var $1824=HEAPF32[(($1823)>>2)];
   var $1825=$1824;
   var $1826=($1819)*($1825);
   var $1827=$7;
   var $1828=($1826)+($1827);
   var $1829=__Z7cvRoundd($1828);
   $t142=$1829;
   var $1830=$t041;
   var $1831=$1830 & -65536;
   var $1832=(($1831)|(0))!=0;
   if ($1832) { label = 298; break; } else { label = 297; break; }
  case 297: 
   var $1834=$t041;
   var $1840 = $1834;label = 299; break;
  case 298: 
   var $1836=$t041;
   var $1837=(($1836)|(0)) > 0;
   var $1838=$1837 ? 65535 : 0;
   var $1840 = $1838;label = 299; break;
  case 299: 
   var $1840;
   var $1841=(($1840) & 65535);
   var $1842=$i;
   var $1843=((($1842)+(2))|0);
   var $1844=$4;
   var $1845=(($1844+($1843<<1))|0);
   HEAP16[(($1845)>>1)]=$1841;
   var $1846=$t142;
   var $1847=$1846 & -65536;
   var $1848=(($1847)|(0))!=0;
   if ($1848) { label = 301; break; } else { label = 300; break; }
  case 300: 
   var $1850=$t142;
   var $1856 = $1850;label = 302; break;
  case 301: 
   var $1852=$t142;
   var $1853=(($1852)|(0)) > 0;
   var $1854=$1853 ? 65535 : 0;
   var $1856 = $1854;label = 302; break;
  case 302: 
   var $1856;
   var $1857=(($1856) & 65535);
   var $1858=$i;
   var $1859=((($1858)+(3))|0);
   var $1860=$4;
   var $1861=(($1860+($1859<<1))|0);
   HEAP16[(($1861)>>1)]=$1857;
   label = 303; break;
  case 303: 
   var $1863=$i;
   var $1864=((($1863)+(4))|0);
   $i=$1864;
   label = 289; break;
  case 304: 
   label = 305; break;
  case 305: 
   var $1867=$i;
   var $1868=(($size)|0);
   var $1869=HEAP32[(($1868)>>2)];
   var $1870=(($1867)|(0)) < (($1869)|(0));
   if ($1870) { label = 306; break; } else { label = 311; break; }
  case 306: 
   var $1872=$6;
   var $1873=$i;
   var $1874=$_src40;
   var $1875=(($1874+($1873<<2))|0);
   var $1876=HEAPF32[(($1875)>>2)];
   var $1877=$1876;
   var $1878=($1872)*($1877);
   var $1879=$7;
   var $1880=($1878)+($1879);
   var $1881=__Z7cvRoundd($1880);
   $t043=$1881;
   var $1882=$t043;
   var $1883=$1882 & -65536;
   var $1884=(($1883)|(0))!=0;
   if ($1884) { label = 308; break; } else { label = 307; break; }
  case 307: 
   var $1886=$t043;
   var $1892 = $1886;label = 309; break;
  case 308: 
   var $1888=$t043;
   var $1889=(($1888)|(0)) > 0;
   var $1890=$1889 ? 65535 : 0;
   var $1892 = $1890;label = 309; break;
  case 309: 
   var $1892;
   var $1893=(($1892) & 65535);
   var $1894=$i;
   var $1895=$4;
   var $1896=(($1895+($1894<<1))|0);
   HEAP16[(($1896)>>1)]=$1893;
   label = 310; break;
  case 310: 
   var $1898=$i;
   var $1899=((($1898)+(1))|0);
   $i=$1899;
   label = 305; break;
  case 311: 
   label = 312; break;
  case 312: 
   var $1902=$3;
   var $1903=$_src40;
   var $1904=(($1903+($1902<<2))|0);
   $_src40=$1904;
   var $1905=$5;
   var $1906=$4;
   var $1907=(($1906+($1905<<1))|0);
   $4=$1907;
   label = 287; break;
  case 313: 
   label = 343; break;
  case 314: 
   var $1910=$2;
   var $1911=$1910;
   $_src44=$1911;
   var $1912=$3;
   var $1913=((((($1912)>>>(0)))/(8))&-1);
   $3=$1913;
   label = 315; break;
  case 315: 
   var $1915=(($size+4)|0);
   var $1916=HEAP32[(($1915)>>2)];
   var $1917=((($1916)-(1))|0);
   HEAP32[(($1915)>>2)]=$1917;
   var $1918=(($1916)|(0))!=0;
   if ($1918) { label = 316; break; } else { label = 341; break; }
  case 316: 
   $i=0;
   label = 317; break;
  case 317: 
   var $1921=$i;
   var $1922=(($size)|0);
   var $1923=HEAP32[(($1922)>>2)];
   var $1924=((($1923)-(4))|0);
   var $1925=(($1921)|(0)) <= (($1924)|(0));
   if ($1925) { label = 318; break; } else { label = 332; break; }
  case 318: 
   var $1927=$6;
   var $1928=$i;
   var $1929=$_src44;
   var $1930=(($1929+($1928<<3))|0);
   var $1931=HEAPF64[(($1930)>>3)];
   var $1932=($1927)*($1931);
   var $1933=$7;
   var $1934=($1932)+($1933);
   var $1935=__Z7cvRoundd($1934);
   $t045=$1935;
   var $1936=$6;
   var $1937=$i;
   var $1938=((($1937)+(1))|0);
   var $1939=$_src44;
   var $1940=(($1939+($1938<<3))|0);
   var $1941=HEAPF64[(($1940)>>3)];
   var $1942=($1936)*($1941);
   var $1943=$7;
   var $1944=($1942)+($1943);
   var $1945=__Z7cvRoundd($1944);
   $t146=$1945;
   var $1946=$t045;
   var $1947=$1946 & -65536;
   var $1948=(($1947)|(0))!=0;
   if ($1948) { label = 320; break; } else { label = 319; break; }
  case 319: 
   var $1950=$t045;
   var $1956 = $1950;label = 321; break;
  case 320: 
   var $1952=$t045;
   var $1953=(($1952)|(0)) > 0;
   var $1954=$1953 ? 65535 : 0;
   var $1956 = $1954;label = 321; break;
  case 321: 
   var $1956;
   var $1957=(($1956) & 65535);
   var $1958=$i;
   var $1959=$4;
   var $1960=(($1959+($1958<<1))|0);
   HEAP16[(($1960)>>1)]=$1957;
   var $1961=$t146;
   var $1962=$1961 & -65536;
   var $1963=(($1962)|(0))!=0;
   if ($1963) { label = 323; break; } else { label = 322; break; }
  case 322: 
   var $1965=$t146;
   var $1971 = $1965;label = 324; break;
  case 323: 
   var $1967=$t146;
   var $1968=(($1967)|(0)) > 0;
   var $1969=$1968 ? 65535 : 0;
   var $1971 = $1969;label = 324; break;
  case 324: 
   var $1971;
   var $1972=(($1971) & 65535);
   var $1973=$i;
   var $1974=((($1973)+(1))|0);
   var $1975=$4;
   var $1976=(($1975+($1974<<1))|0);
   HEAP16[(($1976)>>1)]=$1972;
   var $1977=$6;
   var $1978=$i;
   var $1979=((($1978)+(2))|0);
   var $1980=$_src44;
   var $1981=(($1980+($1979<<3))|0);
   var $1982=HEAPF64[(($1981)>>3)];
   var $1983=($1977)*($1982);
   var $1984=$7;
   var $1985=($1983)+($1984);
   var $1986=__Z7cvRoundd($1985);
   $t045=$1986;
   var $1987=$6;
   var $1988=$i;
   var $1989=((($1988)+(3))|0);
   var $1990=$_src44;
   var $1991=(($1990+($1989<<3))|0);
   var $1992=HEAPF64[(($1991)>>3)];
   var $1993=($1987)*($1992);
   var $1994=$7;
   var $1995=($1993)+($1994);
   var $1996=__Z7cvRoundd($1995);
   $t146=$1996;
   var $1997=$t045;
   var $1998=$1997 & -65536;
   var $1999=(($1998)|(0))!=0;
   if ($1999) { label = 326; break; } else { label = 325; break; }
  case 325: 
   var $2001=$t045;
   var $2007 = $2001;label = 327; break;
  case 326: 
   var $2003=$t045;
   var $2004=(($2003)|(0)) > 0;
   var $2005=$2004 ? 65535 : 0;
   var $2007 = $2005;label = 327; break;
  case 327: 
   var $2007;
   var $2008=(($2007) & 65535);
   var $2009=$i;
   var $2010=((($2009)+(2))|0);
   var $2011=$4;
   var $2012=(($2011+($2010<<1))|0);
   HEAP16[(($2012)>>1)]=$2008;
   var $2013=$t146;
   var $2014=$2013 & -65536;
   var $2015=(($2014)|(0))!=0;
   if ($2015) { label = 329; break; } else { label = 328; break; }
  case 328: 
   var $2017=$t146;
   var $2023 = $2017;label = 330; break;
  case 329: 
   var $2019=$t146;
   var $2020=(($2019)|(0)) > 0;
   var $2021=$2020 ? 65535 : 0;
   var $2023 = $2021;label = 330; break;
  case 330: 
   var $2023;
   var $2024=(($2023) & 65535);
   var $2025=$i;
   var $2026=((($2025)+(3))|0);
   var $2027=$4;
   var $2028=(($2027+($2026<<1))|0);
   HEAP16[(($2028)>>1)]=$2024;
   label = 331; break;
  case 331: 
   var $2030=$i;
   var $2031=((($2030)+(4))|0);
   $i=$2031;
   label = 317; break;
  case 332: 
   label = 333; break;
  case 333: 
   var $2034=$i;
   var $2035=(($size)|0);
   var $2036=HEAP32[(($2035)>>2)];
   var $2037=(($2034)|(0)) < (($2036)|(0));
   if ($2037) { label = 334; break; } else { label = 339; break; }
  case 334: 
   var $2039=$6;
   var $2040=$i;
   var $2041=$_src44;
   var $2042=(($2041+($2040<<3))|0);
   var $2043=HEAPF64[(($2042)>>3)];
   var $2044=($2039)*($2043);
   var $2045=$7;
   var $2046=($2044)+($2045);
   var $2047=__Z7cvRoundd($2046);
   $t047=$2047;
   var $2048=$t047;
   var $2049=$2048 & -65536;
   var $2050=(($2049)|(0))!=0;
   if ($2050) { label = 336; break; } else { label = 335; break; }
  case 335: 
   var $2052=$t047;
   var $2058 = $2052;label = 337; break;
  case 336: 
   var $2054=$t047;
   var $2055=(($2054)|(0)) > 0;
   var $2056=$2055 ? 65535 : 0;
   var $2058 = $2056;label = 337; break;
  case 337: 
   var $2058;
   var $2059=(($2058) & 65535);
   var $2060=$i;
   var $2061=$4;
   var $2062=(($2061+($2060<<1))|0);
   HEAP16[(($2062)>>1)]=$2059;
   label = 338; break;
  case 338: 
   var $2064=$i;
   var $2065=((($2064)+(1))|0);
   $i=$2065;
   label = 333; break;
  case 339: 
   label = 340; break;
  case 340: 
   var $2068=$3;
   var $2069=$_src44;
   var $2070=(($2069+($2068<<3))|0);
   $_src44=$2070;
   var $2071=$5;
   var $2072=$4;
   var $2073=(($2072+($2071<<1))|0);
   $4=$2073;
   label = 315; break;
  case 341: 
   label = 343; break;
  case 342: 
   $1=-12;
   label = 344; break;
  case 343: 
   $1=0;
   label = 344; break;
  case 344: 
   var $2078=$1;
   STACKTOP = sp;
   return $2078;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvCvtScaleTo_16s_C1RPKhiPsi6CvSizeddi($src, $srcstep, $dst, $dststep, $size, $scale, $shift, $param) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $i;
   var $srctype;
   var $lut=sp;
   var $val;
   var $t;
   var $9=(sp)+(512);
   var $iscale;
   var $ishift;
   var $_src;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $t03;
   var $t14;
   var $t05;
   var $t6;
   var $10=(sp)+(520);
   var $iscale7;
   var $ishift8;
   var $_src9;
   var $t010;
   var $t111;
   var $t012;
   var $_src13;
   var $t014;
   var $t115;
   var $t016;
   var $iscale17;
   var $_src18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $t023;
   var $t124;
   var $t025;
   var $iscale26;
   var $ishift27;
   var $_src28;
   var $t029;
   var $t130;
   var $t031;
   var $_src32;
   var $t033;
   var $t134;
   var $t035;
   var $_src36;
   var $t037;
   var $t138;
   var $t039;
   var $_src40;
   var $t041;
   var $t142;
   var $t043;
   var $_src44;
   var $t045;
   var $t146;
   var $t047;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$scale;
   $7=$shift;
   $8=$param;
   var $11=$8;
   $srctype=$11;
   var $12=$5;
   var $13=((((($12)>>>(0)))/(2))&-1);
   $5=$13;
   var $14=$srctype;
   var $15=$14 & 7;
   if ((($15)|(0))==0) {
    label = 2; break;
   }
   else if ((($15)|(0))==1) {
    label = 71; break;
   }
   else if ((($15)|(0))==2) {
    label = 140; break;
   }
   else if ((($15)|(0))==3) {
    label = 199; break;
   }
   else if ((($15)|(0))==4) {
    label = 258; break;
   }
   else if ((($15)|(0))==5) {
    label = 286; break;
   }
   else if ((($15)|(0))==6) {
    label = 314; break;
   }
   else {
   label = 342; break;
   }
  case 2: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(Math.imul($18,$20)|0);
   var $22=(($21)|(0)) >= 256;
   if ($22) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $24=$7;
   $val=$24;
   $i=0;
   label = 4; break;
  case 4: 
   var $26=$i;
   var $27=(($26)|(0)) < 256;
   if ($27) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $29=$val;
   var $30=__Z7cvRoundd($29);
   $t=$30;
   var $31=$t;
   var $32=((($31)+(32768))|0);
   var $33=$32 & -65536;
   var $34=(($33)|(0))!=0;
   if ($34) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $36=$t;
   var $42 = $36;label = 8; break;
  case 7: 
   var $38=$t;
   var $39=(($38)|(0)) > 0;
   var $40=$39 ? 32767 : -32768;
   var $42 = $40;label = 8; break;
  case 8: 
   var $42;
   var $43=(($42) & 65535);
   var $44=$i;
   var $45=(($lut+($44<<1))|0);
   HEAP16[(($45)>>1)]=$43;
   label = 9; break;
  case 9: 
   var $47=$i;
   var $48=((($47)+(1))|0);
   $i=$48;
   var $49=$6;
   var $50=$val;
   var $51=($50)+($49);
   $val=$51;
   label = 4; break;
  case 10: 
   var $53=$2;
   var $54=$3;
   var $55=$4;
   var $56=$5;
   var $57=($56<<1);
   var $58=$9;
   var $59=$size;
   assert(8 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];
   var $60=(($lut)|0);
   var $61=__Z26icvLUT_Transform8u_16s_C1RPKhiPsi6CvSizePKs($53, $54, $55, $57, $9, $60);
   label = 70; break;
  case 11: 
   var $63=$6;
   var $64=Math.abs($63);
   var $65=$64 <= 128;
   if ($65) { label = 12; break; } else { label = 41; break; }
  case 12: 
   var $67=$7;
   var $68=Math.abs($67);
   var $69=$68 <= 32767.99998474121;
   if ($69) { label = 13; break; } else { label = 41; break; }
  case 13: 
   var $71=$6;
   var $72=($71)*(32768);
   var $73=__Z7cvRoundd($72);
   $iscale=$73;
   var $74=$7;
   var $75=($74)*(32768);
   var $76=__Z7cvRoundd($75);
   $ishift=$76;
   var $77=$2;
   $_src=$77;
   var $78=$3;
   var $79=(((($78)>>>(0)))&-1);
   $3=$79;
   label = 14; break;
  case 14: 
   var $81=(($size+4)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=((($82)-(1))|0);
   HEAP32[(($81)>>2)]=$83;
   var $84=(($82)|(0))!=0;
   if ($84) { label = 15; break; } else { label = 40; break; }
  case 15: 
   $i=0;
   label = 16; break;
  case 16: 
   var $87=$i;
   var $88=(($size)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=((($89)-(4))|0);
   var $91=(($87)|(0)) <= (($90)|(0));
   if ($91) { label = 17; break; } else { label = 31; break; }
  case 17: 
   var $93=$iscale;
   var $94=$i;
   var $95=$_src;
   var $96=(($95+$94)|0);
   var $97=HEAP8[($96)];
   var $98=(($97)&(255));
   var $99=(Math.imul($93,$98)|0);
   var $100=$ishift;
   var $101=((($99)+($100))|0);
   var $102=((($101)+(16384))|0);
   var $103=$102 >> 15;
   $t0=$103;
   var $104=$iscale;
   var $105=$i;
   var $106=((($105)+(1))|0);
   var $107=$_src;
   var $108=(($107+$106)|0);
   var $109=HEAP8[($108)];
   var $110=(($109)&(255));
   var $111=(Math.imul($104,$110)|0);
   var $112=$ishift;
   var $113=((($111)+($112))|0);
   var $114=((($113)+(16384))|0);
   var $115=$114 >> 15;
   $t1=$115;
   var $116=$t0;
   var $117=((($116)+(32768))|0);
   var $118=$117 & -65536;
   var $119=(($118)|(0))!=0;
   if ($119) { label = 19; break; } else { label = 18; break; }
  case 18: 
   var $121=$t0;
   var $127 = $121;label = 20; break;
  case 19: 
   var $123=$t0;
   var $124=(($123)|(0)) > 0;
   var $125=$124 ? 32767 : -32768;
   var $127 = $125;label = 20; break;
  case 20: 
   var $127;
   var $128=(($127) & 65535);
   var $129=$i;
   var $130=$4;
   var $131=(($130+($129<<1))|0);
   HEAP16[(($131)>>1)]=$128;
   var $132=$t1;
   var $133=((($132)+(32768))|0);
   var $134=$133 & -65536;
   var $135=(($134)|(0))!=0;
   if ($135) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $137=$t1;
   var $143 = $137;label = 23; break;
  case 22: 
   var $139=$t1;
   var $140=(($139)|(0)) > 0;
   var $141=$140 ? 32767 : -32768;
   var $143 = $141;label = 23; break;
  case 23: 
   var $143;
   var $144=(($143) & 65535);
   var $145=$i;
   var $146=((($145)+(1))|0);
   var $147=$4;
   var $148=(($147+($146<<1))|0);
   HEAP16[(($148)>>1)]=$144;
   var $149=$iscale;
   var $150=$i;
   var $151=((($150)+(2))|0);
   var $152=$_src;
   var $153=(($152+$151)|0);
   var $154=HEAP8[($153)];
   var $155=(($154)&(255));
   var $156=(Math.imul($149,$155)|0);
   var $157=$ishift;
   var $158=((($156)+($157))|0);
   var $159=((($158)+(16384))|0);
   var $160=$159 >> 15;
   $t0=$160;
   var $161=$iscale;
   var $162=$i;
   var $163=((($162)+(3))|0);
   var $164=$_src;
   var $165=(($164+$163)|0);
   var $166=HEAP8[($165)];
   var $167=(($166)&(255));
   var $168=(Math.imul($161,$167)|0);
   var $169=$ishift;
   var $170=((($168)+($169))|0);
   var $171=((($170)+(16384))|0);
   var $172=$171 >> 15;
   $t1=$172;
   var $173=$t0;
   var $174=((($173)+(32768))|0);
   var $175=$174 & -65536;
   var $176=(($175)|(0))!=0;
   if ($176) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $178=$t0;
   var $184 = $178;label = 26; break;
  case 25: 
   var $180=$t0;
   var $181=(($180)|(0)) > 0;
   var $182=$181 ? 32767 : -32768;
   var $184 = $182;label = 26; break;
  case 26: 
   var $184;
   var $185=(($184) & 65535);
   var $186=$i;
   var $187=((($186)+(2))|0);
   var $188=$4;
   var $189=(($188+($187<<1))|0);
   HEAP16[(($189)>>1)]=$185;
   var $190=$t1;
   var $191=((($190)+(32768))|0);
   var $192=$191 & -65536;
   var $193=(($192)|(0))!=0;
   if ($193) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $195=$t1;
   var $201 = $195;label = 29; break;
  case 28: 
   var $197=$t1;
   var $198=(($197)|(0)) > 0;
   var $199=$198 ? 32767 : -32768;
   var $201 = $199;label = 29; break;
  case 29: 
   var $201;
   var $202=(($201) & 65535);
   var $203=$i;
   var $204=((($203)+(3))|0);
   var $205=$4;
   var $206=(($205+($204<<1))|0);
   HEAP16[(($206)>>1)]=$202;
   label = 30; break;
  case 30: 
   var $208=$i;
   var $209=((($208)+(4))|0);
   $i=$209;
   label = 16; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $212=$i;
   var $213=(($size)|0);
   var $214=HEAP32[(($213)>>2)];
   var $215=(($212)|(0)) < (($214)|(0));
   if ($215) { label = 33; break; } else { label = 38; break; }
  case 33: 
   var $217=$iscale;
   var $218=$i;
   var $219=$_src;
   var $220=(($219+$218)|0);
   var $221=HEAP8[($220)];
   var $222=(($221)&(255));
   var $223=(Math.imul($217,$222)|0);
   var $224=$ishift;
   var $225=((($223)+($224))|0);
   var $226=((($225)+(16384))|0);
   var $227=$226 >> 15;
   $t01=$227;
   var $228=$t01;
   var $229=((($228)+(32768))|0);
   var $230=$229 & -65536;
   var $231=(($230)|(0))!=0;
   if ($231) { label = 35; break; } else { label = 34; break; }
  case 34: 
   var $233=$t01;
   var $239 = $233;label = 36; break;
  case 35: 
   var $235=$t01;
   var $236=(($235)|(0)) > 0;
   var $237=$236 ? 32767 : -32768;
   var $239 = $237;label = 36; break;
  case 36: 
   var $239;
   var $240=(($239) & 65535);
   var $241=$i;
   var $242=$4;
   var $243=(($242+($241<<1))|0);
   HEAP16[(($243)>>1)]=$240;
   label = 37; break;
  case 37: 
   var $245=$i;
   var $246=((($245)+(1))|0);
   $i=$246;
   label = 32; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $249=$3;
   var $250=$_src;
   var $251=(($250+$249)|0);
   $_src=$251;
   var $252=$5;
   var $253=$4;
   var $254=(($253+($252<<1))|0);
   $4=$254;
   label = 14; break;
  case 40: 
   label = 69; break;
  case 41: 
   var $257=$2;
   $_src2=$257;
   var $258=$3;
   var $259=(((($258)>>>(0)))&-1);
   $3=$259;
   label = 42; break;
  case 42: 
   var $261=(($size+4)|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=((($262)-(1))|0);
   HEAP32[(($261)>>2)]=$263;
   var $264=(($262)|(0))!=0;
   if ($264) { label = 43; break; } else { label = 68; break; }
  case 43: 
   $i=0;
   label = 44; break;
  case 44: 
   var $267=$i;
   var $268=(($size)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=((($269)-(4))|0);
   var $271=(($267)|(0)) <= (($270)|(0));
   if ($271) { label = 45; break; } else { label = 59; break; }
  case 45: 
   var $273=$6;
   var $274=$i;
   var $275=$_src2;
   var $276=(($275+$274)|0);
   var $277=HEAP8[($276)];
   var $278=(($277)&(255));
   var $279=(($278)|(0));
   var $280=($273)*($279);
   var $281=$7;
   var $282=($280)+($281);
   var $283=__Z7cvRoundd($282);
   $t03=$283;
   var $284=$6;
   var $285=$i;
   var $286=((($285)+(1))|0);
   var $287=$_src2;
   var $288=(($287+$286)|0);
   var $289=HEAP8[($288)];
   var $290=(($289)&(255));
   var $291=(($290)|(0));
   var $292=($284)*($291);
   var $293=$7;
   var $294=($292)+($293);
   var $295=__Z7cvRoundd($294);
   $t14=$295;
   var $296=$t03;
   var $297=((($296)+(32768))|0);
   var $298=$297 & -65536;
   var $299=(($298)|(0))!=0;
   if ($299) { label = 47; break; } else { label = 46; break; }
  case 46: 
   var $301=$t03;
   var $307 = $301;label = 48; break;
  case 47: 
   var $303=$t03;
   var $304=(($303)|(0)) > 0;
   var $305=$304 ? 32767 : -32768;
   var $307 = $305;label = 48; break;
  case 48: 
   var $307;
   var $308=(($307) & 65535);
   var $309=$i;
   var $310=$4;
   var $311=(($310+($309<<1))|0);
   HEAP16[(($311)>>1)]=$308;
   var $312=$t14;
   var $313=((($312)+(32768))|0);
   var $314=$313 & -65536;
   var $315=(($314)|(0))!=0;
   if ($315) { label = 50; break; } else { label = 49; break; }
  case 49: 
   var $317=$t14;
   var $323 = $317;label = 51; break;
  case 50: 
   var $319=$t14;
   var $320=(($319)|(0)) > 0;
   var $321=$320 ? 32767 : -32768;
   var $323 = $321;label = 51; break;
  case 51: 
   var $323;
   var $324=(($323) & 65535);
   var $325=$i;
   var $326=((($325)+(1))|0);
   var $327=$4;
   var $328=(($327+($326<<1))|0);
   HEAP16[(($328)>>1)]=$324;
   var $329=$6;
   var $330=$i;
   var $331=((($330)+(2))|0);
   var $332=$_src2;
   var $333=(($332+$331)|0);
   var $334=HEAP8[($333)];
   var $335=(($334)&(255));
   var $336=(($335)|(0));
   var $337=($329)*($336);
   var $338=$7;
   var $339=($337)+($338);
   var $340=__Z7cvRoundd($339);
   $t03=$340;
   var $341=$6;
   var $342=$i;
   var $343=((($342)+(3))|0);
   var $344=$_src2;
   var $345=(($344+$343)|0);
   var $346=HEAP8[($345)];
   var $347=(($346)&(255));
   var $348=(($347)|(0));
   var $349=($341)*($348);
   var $350=$7;
   var $351=($349)+($350);
   var $352=__Z7cvRoundd($351);
   $t14=$352;
   var $353=$t03;
   var $354=((($353)+(32768))|0);
   var $355=$354 & -65536;
   var $356=(($355)|(0))!=0;
   if ($356) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $358=$t03;
   var $364 = $358;label = 54; break;
  case 53: 
   var $360=$t03;
   var $361=(($360)|(0)) > 0;
   var $362=$361 ? 32767 : -32768;
   var $364 = $362;label = 54; break;
  case 54: 
   var $364;
   var $365=(($364) & 65535);
   var $366=$i;
   var $367=((($366)+(2))|0);
   var $368=$4;
   var $369=(($368+($367<<1))|0);
   HEAP16[(($369)>>1)]=$365;
   var $370=$t14;
   var $371=((($370)+(32768))|0);
   var $372=$371 & -65536;
   var $373=(($372)|(0))!=0;
   if ($373) { label = 56; break; } else { label = 55; break; }
  case 55: 
   var $375=$t14;
   var $381 = $375;label = 57; break;
  case 56: 
   var $377=$t14;
   var $378=(($377)|(0)) > 0;
   var $379=$378 ? 32767 : -32768;
   var $381 = $379;label = 57; break;
  case 57: 
   var $381;
   var $382=(($381) & 65535);
   var $383=$i;
   var $384=((($383)+(3))|0);
   var $385=$4;
   var $386=(($385+($384<<1))|0);
   HEAP16[(($386)>>1)]=$382;
   label = 58; break;
  case 58: 
   var $388=$i;
   var $389=((($388)+(4))|0);
   $i=$389;
   label = 44; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $392=$i;
   var $393=(($size)|0);
   var $394=HEAP32[(($393)>>2)];
   var $395=(($392)|(0)) < (($394)|(0));
   if ($395) { label = 61; break; } else { label = 66; break; }
  case 61: 
   var $397=$6;
   var $398=$i;
   var $399=$_src2;
   var $400=(($399+$398)|0);
   var $401=HEAP8[($400)];
   var $402=(($401)&(255));
   var $403=(($402)|(0));
   var $404=($397)*($403);
   var $405=$7;
   var $406=($404)+($405);
   var $407=__Z7cvRoundd($406);
   $t05=$407;
   var $408=$t05;
   var $409=((($408)+(32768))|0);
   var $410=$409 & -65536;
   var $411=(($410)|(0))!=0;
   if ($411) { label = 63; break; } else { label = 62; break; }
  case 62: 
   var $413=$t05;
   var $419 = $413;label = 64; break;
  case 63: 
   var $415=$t05;
   var $416=(($415)|(0)) > 0;
   var $417=$416 ? 32767 : -32768;
   var $419 = $417;label = 64; break;
  case 64: 
   var $419;
   var $420=(($419) & 65535);
   var $421=$i;
   var $422=$4;
   var $423=(($422+($421<<1))|0);
   HEAP16[(($423)>>1)]=$420;
   label = 65; break;
  case 65: 
   var $425=$i;
   var $426=((($425)+(1))|0);
   $i=$426;
   label = 60; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $429=$3;
   var $430=$_src2;
   var $431=(($430+$429)|0);
   $_src2=$431;
   var $432=$5;
   var $433=$4;
   var $434=(($433+($432<<1))|0);
   $4=$434;
   label = 42; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   label = 343; break;
  case 71: 
   var $439=(($size)|0);
   var $440=HEAP32[(($439)>>2)];
   var $441=(($size+4)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=(Math.imul($440,$442)|0);
   var $444=(($443)|(0)) >= 256;
   if ($444) { label = 72; break; } else { label = 80; break; }
  case 72: 
   $i=0;
   label = 73; break;
  case 73: 
   var $447=$i;
   var $448=(($447)|(0)) < 256;
   if ($448) { label = 74; break; } else { label = 79; break; }
  case 74: 
   var $450=$i;
   var $451=(($450) & 255);
   var $452=(($451 << 24) >> 24);
   var $453=(($452)|(0));
   var $454=$6;
   var $455=($453)*($454);
   var $456=$7;
   var $457=($455)+($456);
   var $458=__Z7cvRoundd($457);
   $t6=$458;
   var $459=$t6;
   var $460=((($459)+(32768))|0);
   var $461=$460 & -65536;
   var $462=(($461)|(0))!=0;
   if ($462) { label = 76; break; } else { label = 75; break; }
  case 75: 
   var $464=$t6;
   var $470 = $464;label = 77; break;
  case 76: 
   var $466=$t6;
   var $467=(($466)|(0)) > 0;
   var $468=$467 ? 32767 : -32768;
   var $470 = $468;label = 77; break;
  case 77: 
   var $470;
   var $471=(($470) & 65535);
   var $472=$i;
   var $473=(($lut+($472<<1))|0);
   HEAP16[(($473)>>1)]=$471;
   label = 78; break;
  case 78: 
   var $475=$i;
   var $476=((($475)+(1))|0);
   $i=$476;
   label = 73; break;
  case 79: 
   var $478=$2;
   var $479=$3;
   var $480=$4;
   var $481=$5;
   var $482=($481<<1);
   var $483=$10;
   var $484=$size;
   assert(8 % 1 === 0);HEAP32[(($483)>>2)]=HEAP32[(($484)>>2)];HEAP32[((($483)+(4))>>2)]=HEAP32[((($484)+(4))>>2)];
   var $485=(($lut)|0);
   var $486=__Z26icvLUT_Transform8u_16s_C1RPKhiPsi6CvSizePKs($478, $479, $480, $482, $10, $485);
   label = 139; break;
  case 80: 
   var $488=$6;
   var $489=Math.abs($488);
   var $490=$489 <= 128;
   if ($490) { label = 81; break; } else { label = 110; break; }
  case 81: 
   var $492=$7;
   var $493=Math.abs($492);
   var $494=$493 <= 32767.99998474121;
   if ($494) { label = 82; break; } else { label = 110; break; }
  case 82: 
   var $496=$6;
   var $497=($496)*(32768);
   var $498=__Z7cvRoundd($497);
   $iscale7=$498;
   var $499=$7;
   var $500=($499)*(32768);
   var $501=__Z7cvRoundd($500);
   $ishift8=$501;
   var $502=$2;
   $_src9=$502;
   var $503=$3;
   var $504=(((($503)>>>(0)))&-1);
   $3=$504;
   label = 83; break;
  case 83: 
   var $506=(($size+4)|0);
   var $507=HEAP32[(($506)>>2)];
   var $508=((($507)-(1))|0);
   HEAP32[(($506)>>2)]=$508;
   var $509=(($507)|(0))!=0;
   if ($509) { label = 84; break; } else { label = 109; break; }
  case 84: 
   $i=0;
   label = 85; break;
  case 85: 
   var $512=$i;
   var $513=(($size)|0);
   var $514=HEAP32[(($513)>>2)];
   var $515=((($514)-(4))|0);
   var $516=(($512)|(0)) <= (($515)|(0));
   if ($516) { label = 86; break; } else { label = 100; break; }
  case 86: 
   var $518=$iscale7;
   var $519=$i;
   var $520=$_src9;
   var $521=(($520+$519)|0);
   var $522=HEAP8[($521)];
   var $523=(($522 << 24) >> 24);
   var $524=(Math.imul($518,$523)|0);
   var $525=$ishift8;
   var $526=((($524)+($525))|0);
   var $527=((($526)+(16384))|0);
   var $528=$527 >> 15;
   $t010=$528;
   var $529=$iscale7;
   var $530=$i;
   var $531=((($530)+(1))|0);
   var $532=$_src9;
   var $533=(($532+$531)|0);
   var $534=HEAP8[($533)];
   var $535=(($534 << 24) >> 24);
   var $536=(Math.imul($529,$535)|0);
   var $537=$ishift8;
   var $538=((($536)+($537))|0);
   var $539=((($538)+(16384))|0);
   var $540=$539 >> 15;
   $t111=$540;
   var $541=$t010;
   var $542=((($541)+(32768))|0);
   var $543=$542 & -65536;
   var $544=(($543)|(0))!=0;
   if ($544) { label = 88; break; } else { label = 87; break; }
  case 87: 
   var $546=$t010;
   var $552 = $546;label = 89; break;
  case 88: 
   var $548=$t010;
   var $549=(($548)|(0)) > 0;
   var $550=$549 ? 32767 : -32768;
   var $552 = $550;label = 89; break;
  case 89: 
   var $552;
   var $553=(($552) & 65535);
   var $554=$i;
   var $555=$4;
   var $556=(($555+($554<<1))|0);
   HEAP16[(($556)>>1)]=$553;
   var $557=$t111;
   var $558=((($557)+(32768))|0);
   var $559=$558 & -65536;
   var $560=(($559)|(0))!=0;
   if ($560) { label = 91; break; } else { label = 90; break; }
  case 90: 
   var $562=$t111;
   var $568 = $562;label = 92; break;
  case 91: 
   var $564=$t111;
   var $565=(($564)|(0)) > 0;
   var $566=$565 ? 32767 : -32768;
   var $568 = $566;label = 92; break;
  case 92: 
   var $568;
   var $569=(($568) & 65535);
   var $570=$i;
   var $571=((($570)+(1))|0);
   var $572=$4;
   var $573=(($572+($571<<1))|0);
   HEAP16[(($573)>>1)]=$569;
   var $574=$iscale7;
   var $575=$i;
   var $576=((($575)+(2))|0);
   var $577=$_src9;
   var $578=(($577+$576)|0);
   var $579=HEAP8[($578)];
   var $580=(($579 << 24) >> 24);
   var $581=(Math.imul($574,$580)|0);
   var $582=$ishift8;
   var $583=((($581)+($582))|0);
   var $584=((($583)+(16384))|0);
   var $585=$584 >> 15;
   $t010=$585;
   var $586=$iscale7;
   var $587=$i;
   var $588=((($587)+(3))|0);
   var $589=$_src9;
   var $590=(($589+$588)|0);
   var $591=HEAP8[($590)];
   var $592=(($591 << 24) >> 24);
   var $593=(Math.imul($586,$592)|0);
   var $594=$ishift8;
   var $595=((($593)+($594))|0);
   var $596=((($595)+(16384))|0);
   var $597=$596 >> 15;
   $t111=$597;
   var $598=$t010;
   var $599=((($598)+(32768))|0);
   var $600=$599 & -65536;
   var $601=(($600)|(0))!=0;
   if ($601) { label = 94; break; } else { label = 93; break; }
  case 93: 
   var $603=$t010;
   var $609 = $603;label = 95; break;
  case 94: 
   var $605=$t010;
   var $606=(($605)|(0)) > 0;
   var $607=$606 ? 32767 : -32768;
   var $609 = $607;label = 95; break;
  case 95: 
   var $609;
   var $610=(($609) & 65535);
   var $611=$i;
   var $612=((($611)+(2))|0);
   var $613=$4;
   var $614=(($613+($612<<1))|0);
   HEAP16[(($614)>>1)]=$610;
   var $615=$t111;
   var $616=((($615)+(32768))|0);
   var $617=$616 & -65536;
   var $618=(($617)|(0))!=0;
   if ($618) { label = 97; break; } else { label = 96; break; }
  case 96: 
   var $620=$t111;
   var $626 = $620;label = 98; break;
  case 97: 
   var $622=$t111;
   var $623=(($622)|(0)) > 0;
   var $624=$623 ? 32767 : -32768;
   var $626 = $624;label = 98; break;
  case 98: 
   var $626;
   var $627=(($626) & 65535);
   var $628=$i;
   var $629=((($628)+(3))|0);
   var $630=$4;
   var $631=(($630+($629<<1))|0);
   HEAP16[(($631)>>1)]=$627;
   label = 99; break;
  case 99: 
   var $633=$i;
   var $634=((($633)+(4))|0);
   $i=$634;
   label = 85; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $637=$i;
   var $638=(($size)|0);
   var $639=HEAP32[(($638)>>2)];
   var $640=(($637)|(0)) < (($639)|(0));
   if ($640) { label = 102; break; } else { label = 107; break; }
  case 102: 
   var $642=$iscale7;
   var $643=$i;
   var $644=$_src9;
   var $645=(($644+$643)|0);
   var $646=HEAP8[($645)];
   var $647=(($646 << 24) >> 24);
   var $648=(Math.imul($642,$647)|0);
   var $649=$ishift8;
   var $650=((($648)+($649))|0);
   var $651=((($650)+(16384))|0);
   var $652=$651 >> 15;
   $t012=$652;
   var $653=$t012;
   var $654=((($653)+(32768))|0);
   var $655=$654 & -65536;
   var $656=(($655)|(0))!=0;
   if ($656) { label = 104; break; } else { label = 103; break; }
  case 103: 
   var $658=$t012;
   var $664 = $658;label = 105; break;
  case 104: 
   var $660=$t012;
   var $661=(($660)|(0)) > 0;
   var $662=$661 ? 32767 : -32768;
   var $664 = $662;label = 105; break;
  case 105: 
   var $664;
   var $665=(($664) & 65535);
   var $666=$i;
   var $667=$4;
   var $668=(($667+($666<<1))|0);
   HEAP16[(($668)>>1)]=$665;
   label = 106; break;
  case 106: 
   var $670=$i;
   var $671=((($670)+(1))|0);
   $i=$671;
   label = 101; break;
  case 107: 
   label = 108; break;
  case 108: 
   var $674=$3;
   var $675=$_src9;
   var $676=(($675+$674)|0);
   $_src9=$676;
   var $677=$5;
   var $678=$4;
   var $679=(($678+($677<<1))|0);
   $4=$679;
   label = 83; break;
  case 109: 
   label = 138; break;
  case 110: 
   var $682=$2;
   $_src13=$682;
   var $683=$3;
   var $684=(((($683)>>>(0)))&-1);
   $3=$684;
   label = 111; break;
  case 111: 
   var $686=(($size+4)|0);
   var $687=HEAP32[(($686)>>2)];
   var $688=((($687)-(1))|0);
   HEAP32[(($686)>>2)]=$688;
   var $689=(($687)|(0))!=0;
   if ($689) { label = 112; break; } else { label = 137; break; }
  case 112: 
   $i=0;
   label = 113; break;
  case 113: 
   var $692=$i;
   var $693=(($size)|0);
   var $694=HEAP32[(($693)>>2)];
   var $695=((($694)-(4))|0);
   var $696=(($692)|(0)) <= (($695)|(0));
   if ($696) { label = 114; break; } else { label = 128; break; }
  case 114: 
   var $698=$6;
   var $699=$i;
   var $700=$_src13;
   var $701=(($700+$699)|0);
   var $702=HEAP8[($701)];
   var $703=(($702 << 24) >> 24);
   var $704=(($703)|(0));
   var $705=($698)*($704);
   var $706=$7;
   var $707=($705)+($706);
   var $708=__Z7cvRoundd($707);
   $t014=$708;
   var $709=$6;
   var $710=$i;
   var $711=((($710)+(1))|0);
   var $712=$_src13;
   var $713=(($712+$711)|0);
   var $714=HEAP8[($713)];
   var $715=(($714 << 24) >> 24);
   var $716=(($715)|(0));
   var $717=($709)*($716);
   var $718=$7;
   var $719=($717)+($718);
   var $720=__Z7cvRoundd($719);
   $t115=$720;
   var $721=$t014;
   var $722=((($721)+(32768))|0);
   var $723=$722 & -65536;
   var $724=(($723)|(0))!=0;
   if ($724) { label = 116; break; } else { label = 115; break; }
  case 115: 
   var $726=$t014;
   var $732 = $726;label = 117; break;
  case 116: 
   var $728=$t014;
   var $729=(($728)|(0)) > 0;
   var $730=$729 ? 32767 : -32768;
   var $732 = $730;label = 117; break;
  case 117: 
   var $732;
   var $733=(($732) & 65535);
   var $734=$i;
   var $735=$4;
   var $736=(($735+($734<<1))|0);
   HEAP16[(($736)>>1)]=$733;
   var $737=$t115;
   var $738=((($737)+(32768))|0);
   var $739=$738 & -65536;
   var $740=(($739)|(0))!=0;
   if ($740) { label = 119; break; } else { label = 118; break; }
  case 118: 
   var $742=$t115;
   var $748 = $742;label = 120; break;
  case 119: 
   var $744=$t115;
   var $745=(($744)|(0)) > 0;
   var $746=$745 ? 32767 : -32768;
   var $748 = $746;label = 120; break;
  case 120: 
   var $748;
   var $749=(($748) & 65535);
   var $750=$i;
   var $751=((($750)+(1))|0);
   var $752=$4;
   var $753=(($752+($751<<1))|0);
   HEAP16[(($753)>>1)]=$749;
   var $754=$6;
   var $755=$i;
   var $756=((($755)+(2))|0);
   var $757=$_src13;
   var $758=(($757+$756)|0);
   var $759=HEAP8[($758)];
   var $760=(($759 << 24) >> 24);
   var $761=(($760)|(0));
   var $762=($754)*($761);
   var $763=$7;
   var $764=($762)+($763);
   var $765=__Z7cvRoundd($764);
   $t014=$765;
   var $766=$6;
   var $767=$i;
   var $768=((($767)+(3))|0);
   var $769=$_src13;
   var $770=(($769+$768)|0);
   var $771=HEAP8[($770)];
   var $772=(($771 << 24) >> 24);
   var $773=(($772)|(0));
   var $774=($766)*($773);
   var $775=$7;
   var $776=($774)+($775);
   var $777=__Z7cvRoundd($776);
   $t115=$777;
   var $778=$t014;
   var $779=((($778)+(32768))|0);
   var $780=$779 & -65536;
   var $781=(($780)|(0))!=0;
   if ($781) { label = 122; break; } else { label = 121; break; }
  case 121: 
   var $783=$t014;
   var $789 = $783;label = 123; break;
  case 122: 
   var $785=$t014;
   var $786=(($785)|(0)) > 0;
   var $787=$786 ? 32767 : -32768;
   var $789 = $787;label = 123; break;
  case 123: 
   var $789;
   var $790=(($789) & 65535);
   var $791=$i;
   var $792=((($791)+(2))|0);
   var $793=$4;
   var $794=(($793+($792<<1))|0);
   HEAP16[(($794)>>1)]=$790;
   var $795=$t115;
   var $796=((($795)+(32768))|0);
   var $797=$796 & -65536;
   var $798=(($797)|(0))!=0;
   if ($798) { label = 125; break; } else { label = 124; break; }
  case 124: 
   var $800=$t115;
   var $806 = $800;label = 126; break;
  case 125: 
   var $802=$t115;
   var $803=(($802)|(0)) > 0;
   var $804=$803 ? 32767 : -32768;
   var $806 = $804;label = 126; break;
  case 126: 
   var $806;
   var $807=(($806) & 65535);
   var $808=$i;
   var $809=((($808)+(3))|0);
   var $810=$4;
   var $811=(($810+($809<<1))|0);
   HEAP16[(($811)>>1)]=$807;
   label = 127; break;
  case 127: 
   var $813=$i;
   var $814=((($813)+(4))|0);
   $i=$814;
   label = 113; break;
  case 128: 
   label = 129; break;
  case 129: 
   var $817=$i;
   var $818=(($size)|0);
   var $819=HEAP32[(($818)>>2)];
   var $820=(($817)|(0)) < (($819)|(0));
   if ($820) { label = 130; break; } else { label = 135; break; }
  case 130: 
   var $822=$6;
   var $823=$i;
   var $824=$_src13;
   var $825=(($824+$823)|0);
   var $826=HEAP8[($825)];
   var $827=(($826 << 24) >> 24);
   var $828=(($827)|(0));
   var $829=($822)*($828);
   var $830=$7;
   var $831=($829)+($830);
   var $832=__Z7cvRoundd($831);
   $t016=$832;
   var $833=$t016;
   var $834=((($833)+(32768))|0);
   var $835=$834 & -65536;
   var $836=(($835)|(0))!=0;
   if ($836) { label = 132; break; } else { label = 131; break; }
  case 131: 
   var $838=$t016;
   var $844 = $838;label = 133; break;
  case 132: 
   var $840=$t016;
   var $841=(($840)|(0)) > 0;
   var $842=$841 ? 32767 : -32768;
   var $844 = $842;label = 133; break;
  case 133: 
   var $844;
   var $845=(($844) & 65535);
   var $846=$i;
   var $847=$4;
   var $848=(($847+($846<<1))|0);
   HEAP16[(($848)>>1)]=$845;
   label = 134; break;
  case 134: 
   var $850=$i;
   var $851=((($850)+(1))|0);
   $i=$851;
   label = 129; break;
  case 135: 
   label = 136; break;
  case 136: 
   var $854=$3;
   var $855=$_src13;
   var $856=(($855+$854)|0);
   $_src13=$856;
   var $857=$5;
   var $858=$4;
   var $859=(($858+($857<<1))|0);
   $4=$859;
   label = 111; break;
  case 137: 
   label = 138; break;
  case 138: 
   label = 139; break;
  case 139: 
   label = 343; break;
  case 140: 
   var $864=$6;
   var $865=Math.abs($864);
   var $866=$865 <= 1;
   if ($866) { label = 141; break; } else { label = 170; break; }
  case 141: 
   var $868=$7;
   var $869=Math.abs($868);
   var $870=$869 < 2.220446049250313e-16;
   if ($870) { label = 142; break; } else { label = 170; break; }
  case 142: 
   var $872=$6;
   var $873=($872)*(32768);
   var $874=__Z7cvRoundd($873);
   $iscale17=$874;
   var $875=$2;
   var $876=$875;
   $_src18=$876;
   var $877=$3;
   var $878=((((($877)>>>(0)))/(2))&-1);
   $3=$878;
   label = 143; break;
  case 143: 
   var $880=(($size+4)|0);
   var $881=HEAP32[(($880)>>2)];
   var $882=((($881)-(1))|0);
   HEAP32[(($880)>>2)]=$882;
   var $883=(($881)|(0))!=0;
   if ($883) { label = 144; break; } else { label = 169; break; }
  case 144: 
   $i=0;
   label = 145; break;
  case 145: 
   var $886=$i;
   var $887=(($size)|0);
   var $888=HEAP32[(($887)>>2)];
   var $889=((($888)-(4))|0);
   var $890=(($886)|(0)) <= (($889)|(0));
   if ($890) { label = 146; break; } else { label = 160; break; }
  case 146: 
   var $892=$iscale17;
   var $893=$i;
   var $894=$_src18;
   var $895=(($894+($893<<1))|0);
   var $896=HEAP16[(($895)>>1)];
   var $897=(($896)&(65535));
   var $898=(Math.imul($892,$897)|0);
   var $899=(($898)|0);
   var $900=((($899)+(16384))|0);
   var $901=$900 >> 15;
   $t019=$901;
   var $902=$iscale17;
   var $903=$i;
   var $904=((($903)+(1))|0);
   var $905=$_src18;
   var $906=(($905+($904<<1))|0);
   var $907=HEAP16[(($906)>>1)];
   var $908=(($907)&(65535));
   var $909=(Math.imul($902,$908)|0);
   var $910=(($909)|0);
   var $911=((($910)+(16384))|0);
   var $912=$911 >> 15;
   $t120=$912;
   var $913=$t019;
   var $914=((($913)+(32768))|0);
   var $915=$914 & -65536;
   var $916=(($915)|(0))!=0;
   if ($916) { label = 148; break; } else { label = 147; break; }
  case 147: 
   var $918=$t019;
   var $924 = $918;label = 149; break;
  case 148: 
   var $920=$t019;
   var $921=(($920)|(0)) > 0;
   var $922=$921 ? 32767 : -32768;
   var $924 = $922;label = 149; break;
  case 149: 
   var $924;
   var $925=(($924) & 65535);
   var $926=$i;
   var $927=$4;
   var $928=(($927+($926<<1))|0);
   HEAP16[(($928)>>1)]=$925;
   var $929=$t120;
   var $930=((($929)+(32768))|0);
   var $931=$930 & -65536;
   var $932=(($931)|(0))!=0;
   if ($932) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $934=$t120;
   var $940 = $934;label = 152; break;
  case 151: 
   var $936=$t120;
   var $937=(($936)|(0)) > 0;
   var $938=$937 ? 32767 : -32768;
   var $940 = $938;label = 152; break;
  case 152: 
   var $940;
   var $941=(($940) & 65535);
   var $942=$i;
   var $943=((($942)+(1))|0);
   var $944=$4;
   var $945=(($944+($943<<1))|0);
   HEAP16[(($945)>>1)]=$941;
   var $946=$iscale17;
   var $947=$i;
   var $948=((($947)+(2))|0);
   var $949=$_src18;
   var $950=(($949+($948<<1))|0);
   var $951=HEAP16[(($950)>>1)];
   var $952=(($951)&(65535));
   var $953=(Math.imul($946,$952)|0);
   var $954=(($953)|0);
   var $955=((($954)+(16384))|0);
   var $956=$955 >> 15;
   $t019=$956;
   var $957=$iscale17;
   var $958=$i;
   var $959=((($958)+(3))|0);
   var $960=$_src18;
   var $961=(($960+($959<<1))|0);
   var $962=HEAP16[(($961)>>1)];
   var $963=(($962)&(65535));
   var $964=(Math.imul($957,$963)|0);
   var $965=(($964)|0);
   var $966=((($965)+(16384))|0);
   var $967=$966 >> 15;
   $t120=$967;
   var $968=$t019;
   var $969=((($968)+(32768))|0);
   var $970=$969 & -65536;
   var $971=(($970)|(0))!=0;
   if ($971) { label = 154; break; } else { label = 153; break; }
  case 153: 
   var $973=$t019;
   var $979 = $973;label = 155; break;
  case 154: 
   var $975=$t019;
   var $976=(($975)|(0)) > 0;
   var $977=$976 ? 32767 : -32768;
   var $979 = $977;label = 155; break;
  case 155: 
   var $979;
   var $980=(($979) & 65535);
   var $981=$i;
   var $982=((($981)+(2))|0);
   var $983=$4;
   var $984=(($983+($982<<1))|0);
   HEAP16[(($984)>>1)]=$980;
   var $985=$t120;
   var $986=((($985)+(32768))|0);
   var $987=$986 & -65536;
   var $988=(($987)|(0))!=0;
   if ($988) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $990=$t120;
   var $996 = $990;label = 158; break;
  case 157: 
   var $992=$t120;
   var $993=(($992)|(0)) > 0;
   var $994=$993 ? 32767 : -32768;
   var $996 = $994;label = 158; break;
  case 158: 
   var $996;
   var $997=(($996) & 65535);
   var $998=$i;
   var $999=((($998)+(3))|0);
   var $1000=$4;
   var $1001=(($1000+($999<<1))|0);
   HEAP16[(($1001)>>1)]=$997;
   label = 159; break;
  case 159: 
   var $1003=$i;
   var $1004=((($1003)+(4))|0);
   $i=$1004;
   label = 145; break;
  case 160: 
   label = 161; break;
  case 161: 
   var $1007=$i;
   var $1008=(($size)|0);
   var $1009=HEAP32[(($1008)>>2)];
   var $1010=(($1007)|(0)) < (($1009)|(0));
   if ($1010) { label = 162; break; } else { label = 167; break; }
  case 162: 
   var $1012=$iscale17;
   var $1013=$i;
   var $1014=$_src18;
   var $1015=(($1014+($1013<<1))|0);
   var $1016=HEAP16[(($1015)>>1)];
   var $1017=(($1016)&(65535));
   var $1018=(Math.imul($1012,$1017)|0);
   var $1019=(($1018)|0);
   var $1020=((($1019)+(16384))|0);
   var $1021=$1020 >> 15;
   $t021=$1021;
   var $1022=$t021;
   var $1023=((($1022)+(32768))|0);
   var $1024=$1023 & -65536;
   var $1025=(($1024)|(0))!=0;
   if ($1025) { label = 164; break; } else { label = 163; break; }
  case 163: 
   var $1027=$t021;
   var $1033 = $1027;label = 165; break;
  case 164: 
   var $1029=$t021;
   var $1030=(($1029)|(0)) > 0;
   var $1031=$1030 ? 32767 : -32768;
   var $1033 = $1031;label = 165; break;
  case 165: 
   var $1033;
   var $1034=(($1033) & 65535);
   var $1035=$i;
   var $1036=$4;
   var $1037=(($1036+($1035<<1))|0);
   HEAP16[(($1037)>>1)]=$1034;
   label = 166; break;
  case 166: 
   var $1039=$i;
   var $1040=((($1039)+(1))|0);
   $i=$1040;
   label = 161; break;
  case 167: 
   label = 168; break;
  case 168: 
   var $1043=$3;
   var $1044=$_src18;
   var $1045=(($1044+($1043<<1))|0);
   $_src18=$1045;
   var $1046=$5;
   var $1047=$4;
   var $1048=(($1047+($1046<<1))|0);
   $4=$1048;
   label = 143; break;
  case 169: 
   label = 198; break;
  case 170: 
   var $1051=$2;
   var $1052=$1051;
   $_src22=$1052;
   var $1053=$3;
   var $1054=((((($1053)>>>(0)))/(2))&-1);
   $3=$1054;
   label = 171; break;
  case 171: 
   var $1056=(($size+4)|0);
   var $1057=HEAP32[(($1056)>>2)];
   var $1058=((($1057)-(1))|0);
   HEAP32[(($1056)>>2)]=$1058;
   var $1059=(($1057)|(0))!=0;
   if ($1059) { label = 172; break; } else { label = 197; break; }
  case 172: 
   $i=0;
   label = 173; break;
  case 173: 
   var $1062=$i;
   var $1063=(($size)|0);
   var $1064=HEAP32[(($1063)>>2)];
   var $1065=((($1064)-(4))|0);
   var $1066=(($1062)|(0)) <= (($1065)|(0));
   if ($1066) { label = 174; break; } else { label = 188; break; }
  case 174: 
   var $1068=$6;
   var $1069=$i;
   var $1070=$_src22;
   var $1071=(($1070+($1069<<1))|0);
   var $1072=HEAP16[(($1071)>>1)];
   var $1073=(($1072)&(65535));
   var $1074=(($1073)|(0));
   var $1075=($1068)*($1074);
   var $1076=$7;
   var $1077=($1075)+($1076);
   var $1078=__Z7cvRoundd($1077);
   $t023=$1078;
   var $1079=$6;
   var $1080=$i;
   var $1081=((($1080)+(1))|0);
   var $1082=$_src22;
   var $1083=(($1082+($1081<<1))|0);
   var $1084=HEAP16[(($1083)>>1)];
   var $1085=(($1084)&(65535));
   var $1086=(($1085)|(0));
   var $1087=($1079)*($1086);
   var $1088=$7;
   var $1089=($1087)+($1088);
   var $1090=__Z7cvRoundd($1089);
   $t124=$1090;
   var $1091=$t023;
   var $1092=((($1091)+(32768))|0);
   var $1093=$1092 & -65536;
   var $1094=(($1093)|(0))!=0;
   if ($1094) { label = 176; break; } else { label = 175; break; }
  case 175: 
   var $1096=$t023;
   var $1102 = $1096;label = 177; break;
  case 176: 
   var $1098=$t023;
   var $1099=(($1098)|(0)) > 0;
   var $1100=$1099 ? 32767 : -32768;
   var $1102 = $1100;label = 177; break;
  case 177: 
   var $1102;
   var $1103=(($1102) & 65535);
   var $1104=$i;
   var $1105=$4;
   var $1106=(($1105+($1104<<1))|0);
   HEAP16[(($1106)>>1)]=$1103;
   var $1107=$t124;
   var $1108=((($1107)+(32768))|0);
   var $1109=$1108 & -65536;
   var $1110=(($1109)|(0))!=0;
   if ($1110) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $1112=$t124;
   var $1118 = $1112;label = 180; break;
  case 179: 
   var $1114=$t124;
   var $1115=(($1114)|(0)) > 0;
   var $1116=$1115 ? 32767 : -32768;
   var $1118 = $1116;label = 180; break;
  case 180: 
   var $1118;
   var $1119=(($1118) & 65535);
   var $1120=$i;
   var $1121=((($1120)+(1))|0);
   var $1122=$4;
   var $1123=(($1122+($1121<<1))|0);
   HEAP16[(($1123)>>1)]=$1119;
   var $1124=$6;
   var $1125=$i;
   var $1126=((($1125)+(2))|0);
   var $1127=$_src22;
   var $1128=(($1127+($1126<<1))|0);
   var $1129=HEAP16[(($1128)>>1)];
   var $1130=(($1129)&(65535));
   var $1131=(($1130)|(0));
   var $1132=($1124)*($1131);
   var $1133=$7;
   var $1134=($1132)+($1133);
   var $1135=__Z7cvRoundd($1134);
   $t023=$1135;
   var $1136=$6;
   var $1137=$i;
   var $1138=((($1137)+(3))|0);
   var $1139=$_src22;
   var $1140=(($1139+($1138<<1))|0);
   var $1141=HEAP16[(($1140)>>1)];
   var $1142=(($1141)&(65535));
   var $1143=(($1142)|(0));
   var $1144=($1136)*($1143);
   var $1145=$7;
   var $1146=($1144)+($1145);
   var $1147=__Z7cvRoundd($1146);
   $t124=$1147;
   var $1148=$t023;
   var $1149=((($1148)+(32768))|0);
   var $1150=$1149 & -65536;
   var $1151=(($1150)|(0))!=0;
   if ($1151) { label = 182; break; } else { label = 181; break; }
  case 181: 
   var $1153=$t023;
   var $1159 = $1153;label = 183; break;
  case 182: 
   var $1155=$t023;
   var $1156=(($1155)|(0)) > 0;
   var $1157=$1156 ? 32767 : -32768;
   var $1159 = $1157;label = 183; break;
  case 183: 
   var $1159;
   var $1160=(($1159) & 65535);
   var $1161=$i;
   var $1162=((($1161)+(2))|0);
   var $1163=$4;
   var $1164=(($1163+($1162<<1))|0);
   HEAP16[(($1164)>>1)]=$1160;
   var $1165=$t124;
   var $1166=((($1165)+(32768))|0);
   var $1167=$1166 & -65536;
   var $1168=(($1167)|(0))!=0;
   if ($1168) { label = 185; break; } else { label = 184; break; }
  case 184: 
   var $1170=$t124;
   var $1176 = $1170;label = 186; break;
  case 185: 
   var $1172=$t124;
   var $1173=(($1172)|(0)) > 0;
   var $1174=$1173 ? 32767 : -32768;
   var $1176 = $1174;label = 186; break;
  case 186: 
   var $1176;
   var $1177=(($1176) & 65535);
   var $1178=$i;
   var $1179=((($1178)+(3))|0);
   var $1180=$4;
   var $1181=(($1180+($1179<<1))|0);
   HEAP16[(($1181)>>1)]=$1177;
   label = 187; break;
  case 187: 
   var $1183=$i;
   var $1184=((($1183)+(4))|0);
   $i=$1184;
   label = 173; break;
  case 188: 
   label = 189; break;
  case 189: 
   var $1187=$i;
   var $1188=(($size)|0);
   var $1189=HEAP32[(($1188)>>2)];
   var $1190=(($1187)|(0)) < (($1189)|(0));
   if ($1190) { label = 190; break; } else { label = 195; break; }
  case 190: 
   var $1192=$6;
   var $1193=$i;
   var $1194=$_src22;
   var $1195=(($1194+($1193<<1))|0);
   var $1196=HEAP16[(($1195)>>1)];
   var $1197=(($1196)&(65535));
   var $1198=(($1197)|(0));
   var $1199=($1192)*($1198);
   var $1200=$7;
   var $1201=($1199)+($1200);
   var $1202=__Z7cvRoundd($1201);
   $t025=$1202;
   var $1203=$t025;
   var $1204=((($1203)+(32768))|0);
   var $1205=$1204 & -65536;
   var $1206=(($1205)|(0))!=0;
   if ($1206) { label = 192; break; } else { label = 191; break; }
  case 191: 
   var $1208=$t025;
   var $1214 = $1208;label = 193; break;
  case 192: 
   var $1210=$t025;
   var $1211=(($1210)|(0)) > 0;
   var $1212=$1211 ? 32767 : -32768;
   var $1214 = $1212;label = 193; break;
  case 193: 
   var $1214;
   var $1215=(($1214) & 65535);
   var $1216=$i;
   var $1217=$4;
   var $1218=(($1217+($1216<<1))|0);
   HEAP16[(($1218)>>1)]=$1215;
   label = 194; break;
  case 194: 
   var $1220=$i;
   var $1221=((($1220)+(1))|0);
   $i=$1221;
   label = 189; break;
  case 195: 
   label = 196; break;
  case 196: 
   var $1224=$3;
   var $1225=$_src22;
   var $1226=(($1225+($1224<<1))|0);
   $_src22=$1226;
   var $1227=$5;
   var $1228=$4;
   var $1229=(($1228+($1227<<1))|0);
   $4=$1229;
   label = 171; break;
  case 197: 
   label = 198; break;
  case 198: 
   label = 343; break;
  case 199: 
   var $1233=$6;
   var $1234=Math.abs($1233);
   var $1235=$1234 <= 1;
   if ($1235) { label = 200; break; } else { label = 229; break; }
  case 200: 
   var $1237=$7;
   var $1238=Math.abs($1237);
   var $1239=$1238 <= 32767.99998474121;
   if ($1239) { label = 201; break; } else { label = 229; break; }
  case 201: 
   var $1241=$6;
   var $1242=($1241)*(32768);
   var $1243=__Z7cvRoundd($1242);
   $iscale26=$1243;
   var $1244=$7;
   var $1245=($1244)*(32768);
   var $1246=__Z7cvRoundd($1245);
   $ishift27=$1246;
   var $1247=$2;
   var $1248=$1247;
   $_src28=$1248;
   var $1249=$3;
   var $1250=((((($1249)>>>(0)))/(2))&-1);
   $3=$1250;
   label = 202; break;
  case 202: 
   var $1252=(($size+4)|0);
   var $1253=HEAP32[(($1252)>>2)];
   var $1254=((($1253)-(1))|0);
   HEAP32[(($1252)>>2)]=$1254;
   var $1255=(($1253)|(0))!=0;
   if ($1255) { label = 203; break; } else { label = 228; break; }
  case 203: 
   $i=0;
   label = 204; break;
  case 204: 
   var $1258=$i;
   var $1259=(($size)|0);
   var $1260=HEAP32[(($1259)>>2)];
   var $1261=((($1260)-(4))|0);
   var $1262=(($1258)|(0)) <= (($1261)|(0));
   if ($1262) { label = 205; break; } else { label = 219; break; }
  case 205: 
   var $1264=$iscale26;
   var $1265=$i;
   var $1266=$_src28;
   var $1267=(($1266+($1265<<1))|0);
   var $1268=HEAP16[(($1267)>>1)];
   var $1269=(($1268 << 16) >> 16);
   var $1270=(Math.imul($1264,$1269)|0);
   var $1271=$ishift27;
   var $1272=((($1270)+($1271))|0);
   var $1273=((($1272)+(16384))|0);
   var $1274=$1273 >> 15;
   $t029=$1274;
   var $1275=$iscale26;
   var $1276=$i;
   var $1277=((($1276)+(1))|0);
   var $1278=$_src28;
   var $1279=(($1278+($1277<<1))|0);
   var $1280=HEAP16[(($1279)>>1)];
   var $1281=(($1280 << 16) >> 16);
   var $1282=(Math.imul($1275,$1281)|0);
   var $1283=$ishift27;
   var $1284=((($1282)+($1283))|0);
   var $1285=((($1284)+(16384))|0);
   var $1286=$1285 >> 15;
   $t130=$1286;
   var $1287=$t029;
   var $1288=((($1287)+(32768))|0);
   var $1289=$1288 & -65536;
   var $1290=(($1289)|(0))!=0;
   if ($1290) { label = 207; break; } else { label = 206; break; }
  case 206: 
   var $1292=$t029;
   var $1298 = $1292;label = 208; break;
  case 207: 
   var $1294=$t029;
   var $1295=(($1294)|(0)) > 0;
   var $1296=$1295 ? 32767 : -32768;
   var $1298 = $1296;label = 208; break;
  case 208: 
   var $1298;
   var $1299=(($1298) & 65535);
   var $1300=$i;
   var $1301=$4;
   var $1302=(($1301+($1300<<1))|0);
   HEAP16[(($1302)>>1)]=$1299;
   var $1303=$t130;
   var $1304=((($1303)+(32768))|0);
   var $1305=$1304 & -65536;
   var $1306=(($1305)|(0))!=0;
   if ($1306) { label = 210; break; } else { label = 209; break; }
  case 209: 
   var $1308=$t130;
   var $1314 = $1308;label = 211; break;
  case 210: 
   var $1310=$t130;
   var $1311=(($1310)|(0)) > 0;
   var $1312=$1311 ? 32767 : -32768;
   var $1314 = $1312;label = 211; break;
  case 211: 
   var $1314;
   var $1315=(($1314) & 65535);
   var $1316=$i;
   var $1317=((($1316)+(1))|0);
   var $1318=$4;
   var $1319=(($1318+($1317<<1))|0);
   HEAP16[(($1319)>>1)]=$1315;
   var $1320=$iscale26;
   var $1321=$i;
   var $1322=((($1321)+(2))|0);
   var $1323=$_src28;
   var $1324=(($1323+($1322<<1))|0);
   var $1325=HEAP16[(($1324)>>1)];
   var $1326=(($1325 << 16) >> 16);
   var $1327=(Math.imul($1320,$1326)|0);
   var $1328=$ishift27;
   var $1329=((($1327)+($1328))|0);
   var $1330=((($1329)+(16384))|0);
   var $1331=$1330 >> 15;
   $t029=$1331;
   var $1332=$iscale26;
   var $1333=$i;
   var $1334=((($1333)+(3))|0);
   var $1335=$_src28;
   var $1336=(($1335+($1334<<1))|0);
   var $1337=HEAP16[(($1336)>>1)];
   var $1338=(($1337 << 16) >> 16);
   var $1339=(Math.imul($1332,$1338)|0);
   var $1340=$ishift27;
   var $1341=((($1339)+($1340))|0);
   var $1342=((($1341)+(16384))|0);
   var $1343=$1342 >> 15;
   $t130=$1343;
   var $1344=$t029;
   var $1345=((($1344)+(32768))|0);
   var $1346=$1345 & -65536;
   var $1347=(($1346)|(0))!=0;
   if ($1347) { label = 213; break; } else { label = 212; break; }
  case 212: 
   var $1349=$t029;
   var $1355 = $1349;label = 214; break;
  case 213: 
   var $1351=$t029;
   var $1352=(($1351)|(0)) > 0;
   var $1353=$1352 ? 32767 : -32768;
   var $1355 = $1353;label = 214; break;
  case 214: 
   var $1355;
   var $1356=(($1355) & 65535);
   var $1357=$i;
   var $1358=((($1357)+(2))|0);
   var $1359=$4;
   var $1360=(($1359+($1358<<1))|0);
   HEAP16[(($1360)>>1)]=$1356;
   var $1361=$t130;
   var $1362=((($1361)+(32768))|0);
   var $1363=$1362 & -65536;
   var $1364=(($1363)|(0))!=0;
   if ($1364) { label = 216; break; } else { label = 215; break; }
  case 215: 
   var $1366=$t130;
   var $1372 = $1366;label = 217; break;
  case 216: 
   var $1368=$t130;
   var $1369=(($1368)|(0)) > 0;
   var $1370=$1369 ? 32767 : -32768;
   var $1372 = $1370;label = 217; break;
  case 217: 
   var $1372;
   var $1373=(($1372) & 65535);
   var $1374=$i;
   var $1375=((($1374)+(3))|0);
   var $1376=$4;
   var $1377=(($1376+($1375<<1))|0);
   HEAP16[(($1377)>>1)]=$1373;
   label = 218; break;
  case 218: 
   var $1379=$i;
   var $1380=((($1379)+(4))|0);
   $i=$1380;
   label = 204; break;
  case 219: 
   label = 220; break;
  case 220: 
   var $1383=$i;
   var $1384=(($size)|0);
   var $1385=HEAP32[(($1384)>>2)];
   var $1386=(($1383)|(0)) < (($1385)|(0));
   if ($1386) { label = 221; break; } else { label = 226; break; }
  case 221: 
   var $1388=$iscale26;
   var $1389=$i;
   var $1390=$_src28;
   var $1391=(($1390+($1389<<1))|0);
   var $1392=HEAP16[(($1391)>>1)];
   var $1393=(($1392 << 16) >> 16);
   var $1394=(Math.imul($1388,$1393)|0);
   var $1395=$ishift27;
   var $1396=((($1394)+($1395))|0);
   var $1397=((($1396)+(16384))|0);
   var $1398=$1397 >> 15;
   $t031=$1398;
   var $1399=$t031;
   var $1400=((($1399)+(32768))|0);
   var $1401=$1400 & -65536;
   var $1402=(($1401)|(0))!=0;
   if ($1402) { label = 223; break; } else { label = 222; break; }
  case 222: 
   var $1404=$t031;
   var $1410 = $1404;label = 224; break;
  case 223: 
   var $1406=$t031;
   var $1407=(($1406)|(0)) > 0;
   var $1408=$1407 ? 32767 : -32768;
   var $1410 = $1408;label = 224; break;
  case 224: 
   var $1410;
   var $1411=(($1410) & 65535);
   var $1412=$i;
   var $1413=$4;
   var $1414=(($1413+($1412<<1))|0);
   HEAP16[(($1414)>>1)]=$1411;
   label = 225; break;
  case 225: 
   var $1416=$i;
   var $1417=((($1416)+(1))|0);
   $i=$1417;
   label = 220; break;
  case 226: 
   label = 227; break;
  case 227: 
   var $1420=$3;
   var $1421=$_src28;
   var $1422=(($1421+($1420<<1))|0);
   $_src28=$1422;
   var $1423=$5;
   var $1424=$4;
   var $1425=(($1424+($1423<<1))|0);
   $4=$1425;
   label = 202; break;
  case 228: 
   label = 257; break;
  case 229: 
   var $1428=$2;
   var $1429=$1428;
   $_src32=$1429;
   var $1430=$3;
   var $1431=((((($1430)>>>(0)))/(2))&-1);
   $3=$1431;
   label = 230; break;
  case 230: 
   var $1433=(($size+4)|0);
   var $1434=HEAP32[(($1433)>>2)];
   var $1435=((($1434)-(1))|0);
   HEAP32[(($1433)>>2)]=$1435;
   var $1436=(($1434)|(0))!=0;
   if ($1436) { label = 231; break; } else { label = 256; break; }
  case 231: 
   $i=0;
   label = 232; break;
  case 232: 
   var $1439=$i;
   var $1440=(($size)|0);
   var $1441=HEAP32[(($1440)>>2)];
   var $1442=((($1441)-(4))|0);
   var $1443=(($1439)|(0)) <= (($1442)|(0));
   if ($1443) { label = 233; break; } else { label = 247; break; }
  case 233: 
   var $1445=$6;
   var $1446=$i;
   var $1447=$_src32;
   var $1448=(($1447+($1446<<1))|0);
   var $1449=HEAP16[(($1448)>>1)];
   var $1450=(($1449 << 16) >> 16);
   var $1451=(($1450)|(0));
   var $1452=($1445)*($1451);
   var $1453=$7;
   var $1454=($1452)+($1453);
   var $1455=__Z7cvRoundd($1454);
   $t033=$1455;
   var $1456=$6;
   var $1457=$i;
   var $1458=((($1457)+(1))|0);
   var $1459=$_src32;
   var $1460=(($1459+($1458<<1))|0);
   var $1461=HEAP16[(($1460)>>1)];
   var $1462=(($1461 << 16) >> 16);
   var $1463=(($1462)|(0));
   var $1464=($1456)*($1463);
   var $1465=$7;
   var $1466=($1464)+($1465);
   var $1467=__Z7cvRoundd($1466);
   $t134=$1467;
   var $1468=$t033;
   var $1469=((($1468)+(32768))|0);
   var $1470=$1469 & -65536;
   var $1471=(($1470)|(0))!=0;
   if ($1471) { label = 235; break; } else { label = 234; break; }
  case 234: 
   var $1473=$t033;
   var $1479 = $1473;label = 236; break;
  case 235: 
   var $1475=$t033;
   var $1476=(($1475)|(0)) > 0;
   var $1477=$1476 ? 32767 : -32768;
   var $1479 = $1477;label = 236; break;
  case 236: 
   var $1479;
   var $1480=(($1479) & 65535);
   var $1481=$i;
   var $1482=$4;
   var $1483=(($1482+($1481<<1))|0);
   HEAP16[(($1483)>>1)]=$1480;
   var $1484=$t134;
   var $1485=((($1484)+(32768))|0);
   var $1486=$1485 & -65536;
   var $1487=(($1486)|(0))!=0;
   if ($1487) { label = 238; break; } else { label = 237; break; }
  case 237: 
   var $1489=$t134;
   var $1495 = $1489;label = 239; break;
  case 238: 
   var $1491=$t134;
   var $1492=(($1491)|(0)) > 0;
   var $1493=$1492 ? 32767 : -32768;
   var $1495 = $1493;label = 239; break;
  case 239: 
   var $1495;
   var $1496=(($1495) & 65535);
   var $1497=$i;
   var $1498=((($1497)+(1))|0);
   var $1499=$4;
   var $1500=(($1499+($1498<<1))|0);
   HEAP16[(($1500)>>1)]=$1496;
   var $1501=$6;
   var $1502=$i;
   var $1503=((($1502)+(2))|0);
   var $1504=$_src32;
   var $1505=(($1504+($1503<<1))|0);
   var $1506=HEAP16[(($1505)>>1)];
   var $1507=(($1506 << 16) >> 16);
   var $1508=(($1507)|(0));
   var $1509=($1501)*($1508);
   var $1510=$7;
   var $1511=($1509)+($1510);
   var $1512=__Z7cvRoundd($1511);
   $t033=$1512;
   var $1513=$6;
   var $1514=$i;
   var $1515=((($1514)+(3))|0);
   var $1516=$_src32;
   var $1517=(($1516+($1515<<1))|0);
   var $1518=HEAP16[(($1517)>>1)];
   var $1519=(($1518 << 16) >> 16);
   var $1520=(($1519)|(0));
   var $1521=($1513)*($1520);
   var $1522=$7;
   var $1523=($1521)+($1522);
   var $1524=__Z7cvRoundd($1523);
   $t134=$1524;
   var $1525=$t033;
   var $1526=((($1525)+(32768))|0);
   var $1527=$1526 & -65536;
   var $1528=(($1527)|(0))!=0;
   if ($1528) { label = 241; break; } else { label = 240; break; }
  case 240: 
   var $1530=$t033;
   var $1536 = $1530;label = 242; break;
  case 241: 
   var $1532=$t033;
   var $1533=(($1532)|(0)) > 0;
   var $1534=$1533 ? 32767 : -32768;
   var $1536 = $1534;label = 242; break;
  case 242: 
   var $1536;
   var $1537=(($1536) & 65535);
   var $1538=$i;
   var $1539=((($1538)+(2))|0);
   var $1540=$4;
   var $1541=(($1540+($1539<<1))|0);
   HEAP16[(($1541)>>1)]=$1537;
   var $1542=$t134;
   var $1543=((($1542)+(32768))|0);
   var $1544=$1543 & -65536;
   var $1545=(($1544)|(0))!=0;
   if ($1545) { label = 244; break; } else { label = 243; break; }
  case 243: 
   var $1547=$t134;
   var $1553 = $1547;label = 245; break;
  case 244: 
   var $1549=$t134;
   var $1550=(($1549)|(0)) > 0;
   var $1551=$1550 ? 32767 : -32768;
   var $1553 = $1551;label = 245; break;
  case 245: 
   var $1553;
   var $1554=(($1553) & 65535);
   var $1555=$i;
   var $1556=((($1555)+(3))|0);
   var $1557=$4;
   var $1558=(($1557+($1556<<1))|0);
   HEAP16[(($1558)>>1)]=$1554;
   label = 246; break;
  case 246: 
   var $1560=$i;
   var $1561=((($1560)+(4))|0);
   $i=$1561;
   label = 232; break;
  case 247: 
   label = 248; break;
  case 248: 
   var $1564=$i;
   var $1565=(($size)|0);
   var $1566=HEAP32[(($1565)>>2)];
   var $1567=(($1564)|(0)) < (($1566)|(0));
   if ($1567) { label = 249; break; } else { label = 254; break; }
  case 249: 
   var $1569=$6;
   var $1570=$i;
   var $1571=$_src32;
   var $1572=(($1571+($1570<<1))|0);
   var $1573=HEAP16[(($1572)>>1)];
   var $1574=(($1573 << 16) >> 16);
   var $1575=(($1574)|(0));
   var $1576=($1569)*($1575);
   var $1577=$7;
   var $1578=($1576)+($1577);
   var $1579=__Z7cvRoundd($1578);
   $t035=$1579;
   var $1580=$t035;
   var $1581=((($1580)+(32768))|0);
   var $1582=$1581 & -65536;
   var $1583=(($1582)|(0))!=0;
   if ($1583) { label = 251; break; } else { label = 250; break; }
  case 250: 
   var $1585=$t035;
   var $1591 = $1585;label = 252; break;
  case 251: 
   var $1587=$t035;
   var $1588=(($1587)|(0)) > 0;
   var $1589=$1588 ? 32767 : -32768;
   var $1591 = $1589;label = 252; break;
  case 252: 
   var $1591;
   var $1592=(($1591) & 65535);
   var $1593=$i;
   var $1594=$4;
   var $1595=(($1594+($1593<<1))|0);
   HEAP16[(($1595)>>1)]=$1592;
   label = 253; break;
  case 253: 
   var $1597=$i;
   var $1598=((($1597)+(1))|0);
   $i=$1598;
   label = 248; break;
  case 254: 
   label = 255; break;
  case 255: 
   var $1601=$3;
   var $1602=$_src32;
   var $1603=(($1602+($1601<<1))|0);
   $_src32=$1603;
   var $1604=$5;
   var $1605=$4;
   var $1606=(($1605+($1604<<1))|0);
   $4=$1606;
   label = 230; break;
  case 256: 
   label = 257; break;
  case 257: 
   label = 343; break;
  case 258: 
   var $1610=$2;
   var $1611=$1610;
   $_src36=$1611;
   var $1612=$3;
   var $1613=((((($1612)>>>(0)))/(4))&-1);
   $3=$1613;
   label = 259; break;
  case 259: 
   var $1615=(($size+4)|0);
   var $1616=HEAP32[(($1615)>>2)];
   var $1617=((($1616)-(1))|0);
   HEAP32[(($1615)>>2)]=$1617;
   var $1618=(($1616)|(0))!=0;
   if ($1618) { label = 260; break; } else { label = 285; break; }
  case 260: 
   $i=0;
   label = 261; break;
  case 261: 
   var $1621=$i;
   var $1622=(($size)|0);
   var $1623=HEAP32[(($1622)>>2)];
   var $1624=((($1623)-(4))|0);
   var $1625=(($1621)|(0)) <= (($1624)|(0));
   if ($1625) { label = 262; break; } else { label = 276; break; }
  case 262: 
   var $1627=$6;
   var $1628=$i;
   var $1629=$_src36;
   var $1630=(($1629+($1628<<2))|0);
   var $1631=HEAP32[(($1630)>>2)];
   var $1632=(($1631)|(0));
   var $1633=($1627)*($1632);
   var $1634=$7;
   var $1635=($1633)+($1634);
   var $1636=__Z7cvRoundd($1635);
   $t037=$1636;
   var $1637=$6;
   var $1638=$i;
   var $1639=((($1638)+(1))|0);
   var $1640=$_src36;
   var $1641=(($1640+($1639<<2))|0);
   var $1642=HEAP32[(($1641)>>2)];
   var $1643=(($1642)|(0));
   var $1644=($1637)*($1643);
   var $1645=$7;
   var $1646=($1644)+($1645);
   var $1647=__Z7cvRoundd($1646);
   $t138=$1647;
   var $1648=$t037;
   var $1649=((($1648)+(32768))|0);
   var $1650=$1649 & -65536;
   var $1651=(($1650)|(0))!=0;
   if ($1651) { label = 264; break; } else { label = 263; break; }
  case 263: 
   var $1653=$t037;
   var $1659 = $1653;label = 265; break;
  case 264: 
   var $1655=$t037;
   var $1656=(($1655)|(0)) > 0;
   var $1657=$1656 ? 32767 : -32768;
   var $1659 = $1657;label = 265; break;
  case 265: 
   var $1659;
   var $1660=(($1659) & 65535);
   var $1661=$i;
   var $1662=$4;
   var $1663=(($1662+($1661<<1))|0);
   HEAP16[(($1663)>>1)]=$1660;
   var $1664=$t138;
   var $1665=((($1664)+(32768))|0);
   var $1666=$1665 & -65536;
   var $1667=(($1666)|(0))!=0;
   if ($1667) { label = 267; break; } else { label = 266; break; }
  case 266: 
   var $1669=$t138;
   var $1675 = $1669;label = 268; break;
  case 267: 
   var $1671=$t138;
   var $1672=(($1671)|(0)) > 0;
   var $1673=$1672 ? 32767 : -32768;
   var $1675 = $1673;label = 268; break;
  case 268: 
   var $1675;
   var $1676=(($1675) & 65535);
   var $1677=$i;
   var $1678=((($1677)+(1))|0);
   var $1679=$4;
   var $1680=(($1679+($1678<<1))|0);
   HEAP16[(($1680)>>1)]=$1676;
   var $1681=$6;
   var $1682=$i;
   var $1683=((($1682)+(2))|0);
   var $1684=$_src36;
   var $1685=(($1684+($1683<<2))|0);
   var $1686=HEAP32[(($1685)>>2)];
   var $1687=(($1686)|(0));
   var $1688=($1681)*($1687);
   var $1689=$7;
   var $1690=($1688)+($1689);
   var $1691=__Z7cvRoundd($1690);
   $t037=$1691;
   var $1692=$6;
   var $1693=$i;
   var $1694=((($1693)+(3))|0);
   var $1695=$_src36;
   var $1696=(($1695+($1694<<2))|0);
   var $1697=HEAP32[(($1696)>>2)];
   var $1698=(($1697)|(0));
   var $1699=($1692)*($1698);
   var $1700=$7;
   var $1701=($1699)+($1700);
   var $1702=__Z7cvRoundd($1701);
   $t138=$1702;
   var $1703=$t037;
   var $1704=((($1703)+(32768))|0);
   var $1705=$1704 & -65536;
   var $1706=(($1705)|(0))!=0;
   if ($1706) { label = 270; break; } else { label = 269; break; }
  case 269: 
   var $1708=$t037;
   var $1714 = $1708;label = 271; break;
  case 270: 
   var $1710=$t037;
   var $1711=(($1710)|(0)) > 0;
   var $1712=$1711 ? 32767 : -32768;
   var $1714 = $1712;label = 271; break;
  case 271: 
   var $1714;
   var $1715=(($1714) & 65535);
   var $1716=$i;
   var $1717=((($1716)+(2))|0);
   var $1718=$4;
   var $1719=(($1718+($1717<<1))|0);
   HEAP16[(($1719)>>1)]=$1715;
   var $1720=$t138;
   var $1721=((($1720)+(32768))|0);
   var $1722=$1721 & -65536;
   var $1723=(($1722)|(0))!=0;
   if ($1723) { label = 273; break; } else { label = 272; break; }
  case 272: 
   var $1725=$t138;
   var $1731 = $1725;label = 274; break;
  case 273: 
   var $1727=$t138;
   var $1728=(($1727)|(0)) > 0;
   var $1729=$1728 ? 32767 : -32768;
   var $1731 = $1729;label = 274; break;
  case 274: 
   var $1731;
   var $1732=(($1731) & 65535);
   var $1733=$i;
   var $1734=((($1733)+(3))|0);
   var $1735=$4;
   var $1736=(($1735+($1734<<1))|0);
   HEAP16[(($1736)>>1)]=$1732;
   label = 275; break;
  case 275: 
   var $1738=$i;
   var $1739=((($1738)+(4))|0);
   $i=$1739;
   label = 261; break;
  case 276: 
   label = 277; break;
  case 277: 
   var $1742=$i;
   var $1743=(($size)|0);
   var $1744=HEAP32[(($1743)>>2)];
   var $1745=(($1742)|(0)) < (($1744)|(0));
   if ($1745) { label = 278; break; } else { label = 283; break; }
  case 278: 
   var $1747=$6;
   var $1748=$i;
   var $1749=$_src36;
   var $1750=(($1749+($1748<<2))|0);
   var $1751=HEAP32[(($1750)>>2)];
   var $1752=(($1751)|(0));
   var $1753=($1747)*($1752);
   var $1754=$7;
   var $1755=($1753)+($1754);
   var $1756=__Z7cvRoundd($1755);
   $t039=$1756;
   var $1757=$t039;
   var $1758=((($1757)+(32768))|0);
   var $1759=$1758 & -65536;
   var $1760=(($1759)|(0))!=0;
   if ($1760) { label = 280; break; } else { label = 279; break; }
  case 279: 
   var $1762=$t039;
   var $1768 = $1762;label = 281; break;
  case 280: 
   var $1764=$t039;
   var $1765=(($1764)|(0)) > 0;
   var $1766=$1765 ? 32767 : -32768;
   var $1768 = $1766;label = 281; break;
  case 281: 
   var $1768;
   var $1769=(($1768) & 65535);
   var $1770=$i;
   var $1771=$4;
   var $1772=(($1771+($1770<<1))|0);
   HEAP16[(($1772)>>1)]=$1769;
   label = 282; break;
  case 282: 
   var $1774=$i;
   var $1775=((($1774)+(1))|0);
   $i=$1775;
   label = 277; break;
  case 283: 
   label = 284; break;
  case 284: 
   var $1778=$3;
   var $1779=$_src36;
   var $1780=(($1779+($1778<<2))|0);
   $_src36=$1780;
   var $1781=$5;
   var $1782=$4;
   var $1783=(($1782+($1781<<1))|0);
   $4=$1783;
   label = 259; break;
  case 285: 
   label = 343; break;
  case 286: 
   var $1786=$2;
   var $1787=$1786;
   $_src40=$1787;
   var $1788=$3;
   var $1789=((((($1788)>>>(0)))/(4))&-1);
   $3=$1789;
   label = 287; break;
  case 287: 
   var $1791=(($size+4)|0);
   var $1792=HEAP32[(($1791)>>2)];
   var $1793=((($1792)-(1))|0);
   HEAP32[(($1791)>>2)]=$1793;
   var $1794=(($1792)|(0))!=0;
   if ($1794) { label = 288; break; } else { label = 313; break; }
  case 288: 
   $i=0;
   label = 289; break;
  case 289: 
   var $1797=$i;
   var $1798=(($size)|0);
   var $1799=HEAP32[(($1798)>>2)];
   var $1800=((($1799)-(4))|0);
   var $1801=(($1797)|(0)) <= (($1800)|(0));
   if ($1801) { label = 290; break; } else { label = 304; break; }
  case 290: 
   var $1803=$6;
   var $1804=$i;
   var $1805=$_src40;
   var $1806=(($1805+($1804<<2))|0);
   var $1807=HEAPF32[(($1806)>>2)];
   var $1808=$1807;
   var $1809=($1803)*($1808);
   var $1810=$7;
   var $1811=($1809)+($1810);
   var $1812=__Z7cvRoundd($1811);
   $t041=$1812;
   var $1813=$6;
   var $1814=$i;
   var $1815=((($1814)+(1))|0);
   var $1816=$_src40;
   var $1817=(($1816+($1815<<2))|0);
   var $1818=HEAPF32[(($1817)>>2)];
   var $1819=$1818;
   var $1820=($1813)*($1819);
   var $1821=$7;
   var $1822=($1820)+($1821);
   var $1823=__Z7cvRoundd($1822);
   $t142=$1823;
   var $1824=$t041;
   var $1825=((($1824)+(32768))|0);
   var $1826=$1825 & -65536;
   var $1827=(($1826)|(0))!=0;
   if ($1827) { label = 292; break; } else { label = 291; break; }
  case 291: 
   var $1829=$t041;
   var $1835 = $1829;label = 293; break;
  case 292: 
   var $1831=$t041;
   var $1832=(($1831)|(0)) > 0;
   var $1833=$1832 ? 32767 : -32768;
   var $1835 = $1833;label = 293; break;
  case 293: 
   var $1835;
   var $1836=(($1835) & 65535);
   var $1837=$i;
   var $1838=$4;
   var $1839=(($1838+($1837<<1))|0);
   HEAP16[(($1839)>>1)]=$1836;
   var $1840=$t142;
   var $1841=((($1840)+(32768))|0);
   var $1842=$1841 & -65536;
   var $1843=(($1842)|(0))!=0;
   if ($1843) { label = 295; break; } else { label = 294; break; }
  case 294: 
   var $1845=$t142;
   var $1851 = $1845;label = 296; break;
  case 295: 
   var $1847=$t142;
   var $1848=(($1847)|(0)) > 0;
   var $1849=$1848 ? 32767 : -32768;
   var $1851 = $1849;label = 296; break;
  case 296: 
   var $1851;
   var $1852=(($1851) & 65535);
   var $1853=$i;
   var $1854=((($1853)+(1))|0);
   var $1855=$4;
   var $1856=(($1855+($1854<<1))|0);
   HEAP16[(($1856)>>1)]=$1852;
   var $1857=$6;
   var $1858=$i;
   var $1859=((($1858)+(2))|0);
   var $1860=$_src40;
   var $1861=(($1860+($1859<<2))|0);
   var $1862=HEAPF32[(($1861)>>2)];
   var $1863=$1862;
   var $1864=($1857)*($1863);
   var $1865=$7;
   var $1866=($1864)+($1865);
   var $1867=__Z7cvRoundd($1866);
   $t041=$1867;
   var $1868=$6;
   var $1869=$i;
   var $1870=((($1869)+(3))|0);
   var $1871=$_src40;
   var $1872=(($1871+($1870<<2))|0);
   var $1873=HEAPF32[(($1872)>>2)];
   var $1874=$1873;
   var $1875=($1868)*($1874);
   var $1876=$7;
   var $1877=($1875)+($1876);
   var $1878=__Z7cvRoundd($1877);
   $t142=$1878;
   var $1879=$t041;
   var $1880=((($1879)+(32768))|0);
   var $1881=$1880 & -65536;
   var $1882=(($1881)|(0))!=0;
   if ($1882) { label = 298; break; } else { label = 297; break; }
  case 297: 
   var $1884=$t041;
   var $1890 = $1884;label = 299; break;
  case 298: 
   var $1886=$t041;
   var $1887=(($1886)|(0)) > 0;
   var $1888=$1887 ? 32767 : -32768;
   var $1890 = $1888;label = 299; break;
  case 299: 
   var $1890;
   var $1891=(($1890) & 65535);
   var $1892=$i;
   var $1893=((($1892)+(2))|0);
   var $1894=$4;
   var $1895=(($1894+($1893<<1))|0);
   HEAP16[(($1895)>>1)]=$1891;
   var $1896=$t142;
   var $1897=((($1896)+(32768))|0);
   var $1898=$1897 & -65536;
   var $1899=(($1898)|(0))!=0;
   if ($1899) { label = 301; break; } else { label = 300; break; }
  case 300: 
   var $1901=$t142;
   var $1907 = $1901;label = 302; break;
  case 301: 
   var $1903=$t142;
   var $1904=(($1903)|(0)) > 0;
   var $1905=$1904 ? 32767 : -32768;
   var $1907 = $1905;label = 302; break;
  case 302: 
   var $1907;
   var $1908=(($1907) & 65535);
   var $1909=$i;
   var $1910=((($1909)+(3))|0);
   var $1911=$4;
   var $1912=(($1911+($1910<<1))|0);
   HEAP16[(($1912)>>1)]=$1908;
   label = 303; break;
  case 303: 
   var $1914=$i;
   var $1915=((($1914)+(4))|0);
   $i=$1915;
   label = 289; break;
  case 304: 
   label = 305; break;
  case 305: 
   var $1918=$i;
   var $1919=(($size)|0);
   var $1920=HEAP32[(($1919)>>2)];
   var $1921=(($1918)|(0)) < (($1920)|(0));
   if ($1921) { label = 306; break; } else { label = 311; break; }
  case 306: 
   var $1923=$6;
   var $1924=$i;
   var $1925=$_src40;
   var $1926=(($1925+($1924<<2))|0);
   var $1927=HEAPF32[(($1926)>>2)];
   var $1928=$1927;
   var $1929=($1923)*($1928);
   var $1930=$7;
   var $1931=($1929)+($1930);
   var $1932=__Z7cvRoundd($1931);
   $t043=$1932;
   var $1933=$t043;
   var $1934=((($1933)+(32768))|0);
   var $1935=$1934 & -65536;
   var $1936=(($1935)|(0))!=0;
   if ($1936) { label = 308; break; } else { label = 307; break; }
  case 307: 
   var $1938=$t043;
   var $1944 = $1938;label = 309; break;
  case 308: 
   var $1940=$t043;
   var $1941=(($1940)|(0)) > 0;
   var $1942=$1941 ? 32767 : -32768;
   var $1944 = $1942;label = 309; break;
  case 309: 
   var $1944;
   var $1945=(($1944) & 65535);
   var $1946=$i;
   var $1947=$4;
   var $1948=(($1947+($1946<<1))|0);
   HEAP16[(($1948)>>1)]=$1945;
   label = 310; break;
  case 310: 
   var $1950=$i;
   var $1951=((($1950)+(1))|0);
   $i=$1951;
   label = 305; break;
  case 311: 
   label = 312; break;
  case 312: 
   var $1954=$3;
   var $1955=$_src40;
   var $1956=(($1955+($1954<<2))|0);
   $_src40=$1956;
   var $1957=$5;
   var $1958=$4;
   var $1959=(($1958+($1957<<1))|0);
   $4=$1959;
   label = 287; break;
  case 313: 
   label = 343; break;
  case 314: 
   var $1962=$2;
   var $1963=$1962;
   $_src44=$1963;
   var $1964=$3;
   var $1965=((((($1964)>>>(0)))/(8))&-1);
   $3=$1965;
   label = 315; break;
  case 315: 
   var $1967=(($size+4)|0);
   var $1968=HEAP32[(($1967)>>2)];
   var $1969=((($1968)-(1))|0);
   HEAP32[(($1967)>>2)]=$1969;
   var $1970=(($1968)|(0))!=0;
   if ($1970) { label = 316; break; } else { label = 341; break; }
  case 316: 
   $i=0;
   label = 317; break;
  case 317: 
   var $1973=$i;
   var $1974=(($size)|0);
   var $1975=HEAP32[(($1974)>>2)];
   var $1976=((($1975)-(4))|0);
   var $1977=(($1973)|(0)) <= (($1976)|(0));
   if ($1977) { label = 318; break; } else { label = 332; break; }
  case 318: 
   var $1979=$6;
   var $1980=$i;
   var $1981=$_src44;
   var $1982=(($1981+($1980<<3))|0);
   var $1983=HEAPF64[(($1982)>>3)];
   var $1984=($1979)*($1983);
   var $1985=$7;
   var $1986=($1984)+($1985);
   var $1987=__Z7cvRoundd($1986);
   $t045=$1987;
   var $1988=$6;
   var $1989=$i;
   var $1990=((($1989)+(1))|0);
   var $1991=$_src44;
   var $1992=(($1991+($1990<<3))|0);
   var $1993=HEAPF64[(($1992)>>3)];
   var $1994=($1988)*($1993);
   var $1995=$7;
   var $1996=($1994)+($1995);
   var $1997=__Z7cvRoundd($1996);
   $t146=$1997;
   var $1998=$t045;
   var $1999=((($1998)+(32768))|0);
   var $2000=$1999 & -65536;
   var $2001=(($2000)|(0))!=0;
   if ($2001) { label = 320; break; } else { label = 319; break; }
  case 319: 
   var $2003=$t045;
   var $2009 = $2003;label = 321; break;
  case 320: 
   var $2005=$t045;
   var $2006=(($2005)|(0)) > 0;
   var $2007=$2006 ? 32767 : -32768;
   var $2009 = $2007;label = 321; break;
  case 321: 
   var $2009;
   var $2010=(($2009) & 65535);
   var $2011=$i;
   var $2012=$4;
   var $2013=(($2012+($2011<<1))|0);
   HEAP16[(($2013)>>1)]=$2010;
   var $2014=$t146;
   var $2015=((($2014)+(32768))|0);
   var $2016=$2015 & -65536;
   var $2017=(($2016)|(0))!=0;
   if ($2017) { label = 323; break; } else { label = 322; break; }
  case 322: 
   var $2019=$t146;
   var $2025 = $2019;label = 324; break;
  case 323: 
   var $2021=$t146;
   var $2022=(($2021)|(0)) > 0;
   var $2023=$2022 ? 32767 : -32768;
   var $2025 = $2023;label = 324; break;
  case 324: 
   var $2025;
   var $2026=(($2025) & 65535);
   var $2027=$i;
   var $2028=((($2027)+(1))|0);
   var $2029=$4;
   var $2030=(($2029+($2028<<1))|0);
   HEAP16[(($2030)>>1)]=$2026;
   var $2031=$6;
   var $2032=$i;
   var $2033=((($2032)+(2))|0);
   var $2034=$_src44;
   var $2035=(($2034+($2033<<3))|0);
   var $2036=HEAPF64[(($2035)>>3)];
   var $2037=($2031)*($2036);
   var $2038=$7;
   var $2039=($2037)+($2038);
   var $2040=__Z7cvRoundd($2039);
   $t045=$2040;
   var $2041=$6;
   var $2042=$i;
   var $2043=((($2042)+(3))|0);
   var $2044=$_src44;
   var $2045=(($2044+($2043<<3))|0);
   var $2046=HEAPF64[(($2045)>>3)];
   var $2047=($2041)*($2046);
   var $2048=$7;
   var $2049=($2047)+($2048);
   var $2050=__Z7cvRoundd($2049);
   $t146=$2050;
   var $2051=$t045;
   var $2052=((($2051)+(32768))|0);
   var $2053=$2052 & -65536;
   var $2054=(($2053)|(0))!=0;
   if ($2054) { label = 326; break; } else { label = 325; break; }
  case 325: 
   var $2056=$t045;
   var $2062 = $2056;label = 327; break;
  case 326: 
   var $2058=$t045;
   var $2059=(($2058)|(0)) > 0;
   var $2060=$2059 ? 32767 : -32768;
   var $2062 = $2060;label = 327; break;
  case 327: 
   var $2062;
   var $2063=(($2062) & 65535);
   var $2064=$i;
   var $2065=((($2064)+(2))|0);
   var $2066=$4;
   var $2067=(($2066+($2065<<1))|0);
   HEAP16[(($2067)>>1)]=$2063;
   var $2068=$t146;
   var $2069=((($2068)+(32768))|0);
   var $2070=$2069 & -65536;
   var $2071=(($2070)|(0))!=0;
   if ($2071) { label = 329; break; } else { label = 328; break; }
  case 328: 
   var $2073=$t146;
   var $2079 = $2073;label = 330; break;
  case 329: 
   var $2075=$t146;
   var $2076=(($2075)|(0)) > 0;
   var $2077=$2076 ? 32767 : -32768;
   var $2079 = $2077;label = 330; break;
  case 330: 
   var $2079;
   var $2080=(($2079) & 65535);
   var $2081=$i;
   var $2082=((($2081)+(3))|0);
   var $2083=$4;
   var $2084=(($2083+($2082<<1))|0);
   HEAP16[(($2084)>>1)]=$2080;
   label = 331; break;
  case 331: 
   var $2086=$i;
   var $2087=((($2086)+(4))|0);
   $i=$2087;
   label = 317; break;
  case 332: 
   label = 333; break;
  case 333: 
   var $2090=$i;
   var $2091=(($size)|0);
   var $2092=HEAP32[(($2091)>>2)];
   var $2093=(($2090)|(0)) < (($2092)|(0));
   if ($2093) { label = 334; break; } else { label = 339; break; }
  case 334: 
   var $2095=$6;
   var $2096=$i;
   var $2097=$_src44;
   var $2098=(($2097+($2096<<3))|0);
   var $2099=HEAPF64[(($2098)>>3)];
   var $2100=($2095)*($2099);
   var $2101=$7;
   var $2102=($2100)+($2101);
   var $2103=__Z7cvRoundd($2102);
   $t047=$2103;
   var $2104=$t047;
   var $2105=((($2104)+(32768))|0);
   var $2106=$2105 & -65536;
   var $2107=(($2106)|(0))!=0;
   if ($2107) { label = 336; break; } else { label = 335; break; }
  case 335: 
   var $2109=$t047;
   var $2115 = $2109;label = 337; break;
  case 336: 
   var $2111=$t047;
   var $2112=(($2111)|(0)) > 0;
   var $2113=$2112 ? 32767 : -32768;
   var $2115 = $2113;label = 337; break;
  case 337: 
   var $2115;
   var $2116=(($2115) & 65535);
   var $2117=$i;
   var $2118=$4;
   var $2119=(($2118+($2117<<1))|0);
   HEAP16[(($2119)>>1)]=$2116;
   label = 338; break;
  case 338: 
   var $2121=$i;
   var $2122=((($2121)+(1))|0);
   $i=$2122;
   label = 333; break;
  case 339: 
   label = 340; break;
  case 340: 
   var $2125=$3;
   var $2126=$_src44;
   var $2127=(($2126+($2125<<3))|0);
   $_src44=$2127;
   var $2128=$5;
   var $2129=$4;
   var $2130=(($2129+($2128<<1))|0);
   $4=$2130;
   label = 315; break;
  case 341: 
   label = 343; break;
  case 342: 
   $1=-12;
   label = 344; break;
  case 343: 
   $1=0;
   label = 344; break;
  case 344: 
   var $2135=$1;
   STACKTOP = sp;
   return $2135;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvCvtScaleTo_32s_C1RPKhiPii6CvSizeddi($src, $srcstep, $dst, $dststep, $size, $scale, $shift, $param) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $i;
   var $srctype;
   var $lut=sp;
   var $val;
   var $t;
   var $9=(sp)+(1024);
   var $iscale;
   var $ishift;
   var $_src;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $t03;
   var $t14;
   var $t05;
   var $t6;
   var $10=(sp)+(1032);
   var $iscale7;
   var $ishift8;
   var $_src9;
   var $t010;
   var $t111;
   var $t012;
   var $_src13;
   var $t014;
   var $t115;
   var $t016;
   var $iscale17;
   var $_src18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $t023;
   var $t124;
   var $t025;
   var $iscale26;
   var $ishift27;
   var $_src28;
   var $t029;
   var $t130;
   var $t031;
   var $_src32;
   var $t033;
   var $t134;
   var $t035;
   var $_src36;
   var $t037;
   var $t138;
   var $t039;
   var $_src40;
   var $t041;
   var $t142;
   var $t043;
   var $_src44;
   var $t045;
   var $t146;
   var $t047;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$scale;
   $7=$shift;
   $8=$param;
   var $11=$8;
   $srctype=$11;
   var $12=$5;
   var $13=((((($12)>>>(0)))/(4))&-1);
   $5=$13;
   var $14=$srctype;
   var $15=$14 & 7;
   if ((($15)|(0))==0) {
    label = 2; break;
   }
   else if ((($15)|(0))==1) {
    label = 38; break;
   }
   else if ((($15)|(0))==2) {
    label = 74; break;
   }
   else if ((($15)|(0))==3) {
    label = 103; break;
   }
   else if ((($15)|(0))==4) {
    label = 132; break;
   }
   else if ((($15)|(0))==5) {
    label = 145; break;
   }
   else if ((($15)|(0))==6) {
    label = 158; break;
   }
   else {
   label = 171; break;
   }
  case 2: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(Math.imul($18,$20)|0);
   var $22=(($21)|(0)) >= 256;
   if ($22) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $24=$7;
   $val=$24;
   $i=0;
   label = 4; break;
  case 4: 
   var $26=$i;
   var $27=(($26)|(0)) < 256;
   if ($27) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $29=$val;
   var $30=__Z7cvRoundd($29);
   $t=$30;
   var $31=$t;
   var $32=$i;
   var $33=(($lut+($32<<2))|0);
   HEAP32[(($33)>>2)]=$31;
   label = 6; break;
  case 6: 
   var $35=$i;
   var $36=((($35)+(1))|0);
   $i=$36;
   var $37=$6;
   var $38=$val;
   var $39=($38)+($37);
   $val=$39;
   label = 4; break;
  case 7: 
   var $41=$2;
   var $42=$3;
   var $43=$4;
   var $44=$5;
   var $45=($44<<2);
   var $46=$9;
   var $47=$size;
   assert(8 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];
   var $48=(($lut)|0);
   var $49=__Z26icvLUT_Transform8u_32s_C1RPKhiPii6CvSizePKi($41, $42, $43, $45, $9, $48);
   label = 37; break;
  case 8: 
   var $51=$6;
   var $52=Math.abs($51);
   var $53=$52 <= 128;
   if ($53) { label = 9; break; } else { label = 23; break; }
  case 9: 
   var $55=$7;
   var $56=Math.abs($55);
   var $57=$56 <= 32767.99998474121;
   if ($57) { label = 10; break; } else { label = 23; break; }
  case 10: 
   var $59=$6;
   var $60=($59)*(32768);
   var $61=__Z7cvRoundd($60);
   $iscale=$61;
   var $62=$7;
   var $63=($62)*(32768);
   var $64=__Z7cvRoundd($63);
   $ishift=$64;
   var $65=$2;
   $_src=$65;
   var $66=$3;
   var $67=(((($66)>>>(0)))&-1);
   $3=$67;
   label = 11; break;
  case 11: 
   var $69=(($size+4)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)-(1))|0);
   HEAP32[(($69)>>2)]=$71;
   var $72=(($70)|(0))!=0;
   if ($72) { label = 12; break; } else { label = 22; break; }
  case 12: 
   $i=0;
   label = 13; break;
  case 13: 
   var $75=$i;
   var $76=(($size)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=((($77)-(4))|0);
   var $79=(($75)|(0)) <= (($78)|(0));
   if ($79) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $81=$iscale;
   var $82=$i;
   var $83=$_src;
   var $84=(($83+$82)|0);
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=(Math.imul($81,$86)|0);
   var $88=$ishift;
   var $89=((($87)+($88))|0);
   var $90=((($89)+(16384))|0);
   var $91=$90 >> 15;
   $t0=$91;
   var $92=$iscale;
   var $93=$i;
   var $94=((($93)+(1))|0);
   var $95=$_src;
   var $96=(($95+$94)|0);
   var $97=HEAP8[($96)];
   var $98=(($97)&(255));
   var $99=(Math.imul($92,$98)|0);
   var $100=$ishift;
   var $101=((($99)+($100))|0);
   var $102=((($101)+(16384))|0);
   var $103=$102 >> 15;
   $t1=$103;
   var $104=$t0;
   var $105=$i;
   var $106=$4;
   var $107=(($106+($105<<2))|0);
   HEAP32[(($107)>>2)]=$104;
   var $108=$t1;
   var $109=$i;
   var $110=((($109)+(1))|0);
   var $111=$4;
   var $112=(($111+($110<<2))|0);
   HEAP32[(($112)>>2)]=$108;
   var $113=$iscale;
   var $114=$i;
   var $115=((($114)+(2))|0);
   var $116=$_src;
   var $117=(($116+$115)|0);
   var $118=HEAP8[($117)];
   var $119=(($118)&(255));
   var $120=(Math.imul($113,$119)|0);
   var $121=$ishift;
   var $122=((($120)+($121))|0);
   var $123=((($122)+(16384))|0);
   var $124=$123 >> 15;
   $t0=$124;
   var $125=$iscale;
   var $126=$i;
   var $127=((($126)+(3))|0);
   var $128=$_src;
   var $129=(($128+$127)|0);
   var $130=HEAP8[($129)];
   var $131=(($130)&(255));
   var $132=(Math.imul($125,$131)|0);
   var $133=$ishift;
   var $134=((($132)+($133))|0);
   var $135=((($134)+(16384))|0);
   var $136=$135 >> 15;
   $t1=$136;
   var $137=$t0;
   var $138=$i;
   var $139=((($138)+(2))|0);
   var $140=$4;
   var $141=(($140+($139<<2))|0);
   HEAP32[(($141)>>2)]=$137;
   var $142=$t1;
   var $143=$i;
   var $144=((($143)+(3))|0);
   var $145=$4;
   var $146=(($145+($144<<2))|0);
   HEAP32[(($146)>>2)]=$142;
   label = 15; break;
  case 15: 
   var $148=$i;
   var $149=((($148)+(4))|0);
   $i=$149;
   label = 13; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $152=$i;
   var $153=(($size)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(($152)|(0)) < (($154)|(0));
   if ($155) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $157=$iscale;
   var $158=$i;
   var $159=$_src;
   var $160=(($159+$158)|0);
   var $161=HEAP8[($160)];
   var $162=(($161)&(255));
   var $163=(Math.imul($157,$162)|0);
   var $164=$ishift;
   var $165=((($163)+($164))|0);
   var $166=((($165)+(16384))|0);
   var $167=$166 >> 15;
   $t01=$167;
   var $168=$t01;
   var $169=$i;
   var $170=$4;
   var $171=(($170+($169<<2))|0);
   HEAP32[(($171)>>2)]=$168;
   label = 19; break;
  case 19: 
   var $173=$i;
   var $174=((($173)+(1))|0);
   $i=$174;
   label = 17; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $177=$3;
   var $178=$_src;
   var $179=(($178+$177)|0);
   $_src=$179;
   var $180=$5;
   var $181=$4;
   var $182=(($181+($180<<2))|0);
   $4=$182;
   label = 11; break;
  case 22: 
   label = 36; break;
  case 23: 
   var $185=$2;
   $_src2=$185;
   var $186=$3;
   var $187=(((($186)>>>(0)))&-1);
   $3=$187;
   label = 24; break;
  case 24: 
   var $189=(($size+4)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=((($190)-(1))|0);
   HEAP32[(($189)>>2)]=$191;
   var $192=(($190)|(0))!=0;
   if ($192) { label = 25; break; } else { label = 35; break; }
  case 25: 
   $i=0;
   label = 26; break;
  case 26: 
   var $195=$i;
   var $196=(($size)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=((($197)-(4))|0);
   var $199=(($195)|(0)) <= (($198)|(0));
   if ($199) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $201=$6;
   var $202=$i;
   var $203=$_src2;
   var $204=(($203+$202)|0);
   var $205=HEAP8[($204)];
   var $206=(($205)&(255));
   var $207=(($206)|(0));
   var $208=($201)*($207);
   var $209=$7;
   var $210=($208)+($209);
   var $211=__Z7cvRoundd($210);
   $t03=$211;
   var $212=$6;
   var $213=$i;
   var $214=((($213)+(1))|0);
   var $215=$_src2;
   var $216=(($215+$214)|0);
   var $217=HEAP8[($216)];
   var $218=(($217)&(255));
   var $219=(($218)|(0));
   var $220=($212)*($219);
   var $221=$7;
   var $222=($220)+($221);
   var $223=__Z7cvRoundd($222);
   $t14=$223;
   var $224=$t03;
   var $225=$i;
   var $226=$4;
   var $227=(($226+($225<<2))|0);
   HEAP32[(($227)>>2)]=$224;
   var $228=$t14;
   var $229=$i;
   var $230=((($229)+(1))|0);
   var $231=$4;
   var $232=(($231+($230<<2))|0);
   HEAP32[(($232)>>2)]=$228;
   var $233=$6;
   var $234=$i;
   var $235=((($234)+(2))|0);
   var $236=$_src2;
   var $237=(($236+$235)|0);
   var $238=HEAP8[($237)];
   var $239=(($238)&(255));
   var $240=(($239)|(0));
   var $241=($233)*($240);
   var $242=$7;
   var $243=($241)+($242);
   var $244=__Z7cvRoundd($243);
   $t03=$244;
   var $245=$6;
   var $246=$i;
   var $247=((($246)+(3))|0);
   var $248=$_src2;
   var $249=(($248+$247)|0);
   var $250=HEAP8[($249)];
   var $251=(($250)&(255));
   var $252=(($251)|(0));
   var $253=($245)*($252);
   var $254=$7;
   var $255=($253)+($254);
   var $256=__Z7cvRoundd($255);
   $t14=$256;
   var $257=$t03;
   var $258=$i;
   var $259=((($258)+(2))|0);
   var $260=$4;
   var $261=(($260+($259<<2))|0);
   HEAP32[(($261)>>2)]=$257;
   var $262=$t14;
   var $263=$i;
   var $264=((($263)+(3))|0);
   var $265=$4;
   var $266=(($265+($264<<2))|0);
   HEAP32[(($266)>>2)]=$262;
   label = 28; break;
  case 28: 
   var $268=$i;
   var $269=((($268)+(4))|0);
   $i=$269;
   label = 26; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $272=$i;
   var $273=(($size)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($272)|(0)) < (($274)|(0));
   if ($275) { label = 31; break; } else { label = 33; break; }
  case 31: 
   var $277=$6;
   var $278=$i;
   var $279=$_src2;
   var $280=(($279+$278)|0);
   var $281=HEAP8[($280)];
   var $282=(($281)&(255));
   var $283=(($282)|(0));
   var $284=($277)*($283);
   var $285=$7;
   var $286=($284)+($285);
   var $287=__Z7cvRoundd($286);
   $t05=$287;
   var $288=$t05;
   var $289=$i;
   var $290=$4;
   var $291=(($290+($289<<2))|0);
   HEAP32[(($291)>>2)]=$288;
   label = 32; break;
  case 32: 
   var $293=$i;
   var $294=((($293)+(1))|0);
   $i=$294;
   label = 30; break;
  case 33: 
   label = 34; break;
  case 34: 
   var $297=$3;
   var $298=$_src2;
   var $299=(($298+$297)|0);
   $_src2=$299;
   var $300=$5;
   var $301=$4;
   var $302=(($301+($300<<2))|0);
   $4=$302;
   label = 24; break;
  case 35: 
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   label = 172; break;
  case 38: 
   var $307=(($size)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=(($size+4)|0);
   var $310=HEAP32[(($309)>>2)];
   var $311=(Math.imul($308,$310)|0);
   var $312=(($311)|(0)) >= 256;
   if ($312) { label = 39; break; } else { label = 44; break; }
  case 39: 
   $i=0;
   label = 40; break;
  case 40: 
   var $315=$i;
   var $316=(($315)|(0)) < 256;
   if ($316) { label = 41; break; } else { label = 43; break; }
  case 41: 
   var $318=$i;
   var $319=(($318) & 255);
   var $320=(($319 << 24) >> 24);
   var $321=(($320)|(0));
   var $322=$6;
   var $323=($321)*($322);
   var $324=$7;
   var $325=($323)+($324);
   var $326=__Z7cvRoundd($325);
   $t6=$326;
   var $327=$t6;
   var $328=$i;
   var $329=(($lut+($328<<2))|0);
   HEAP32[(($329)>>2)]=$327;
   label = 42; break;
  case 42: 
   var $331=$i;
   var $332=((($331)+(1))|0);
   $i=$332;
   label = 40; break;
  case 43: 
   var $334=$2;
   var $335=$3;
   var $336=$4;
   var $337=$5;
   var $338=($337<<2);
   var $339=$10;
   var $340=$size;
   assert(8 % 1 === 0);HEAP32[(($339)>>2)]=HEAP32[(($340)>>2)];HEAP32[((($339)+(4))>>2)]=HEAP32[((($340)+(4))>>2)];
   var $341=(($lut)|0);
   var $342=__Z26icvLUT_Transform8u_32s_C1RPKhiPii6CvSizePKi($334, $335, $336, $338, $10, $341);
   label = 73; break;
  case 44: 
   var $344=$6;
   var $345=Math.abs($344);
   var $346=$345 <= 128;
   if ($346) { label = 45; break; } else { label = 59; break; }
  case 45: 
   var $348=$7;
   var $349=Math.abs($348);
   var $350=$349 <= 32767.99998474121;
   if ($350) { label = 46; break; } else { label = 59; break; }
  case 46: 
   var $352=$6;
   var $353=($352)*(32768);
   var $354=__Z7cvRoundd($353);
   $iscale7=$354;
   var $355=$7;
   var $356=($355)*(32768);
   var $357=__Z7cvRoundd($356);
   $ishift8=$357;
   var $358=$2;
   $_src9=$358;
   var $359=$3;
   var $360=(((($359)>>>(0)))&-1);
   $3=$360;
   label = 47; break;
  case 47: 
   var $362=(($size+4)|0);
   var $363=HEAP32[(($362)>>2)];
   var $364=((($363)-(1))|0);
   HEAP32[(($362)>>2)]=$364;
   var $365=(($363)|(0))!=0;
   if ($365) { label = 48; break; } else { label = 58; break; }
  case 48: 
   $i=0;
   label = 49; break;
  case 49: 
   var $368=$i;
   var $369=(($size)|0);
   var $370=HEAP32[(($369)>>2)];
   var $371=((($370)-(4))|0);
   var $372=(($368)|(0)) <= (($371)|(0));
   if ($372) { label = 50; break; } else { label = 52; break; }
  case 50: 
   var $374=$iscale7;
   var $375=$i;
   var $376=$_src9;
   var $377=(($376+$375)|0);
   var $378=HEAP8[($377)];
   var $379=(($378 << 24) >> 24);
   var $380=(Math.imul($374,$379)|0);
   var $381=$ishift8;
   var $382=((($380)+($381))|0);
   var $383=((($382)+(16384))|0);
   var $384=$383 >> 15;
   $t010=$384;
   var $385=$iscale7;
   var $386=$i;
   var $387=((($386)+(1))|0);
   var $388=$_src9;
   var $389=(($388+$387)|0);
   var $390=HEAP8[($389)];
   var $391=(($390 << 24) >> 24);
   var $392=(Math.imul($385,$391)|0);
   var $393=$ishift8;
   var $394=((($392)+($393))|0);
   var $395=((($394)+(16384))|0);
   var $396=$395 >> 15;
   $t111=$396;
   var $397=$t010;
   var $398=$i;
   var $399=$4;
   var $400=(($399+($398<<2))|0);
   HEAP32[(($400)>>2)]=$397;
   var $401=$t111;
   var $402=$i;
   var $403=((($402)+(1))|0);
   var $404=$4;
   var $405=(($404+($403<<2))|0);
   HEAP32[(($405)>>2)]=$401;
   var $406=$iscale7;
   var $407=$i;
   var $408=((($407)+(2))|0);
   var $409=$_src9;
   var $410=(($409+$408)|0);
   var $411=HEAP8[($410)];
   var $412=(($411 << 24) >> 24);
   var $413=(Math.imul($406,$412)|0);
   var $414=$ishift8;
   var $415=((($413)+($414))|0);
   var $416=((($415)+(16384))|0);
   var $417=$416 >> 15;
   $t010=$417;
   var $418=$iscale7;
   var $419=$i;
   var $420=((($419)+(3))|0);
   var $421=$_src9;
   var $422=(($421+$420)|0);
   var $423=HEAP8[($422)];
   var $424=(($423 << 24) >> 24);
   var $425=(Math.imul($418,$424)|0);
   var $426=$ishift8;
   var $427=((($425)+($426))|0);
   var $428=((($427)+(16384))|0);
   var $429=$428 >> 15;
   $t111=$429;
   var $430=$t010;
   var $431=$i;
   var $432=((($431)+(2))|0);
   var $433=$4;
   var $434=(($433+($432<<2))|0);
   HEAP32[(($434)>>2)]=$430;
   var $435=$t111;
   var $436=$i;
   var $437=((($436)+(3))|0);
   var $438=$4;
   var $439=(($438+($437<<2))|0);
   HEAP32[(($439)>>2)]=$435;
   label = 51; break;
  case 51: 
   var $441=$i;
   var $442=((($441)+(4))|0);
   $i=$442;
   label = 49; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $445=$i;
   var $446=(($size)|0);
   var $447=HEAP32[(($446)>>2)];
   var $448=(($445)|(0)) < (($447)|(0));
   if ($448) { label = 54; break; } else { label = 56; break; }
  case 54: 
   var $450=$iscale7;
   var $451=$i;
   var $452=$_src9;
   var $453=(($452+$451)|0);
   var $454=HEAP8[($453)];
   var $455=(($454 << 24) >> 24);
   var $456=(Math.imul($450,$455)|0);
   var $457=$ishift8;
   var $458=((($456)+($457))|0);
   var $459=((($458)+(16384))|0);
   var $460=$459 >> 15;
   $t012=$460;
   var $461=$t012;
   var $462=$i;
   var $463=$4;
   var $464=(($463+($462<<2))|0);
   HEAP32[(($464)>>2)]=$461;
   label = 55; break;
  case 55: 
   var $466=$i;
   var $467=((($466)+(1))|0);
   $i=$467;
   label = 53; break;
  case 56: 
   label = 57; break;
  case 57: 
   var $470=$3;
   var $471=$_src9;
   var $472=(($471+$470)|0);
   $_src9=$472;
   var $473=$5;
   var $474=$4;
   var $475=(($474+($473<<2))|0);
   $4=$475;
   label = 47; break;
  case 58: 
   label = 72; break;
  case 59: 
   var $478=$2;
   $_src13=$478;
   var $479=$3;
   var $480=(((($479)>>>(0)))&-1);
   $3=$480;
   label = 60; break;
  case 60: 
   var $482=(($size+4)|0);
   var $483=HEAP32[(($482)>>2)];
   var $484=((($483)-(1))|0);
   HEAP32[(($482)>>2)]=$484;
   var $485=(($483)|(0))!=0;
   if ($485) { label = 61; break; } else { label = 71; break; }
  case 61: 
   $i=0;
   label = 62; break;
  case 62: 
   var $488=$i;
   var $489=(($size)|0);
   var $490=HEAP32[(($489)>>2)];
   var $491=((($490)-(4))|0);
   var $492=(($488)|(0)) <= (($491)|(0));
   if ($492) { label = 63; break; } else { label = 65; break; }
  case 63: 
   var $494=$6;
   var $495=$i;
   var $496=$_src13;
   var $497=(($496+$495)|0);
   var $498=HEAP8[($497)];
   var $499=(($498 << 24) >> 24);
   var $500=(($499)|(0));
   var $501=($494)*($500);
   var $502=$7;
   var $503=($501)+($502);
   var $504=__Z7cvRoundd($503);
   $t014=$504;
   var $505=$6;
   var $506=$i;
   var $507=((($506)+(1))|0);
   var $508=$_src13;
   var $509=(($508+$507)|0);
   var $510=HEAP8[($509)];
   var $511=(($510 << 24) >> 24);
   var $512=(($511)|(0));
   var $513=($505)*($512);
   var $514=$7;
   var $515=($513)+($514);
   var $516=__Z7cvRoundd($515);
   $t115=$516;
   var $517=$t014;
   var $518=$i;
   var $519=$4;
   var $520=(($519+($518<<2))|0);
   HEAP32[(($520)>>2)]=$517;
   var $521=$t115;
   var $522=$i;
   var $523=((($522)+(1))|0);
   var $524=$4;
   var $525=(($524+($523<<2))|0);
   HEAP32[(($525)>>2)]=$521;
   var $526=$6;
   var $527=$i;
   var $528=((($527)+(2))|0);
   var $529=$_src13;
   var $530=(($529+$528)|0);
   var $531=HEAP8[($530)];
   var $532=(($531 << 24) >> 24);
   var $533=(($532)|(0));
   var $534=($526)*($533);
   var $535=$7;
   var $536=($534)+($535);
   var $537=__Z7cvRoundd($536);
   $t014=$537;
   var $538=$6;
   var $539=$i;
   var $540=((($539)+(3))|0);
   var $541=$_src13;
   var $542=(($541+$540)|0);
   var $543=HEAP8[($542)];
   var $544=(($543 << 24) >> 24);
   var $545=(($544)|(0));
   var $546=($538)*($545);
   var $547=$7;
   var $548=($546)+($547);
   var $549=__Z7cvRoundd($548);
   $t115=$549;
   var $550=$t014;
   var $551=$i;
   var $552=((($551)+(2))|0);
   var $553=$4;
   var $554=(($553+($552<<2))|0);
   HEAP32[(($554)>>2)]=$550;
   var $555=$t115;
   var $556=$i;
   var $557=((($556)+(3))|0);
   var $558=$4;
   var $559=(($558+($557<<2))|0);
   HEAP32[(($559)>>2)]=$555;
   label = 64; break;
  case 64: 
   var $561=$i;
   var $562=((($561)+(4))|0);
   $i=$562;
   label = 62; break;
  case 65: 
   label = 66; break;
  case 66: 
   var $565=$i;
   var $566=(($size)|0);
   var $567=HEAP32[(($566)>>2)];
   var $568=(($565)|(0)) < (($567)|(0));
   if ($568) { label = 67; break; } else { label = 69; break; }
  case 67: 
   var $570=$6;
   var $571=$i;
   var $572=$_src13;
   var $573=(($572+$571)|0);
   var $574=HEAP8[($573)];
   var $575=(($574 << 24) >> 24);
   var $576=(($575)|(0));
   var $577=($570)*($576);
   var $578=$7;
   var $579=($577)+($578);
   var $580=__Z7cvRoundd($579);
   $t016=$580;
   var $581=$t016;
   var $582=$i;
   var $583=$4;
   var $584=(($583+($582<<2))|0);
   HEAP32[(($584)>>2)]=$581;
   label = 68; break;
  case 68: 
   var $586=$i;
   var $587=((($586)+(1))|0);
   $i=$587;
   label = 66; break;
  case 69: 
   label = 70; break;
  case 70: 
   var $590=$3;
   var $591=$_src13;
   var $592=(($591+$590)|0);
   $_src13=$592;
   var $593=$5;
   var $594=$4;
   var $595=(($594+($593<<2))|0);
   $4=$595;
   label = 60; break;
  case 71: 
   label = 72; break;
  case 72: 
   label = 73; break;
  case 73: 
   label = 172; break;
  case 74: 
   var $600=$6;
   var $601=Math.abs($600);
   var $602=$601 <= 1;
   if ($602) { label = 75; break; } else { label = 89; break; }
  case 75: 
   var $604=$7;
   var $605=Math.abs($604);
   var $606=$605 < 2.220446049250313e-16;
   if ($606) { label = 76; break; } else { label = 89; break; }
  case 76: 
   var $608=$6;
   var $609=($608)*(32768);
   var $610=__Z7cvRoundd($609);
   $iscale17=$610;
   var $611=$2;
   var $612=$611;
   $_src18=$612;
   var $613=$3;
   var $614=((((($613)>>>(0)))/(2))&-1);
   $3=$614;
   label = 77; break;
  case 77: 
   var $616=(($size+4)|0);
   var $617=HEAP32[(($616)>>2)];
   var $618=((($617)-(1))|0);
   HEAP32[(($616)>>2)]=$618;
   var $619=(($617)|(0))!=0;
   if ($619) { label = 78; break; } else { label = 88; break; }
  case 78: 
   $i=0;
   label = 79; break;
  case 79: 
   var $622=$i;
   var $623=(($size)|0);
   var $624=HEAP32[(($623)>>2)];
   var $625=((($624)-(4))|0);
   var $626=(($622)|(0)) <= (($625)|(0));
   if ($626) { label = 80; break; } else { label = 82; break; }
  case 80: 
   var $628=$iscale17;
   var $629=$i;
   var $630=$_src18;
   var $631=(($630+($629<<1))|0);
   var $632=HEAP16[(($631)>>1)];
   var $633=(($632)&(65535));
   var $634=(Math.imul($628,$633)|0);
   var $635=(($634)|0);
   var $636=((($635)+(16384))|0);
   var $637=$636 >> 15;
   $t019=$637;
   var $638=$iscale17;
   var $639=$i;
   var $640=((($639)+(1))|0);
   var $641=$_src18;
   var $642=(($641+($640<<1))|0);
   var $643=HEAP16[(($642)>>1)];
   var $644=(($643)&(65535));
   var $645=(Math.imul($638,$644)|0);
   var $646=(($645)|0);
   var $647=((($646)+(16384))|0);
   var $648=$647 >> 15;
   $t120=$648;
   var $649=$t019;
   var $650=$i;
   var $651=$4;
   var $652=(($651+($650<<2))|0);
   HEAP32[(($652)>>2)]=$649;
   var $653=$t120;
   var $654=$i;
   var $655=((($654)+(1))|0);
   var $656=$4;
   var $657=(($656+($655<<2))|0);
   HEAP32[(($657)>>2)]=$653;
   var $658=$iscale17;
   var $659=$i;
   var $660=((($659)+(2))|0);
   var $661=$_src18;
   var $662=(($661+($660<<1))|0);
   var $663=HEAP16[(($662)>>1)];
   var $664=(($663)&(65535));
   var $665=(Math.imul($658,$664)|0);
   var $666=(($665)|0);
   var $667=((($666)+(16384))|0);
   var $668=$667 >> 15;
   $t019=$668;
   var $669=$iscale17;
   var $670=$i;
   var $671=((($670)+(3))|0);
   var $672=$_src18;
   var $673=(($672+($671<<1))|0);
   var $674=HEAP16[(($673)>>1)];
   var $675=(($674)&(65535));
   var $676=(Math.imul($669,$675)|0);
   var $677=(($676)|0);
   var $678=((($677)+(16384))|0);
   var $679=$678 >> 15;
   $t120=$679;
   var $680=$t019;
   var $681=$i;
   var $682=((($681)+(2))|0);
   var $683=$4;
   var $684=(($683+($682<<2))|0);
   HEAP32[(($684)>>2)]=$680;
   var $685=$t120;
   var $686=$i;
   var $687=((($686)+(3))|0);
   var $688=$4;
   var $689=(($688+($687<<2))|0);
   HEAP32[(($689)>>2)]=$685;
   label = 81; break;
  case 81: 
   var $691=$i;
   var $692=((($691)+(4))|0);
   $i=$692;
   label = 79; break;
  case 82: 
   label = 83; break;
  case 83: 
   var $695=$i;
   var $696=(($size)|0);
   var $697=HEAP32[(($696)>>2)];
   var $698=(($695)|(0)) < (($697)|(0));
   if ($698) { label = 84; break; } else { label = 86; break; }
  case 84: 
   var $700=$iscale17;
   var $701=$i;
   var $702=$_src18;
   var $703=(($702+($701<<1))|0);
   var $704=HEAP16[(($703)>>1)];
   var $705=(($704)&(65535));
   var $706=(Math.imul($700,$705)|0);
   var $707=(($706)|0);
   var $708=((($707)+(16384))|0);
   var $709=$708 >> 15;
   $t021=$709;
   var $710=$t021;
   var $711=$i;
   var $712=$4;
   var $713=(($712+($711<<2))|0);
   HEAP32[(($713)>>2)]=$710;
   label = 85; break;
  case 85: 
   var $715=$i;
   var $716=((($715)+(1))|0);
   $i=$716;
   label = 83; break;
  case 86: 
   label = 87; break;
  case 87: 
   var $719=$3;
   var $720=$_src18;
   var $721=(($720+($719<<1))|0);
   $_src18=$721;
   var $722=$5;
   var $723=$4;
   var $724=(($723+($722<<2))|0);
   $4=$724;
   label = 77; break;
  case 88: 
   label = 102; break;
  case 89: 
   var $727=$2;
   var $728=$727;
   $_src22=$728;
   var $729=$3;
   var $730=((((($729)>>>(0)))/(2))&-1);
   $3=$730;
   label = 90; break;
  case 90: 
   var $732=(($size+4)|0);
   var $733=HEAP32[(($732)>>2)];
   var $734=((($733)-(1))|0);
   HEAP32[(($732)>>2)]=$734;
   var $735=(($733)|(0))!=0;
   if ($735) { label = 91; break; } else { label = 101; break; }
  case 91: 
   $i=0;
   label = 92; break;
  case 92: 
   var $738=$i;
   var $739=(($size)|0);
   var $740=HEAP32[(($739)>>2)];
   var $741=((($740)-(4))|0);
   var $742=(($738)|(0)) <= (($741)|(0));
   if ($742) { label = 93; break; } else { label = 95; break; }
  case 93: 
   var $744=$6;
   var $745=$i;
   var $746=$_src22;
   var $747=(($746+($745<<1))|0);
   var $748=HEAP16[(($747)>>1)];
   var $749=(($748)&(65535));
   var $750=(($749)|(0));
   var $751=($744)*($750);
   var $752=$7;
   var $753=($751)+($752);
   var $754=__Z7cvRoundd($753);
   $t023=$754;
   var $755=$6;
   var $756=$i;
   var $757=((($756)+(1))|0);
   var $758=$_src22;
   var $759=(($758+($757<<1))|0);
   var $760=HEAP16[(($759)>>1)];
   var $761=(($760)&(65535));
   var $762=(($761)|(0));
   var $763=($755)*($762);
   var $764=$7;
   var $765=($763)+($764);
   var $766=__Z7cvRoundd($765);
   $t124=$766;
   var $767=$t023;
   var $768=$i;
   var $769=$4;
   var $770=(($769+($768<<2))|0);
   HEAP32[(($770)>>2)]=$767;
   var $771=$t124;
   var $772=$i;
   var $773=((($772)+(1))|0);
   var $774=$4;
   var $775=(($774+($773<<2))|0);
   HEAP32[(($775)>>2)]=$771;
   var $776=$6;
   var $777=$i;
   var $778=((($777)+(2))|0);
   var $779=$_src22;
   var $780=(($779+($778<<1))|0);
   var $781=HEAP16[(($780)>>1)];
   var $782=(($781)&(65535));
   var $783=(($782)|(0));
   var $784=($776)*($783);
   var $785=$7;
   var $786=($784)+($785);
   var $787=__Z7cvRoundd($786);
   $t023=$787;
   var $788=$6;
   var $789=$i;
   var $790=((($789)+(3))|0);
   var $791=$_src22;
   var $792=(($791+($790<<1))|0);
   var $793=HEAP16[(($792)>>1)];
   var $794=(($793)&(65535));
   var $795=(($794)|(0));
   var $796=($788)*($795);
   var $797=$7;
   var $798=($796)+($797);
   var $799=__Z7cvRoundd($798);
   $t124=$799;
   var $800=$t023;
   var $801=$i;
   var $802=((($801)+(2))|0);
   var $803=$4;
   var $804=(($803+($802<<2))|0);
   HEAP32[(($804)>>2)]=$800;
   var $805=$t124;
   var $806=$i;
   var $807=((($806)+(3))|0);
   var $808=$4;
   var $809=(($808+($807<<2))|0);
   HEAP32[(($809)>>2)]=$805;
   label = 94; break;
  case 94: 
   var $811=$i;
   var $812=((($811)+(4))|0);
   $i=$812;
   label = 92; break;
  case 95: 
   label = 96; break;
  case 96: 
   var $815=$i;
   var $816=(($size)|0);
   var $817=HEAP32[(($816)>>2)];
   var $818=(($815)|(0)) < (($817)|(0));
   if ($818) { label = 97; break; } else { label = 99; break; }
  case 97: 
   var $820=$6;
   var $821=$i;
   var $822=$_src22;
   var $823=(($822+($821<<1))|0);
   var $824=HEAP16[(($823)>>1)];
   var $825=(($824)&(65535));
   var $826=(($825)|(0));
   var $827=($820)*($826);
   var $828=$7;
   var $829=($827)+($828);
   var $830=__Z7cvRoundd($829);
   $t025=$830;
   var $831=$t025;
   var $832=$i;
   var $833=$4;
   var $834=(($833+($832<<2))|0);
   HEAP32[(($834)>>2)]=$831;
   label = 98; break;
  case 98: 
   var $836=$i;
   var $837=((($836)+(1))|0);
   $i=$837;
   label = 96; break;
  case 99: 
   label = 100; break;
  case 100: 
   var $840=$3;
   var $841=$_src22;
   var $842=(($841+($840<<1))|0);
   $_src22=$842;
   var $843=$5;
   var $844=$4;
   var $845=(($844+($843<<2))|0);
   $4=$845;
   label = 90; break;
  case 101: 
   label = 102; break;
  case 102: 
   label = 172; break;
  case 103: 
   var $849=$6;
   var $850=Math.abs($849);
   var $851=$850 <= 1;
   if ($851) { label = 104; break; } else { label = 118; break; }
  case 104: 
   var $853=$7;
   var $854=Math.abs($853);
   var $855=$854 <= 32767.99998474121;
   if ($855) { label = 105; break; } else { label = 118; break; }
  case 105: 
   var $857=$6;
   var $858=($857)*(32768);
   var $859=__Z7cvRoundd($858);
   $iscale26=$859;
   var $860=$7;
   var $861=($860)*(32768);
   var $862=__Z7cvRoundd($861);
   $ishift27=$862;
   var $863=$2;
   var $864=$863;
   $_src28=$864;
   var $865=$3;
   var $866=((((($865)>>>(0)))/(2))&-1);
   $3=$866;
   label = 106; break;
  case 106: 
   var $868=(($size+4)|0);
   var $869=HEAP32[(($868)>>2)];
   var $870=((($869)-(1))|0);
   HEAP32[(($868)>>2)]=$870;
   var $871=(($869)|(0))!=0;
   if ($871) { label = 107; break; } else { label = 117; break; }
  case 107: 
   $i=0;
   label = 108; break;
  case 108: 
   var $874=$i;
   var $875=(($size)|0);
   var $876=HEAP32[(($875)>>2)];
   var $877=((($876)-(4))|0);
   var $878=(($874)|(0)) <= (($877)|(0));
   if ($878) { label = 109; break; } else { label = 111; break; }
  case 109: 
   var $880=$iscale26;
   var $881=$i;
   var $882=$_src28;
   var $883=(($882+($881<<1))|0);
   var $884=HEAP16[(($883)>>1)];
   var $885=(($884 << 16) >> 16);
   var $886=(Math.imul($880,$885)|0);
   var $887=$ishift27;
   var $888=((($886)+($887))|0);
   var $889=((($888)+(16384))|0);
   var $890=$889 >> 15;
   $t029=$890;
   var $891=$iscale26;
   var $892=$i;
   var $893=((($892)+(1))|0);
   var $894=$_src28;
   var $895=(($894+($893<<1))|0);
   var $896=HEAP16[(($895)>>1)];
   var $897=(($896 << 16) >> 16);
   var $898=(Math.imul($891,$897)|0);
   var $899=$ishift27;
   var $900=((($898)+($899))|0);
   var $901=((($900)+(16384))|0);
   var $902=$901 >> 15;
   $t130=$902;
   var $903=$t029;
   var $904=$i;
   var $905=$4;
   var $906=(($905+($904<<2))|0);
   HEAP32[(($906)>>2)]=$903;
   var $907=$t130;
   var $908=$i;
   var $909=((($908)+(1))|0);
   var $910=$4;
   var $911=(($910+($909<<2))|0);
   HEAP32[(($911)>>2)]=$907;
   var $912=$iscale26;
   var $913=$i;
   var $914=((($913)+(2))|0);
   var $915=$_src28;
   var $916=(($915+($914<<1))|0);
   var $917=HEAP16[(($916)>>1)];
   var $918=(($917 << 16) >> 16);
   var $919=(Math.imul($912,$918)|0);
   var $920=$ishift27;
   var $921=((($919)+($920))|0);
   var $922=((($921)+(16384))|0);
   var $923=$922 >> 15;
   $t029=$923;
   var $924=$iscale26;
   var $925=$i;
   var $926=((($925)+(3))|0);
   var $927=$_src28;
   var $928=(($927+($926<<1))|0);
   var $929=HEAP16[(($928)>>1)];
   var $930=(($929 << 16) >> 16);
   var $931=(Math.imul($924,$930)|0);
   var $932=$ishift27;
   var $933=((($931)+($932))|0);
   var $934=((($933)+(16384))|0);
   var $935=$934 >> 15;
   $t130=$935;
   var $936=$t029;
   var $937=$i;
   var $938=((($937)+(2))|0);
   var $939=$4;
   var $940=(($939+($938<<2))|0);
   HEAP32[(($940)>>2)]=$936;
   var $941=$t130;
   var $942=$i;
   var $943=((($942)+(3))|0);
   var $944=$4;
   var $945=(($944+($943<<2))|0);
   HEAP32[(($945)>>2)]=$941;
   label = 110; break;
  case 110: 
   var $947=$i;
   var $948=((($947)+(4))|0);
   $i=$948;
   label = 108; break;
  case 111: 
   label = 112; break;
  case 112: 
   var $951=$i;
   var $952=(($size)|0);
   var $953=HEAP32[(($952)>>2)];
   var $954=(($951)|(0)) < (($953)|(0));
   if ($954) { label = 113; break; } else { label = 115; break; }
  case 113: 
   var $956=$iscale26;
   var $957=$i;
   var $958=$_src28;
   var $959=(($958+($957<<1))|0);
   var $960=HEAP16[(($959)>>1)];
   var $961=(($960 << 16) >> 16);
   var $962=(Math.imul($956,$961)|0);
   var $963=$ishift27;
   var $964=((($962)+($963))|0);
   var $965=((($964)+(16384))|0);
   var $966=$965 >> 15;
   $t031=$966;
   var $967=$t031;
   var $968=$i;
   var $969=$4;
   var $970=(($969+($968<<2))|0);
   HEAP32[(($970)>>2)]=$967;
   label = 114; break;
  case 114: 
   var $972=$i;
   var $973=((($972)+(1))|0);
   $i=$973;
   label = 112; break;
  case 115: 
   label = 116; break;
  case 116: 
   var $976=$3;
   var $977=$_src28;
   var $978=(($977+($976<<1))|0);
   $_src28=$978;
   var $979=$5;
   var $980=$4;
   var $981=(($980+($979<<2))|0);
   $4=$981;
   label = 106; break;
  case 117: 
   label = 131; break;
  case 118: 
   var $984=$2;
   var $985=$984;
   $_src32=$985;
   var $986=$3;
   var $987=((((($986)>>>(0)))/(2))&-1);
   $3=$987;
   label = 119; break;
  case 119: 
   var $989=(($size+4)|0);
   var $990=HEAP32[(($989)>>2)];
   var $991=((($990)-(1))|0);
   HEAP32[(($989)>>2)]=$991;
   var $992=(($990)|(0))!=0;
   if ($992) { label = 120; break; } else { label = 130; break; }
  case 120: 
   $i=0;
   label = 121; break;
  case 121: 
   var $995=$i;
   var $996=(($size)|0);
   var $997=HEAP32[(($996)>>2)];
   var $998=((($997)-(4))|0);
   var $999=(($995)|(0)) <= (($998)|(0));
   if ($999) { label = 122; break; } else { label = 124; break; }
  case 122: 
   var $1001=$6;
   var $1002=$i;
   var $1003=$_src32;
   var $1004=(($1003+($1002<<1))|0);
   var $1005=HEAP16[(($1004)>>1)];
   var $1006=(($1005 << 16) >> 16);
   var $1007=(($1006)|(0));
   var $1008=($1001)*($1007);
   var $1009=$7;
   var $1010=($1008)+($1009);
   var $1011=__Z7cvRoundd($1010);
   $t033=$1011;
   var $1012=$6;
   var $1013=$i;
   var $1014=((($1013)+(1))|0);
   var $1015=$_src32;
   var $1016=(($1015+($1014<<1))|0);
   var $1017=HEAP16[(($1016)>>1)];
   var $1018=(($1017 << 16) >> 16);
   var $1019=(($1018)|(0));
   var $1020=($1012)*($1019);
   var $1021=$7;
   var $1022=($1020)+($1021);
   var $1023=__Z7cvRoundd($1022);
   $t134=$1023;
   var $1024=$t033;
   var $1025=$i;
   var $1026=$4;
   var $1027=(($1026+($1025<<2))|0);
   HEAP32[(($1027)>>2)]=$1024;
   var $1028=$t134;
   var $1029=$i;
   var $1030=((($1029)+(1))|0);
   var $1031=$4;
   var $1032=(($1031+($1030<<2))|0);
   HEAP32[(($1032)>>2)]=$1028;
   var $1033=$6;
   var $1034=$i;
   var $1035=((($1034)+(2))|0);
   var $1036=$_src32;
   var $1037=(($1036+($1035<<1))|0);
   var $1038=HEAP16[(($1037)>>1)];
   var $1039=(($1038 << 16) >> 16);
   var $1040=(($1039)|(0));
   var $1041=($1033)*($1040);
   var $1042=$7;
   var $1043=($1041)+($1042);
   var $1044=__Z7cvRoundd($1043);
   $t033=$1044;
   var $1045=$6;
   var $1046=$i;
   var $1047=((($1046)+(3))|0);
   var $1048=$_src32;
   var $1049=(($1048+($1047<<1))|0);
   var $1050=HEAP16[(($1049)>>1)];
   var $1051=(($1050 << 16) >> 16);
   var $1052=(($1051)|(0));
   var $1053=($1045)*($1052);
   var $1054=$7;
   var $1055=($1053)+($1054);
   var $1056=__Z7cvRoundd($1055);
   $t134=$1056;
   var $1057=$t033;
   var $1058=$i;
   var $1059=((($1058)+(2))|0);
   var $1060=$4;
   var $1061=(($1060+($1059<<2))|0);
   HEAP32[(($1061)>>2)]=$1057;
   var $1062=$t134;
   var $1063=$i;
   var $1064=((($1063)+(3))|0);
   var $1065=$4;
   var $1066=(($1065+($1064<<2))|0);
   HEAP32[(($1066)>>2)]=$1062;
   label = 123; break;
  case 123: 
   var $1068=$i;
   var $1069=((($1068)+(4))|0);
   $i=$1069;
   label = 121; break;
  case 124: 
   label = 125; break;
  case 125: 
   var $1072=$i;
   var $1073=(($size)|0);
   var $1074=HEAP32[(($1073)>>2)];
   var $1075=(($1072)|(0)) < (($1074)|(0));
   if ($1075) { label = 126; break; } else { label = 128; break; }
  case 126: 
   var $1077=$6;
   var $1078=$i;
   var $1079=$_src32;
   var $1080=(($1079+($1078<<1))|0);
   var $1081=HEAP16[(($1080)>>1)];
   var $1082=(($1081 << 16) >> 16);
   var $1083=(($1082)|(0));
   var $1084=($1077)*($1083);
   var $1085=$7;
   var $1086=($1084)+($1085);
   var $1087=__Z7cvRoundd($1086);
   $t035=$1087;
   var $1088=$t035;
   var $1089=$i;
   var $1090=$4;
   var $1091=(($1090+($1089<<2))|0);
   HEAP32[(($1091)>>2)]=$1088;
   label = 127; break;
  case 127: 
   var $1093=$i;
   var $1094=((($1093)+(1))|0);
   $i=$1094;
   label = 125; break;
  case 128: 
   label = 129; break;
  case 129: 
   var $1097=$3;
   var $1098=$_src32;
   var $1099=(($1098+($1097<<1))|0);
   $_src32=$1099;
   var $1100=$5;
   var $1101=$4;
   var $1102=(($1101+($1100<<2))|0);
   $4=$1102;
   label = 119; break;
  case 130: 
   label = 131; break;
  case 131: 
   label = 172; break;
  case 132: 
   var $1106=$2;
   var $1107=$1106;
   $_src36=$1107;
   var $1108=$3;
   var $1109=((((($1108)>>>(0)))/(4))&-1);
   $3=$1109;
   label = 133; break;
  case 133: 
   var $1111=(($size+4)|0);
   var $1112=HEAP32[(($1111)>>2)];
   var $1113=((($1112)-(1))|0);
   HEAP32[(($1111)>>2)]=$1113;
   var $1114=(($1112)|(0))!=0;
   if ($1114) { label = 134; break; } else { label = 144; break; }
  case 134: 
   $i=0;
   label = 135; break;
  case 135: 
   var $1117=$i;
   var $1118=(($size)|0);
   var $1119=HEAP32[(($1118)>>2)];
   var $1120=((($1119)-(4))|0);
   var $1121=(($1117)|(0)) <= (($1120)|(0));
   if ($1121) { label = 136; break; } else { label = 138; break; }
  case 136: 
   var $1123=$6;
   var $1124=$i;
   var $1125=$_src36;
   var $1126=(($1125+($1124<<2))|0);
   var $1127=HEAP32[(($1126)>>2)];
   var $1128=(($1127)|(0));
   var $1129=($1123)*($1128);
   var $1130=$7;
   var $1131=($1129)+($1130);
   var $1132=__Z7cvRoundd($1131);
   $t037=$1132;
   var $1133=$6;
   var $1134=$i;
   var $1135=((($1134)+(1))|0);
   var $1136=$_src36;
   var $1137=(($1136+($1135<<2))|0);
   var $1138=HEAP32[(($1137)>>2)];
   var $1139=(($1138)|(0));
   var $1140=($1133)*($1139);
   var $1141=$7;
   var $1142=($1140)+($1141);
   var $1143=__Z7cvRoundd($1142);
   $t138=$1143;
   var $1144=$t037;
   var $1145=$i;
   var $1146=$4;
   var $1147=(($1146+($1145<<2))|0);
   HEAP32[(($1147)>>2)]=$1144;
   var $1148=$t138;
   var $1149=$i;
   var $1150=((($1149)+(1))|0);
   var $1151=$4;
   var $1152=(($1151+($1150<<2))|0);
   HEAP32[(($1152)>>2)]=$1148;
   var $1153=$6;
   var $1154=$i;
   var $1155=((($1154)+(2))|0);
   var $1156=$_src36;
   var $1157=(($1156+($1155<<2))|0);
   var $1158=HEAP32[(($1157)>>2)];
   var $1159=(($1158)|(0));
   var $1160=($1153)*($1159);
   var $1161=$7;
   var $1162=($1160)+($1161);
   var $1163=__Z7cvRoundd($1162);
   $t037=$1163;
   var $1164=$6;
   var $1165=$i;
   var $1166=((($1165)+(3))|0);
   var $1167=$_src36;
   var $1168=(($1167+($1166<<2))|0);
   var $1169=HEAP32[(($1168)>>2)];
   var $1170=(($1169)|(0));
   var $1171=($1164)*($1170);
   var $1172=$7;
   var $1173=($1171)+($1172);
   var $1174=__Z7cvRoundd($1173);
   $t138=$1174;
   var $1175=$t037;
   var $1176=$i;
   var $1177=((($1176)+(2))|0);
   var $1178=$4;
   var $1179=(($1178+($1177<<2))|0);
   HEAP32[(($1179)>>2)]=$1175;
   var $1180=$t138;
   var $1181=$i;
   var $1182=((($1181)+(3))|0);
   var $1183=$4;
   var $1184=(($1183+($1182<<2))|0);
   HEAP32[(($1184)>>2)]=$1180;
   label = 137; break;
  case 137: 
   var $1186=$i;
   var $1187=((($1186)+(4))|0);
   $i=$1187;
   label = 135; break;
  case 138: 
   label = 139; break;
  case 139: 
   var $1190=$i;
   var $1191=(($size)|0);
   var $1192=HEAP32[(($1191)>>2)];
   var $1193=(($1190)|(0)) < (($1192)|(0));
   if ($1193) { label = 140; break; } else { label = 142; break; }
  case 140: 
   var $1195=$6;
   var $1196=$i;
   var $1197=$_src36;
   var $1198=(($1197+($1196<<2))|0);
   var $1199=HEAP32[(($1198)>>2)];
   var $1200=(($1199)|(0));
   var $1201=($1195)*($1200);
   var $1202=$7;
   var $1203=($1201)+($1202);
   var $1204=__Z7cvRoundd($1203);
   $t039=$1204;
   var $1205=$t039;
   var $1206=$i;
   var $1207=$4;
   var $1208=(($1207+($1206<<2))|0);
   HEAP32[(($1208)>>2)]=$1205;
   label = 141; break;
  case 141: 
   var $1210=$i;
   var $1211=((($1210)+(1))|0);
   $i=$1211;
   label = 139; break;
  case 142: 
   label = 143; break;
  case 143: 
   var $1214=$3;
   var $1215=$_src36;
   var $1216=(($1215+($1214<<2))|0);
   $_src36=$1216;
   var $1217=$5;
   var $1218=$4;
   var $1219=(($1218+($1217<<2))|0);
   $4=$1219;
   label = 133; break;
  case 144: 
   label = 172; break;
  case 145: 
   var $1222=$2;
   var $1223=$1222;
   $_src40=$1223;
   var $1224=$3;
   var $1225=((((($1224)>>>(0)))/(4))&-1);
   $3=$1225;
   label = 146; break;
  case 146: 
   var $1227=(($size+4)|0);
   var $1228=HEAP32[(($1227)>>2)];
   var $1229=((($1228)-(1))|0);
   HEAP32[(($1227)>>2)]=$1229;
   var $1230=(($1228)|(0))!=0;
   if ($1230) { label = 147; break; } else { label = 157; break; }
  case 147: 
   $i=0;
   label = 148; break;
  case 148: 
   var $1233=$i;
   var $1234=(($size)|0);
   var $1235=HEAP32[(($1234)>>2)];
   var $1236=((($1235)-(4))|0);
   var $1237=(($1233)|(0)) <= (($1236)|(0));
   if ($1237) { label = 149; break; } else { label = 151; break; }
  case 149: 
   var $1239=$6;
   var $1240=$i;
   var $1241=$_src40;
   var $1242=(($1241+($1240<<2))|0);
   var $1243=HEAPF32[(($1242)>>2)];
   var $1244=$1243;
   var $1245=($1239)*($1244);
   var $1246=$7;
   var $1247=($1245)+($1246);
   var $1248=__Z7cvRoundd($1247);
   $t041=$1248;
   var $1249=$6;
   var $1250=$i;
   var $1251=((($1250)+(1))|0);
   var $1252=$_src40;
   var $1253=(($1252+($1251<<2))|0);
   var $1254=HEAPF32[(($1253)>>2)];
   var $1255=$1254;
   var $1256=($1249)*($1255);
   var $1257=$7;
   var $1258=($1256)+($1257);
   var $1259=__Z7cvRoundd($1258);
   $t142=$1259;
   var $1260=$t041;
   var $1261=$i;
   var $1262=$4;
   var $1263=(($1262+($1261<<2))|0);
   HEAP32[(($1263)>>2)]=$1260;
   var $1264=$t142;
   var $1265=$i;
   var $1266=((($1265)+(1))|0);
   var $1267=$4;
   var $1268=(($1267+($1266<<2))|0);
   HEAP32[(($1268)>>2)]=$1264;
   var $1269=$6;
   var $1270=$i;
   var $1271=((($1270)+(2))|0);
   var $1272=$_src40;
   var $1273=(($1272+($1271<<2))|0);
   var $1274=HEAPF32[(($1273)>>2)];
   var $1275=$1274;
   var $1276=($1269)*($1275);
   var $1277=$7;
   var $1278=($1276)+($1277);
   var $1279=__Z7cvRoundd($1278);
   $t041=$1279;
   var $1280=$6;
   var $1281=$i;
   var $1282=((($1281)+(3))|0);
   var $1283=$_src40;
   var $1284=(($1283+($1282<<2))|0);
   var $1285=HEAPF32[(($1284)>>2)];
   var $1286=$1285;
   var $1287=($1280)*($1286);
   var $1288=$7;
   var $1289=($1287)+($1288);
   var $1290=__Z7cvRoundd($1289);
   $t142=$1290;
   var $1291=$t041;
   var $1292=$i;
   var $1293=((($1292)+(2))|0);
   var $1294=$4;
   var $1295=(($1294+($1293<<2))|0);
   HEAP32[(($1295)>>2)]=$1291;
   var $1296=$t142;
   var $1297=$i;
   var $1298=((($1297)+(3))|0);
   var $1299=$4;
   var $1300=(($1299+($1298<<2))|0);
   HEAP32[(($1300)>>2)]=$1296;
   label = 150; break;
  case 150: 
   var $1302=$i;
   var $1303=((($1302)+(4))|0);
   $i=$1303;
   label = 148; break;
  case 151: 
   label = 152; break;
  case 152: 
   var $1306=$i;
   var $1307=(($size)|0);
   var $1308=HEAP32[(($1307)>>2)];
   var $1309=(($1306)|(0)) < (($1308)|(0));
   if ($1309) { label = 153; break; } else { label = 155; break; }
  case 153: 
   var $1311=$6;
   var $1312=$i;
   var $1313=$_src40;
   var $1314=(($1313+($1312<<2))|0);
   var $1315=HEAPF32[(($1314)>>2)];
   var $1316=$1315;
   var $1317=($1311)*($1316);
   var $1318=$7;
   var $1319=($1317)+($1318);
   var $1320=__Z7cvRoundd($1319);
   $t043=$1320;
   var $1321=$t043;
   var $1322=$i;
   var $1323=$4;
   var $1324=(($1323+($1322<<2))|0);
   HEAP32[(($1324)>>2)]=$1321;
   label = 154; break;
  case 154: 
   var $1326=$i;
   var $1327=((($1326)+(1))|0);
   $i=$1327;
   label = 152; break;
  case 155: 
   label = 156; break;
  case 156: 
   var $1330=$3;
   var $1331=$_src40;
   var $1332=(($1331+($1330<<2))|0);
   $_src40=$1332;
   var $1333=$5;
   var $1334=$4;
   var $1335=(($1334+($1333<<2))|0);
   $4=$1335;
   label = 146; break;
  case 157: 
   label = 172; break;
  case 158: 
   var $1338=$2;
   var $1339=$1338;
   $_src44=$1339;
   var $1340=$3;
   var $1341=((((($1340)>>>(0)))/(8))&-1);
   $3=$1341;
   label = 159; break;
  case 159: 
   var $1343=(($size+4)|0);
   var $1344=HEAP32[(($1343)>>2)];
   var $1345=((($1344)-(1))|0);
   HEAP32[(($1343)>>2)]=$1345;
   var $1346=(($1344)|(0))!=0;
   if ($1346) { label = 160; break; } else { label = 170; break; }
  case 160: 
   $i=0;
   label = 161; break;
  case 161: 
   var $1349=$i;
   var $1350=(($size)|0);
   var $1351=HEAP32[(($1350)>>2)];
   var $1352=((($1351)-(4))|0);
   var $1353=(($1349)|(0)) <= (($1352)|(0));
   if ($1353) { label = 162; break; } else { label = 164; break; }
  case 162: 
   var $1355=$6;
   var $1356=$i;
   var $1357=$_src44;
   var $1358=(($1357+($1356<<3))|0);
   var $1359=HEAPF64[(($1358)>>3)];
   var $1360=($1355)*($1359);
   var $1361=$7;
   var $1362=($1360)+($1361);
   var $1363=__Z7cvRoundd($1362);
   $t045=$1363;
   var $1364=$6;
   var $1365=$i;
   var $1366=((($1365)+(1))|0);
   var $1367=$_src44;
   var $1368=(($1367+($1366<<3))|0);
   var $1369=HEAPF64[(($1368)>>3)];
   var $1370=($1364)*($1369);
   var $1371=$7;
   var $1372=($1370)+($1371);
   var $1373=__Z7cvRoundd($1372);
   $t146=$1373;
   var $1374=$t045;
   var $1375=$i;
   var $1376=$4;
   var $1377=(($1376+($1375<<2))|0);
   HEAP32[(($1377)>>2)]=$1374;
   var $1378=$t146;
   var $1379=$i;
   var $1380=((($1379)+(1))|0);
   var $1381=$4;
   var $1382=(($1381+($1380<<2))|0);
   HEAP32[(($1382)>>2)]=$1378;
   var $1383=$6;
   var $1384=$i;
   var $1385=((($1384)+(2))|0);
   var $1386=$_src44;
   var $1387=(($1386+($1385<<3))|0);
   var $1388=HEAPF64[(($1387)>>3)];
   var $1389=($1383)*($1388);
   var $1390=$7;
   var $1391=($1389)+($1390);
   var $1392=__Z7cvRoundd($1391);
   $t045=$1392;
   var $1393=$6;
   var $1394=$i;
   var $1395=((($1394)+(3))|0);
   var $1396=$_src44;
   var $1397=(($1396+($1395<<3))|0);
   var $1398=HEAPF64[(($1397)>>3)];
   var $1399=($1393)*($1398);
   var $1400=$7;
   var $1401=($1399)+($1400);
   var $1402=__Z7cvRoundd($1401);
   $t146=$1402;
   var $1403=$t045;
   var $1404=$i;
   var $1405=((($1404)+(2))|0);
   var $1406=$4;
   var $1407=(($1406+($1405<<2))|0);
   HEAP32[(($1407)>>2)]=$1403;
   var $1408=$t146;
   var $1409=$i;
   var $1410=((($1409)+(3))|0);
   var $1411=$4;
   var $1412=(($1411+($1410<<2))|0);
   HEAP32[(($1412)>>2)]=$1408;
   label = 163; break;
  case 163: 
   var $1414=$i;
   var $1415=((($1414)+(4))|0);
   $i=$1415;
   label = 161; break;
  case 164: 
   label = 165; break;
  case 165: 
   var $1418=$i;
   var $1419=(($size)|0);
   var $1420=HEAP32[(($1419)>>2)];
   var $1421=(($1418)|(0)) < (($1420)|(0));
   if ($1421) { label = 166; break; } else { label = 168; break; }
  case 166: 
   var $1423=$6;
   var $1424=$i;
   var $1425=$_src44;
   var $1426=(($1425+($1424<<3))|0);
   var $1427=HEAPF64[(($1426)>>3)];
   var $1428=($1423)*($1427);
   var $1429=$7;
   var $1430=($1428)+($1429);
   var $1431=__Z7cvRoundd($1430);
   $t047=$1431;
   var $1432=$t047;
   var $1433=$i;
   var $1434=$4;
   var $1435=(($1434+($1433<<2))|0);
   HEAP32[(($1435)>>2)]=$1432;
   label = 167; break;
  case 167: 
   var $1437=$i;
   var $1438=((($1437)+(1))|0);
   $i=$1438;
   label = 165; break;
  case 168: 
   label = 169; break;
  case 169: 
   var $1441=$3;
   var $1442=$_src44;
   var $1443=(($1442+($1441<<3))|0);
   $_src44=$1443;
   var $1444=$5;
   var $1445=$4;
   var $1446=(($1445+($1444<<2))|0);
   $4=$1446;
   label = 159; break;
  case 170: 
   label = 172; break;
  case 171: 
   $1=-12;
   label = 173; break;
  case 172: 
   $1=0;
   label = 173; break;
  case 173: 
   var $1451=$1;
   STACKTOP = sp;
   return $1451;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvCvtScaleTo_32f_C1RPKhiPfi6CvSizeddi($src, $srcstep, $dst, $dststep, $size, $scale, $shift, $param) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1040)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $i;
   var $srctype;
   var $lut=sp;
   var $val;
   var $9=(sp)+(1024);
   var $_src;
   var $t0;
   var $t1;
   var $t01;
   var $10=(sp)+(1032);
   var $_src2;
   var $t03;
   var $t14;
   var $t05;
   var $_src6;
   var $t07;
   var $t18;
   var $t09;
   var $_src10;
   var $t011;
   var $t112;
   var $t013;
   var $_src14;
   var $t015;
   var $t116;
   var $t017;
   var $_src18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $t023;
   var $t124;
   var $t025;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$scale;
   $7=$shift;
   $8=$param;
   var $11=$8;
   $srctype=$11;
   var $12=$5;
   var $13=((((($12)>>>(0)))/(4))&-1);
   $5=$13;
   var $14=$srctype;
   var $15=$14 & 7;
   if ((($15)|(0))==0) {
    label = 2; break;
   }
   else if ((($15)|(0))==1) {
    label = 22; break;
   }
   else if ((($15)|(0))==2) {
    label = 42; break;
   }
   else if ((($15)|(0))==3) {
    label = 55; break;
   }
   else if ((($15)|(0))==4) {
    label = 68; break;
   }
   else if ((($15)|(0))==5) {
    label = 81; break;
   }
   else if ((($15)|(0))==6) {
    label = 94; break;
   }
   else {
   label = 107; break;
   }
  case 2: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(Math.imul($18,$20)|0);
   var $22=(($21)|(0)) >= 256;
   if ($22) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $24=$7;
   $val=$24;
   $i=0;
   label = 4; break;
  case 4: 
   var $26=$i;
   var $27=(($26)|(0)) < 256;
   if ($27) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $29=$val;
   var $30=$29;
   var $31=$i;
   var $32=(($lut+($31<<2))|0);
   HEAPF32[(($32)>>2)]=$30;
   label = 6; break;
  case 6: 
   var $34=$i;
   var $35=((($34)+(1))|0);
   $i=$35;
   var $36=$6;
   var $37=$val;
   var $38=($37)+($36);
   $val=$38;
   label = 4; break;
  case 7: 
   var $40=$2;
   var $41=$3;
   var $42=$4;
   var $43=$5;
   var $44=($43<<2);
   var $45=$9;
   var $46=$size;
   assert(8 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];
   var $47=(($lut)|0);
   var $48=__Z26icvLUT_Transform8u_32f_C1RPKhiPfi6CvSizePKf($40, $41, $42, $44, $9, $47);
   label = 21; break;
  case 8: 
   var $50=$2;
   $_src=$50;
   var $51=$3;
   var $52=(((($51)>>>(0)))&-1);
   $3=$52;
   label = 9; break;
  case 9: 
   var $54=(($size+4)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=((($55)-(1))|0);
   HEAP32[(($54)>>2)]=$56;
   var $57=(($55)|(0))!=0;
   if ($57) { label = 10; break; } else { label = 20; break; }
  case 10: 
   $i=0;
   label = 11; break;
  case 11: 
   var $60=$i;
   var $61=(($size)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=((($62)-(4))|0);
   var $64=(($60)|(0)) <= (($63)|(0));
   if ($64) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $66=$6;
   var $67=$i;
   var $68=$_src;
   var $69=(($68+$67)|0);
   var $70=HEAP8[($69)];
   var $71=(($70)&(255));
   var $72=(($71)|(0));
   var $73=($66)*($72);
   var $74=$7;
   var $75=($73)+($74);
   $t0=$75;
   var $76=$6;
   var $77=$i;
   var $78=((($77)+(1))|0);
   var $79=$_src;
   var $80=(($79+$78)|0);
   var $81=HEAP8[($80)];
   var $82=(($81)&(255));
   var $83=(($82)|(0));
   var $84=($76)*($83);
   var $85=$7;
   var $86=($84)+($85);
   $t1=$86;
   var $87=$t0;
   var $88=$87;
   var $89=$i;
   var $90=$4;
   var $91=(($90+($89<<2))|0);
   HEAPF32[(($91)>>2)]=$88;
   var $92=$t1;
   var $93=$92;
   var $94=$i;
   var $95=((($94)+(1))|0);
   var $96=$4;
   var $97=(($96+($95<<2))|0);
   HEAPF32[(($97)>>2)]=$93;
   var $98=$6;
   var $99=$i;
   var $100=((($99)+(2))|0);
   var $101=$_src;
   var $102=(($101+$100)|0);
   var $103=HEAP8[($102)];
   var $104=(($103)&(255));
   var $105=(($104)|(0));
   var $106=($98)*($105);
   var $107=$7;
   var $108=($106)+($107);
   $t0=$108;
   var $109=$6;
   var $110=$i;
   var $111=((($110)+(3))|0);
   var $112=$_src;
   var $113=(($112+$111)|0);
   var $114=HEAP8[($113)];
   var $115=(($114)&(255));
   var $116=(($115)|(0));
   var $117=($109)*($116);
   var $118=$7;
   var $119=($117)+($118);
   $t1=$119;
   var $120=$t0;
   var $121=$120;
   var $122=$i;
   var $123=((($122)+(2))|0);
   var $124=$4;
   var $125=(($124+($123<<2))|0);
   HEAPF32[(($125)>>2)]=$121;
   var $126=$t1;
   var $127=$126;
   var $128=$i;
   var $129=((($128)+(3))|0);
   var $130=$4;
   var $131=(($130+($129<<2))|0);
   HEAPF32[(($131)>>2)]=$127;
   label = 13; break;
  case 13: 
   var $133=$i;
   var $134=((($133)+(4))|0);
   $i=$134;
   label = 11; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $137=$i;
   var $138=(($size)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=(($137)|(0)) < (($139)|(0));
   if ($140) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $142=$6;
   var $143=$i;
   var $144=$_src;
   var $145=(($144+$143)|0);
   var $146=HEAP8[($145)];
   var $147=(($146)&(255));
   var $148=(($147)|(0));
   var $149=($142)*($148);
   var $150=$7;
   var $151=($149)+($150);
   $t01=$151;
   var $152=$t01;
   var $153=$152;
   var $154=$i;
   var $155=$4;
   var $156=(($155+($154<<2))|0);
   HEAPF32[(($156)>>2)]=$153;
   label = 17; break;
  case 17: 
   var $158=$i;
   var $159=((($158)+(1))|0);
   $i=$159;
   label = 15; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $162=$3;
   var $163=$_src;
   var $164=(($163+$162)|0);
   $_src=$164;
   var $165=$5;
   var $166=$4;
   var $167=(($166+($165<<2))|0);
   $4=$167;
   label = 9; break;
  case 20: 
   label = 21; break;
  case 21: 
   label = 108; break;
  case 22: 
   var $171=(($size)|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($size+4)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=(Math.imul($172,$174)|0);
   var $176=(($175)|(0)) >= 256;
   if ($176) { label = 23; break; } else { label = 28; break; }
  case 23: 
   $i=0;
   label = 24; break;
  case 24: 
   var $179=$i;
   var $180=(($179)|(0)) < 256;
   if ($180) { label = 25; break; } else { label = 27; break; }
  case 25: 
   var $182=$i;
   var $183=(($182) & 255);
   var $184=(($183 << 24) >> 24);
   var $185=(($184)|(0));
   var $186=$6;
   var $187=($185)*($186);
   var $188=$7;
   var $189=($187)+($188);
   var $190=$189;
   var $191=$i;
   var $192=(($lut+($191<<2))|0);
   HEAPF32[(($192)>>2)]=$190;
   label = 26; break;
  case 26: 
   var $194=$i;
   var $195=((($194)+(1))|0);
   $i=$195;
   label = 24; break;
  case 27: 
   var $197=$2;
   var $198=$3;
   var $199=$4;
   var $200=$5;
   var $201=($200<<2);
   var $202=$10;
   var $203=$size;
   assert(8 % 1 === 0);HEAP32[(($202)>>2)]=HEAP32[(($203)>>2)];HEAP32[((($202)+(4))>>2)]=HEAP32[((($203)+(4))>>2)];
   var $204=(($lut)|0);
   var $205=__Z26icvLUT_Transform8u_32f_C1RPKhiPfi6CvSizePKf($197, $198, $199, $201, $10, $204);
   label = 41; break;
  case 28: 
   var $207=$2;
   $_src2=$207;
   var $208=$3;
   var $209=(((($208)>>>(0)))&-1);
   $3=$209;
   label = 29; break;
  case 29: 
   var $211=(($size+4)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=((($212)-(1))|0);
   HEAP32[(($211)>>2)]=$213;
   var $214=(($212)|(0))!=0;
   if ($214) { label = 30; break; } else { label = 40; break; }
  case 30: 
   $i=0;
   label = 31; break;
  case 31: 
   var $217=$i;
   var $218=(($size)|0);
   var $219=HEAP32[(($218)>>2)];
   var $220=((($219)-(4))|0);
   var $221=(($217)|(0)) <= (($220)|(0));
   if ($221) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $223=$6;
   var $224=$i;
   var $225=$_src2;
   var $226=(($225+$224)|0);
   var $227=HEAP8[($226)];
   var $228=(($227 << 24) >> 24);
   var $229=(($228)|(0));
   var $230=($223)*($229);
   var $231=$7;
   var $232=($230)+($231);
   $t03=$232;
   var $233=$6;
   var $234=$i;
   var $235=((($234)+(1))|0);
   var $236=$_src2;
   var $237=(($236+$235)|0);
   var $238=HEAP8[($237)];
   var $239=(($238 << 24) >> 24);
   var $240=(($239)|(0));
   var $241=($233)*($240);
   var $242=$7;
   var $243=($241)+($242);
   $t14=$243;
   var $244=$t03;
   var $245=$244;
   var $246=$i;
   var $247=$4;
   var $248=(($247+($246<<2))|0);
   HEAPF32[(($248)>>2)]=$245;
   var $249=$t14;
   var $250=$249;
   var $251=$i;
   var $252=((($251)+(1))|0);
   var $253=$4;
   var $254=(($253+($252<<2))|0);
   HEAPF32[(($254)>>2)]=$250;
   var $255=$6;
   var $256=$i;
   var $257=((($256)+(2))|0);
   var $258=$_src2;
   var $259=(($258+$257)|0);
   var $260=HEAP8[($259)];
   var $261=(($260 << 24) >> 24);
   var $262=(($261)|(0));
   var $263=($255)*($262);
   var $264=$7;
   var $265=($263)+($264);
   $t03=$265;
   var $266=$6;
   var $267=$i;
   var $268=((($267)+(3))|0);
   var $269=$_src2;
   var $270=(($269+$268)|0);
   var $271=HEAP8[($270)];
   var $272=(($271 << 24) >> 24);
   var $273=(($272)|(0));
   var $274=($266)*($273);
   var $275=$7;
   var $276=($274)+($275);
   $t14=$276;
   var $277=$t03;
   var $278=$277;
   var $279=$i;
   var $280=((($279)+(2))|0);
   var $281=$4;
   var $282=(($281+($280<<2))|0);
   HEAPF32[(($282)>>2)]=$278;
   var $283=$t14;
   var $284=$283;
   var $285=$i;
   var $286=((($285)+(3))|0);
   var $287=$4;
   var $288=(($287+($286<<2))|0);
   HEAPF32[(($288)>>2)]=$284;
   label = 33; break;
  case 33: 
   var $290=$i;
   var $291=((($290)+(4))|0);
   $i=$291;
   label = 31; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $294=$i;
   var $295=(($size)|0);
   var $296=HEAP32[(($295)>>2)];
   var $297=(($294)|(0)) < (($296)|(0));
   if ($297) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $299=$6;
   var $300=$i;
   var $301=$_src2;
   var $302=(($301+$300)|0);
   var $303=HEAP8[($302)];
   var $304=(($303 << 24) >> 24);
   var $305=(($304)|(0));
   var $306=($299)*($305);
   var $307=$7;
   var $308=($306)+($307);
   $t05=$308;
   var $309=$t05;
   var $310=$309;
   var $311=$i;
   var $312=$4;
   var $313=(($312+($311<<2))|0);
   HEAPF32[(($313)>>2)]=$310;
   label = 37; break;
  case 37: 
   var $315=$i;
   var $316=((($315)+(1))|0);
   $i=$316;
   label = 35; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $319=$3;
   var $320=$_src2;
   var $321=(($320+$319)|0);
   $_src2=$321;
   var $322=$5;
   var $323=$4;
   var $324=(($323+($322<<2))|0);
   $4=$324;
   label = 29; break;
  case 40: 
   label = 41; break;
  case 41: 
   label = 108; break;
  case 42: 
   var $328=$2;
   var $329=$328;
   $_src6=$329;
   var $330=$3;
   var $331=((((($330)>>>(0)))/(2))&-1);
   $3=$331;
   label = 43; break;
  case 43: 
   var $333=(($size+4)|0);
   var $334=HEAP32[(($333)>>2)];
   var $335=((($334)-(1))|0);
   HEAP32[(($333)>>2)]=$335;
   var $336=(($334)|(0))!=0;
   if ($336) { label = 44; break; } else { label = 54; break; }
  case 44: 
   $i=0;
   label = 45; break;
  case 45: 
   var $339=$i;
   var $340=(($size)|0);
   var $341=HEAP32[(($340)>>2)];
   var $342=((($341)-(4))|0);
   var $343=(($339)|(0)) <= (($342)|(0));
   if ($343) { label = 46; break; } else { label = 48; break; }
  case 46: 
   var $345=$6;
   var $346=$i;
   var $347=$_src6;
   var $348=(($347+($346<<1))|0);
   var $349=HEAP16[(($348)>>1)];
   var $350=(($349)&(65535));
   var $351=(($350)|(0));
   var $352=($345)*($351);
   var $353=$7;
   var $354=($352)+($353);
   $t07=$354;
   var $355=$6;
   var $356=$i;
   var $357=((($356)+(1))|0);
   var $358=$_src6;
   var $359=(($358+($357<<1))|0);
   var $360=HEAP16[(($359)>>1)];
   var $361=(($360)&(65535));
   var $362=(($361)|(0));
   var $363=($355)*($362);
   var $364=$7;
   var $365=($363)+($364);
   $t18=$365;
   var $366=$t07;
   var $367=$366;
   var $368=$i;
   var $369=$4;
   var $370=(($369+($368<<2))|0);
   HEAPF32[(($370)>>2)]=$367;
   var $371=$t18;
   var $372=$371;
   var $373=$i;
   var $374=((($373)+(1))|0);
   var $375=$4;
   var $376=(($375+($374<<2))|0);
   HEAPF32[(($376)>>2)]=$372;
   var $377=$6;
   var $378=$i;
   var $379=((($378)+(2))|0);
   var $380=$_src6;
   var $381=(($380+($379<<1))|0);
   var $382=HEAP16[(($381)>>1)];
   var $383=(($382)&(65535));
   var $384=(($383)|(0));
   var $385=($377)*($384);
   var $386=$7;
   var $387=($385)+($386);
   $t07=$387;
   var $388=$6;
   var $389=$i;
   var $390=((($389)+(3))|0);
   var $391=$_src6;
   var $392=(($391+($390<<1))|0);
   var $393=HEAP16[(($392)>>1)];
   var $394=(($393)&(65535));
   var $395=(($394)|(0));
   var $396=($388)*($395);
   var $397=$7;
   var $398=($396)+($397);
   $t18=$398;
   var $399=$t07;
   var $400=$399;
   var $401=$i;
   var $402=((($401)+(2))|0);
   var $403=$4;
   var $404=(($403+($402<<2))|0);
   HEAPF32[(($404)>>2)]=$400;
   var $405=$t18;
   var $406=$405;
   var $407=$i;
   var $408=((($407)+(3))|0);
   var $409=$4;
   var $410=(($409+($408<<2))|0);
   HEAPF32[(($410)>>2)]=$406;
   label = 47; break;
  case 47: 
   var $412=$i;
   var $413=((($412)+(4))|0);
   $i=$413;
   label = 45; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $416=$i;
   var $417=(($size)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=(($416)|(0)) < (($418)|(0));
   if ($419) { label = 50; break; } else { label = 52; break; }
  case 50: 
   var $421=$6;
   var $422=$i;
   var $423=$_src6;
   var $424=(($423+($422<<1))|0);
   var $425=HEAP16[(($424)>>1)];
   var $426=(($425)&(65535));
   var $427=(($426)|(0));
   var $428=($421)*($427);
   var $429=$7;
   var $430=($428)+($429);
   $t09=$430;
   var $431=$t09;
   var $432=$431;
   var $433=$i;
   var $434=$4;
   var $435=(($434+($433<<2))|0);
   HEAPF32[(($435)>>2)]=$432;
   label = 51; break;
  case 51: 
   var $437=$i;
   var $438=((($437)+(1))|0);
   $i=$438;
   label = 49; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $441=$3;
   var $442=$_src6;
   var $443=(($442+($441<<1))|0);
   $_src6=$443;
   var $444=$5;
   var $445=$4;
   var $446=(($445+($444<<2))|0);
   $4=$446;
   label = 43; break;
  case 54: 
   label = 108; break;
  case 55: 
   var $449=$2;
   var $450=$449;
   $_src10=$450;
   var $451=$3;
   var $452=((((($451)>>>(0)))/(2))&-1);
   $3=$452;
   label = 56; break;
  case 56: 
   var $454=(($size+4)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=((($455)-(1))|0);
   HEAP32[(($454)>>2)]=$456;
   var $457=(($455)|(0))!=0;
   if ($457) { label = 57; break; } else { label = 67; break; }
  case 57: 
   $i=0;
   label = 58; break;
  case 58: 
   var $460=$i;
   var $461=(($size)|0);
   var $462=HEAP32[(($461)>>2)];
   var $463=((($462)-(4))|0);
   var $464=(($460)|(0)) <= (($463)|(0));
   if ($464) { label = 59; break; } else { label = 61; break; }
  case 59: 
   var $466=$6;
   var $467=$i;
   var $468=$_src10;
   var $469=(($468+($467<<1))|0);
   var $470=HEAP16[(($469)>>1)];
   var $471=(($470 << 16) >> 16);
   var $472=(($471)|(0));
   var $473=($466)*($472);
   var $474=$7;
   var $475=($473)+($474);
   $t011=$475;
   var $476=$6;
   var $477=$i;
   var $478=((($477)+(1))|0);
   var $479=$_src10;
   var $480=(($479+($478<<1))|0);
   var $481=HEAP16[(($480)>>1)];
   var $482=(($481 << 16) >> 16);
   var $483=(($482)|(0));
   var $484=($476)*($483);
   var $485=$7;
   var $486=($484)+($485);
   $t112=$486;
   var $487=$t011;
   var $488=$487;
   var $489=$i;
   var $490=$4;
   var $491=(($490+($489<<2))|0);
   HEAPF32[(($491)>>2)]=$488;
   var $492=$t112;
   var $493=$492;
   var $494=$i;
   var $495=((($494)+(1))|0);
   var $496=$4;
   var $497=(($496+($495<<2))|0);
   HEAPF32[(($497)>>2)]=$493;
   var $498=$6;
   var $499=$i;
   var $500=((($499)+(2))|0);
   var $501=$_src10;
   var $502=(($501+($500<<1))|0);
   var $503=HEAP16[(($502)>>1)];
   var $504=(($503 << 16) >> 16);
   var $505=(($504)|(0));
   var $506=($498)*($505);
   var $507=$7;
   var $508=($506)+($507);
   $t011=$508;
   var $509=$6;
   var $510=$i;
   var $511=((($510)+(3))|0);
   var $512=$_src10;
   var $513=(($512+($511<<1))|0);
   var $514=HEAP16[(($513)>>1)];
   var $515=(($514 << 16) >> 16);
   var $516=(($515)|(0));
   var $517=($509)*($516);
   var $518=$7;
   var $519=($517)+($518);
   $t112=$519;
   var $520=$t011;
   var $521=$520;
   var $522=$i;
   var $523=((($522)+(2))|0);
   var $524=$4;
   var $525=(($524+($523<<2))|0);
   HEAPF32[(($525)>>2)]=$521;
   var $526=$t112;
   var $527=$526;
   var $528=$i;
   var $529=((($528)+(3))|0);
   var $530=$4;
   var $531=(($530+($529<<2))|0);
   HEAPF32[(($531)>>2)]=$527;
   label = 60; break;
  case 60: 
   var $533=$i;
   var $534=((($533)+(4))|0);
   $i=$534;
   label = 58; break;
  case 61: 
   label = 62; break;
  case 62: 
   var $537=$i;
   var $538=(($size)|0);
   var $539=HEAP32[(($538)>>2)];
   var $540=(($537)|(0)) < (($539)|(0));
   if ($540) { label = 63; break; } else { label = 65; break; }
  case 63: 
   var $542=$6;
   var $543=$i;
   var $544=$_src10;
   var $545=(($544+($543<<1))|0);
   var $546=HEAP16[(($545)>>1)];
   var $547=(($546 << 16) >> 16);
   var $548=(($547)|(0));
   var $549=($542)*($548);
   var $550=$7;
   var $551=($549)+($550);
   $t013=$551;
   var $552=$t013;
   var $553=$552;
   var $554=$i;
   var $555=$4;
   var $556=(($555+($554<<2))|0);
   HEAPF32[(($556)>>2)]=$553;
   label = 64; break;
  case 64: 
   var $558=$i;
   var $559=((($558)+(1))|0);
   $i=$559;
   label = 62; break;
  case 65: 
   label = 66; break;
  case 66: 
   var $562=$3;
   var $563=$_src10;
   var $564=(($563+($562<<1))|0);
   $_src10=$564;
   var $565=$5;
   var $566=$4;
   var $567=(($566+($565<<2))|0);
   $4=$567;
   label = 56; break;
  case 67: 
   label = 108; break;
  case 68: 
   var $570=$2;
   var $571=$570;
   $_src14=$571;
   var $572=$3;
   var $573=((((($572)>>>(0)))/(4))&-1);
   $3=$573;
   label = 69; break;
  case 69: 
   var $575=(($size+4)|0);
   var $576=HEAP32[(($575)>>2)];
   var $577=((($576)-(1))|0);
   HEAP32[(($575)>>2)]=$577;
   var $578=(($576)|(0))!=0;
   if ($578) { label = 70; break; } else { label = 80; break; }
  case 70: 
   $i=0;
   label = 71; break;
  case 71: 
   var $581=$i;
   var $582=(($size)|0);
   var $583=HEAP32[(($582)>>2)];
   var $584=((($583)-(4))|0);
   var $585=(($581)|(0)) <= (($584)|(0));
   if ($585) { label = 72; break; } else { label = 74; break; }
  case 72: 
   var $587=$6;
   var $588=$i;
   var $589=$_src14;
   var $590=(($589+($588<<2))|0);
   var $591=HEAP32[(($590)>>2)];
   var $592=(($591)|(0));
   var $593=($587)*($592);
   var $594=$7;
   var $595=($593)+($594);
   $t015=$595;
   var $596=$6;
   var $597=$i;
   var $598=((($597)+(1))|0);
   var $599=$_src14;
   var $600=(($599+($598<<2))|0);
   var $601=HEAP32[(($600)>>2)];
   var $602=(($601)|(0));
   var $603=($596)*($602);
   var $604=$7;
   var $605=($603)+($604);
   $t116=$605;
   var $606=$t015;
   var $607=$606;
   var $608=$i;
   var $609=$4;
   var $610=(($609+($608<<2))|0);
   HEAPF32[(($610)>>2)]=$607;
   var $611=$t116;
   var $612=$611;
   var $613=$i;
   var $614=((($613)+(1))|0);
   var $615=$4;
   var $616=(($615+($614<<2))|0);
   HEAPF32[(($616)>>2)]=$612;
   var $617=$6;
   var $618=$i;
   var $619=((($618)+(2))|0);
   var $620=$_src14;
   var $621=(($620+($619<<2))|0);
   var $622=HEAP32[(($621)>>2)];
   var $623=(($622)|(0));
   var $624=($617)*($623);
   var $625=$7;
   var $626=($624)+($625);
   $t015=$626;
   var $627=$6;
   var $628=$i;
   var $629=((($628)+(3))|0);
   var $630=$_src14;
   var $631=(($630+($629<<2))|0);
   var $632=HEAP32[(($631)>>2)];
   var $633=(($632)|(0));
   var $634=($627)*($633);
   var $635=$7;
   var $636=($634)+($635);
   $t116=$636;
   var $637=$t015;
   var $638=$637;
   var $639=$i;
   var $640=((($639)+(2))|0);
   var $641=$4;
   var $642=(($641+($640<<2))|0);
   HEAPF32[(($642)>>2)]=$638;
   var $643=$t116;
   var $644=$643;
   var $645=$i;
   var $646=((($645)+(3))|0);
   var $647=$4;
   var $648=(($647+($646<<2))|0);
   HEAPF32[(($648)>>2)]=$644;
   label = 73; break;
  case 73: 
   var $650=$i;
   var $651=((($650)+(4))|0);
   $i=$651;
   label = 71; break;
  case 74: 
   label = 75; break;
  case 75: 
   var $654=$i;
   var $655=(($size)|0);
   var $656=HEAP32[(($655)>>2)];
   var $657=(($654)|(0)) < (($656)|(0));
   if ($657) { label = 76; break; } else { label = 78; break; }
  case 76: 
   var $659=$6;
   var $660=$i;
   var $661=$_src14;
   var $662=(($661+($660<<2))|0);
   var $663=HEAP32[(($662)>>2)];
   var $664=(($663)|(0));
   var $665=($659)*($664);
   var $666=$7;
   var $667=($665)+($666);
   $t017=$667;
   var $668=$t017;
   var $669=$668;
   var $670=$i;
   var $671=$4;
   var $672=(($671+($670<<2))|0);
   HEAPF32[(($672)>>2)]=$669;
   label = 77; break;
  case 77: 
   var $674=$i;
   var $675=((($674)+(1))|0);
   $i=$675;
   label = 75; break;
  case 78: 
   label = 79; break;
  case 79: 
   var $678=$3;
   var $679=$_src14;
   var $680=(($679+($678<<2))|0);
   $_src14=$680;
   var $681=$5;
   var $682=$4;
   var $683=(($682+($681<<2))|0);
   $4=$683;
   label = 69; break;
  case 80: 
   label = 108; break;
  case 81: 
   var $686=$2;
   var $687=$686;
   $_src18=$687;
   var $688=$3;
   var $689=((((($688)>>>(0)))/(4))&-1);
   $3=$689;
   label = 82; break;
  case 82: 
   var $691=(($size+4)|0);
   var $692=HEAP32[(($691)>>2)];
   var $693=((($692)-(1))|0);
   HEAP32[(($691)>>2)]=$693;
   var $694=(($692)|(0))!=0;
   if ($694) { label = 83; break; } else { label = 93; break; }
  case 83: 
   $i=0;
   label = 84; break;
  case 84: 
   var $697=$i;
   var $698=(($size)|0);
   var $699=HEAP32[(($698)>>2)];
   var $700=((($699)-(4))|0);
   var $701=(($697)|(0)) <= (($700)|(0));
   if ($701) { label = 85; break; } else { label = 87; break; }
  case 85: 
   var $703=$6;
   var $704=$i;
   var $705=$_src18;
   var $706=(($705+($704<<2))|0);
   var $707=HEAPF32[(($706)>>2)];
   var $708=$707;
   var $709=($703)*($708);
   var $710=$7;
   var $711=($709)+($710);
   $t019=$711;
   var $712=$6;
   var $713=$i;
   var $714=((($713)+(1))|0);
   var $715=$_src18;
   var $716=(($715+($714<<2))|0);
   var $717=HEAPF32[(($716)>>2)];
   var $718=$717;
   var $719=($712)*($718);
   var $720=$7;
   var $721=($719)+($720);
   $t120=$721;
   var $722=$t019;
   var $723=$722;
   var $724=$i;
   var $725=$4;
   var $726=(($725+($724<<2))|0);
   HEAPF32[(($726)>>2)]=$723;
   var $727=$t120;
   var $728=$727;
   var $729=$i;
   var $730=((($729)+(1))|0);
   var $731=$4;
   var $732=(($731+($730<<2))|0);
   HEAPF32[(($732)>>2)]=$728;
   var $733=$6;
   var $734=$i;
   var $735=((($734)+(2))|0);
   var $736=$_src18;
   var $737=(($736+($735<<2))|0);
   var $738=HEAPF32[(($737)>>2)];
   var $739=$738;
   var $740=($733)*($739);
   var $741=$7;
   var $742=($740)+($741);
   $t019=$742;
   var $743=$6;
   var $744=$i;
   var $745=((($744)+(3))|0);
   var $746=$_src18;
   var $747=(($746+($745<<2))|0);
   var $748=HEAPF32[(($747)>>2)];
   var $749=$748;
   var $750=($743)*($749);
   var $751=$7;
   var $752=($750)+($751);
   $t120=$752;
   var $753=$t019;
   var $754=$753;
   var $755=$i;
   var $756=((($755)+(2))|0);
   var $757=$4;
   var $758=(($757+($756<<2))|0);
   HEAPF32[(($758)>>2)]=$754;
   var $759=$t120;
   var $760=$759;
   var $761=$i;
   var $762=((($761)+(3))|0);
   var $763=$4;
   var $764=(($763+($762<<2))|0);
   HEAPF32[(($764)>>2)]=$760;
   label = 86; break;
  case 86: 
   var $766=$i;
   var $767=((($766)+(4))|0);
   $i=$767;
   label = 84; break;
  case 87: 
   label = 88; break;
  case 88: 
   var $770=$i;
   var $771=(($size)|0);
   var $772=HEAP32[(($771)>>2)];
   var $773=(($770)|(0)) < (($772)|(0));
   if ($773) { label = 89; break; } else { label = 91; break; }
  case 89: 
   var $775=$6;
   var $776=$i;
   var $777=$_src18;
   var $778=(($777+($776<<2))|0);
   var $779=HEAPF32[(($778)>>2)];
   var $780=$779;
   var $781=($775)*($780);
   var $782=$7;
   var $783=($781)+($782);
   $t021=$783;
   var $784=$t021;
   var $785=$784;
   var $786=$i;
   var $787=$4;
   var $788=(($787+($786<<2))|0);
   HEAPF32[(($788)>>2)]=$785;
   label = 90; break;
  case 90: 
   var $790=$i;
   var $791=((($790)+(1))|0);
   $i=$791;
   label = 88; break;
  case 91: 
   label = 92; break;
  case 92: 
   var $794=$3;
   var $795=$_src18;
   var $796=(($795+($794<<2))|0);
   $_src18=$796;
   var $797=$5;
   var $798=$4;
   var $799=(($798+($797<<2))|0);
   $4=$799;
   label = 82; break;
  case 93: 
   label = 108; break;
  case 94: 
   var $802=$2;
   var $803=$802;
   $_src22=$803;
   var $804=$3;
   var $805=((((($804)>>>(0)))/(8))&-1);
   $3=$805;
   label = 95; break;
  case 95: 
   var $807=(($size+4)|0);
   var $808=HEAP32[(($807)>>2)];
   var $809=((($808)-(1))|0);
   HEAP32[(($807)>>2)]=$809;
   var $810=(($808)|(0))!=0;
   if ($810) { label = 96; break; } else { label = 106; break; }
  case 96: 
   $i=0;
   label = 97; break;
  case 97: 
   var $813=$i;
   var $814=(($size)|0);
   var $815=HEAP32[(($814)>>2)];
   var $816=((($815)-(4))|0);
   var $817=(($813)|(0)) <= (($816)|(0));
   if ($817) { label = 98; break; } else { label = 100; break; }
  case 98: 
   var $819=$6;
   var $820=$i;
   var $821=$_src22;
   var $822=(($821+($820<<3))|0);
   var $823=HEAPF64[(($822)>>3)];
   var $824=($819)*($823);
   var $825=$7;
   var $826=($824)+($825);
   $t023=$826;
   var $827=$6;
   var $828=$i;
   var $829=((($828)+(1))|0);
   var $830=$_src22;
   var $831=(($830+($829<<3))|0);
   var $832=HEAPF64[(($831)>>3)];
   var $833=($827)*($832);
   var $834=$7;
   var $835=($833)+($834);
   $t124=$835;
   var $836=$t023;
   var $837=$836;
   var $838=$i;
   var $839=$4;
   var $840=(($839+($838<<2))|0);
   HEAPF32[(($840)>>2)]=$837;
   var $841=$t124;
   var $842=$841;
   var $843=$i;
   var $844=((($843)+(1))|0);
   var $845=$4;
   var $846=(($845+($844<<2))|0);
   HEAPF32[(($846)>>2)]=$842;
   var $847=$6;
   var $848=$i;
   var $849=((($848)+(2))|0);
   var $850=$_src22;
   var $851=(($850+($849<<3))|0);
   var $852=HEAPF64[(($851)>>3)];
   var $853=($847)*($852);
   var $854=$7;
   var $855=($853)+($854);
   $t023=$855;
   var $856=$6;
   var $857=$i;
   var $858=((($857)+(3))|0);
   var $859=$_src22;
   var $860=(($859+($858<<3))|0);
   var $861=HEAPF64[(($860)>>3)];
   var $862=($856)*($861);
   var $863=$7;
   var $864=($862)+($863);
   $t124=$864;
   var $865=$t023;
   var $866=$865;
   var $867=$i;
   var $868=((($867)+(2))|0);
   var $869=$4;
   var $870=(($869+($868<<2))|0);
   HEAPF32[(($870)>>2)]=$866;
   var $871=$t124;
   var $872=$871;
   var $873=$i;
   var $874=((($873)+(3))|0);
   var $875=$4;
   var $876=(($875+($874<<2))|0);
   HEAPF32[(($876)>>2)]=$872;
   label = 99; break;
  case 99: 
   var $878=$i;
   var $879=((($878)+(4))|0);
   $i=$879;
   label = 97; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $882=$i;
   var $883=(($size)|0);
   var $884=HEAP32[(($883)>>2)];
   var $885=(($882)|(0)) < (($884)|(0));
   if ($885) { label = 102; break; } else { label = 104; break; }
  case 102: 
   var $887=$6;
   var $888=$i;
   var $889=$_src22;
   var $890=(($889+($888<<3))|0);
   var $891=HEAPF64[(($890)>>3)];
   var $892=($887)*($891);
   var $893=$7;
   var $894=($892)+($893);
   $t025=$894;
   var $895=$t025;
   var $896=$895;
   var $897=$i;
   var $898=$4;
   var $899=(($898+($897<<2))|0);
   HEAPF32[(($899)>>2)]=$896;
   label = 103; break;
  case 103: 
   var $901=$i;
   var $902=((($901)+(1))|0);
   $i=$902;
   label = 101; break;
  case 104: 
   label = 105; break;
  case 105: 
   var $905=$3;
   var $906=$_src22;
   var $907=(($906+($905<<3))|0);
   $_src22=$907;
   var $908=$5;
   var $909=$4;
   var $910=(($909+($908<<2))|0);
   $4=$910;
   label = 95; break;
  case 106: 
   label = 108; break;
  case 107: 
   $1=-12;
   label = 109; break;
  case 108: 
   $1=0;
   label = 109; break;
  case 109: 
   var $915=$1;
   STACKTOP = sp;
   return $915;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvCvtScaleTo_64f_C1RPKhiPdi6CvSizeddi($src, $srcstep, $dst, $dststep, $size, $scale, $shift, $param) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 2064)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $i;
   var $srctype;
   var $lut=sp;
   var $val;
   var $9=(sp)+(2048);
   var $_src;
   var $t0;
   var $t1;
   var $t01;
   var $10=(sp)+(2056);
   var $_src2;
   var $t03;
   var $t14;
   var $t05;
   var $_src6;
   var $t07;
   var $t18;
   var $t09;
   var $_src10;
   var $t011;
   var $t112;
   var $t013;
   var $_src14;
   var $t015;
   var $t116;
   var $t017;
   var $_src18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $t023;
   var $t124;
   var $t025;
   $2=$src;
   $3=$srcstep;
   $4=$dst;
   $5=$dststep;
   $6=$scale;
   $7=$shift;
   $8=$param;
   var $11=$8;
   $srctype=$11;
   var $12=$5;
   var $13=((((($12)>>>(0)))/(8))&-1);
   $5=$13;
   var $14=$srctype;
   var $15=$14 & 7;
   if ((($15)|(0))==0) {
    label = 2; break;
   }
   else if ((($15)|(0))==1) {
    label = 22; break;
   }
   else if ((($15)|(0))==2) {
    label = 42; break;
   }
   else if ((($15)|(0))==3) {
    label = 55; break;
   }
   else if ((($15)|(0))==4) {
    label = 68; break;
   }
   else if ((($15)|(0))==5) {
    label = 81; break;
   }
   else if ((($15)|(0))==6) {
    label = 94; break;
   }
   else {
   label = 107; break;
   }
  case 2: 
   var $17=(($size)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($size+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(Math.imul($18,$20)|0);
   var $22=(($21)|(0)) >= 256;
   if ($22) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $24=$7;
   $val=$24;
   $i=0;
   label = 4; break;
  case 4: 
   var $26=$i;
   var $27=(($26)|(0)) < 256;
   if ($27) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $29=$val;
   var $30=$i;
   var $31=(($lut+($30<<3))|0);
   HEAPF64[(($31)>>3)]=$29;
   label = 6; break;
  case 6: 
   var $33=$i;
   var $34=((($33)+(1))|0);
   $i=$34;
   var $35=$6;
   var $36=$val;
   var $37=($36)+($35);
   $val=$37;
   label = 4; break;
  case 7: 
   var $39=$2;
   var $40=$3;
   var $41=$4;
   var $42=$5;
   var $43=($42<<3);
   var $44=$9;
   var $45=$size;
   assert(8 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];
   var $46=(($lut)|0);
   var $47=__Z26icvLUT_Transform8u_64f_C1RPKhiPdi6CvSizePKd($39, $40, $41, $43, $9, $46);
   label = 21; break;
  case 8: 
   var $49=$2;
   $_src=$49;
   var $50=$3;
   var $51=(((($50)>>>(0)))&-1);
   $3=$51;
   label = 9; break;
  case 9: 
   var $53=(($size+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=((($54)-(1))|0);
   HEAP32[(($53)>>2)]=$55;
   var $56=(($54)|(0))!=0;
   if ($56) { label = 10; break; } else { label = 20; break; }
  case 10: 
   $i=0;
   label = 11; break;
  case 11: 
   var $59=$i;
   var $60=(($size)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=((($61)-(4))|0);
   var $63=(($59)|(0)) <= (($62)|(0));
   if ($63) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $65=$6;
   var $66=$i;
   var $67=$_src;
   var $68=(($67+$66)|0);
   var $69=HEAP8[($68)];
   var $70=(($69)&(255));
   var $71=(($70)|(0));
   var $72=($65)*($71);
   var $73=$7;
   var $74=($72)+($73);
   $t0=$74;
   var $75=$6;
   var $76=$i;
   var $77=((($76)+(1))|0);
   var $78=$_src;
   var $79=(($78+$77)|0);
   var $80=HEAP8[($79)];
   var $81=(($80)&(255));
   var $82=(($81)|(0));
   var $83=($75)*($82);
   var $84=$7;
   var $85=($83)+($84);
   $t1=$85;
   var $86=$t0;
   var $87=$i;
   var $88=$4;
   var $89=(($88+($87<<3))|0);
   HEAPF64[(($89)>>3)]=$86;
   var $90=$t1;
   var $91=$i;
   var $92=((($91)+(1))|0);
   var $93=$4;
   var $94=(($93+($92<<3))|0);
   HEAPF64[(($94)>>3)]=$90;
   var $95=$6;
   var $96=$i;
   var $97=((($96)+(2))|0);
   var $98=$_src;
   var $99=(($98+$97)|0);
   var $100=HEAP8[($99)];
   var $101=(($100)&(255));
   var $102=(($101)|(0));
   var $103=($95)*($102);
   var $104=$7;
   var $105=($103)+($104);
   $t0=$105;
   var $106=$6;
   var $107=$i;
   var $108=((($107)+(3))|0);
   var $109=$_src;
   var $110=(($109+$108)|0);
   var $111=HEAP8[($110)];
   var $112=(($111)&(255));
   var $113=(($112)|(0));
   var $114=($106)*($113);
   var $115=$7;
   var $116=($114)+($115);
   $t1=$116;
   var $117=$t0;
   var $118=$i;
   var $119=((($118)+(2))|0);
   var $120=$4;
   var $121=(($120+($119<<3))|0);
   HEAPF64[(($121)>>3)]=$117;
   var $122=$t1;
   var $123=$i;
   var $124=((($123)+(3))|0);
   var $125=$4;
   var $126=(($125+($124<<3))|0);
   HEAPF64[(($126)>>3)]=$122;
   label = 13; break;
  case 13: 
   var $128=$i;
   var $129=((($128)+(4))|0);
   $i=$129;
   label = 11; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $132=$i;
   var $133=(($size)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=(($132)|(0)) < (($134)|(0));
   if ($135) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $137=$6;
   var $138=$i;
   var $139=$_src;
   var $140=(($139+$138)|0);
   var $141=HEAP8[($140)];
   var $142=(($141)&(255));
   var $143=(($142)|(0));
   var $144=($137)*($143);
   var $145=$7;
   var $146=($144)+($145);
   $t01=$146;
   var $147=$t01;
   var $148=$i;
   var $149=$4;
   var $150=(($149+($148<<3))|0);
   HEAPF64[(($150)>>3)]=$147;
   label = 17; break;
  case 17: 
   var $152=$i;
   var $153=((($152)+(1))|0);
   $i=$153;
   label = 15; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $156=$3;
   var $157=$_src;
   var $158=(($157+$156)|0);
   $_src=$158;
   var $159=$5;
   var $160=$4;
   var $161=(($160+($159<<3))|0);
   $4=$161;
   label = 9; break;
  case 20: 
   label = 21; break;
  case 21: 
   label = 108; break;
  case 22: 
   var $165=(($size)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=(($size+4)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=(Math.imul($166,$168)|0);
   var $170=(($169)|(0)) >= 256;
   if ($170) { label = 23; break; } else { label = 28; break; }
  case 23: 
   $i=0;
   label = 24; break;
  case 24: 
   var $173=$i;
   var $174=(($173)|(0)) < 256;
   if ($174) { label = 25; break; } else { label = 27; break; }
  case 25: 
   var $176=$i;
   var $177=(($176) & 255);
   var $178=(($177 << 24) >> 24);
   var $179=(($178)|(0));
   var $180=$6;
   var $181=($179)*($180);
   var $182=$7;
   var $183=($181)+($182);
   var $184=$i;
   var $185=(($lut+($184<<3))|0);
   HEAPF64[(($185)>>3)]=$183;
   label = 26; break;
  case 26: 
   var $187=$i;
   var $188=((($187)+(1))|0);
   $i=$188;
   label = 24; break;
  case 27: 
   var $190=$2;
   var $191=$3;
   var $192=$4;
   var $193=$5;
   var $194=($193<<3);
   var $195=$10;
   var $196=$size;
   assert(8 % 1 === 0);HEAP32[(($195)>>2)]=HEAP32[(($196)>>2)];HEAP32[((($195)+(4))>>2)]=HEAP32[((($196)+(4))>>2)];
   var $197=(($lut)|0);
   var $198=__Z26icvLUT_Transform8u_64f_C1RPKhiPdi6CvSizePKd($190, $191, $192, $194, $10, $197);
   label = 41; break;
  case 28: 
   var $200=$2;
   $_src2=$200;
   var $201=$3;
   var $202=(((($201)>>>(0)))&-1);
   $3=$202;
   label = 29; break;
  case 29: 
   var $204=(($size+4)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=((($205)-(1))|0);
   HEAP32[(($204)>>2)]=$206;
   var $207=(($205)|(0))!=0;
   if ($207) { label = 30; break; } else { label = 40; break; }
  case 30: 
   $i=0;
   label = 31; break;
  case 31: 
   var $210=$i;
   var $211=(($size)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=((($212)-(4))|0);
   var $214=(($210)|(0)) <= (($213)|(0));
   if ($214) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $216=$6;
   var $217=$i;
   var $218=$_src2;
   var $219=(($218+$217)|0);
   var $220=HEAP8[($219)];
   var $221=(($220 << 24) >> 24);
   var $222=(($221)|(0));
   var $223=($216)*($222);
   var $224=$7;
   var $225=($223)+($224);
   $t03=$225;
   var $226=$6;
   var $227=$i;
   var $228=((($227)+(1))|0);
   var $229=$_src2;
   var $230=(($229+$228)|0);
   var $231=HEAP8[($230)];
   var $232=(($231 << 24) >> 24);
   var $233=(($232)|(0));
   var $234=($226)*($233);
   var $235=$7;
   var $236=($234)+($235);
   $t14=$236;
   var $237=$t03;
   var $238=$i;
   var $239=$4;
   var $240=(($239+($238<<3))|0);
   HEAPF64[(($240)>>3)]=$237;
   var $241=$t14;
   var $242=$i;
   var $243=((($242)+(1))|0);
   var $244=$4;
   var $245=(($244+($243<<3))|0);
   HEAPF64[(($245)>>3)]=$241;
   var $246=$6;
   var $247=$i;
   var $248=((($247)+(2))|0);
   var $249=$_src2;
   var $250=(($249+$248)|0);
   var $251=HEAP8[($250)];
   var $252=(($251 << 24) >> 24);
   var $253=(($252)|(0));
   var $254=($246)*($253);
   var $255=$7;
   var $256=($254)+($255);
   $t03=$256;
   var $257=$6;
   var $258=$i;
   var $259=((($258)+(3))|0);
   var $260=$_src2;
   var $261=(($260+$259)|0);
   var $262=HEAP8[($261)];
   var $263=(($262 << 24) >> 24);
   var $264=(($263)|(0));
   var $265=($257)*($264);
   var $266=$7;
   var $267=($265)+($266);
   $t14=$267;
   var $268=$t03;
   var $269=$i;
   var $270=((($269)+(2))|0);
   var $271=$4;
   var $272=(($271+($270<<3))|0);
   HEAPF64[(($272)>>3)]=$268;
   var $273=$t14;
   var $274=$i;
   var $275=((($274)+(3))|0);
   var $276=$4;
   var $277=(($276+($275<<3))|0);
   HEAPF64[(($277)>>3)]=$273;
   label = 33; break;
  case 33: 
   var $279=$i;
   var $280=((($279)+(4))|0);
   $i=$280;
   label = 31; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $283=$i;
   var $284=(($size)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=(($283)|(0)) < (($285)|(0));
   if ($286) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $288=$6;
   var $289=$i;
   var $290=$_src2;
   var $291=(($290+$289)|0);
   var $292=HEAP8[($291)];
   var $293=(($292 << 24) >> 24);
   var $294=(($293)|(0));
   var $295=($288)*($294);
   var $296=$7;
   var $297=($295)+($296);
   $t05=$297;
   var $298=$t05;
   var $299=$i;
   var $300=$4;
   var $301=(($300+($299<<3))|0);
   HEAPF64[(($301)>>3)]=$298;
   label = 37; break;
  case 37: 
   var $303=$i;
   var $304=((($303)+(1))|0);
   $i=$304;
   label = 35; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $307=$3;
   var $308=$_src2;
   var $309=(($308+$307)|0);
   $_src2=$309;
   var $310=$5;
   var $311=$4;
   var $312=(($311+($310<<3))|0);
   $4=$312;
   label = 29; break;
  case 40: 
   label = 41; break;
  case 41: 
   label = 108; break;
  case 42: 
   var $316=$2;
   var $317=$316;
   $_src6=$317;
   var $318=$3;
   var $319=((((($318)>>>(0)))/(2))&-1);
   $3=$319;
   label = 43; break;
  case 43: 
   var $321=(($size+4)|0);
   var $322=HEAP32[(($321)>>2)];
   var $323=((($322)-(1))|0);
   HEAP32[(($321)>>2)]=$323;
   var $324=(($322)|(0))!=0;
   if ($324) { label = 44; break; } else { label = 54; break; }
  case 44: 
   $i=0;
   label = 45; break;
  case 45: 
   var $327=$i;
   var $328=(($size)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=((($329)-(4))|0);
   var $331=(($327)|(0)) <= (($330)|(0));
   if ($331) { label = 46; break; } else { label = 48; break; }
  case 46: 
   var $333=$6;
   var $334=$i;
   var $335=$_src6;
   var $336=(($335+($334<<1))|0);
   var $337=HEAP16[(($336)>>1)];
   var $338=(($337)&(65535));
   var $339=(($338)|(0));
   var $340=($333)*($339);
   var $341=$7;
   var $342=($340)+($341);
   $t07=$342;
   var $343=$6;
   var $344=$i;
   var $345=((($344)+(1))|0);
   var $346=$_src6;
   var $347=(($346+($345<<1))|0);
   var $348=HEAP16[(($347)>>1)];
   var $349=(($348)&(65535));
   var $350=(($349)|(0));
   var $351=($343)*($350);
   var $352=$7;
   var $353=($351)+($352);
   $t18=$353;
   var $354=$t07;
   var $355=$i;
   var $356=$4;
   var $357=(($356+($355<<3))|0);
   HEAPF64[(($357)>>3)]=$354;
   var $358=$t18;
   var $359=$i;
   var $360=((($359)+(1))|0);
   var $361=$4;
   var $362=(($361+($360<<3))|0);
   HEAPF64[(($362)>>3)]=$358;
   var $363=$6;
   var $364=$i;
   var $365=((($364)+(2))|0);
   var $366=$_src6;
   var $367=(($366+($365<<1))|0);
   var $368=HEAP16[(($367)>>1)];
   var $369=(($368)&(65535));
   var $370=(($369)|(0));
   var $371=($363)*($370);
   var $372=$7;
   var $373=($371)+($372);
   $t07=$373;
   var $374=$6;
   var $375=$i;
   var $376=((($375)+(3))|0);
   var $377=$_src6;
   var $378=(($377+($376<<1))|0);
   var $379=HEAP16[(($378)>>1)];
   var $380=(($379)&(65535));
   var $381=(($380)|(0));
   var $382=($374)*($381);
   var $383=$7;
   var $384=($382)+($383);
   $t18=$384;
   var $385=$t07;
   var $386=$i;
   var $387=((($386)+(2))|0);
   var $388=$4;
   var $389=(($388+($387<<3))|0);
   HEAPF64[(($389)>>3)]=$385;
   var $390=$t18;
   var $391=$i;
   var $392=((($391)+(3))|0);
   var $393=$4;
   var $394=(($393+($392<<3))|0);
   HEAPF64[(($394)>>3)]=$390;
   label = 47; break;
  case 47: 
   var $396=$i;
   var $397=((($396)+(4))|0);
   $i=$397;
   label = 45; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $400=$i;
   var $401=(($size)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=(($400)|(0)) < (($402)|(0));
   if ($403) { label = 50; break; } else { label = 52; break; }
  case 50: 
   var $405=$6;
   var $406=$i;
   var $407=$_src6;
   var $408=(($407+($406<<1))|0);
   var $409=HEAP16[(($408)>>1)];
   var $410=(($409)&(65535));
   var $411=(($410)|(0));
   var $412=($405)*($411);
   var $413=$7;
   var $414=($412)+($413);
   $t09=$414;
   var $415=$t09;
   var $416=$i;
   var $417=$4;
   var $418=(($417+($416<<3))|0);
   HEAPF64[(($418)>>3)]=$415;
   label = 51; break;
  case 51: 
   var $420=$i;
   var $421=((($420)+(1))|0);
   $i=$421;
   label = 49; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $424=$3;
   var $425=$_src6;
   var $426=(($425+($424<<1))|0);
   $_src6=$426;
   var $427=$5;
   var $428=$4;
   var $429=(($428+($427<<3))|0);
   $4=$429;
   label = 43; break;
  case 54: 
   label = 108; break;
  case 55: 
   var $432=$2;
   var $433=$432;
   $_src10=$433;
   var $434=$3;
   var $435=((((($434)>>>(0)))/(2))&-1);
   $3=$435;
   label = 56; break;
  case 56: 
   var $437=(($size+4)|0);
   var $438=HEAP32[(($437)>>2)];
   var $439=((($438)-(1))|0);
   HEAP32[(($437)>>2)]=$439;
   var $440=(($438)|(0))!=0;
   if ($440) { label = 57; break; } else { label = 67; break; }
  case 57: 
   $i=0;
   label = 58; break;
  case 58: 
   var $443=$i;
   var $444=(($size)|0);
   var $445=HEAP32[(($444)>>2)];
   var $446=((($445)-(4))|0);
   var $447=(($443)|(0)) <= (($446)|(0));
   if ($447) { label = 59; break; } else { label = 61; break; }
  case 59: 
   var $449=$6;
   var $450=$i;
   var $451=$_src10;
   var $452=(($451+($450<<1))|0);
   var $453=HEAP16[(($452)>>1)];
   var $454=(($453 << 16) >> 16);
   var $455=(($454)|(0));
   var $456=($449)*($455);
   var $457=$7;
   var $458=($456)+($457);
   $t011=$458;
   var $459=$6;
   var $460=$i;
   var $461=((($460)+(1))|0);
   var $462=$_src10;
   var $463=(($462+($461<<1))|0);
   var $464=HEAP16[(($463)>>1)];
   var $465=(($464 << 16) >> 16);
   var $466=(($465)|(0));
   var $467=($459)*($466);
   var $468=$7;
   var $469=($467)+($468);
   $t112=$469;
   var $470=$t011;
   var $471=$i;
   var $472=$4;
   var $473=(($472+($471<<3))|0);
   HEAPF64[(($473)>>3)]=$470;
   var $474=$t112;
   var $475=$i;
   var $476=((($475)+(1))|0);
   var $477=$4;
   var $478=(($477+($476<<3))|0);
   HEAPF64[(($478)>>3)]=$474;
   var $479=$6;
   var $480=$i;
   var $481=((($480)+(2))|0);
   var $482=$_src10;
   var $483=(($482+($481<<1))|0);
   var $484=HEAP16[(($483)>>1)];
   var $485=(($484 << 16) >> 16);
   var $486=(($485)|(0));
   var $487=($479)*($486);
   var $488=$7;
   var $489=($487)+($488);
   $t011=$489;
   var $490=$6;
   var $491=$i;
   var $492=((($491)+(3))|0);
   var $493=$_src10;
   var $494=(($493+($492<<1))|0);
   var $495=HEAP16[(($494)>>1)];
   var $496=(($495 << 16) >> 16);
   var $497=(($496)|(0));
   var $498=($490)*($497);
   var $499=$7;
   var $500=($498)+($499);
   $t112=$500;
   var $501=$t011;
   var $502=$i;
   var $503=((($502)+(2))|0);
   var $504=$4;
   var $505=(($504+($503<<3))|0);
   HEAPF64[(($505)>>3)]=$501;
   var $506=$t112;
   var $507=$i;
   var $508=((($507)+(3))|0);
   var $509=$4;
   var $510=(($509+($508<<3))|0);
   HEAPF64[(($510)>>3)]=$506;
   label = 60; break;
  case 60: 
   var $512=$i;
   var $513=((($512)+(4))|0);
   $i=$513;
   label = 58; break;
  case 61: 
   label = 62; break;
  case 62: 
   var $516=$i;
   var $517=(($size)|0);
   var $518=HEAP32[(($517)>>2)];
   var $519=(($516)|(0)) < (($518)|(0));
   if ($519) { label = 63; break; } else { label = 65; break; }
  case 63: 
   var $521=$6;
   var $522=$i;
   var $523=$_src10;
   var $524=(($523+($522<<1))|0);
   var $525=HEAP16[(($524)>>1)];
   var $526=(($525 << 16) >> 16);
   var $527=(($526)|(0));
   var $528=($521)*($527);
   var $529=$7;
   var $530=($528)+($529);
   $t013=$530;
   var $531=$t013;
   var $532=$i;
   var $533=$4;
   var $534=(($533+($532<<3))|0);
   HEAPF64[(($534)>>3)]=$531;
   label = 64; break;
  case 64: 
   var $536=$i;
   var $537=((($536)+(1))|0);
   $i=$537;
   label = 62; break;
  case 65: 
   label = 66; break;
  case 66: 
   var $540=$3;
   var $541=$_src10;
   var $542=(($541+($540<<1))|0);
   $_src10=$542;
   var $543=$5;
   var $544=$4;
   var $545=(($544+($543<<3))|0);
   $4=$545;
   label = 56; break;
  case 67: 
   label = 108; break;
  case 68: 
   var $548=$2;
   var $549=$548;
   $_src14=$549;
   var $550=$3;
   var $551=((((($550)>>>(0)))/(4))&-1);
   $3=$551;
   label = 69; break;
  case 69: 
   var $553=(($size+4)|0);
   var $554=HEAP32[(($553)>>2)];
   var $555=((($554)-(1))|0);
   HEAP32[(($553)>>2)]=$555;
   var $556=(($554)|(0))!=0;
   if ($556) { label = 70; break; } else { label = 80; break; }
  case 70: 
   $i=0;
   label = 71; break;
  case 71: 
   var $559=$i;
   var $560=(($size)|0);
   var $561=HEAP32[(($560)>>2)];
   var $562=((($561)-(4))|0);
   var $563=(($559)|(0)) <= (($562)|(0));
   if ($563) { label = 72; break; } else { label = 74; break; }
  case 72: 
   var $565=$6;
   var $566=$i;
   var $567=$_src14;
   var $568=(($567+($566<<2))|0);
   var $569=HEAP32[(($568)>>2)];
   var $570=(($569)|(0));
   var $571=($565)*($570);
   var $572=$7;
   var $573=($571)+($572);
   $t015=$573;
   var $574=$6;
   var $575=$i;
   var $576=((($575)+(1))|0);
   var $577=$_src14;
   var $578=(($577+($576<<2))|0);
   var $579=HEAP32[(($578)>>2)];
   var $580=(($579)|(0));
   var $581=($574)*($580);
   var $582=$7;
   var $583=($581)+($582);
   $t116=$583;
   var $584=$t015;
   var $585=$i;
   var $586=$4;
   var $587=(($586+($585<<3))|0);
   HEAPF64[(($587)>>3)]=$584;
   var $588=$t116;
   var $589=$i;
   var $590=((($589)+(1))|0);
   var $591=$4;
   var $592=(($591+($590<<3))|0);
   HEAPF64[(($592)>>3)]=$588;
   var $593=$6;
   var $594=$i;
   var $595=((($594)+(2))|0);
   var $596=$_src14;
   var $597=(($596+($595<<2))|0);
   var $598=HEAP32[(($597)>>2)];
   var $599=(($598)|(0));
   var $600=($593)*($599);
   var $601=$7;
   var $602=($600)+($601);
   $t015=$602;
   var $603=$6;
   var $604=$i;
   var $605=((($604)+(3))|0);
   var $606=$_src14;
   var $607=(($606+($605<<2))|0);
   var $608=HEAP32[(($607)>>2)];
   var $609=(($608)|(0));
   var $610=($603)*($609);
   var $611=$7;
   var $612=($610)+($611);
   $t116=$612;
   var $613=$t015;
   var $614=$i;
   var $615=((($614)+(2))|0);
   var $616=$4;
   var $617=(($616+($615<<3))|0);
   HEAPF64[(($617)>>3)]=$613;
   var $618=$t116;
   var $619=$i;
   var $620=((($619)+(3))|0);
   var $621=$4;
   var $622=(($621+($620<<3))|0);
   HEAPF64[(($622)>>3)]=$618;
   label = 73; break;
  case 73: 
   var $624=$i;
   var $625=((($624)+(4))|0);
   $i=$625;
   label = 71; break;
  case 74: 
   label = 75; break;
  case 75: 
   var $628=$i;
   var $629=(($size)|0);
   var $630=HEAP32[(($629)>>2)];
   var $631=(($628)|(0)) < (($630)|(0));
   if ($631) { label = 76; break; } else { label = 78; break; }
  case 76: 
   var $633=$6;
   var $634=$i;
   var $635=$_src14;
   var $636=(($635+($634<<2))|0);
   var $637=HEAP32[(($636)>>2)];
   var $638=(($637)|(0));
   var $639=($633)*($638);
   var $640=$7;
   var $641=($639)+($640);
   $t017=$641;
   var $642=$t017;
   var $643=$i;
   var $644=$4;
   var $645=(($644+($643<<3))|0);
   HEAPF64[(($645)>>3)]=$642;
   label = 77; break;
  case 77: 
   var $647=$i;
   var $648=((($647)+(1))|0);
   $i=$648;
   label = 75; break;
  case 78: 
   label = 79; break;
  case 79: 
   var $651=$3;
   var $652=$_src14;
   var $653=(($652+($651<<2))|0);
   $_src14=$653;
   var $654=$5;
   var $655=$4;
   var $656=(($655+($654<<3))|0);
   $4=$656;
   label = 69; break;
  case 80: 
   label = 108; break;
  case 81: 
   var $659=$2;
   var $660=$659;
   $_src18=$660;
   var $661=$3;
   var $662=((((($661)>>>(0)))/(4))&-1);
   $3=$662;
   label = 82; break;
  case 82: 
   var $664=(($size+4)|0);
   var $665=HEAP32[(($664)>>2)];
   var $666=((($665)-(1))|0);
   HEAP32[(($664)>>2)]=$666;
   var $667=(($665)|(0))!=0;
   if ($667) { label = 83; break; } else { label = 93; break; }
  case 83: 
   $i=0;
   label = 84; break;
  case 84: 
   var $670=$i;
   var $671=(($size)|0);
   var $672=HEAP32[(($671)>>2)];
   var $673=((($672)-(4))|0);
   var $674=(($670)|(0)) <= (($673)|(0));
   if ($674) { label = 85; break; } else { label = 87; break; }
  case 85: 
   var $676=$6;
   var $677=$i;
   var $678=$_src18;
   var $679=(($678+($677<<2))|0);
   var $680=HEAPF32[(($679)>>2)];
   var $681=$680;
   var $682=($676)*($681);
   var $683=$7;
   var $684=($682)+($683);
   $t019=$684;
   var $685=$6;
   var $686=$i;
   var $687=((($686)+(1))|0);
   var $688=$_src18;
   var $689=(($688+($687<<2))|0);
   var $690=HEAPF32[(($689)>>2)];
   var $691=$690;
   var $692=($685)*($691);
   var $693=$7;
   var $694=($692)+($693);
   $t120=$694;
   var $695=$t019;
   var $696=$i;
   var $697=$4;
   var $698=(($697+($696<<3))|0);
   HEAPF64[(($698)>>3)]=$695;
   var $699=$t120;
   var $700=$i;
   var $701=((($700)+(1))|0);
   var $702=$4;
   var $703=(($702+($701<<3))|0);
   HEAPF64[(($703)>>3)]=$699;
   var $704=$6;
   var $705=$i;
   var $706=((($705)+(2))|0);
   var $707=$_src18;
   var $708=(($707+($706<<2))|0);
   var $709=HEAPF32[(($708)>>2)];
   var $710=$709;
   var $711=($704)*($710);
   var $712=$7;
   var $713=($711)+($712);
   $t019=$713;
   var $714=$6;
   var $715=$i;
   var $716=((($715)+(3))|0);
   var $717=$_src18;
   var $718=(($717+($716<<2))|0);
   var $719=HEAPF32[(($718)>>2)];
   var $720=$719;
   var $721=($714)*($720);
   var $722=$7;
   var $723=($721)+($722);
   $t120=$723;
   var $724=$t019;
   var $725=$i;
   var $726=((($725)+(2))|0);
   var $727=$4;
   var $728=(($727+($726<<3))|0);
   HEAPF64[(($728)>>3)]=$724;
   var $729=$t120;
   var $730=$i;
   var $731=((($730)+(3))|0);
   var $732=$4;
   var $733=(($732+($731<<3))|0);
   HEAPF64[(($733)>>3)]=$729;
   label = 86; break;
  case 86: 
   var $735=$i;
   var $736=((($735)+(4))|0);
   $i=$736;
   label = 84; break;
  case 87: 
   label = 88; break;
  case 88: 
   var $739=$i;
   var $740=(($size)|0);
   var $741=HEAP32[(($740)>>2)];
   var $742=(($739)|(0)) < (($741)|(0));
   if ($742) { label = 89; break; } else { label = 91; break; }
  case 89: 
   var $744=$6;
   var $745=$i;
   var $746=$_src18;
   var $747=(($746+($745<<2))|0);
   var $748=HEAPF32[(($747)>>2)];
   var $749=$748;
   var $750=($744)*($749);
   var $751=$7;
   var $752=($750)+($751);
   $t021=$752;
   var $753=$t021;
   var $754=$i;
   var $755=$4;
   var $756=(($755+($754<<3))|0);
   HEAPF64[(($756)>>3)]=$753;
   label = 90; break;
  case 90: 
   var $758=$i;
   var $759=((($758)+(1))|0);
   $i=$759;
   label = 88; break;
  case 91: 
   label = 92; break;
  case 92: 
   var $762=$3;
   var $763=$_src18;
   var $764=(($763+($762<<2))|0);
   $_src18=$764;
   var $765=$5;
   var $766=$4;
   var $767=(($766+($765<<3))|0);
   $4=$767;
   label = 82; break;
  case 93: 
   label = 108; break;
  case 94: 
   var $770=$2;
   var $771=$770;
   $_src22=$771;
   var $772=$3;
   var $773=((((($772)>>>(0)))/(8))&-1);
   $3=$773;
   label = 95; break;
  case 95: 
   var $775=(($size+4)|0);
   var $776=HEAP32[(($775)>>2)];
   var $777=((($776)-(1))|0);
   HEAP32[(($775)>>2)]=$777;
   var $778=(($776)|(0))!=0;
   if ($778) { label = 96; break; } else { label = 106; break; }
  case 96: 
   $i=0;
   label = 97; break;
  case 97: 
   var $781=$i;
   var $782=(($size)|0);
   var $783=HEAP32[(($782)>>2)];
   var $784=((($783)-(4))|0);
   var $785=(($781)|(0)) <= (($784)|(0));
   if ($785) { label = 98; break; } else { label = 100; break; }
  case 98: 
   var $787=$6;
   var $788=$i;
   var $789=$_src22;
   var $790=(($789+($788<<3))|0);
   var $791=HEAPF64[(($790)>>3)];
   var $792=($787)*($791);
   var $793=$7;
   var $794=($792)+($793);
   $t023=$794;
   var $795=$6;
   var $796=$i;
   var $797=((($796)+(1))|0);
   var $798=$_src22;
   var $799=(($798+($797<<3))|0);
   var $800=HEAPF64[(($799)>>3)];
   var $801=($795)*($800);
   var $802=$7;
   var $803=($801)+($802);
   $t124=$803;
   var $804=$t023;
   var $805=$i;
   var $806=$4;
   var $807=(($806+($805<<3))|0);
   HEAPF64[(($807)>>3)]=$804;
   var $808=$t124;
   var $809=$i;
   var $810=((($809)+(1))|0);
   var $811=$4;
   var $812=(($811+($810<<3))|0);
   HEAPF64[(($812)>>3)]=$808;
   var $813=$6;
   var $814=$i;
   var $815=((($814)+(2))|0);
   var $816=$_src22;
   var $817=(($816+($815<<3))|0);
   var $818=HEAPF64[(($817)>>3)];
   var $819=($813)*($818);
   var $820=$7;
   var $821=($819)+($820);
   $t023=$821;
   var $822=$6;
   var $823=$i;
   var $824=((($823)+(3))|0);
   var $825=$_src22;
   var $826=(($825+($824<<3))|0);
   var $827=HEAPF64[(($826)>>3)];
   var $828=($822)*($827);
   var $829=$7;
   var $830=($828)+($829);
   $t124=$830;
   var $831=$t023;
   var $832=$i;
   var $833=((($832)+(2))|0);
   var $834=$4;
   var $835=(($834+($833<<3))|0);
   HEAPF64[(($835)>>3)]=$831;
   var $836=$t124;
   var $837=$i;
   var $838=((($837)+(3))|0);
   var $839=$4;
   var $840=(($839+($838<<3))|0);
   HEAPF64[(($840)>>3)]=$836;
   label = 99; break;
  case 99: 
   var $842=$i;
   var $843=((($842)+(4))|0);
   $i=$843;
   label = 97; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $846=$i;
   var $847=(($size)|0);
   var $848=HEAP32[(($847)>>2)];
   var $849=(($846)|(0)) < (($848)|(0));
   if ($849) { label = 102; break; } else { label = 104; break; }
  case 102: 
   var $851=$6;
   var $852=$i;
   var $853=$_src22;
   var $854=(($853+($852<<3))|0);
   var $855=HEAPF64[(($854)>>3)];
   var $856=($851)*($855);
   var $857=$7;
   var $858=($856)+($857);
   $t025=$858;
   var $859=$t025;
   var $860=$i;
   var $861=$4;
   var $862=(($861+($860<<3))|0);
   HEAPF64[(($862)>>3)]=$859;
   label = 103; break;
  case 103: 
   var $864=$i;
   var $865=((($864)+(1))|0);
   $i=$865;
   label = 101; break;
  case 104: 
   label = 105; break;
  case 105: 
   var $868=$3;
   var $869=$_src22;
   var $870=(($869+($868<<3))|0);
   $_src22=$870;
   var $871=$5;
   var $872=$4;
   var $873=(($872+($871<<3))|0);
   $4=$873;
   label = 95; break;
  case 106: 
   label = 108; break;
  case 107: 
   $1=-12;
   label = 109; break;
  case 108: 
   $1=0;
   label = 109; break;
  case 109: 
   var $878=$1;
   STACKTOP = sp;
   return $878;
  default: assert(0, "bad label: " + label);
 }
}
function __Z26icvLUT_Transform8u_32f_C1RPKhiPfi6CvSizePKf($src, $srcstep, $dst, $dststep, $size, $lut) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$lut;
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$9;
 var $11=$4;
 var $12=$6;
 var $13=$size;
 assert(8 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];
 var $14=$5;
 var $15=$14;
 var $16=__Z26icvLUT_Transform8u_32s_C1RPKhiPii6CvSizePKi($7, $8, $10, $11, $6, $15);
 STACKTOP = sp;
 return $16;
}
function __Z26icvLUT_Transform8u_16s_C1RPKhiPsi6CvSizePKs($src, $srcstep, $dst, $dststep, $size, $lut) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$lut;
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$6;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=$5;
 var $14=__Z26icvLUT_Transform8u_16u_C1RPKhiPti6CvSizePKt($7, $8, $9, $10, $6, $13);
 STACKTOP = sp;
 return $14;
}
function __Z25icvLUT_Transform8u_8s_C1RPKhiPci6CvSizePKc($src, $srcstep, $dst, $dststep, $size, $lut) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$lut;
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$6;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=$5;
 var $14=__Z25icvLUT_Transform8u_8u_C1RPKhiPhi6CvSizeS0_($7, $8, $9, $10, $6, $13);
 STACKTOP = sp;
 return $14;
}
function __ZL15icvCvtTo_8u_C1RPKhiPhi6CvSizei($src, $srcstep, $dst, $dststep, $size, $param) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $srctype;
   var $_src;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $i3;
   var $t04;
   var $t15;
   var $t06;
   var $_src7;
   var $i8;
   var $t09;
   var $t110;
   var $t011;
   var $_src12;
   var $i13;
   var $t014;
   var $t115;
   var $t016;
   var $_src17;
   var $i18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $i23;
   var $t024;
   var $t125;
   var $t026;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$param;
   var $6=$5;
   $srctype=$6;
   var $7=$4;
   var $8=(((($7)>>>(0)))&-1);
   $4=$8;
   var $9=$srctype;
   var $10=$9 & 7;
   if ((($10)|(0))==1) {
    label = 2; break;
   }
   else if ((($10)|(0))==2) {
    label = 30; break;
   }
   else if ((($10)|(0))==3) {
    label = 58; break;
   }
   else if ((($10)|(0))==4) {
    label = 86; break;
   }
   else if ((($10)|(0))==5) {
    label = 114; break;
   }
   else if ((($10)|(0))==6) {
    label = 142; break;
   }
   else {
   label = 170; break;
   }
  case 2: 
   var $12=$1;
   $_src=$12;
   var $13=$2;
   var $14=(((($13)>>>(0)))&-1);
   $2=$14;
   label = 3; break;
  case 3: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 29; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $22=$i;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 6; break; } else { label = 20; break; }
  case 6: 
   var $28=$i;
   var $29=$_src;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31 << 24) >> 24);
   $t0=$32;
   var $33=$i;
   var $34=((($33)+(1))|0);
   var $35=$_src;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37 << 24) >> 24);
   $t1=$38;
   var $39=$t0;
   var $40=$39 & -256;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $43=$t0;
   var $49 = $43;label = 9; break;
  case 8: 
   var $45=$t0;
   var $46=(($45)|(0)) > 0;
   var $47=$46 ? 255 : 0;
   var $49 = $47;label = 9; break;
  case 9: 
   var $49;
   var $50=(($49) & 255);
   var $51=$i;
   var $52=$3;
   var $53=(($52+$51)|0);
   HEAP8[($53)]=$50;
   var $54=$t1;
   var $55=$54 & -256;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $58=$t1;
   var $64 = $58;label = 12; break;
  case 11: 
   var $60=$t1;
   var $61=(($60)|(0)) > 0;
   var $62=$61 ? 255 : 0;
   var $64 = $62;label = 12; break;
  case 12: 
   var $64;
   var $65=(($64) & 255);
   var $66=$i;
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+$67)|0);
   HEAP8[($69)]=$65;
   var $70=$i;
   var $71=((($70)+(2))|0);
   var $72=$_src;
   var $73=(($72+$71)|0);
   var $74=HEAP8[($73)];
   var $75=(($74 << 24) >> 24);
   $t0=$75;
   var $76=$i;
   var $77=((($76)+(3))|0);
   var $78=$_src;
   var $79=(($78+$77)|0);
   var $80=HEAP8[($79)];
   var $81=(($80 << 24) >> 24);
   $t1=$81;
   var $82=$t0;
   var $83=$82 & -256;
   var $84=(($83)|(0))!=0;
   if ($84) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $86=$t0;
   var $92 = $86;label = 15; break;
  case 14: 
   var $88=$t0;
   var $89=(($88)|(0)) > 0;
   var $90=$89 ? 255 : 0;
   var $92 = $90;label = 15; break;
  case 15: 
   var $92;
   var $93=(($92) & 255);
   var $94=$i;
   var $95=((($94)+(2))|0);
   var $96=$3;
   var $97=(($96+$95)|0);
   HEAP8[($97)]=$93;
   var $98=$t1;
   var $99=$98 & -256;
   var $100=(($99)|(0))!=0;
   if ($100) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $102=$t1;
   var $108 = $102;label = 18; break;
  case 17: 
   var $104=$t1;
   var $105=(($104)|(0)) > 0;
   var $106=$105 ? 255 : 0;
   var $108 = $106;label = 18; break;
  case 18: 
   var $108;
   var $109=(($108) & 255);
   var $110=$i;
   var $111=((($110)+(3))|0);
   var $112=$3;
   var $113=(($112+$111)|0);
   HEAP8[($113)]=$109;
   label = 19; break;
  case 19: 
   var $115=$i;
   var $116=((($115)+(4))|0);
   $i=$116;
   label = 5; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $119=$i;
   var $120=(($size)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($119)|(0)) < (($121)|(0));
   if ($122) { label = 22; break; } else { label = 27; break; }
  case 22: 
   var $124=$i;
   var $125=$_src;
   var $126=(($125+$124)|0);
   var $127=HEAP8[($126)];
   var $128=(($127 << 24) >> 24);
   $t01=$128;
   var $129=$t01;
   var $130=$129 & -256;
   var $131=(($130)|(0))!=0;
   if ($131) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $133=$t01;
   var $139 = $133;label = 25; break;
  case 24: 
   var $135=$t01;
   var $136=(($135)|(0)) > 0;
   var $137=$136 ? 255 : 0;
   var $139 = $137;label = 25; break;
  case 25: 
   var $139;
   var $140=(($139) & 255);
   var $141=$i;
   var $142=$3;
   var $143=(($142+$141)|0);
   HEAP8[($143)]=$140;
   label = 26; break;
  case 26: 
   var $145=$i;
   var $146=((($145)+(1))|0);
   $i=$146;
   label = 21; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $149=$2;
   var $150=$_src;
   var $151=(($150+$149)|0);
   $_src=$151;
   var $152=$4;
   var $153=$3;
   var $154=(($153+$152)|0);
   $3=$154;
   label = 3; break;
  case 29: 
   label = 170; break;
  case 30: 
   var $157=$1;
   var $158=$157;
   $_src2=$158;
   var $159=$2;
   var $160=((((($159)>>>(0)))/(2))&-1);
   $2=$160;
   label = 31; break;
  case 31: 
   var $162=(($size+4)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=((($163)-(1))|0);
   HEAP32[(($162)>>2)]=$164;
   var $165=(($163)|(0))!=0;
   if ($165) { label = 32; break; } else { label = 57; break; }
  case 32: 
   $i3=0;
   label = 33; break;
  case 33: 
   var $168=$i3;
   var $169=(($size)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=((($170)-(4))|0);
   var $172=(($168)|(0)) <= (($171)|(0));
   if ($172) { label = 34; break; } else { label = 48; break; }
  case 34: 
   var $174=$i3;
   var $175=$_src2;
   var $176=(($175+($174<<1))|0);
   var $177=HEAP16[(($176)>>1)];
   var $178=(($177)&(65535));
   $t04=$178;
   var $179=$i3;
   var $180=((($179)+(1))|0);
   var $181=$_src2;
   var $182=(($181+($180<<1))|0);
   var $183=HEAP16[(($182)>>1)];
   var $184=(($183)&(65535));
   $t15=$184;
   var $185=$t04;
   var $186=$185 & -256;
   var $187=(($186)|(0))!=0;
   if ($187) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $189=$t04;
   var $195 = $189;label = 37; break;
  case 36: 
   var $191=$t04;
   var $192=(($191)|(0)) > 0;
   var $193=$192 ? 255 : 0;
   var $195 = $193;label = 37; break;
  case 37: 
   var $195;
   var $196=(($195) & 255);
   var $197=$i3;
   var $198=$3;
   var $199=(($198+$197)|0);
   HEAP8[($199)]=$196;
   var $200=$t15;
   var $201=$200 & -256;
   var $202=(($201)|(0))!=0;
   if ($202) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $204=$t15;
   var $210 = $204;label = 40; break;
  case 39: 
   var $206=$t15;
   var $207=(($206)|(0)) > 0;
   var $208=$207 ? 255 : 0;
   var $210 = $208;label = 40; break;
  case 40: 
   var $210;
   var $211=(($210) & 255);
   var $212=$i3;
   var $213=((($212)+(1))|0);
   var $214=$3;
   var $215=(($214+$213)|0);
   HEAP8[($215)]=$211;
   var $216=$i3;
   var $217=((($216)+(2))|0);
   var $218=$_src2;
   var $219=(($218+($217<<1))|0);
   var $220=HEAP16[(($219)>>1)];
   var $221=(($220)&(65535));
   $t04=$221;
   var $222=$i3;
   var $223=((($222)+(3))|0);
   var $224=$_src2;
   var $225=(($224+($223<<1))|0);
   var $226=HEAP16[(($225)>>1)];
   var $227=(($226)&(65535));
   $t15=$227;
   var $228=$t04;
   var $229=$228 & -256;
   var $230=(($229)|(0))!=0;
   if ($230) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $232=$t04;
   var $238 = $232;label = 43; break;
  case 42: 
   var $234=$t04;
   var $235=(($234)|(0)) > 0;
   var $236=$235 ? 255 : 0;
   var $238 = $236;label = 43; break;
  case 43: 
   var $238;
   var $239=(($238) & 255);
   var $240=$i3;
   var $241=((($240)+(2))|0);
   var $242=$3;
   var $243=(($242+$241)|0);
   HEAP8[($243)]=$239;
   var $244=$t15;
   var $245=$244 & -256;
   var $246=(($245)|(0))!=0;
   if ($246) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $248=$t15;
   var $254 = $248;label = 46; break;
  case 45: 
   var $250=$t15;
   var $251=(($250)|(0)) > 0;
   var $252=$251 ? 255 : 0;
   var $254 = $252;label = 46; break;
  case 46: 
   var $254;
   var $255=(($254) & 255);
   var $256=$i3;
   var $257=((($256)+(3))|0);
   var $258=$3;
   var $259=(($258+$257)|0);
   HEAP8[($259)]=$255;
   label = 47; break;
  case 47: 
   var $261=$i3;
   var $262=((($261)+(4))|0);
   $i3=$262;
   label = 33; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $265=$i3;
   var $266=(($size)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($265)|(0)) < (($267)|(0));
   if ($268) { label = 50; break; } else { label = 55; break; }
  case 50: 
   var $270=$i3;
   var $271=$_src2;
   var $272=(($271+($270<<1))|0);
   var $273=HEAP16[(($272)>>1)];
   var $274=(($273)&(65535));
   $t06=$274;
   var $275=$t06;
   var $276=$275 & -256;
   var $277=(($276)|(0))!=0;
   if ($277) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $279=$t06;
   var $285 = $279;label = 53; break;
  case 52: 
   var $281=$t06;
   var $282=(($281)|(0)) > 0;
   var $283=$282 ? 255 : 0;
   var $285 = $283;label = 53; break;
  case 53: 
   var $285;
   var $286=(($285) & 255);
   var $287=$i3;
   var $288=$3;
   var $289=(($288+$287)|0);
   HEAP8[($289)]=$286;
   label = 54; break;
  case 54: 
   var $291=$i3;
   var $292=((($291)+(1))|0);
   $i3=$292;
   label = 49; break;
  case 55: 
   label = 56; break;
  case 56: 
   var $295=$2;
   var $296=$_src2;
   var $297=(($296+($295<<1))|0);
   $_src2=$297;
   var $298=$4;
   var $299=$3;
   var $300=(($299+$298)|0);
   $3=$300;
   label = 31; break;
  case 57: 
   label = 170; break;
  case 58: 
   var $303=$1;
   var $304=$303;
   $_src7=$304;
   var $305=$2;
   var $306=((((($305)>>>(0)))/(2))&-1);
   $2=$306;
   label = 59; break;
  case 59: 
   var $308=(($size+4)|0);
   var $309=HEAP32[(($308)>>2)];
   var $310=((($309)-(1))|0);
   HEAP32[(($308)>>2)]=$310;
   var $311=(($309)|(0))!=0;
   if ($311) { label = 60; break; } else { label = 85; break; }
  case 60: 
   $i8=0;
   label = 61; break;
  case 61: 
   var $314=$i8;
   var $315=(($size)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=((($316)-(4))|0);
   var $318=(($314)|(0)) <= (($317)|(0));
   if ($318) { label = 62; break; } else { label = 76; break; }
  case 62: 
   var $320=$i8;
   var $321=$_src7;
   var $322=(($321+($320<<1))|0);
   var $323=HEAP16[(($322)>>1)];
   var $324=(($323 << 16) >> 16);
   $t09=$324;
   var $325=$i8;
   var $326=((($325)+(1))|0);
   var $327=$_src7;
   var $328=(($327+($326<<1))|0);
   var $329=HEAP16[(($328)>>1)];
   var $330=(($329 << 16) >> 16);
   $t110=$330;
   var $331=$t09;
   var $332=$331 & -256;
   var $333=(($332)|(0))!=0;
   if ($333) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $335=$t09;
   var $341 = $335;label = 65; break;
  case 64: 
   var $337=$t09;
   var $338=(($337)|(0)) > 0;
   var $339=$338 ? 255 : 0;
   var $341 = $339;label = 65; break;
  case 65: 
   var $341;
   var $342=(($341) & 255);
   var $343=$i8;
   var $344=$3;
   var $345=(($344+$343)|0);
   HEAP8[($345)]=$342;
   var $346=$t110;
   var $347=$346 & -256;
   var $348=(($347)|(0))!=0;
   if ($348) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $350=$t110;
   var $356 = $350;label = 68; break;
  case 67: 
   var $352=$t110;
   var $353=(($352)|(0)) > 0;
   var $354=$353 ? 255 : 0;
   var $356 = $354;label = 68; break;
  case 68: 
   var $356;
   var $357=(($356) & 255);
   var $358=$i8;
   var $359=((($358)+(1))|0);
   var $360=$3;
   var $361=(($360+$359)|0);
   HEAP8[($361)]=$357;
   var $362=$i8;
   var $363=((($362)+(2))|0);
   var $364=$_src7;
   var $365=(($364+($363<<1))|0);
   var $366=HEAP16[(($365)>>1)];
   var $367=(($366 << 16) >> 16);
   $t09=$367;
   var $368=$i8;
   var $369=((($368)+(3))|0);
   var $370=$_src7;
   var $371=(($370+($369<<1))|0);
   var $372=HEAP16[(($371)>>1)];
   var $373=(($372 << 16) >> 16);
   $t110=$373;
   var $374=$t09;
   var $375=$374 & -256;
   var $376=(($375)|(0))!=0;
   if ($376) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $378=$t09;
   var $384 = $378;label = 71; break;
  case 70: 
   var $380=$t09;
   var $381=(($380)|(0)) > 0;
   var $382=$381 ? 255 : 0;
   var $384 = $382;label = 71; break;
  case 71: 
   var $384;
   var $385=(($384) & 255);
   var $386=$i8;
   var $387=((($386)+(2))|0);
   var $388=$3;
   var $389=(($388+$387)|0);
   HEAP8[($389)]=$385;
   var $390=$t110;
   var $391=$390 & -256;
   var $392=(($391)|(0))!=0;
   if ($392) { label = 73; break; } else { label = 72; break; }
  case 72: 
   var $394=$t110;
   var $400 = $394;label = 74; break;
  case 73: 
   var $396=$t110;
   var $397=(($396)|(0)) > 0;
   var $398=$397 ? 255 : 0;
   var $400 = $398;label = 74; break;
  case 74: 
   var $400;
   var $401=(($400) & 255);
   var $402=$i8;
   var $403=((($402)+(3))|0);
   var $404=$3;
   var $405=(($404+$403)|0);
   HEAP8[($405)]=$401;
   label = 75; break;
  case 75: 
   var $407=$i8;
   var $408=((($407)+(4))|0);
   $i8=$408;
   label = 61; break;
  case 76: 
   label = 77; break;
  case 77: 
   var $411=$i8;
   var $412=(($size)|0);
   var $413=HEAP32[(($412)>>2)];
   var $414=(($411)|(0)) < (($413)|(0));
   if ($414) { label = 78; break; } else { label = 83; break; }
  case 78: 
   var $416=$i8;
   var $417=$_src7;
   var $418=(($417+($416<<1))|0);
   var $419=HEAP16[(($418)>>1)];
   var $420=(($419 << 16) >> 16);
   $t011=$420;
   var $421=$t011;
   var $422=$421 & -256;
   var $423=(($422)|(0))!=0;
   if ($423) { label = 80; break; } else { label = 79; break; }
  case 79: 
   var $425=$t011;
   var $431 = $425;label = 81; break;
  case 80: 
   var $427=$t011;
   var $428=(($427)|(0)) > 0;
   var $429=$428 ? 255 : 0;
   var $431 = $429;label = 81; break;
  case 81: 
   var $431;
   var $432=(($431) & 255);
   var $433=$i8;
   var $434=$3;
   var $435=(($434+$433)|0);
   HEAP8[($435)]=$432;
   label = 82; break;
  case 82: 
   var $437=$i8;
   var $438=((($437)+(1))|0);
   $i8=$438;
   label = 77; break;
  case 83: 
   label = 84; break;
  case 84: 
   var $441=$2;
   var $442=$_src7;
   var $443=(($442+($441<<1))|0);
   $_src7=$443;
   var $444=$4;
   var $445=$3;
   var $446=(($445+$444)|0);
   $3=$446;
   label = 59; break;
  case 85: 
   label = 170; break;
  case 86: 
   var $449=$1;
   var $450=$449;
   $_src12=$450;
   var $451=$2;
   var $452=((((($451)>>>(0)))/(4))&-1);
   $2=$452;
   label = 87; break;
  case 87: 
   var $454=(($size+4)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=((($455)-(1))|0);
   HEAP32[(($454)>>2)]=$456;
   var $457=(($455)|(0))!=0;
   if ($457) { label = 88; break; } else { label = 113; break; }
  case 88: 
   $i13=0;
   label = 89; break;
  case 89: 
   var $460=$i13;
   var $461=(($size)|0);
   var $462=HEAP32[(($461)>>2)];
   var $463=((($462)-(4))|0);
   var $464=(($460)|(0)) <= (($463)|(0));
   if ($464) { label = 90; break; } else { label = 104; break; }
  case 90: 
   var $466=$i13;
   var $467=$_src12;
   var $468=(($467+($466<<2))|0);
   var $469=HEAP32[(($468)>>2)];
   $t014=$469;
   var $470=$i13;
   var $471=((($470)+(1))|0);
   var $472=$_src12;
   var $473=(($472+($471<<2))|0);
   var $474=HEAP32[(($473)>>2)];
   $t115=$474;
   var $475=$t014;
   var $476=$475 & -256;
   var $477=(($476)|(0))!=0;
   if ($477) { label = 92; break; } else { label = 91; break; }
  case 91: 
   var $479=$t014;
   var $485 = $479;label = 93; break;
  case 92: 
   var $481=$t014;
   var $482=(($481)|(0)) > 0;
   var $483=$482 ? 255 : 0;
   var $485 = $483;label = 93; break;
  case 93: 
   var $485;
   var $486=(($485) & 255);
   var $487=$i13;
   var $488=$3;
   var $489=(($488+$487)|0);
   HEAP8[($489)]=$486;
   var $490=$t115;
   var $491=$490 & -256;
   var $492=(($491)|(0))!=0;
   if ($492) { label = 95; break; } else { label = 94; break; }
  case 94: 
   var $494=$t115;
   var $500 = $494;label = 96; break;
  case 95: 
   var $496=$t115;
   var $497=(($496)|(0)) > 0;
   var $498=$497 ? 255 : 0;
   var $500 = $498;label = 96; break;
  case 96: 
   var $500;
   var $501=(($500) & 255);
   var $502=$i13;
   var $503=((($502)+(1))|0);
   var $504=$3;
   var $505=(($504+$503)|0);
   HEAP8[($505)]=$501;
   var $506=$i13;
   var $507=((($506)+(2))|0);
   var $508=$_src12;
   var $509=(($508+($507<<2))|0);
   var $510=HEAP32[(($509)>>2)];
   $t014=$510;
   var $511=$i13;
   var $512=((($511)+(3))|0);
   var $513=$_src12;
   var $514=(($513+($512<<2))|0);
   var $515=HEAP32[(($514)>>2)];
   $t115=$515;
   var $516=$t014;
   var $517=$516 & -256;
   var $518=(($517)|(0))!=0;
   if ($518) { label = 98; break; } else { label = 97; break; }
  case 97: 
   var $520=$t014;
   var $526 = $520;label = 99; break;
  case 98: 
   var $522=$t014;
   var $523=(($522)|(0)) > 0;
   var $524=$523 ? 255 : 0;
   var $526 = $524;label = 99; break;
  case 99: 
   var $526;
   var $527=(($526) & 255);
   var $528=$i13;
   var $529=((($528)+(2))|0);
   var $530=$3;
   var $531=(($530+$529)|0);
   HEAP8[($531)]=$527;
   var $532=$t115;
   var $533=$532 & -256;
   var $534=(($533)|(0))!=0;
   if ($534) { label = 101; break; } else { label = 100; break; }
  case 100: 
   var $536=$t115;
   var $542 = $536;label = 102; break;
  case 101: 
   var $538=$t115;
   var $539=(($538)|(0)) > 0;
   var $540=$539 ? 255 : 0;
   var $542 = $540;label = 102; break;
  case 102: 
   var $542;
   var $543=(($542) & 255);
   var $544=$i13;
   var $545=((($544)+(3))|0);
   var $546=$3;
   var $547=(($546+$545)|0);
   HEAP8[($547)]=$543;
   label = 103; break;
  case 103: 
   var $549=$i13;
   var $550=((($549)+(4))|0);
   $i13=$550;
   label = 89; break;
  case 104: 
   label = 105; break;
  case 105: 
   var $553=$i13;
   var $554=(($size)|0);
   var $555=HEAP32[(($554)>>2)];
   var $556=(($553)|(0)) < (($555)|(0));
   if ($556) { label = 106; break; } else { label = 111; break; }
  case 106: 
   var $558=$i13;
   var $559=$_src12;
   var $560=(($559+($558<<2))|0);
   var $561=HEAP32[(($560)>>2)];
   $t016=$561;
   var $562=$t016;
   var $563=$562 & -256;
   var $564=(($563)|(0))!=0;
   if ($564) { label = 108; break; } else { label = 107; break; }
  case 107: 
   var $566=$t016;
   var $572 = $566;label = 109; break;
  case 108: 
   var $568=$t016;
   var $569=(($568)|(0)) > 0;
   var $570=$569 ? 255 : 0;
   var $572 = $570;label = 109; break;
  case 109: 
   var $572;
   var $573=(($572) & 255);
   var $574=$i13;
   var $575=$3;
   var $576=(($575+$574)|0);
   HEAP8[($576)]=$573;
   label = 110; break;
  case 110: 
   var $578=$i13;
   var $579=((($578)+(1))|0);
   $i13=$579;
   label = 105; break;
  case 111: 
   label = 112; break;
  case 112: 
   var $582=$2;
   var $583=$_src12;
   var $584=(($583+($582<<2))|0);
   $_src12=$584;
   var $585=$4;
   var $586=$3;
   var $587=(($586+$585)|0);
   $3=$587;
   label = 87; break;
  case 113: 
   label = 170; break;
  case 114: 
   var $590=$1;
   var $591=$590;
   $_src17=$591;
   var $592=$2;
   var $593=((((($592)>>>(0)))/(4))&-1);
   $2=$593;
   label = 115; break;
  case 115: 
   var $595=(($size+4)|0);
   var $596=HEAP32[(($595)>>2)];
   var $597=((($596)-(1))|0);
   HEAP32[(($595)>>2)]=$597;
   var $598=(($596)|(0))!=0;
   if ($598) { label = 116; break; } else { label = 141; break; }
  case 116: 
   $i18=0;
   label = 117; break;
  case 117: 
   var $601=$i18;
   var $602=(($size)|0);
   var $603=HEAP32[(($602)>>2)];
   var $604=((($603)-(4))|0);
   var $605=(($601)|(0)) <= (($604)|(0));
   if ($605) { label = 118; break; } else { label = 132; break; }
  case 118: 
   var $607=$i18;
   var $608=$_src17;
   var $609=(($608+($607<<2))|0);
   var $610=HEAPF32[(($609)>>2)];
   var $611=$610;
   var $612=__Z7cvRoundd($611);
   $t019=$612;
   var $613=$i18;
   var $614=((($613)+(1))|0);
   var $615=$_src17;
   var $616=(($615+($614<<2))|0);
   var $617=HEAPF32[(($616)>>2)];
   var $618=$617;
   var $619=__Z7cvRoundd($618);
   $t120=$619;
   var $620=$t019;
   var $621=$620 & -256;
   var $622=(($621)|(0))!=0;
   if ($622) { label = 120; break; } else { label = 119; break; }
  case 119: 
   var $624=$t019;
   var $630 = $624;label = 121; break;
  case 120: 
   var $626=$t019;
   var $627=(($626)|(0)) > 0;
   var $628=$627 ? 255 : 0;
   var $630 = $628;label = 121; break;
  case 121: 
   var $630;
   var $631=(($630) & 255);
   var $632=$i18;
   var $633=$3;
   var $634=(($633+$632)|0);
   HEAP8[($634)]=$631;
   var $635=$t120;
   var $636=$635 & -256;
   var $637=(($636)|(0))!=0;
   if ($637) { label = 123; break; } else { label = 122; break; }
  case 122: 
   var $639=$t120;
   var $645 = $639;label = 124; break;
  case 123: 
   var $641=$t120;
   var $642=(($641)|(0)) > 0;
   var $643=$642 ? 255 : 0;
   var $645 = $643;label = 124; break;
  case 124: 
   var $645;
   var $646=(($645) & 255);
   var $647=$i18;
   var $648=((($647)+(1))|0);
   var $649=$3;
   var $650=(($649+$648)|0);
   HEAP8[($650)]=$646;
   var $651=$i18;
   var $652=((($651)+(2))|0);
   var $653=$_src17;
   var $654=(($653+($652<<2))|0);
   var $655=HEAPF32[(($654)>>2)];
   var $656=$655;
   var $657=__Z7cvRoundd($656);
   $t019=$657;
   var $658=$i18;
   var $659=((($658)+(3))|0);
   var $660=$_src17;
   var $661=(($660+($659<<2))|0);
   var $662=HEAPF32[(($661)>>2)];
   var $663=$662;
   var $664=__Z7cvRoundd($663);
   $t120=$664;
   var $665=$t019;
   var $666=$665 & -256;
   var $667=(($666)|(0))!=0;
   if ($667) { label = 126; break; } else { label = 125; break; }
  case 125: 
   var $669=$t019;
   var $675 = $669;label = 127; break;
  case 126: 
   var $671=$t019;
   var $672=(($671)|(0)) > 0;
   var $673=$672 ? 255 : 0;
   var $675 = $673;label = 127; break;
  case 127: 
   var $675;
   var $676=(($675) & 255);
   var $677=$i18;
   var $678=((($677)+(2))|0);
   var $679=$3;
   var $680=(($679+$678)|0);
   HEAP8[($680)]=$676;
   var $681=$t120;
   var $682=$681 & -256;
   var $683=(($682)|(0))!=0;
   if ($683) { label = 129; break; } else { label = 128; break; }
  case 128: 
   var $685=$t120;
   var $691 = $685;label = 130; break;
  case 129: 
   var $687=$t120;
   var $688=(($687)|(0)) > 0;
   var $689=$688 ? 255 : 0;
   var $691 = $689;label = 130; break;
  case 130: 
   var $691;
   var $692=(($691) & 255);
   var $693=$i18;
   var $694=((($693)+(3))|0);
   var $695=$3;
   var $696=(($695+$694)|0);
   HEAP8[($696)]=$692;
   label = 131; break;
  case 131: 
   var $698=$i18;
   var $699=((($698)+(4))|0);
   $i18=$699;
   label = 117; break;
  case 132: 
   label = 133; break;
  case 133: 
   var $702=$i18;
   var $703=(($size)|0);
   var $704=HEAP32[(($703)>>2)];
   var $705=(($702)|(0)) < (($704)|(0));
   if ($705) { label = 134; break; } else { label = 139; break; }
  case 134: 
   var $707=$i18;
   var $708=$_src17;
   var $709=(($708+($707<<2))|0);
   var $710=HEAPF32[(($709)>>2)];
   var $711=$710;
   var $712=__Z7cvRoundd($711);
   $t021=$712;
   var $713=$t021;
   var $714=$713 & -256;
   var $715=(($714)|(0))!=0;
   if ($715) { label = 136; break; } else { label = 135; break; }
  case 135: 
   var $717=$t021;
   var $723 = $717;label = 137; break;
  case 136: 
   var $719=$t021;
   var $720=(($719)|(0)) > 0;
   var $721=$720 ? 255 : 0;
   var $723 = $721;label = 137; break;
  case 137: 
   var $723;
   var $724=(($723) & 255);
   var $725=$i18;
   var $726=$3;
   var $727=(($726+$725)|0);
   HEAP8[($727)]=$724;
   label = 138; break;
  case 138: 
   var $729=$i18;
   var $730=((($729)+(1))|0);
   $i18=$730;
   label = 133; break;
  case 139: 
   label = 140; break;
  case 140: 
   var $733=$2;
   var $734=$_src17;
   var $735=(($734+($733<<2))|0);
   $_src17=$735;
   var $736=$4;
   var $737=$3;
   var $738=(($737+$736)|0);
   $3=$738;
   label = 115; break;
  case 141: 
   label = 170; break;
  case 142: 
   var $741=$1;
   var $742=$741;
   $_src22=$742;
   var $743=$2;
   var $744=((((($743)>>>(0)))/(8))&-1);
   $2=$744;
   label = 143; break;
  case 143: 
   var $746=(($size+4)|0);
   var $747=HEAP32[(($746)>>2)];
   var $748=((($747)-(1))|0);
   HEAP32[(($746)>>2)]=$748;
   var $749=(($747)|(0))!=0;
   if ($749) { label = 144; break; } else { label = 169; break; }
  case 144: 
   $i23=0;
   label = 145; break;
  case 145: 
   var $752=$i23;
   var $753=(($size)|0);
   var $754=HEAP32[(($753)>>2)];
   var $755=((($754)-(4))|0);
   var $756=(($752)|(0)) <= (($755)|(0));
   if ($756) { label = 146; break; } else { label = 160; break; }
  case 146: 
   var $758=$i23;
   var $759=$_src22;
   var $760=(($759+($758<<3))|0);
   var $761=HEAPF64[(($760)>>3)];
   var $762=__Z7cvRoundd($761);
   $t024=$762;
   var $763=$i23;
   var $764=((($763)+(1))|0);
   var $765=$_src22;
   var $766=(($765+($764<<3))|0);
   var $767=HEAPF64[(($766)>>3)];
   var $768=__Z7cvRoundd($767);
   $t125=$768;
   var $769=$t024;
   var $770=$769 & -256;
   var $771=(($770)|(0))!=0;
   if ($771) { label = 148; break; } else { label = 147; break; }
  case 147: 
   var $773=$t024;
   var $779 = $773;label = 149; break;
  case 148: 
   var $775=$t024;
   var $776=(($775)|(0)) > 0;
   var $777=$776 ? 255 : 0;
   var $779 = $777;label = 149; break;
  case 149: 
   var $779;
   var $780=(($779) & 255);
   var $781=$i23;
   var $782=$3;
   var $783=(($782+$781)|0);
   HEAP8[($783)]=$780;
   var $784=$t125;
   var $785=$784 & -256;
   var $786=(($785)|(0))!=0;
   if ($786) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $788=$t125;
   var $794 = $788;label = 152; break;
  case 151: 
   var $790=$t125;
   var $791=(($790)|(0)) > 0;
   var $792=$791 ? 255 : 0;
   var $794 = $792;label = 152; break;
  case 152: 
   var $794;
   var $795=(($794) & 255);
   var $796=$i23;
   var $797=((($796)+(1))|0);
   var $798=$3;
   var $799=(($798+$797)|0);
   HEAP8[($799)]=$795;
   var $800=$i23;
   var $801=((($800)+(2))|0);
   var $802=$_src22;
   var $803=(($802+($801<<3))|0);
   var $804=HEAPF64[(($803)>>3)];
   var $805=__Z7cvRoundd($804);
   $t024=$805;
   var $806=$i23;
   var $807=((($806)+(3))|0);
   var $808=$_src22;
   var $809=(($808+($807<<3))|0);
   var $810=HEAPF64[(($809)>>3)];
   var $811=__Z7cvRoundd($810);
   $t125=$811;
   var $812=$t024;
   var $813=$812 & -256;
   var $814=(($813)|(0))!=0;
   if ($814) { label = 154; break; } else { label = 153; break; }
  case 153: 
   var $816=$t024;
   var $822 = $816;label = 155; break;
  case 154: 
   var $818=$t024;
   var $819=(($818)|(0)) > 0;
   var $820=$819 ? 255 : 0;
   var $822 = $820;label = 155; break;
  case 155: 
   var $822;
   var $823=(($822) & 255);
   var $824=$i23;
   var $825=((($824)+(2))|0);
   var $826=$3;
   var $827=(($826+$825)|0);
   HEAP8[($827)]=$823;
   var $828=$t125;
   var $829=$828 & -256;
   var $830=(($829)|(0))!=0;
   if ($830) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $832=$t125;
   var $838 = $832;label = 158; break;
  case 157: 
   var $834=$t125;
   var $835=(($834)|(0)) > 0;
   var $836=$835 ? 255 : 0;
   var $838 = $836;label = 158; break;
  case 158: 
   var $838;
   var $839=(($838) & 255);
   var $840=$i23;
   var $841=((($840)+(3))|0);
   var $842=$3;
   var $843=(($842+$841)|0);
   HEAP8[($843)]=$839;
   label = 159; break;
  case 159: 
   var $845=$i23;
   var $846=((($845)+(4))|0);
   $i23=$846;
   label = 145; break;
  case 160: 
   label = 161; break;
  case 161: 
   var $849=$i23;
   var $850=(($size)|0);
   var $851=HEAP32[(($850)>>2)];
   var $852=(($849)|(0)) < (($851)|(0));
   if ($852) { label = 162; break; } else { label = 167; break; }
  case 162: 
   var $854=$i23;
   var $855=$_src22;
   var $856=(($855+($854<<3))|0);
   var $857=HEAPF64[(($856)>>3)];
   var $858=__Z7cvRoundd($857);
   $t026=$858;
   var $859=$t026;
   var $860=$859 & -256;
   var $861=(($860)|(0))!=0;
   if ($861) { label = 164; break; } else { label = 163; break; }
  case 163: 
   var $863=$t026;
   var $869 = $863;label = 165; break;
  case 164: 
   var $865=$t026;
   var $866=(($865)|(0)) > 0;
   var $867=$866 ? 255 : 0;
   var $869 = $867;label = 165; break;
  case 165: 
   var $869;
   var $870=(($869) & 255);
   var $871=$i23;
   var $872=$3;
   var $873=(($872+$871)|0);
   HEAP8[($873)]=$870;
   label = 166; break;
  case 166: 
   var $875=$i23;
   var $876=((($875)+(1))|0);
   $i23=$876;
   label = 161; break;
  case 167: 
   label = 168; break;
  case 168: 
   var $879=$2;
   var $880=$_src22;
   var $881=(($880+($879<<3))|0);
   $_src22=$881;
   var $882=$4;
   var $883=$3;
   var $884=(($883+$882)|0);
   $3=$884;
   label = 143; break;
  case 169: 
   label = 170; break;
  case 170: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL15icvCvtTo_8s_C1RPKhiPci6CvSizei($src, $srcstep, $dst, $dststep, $size, $param) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $srctype;
   var $_src;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $i3;
   var $t04;
   var $t15;
   var $t06;
   var $_src7;
   var $i8;
   var $t09;
   var $t110;
   var $t011;
   var $_src12;
   var $i13;
   var $t014;
   var $t115;
   var $t016;
   var $_src17;
   var $i18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $i23;
   var $t024;
   var $t125;
   var $t026;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$param;
   var $6=$5;
   $srctype=$6;
   var $7=$4;
   var $8=(((($7)>>>(0)))&-1);
   $4=$8;
   var $9=$srctype;
   var $10=$9 & 7;
   if ((($10)|(0))==0) {
    label = 2; break;
   }
   else if ((($10)|(0))==2) {
    label = 30; break;
   }
   else if ((($10)|(0))==3) {
    label = 58; break;
   }
   else if ((($10)|(0))==4) {
    label = 86; break;
   }
   else if ((($10)|(0))==5) {
    label = 114; break;
   }
   else if ((($10)|(0))==6) {
    label = 142; break;
   }
   else {
   label = 170; break;
   }
  case 2: 
   var $12=$1;
   $_src=$12;
   var $13=$2;
   var $14=(((($13)>>>(0)))&-1);
   $2=$14;
   label = 3; break;
  case 3: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 29; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $22=$i;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 6; break; } else { label = 20; break; }
  case 6: 
   var $28=$i;
   var $29=$_src;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   $t0=$32;
   var $33=$i;
   var $34=((($33)+(1))|0);
   var $35=$_src;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   $t1=$38;
   var $39=$t0;
   var $40=((($39)+(128))|0);
   var $41=$40 & -256;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $44=$t0;
   var $50 = $44;label = 9; break;
  case 8: 
   var $46=$t0;
   var $47=(($46)|(0)) > 0;
   var $48=$47 ? 127 : -128;
   var $50 = $48;label = 9; break;
  case 9: 
   var $50;
   var $51=(($50) & 255);
   var $52=$i;
   var $53=$3;
   var $54=(($53+$52)|0);
   HEAP8[($54)]=$51;
   var $55=$t1;
   var $56=((($55)+(128))|0);
   var $57=$56 & -256;
   var $58=(($57)|(0))!=0;
   if ($58) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $60=$t1;
   var $66 = $60;label = 12; break;
  case 11: 
   var $62=$t1;
   var $63=(($62)|(0)) > 0;
   var $64=$63 ? 127 : -128;
   var $66 = $64;label = 12; break;
  case 12: 
   var $66;
   var $67=(($66) & 255);
   var $68=$i;
   var $69=((($68)+(1))|0);
   var $70=$3;
   var $71=(($70+$69)|0);
   HEAP8[($71)]=$67;
   var $72=$i;
   var $73=((($72)+(2))|0);
   var $74=$_src;
   var $75=(($74+$73)|0);
   var $76=HEAP8[($75)];
   var $77=(($76)&(255));
   $t0=$77;
   var $78=$i;
   var $79=((($78)+(3))|0);
   var $80=$_src;
   var $81=(($80+$79)|0);
   var $82=HEAP8[($81)];
   var $83=(($82)&(255));
   $t1=$83;
   var $84=$t0;
   var $85=((($84)+(128))|0);
   var $86=$85 & -256;
   var $87=(($86)|(0))!=0;
   if ($87) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $89=$t0;
   var $95 = $89;label = 15; break;
  case 14: 
   var $91=$t0;
   var $92=(($91)|(0)) > 0;
   var $93=$92 ? 127 : -128;
   var $95 = $93;label = 15; break;
  case 15: 
   var $95;
   var $96=(($95) & 255);
   var $97=$i;
   var $98=((($97)+(2))|0);
   var $99=$3;
   var $100=(($99+$98)|0);
   HEAP8[($100)]=$96;
   var $101=$t1;
   var $102=((($101)+(128))|0);
   var $103=$102 & -256;
   var $104=(($103)|(0))!=0;
   if ($104) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $106=$t1;
   var $112 = $106;label = 18; break;
  case 17: 
   var $108=$t1;
   var $109=(($108)|(0)) > 0;
   var $110=$109 ? 127 : -128;
   var $112 = $110;label = 18; break;
  case 18: 
   var $112;
   var $113=(($112) & 255);
   var $114=$i;
   var $115=((($114)+(3))|0);
   var $116=$3;
   var $117=(($116+$115)|0);
   HEAP8[($117)]=$113;
   label = 19; break;
  case 19: 
   var $119=$i;
   var $120=((($119)+(4))|0);
   $i=$120;
   label = 5; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $123=$i;
   var $124=(($size)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($123)|(0)) < (($125)|(0));
   if ($126) { label = 22; break; } else { label = 27; break; }
  case 22: 
   var $128=$i;
   var $129=$_src;
   var $130=(($129+$128)|0);
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   $t01=$132;
   var $133=$t01;
   var $134=((($133)+(128))|0);
   var $135=$134 & -256;
   var $136=(($135)|(0))!=0;
   if ($136) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $138=$t01;
   var $144 = $138;label = 25; break;
  case 24: 
   var $140=$t01;
   var $141=(($140)|(0)) > 0;
   var $142=$141 ? 127 : -128;
   var $144 = $142;label = 25; break;
  case 25: 
   var $144;
   var $145=(($144) & 255);
   var $146=$i;
   var $147=$3;
   var $148=(($147+$146)|0);
   HEAP8[($148)]=$145;
   label = 26; break;
  case 26: 
   var $150=$i;
   var $151=((($150)+(1))|0);
   $i=$151;
   label = 21; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $154=$2;
   var $155=$_src;
   var $156=(($155+$154)|0);
   $_src=$156;
   var $157=$4;
   var $158=$3;
   var $159=(($158+$157)|0);
   $3=$159;
   label = 3; break;
  case 29: 
   label = 170; break;
  case 30: 
   var $162=$1;
   var $163=$162;
   $_src2=$163;
   var $164=$2;
   var $165=((((($164)>>>(0)))/(2))&-1);
   $2=$165;
   label = 31; break;
  case 31: 
   var $167=(($size+4)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=((($168)-(1))|0);
   HEAP32[(($167)>>2)]=$169;
   var $170=(($168)|(0))!=0;
   if ($170) { label = 32; break; } else { label = 57; break; }
  case 32: 
   $i3=0;
   label = 33; break;
  case 33: 
   var $173=$i3;
   var $174=(($size)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=((($175)-(4))|0);
   var $177=(($173)|(0)) <= (($176)|(0));
   if ($177) { label = 34; break; } else { label = 48; break; }
  case 34: 
   var $179=$i3;
   var $180=$_src2;
   var $181=(($180+($179<<1))|0);
   var $182=HEAP16[(($181)>>1)];
   var $183=(($182)&(65535));
   $t04=$183;
   var $184=$i3;
   var $185=((($184)+(1))|0);
   var $186=$_src2;
   var $187=(($186+($185<<1))|0);
   var $188=HEAP16[(($187)>>1)];
   var $189=(($188)&(65535));
   $t15=$189;
   var $190=$t04;
   var $191=((($190)+(128))|0);
   var $192=$191 & -256;
   var $193=(($192)|(0))!=0;
   if ($193) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $195=$t04;
   var $201 = $195;label = 37; break;
  case 36: 
   var $197=$t04;
   var $198=(($197)|(0)) > 0;
   var $199=$198 ? 127 : -128;
   var $201 = $199;label = 37; break;
  case 37: 
   var $201;
   var $202=(($201) & 255);
   var $203=$i3;
   var $204=$3;
   var $205=(($204+$203)|0);
   HEAP8[($205)]=$202;
   var $206=$t15;
   var $207=((($206)+(128))|0);
   var $208=$207 & -256;
   var $209=(($208)|(0))!=0;
   if ($209) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $211=$t15;
   var $217 = $211;label = 40; break;
  case 39: 
   var $213=$t15;
   var $214=(($213)|(0)) > 0;
   var $215=$214 ? 127 : -128;
   var $217 = $215;label = 40; break;
  case 40: 
   var $217;
   var $218=(($217) & 255);
   var $219=$i3;
   var $220=((($219)+(1))|0);
   var $221=$3;
   var $222=(($221+$220)|0);
   HEAP8[($222)]=$218;
   var $223=$i3;
   var $224=((($223)+(2))|0);
   var $225=$_src2;
   var $226=(($225+($224<<1))|0);
   var $227=HEAP16[(($226)>>1)];
   var $228=(($227)&(65535));
   $t04=$228;
   var $229=$i3;
   var $230=((($229)+(3))|0);
   var $231=$_src2;
   var $232=(($231+($230<<1))|0);
   var $233=HEAP16[(($232)>>1)];
   var $234=(($233)&(65535));
   $t15=$234;
   var $235=$t04;
   var $236=((($235)+(128))|0);
   var $237=$236 & -256;
   var $238=(($237)|(0))!=0;
   if ($238) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $240=$t04;
   var $246 = $240;label = 43; break;
  case 42: 
   var $242=$t04;
   var $243=(($242)|(0)) > 0;
   var $244=$243 ? 127 : -128;
   var $246 = $244;label = 43; break;
  case 43: 
   var $246;
   var $247=(($246) & 255);
   var $248=$i3;
   var $249=((($248)+(2))|0);
   var $250=$3;
   var $251=(($250+$249)|0);
   HEAP8[($251)]=$247;
   var $252=$t15;
   var $253=((($252)+(128))|0);
   var $254=$253 & -256;
   var $255=(($254)|(0))!=0;
   if ($255) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $257=$t15;
   var $263 = $257;label = 46; break;
  case 45: 
   var $259=$t15;
   var $260=(($259)|(0)) > 0;
   var $261=$260 ? 127 : -128;
   var $263 = $261;label = 46; break;
  case 46: 
   var $263;
   var $264=(($263) & 255);
   var $265=$i3;
   var $266=((($265)+(3))|0);
   var $267=$3;
   var $268=(($267+$266)|0);
   HEAP8[($268)]=$264;
   label = 47; break;
  case 47: 
   var $270=$i3;
   var $271=((($270)+(4))|0);
   $i3=$271;
   label = 33; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $274=$i3;
   var $275=(($size)|0);
   var $276=HEAP32[(($275)>>2)];
   var $277=(($274)|(0)) < (($276)|(0));
   if ($277) { label = 50; break; } else { label = 55; break; }
  case 50: 
   var $279=$i3;
   var $280=$_src2;
   var $281=(($280+($279<<1))|0);
   var $282=HEAP16[(($281)>>1)];
   var $283=(($282)&(65535));
   $t06=$283;
   var $284=$t06;
   var $285=((($284)+(128))|0);
   var $286=$285 & -256;
   var $287=(($286)|(0))!=0;
   if ($287) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $289=$t06;
   var $295 = $289;label = 53; break;
  case 52: 
   var $291=$t06;
   var $292=(($291)|(0)) > 0;
   var $293=$292 ? 127 : -128;
   var $295 = $293;label = 53; break;
  case 53: 
   var $295;
   var $296=(($295) & 255);
   var $297=$i3;
   var $298=$3;
   var $299=(($298+$297)|0);
   HEAP8[($299)]=$296;
   label = 54; break;
  case 54: 
   var $301=$i3;
   var $302=((($301)+(1))|0);
   $i3=$302;
   label = 49; break;
  case 55: 
   label = 56; break;
  case 56: 
   var $305=$2;
   var $306=$_src2;
   var $307=(($306+($305<<1))|0);
   $_src2=$307;
   var $308=$4;
   var $309=$3;
   var $310=(($309+$308)|0);
   $3=$310;
   label = 31; break;
  case 57: 
   label = 170; break;
  case 58: 
   var $313=$1;
   var $314=$313;
   $_src7=$314;
   var $315=$2;
   var $316=((((($315)>>>(0)))/(2))&-1);
   $2=$316;
   label = 59; break;
  case 59: 
   var $318=(($size+4)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=((($319)-(1))|0);
   HEAP32[(($318)>>2)]=$320;
   var $321=(($319)|(0))!=0;
   if ($321) { label = 60; break; } else { label = 85; break; }
  case 60: 
   $i8=0;
   label = 61; break;
  case 61: 
   var $324=$i8;
   var $325=(($size)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327=((($326)-(4))|0);
   var $328=(($324)|(0)) <= (($327)|(0));
   if ($328) { label = 62; break; } else { label = 76; break; }
  case 62: 
   var $330=$i8;
   var $331=$_src7;
   var $332=(($331+($330<<1))|0);
   var $333=HEAP16[(($332)>>1)];
   var $334=(($333 << 16) >> 16);
   $t09=$334;
   var $335=$i8;
   var $336=((($335)+(1))|0);
   var $337=$_src7;
   var $338=(($337+($336<<1))|0);
   var $339=HEAP16[(($338)>>1)];
   var $340=(($339 << 16) >> 16);
   $t110=$340;
   var $341=$t09;
   var $342=((($341)+(128))|0);
   var $343=$342 & -256;
   var $344=(($343)|(0))!=0;
   if ($344) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $346=$t09;
   var $352 = $346;label = 65; break;
  case 64: 
   var $348=$t09;
   var $349=(($348)|(0)) > 0;
   var $350=$349 ? 127 : -128;
   var $352 = $350;label = 65; break;
  case 65: 
   var $352;
   var $353=(($352) & 255);
   var $354=$i8;
   var $355=$3;
   var $356=(($355+$354)|0);
   HEAP8[($356)]=$353;
   var $357=$t110;
   var $358=((($357)+(128))|0);
   var $359=$358 & -256;
   var $360=(($359)|(0))!=0;
   if ($360) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $362=$t110;
   var $368 = $362;label = 68; break;
  case 67: 
   var $364=$t110;
   var $365=(($364)|(0)) > 0;
   var $366=$365 ? 127 : -128;
   var $368 = $366;label = 68; break;
  case 68: 
   var $368;
   var $369=(($368) & 255);
   var $370=$i8;
   var $371=((($370)+(1))|0);
   var $372=$3;
   var $373=(($372+$371)|0);
   HEAP8[($373)]=$369;
   var $374=$i8;
   var $375=((($374)+(2))|0);
   var $376=$_src7;
   var $377=(($376+($375<<1))|0);
   var $378=HEAP16[(($377)>>1)];
   var $379=(($378 << 16) >> 16);
   $t09=$379;
   var $380=$i8;
   var $381=((($380)+(3))|0);
   var $382=$_src7;
   var $383=(($382+($381<<1))|0);
   var $384=HEAP16[(($383)>>1)];
   var $385=(($384 << 16) >> 16);
   $t110=$385;
   var $386=$t09;
   var $387=((($386)+(128))|0);
   var $388=$387 & -256;
   var $389=(($388)|(0))!=0;
   if ($389) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $391=$t09;
   var $397 = $391;label = 71; break;
  case 70: 
   var $393=$t09;
   var $394=(($393)|(0)) > 0;
   var $395=$394 ? 127 : -128;
   var $397 = $395;label = 71; break;
  case 71: 
   var $397;
   var $398=(($397) & 255);
   var $399=$i8;
   var $400=((($399)+(2))|0);
   var $401=$3;
   var $402=(($401+$400)|0);
   HEAP8[($402)]=$398;
   var $403=$t110;
   var $404=((($403)+(128))|0);
   var $405=$404 & -256;
   var $406=(($405)|(0))!=0;
   if ($406) { label = 73; break; } else { label = 72; break; }
  case 72: 
   var $408=$t110;
   var $414 = $408;label = 74; break;
  case 73: 
   var $410=$t110;
   var $411=(($410)|(0)) > 0;
   var $412=$411 ? 127 : -128;
   var $414 = $412;label = 74; break;
  case 74: 
   var $414;
   var $415=(($414) & 255);
   var $416=$i8;
   var $417=((($416)+(3))|0);
   var $418=$3;
   var $419=(($418+$417)|0);
   HEAP8[($419)]=$415;
   label = 75; break;
  case 75: 
   var $421=$i8;
   var $422=((($421)+(4))|0);
   $i8=$422;
   label = 61; break;
  case 76: 
   label = 77; break;
  case 77: 
   var $425=$i8;
   var $426=(($size)|0);
   var $427=HEAP32[(($426)>>2)];
   var $428=(($425)|(0)) < (($427)|(0));
   if ($428) { label = 78; break; } else { label = 83; break; }
  case 78: 
   var $430=$i8;
   var $431=$_src7;
   var $432=(($431+($430<<1))|0);
   var $433=HEAP16[(($432)>>1)];
   var $434=(($433 << 16) >> 16);
   $t011=$434;
   var $435=$t011;
   var $436=((($435)+(128))|0);
   var $437=$436 & -256;
   var $438=(($437)|(0))!=0;
   if ($438) { label = 80; break; } else { label = 79; break; }
  case 79: 
   var $440=$t011;
   var $446 = $440;label = 81; break;
  case 80: 
   var $442=$t011;
   var $443=(($442)|(0)) > 0;
   var $444=$443 ? 127 : -128;
   var $446 = $444;label = 81; break;
  case 81: 
   var $446;
   var $447=(($446) & 255);
   var $448=$i8;
   var $449=$3;
   var $450=(($449+$448)|0);
   HEAP8[($450)]=$447;
   label = 82; break;
  case 82: 
   var $452=$i8;
   var $453=((($452)+(1))|0);
   $i8=$453;
   label = 77; break;
  case 83: 
   label = 84; break;
  case 84: 
   var $456=$2;
   var $457=$_src7;
   var $458=(($457+($456<<1))|0);
   $_src7=$458;
   var $459=$4;
   var $460=$3;
   var $461=(($460+$459)|0);
   $3=$461;
   label = 59; break;
  case 85: 
   label = 170; break;
  case 86: 
   var $464=$1;
   var $465=$464;
   $_src12=$465;
   var $466=$2;
   var $467=((((($466)>>>(0)))/(4))&-1);
   $2=$467;
   label = 87; break;
  case 87: 
   var $469=(($size+4)|0);
   var $470=HEAP32[(($469)>>2)];
   var $471=((($470)-(1))|0);
   HEAP32[(($469)>>2)]=$471;
   var $472=(($470)|(0))!=0;
   if ($472) { label = 88; break; } else { label = 113; break; }
  case 88: 
   $i13=0;
   label = 89; break;
  case 89: 
   var $475=$i13;
   var $476=(($size)|0);
   var $477=HEAP32[(($476)>>2)];
   var $478=((($477)-(4))|0);
   var $479=(($475)|(0)) <= (($478)|(0));
   if ($479) { label = 90; break; } else { label = 104; break; }
  case 90: 
   var $481=$i13;
   var $482=$_src12;
   var $483=(($482+($481<<2))|0);
   var $484=HEAP32[(($483)>>2)];
   $t014=$484;
   var $485=$i13;
   var $486=((($485)+(1))|0);
   var $487=$_src12;
   var $488=(($487+($486<<2))|0);
   var $489=HEAP32[(($488)>>2)];
   $t115=$489;
   var $490=$t014;
   var $491=((($490)+(128))|0);
   var $492=$491 & -256;
   var $493=(($492)|(0))!=0;
   if ($493) { label = 92; break; } else { label = 91; break; }
  case 91: 
   var $495=$t014;
   var $501 = $495;label = 93; break;
  case 92: 
   var $497=$t014;
   var $498=(($497)|(0)) > 0;
   var $499=$498 ? 127 : -128;
   var $501 = $499;label = 93; break;
  case 93: 
   var $501;
   var $502=(($501) & 255);
   var $503=$i13;
   var $504=$3;
   var $505=(($504+$503)|0);
   HEAP8[($505)]=$502;
   var $506=$t115;
   var $507=((($506)+(128))|0);
   var $508=$507 & -256;
   var $509=(($508)|(0))!=0;
   if ($509) { label = 95; break; } else { label = 94; break; }
  case 94: 
   var $511=$t115;
   var $517 = $511;label = 96; break;
  case 95: 
   var $513=$t115;
   var $514=(($513)|(0)) > 0;
   var $515=$514 ? 127 : -128;
   var $517 = $515;label = 96; break;
  case 96: 
   var $517;
   var $518=(($517) & 255);
   var $519=$i13;
   var $520=((($519)+(1))|0);
   var $521=$3;
   var $522=(($521+$520)|0);
   HEAP8[($522)]=$518;
   var $523=$i13;
   var $524=((($523)+(2))|0);
   var $525=$_src12;
   var $526=(($525+($524<<2))|0);
   var $527=HEAP32[(($526)>>2)];
   $t014=$527;
   var $528=$i13;
   var $529=((($528)+(3))|0);
   var $530=$_src12;
   var $531=(($530+($529<<2))|0);
   var $532=HEAP32[(($531)>>2)];
   $t115=$532;
   var $533=$t014;
   var $534=((($533)+(128))|0);
   var $535=$534 & -256;
   var $536=(($535)|(0))!=0;
   if ($536) { label = 98; break; } else { label = 97; break; }
  case 97: 
   var $538=$t014;
   var $544 = $538;label = 99; break;
  case 98: 
   var $540=$t014;
   var $541=(($540)|(0)) > 0;
   var $542=$541 ? 127 : -128;
   var $544 = $542;label = 99; break;
  case 99: 
   var $544;
   var $545=(($544) & 255);
   var $546=$i13;
   var $547=((($546)+(2))|0);
   var $548=$3;
   var $549=(($548+$547)|0);
   HEAP8[($549)]=$545;
   var $550=$t115;
   var $551=((($550)+(128))|0);
   var $552=$551 & -256;
   var $553=(($552)|(0))!=0;
   if ($553) { label = 101; break; } else { label = 100; break; }
  case 100: 
   var $555=$t115;
   var $561 = $555;label = 102; break;
  case 101: 
   var $557=$t115;
   var $558=(($557)|(0)) > 0;
   var $559=$558 ? 127 : -128;
   var $561 = $559;label = 102; break;
  case 102: 
   var $561;
   var $562=(($561) & 255);
   var $563=$i13;
   var $564=((($563)+(3))|0);
   var $565=$3;
   var $566=(($565+$564)|0);
   HEAP8[($566)]=$562;
   label = 103; break;
  case 103: 
   var $568=$i13;
   var $569=((($568)+(4))|0);
   $i13=$569;
   label = 89; break;
  case 104: 
   label = 105; break;
  case 105: 
   var $572=$i13;
   var $573=(($size)|0);
   var $574=HEAP32[(($573)>>2)];
   var $575=(($572)|(0)) < (($574)|(0));
   if ($575) { label = 106; break; } else { label = 111; break; }
  case 106: 
   var $577=$i13;
   var $578=$_src12;
   var $579=(($578+($577<<2))|0);
   var $580=HEAP32[(($579)>>2)];
   $t016=$580;
   var $581=$t016;
   var $582=((($581)+(128))|0);
   var $583=$582 & -256;
   var $584=(($583)|(0))!=0;
   if ($584) { label = 108; break; } else { label = 107; break; }
  case 107: 
   var $586=$t016;
   var $592 = $586;label = 109; break;
  case 108: 
   var $588=$t016;
   var $589=(($588)|(0)) > 0;
   var $590=$589 ? 127 : -128;
   var $592 = $590;label = 109; break;
  case 109: 
   var $592;
   var $593=(($592) & 255);
   var $594=$i13;
   var $595=$3;
   var $596=(($595+$594)|0);
   HEAP8[($596)]=$593;
   label = 110; break;
  case 110: 
   var $598=$i13;
   var $599=((($598)+(1))|0);
   $i13=$599;
   label = 105; break;
  case 111: 
   label = 112; break;
  case 112: 
   var $602=$2;
   var $603=$_src12;
   var $604=(($603+($602<<2))|0);
   $_src12=$604;
   var $605=$4;
   var $606=$3;
   var $607=(($606+$605)|0);
   $3=$607;
   label = 87; break;
  case 113: 
   label = 170; break;
  case 114: 
   var $610=$1;
   var $611=$610;
   $_src17=$611;
   var $612=$2;
   var $613=((((($612)>>>(0)))/(4))&-1);
   $2=$613;
   label = 115; break;
  case 115: 
   var $615=(($size+4)|0);
   var $616=HEAP32[(($615)>>2)];
   var $617=((($616)-(1))|0);
   HEAP32[(($615)>>2)]=$617;
   var $618=(($616)|(0))!=0;
   if ($618) { label = 116; break; } else { label = 141; break; }
  case 116: 
   $i18=0;
   label = 117; break;
  case 117: 
   var $621=$i18;
   var $622=(($size)|0);
   var $623=HEAP32[(($622)>>2)];
   var $624=((($623)-(4))|0);
   var $625=(($621)|(0)) <= (($624)|(0));
   if ($625) { label = 118; break; } else { label = 132; break; }
  case 118: 
   var $627=$i18;
   var $628=$_src17;
   var $629=(($628+($627<<2))|0);
   var $630=HEAPF32[(($629)>>2)];
   var $631=$630;
   var $632=__Z7cvRoundd($631);
   $t019=$632;
   var $633=$i18;
   var $634=((($633)+(1))|0);
   var $635=$_src17;
   var $636=(($635+($634<<2))|0);
   var $637=HEAPF32[(($636)>>2)];
   var $638=$637;
   var $639=__Z7cvRoundd($638);
   $t120=$639;
   var $640=$t019;
   var $641=((($640)+(128))|0);
   var $642=$641 & -256;
   var $643=(($642)|(0))!=0;
   if ($643) { label = 120; break; } else { label = 119; break; }
  case 119: 
   var $645=$t019;
   var $651 = $645;label = 121; break;
  case 120: 
   var $647=$t019;
   var $648=(($647)|(0)) > 0;
   var $649=$648 ? 127 : -128;
   var $651 = $649;label = 121; break;
  case 121: 
   var $651;
   var $652=(($651) & 255);
   var $653=$i18;
   var $654=$3;
   var $655=(($654+$653)|0);
   HEAP8[($655)]=$652;
   var $656=$t120;
   var $657=((($656)+(128))|0);
   var $658=$657 & -256;
   var $659=(($658)|(0))!=0;
   if ($659) { label = 123; break; } else { label = 122; break; }
  case 122: 
   var $661=$t120;
   var $667 = $661;label = 124; break;
  case 123: 
   var $663=$t120;
   var $664=(($663)|(0)) > 0;
   var $665=$664 ? 127 : -128;
   var $667 = $665;label = 124; break;
  case 124: 
   var $667;
   var $668=(($667) & 255);
   var $669=$i18;
   var $670=((($669)+(1))|0);
   var $671=$3;
   var $672=(($671+$670)|0);
   HEAP8[($672)]=$668;
   var $673=$i18;
   var $674=((($673)+(2))|0);
   var $675=$_src17;
   var $676=(($675+($674<<2))|0);
   var $677=HEAPF32[(($676)>>2)];
   var $678=$677;
   var $679=__Z7cvRoundd($678);
   $t019=$679;
   var $680=$i18;
   var $681=((($680)+(3))|0);
   var $682=$_src17;
   var $683=(($682+($681<<2))|0);
   var $684=HEAPF32[(($683)>>2)];
   var $685=$684;
   var $686=__Z7cvRoundd($685);
   $t120=$686;
   var $687=$t019;
   var $688=((($687)+(128))|0);
   var $689=$688 & -256;
   var $690=(($689)|(0))!=0;
   if ($690) { label = 126; break; } else { label = 125; break; }
  case 125: 
   var $692=$t019;
   var $698 = $692;label = 127; break;
  case 126: 
   var $694=$t019;
   var $695=(($694)|(0)) > 0;
   var $696=$695 ? 127 : -128;
   var $698 = $696;label = 127; break;
  case 127: 
   var $698;
   var $699=(($698) & 255);
   var $700=$i18;
   var $701=((($700)+(2))|0);
   var $702=$3;
   var $703=(($702+$701)|0);
   HEAP8[($703)]=$699;
   var $704=$t120;
   var $705=((($704)+(128))|0);
   var $706=$705 & -256;
   var $707=(($706)|(0))!=0;
   if ($707) { label = 129; break; } else { label = 128; break; }
  case 128: 
   var $709=$t120;
   var $715 = $709;label = 130; break;
  case 129: 
   var $711=$t120;
   var $712=(($711)|(0)) > 0;
   var $713=$712 ? 127 : -128;
   var $715 = $713;label = 130; break;
  case 130: 
   var $715;
   var $716=(($715) & 255);
   var $717=$i18;
   var $718=((($717)+(3))|0);
   var $719=$3;
   var $720=(($719+$718)|0);
   HEAP8[($720)]=$716;
   label = 131; break;
  case 131: 
   var $722=$i18;
   var $723=((($722)+(4))|0);
   $i18=$723;
   label = 117; break;
  case 132: 
   label = 133; break;
  case 133: 
   var $726=$i18;
   var $727=(($size)|0);
   var $728=HEAP32[(($727)>>2)];
   var $729=(($726)|(0)) < (($728)|(0));
   if ($729) { label = 134; break; } else { label = 139; break; }
  case 134: 
   var $731=$i18;
   var $732=$_src17;
   var $733=(($732+($731<<2))|0);
   var $734=HEAPF32[(($733)>>2)];
   var $735=$734;
   var $736=__Z7cvRoundd($735);
   $t021=$736;
   var $737=$t021;
   var $738=((($737)+(128))|0);
   var $739=$738 & -256;
   var $740=(($739)|(0))!=0;
   if ($740) { label = 136; break; } else { label = 135; break; }
  case 135: 
   var $742=$t021;
   var $748 = $742;label = 137; break;
  case 136: 
   var $744=$t021;
   var $745=(($744)|(0)) > 0;
   var $746=$745 ? 127 : -128;
   var $748 = $746;label = 137; break;
  case 137: 
   var $748;
   var $749=(($748) & 255);
   var $750=$i18;
   var $751=$3;
   var $752=(($751+$750)|0);
   HEAP8[($752)]=$749;
   label = 138; break;
  case 138: 
   var $754=$i18;
   var $755=((($754)+(1))|0);
   $i18=$755;
   label = 133; break;
  case 139: 
   label = 140; break;
  case 140: 
   var $758=$2;
   var $759=$_src17;
   var $760=(($759+($758<<2))|0);
   $_src17=$760;
   var $761=$4;
   var $762=$3;
   var $763=(($762+$761)|0);
   $3=$763;
   label = 115; break;
  case 141: 
   label = 170; break;
  case 142: 
   var $766=$1;
   var $767=$766;
   $_src22=$767;
   var $768=$2;
   var $769=((((($768)>>>(0)))/(8))&-1);
   $2=$769;
   label = 143; break;
  case 143: 
   var $771=(($size+4)|0);
   var $772=HEAP32[(($771)>>2)];
   var $773=((($772)-(1))|0);
   HEAP32[(($771)>>2)]=$773;
   var $774=(($772)|(0))!=0;
   if ($774) { label = 144; break; } else { label = 169; break; }
  case 144: 
   $i23=0;
   label = 145; break;
  case 145: 
   var $777=$i23;
   var $778=(($size)|0);
   var $779=HEAP32[(($778)>>2)];
   var $780=((($779)-(4))|0);
   var $781=(($777)|(0)) <= (($780)|(0));
   if ($781) { label = 146; break; } else { label = 160; break; }
  case 146: 
   var $783=$i23;
   var $784=$_src22;
   var $785=(($784+($783<<3))|0);
   var $786=HEAPF64[(($785)>>3)];
   var $787=__Z7cvRoundd($786);
   $t024=$787;
   var $788=$i23;
   var $789=((($788)+(1))|0);
   var $790=$_src22;
   var $791=(($790+($789<<3))|0);
   var $792=HEAPF64[(($791)>>3)];
   var $793=__Z7cvRoundd($792);
   $t125=$793;
   var $794=$t024;
   var $795=((($794)+(128))|0);
   var $796=$795 & -256;
   var $797=(($796)|(0))!=0;
   if ($797) { label = 148; break; } else { label = 147; break; }
  case 147: 
   var $799=$t024;
   var $805 = $799;label = 149; break;
  case 148: 
   var $801=$t024;
   var $802=(($801)|(0)) > 0;
   var $803=$802 ? 127 : -128;
   var $805 = $803;label = 149; break;
  case 149: 
   var $805;
   var $806=(($805) & 255);
   var $807=$i23;
   var $808=$3;
   var $809=(($808+$807)|0);
   HEAP8[($809)]=$806;
   var $810=$t125;
   var $811=((($810)+(128))|0);
   var $812=$811 & -256;
   var $813=(($812)|(0))!=0;
   if ($813) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $815=$t125;
   var $821 = $815;label = 152; break;
  case 151: 
   var $817=$t125;
   var $818=(($817)|(0)) > 0;
   var $819=$818 ? 127 : -128;
   var $821 = $819;label = 152; break;
  case 152: 
   var $821;
   var $822=(($821) & 255);
   var $823=$i23;
   var $824=((($823)+(1))|0);
   var $825=$3;
   var $826=(($825+$824)|0);
   HEAP8[($826)]=$822;
   var $827=$i23;
   var $828=((($827)+(2))|0);
   var $829=$_src22;
   var $830=(($829+($828<<3))|0);
   var $831=HEAPF64[(($830)>>3)];
   var $832=__Z7cvRoundd($831);
   $t024=$832;
   var $833=$i23;
   var $834=((($833)+(3))|0);
   var $835=$_src22;
   var $836=(($835+($834<<3))|0);
   var $837=HEAPF64[(($836)>>3)];
   var $838=__Z7cvRoundd($837);
   $t125=$838;
   var $839=$t024;
   var $840=((($839)+(128))|0);
   var $841=$840 & -256;
   var $842=(($841)|(0))!=0;
   if ($842) { label = 154; break; } else { label = 153; break; }
  case 153: 
   var $844=$t024;
   var $850 = $844;label = 155; break;
  case 154: 
   var $846=$t024;
   var $847=(($846)|(0)) > 0;
   var $848=$847 ? 127 : -128;
   var $850 = $848;label = 155; break;
  case 155: 
   var $850;
   var $851=(($850) & 255);
   var $852=$i23;
   var $853=((($852)+(2))|0);
   var $854=$3;
   var $855=(($854+$853)|0);
   HEAP8[($855)]=$851;
   var $856=$t125;
   var $857=((($856)+(128))|0);
   var $858=$857 & -256;
   var $859=(($858)|(0))!=0;
   if ($859) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $861=$t125;
   var $867 = $861;label = 158; break;
  case 157: 
   var $863=$t125;
   var $864=(($863)|(0)) > 0;
   var $865=$864 ? 127 : -128;
   var $867 = $865;label = 158; break;
  case 158: 
   var $867;
   var $868=(($867) & 255);
   var $869=$i23;
   var $870=((($869)+(3))|0);
   var $871=$3;
   var $872=(($871+$870)|0);
   HEAP8[($872)]=$868;
   label = 159; break;
  case 159: 
   var $874=$i23;
   var $875=((($874)+(4))|0);
   $i23=$875;
   label = 145; break;
  case 160: 
   label = 161; break;
  case 161: 
   var $878=$i23;
   var $879=(($size)|0);
   var $880=HEAP32[(($879)>>2)];
   var $881=(($878)|(0)) < (($880)|(0));
   if ($881) { label = 162; break; } else { label = 167; break; }
  case 162: 
   var $883=$i23;
   var $884=$_src22;
   var $885=(($884+($883<<3))|0);
   var $886=HEAPF64[(($885)>>3)];
   var $887=__Z7cvRoundd($886);
   $t026=$887;
   var $888=$t026;
   var $889=((($888)+(128))|0);
   var $890=$889 & -256;
   var $891=(($890)|(0))!=0;
   if ($891) { label = 164; break; } else { label = 163; break; }
  case 163: 
   var $893=$t026;
   var $899 = $893;label = 165; break;
  case 164: 
   var $895=$t026;
   var $896=(($895)|(0)) > 0;
   var $897=$896 ? 127 : -128;
   var $899 = $897;label = 165; break;
  case 165: 
   var $899;
   var $900=(($899) & 255);
   var $901=$i23;
   var $902=$3;
   var $903=(($902+$901)|0);
   HEAP8[($903)]=$900;
   label = 166; break;
  case 166: 
   var $905=$i23;
   var $906=((($905)+(1))|0);
   $i23=$906;
   label = 161; break;
  case 167: 
   label = 168; break;
  case 168: 
   var $909=$2;
   var $910=$_src22;
   var $911=(($910+($909<<3))|0);
   $_src22=$911;
   var $912=$4;
   var $913=$3;
   var $914=(($913+$912)|0);
   $3=$914;
   label = 143; break;
  case 169: 
   label = 170; break;
  case 170: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvCvtTo_16u_C1RPKhiPti6CvSizei($src, $srcstep, $dst, $dststep, $size, $param) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $srctype;
   var $_src;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $i3;
   var $t04;
   var $t15;
   var $t06;
   var $_src7;
   var $i8;
   var $t09;
   var $t110;
   var $t011;
   var $_src12;
   var $i13;
   var $t014;
   var $t115;
   var $t016;
   var $_src17;
   var $i18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $i23;
   var $t024;
   var $t125;
   var $t026;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$param;
   var $6=$5;
   $srctype=$6;
   var $7=$4;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $4=$8;
   var $9=$srctype;
   var $10=$9 & 7;
   if ((($10)|(0))==0) {
    label = 2; break;
   }
   else if ((($10)|(0))==1) {
    label = 30; break;
   }
   else if ((($10)|(0))==3) {
    label = 58; break;
   }
   else if ((($10)|(0))==4) {
    label = 86; break;
   }
   else if ((($10)|(0))==5) {
    label = 114; break;
   }
   else if ((($10)|(0))==6) {
    label = 142; break;
   }
   else {
   label = 170; break;
   }
  case 2: 
   var $12=$1;
   $_src=$12;
   var $13=$2;
   var $14=(((($13)>>>(0)))&-1);
   $2=$14;
   label = 3; break;
  case 3: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 29; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $22=$i;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 6; break; } else { label = 20; break; }
  case 6: 
   var $28=$i;
   var $29=$_src;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   $t0=$32;
   var $33=$i;
   var $34=((($33)+(1))|0);
   var $35=$_src;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   $t1=$38;
   var $39=$t0;
   var $40=$39 & -65536;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $43=$t0;
   var $49 = $43;label = 9; break;
  case 8: 
   var $45=$t0;
   var $46=(($45)|(0)) > 0;
   var $47=$46 ? 65535 : 0;
   var $49 = $47;label = 9; break;
  case 9: 
   var $49;
   var $50=(($49) & 65535);
   var $51=$i;
   var $52=$3;
   var $53=(($52+($51<<1))|0);
   HEAP16[(($53)>>1)]=$50;
   var $54=$t1;
   var $55=$54 & -65536;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $58=$t1;
   var $64 = $58;label = 12; break;
  case 11: 
   var $60=$t1;
   var $61=(($60)|(0)) > 0;
   var $62=$61 ? 65535 : 0;
   var $64 = $62;label = 12; break;
  case 12: 
   var $64;
   var $65=(($64) & 65535);
   var $66=$i;
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+($67<<1))|0);
   HEAP16[(($69)>>1)]=$65;
   var $70=$i;
   var $71=((($70)+(2))|0);
   var $72=$_src;
   var $73=(($72+$71)|0);
   var $74=HEAP8[($73)];
   var $75=(($74)&(255));
   $t0=$75;
   var $76=$i;
   var $77=((($76)+(3))|0);
   var $78=$_src;
   var $79=(($78+$77)|0);
   var $80=HEAP8[($79)];
   var $81=(($80)&(255));
   $t1=$81;
   var $82=$t0;
   var $83=$82 & -65536;
   var $84=(($83)|(0))!=0;
   if ($84) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $86=$t0;
   var $92 = $86;label = 15; break;
  case 14: 
   var $88=$t0;
   var $89=(($88)|(0)) > 0;
   var $90=$89 ? 65535 : 0;
   var $92 = $90;label = 15; break;
  case 15: 
   var $92;
   var $93=(($92) & 65535);
   var $94=$i;
   var $95=((($94)+(2))|0);
   var $96=$3;
   var $97=(($96+($95<<1))|0);
   HEAP16[(($97)>>1)]=$93;
   var $98=$t1;
   var $99=$98 & -65536;
   var $100=(($99)|(0))!=0;
   if ($100) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $102=$t1;
   var $108 = $102;label = 18; break;
  case 17: 
   var $104=$t1;
   var $105=(($104)|(0)) > 0;
   var $106=$105 ? 65535 : 0;
   var $108 = $106;label = 18; break;
  case 18: 
   var $108;
   var $109=(($108) & 65535);
   var $110=$i;
   var $111=((($110)+(3))|0);
   var $112=$3;
   var $113=(($112+($111<<1))|0);
   HEAP16[(($113)>>1)]=$109;
   label = 19; break;
  case 19: 
   var $115=$i;
   var $116=((($115)+(4))|0);
   $i=$116;
   label = 5; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $119=$i;
   var $120=(($size)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($119)|(0)) < (($121)|(0));
   if ($122) { label = 22; break; } else { label = 27; break; }
  case 22: 
   var $124=$i;
   var $125=$_src;
   var $126=(($125+$124)|0);
   var $127=HEAP8[($126)];
   var $128=(($127)&(255));
   $t01=$128;
   var $129=$t01;
   var $130=$129 & -65536;
   var $131=(($130)|(0))!=0;
   if ($131) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $133=$t01;
   var $139 = $133;label = 25; break;
  case 24: 
   var $135=$t01;
   var $136=(($135)|(0)) > 0;
   var $137=$136 ? 65535 : 0;
   var $139 = $137;label = 25; break;
  case 25: 
   var $139;
   var $140=(($139) & 65535);
   var $141=$i;
   var $142=$3;
   var $143=(($142+($141<<1))|0);
   HEAP16[(($143)>>1)]=$140;
   label = 26; break;
  case 26: 
   var $145=$i;
   var $146=((($145)+(1))|0);
   $i=$146;
   label = 21; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $149=$2;
   var $150=$_src;
   var $151=(($150+$149)|0);
   $_src=$151;
   var $152=$4;
   var $153=$3;
   var $154=(($153+($152<<1))|0);
   $3=$154;
   label = 3; break;
  case 29: 
   label = 170; break;
  case 30: 
   var $157=$1;
   $_src2=$157;
   var $158=$2;
   var $159=(((($158)>>>(0)))&-1);
   $2=$159;
   label = 31; break;
  case 31: 
   var $161=(($size+4)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=((($162)-(1))|0);
   HEAP32[(($161)>>2)]=$163;
   var $164=(($162)|(0))!=0;
   if ($164) { label = 32; break; } else { label = 57; break; }
  case 32: 
   $i3=0;
   label = 33; break;
  case 33: 
   var $167=$i3;
   var $168=(($size)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=((($169)-(4))|0);
   var $171=(($167)|(0)) <= (($170)|(0));
   if ($171) { label = 34; break; } else { label = 48; break; }
  case 34: 
   var $173=$i3;
   var $174=$_src2;
   var $175=(($174+$173)|0);
   var $176=HEAP8[($175)];
   var $177=(($176 << 24) >> 24);
   $t04=$177;
   var $178=$i3;
   var $179=((($178)+(1))|0);
   var $180=$_src2;
   var $181=(($180+$179)|0);
   var $182=HEAP8[($181)];
   var $183=(($182 << 24) >> 24);
   $t15=$183;
   var $184=$t04;
   var $185=$184 & -65536;
   var $186=(($185)|(0))!=0;
   if ($186) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $188=$t04;
   var $194 = $188;label = 37; break;
  case 36: 
   var $190=$t04;
   var $191=(($190)|(0)) > 0;
   var $192=$191 ? 65535 : 0;
   var $194 = $192;label = 37; break;
  case 37: 
   var $194;
   var $195=(($194) & 65535);
   var $196=$i3;
   var $197=$3;
   var $198=(($197+($196<<1))|0);
   HEAP16[(($198)>>1)]=$195;
   var $199=$t15;
   var $200=$199 & -65536;
   var $201=(($200)|(0))!=0;
   if ($201) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $203=$t15;
   var $209 = $203;label = 40; break;
  case 39: 
   var $205=$t15;
   var $206=(($205)|(0)) > 0;
   var $207=$206 ? 65535 : 0;
   var $209 = $207;label = 40; break;
  case 40: 
   var $209;
   var $210=(($209) & 65535);
   var $211=$i3;
   var $212=((($211)+(1))|0);
   var $213=$3;
   var $214=(($213+($212<<1))|0);
   HEAP16[(($214)>>1)]=$210;
   var $215=$i3;
   var $216=((($215)+(2))|0);
   var $217=$_src2;
   var $218=(($217+$216)|0);
   var $219=HEAP8[($218)];
   var $220=(($219 << 24) >> 24);
   $t04=$220;
   var $221=$i3;
   var $222=((($221)+(3))|0);
   var $223=$_src2;
   var $224=(($223+$222)|0);
   var $225=HEAP8[($224)];
   var $226=(($225 << 24) >> 24);
   $t15=$226;
   var $227=$t04;
   var $228=$227 & -65536;
   var $229=(($228)|(0))!=0;
   if ($229) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $231=$t04;
   var $237 = $231;label = 43; break;
  case 42: 
   var $233=$t04;
   var $234=(($233)|(0)) > 0;
   var $235=$234 ? 65535 : 0;
   var $237 = $235;label = 43; break;
  case 43: 
   var $237;
   var $238=(($237) & 65535);
   var $239=$i3;
   var $240=((($239)+(2))|0);
   var $241=$3;
   var $242=(($241+($240<<1))|0);
   HEAP16[(($242)>>1)]=$238;
   var $243=$t15;
   var $244=$243 & -65536;
   var $245=(($244)|(0))!=0;
   if ($245) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $247=$t15;
   var $253 = $247;label = 46; break;
  case 45: 
   var $249=$t15;
   var $250=(($249)|(0)) > 0;
   var $251=$250 ? 65535 : 0;
   var $253 = $251;label = 46; break;
  case 46: 
   var $253;
   var $254=(($253) & 65535);
   var $255=$i3;
   var $256=((($255)+(3))|0);
   var $257=$3;
   var $258=(($257+($256<<1))|0);
   HEAP16[(($258)>>1)]=$254;
   label = 47; break;
  case 47: 
   var $260=$i3;
   var $261=((($260)+(4))|0);
   $i3=$261;
   label = 33; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $264=$i3;
   var $265=(($size)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=(($264)|(0)) < (($266)|(0));
   if ($267) { label = 50; break; } else { label = 55; break; }
  case 50: 
   var $269=$i3;
   var $270=$_src2;
   var $271=(($270+$269)|0);
   var $272=HEAP8[($271)];
   var $273=(($272 << 24) >> 24);
   $t06=$273;
   var $274=$t06;
   var $275=$274 & -65536;
   var $276=(($275)|(0))!=0;
   if ($276) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $278=$t06;
   var $284 = $278;label = 53; break;
  case 52: 
   var $280=$t06;
   var $281=(($280)|(0)) > 0;
   var $282=$281 ? 65535 : 0;
   var $284 = $282;label = 53; break;
  case 53: 
   var $284;
   var $285=(($284) & 65535);
   var $286=$i3;
   var $287=$3;
   var $288=(($287+($286<<1))|0);
   HEAP16[(($288)>>1)]=$285;
   label = 54; break;
  case 54: 
   var $290=$i3;
   var $291=((($290)+(1))|0);
   $i3=$291;
   label = 49; break;
  case 55: 
   label = 56; break;
  case 56: 
   var $294=$2;
   var $295=$_src2;
   var $296=(($295+$294)|0);
   $_src2=$296;
   var $297=$4;
   var $298=$3;
   var $299=(($298+($297<<1))|0);
   $3=$299;
   label = 31; break;
  case 57: 
   label = 170; break;
  case 58: 
   var $302=$1;
   var $303=$302;
   $_src7=$303;
   var $304=$2;
   var $305=((((($304)>>>(0)))/(2))&-1);
   $2=$305;
   label = 59; break;
  case 59: 
   var $307=(($size+4)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=((($308)-(1))|0);
   HEAP32[(($307)>>2)]=$309;
   var $310=(($308)|(0))!=0;
   if ($310) { label = 60; break; } else { label = 85; break; }
  case 60: 
   $i8=0;
   label = 61; break;
  case 61: 
   var $313=$i8;
   var $314=(($size)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=((($315)-(4))|0);
   var $317=(($313)|(0)) <= (($316)|(0));
   if ($317) { label = 62; break; } else { label = 76; break; }
  case 62: 
   var $319=$i8;
   var $320=$_src7;
   var $321=(($320+($319<<1))|0);
   var $322=HEAP16[(($321)>>1)];
   var $323=(($322 << 16) >> 16);
   $t09=$323;
   var $324=$i8;
   var $325=((($324)+(1))|0);
   var $326=$_src7;
   var $327=(($326+($325<<1))|0);
   var $328=HEAP16[(($327)>>1)];
   var $329=(($328 << 16) >> 16);
   $t110=$329;
   var $330=$t09;
   var $331=$330 & -65536;
   var $332=(($331)|(0))!=0;
   if ($332) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $334=$t09;
   var $340 = $334;label = 65; break;
  case 64: 
   var $336=$t09;
   var $337=(($336)|(0)) > 0;
   var $338=$337 ? 65535 : 0;
   var $340 = $338;label = 65; break;
  case 65: 
   var $340;
   var $341=(($340) & 65535);
   var $342=$i8;
   var $343=$3;
   var $344=(($343+($342<<1))|0);
   HEAP16[(($344)>>1)]=$341;
   var $345=$t110;
   var $346=$345 & -65536;
   var $347=(($346)|(0))!=0;
   if ($347) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $349=$t110;
   var $355 = $349;label = 68; break;
  case 67: 
   var $351=$t110;
   var $352=(($351)|(0)) > 0;
   var $353=$352 ? 65535 : 0;
   var $355 = $353;label = 68; break;
  case 68: 
   var $355;
   var $356=(($355) & 65535);
   var $357=$i8;
   var $358=((($357)+(1))|0);
   var $359=$3;
   var $360=(($359+($358<<1))|0);
   HEAP16[(($360)>>1)]=$356;
   var $361=$i8;
   var $362=((($361)+(2))|0);
   var $363=$_src7;
   var $364=(($363+($362<<1))|0);
   var $365=HEAP16[(($364)>>1)];
   var $366=(($365 << 16) >> 16);
   $t09=$366;
   var $367=$i8;
   var $368=((($367)+(3))|0);
   var $369=$_src7;
   var $370=(($369+($368<<1))|0);
   var $371=HEAP16[(($370)>>1)];
   var $372=(($371 << 16) >> 16);
   $t110=$372;
   var $373=$t09;
   var $374=$373 & -65536;
   var $375=(($374)|(0))!=0;
   if ($375) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $377=$t09;
   var $383 = $377;label = 71; break;
  case 70: 
   var $379=$t09;
   var $380=(($379)|(0)) > 0;
   var $381=$380 ? 65535 : 0;
   var $383 = $381;label = 71; break;
  case 71: 
   var $383;
   var $384=(($383) & 65535);
   var $385=$i8;
   var $386=((($385)+(2))|0);
   var $387=$3;
   var $388=(($387+($386<<1))|0);
   HEAP16[(($388)>>1)]=$384;
   var $389=$t110;
   var $390=$389 & -65536;
   var $391=(($390)|(0))!=0;
   if ($391) { label = 73; break; } else { label = 72; break; }
  case 72: 
   var $393=$t110;
   var $399 = $393;label = 74; break;
  case 73: 
   var $395=$t110;
   var $396=(($395)|(0)) > 0;
   var $397=$396 ? 65535 : 0;
   var $399 = $397;label = 74; break;
  case 74: 
   var $399;
   var $400=(($399) & 65535);
   var $401=$i8;
   var $402=((($401)+(3))|0);
   var $403=$3;
   var $404=(($403+($402<<1))|0);
   HEAP16[(($404)>>1)]=$400;
   label = 75; break;
  case 75: 
   var $406=$i8;
   var $407=((($406)+(4))|0);
   $i8=$407;
   label = 61; break;
  case 76: 
   label = 77; break;
  case 77: 
   var $410=$i8;
   var $411=(($size)|0);
   var $412=HEAP32[(($411)>>2)];
   var $413=(($410)|(0)) < (($412)|(0));
   if ($413) { label = 78; break; } else { label = 83; break; }
  case 78: 
   var $415=$i8;
   var $416=$_src7;
   var $417=(($416+($415<<1))|0);
   var $418=HEAP16[(($417)>>1)];
   var $419=(($418 << 16) >> 16);
   $t011=$419;
   var $420=$t011;
   var $421=$420 & -65536;
   var $422=(($421)|(0))!=0;
   if ($422) { label = 80; break; } else { label = 79; break; }
  case 79: 
   var $424=$t011;
   var $430 = $424;label = 81; break;
  case 80: 
   var $426=$t011;
   var $427=(($426)|(0)) > 0;
   var $428=$427 ? 65535 : 0;
   var $430 = $428;label = 81; break;
  case 81: 
   var $430;
   var $431=(($430) & 65535);
   var $432=$i8;
   var $433=$3;
   var $434=(($433+($432<<1))|0);
   HEAP16[(($434)>>1)]=$431;
   label = 82; break;
  case 82: 
   var $436=$i8;
   var $437=((($436)+(1))|0);
   $i8=$437;
   label = 77; break;
  case 83: 
   label = 84; break;
  case 84: 
   var $440=$2;
   var $441=$_src7;
   var $442=(($441+($440<<1))|0);
   $_src7=$442;
   var $443=$4;
   var $444=$3;
   var $445=(($444+($443<<1))|0);
   $3=$445;
   label = 59; break;
  case 85: 
   label = 170; break;
  case 86: 
   var $448=$1;
   var $449=$448;
   $_src12=$449;
   var $450=$2;
   var $451=((((($450)>>>(0)))/(4))&-1);
   $2=$451;
   label = 87; break;
  case 87: 
   var $453=(($size+4)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455=((($454)-(1))|0);
   HEAP32[(($453)>>2)]=$455;
   var $456=(($454)|(0))!=0;
   if ($456) { label = 88; break; } else { label = 113; break; }
  case 88: 
   $i13=0;
   label = 89; break;
  case 89: 
   var $459=$i13;
   var $460=(($size)|0);
   var $461=HEAP32[(($460)>>2)];
   var $462=((($461)-(4))|0);
   var $463=(($459)|(0)) <= (($462)|(0));
   if ($463) { label = 90; break; } else { label = 104; break; }
  case 90: 
   var $465=$i13;
   var $466=$_src12;
   var $467=(($466+($465<<2))|0);
   var $468=HEAP32[(($467)>>2)];
   $t014=$468;
   var $469=$i13;
   var $470=((($469)+(1))|0);
   var $471=$_src12;
   var $472=(($471+($470<<2))|0);
   var $473=HEAP32[(($472)>>2)];
   $t115=$473;
   var $474=$t014;
   var $475=$474 & -65536;
   var $476=(($475)|(0))!=0;
   if ($476) { label = 92; break; } else { label = 91; break; }
  case 91: 
   var $478=$t014;
   var $484 = $478;label = 93; break;
  case 92: 
   var $480=$t014;
   var $481=(($480)|(0)) > 0;
   var $482=$481 ? 65535 : 0;
   var $484 = $482;label = 93; break;
  case 93: 
   var $484;
   var $485=(($484) & 65535);
   var $486=$i13;
   var $487=$3;
   var $488=(($487+($486<<1))|0);
   HEAP16[(($488)>>1)]=$485;
   var $489=$t115;
   var $490=$489 & -65536;
   var $491=(($490)|(0))!=0;
   if ($491) { label = 95; break; } else { label = 94; break; }
  case 94: 
   var $493=$t115;
   var $499 = $493;label = 96; break;
  case 95: 
   var $495=$t115;
   var $496=(($495)|(0)) > 0;
   var $497=$496 ? 65535 : 0;
   var $499 = $497;label = 96; break;
  case 96: 
   var $499;
   var $500=(($499) & 65535);
   var $501=$i13;
   var $502=((($501)+(1))|0);
   var $503=$3;
   var $504=(($503+($502<<1))|0);
   HEAP16[(($504)>>1)]=$500;
   var $505=$i13;
   var $506=((($505)+(2))|0);
   var $507=$_src12;
   var $508=(($507+($506<<2))|0);
   var $509=HEAP32[(($508)>>2)];
   $t014=$509;
   var $510=$i13;
   var $511=((($510)+(3))|0);
   var $512=$_src12;
   var $513=(($512+($511<<2))|0);
   var $514=HEAP32[(($513)>>2)];
   $t115=$514;
   var $515=$t014;
   var $516=$515 & -65536;
   var $517=(($516)|(0))!=0;
   if ($517) { label = 98; break; } else { label = 97; break; }
  case 97: 
   var $519=$t014;
   var $525 = $519;label = 99; break;
  case 98: 
   var $521=$t014;
   var $522=(($521)|(0)) > 0;
   var $523=$522 ? 65535 : 0;
   var $525 = $523;label = 99; break;
  case 99: 
   var $525;
   var $526=(($525) & 65535);
   var $527=$i13;
   var $528=((($527)+(2))|0);
   var $529=$3;
   var $530=(($529+($528<<1))|0);
   HEAP16[(($530)>>1)]=$526;
   var $531=$t115;
   var $532=$531 & -65536;
   var $533=(($532)|(0))!=0;
   if ($533) { label = 101; break; } else { label = 100; break; }
  case 100: 
   var $535=$t115;
   var $541 = $535;label = 102; break;
  case 101: 
   var $537=$t115;
   var $538=(($537)|(0)) > 0;
   var $539=$538 ? 65535 : 0;
   var $541 = $539;label = 102; break;
  case 102: 
   var $541;
   var $542=(($541) & 65535);
   var $543=$i13;
   var $544=((($543)+(3))|0);
   var $545=$3;
   var $546=(($545+($544<<1))|0);
   HEAP16[(($546)>>1)]=$542;
   label = 103; break;
  case 103: 
   var $548=$i13;
   var $549=((($548)+(4))|0);
   $i13=$549;
   label = 89; break;
  case 104: 
   label = 105; break;
  case 105: 
   var $552=$i13;
   var $553=(($size)|0);
   var $554=HEAP32[(($553)>>2)];
   var $555=(($552)|(0)) < (($554)|(0));
   if ($555) { label = 106; break; } else { label = 111; break; }
  case 106: 
   var $557=$i13;
   var $558=$_src12;
   var $559=(($558+($557<<2))|0);
   var $560=HEAP32[(($559)>>2)];
   $t016=$560;
   var $561=$t016;
   var $562=$561 & -65536;
   var $563=(($562)|(0))!=0;
   if ($563) { label = 108; break; } else { label = 107; break; }
  case 107: 
   var $565=$t016;
   var $571 = $565;label = 109; break;
  case 108: 
   var $567=$t016;
   var $568=(($567)|(0)) > 0;
   var $569=$568 ? 65535 : 0;
   var $571 = $569;label = 109; break;
  case 109: 
   var $571;
   var $572=(($571) & 65535);
   var $573=$i13;
   var $574=$3;
   var $575=(($574+($573<<1))|0);
   HEAP16[(($575)>>1)]=$572;
   label = 110; break;
  case 110: 
   var $577=$i13;
   var $578=((($577)+(1))|0);
   $i13=$578;
   label = 105; break;
  case 111: 
   label = 112; break;
  case 112: 
   var $581=$2;
   var $582=$_src12;
   var $583=(($582+($581<<2))|0);
   $_src12=$583;
   var $584=$4;
   var $585=$3;
   var $586=(($585+($584<<1))|0);
   $3=$586;
   label = 87; break;
  case 113: 
   label = 170; break;
  case 114: 
   var $589=$1;
   var $590=$589;
   $_src17=$590;
   var $591=$2;
   var $592=((((($591)>>>(0)))/(4))&-1);
   $2=$592;
   label = 115; break;
  case 115: 
   var $594=(($size+4)|0);
   var $595=HEAP32[(($594)>>2)];
   var $596=((($595)-(1))|0);
   HEAP32[(($594)>>2)]=$596;
   var $597=(($595)|(0))!=0;
   if ($597) { label = 116; break; } else { label = 141; break; }
  case 116: 
   $i18=0;
   label = 117; break;
  case 117: 
   var $600=$i18;
   var $601=(($size)|0);
   var $602=HEAP32[(($601)>>2)];
   var $603=((($602)-(4))|0);
   var $604=(($600)|(0)) <= (($603)|(0));
   if ($604) { label = 118; break; } else { label = 132; break; }
  case 118: 
   var $606=$i18;
   var $607=$_src17;
   var $608=(($607+($606<<2))|0);
   var $609=HEAPF32[(($608)>>2)];
   var $610=$609;
   var $611=__Z7cvRoundd($610);
   $t019=$611;
   var $612=$i18;
   var $613=((($612)+(1))|0);
   var $614=$_src17;
   var $615=(($614+($613<<2))|0);
   var $616=HEAPF32[(($615)>>2)];
   var $617=$616;
   var $618=__Z7cvRoundd($617);
   $t120=$618;
   var $619=$t019;
   var $620=$619 & -65536;
   var $621=(($620)|(0))!=0;
   if ($621) { label = 120; break; } else { label = 119; break; }
  case 119: 
   var $623=$t019;
   var $629 = $623;label = 121; break;
  case 120: 
   var $625=$t019;
   var $626=(($625)|(0)) > 0;
   var $627=$626 ? 65535 : 0;
   var $629 = $627;label = 121; break;
  case 121: 
   var $629;
   var $630=(($629) & 65535);
   var $631=$i18;
   var $632=$3;
   var $633=(($632+($631<<1))|0);
   HEAP16[(($633)>>1)]=$630;
   var $634=$t120;
   var $635=$634 & -65536;
   var $636=(($635)|(0))!=0;
   if ($636) { label = 123; break; } else { label = 122; break; }
  case 122: 
   var $638=$t120;
   var $644 = $638;label = 124; break;
  case 123: 
   var $640=$t120;
   var $641=(($640)|(0)) > 0;
   var $642=$641 ? 65535 : 0;
   var $644 = $642;label = 124; break;
  case 124: 
   var $644;
   var $645=(($644) & 65535);
   var $646=$i18;
   var $647=((($646)+(1))|0);
   var $648=$3;
   var $649=(($648+($647<<1))|0);
   HEAP16[(($649)>>1)]=$645;
   var $650=$i18;
   var $651=((($650)+(2))|0);
   var $652=$_src17;
   var $653=(($652+($651<<2))|0);
   var $654=HEAPF32[(($653)>>2)];
   var $655=$654;
   var $656=__Z7cvRoundd($655);
   $t019=$656;
   var $657=$i18;
   var $658=((($657)+(3))|0);
   var $659=$_src17;
   var $660=(($659+($658<<2))|0);
   var $661=HEAPF32[(($660)>>2)];
   var $662=$661;
   var $663=__Z7cvRoundd($662);
   $t120=$663;
   var $664=$t019;
   var $665=$664 & -65536;
   var $666=(($665)|(0))!=0;
   if ($666) { label = 126; break; } else { label = 125; break; }
  case 125: 
   var $668=$t019;
   var $674 = $668;label = 127; break;
  case 126: 
   var $670=$t019;
   var $671=(($670)|(0)) > 0;
   var $672=$671 ? 65535 : 0;
   var $674 = $672;label = 127; break;
  case 127: 
   var $674;
   var $675=(($674) & 65535);
   var $676=$i18;
   var $677=((($676)+(2))|0);
   var $678=$3;
   var $679=(($678+($677<<1))|0);
   HEAP16[(($679)>>1)]=$675;
   var $680=$t120;
   var $681=$680 & -65536;
   var $682=(($681)|(0))!=0;
   if ($682) { label = 129; break; } else { label = 128; break; }
  case 128: 
   var $684=$t120;
   var $690 = $684;label = 130; break;
  case 129: 
   var $686=$t120;
   var $687=(($686)|(0)) > 0;
   var $688=$687 ? 65535 : 0;
   var $690 = $688;label = 130; break;
  case 130: 
   var $690;
   var $691=(($690) & 65535);
   var $692=$i18;
   var $693=((($692)+(3))|0);
   var $694=$3;
   var $695=(($694+($693<<1))|0);
   HEAP16[(($695)>>1)]=$691;
   label = 131; break;
  case 131: 
   var $697=$i18;
   var $698=((($697)+(4))|0);
   $i18=$698;
   label = 117; break;
  case 132: 
   label = 133; break;
  case 133: 
   var $701=$i18;
   var $702=(($size)|0);
   var $703=HEAP32[(($702)>>2)];
   var $704=(($701)|(0)) < (($703)|(0));
   if ($704) { label = 134; break; } else { label = 139; break; }
  case 134: 
   var $706=$i18;
   var $707=$_src17;
   var $708=(($707+($706<<2))|0);
   var $709=HEAPF32[(($708)>>2)];
   var $710=$709;
   var $711=__Z7cvRoundd($710);
   $t021=$711;
   var $712=$t021;
   var $713=$712 & -65536;
   var $714=(($713)|(0))!=0;
   if ($714) { label = 136; break; } else { label = 135; break; }
  case 135: 
   var $716=$t021;
   var $722 = $716;label = 137; break;
  case 136: 
   var $718=$t021;
   var $719=(($718)|(0)) > 0;
   var $720=$719 ? 65535 : 0;
   var $722 = $720;label = 137; break;
  case 137: 
   var $722;
   var $723=(($722) & 65535);
   var $724=$i18;
   var $725=$3;
   var $726=(($725+($724<<1))|0);
   HEAP16[(($726)>>1)]=$723;
   label = 138; break;
  case 138: 
   var $728=$i18;
   var $729=((($728)+(1))|0);
   $i18=$729;
   label = 133; break;
  case 139: 
   label = 140; break;
  case 140: 
   var $732=$2;
   var $733=$_src17;
   var $734=(($733+($732<<2))|0);
   $_src17=$734;
   var $735=$4;
   var $736=$3;
   var $737=(($736+($735<<1))|0);
   $3=$737;
   label = 115; break;
  case 141: 
   label = 170; break;
  case 142: 
   var $740=$1;
   var $741=$740;
   $_src22=$741;
   var $742=$2;
   var $743=((((($742)>>>(0)))/(8))&-1);
   $2=$743;
   label = 143; break;
  case 143: 
   var $745=(($size+4)|0);
   var $746=HEAP32[(($745)>>2)];
   var $747=((($746)-(1))|0);
   HEAP32[(($745)>>2)]=$747;
   var $748=(($746)|(0))!=0;
   if ($748) { label = 144; break; } else { label = 169; break; }
  case 144: 
   $i23=0;
   label = 145; break;
  case 145: 
   var $751=$i23;
   var $752=(($size)|0);
   var $753=HEAP32[(($752)>>2)];
   var $754=((($753)-(4))|0);
   var $755=(($751)|(0)) <= (($754)|(0));
   if ($755) { label = 146; break; } else { label = 160; break; }
  case 146: 
   var $757=$i23;
   var $758=$_src22;
   var $759=(($758+($757<<3))|0);
   var $760=HEAPF64[(($759)>>3)];
   var $761=__Z7cvRoundd($760);
   $t024=$761;
   var $762=$i23;
   var $763=((($762)+(1))|0);
   var $764=$_src22;
   var $765=(($764+($763<<3))|0);
   var $766=HEAPF64[(($765)>>3)];
   var $767=__Z7cvRoundd($766);
   $t125=$767;
   var $768=$t024;
   var $769=$768 & -65536;
   var $770=(($769)|(0))!=0;
   if ($770) { label = 148; break; } else { label = 147; break; }
  case 147: 
   var $772=$t024;
   var $778 = $772;label = 149; break;
  case 148: 
   var $774=$t024;
   var $775=(($774)|(0)) > 0;
   var $776=$775 ? 65535 : 0;
   var $778 = $776;label = 149; break;
  case 149: 
   var $778;
   var $779=(($778) & 65535);
   var $780=$i23;
   var $781=$3;
   var $782=(($781+($780<<1))|0);
   HEAP16[(($782)>>1)]=$779;
   var $783=$t125;
   var $784=$783 & -65536;
   var $785=(($784)|(0))!=0;
   if ($785) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $787=$t125;
   var $793 = $787;label = 152; break;
  case 151: 
   var $789=$t125;
   var $790=(($789)|(0)) > 0;
   var $791=$790 ? 65535 : 0;
   var $793 = $791;label = 152; break;
  case 152: 
   var $793;
   var $794=(($793) & 65535);
   var $795=$i23;
   var $796=((($795)+(1))|0);
   var $797=$3;
   var $798=(($797+($796<<1))|0);
   HEAP16[(($798)>>1)]=$794;
   var $799=$i23;
   var $800=((($799)+(2))|0);
   var $801=$_src22;
   var $802=(($801+($800<<3))|0);
   var $803=HEAPF64[(($802)>>3)];
   var $804=__Z7cvRoundd($803);
   $t024=$804;
   var $805=$i23;
   var $806=((($805)+(3))|0);
   var $807=$_src22;
   var $808=(($807+($806<<3))|0);
   var $809=HEAPF64[(($808)>>3)];
   var $810=__Z7cvRoundd($809);
   $t125=$810;
   var $811=$t024;
   var $812=$811 & -65536;
   var $813=(($812)|(0))!=0;
   if ($813) { label = 154; break; } else { label = 153; break; }
  case 153: 
   var $815=$t024;
   var $821 = $815;label = 155; break;
  case 154: 
   var $817=$t024;
   var $818=(($817)|(0)) > 0;
   var $819=$818 ? 65535 : 0;
   var $821 = $819;label = 155; break;
  case 155: 
   var $821;
   var $822=(($821) & 65535);
   var $823=$i23;
   var $824=((($823)+(2))|0);
   var $825=$3;
   var $826=(($825+($824<<1))|0);
   HEAP16[(($826)>>1)]=$822;
   var $827=$t125;
   var $828=$827 & -65536;
   var $829=(($828)|(0))!=0;
   if ($829) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $831=$t125;
   var $837 = $831;label = 158; break;
  case 157: 
   var $833=$t125;
   var $834=(($833)|(0)) > 0;
   var $835=$834 ? 65535 : 0;
   var $837 = $835;label = 158; break;
  case 158: 
   var $837;
   var $838=(($837) & 65535);
   var $839=$i23;
   var $840=((($839)+(3))|0);
   var $841=$3;
   var $842=(($841+($840<<1))|0);
   HEAP16[(($842)>>1)]=$838;
   label = 159; break;
  case 159: 
   var $844=$i23;
   var $845=((($844)+(4))|0);
   $i23=$845;
   label = 145; break;
  case 160: 
   label = 161; break;
  case 161: 
   var $848=$i23;
   var $849=(($size)|0);
   var $850=HEAP32[(($849)>>2)];
   var $851=(($848)|(0)) < (($850)|(0));
   if ($851) { label = 162; break; } else { label = 167; break; }
  case 162: 
   var $853=$i23;
   var $854=$_src22;
   var $855=(($854+($853<<3))|0);
   var $856=HEAPF64[(($855)>>3)];
   var $857=__Z7cvRoundd($856);
   $t026=$857;
   var $858=$t026;
   var $859=$858 & -65536;
   var $860=(($859)|(0))!=0;
   if ($860) { label = 164; break; } else { label = 163; break; }
  case 163: 
   var $862=$t026;
   var $868 = $862;label = 165; break;
  case 164: 
   var $864=$t026;
   var $865=(($864)|(0)) > 0;
   var $866=$865 ? 65535 : 0;
   var $868 = $866;label = 165; break;
  case 165: 
   var $868;
   var $869=(($868) & 65535);
   var $870=$i23;
   var $871=$3;
   var $872=(($871+($870<<1))|0);
   HEAP16[(($872)>>1)]=$869;
   label = 166; break;
  case 166: 
   var $874=$i23;
   var $875=((($874)+(1))|0);
   $i23=$875;
   label = 161; break;
  case 167: 
   label = 168; break;
  case 168: 
   var $878=$2;
   var $879=$_src22;
   var $880=(($879+($878<<3))|0);
   $_src22=$880;
   var $881=$4;
   var $882=$3;
   var $883=(($882+($881<<1))|0);
   $3=$883;
   label = 143; break;
  case 169: 
   label = 170; break;
  case 170: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvCvtTo_16s_C1RPKhiPsi6CvSizei($src, $srcstep, $dst, $dststep, $size, $param) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $srctype;
   var $_src;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $i3;
   var $t04;
   var $t15;
   var $t06;
   var $_src7;
   var $i8;
   var $t09;
   var $t110;
   var $t011;
   var $_src12;
   var $i13;
   var $t014;
   var $t115;
   var $t016;
   var $_src17;
   var $i18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $i23;
   var $t024;
   var $t125;
   var $t026;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$param;
   var $6=$5;
   $srctype=$6;
   var $7=$4;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $4=$8;
   var $9=$srctype;
   var $10=$9 & 7;
   if ((($10)|(0))==0) {
    label = 2; break;
   }
   else if ((($10)|(0))==1) {
    label = 30; break;
   }
   else if ((($10)|(0))==2) {
    label = 58; break;
   }
   else if ((($10)|(0))==4) {
    label = 86; break;
   }
   else if ((($10)|(0))==5) {
    label = 114; break;
   }
   else if ((($10)|(0))==6) {
    label = 142; break;
   }
   else {
   label = 170; break;
   }
  case 2: 
   var $12=$1;
   $_src=$12;
   var $13=$2;
   var $14=(((($13)>>>(0)))&-1);
   $2=$14;
   label = 3; break;
  case 3: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 29; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $22=$i;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 6; break; } else { label = 20; break; }
  case 6: 
   var $28=$i;
   var $29=$_src;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   $t0=$32;
   var $33=$i;
   var $34=((($33)+(1))|0);
   var $35=$_src;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   $t1=$38;
   var $39=$t0;
   var $40=((($39)+(32768))|0);
   var $41=$40 & -65536;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $44=$t0;
   var $50 = $44;label = 9; break;
  case 8: 
   var $46=$t0;
   var $47=(($46)|(0)) > 0;
   var $48=$47 ? 32767 : -32768;
   var $50 = $48;label = 9; break;
  case 9: 
   var $50;
   var $51=(($50) & 65535);
   var $52=$i;
   var $53=$3;
   var $54=(($53+($52<<1))|0);
   HEAP16[(($54)>>1)]=$51;
   var $55=$t1;
   var $56=((($55)+(32768))|0);
   var $57=$56 & -65536;
   var $58=(($57)|(0))!=0;
   if ($58) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $60=$t1;
   var $66 = $60;label = 12; break;
  case 11: 
   var $62=$t1;
   var $63=(($62)|(0)) > 0;
   var $64=$63 ? 32767 : -32768;
   var $66 = $64;label = 12; break;
  case 12: 
   var $66;
   var $67=(($66) & 65535);
   var $68=$i;
   var $69=((($68)+(1))|0);
   var $70=$3;
   var $71=(($70+($69<<1))|0);
   HEAP16[(($71)>>1)]=$67;
   var $72=$i;
   var $73=((($72)+(2))|0);
   var $74=$_src;
   var $75=(($74+$73)|0);
   var $76=HEAP8[($75)];
   var $77=(($76)&(255));
   $t0=$77;
   var $78=$i;
   var $79=((($78)+(3))|0);
   var $80=$_src;
   var $81=(($80+$79)|0);
   var $82=HEAP8[($81)];
   var $83=(($82)&(255));
   $t1=$83;
   var $84=$t0;
   var $85=((($84)+(32768))|0);
   var $86=$85 & -65536;
   var $87=(($86)|(0))!=0;
   if ($87) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $89=$t0;
   var $95 = $89;label = 15; break;
  case 14: 
   var $91=$t0;
   var $92=(($91)|(0)) > 0;
   var $93=$92 ? 32767 : -32768;
   var $95 = $93;label = 15; break;
  case 15: 
   var $95;
   var $96=(($95) & 65535);
   var $97=$i;
   var $98=((($97)+(2))|0);
   var $99=$3;
   var $100=(($99+($98<<1))|0);
   HEAP16[(($100)>>1)]=$96;
   var $101=$t1;
   var $102=((($101)+(32768))|0);
   var $103=$102 & -65536;
   var $104=(($103)|(0))!=0;
   if ($104) { label = 17; break; } else { label = 16; break; }
  case 16: 
   var $106=$t1;
   var $112 = $106;label = 18; break;
  case 17: 
   var $108=$t1;
   var $109=(($108)|(0)) > 0;
   var $110=$109 ? 32767 : -32768;
   var $112 = $110;label = 18; break;
  case 18: 
   var $112;
   var $113=(($112) & 65535);
   var $114=$i;
   var $115=((($114)+(3))|0);
   var $116=$3;
   var $117=(($116+($115<<1))|0);
   HEAP16[(($117)>>1)]=$113;
   label = 19; break;
  case 19: 
   var $119=$i;
   var $120=((($119)+(4))|0);
   $i=$120;
   label = 5; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $123=$i;
   var $124=(($size)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($123)|(0)) < (($125)|(0));
   if ($126) { label = 22; break; } else { label = 27; break; }
  case 22: 
   var $128=$i;
   var $129=$_src;
   var $130=(($129+$128)|0);
   var $131=HEAP8[($130)];
   var $132=(($131)&(255));
   $t01=$132;
   var $133=$t01;
   var $134=((($133)+(32768))|0);
   var $135=$134 & -65536;
   var $136=(($135)|(0))!=0;
   if ($136) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $138=$t01;
   var $144 = $138;label = 25; break;
  case 24: 
   var $140=$t01;
   var $141=(($140)|(0)) > 0;
   var $142=$141 ? 32767 : -32768;
   var $144 = $142;label = 25; break;
  case 25: 
   var $144;
   var $145=(($144) & 65535);
   var $146=$i;
   var $147=$3;
   var $148=(($147+($146<<1))|0);
   HEAP16[(($148)>>1)]=$145;
   label = 26; break;
  case 26: 
   var $150=$i;
   var $151=((($150)+(1))|0);
   $i=$151;
   label = 21; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $154=$2;
   var $155=$_src;
   var $156=(($155+$154)|0);
   $_src=$156;
   var $157=$4;
   var $158=$3;
   var $159=(($158+($157<<1))|0);
   $3=$159;
   label = 3; break;
  case 29: 
   label = 170; break;
  case 30: 
   var $162=$1;
   $_src2=$162;
   var $163=$2;
   var $164=(((($163)>>>(0)))&-1);
   $2=$164;
   label = 31; break;
  case 31: 
   var $166=(($size+4)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=((($167)-(1))|0);
   HEAP32[(($166)>>2)]=$168;
   var $169=(($167)|(0))!=0;
   if ($169) { label = 32; break; } else { label = 57; break; }
  case 32: 
   $i3=0;
   label = 33; break;
  case 33: 
   var $172=$i3;
   var $173=(($size)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=((($174)-(4))|0);
   var $176=(($172)|(0)) <= (($175)|(0));
   if ($176) { label = 34; break; } else { label = 48; break; }
  case 34: 
   var $178=$i3;
   var $179=$_src2;
   var $180=(($179+$178)|0);
   var $181=HEAP8[($180)];
   var $182=(($181 << 24) >> 24);
   $t04=$182;
   var $183=$i3;
   var $184=((($183)+(1))|0);
   var $185=$_src2;
   var $186=(($185+$184)|0);
   var $187=HEAP8[($186)];
   var $188=(($187 << 24) >> 24);
   $t15=$188;
   var $189=$t04;
   var $190=((($189)+(32768))|0);
   var $191=$190 & -65536;
   var $192=(($191)|(0))!=0;
   if ($192) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $194=$t04;
   var $200 = $194;label = 37; break;
  case 36: 
   var $196=$t04;
   var $197=(($196)|(0)) > 0;
   var $198=$197 ? 32767 : -32768;
   var $200 = $198;label = 37; break;
  case 37: 
   var $200;
   var $201=(($200) & 65535);
   var $202=$i3;
   var $203=$3;
   var $204=(($203+($202<<1))|0);
   HEAP16[(($204)>>1)]=$201;
   var $205=$t15;
   var $206=((($205)+(32768))|0);
   var $207=$206 & -65536;
   var $208=(($207)|(0))!=0;
   if ($208) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $210=$t15;
   var $216 = $210;label = 40; break;
  case 39: 
   var $212=$t15;
   var $213=(($212)|(0)) > 0;
   var $214=$213 ? 32767 : -32768;
   var $216 = $214;label = 40; break;
  case 40: 
   var $216;
   var $217=(($216) & 65535);
   var $218=$i3;
   var $219=((($218)+(1))|0);
   var $220=$3;
   var $221=(($220+($219<<1))|0);
   HEAP16[(($221)>>1)]=$217;
   var $222=$i3;
   var $223=((($222)+(2))|0);
   var $224=$_src2;
   var $225=(($224+$223)|0);
   var $226=HEAP8[($225)];
   var $227=(($226 << 24) >> 24);
   $t04=$227;
   var $228=$i3;
   var $229=((($228)+(3))|0);
   var $230=$_src2;
   var $231=(($230+$229)|0);
   var $232=HEAP8[($231)];
   var $233=(($232 << 24) >> 24);
   $t15=$233;
   var $234=$t04;
   var $235=((($234)+(32768))|0);
   var $236=$235 & -65536;
   var $237=(($236)|(0))!=0;
   if ($237) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $239=$t04;
   var $245 = $239;label = 43; break;
  case 42: 
   var $241=$t04;
   var $242=(($241)|(0)) > 0;
   var $243=$242 ? 32767 : -32768;
   var $245 = $243;label = 43; break;
  case 43: 
   var $245;
   var $246=(($245) & 65535);
   var $247=$i3;
   var $248=((($247)+(2))|0);
   var $249=$3;
   var $250=(($249+($248<<1))|0);
   HEAP16[(($250)>>1)]=$246;
   var $251=$t15;
   var $252=((($251)+(32768))|0);
   var $253=$252 & -65536;
   var $254=(($253)|(0))!=0;
   if ($254) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $256=$t15;
   var $262 = $256;label = 46; break;
  case 45: 
   var $258=$t15;
   var $259=(($258)|(0)) > 0;
   var $260=$259 ? 32767 : -32768;
   var $262 = $260;label = 46; break;
  case 46: 
   var $262;
   var $263=(($262) & 65535);
   var $264=$i3;
   var $265=((($264)+(3))|0);
   var $266=$3;
   var $267=(($266+($265<<1))|0);
   HEAP16[(($267)>>1)]=$263;
   label = 47; break;
  case 47: 
   var $269=$i3;
   var $270=((($269)+(4))|0);
   $i3=$270;
   label = 33; break;
  case 48: 
   label = 49; break;
  case 49: 
   var $273=$i3;
   var $274=(($size)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($273)|(0)) < (($275)|(0));
   if ($276) { label = 50; break; } else { label = 55; break; }
  case 50: 
   var $278=$i3;
   var $279=$_src2;
   var $280=(($279+$278)|0);
   var $281=HEAP8[($280)];
   var $282=(($281 << 24) >> 24);
   $t06=$282;
   var $283=$t06;
   var $284=((($283)+(32768))|0);
   var $285=$284 & -65536;
   var $286=(($285)|(0))!=0;
   if ($286) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $288=$t06;
   var $294 = $288;label = 53; break;
  case 52: 
   var $290=$t06;
   var $291=(($290)|(0)) > 0;
   var $292=$291 ? 32767 : -32768;
   var $294 = $292;label = 53; break;
  case 53: 
   var $294;
   var $295=(($294) & 65535);
   var $296=$i3;
   var $297=$3;
   var $298=(($297+($296<<1))|0);
   HEAP16[(($298)>>1)]=$295;
   label = 54; break;
  case 54: 
   var $300=$i3;
   var $301=((($300)+(1))|0);
   $i3=$301;
   label = 49; break;
  case 55: 
   label = 56; break;
  case 56: 
   var $304=$2;
   var $305=$_src2;
   var $306=(($305+$304)|0);
   $_src2=$306;
   var $307=$4;
   var $308=$3;
   var $309=(($308+($307<<1))|0);
   $3=$309;
   label = 31; break;
  case 57: 
   label = 170; break;
  case 58: 
   var $312=$1;
   var $313=$312;
   $_src7=$313;
   var $314=$2;
   var $315=((((($314)>>>(0)))/(2))&-1);
   $2=$315;
   label = 59; break;
  case 59: 
   var $317=(($size+4)|0);
   var $318=HEAP32[(($317)>>2)];
   var $319=((($318)-(1))|0);
   HEAP32[(($317)>>2)]=$319;
   var $320=(($318)|(0))!=0;
   if ($320) { label = 60; break; } else { label = 85; break; }
  case 60: 
   $i8=0;
   label = 61; break;
  case 61: 
   var $323=$i8;
   var $324=(($size)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=((($325)-(4))|0);
   var $327=(($323)|(0)) <= (($326)|(0));
   if ($327) { label = 62; break; } else { label = 76; break; }
  case 62: 
   var $329=$i8;
   var $330=$_src7;
   var $331=(($330+($329<<1))|0);
   var $332=HEAP16[(($331)>>1)];
   var $333=(($332)&(65535));
   $t09=$333;
   var $334=$i8;
   var $335=((($334)+(1))|0);
   var $336=$_src7;
   var $337=(($336+($335<<1))|0);
   var $338=HEAP16[(($337)>>1)];
   var $339=(($338)&(65535));
   $t110=$339;
   var $340=$t09;
   var $341=((($340)+(32768))|0);
   var $342=$341 & -65536;
   var $343=(($342)|(0))!=0;
   if ($343) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $345=$t09;
   var $351 = $345;label = 65; break;
  case 64: 
   var $347=$t09;
   var $348=(($347)|(0)) > 0;
   var $349=$348 ? 32767 : -32768;
   var $351 = $349;label = 65; break;
  case 65: 
   var $351;
   var $352=(($351) & 65535);
   var $353=$i8;
   var $354=$3;
   var $355=(($354+($353<<1))|0);
   HEAP16[(($355)>>1)]=$352;
   var $356=$t110;
   var $357=((($356)+(32768))|0);
   var $358=$357 & -65536;
   var $359=(($358)|(0))!=0;
   if ($359) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $361=$t110;
   var $367 = $361;label = 68; break;
  case 67: 
   var $363=$t110;
   var $364=(($363)|(0)) > 0;
   var $365=$364 ? 32767 : -32768;
   var $367 = $365;label = 68; break;
  case 68: 
   var $367;
   var $368=(($367) & 65535);
   var $369=$i8;
   var $370=((($369)+(1))|0);
   var $371=$3;
   var $372=(($371+($370<<1))|0);
   HEAP16[(($372)>>1)]=$368;
   var $373=$i8;
   var $374=((($373)+(2))|0);
   var $375=$_src7;
   var $376=(($375+($374<<1))|0);
   var $377=HEAP16[(($376)>>1)];
   var $378=(($377)&(65535));
   $t09=$378;
   var $379=$i8;
   var $380=((($379)+(3))|0);
   var $381=$_src7;
   var $382=(($381+($380<<1))|0);
   var $383=HEAP16[(($382)>>1)];
   var $384=(($383)&(65535));
   $t110=$384;
   var $385=$t09;
   var $386=((($385)+(32768))|0);
   var $387=$386 & -65536;
   var $388=(($387)|(0))!=0;
   if ($388) { label = 70; break; } else { label = 69; break; }
  case 69: 
   var $390=$t09;
   var $396 = $390;label = 71; break;
  case 70: 
   var $392=$t09;
   var $393=(($392)|(0)) > 0;
   var $394=$393 ? 32767 : -32768;
   var $396 = $394;label = 71; break;
  case 71: 
   var $396;
   var $397=(($396) & 65535);
   var $398=$i8;
   var $399=((($398)+(2))|0);
   var $400=$3;
   var $401=(($400+($399<<1))|0);
   HEAP16[(($401)>>1)]=$397;
   var $402=$t110;
   var $403=((($402)+(32768))|0);
   var $404=$403 & -65536;
   var $405=(($404)|(0))!=0;
   if ($405) { label = 73; break; } else { label = 72; break; }
  case 72: 
   var $407=$t110;
   var $413 = $407;label = 74; break;
  case 73: 
   var $409=$t110;
   var $410=(($409)|(0)) > 0;
   var $411=$410 ? 32767 : -32768;
   var $413 = $411;label = 74; break;
  case 74: 
   var $413;
   var $414=(($413) & 65535);
   var $415=$i8;
   var $416=((($415)+(3))|0);
   var $417=$3;
   var $418=(($417+($416<<1))|0);
   HEAP16[(($418)>>1)]=$414;
   label = 75; break;
  case 75: 
   var $420=$i8;
   var $421=((($420)+(4))|0);
   $i8=$421;
   label = 61; break;
  case 76: 
   label = 77; break;
  case 77: 
   var $424=$i8;
   var $425=(($size)|0);
   var $426=HEAP32[(($425)>>2)];
   var $427=(($424)|(0)) < (($426)|(0));
   if ($427) { label = 78; break; } else { label = 83; break; }
  case 78: 
   var $429=$i8;
   var $430=$_src7;
   var $431=(($430+($429<<1))|0);
   var $432=HEAP16[(($431)>>1)];
   var $433=(($432)&(65535));
   $t011=$433;
   var $434=$t011;
   var $435=((($434)+(32768))|0);
   var $436=$435 & -65536;
   var $437=(($436)|(0))!=0;
   if ($437) { label = 80; break; } else { label = 79; break; }
  case 79: 
   var $439=$t011;
   var $445 = $439;label = 81; break;
  case 80: 
   var $441=$t011;
   var $442=(($441)|(0)) > 0;
   var $443=$442 ? 32767 : -32768;
   var $445 = $443;label = 81; break;
  case 81: 
   var $445;
   var $446=(($445) & 65535);
   var $447=$i8;
   var $448=$3;
   var $449=(($448+($447<<1))|0);
   HEAP16[(($449)>>1)]=$446;
   label = 82; break;
  case 82: 
   var $451=$i8;
   var $452=((($451)+(1))|0);
   $i8=$452;
   label = 77; break;
  case 83: 
   label = 84; break;
  case 84: 
   var $455=$2;
   var $456=$_src7;
   var $457=(($456+($455<<1))|0);
   $_src7=$457;
   var $458=$4;
   var $459=$3;
   var $460=(($459+($458<<1))|0);
   $3=$460;
   label = 59; break;
  case 85: 
   label = 170; break;
  case 86: 
   var $463=$1;
   var $464=$463;
   $_src12=$464;
   var $465=$2;
   var $466=((((($465)>>>(0)))/(4))&-1);
   $2=$466;
   label = 87; break;
  case 87: 
   var $468=(($size+4)|0);
   var $469=HEAP32[(($468)>>2)];
   var $470=((($469)-(1))|0);
   HEAP32[(($468)>>2)]=$470;
   var $471=(($469)|(0))!=0;
   if ($471) { label = 88; break; } else { label = 113; break; }
  case 88: 
   $i13=0;
   label = 89; break;
  case 89: 
   var $474=$i13;
   var $475=(($size)|0);
   var $476=HEAP32[(($475)>>2)];
   var $477=((($476)-(4))|0);
   var $478=(($474)|(0)) <= (($477)|(0));
   if ($478) { label = 90; break; } else { label = 104; break; }
  case 90: 
   var $480=$i13;
   var $481=$_src12;
   var $482=(($481+($480<<2))|0);
   var $483=HEAP32[(($482)>>2)];
   $t014=$483;
   var $484=$i13;
   var $485=((($484)+(1))|0);
   var $486=$_src12;
   var $487=(($486+($485<<2))|0);
   var $488=HEAP32[(($487)>>2)];
   $t115=$488;
   var $489=$t014;
   var $490=((($489)+(32768))|0);
   var $491=$490 & -65536;
   var $492=(($491)|(0))!=0;
   if ($492) { label = 92; break; } else { label = 91; break; }
  case 91: 
   var $494=$t014;
   var $500 = $494;label = 93; break;
  case 92: 
   var $496=$t014;
   var $497=(($496)|(0)) > 0;
   var $498=$497 ? 32767 : -32768;
   var $500 = $498;label = 93; break;
  case 93: 
   var $500;
   var $501=(($500) & 65535);
   var $502=$i13;
   var $503=$3;
   var $504=(($503+($502<<1))|0);
   HEAP16[(($504)>>1)]=$501;
   var $505=$t115;
   var $506=((($505)+(32768))|0);
   var $507=$506 & -65536;
   var $508=(($507)|(0))!=0;
   if ($508) { label = 95; break; } else { label = 94; break; }
  case 94: 
   var $510=$t115;
   var $516 = $510;label = 96; break;
  case 95: 
   var $512=$t115;
   var $513=(($512)|(0)) > 0;
   var $514=$513 ? 32767 : -32768;
   var $516 = $514;label = 96; break;
  case 96: 
   var $516;
   var $517=(($516) & 65535);
   var $518=$i13;
   var $519=((($518)+(1))|0);
   var $520=$3;
   var $521=(($520+($519<<1))|0);
   HEAP16[(($521)>>1)]=$517;
   var $522=$i13;
   var $523=((($522)+(2))|0);
   var $524=$_src12;
   var $525=(($524+($523<<2))|0);
   var $526=HEAP32[(($525)>>2)];
   $t014=$526;
   var $527=$i13;
   var $528=((($527)+(3))|0);
   var $529=$_src12;
   var $530=(($529+($528<<2))|0);
   var $531=HEAP32[(($530)>>2)];
   $t115=$531;
   var $532=$t014;
   var $533=((($532)+(32768))|0);
   var $534=$533 & -65536;
   var $535=(($534)|(0))!=0;
   if ($535) { label = 98; break; } else { label = 97; break; }
  case 97: 
   var $537=$t014;
   var $543 = $537;label = 99; break;
  case 98: 
   var $539=$t014;
   var $540=(($539)|(0)) > 0;
   var $541=$540 ? 32767 : -32768;
   var $543 = $541;label = 99; break;
  case 99: 
   var $543;
   var $544=(($543) & 65535);
   var $545=$i13;
   var $546=((($545)+(2))|0);
   var $547=$3;
   var $548=(($547+($546<<1))|0);
   HEAP16[(($548)>>1)]=$544;
   var $549=$t115;
   var $550=((($549)+(32768))|0);
   var $551=$550 & -65536;
   var $552=(($551)|(0))!=0;
   if ($552) { label = 101; break; } else { label = 100; break; }
  case 100: 
   var $554=$t115;
   var $560 = $554;label = 102; break;
  case 101: 
   var $556=$t115;
   var $557=(($556)|(0)) > 0;
   var $558=$557 ? 32767 : -32768;
   var $560 = $558;label = 102; break;
  case 102: 
   var $560;
   var $561=(($560) & 65535);
   var $562=$i13;
   var $563=((($562)+(3))|0);
   var $564=$3;
   var $565=(($564+($563<<1))|0);
   HEAP16[(($565)>>1)]=$561;
   label = 103; break;
  case 103: 
   var $567=$i13;
   var $568=((($567)+(4))|0);
   $i13=$568;
   label = 89; break;
  case 104: 
   label = 105; break;
  case 105: 
   var $571=$i13;
   var $572=(($size)|0);
   var $573=HEAP32[(($572)>>2)];
   var $574=(($571)|(0)) < (($573)|(0));
   if ($574) { label = 106; break; } else { label = 111; break; }
  case 106: 
   var $576=$i13;
   var $577=$_src12;
   var $578=(($577+($576<<2))|0);
   var $579=HEAP32[(($578)>>2)];
   $t016=$579;
   var $580=$t016;
   var $581=((($580)+(32768))|0);
   var $582=$581 & -65536;
   var $583=(($582)|(0))!=0;
   if ($583) { label = 108; break; } else { label = 107; break; }
  case 107: 
   var $585=$t016;
   var $591 = $585;label = 109; break;
  case 108: 
   var $587=$t016;
   var $588=(($587)|(0)) > 0;
   var $589=$588 ? 32767 : -32768;
   var $591 = $589;label = 109; break;
  case 109: 
   var $591;
   var $592=(($591) & 65535);
   var $593=$i13;
   var $594=$3;
   var $595=(($594+($593<<1))|0);
   HEAP16[(($595)>>1)]=$592;
   label = 110; break;
  case 110: 
   var $597=$i13;
   var $598=((($597)+(1))|0);
   $i13=$598;
   label = 105; break;
  case 111: 
   label = 112; break;
  case 112: 
   var $601=$2;
   var $602=$_src12;
   var $603=(($602+($601<<2))|0);
   $_src12=$603;
   var $604=$4;
   var $605=$3;
   var $606=(($605+($604<<1))|0);
   $3=$606;
   label = 87; break;
  case 113: 
   label = 170; break;
  case 114: 
   var $609=$1;
   var $610=$609;
   $_src17=$610;
   var $611=$2;
   var $612=((((($611)>>>(0)))/(4))&-1);
   $2=$612;
   label = 115; break;
  case 115: 
   var $614=(($size+4)|0);
   var $615=HEAP32[(($614)>>2)];
   var $616=((($615)-(1))|0);
   HEAP32[(($614)>>2)]=$616;
   var $617=(($615)|(0))!=0;
   if ($617) { label = 116; break; } else { label = 141; break; }
  case 116: 
   $i18=0;
   label = 117; break;
  case 117: 
   var $620=$i18;
   var $621=(($size)|0);
   var $622=HEAP32[(($621)>>2)];
   var $623=((($622)-(4))|0);
   var $624=(($620)|(0)) <= (($623)|(0));
   if ($624) { label = 118; break; } else { label = 132; break; }
  case 118: 
   var $626=$i18;
   var $627=$_src17;
   var $628=(($627+($626<<2))|0);
   var $629=HEAPF32[(($628)>>2)];
   var $630=$629;
   var $631=__Z7cvRoundd($630);
   $t019=$631;
   var $632=$i18;
   var $633=((($632)+(1))|0);
   var $634=$_src17;
   var $635=(($634+($633<<2))|0);
   var $636=HEAPF32[(($635)>>2)];
   var $637=$636;
   var $638=__Z7cvRoundd($637);
   $t120=$638;
   var $639=$t019;
   var $640=((($639)+(32768))|0);
   var $641=$640 & -65536;
   var $642=(($641)|(0))!=0;
   if ($642) { label = 120; break; } else { label = 119; break; }
  case 119: 
   var $644=$t019;
   var $650 = $644;label = 121; break;
  case 120: 
   var $646=$t019;
   var $647=(($646)|(0)) > 0;
   var $648=$647 ? 32767 : -32768;
   var $650 = $648;label = 121; break;
  case 121: 
   var $650;
   var $651=(($650) & 65535);
   var $652=$i18;
   var $653=$3;
   var $654=(($653+($652<<1))|0);
   HEAP16[(($654)>>1)]=$651;
   var $655=$t120;
   var $656=((($655)+(32768))|0);
   var $657=$656 & -65536;
   var $658=(($657)|(0))!=0;
   if ($658) { label = 123; break; } else { label = 122; break; }
  case 122: 
   var $660=$t120;
   var $666 = $660;label = 124; break;
  case 123: 
   var $662=$t120;
   var $663=(($662)|(0)) > 0;
   var $664=$663 ? 32767 : -32768;
   var $666 = $664;label = 124; break;
  case 124: 
   var $666;
   var $667=(($666) & 65535);
   var $668=$i18;
   var $669=((($668)+(1))|0);
   var $670=$3;
   var $671=(($670+($669<<1))|0);
   HEAP16[(($671)>>1)]=$667;
   var $672=$i18;
   var $673=((($672)+(2))|0);
   var $674=$_src17;
   var $675=(($674+($673<<2))|0);
   var $676=HEAPF32[(($675)>>2)];
   var $677=$676;
   var $678=__Z7cvRoundd($677);
   $t019=$678;
   var $679=$i18;
   var $680=((($679)+(3))|0);
   var $681=$_src17;
   var $682=(($681+($680<<2))|0);
   var $683=HEAPF32[(($682)>>2)];
   var $684=$683;
   var $685=__Z7cvRoundd($684);
   $t120=$685;
   var $686=$t019;
   var $687=((($686)+(32768))|0);
   var $688=$687 & -65536;
   var $689=(($688)|(0))!=0;
   if ($689) { label = 126; break; } else { label = 125; break; }
  case 125: 
   var $691=$t019;
   var $697 = $691;label = 127; break;
  case 126: 
   var $693=$t019;
   var $694=(($693)|(0)) > 0;
   var $695=$694 ? 32767 : -32768;
   var $697 = $695;label = 127; break;
  case 127: 
   var $697;
   var $698=(($697) & 65535);
   var $699=$i18;
   var $700=((($699)+(2))|0);
   var $701=$3;
   var $702=(($701+($700<<1))|0);
   HEAP16[(($702)>>1)]=$698;
   var $703=$t120;
   var $704=((($703)+(32768))|0);
   var $705=$704 & -65536;
   var $706=(($705)|(0))!=0;
   if ($706) { label = 129; break; } else { label = 128; break; }
  case 128: 
   var $708=$t120;
   var $714 = $708;label = 130; break;
  case 129: 
   var $710=$t120;
   var $711=(($710)|(0)) > 0;
   var $712=$711 ? 32767 : -32768;
   var $714 = $712;label = 130; break;
  case 130: 
   var $714;
   var $715=(($714) & 65535);
   var $716=$i18;
   var $717=((($716)+(3))|0);
   var $718=$3;
   var $719=(($718+($717<<1))|0);
   HEAP16[(($719)>>1)]=$715;
   label = 131; break;
  case 131: 
   var $721=$i18;
   var $722=((($721)+(4))|0);
   $i18=$722;
   label = 117; break;
  case 132: 
   label = 133; break;
  case 133: 
   var $725=$i18;
   var $726=(($size)|0);
   var $727=HEAP32[(($726)>>2)];
   var $728=(($725)|(0)) < (($727)|(0));
   if ($728) { label = 134; break; } else { label = 139; break; }
  case 134: 
   var $730=$i18;
   var $731=$_src17;
   var $732=(($731+($730<<2))|0);
   var $733=HEAPF32[(($732)>>2)];
   var $734=$733;
   var $735=__Z7cvRoundd($734);
   $t021=$735;
   var $736=$t021;
   var $737=((($736)+(32768))|0);
   var $738=$737 & -65536;
   var $739=(($738)|(0))!=0;
   if ($739) { label = 136; break; } else { label = 135; break; }
  case 135: 
   var $741=$t021;
   var $747 = $741;label = 137; break;
  case 136: 
   var $743=$t021;
   var $744=(($743)|(0)) > 0;
   var $745=$744 ? 32767 : -32768;
   var $747 = $745;label = 137; break;
  case 137: 
   var $747;
   var $748=(($747) & 65535);
   var $749=$i18;
   var $750=$3;
   var $751=(($750+($749<<1))|0);
   HEAP16[(($751)>>1)]=$748;
   label = 138; break;
  case 138: 
   var $753=$i18;
   var $754=((($753)+(1))|0);
   $i18=$754;
   label = 133; break;
  case 139: 
   label = 140; break;
  case 140: 
   var $757=$2;
   var $758=$_src17;
   var $759=(($758+($757<<2))|0);
   $_src17=$759;
   var $760=$4;
   var $761=$3;
   var $762=(($761+($760<<1))|0);
   $3=$762;
   label = 115; break;
  case 141: 
   label = 170; break;
  case 142: 
   var $765=$1;
   var $766=$765;
   $_src22=$766;
   var $767=$2;
   var $768=((((($767)>>>(0)))/(8))&-1);
   $2=$768;
   label = 143; break;
  case 143: 
   var $770=(($size+4)|0);
   var $771=HEAP32[(($770)>>2)];
   var $772=((($771)-(1))|0);
   HEAP32[(($770)>>2)]=$772;
   var $773=(($771)|(0))!=0;
   if ($773) { label = 144; break; } else { label = 169; break; }
  case 144: 
   $i23=0;
   label = 145; break;
  case 145: 
   var $776=$i23;
   var $777=(($size)|0);
   var $778=HEAP32[(($777)>>2)];
   var $779=((($778)-(4))|0);
   var $780=(($776)|(0)) <= (($779)|(0));
   if ($780) { label = 146; break; } else { label = 160; break; }
  case 146: 
   var $782=$i23;
   var $783=$_src22;
   var $784=(($783+($782<<3))|0);
   var $785=HEAPF64[(($784)>>3)];
   var $786=__Z7cvRoundd($785);
   $t024=$786;
   var $787=$i23;
   var $788=((($787)+(1))|0);
   var $789=$_src22;
   var $790=(($789+($788<<3))|0);
   var $791=HEAPF64[(($790)>>3)];
   var $792=__Z7cvRoundd($791);
   $t125=$792;
   var $793=$t024;
   var $794=((($793)+(32768))|0);
   var $795=$794 & -65536;
   var $796=(($795)|(0))!=0;
   if ($796) { label = 148; break; } else { label = 147; break; }
  case 147: 
   var $798=$t024;
   var $804 = $798;label = 149; break;
  case 148: 
   var $800=$t024;
   var $801=(($800)|(0)) > 0;
   var $802=$801 ? 32767 : -32768;
   var $804 = $802;label = 149; break;
  case 149: 
   var $804;
   var $805=(($804) & 65535);
   var $806=$i23;
   var $807=$3;
   var $808=(($807+($806<<1))|0);
   HEAP16[(($808)>>1)]=$805;
   var $809=$t125;
   var $810=((($809)+(32768))|0);
   var $811=$810 & -65536;
   var $812=(($811)|(0))!=0;
   if ($812) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $814=$t125;
   var $820 = $814;label = 152; break;
  case 151: 
   var $816=$t125;
   var $817=(($816)|(0)) > 0;
   var $818=$817 ? 32767 : -32768;
   var $820 = $818;label = 152; break;
  case 152: 
   var $820;
   var $821=(($820) & 65535);
   var $822=$i23;
   var $823=((($822)+(1))|0);
   var $824=$3;
   var $825=(($824+($823<<1))|0);
   HEAP16[(($825)>>1)]=$821;
   var $826=$i23;
   var $827=((($826)+(2))|0);
   var $828=$_src22;
   var $829=(($828+($827<<3))|0);
   var $830=HEAPF64[(($829)>>3)];
   var $831=__Z7cvRoundd($830);
   $t024=$831;
   var $832=$i23;
   var $833=((($832)+(3))|0);
   var $834=$_src22;
   var $835=(($834+($833<<3))|0);
   var $836=HEAPF64[(($835)>>3)];
   var $837=__Z7cvRoundd($836);
   $t125=$837;
   var $838=$t024;
   var $839=((($838)+(32768))|0);
   var $840=$839 & -65536;
   var $841=(($840)|(0))!=0;
   if ($841) { label = 154; break; } else { label = 153; break; }
  case 153: 
   var $843=$t024;
   var $849 = $843;label = 155; break;
  case 154: 
   var $845=$t024;
   var $846=(($845)|(0)) > 0;
   var $847=$846 ? 32767 : -32768;
   var $849 = $847;label = 155; break;
  case 155: 
   var $849;
   var $850=(($849) & 65535);
   var $851=$i23;
   var $852=((($851)+(2))|0);
   var $853=$3;
   var $854=(($853+($852<<1))|0);
   HEAP16[(($854)>>1)]=$850;
   var $855=$t125;
   var $856=((($855)+(32768))|0);
   var $857=$856 & -65536;
   var $858=(($857)|(0))!=0;
   if ($858) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $860=$t125;
   var $866 = $860;label = 158; break;
  case 157: 
   var $862=$t125;
   var $863=(($862)|(0)) > 0;
   var $864=$863 ? 32767 : -32768;
   var $866 = $864;label = 158; break;
  case 158: 
   var $866;
   var $867=(($866) & 65535);
   var $868=$i23;
   var $869=((($868)+(3))|0);
   var $870=$3;
   var $871=(($870+($869<<1))|0);
   HEAP16[(($871)>>1)]=$867;
   label = 159; break;
  case 159: 
   var $873=$i23;
   var $874=((($873)+(4))|0);
   $i23=$874;
   label = 145; break;
  case 160: 
   label = 161; break;
  case 161: 
   var $877=$i23;
   var $878=(($size)|0);
   var $879=HEAP32[(($878)>>2)];
   var $880=(($877)|(0)) < (($879)|(0));
   if ($880) { label = 162; break; } else { label = 167; break; }
  case 162: 
   var $882=$i23;
   var $883=$_src22;
   var $884=(($883+($882<<3))|0);
   var $885=HEAPF64[(($884)>>3)];
   var $886=__Z7cvRoundd($885);
   $t026=$886;
   var $887=$t026;
   var $888=((($887)+(32768))|0);
   var $889=$888 & -65536;
   var $890=(($889)|(0))!=0;
   if ($890) { label = 164; break; } else { label = 163; break; }
  case 163: 
   var $892=$t026;
   var $898 = $892;label = 165; break;
  case 164: 
   var $894=$t026;
   var $895=(($894)|(0)) > 0;
   var $896=$895 ? 32767 : -32768;
   var $898 = $896;label = 165; break;
  case 165: 
   var $898;
   var $899=(($898) & 65535);
   var $900=$i23;
   var $901=$3;
   var $902=(($901+($900<<1))|0);
   HEAP16[(($902)>>1)]=$899;
   label = 166; break;
  case 166: 
   var $904=$i23;
   var $905=((($904)+(1))|0);
   $i23=$905;
   label = 161; break;
  case 167: 
   label = 168; break;
  case 168: 
   var $908=$2;
   var $909=$_src22;
   var $910=(($909+($908<<3))|0);
   $_src22=$910;
   var $911=$4;
   var $912=$3;
   var $913=(($912+($911<<1))|0);
   $3=$913;
   label = 143; break;
  case 169: 
   label = 170; break;
  case 170: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvCvtTo_32s_C1RPKhiPii6CvSizei($src, $srcstep, $dst, $dststep, $size, $param) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $srctype;
   var $_src;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $i3;
   var $t04;
   var $t15;
   var $t06;
   var $_src7;
   var $i8;
   var $t09;
   var $t110;
   var $t011;
   var $_src12;
   var $i13;
   var $t014;
   var $t115;
   var $t016;
   var $_src17;
   var $i18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $i23;
   var $t024;
   var $t125;
   var $t026;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$param;
   var $6=$5;
   $srctype=$6;
   var $7=$4;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $4=$8;
   var $9=$srctype;
   var $10=$9 & 7;
   if ((($10)|(0))==0) {
    label = 2; break;
   }
   else if ((($10)|(0))==1) {
    label = 15; break;
   }
   else if ((($10)|(0))==2) {
    label = 28; break;
   }
   else if ((($10)|(0))==3) {
    label = 41; break;
   }
   else if ((($10)|(0))==5) {
    label = 54; break;
   }
   else if ((($10)|(0))==6) {
    label = 67; break;
   }
   else {
   label = 80; break;
   }
  case 2: 
   var $12=$1;
   $_src=$12;
   var $13=$2;
   var $14=(((($13)>>>(0)))&-1);
   $2=$14;
   label = 3; break;
  case 3: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 14; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $22=$i;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $28=$i;
   var $29=$_src;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   $t0=$32;
   var $33=$i;
   var $34=((($33)+(1))|0);
   var $35=$_src;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   $t1=$38;
   var $39=$t0;
   var $40=$i;
   var $41=$3;
   var $42=(($41+($40<<2))|0);
   HEAP32[(($42)>>2)]=$39;
   var $43=$t1;
   var $44=$i;
   var $45=((($44)+(1))|0);
   var $46=$3;
   var $47=(($46+($45<<2))|0);
   HEAP32[(($47)>>2)]=$43;
   var $48=$i;
   var $49=((($48)+(2))|0);
   var $50=$_src;
   var $51=(($50+$49)|0);
   var $52=HEAP8[($51)];
   var $53=(($52)&(255));
   $t0=$53;
   var $54=$i;
   var $55=((($54)+(3))|0);
   var $56=$_src;
   var $57=(($56+$55)|0);
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   $t1=$59;
   var $60=$t0;
   var $61=$i;
   var $62=((($61)+(2))|0);
   var $63=$3;
   var $64=(($63+($62<<2))|0);
   HEAP32[(($64)>>2)]=$60;
   var $65=$t1;
   var $66=$i;
   var $67=((($66)+(3))|0);
   var $68=$3;
   var $69=(($68+($67<<2))|0);
   HEAP32[(($69)>>2)]=$65;
   label = 7; break;
  case 7: 
   var $71=$i;
   var $72=((($71)+(4))|0);
   $i=$72;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $75=$i;
   var $76=(($size)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75)|(0)) < (($77)|(0));
   if ($78) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $80=$i;
   var $81=$_src;
   var $82=(($81+$80)|0);
   var $83=HEAP8[($82)];
   var $84=(($83)&(255));
   $t01=$84;
   var $85=$t01;
   var $86=$i;
   var $87=$3;
   var $88=(($87+($86<<2))|0);
   HEAP32[(($88)>>2)]=$85;
   label = 11; break;
  case 11: 
   var $90=$i;
   var $91=((($90)+(1))|0);
   $i=$91;
   label = 9; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $94=$2;
   var $95=$_src;
   var $96=(($95+$94)|0);
   $_src=$96;
   var $97=$4;
   var $98=$3;
   var $99=(($98+($97<<2))|0);
   $3=$99;
   label = 3; break;
  case 14: 
   label = 80; break;
  case 15: 
   var $102=$1;
   $_src2=$102;
   var $103=$2;
   var $104=(((($103)>>>(0)))&-1);
   $2=$104;
   label = 16; break;
  case 16: 
   var $106=(($size+4)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=((($107)-(1))|0);
   HEAP32[(($106)>>2)]=$108;
   var $109=(($107)|(0))!=0;
   if ($109) { label = 17; break; } else { label = 27; break; }
  case 17: 
   $i3=0;
   label = 18; break;
  case 18: 
   var $112=$i3;
   var $113=(($size)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=((($114)-(4))|0);
   var $116=(($112)|(0)) <= (($115)|(0));
   if ($116) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $118=$i3;
   var $119=$_src2;
   var $120=(($119+$118)|0);
   var $121=HEAP8[($120)];
   var $122=(($121 << 24) >> 24);
   $t04=$122;
   var $123=$i3;
   var $124=((($123)+(1))|0);
   var $125=$_src2;
   var $126=(($125+$124)|0);
   var $127=HEAP8[($126)];
   var $128=(($127 << 24) >> 24);
   $t15=$128;
   var $129=$t04;
   var $130=$i3;
   var $131=$3;
   var $132=(($131+($130<<2))|0);
   HEAP32[(($132)>>2)]=$129;
   var $133=$t15;
   var $134=$i3;
   var $135=((($134)+(1))|0);
   var $136=$3;
   var $137=(($136+($135<<2))|0);
   HEAP32[(($137)>>2)]=$133;
   var $138=$i3;
   var $139=((($138)+(2))|0);
   var $140=$_src2;
   var $141=(($140+$139)|0);
   var $142=HEAP8[($141)];
   var $143=(($142 << 24) >> 24);
   $t04=$143;
   var $144=$i3;
   var $145=((($144)+(3))|0);
   var $146=$_src2;
   var $147=(($146+$145)|0);
   var $148=HEAP8[($147)];
   var $149=(($148 << 24) >> 24);
   $t15=$149;
   var $150=$t04;
   var $151=$i3;
   var $152=((($151)+(2))|0);
   var $153=$3;
   var $154=(($153+($152<<2))|0);
   HEAP32[(($154)>>2)]=$150;
   var $155=$t15;
   var $156=$i3;
   var $157=((($156)+(3))|0);
   var $158=$3;
   var $159=(($158+($157<<2))|0);
   HEAP32[(($159)>>2)]=$155;
   label = 20; break;
  case 20: 
   var $161=$i3;
   var $162=((($161)+(4))|0);
   $i3=$162;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $165=$i3;
   var $166=(($size)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($165)|(0)) < (($167)|(0));
   if ($168) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $170=$i3;
   var $171=$_src2;
   var $172=(($171+$170)|0);
   var $173=HEAP8[($172)];
   var $174=(($173 << 24) >> 24);
   $t06=$174;
   var $175=$t06;
   var $176=$i3;
   var $177=$3;
   var $178=(($177+($176<<2))|0);
   HEAP32[(($178)>>2)]=$175;
   label = 24; break;
  case 24: 
   var $180=$i3;
   var $181=((($180)+(1))|0);
   $i3=$181;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $184=$2;
   var $185=$_src2;
   var $186=(($185+$184)|0);
   $_src2=$186;
   var $187=$4;
   var $188=$3;
   var $189=(($188+($187<<2))|0);
   $3=$189;
   label = 16; break;
  case 27: 
   label = 80; break;
  case 28: 
   var $192=$1;
   var $193=$192;
   $_src7=$193;
   var $194=$2;
   var $195=((((($194)>>>(0)))/(2))&-1);
   $2=$195;
   label = 29; break;
  case 29: 
   var $197=(($size+4)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=((($198)-(1))|0);
   HEAP32[(($197)>>2)]=$199;
   var $200=(($198)|(0))!=0;
   if ($200) { label = 30; break; } else { label = 40; break; }
  case 30: 
   $i8=0;
   label = 31; break;
  case 31: 
   var $203=$i8;
   var $204=(($size)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=((($205)-(4))|0);
   var $207=(($203)|(0)) <= (($206)|(0));
   if ($207) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $209=$i8;
   var $210=$_src7;
   var $211=(($210+($209<<1))|0);
   var $212=HEAP16[(($211)>>1)];
   var $213=(($212)&(65535));
   $t09=$213;
   var $214=$i8;
   var $215=((($214)+(1))|0);
   var $216=$_src7;
   var $217=(($216+($215<<1))|0);
   var $218=HEAP16[(($217)>>1)];
   var $219=(($218)&(65535));
   $t110=$219;
   var $220=$t09;
   var $221=$i8;
   var $222=$3;
   var $223=(($222+($221<<2))|0);
   HEAP32[(($223)>>2)]=$220;
   var $224=$t110;
   var $225=$i8;
   var $226=((($225)+(1))|0);
   var $227=$3;
   var $228=(($227+($226<<2))|0);
   HEAP32[(($228)>>2)]=$224;
   var $229=$i8;
   var $230=((($229)+(2))|0);
   var $231=$_src7;
   var $232=(($231+($230<<1))|0);
   var $233=HEAP16[(($232)>>1)];
   var $234=(($233)&(65535));
   $t09=$234;
   var $235=$i8;
   var $236=((($235)+(3))|0);
   var $237=$_src7;
   var $238=(($237+($236<<1))|0);
   var $239=HEAP16[(($238)>>1)];
   var $240=(($239)&(65535));
   $t110=$240;
   var $241=$t09;
   var $242=$i8;
   var $243=((($242)+(2))|0);
   var $244=$3;
   var $245=(($244+($243<<2))|0);
   HEAP32[(($245)>>2)]=$241;
   var $246=$t110;
   var $247=$i8;
   var $248=((($247)+(3))|0);
   var $249=$3;
   var $250=(($249+($248<<2))|0);
   HEAP32[(($250)>>2)]=$246;
   label = 33; break;
  case 33: 
   var $252=$i8;
   var $253=((($252)+(4))|0);
   $i8=$253;
   label = 31; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $256=$i8;
   var $257=(($size)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=(($256)|(0)) < (($258)|(0));
   if ($259) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $261=$i8;
   var $262=$_src7;
   var $263=(($262+($261<<1))|0);
   var $264=HEAP16[(($263)>>1)];
   var $265=(($264)&(65535));
   $t011=$265;
   var $266=$t011;
   var $267=$i8;
   var $268=$3;
   var $269=(($268+($267<<2))|0);
   HEAP32[(($269)>>2)]=$266;
   label = 37; break;
  case 37: 
   var $271=$i8;
   var $272=((($271)+(1))|0);
   $i8=$272;
   label = 35; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $275=$2;
   var $276=$_src7;
   var $277=(($276+($275<<1))|0);
   $_src7=$277;
   var $278=$4;
   var $279=$3;
   var $280=(($279+($278<<2))|0);
   $3=$280;
   label = 29; break;
  case 40: 
   label = 80; break;
  case 41: 
   var $283=$1;
   var $284=$283;
   $_src12=$284;
   var $285=$2;
   var $286=((((($285)>>>(0)))/(2))&-1);
   $2=$286;
   label = 42; break;
  case 42: 
   var $288=(($size+4)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=((($289)-(1))|0);
   HEAP32[(($288)>>2)]=$290;
   var $291=(($289)|(0))!=0;
   if ($291) { label = 43; break; } else { label = 53; break; }
  case 43: 
   $i13=0;
   label = 44; break;
  case 44: 
   var $294=$i13;
   var $295=(($size)|0);
   var $296=HEAP32[(($295)>>2)];
   var $297=((($296)-(4))|0);
   var $298=(($294)|(0)) <= (($297)|(0));
   if ($298) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $300=$i13;
   var $301=$_src12;
   var $302=(($301+($300<<1))|0);
   var $303=HEAP16[(($302)>>1)];
   var $304=(($303 << 16) >> 16);
   $t014=$304;
   var $305=$i13;
   var $306=((($305)+(1))|0);
   var $307=$_src12;
   var $308=(($307+($306<<1))|0);
   var $309=HEAP16[(($308)>>1)];
   var $310=(($309 << 16) >> 16);
   $t115=$310;
   var $311=$t014;
   var $312=$i13;
   var $313=$3;
   var $314=(($313+($312<<2))|0);
   HEAP32[(($314)>>2)]=$311;
   var $315=$t115;
   var $316=$i13;
   var $317=((($316)+(1))|0);
   var $318=$3;
   var $319=(($318+($317<<2))|0);
   HEAP32[(($319)>>2)]=$315;
   var $320=$i13;
   var $321=((($320)+(2))|0);
   var $322=$_src12;
   var $323=(($322+($321<<1))|0);
   var $324=HEAP16[(($323)>>1)];
   var $325=(($324 << 16) >> 16);
   $t014=$325;
   var $326=$i13;
   var $327=((($326)+(3))|0);
   var $328=$_src12;
   var $329=(($328+($327<<1))|0);
   var $330=HEAP16[(($329)>>1)];
   var $331=(($330 << 16) >> 16);
   $t115=$331;
   var $332=$t014;
   var $333=$i13;
   var $334=((($333)+(2))|0);
   var $335=$3;
   var $336=(($335+($334<<2))|0);
   HEAP32[(($336)>>2)]=$332;
   var $337=$t115;
   var $338=$i13;
   var $339=((($338)+(3))|0);
   var $340=$3;
   var $341=(($340+($339<<2))|0);
   HEAP32[(($341)>>2)]=$337;
   label = 46; break;
  case 46: 
   var $343=$i13;
   var $344=((($343)+(4))|0);
   $i13=$344;
   label = 44; break;
  case 47: 
   label = 48; break;
  case 48: 
   var $347=$i13;
   var $348=(($size)|0);
   var $349=HEAP32[(($348)>>2)];
   var $350=(($347)|(0)) < (($349)|(0));
   if ($350) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $352=$i13;
   var $353=$_src12;
   var $354=(($353+($352<<1))|0);
   var $355=HEAP16[(($354)>>1)];
   var $356=(($355 << 16) >> 16);
   $t016=$356;
   var $357=$t016;
   var $358=$i13;
   var $359=$3;
   var $360=(($359+($358<<2))|0);
   HEAP32[(($360)>>2)]=$357;
   label = 50; break;
  case 50: 
   var $362=$i13;
   var $363=((($362)+(1))|0);
   $i13=$363;
   label = 48; break;
  case 51: 
   label = 52; break;
  case 52: 
   var $366=$2;
   var $367=$_src12;
   var $368=(($367+($366<<1))|0);
   $_src12=$368;
   var $369=$4;
   var $370=$3;
   var $371=(($370+($369<<2))|0);
   $3=$371;
   label = 42; break;
  case 53: 
   label = 80; break;
  case 54: 
   var $374=$1;
   var $375=$374;
   $_src17=$375;
   var $376=$2;
   var $377=((((($376)>>>(0)))/(4))&-1);
   $2=$377;
   label = 55; break;
  case 55: 
   var $379=(($size+4)|0);
   var $380=HEAP32[(($379)>>2)];
   var $381=((($380)-(1))|0);
   HEAP32[(($379)>>2)]=$381;
   var $382=(($380)|(0))!=0;
   if ($382) { label = 56; break; } else { label = 66; break; }
  case 56: 
   $i18=0;
   label = 57; break;
  case 57: 
   var $385=$i18;
   var $386=(($size)|0);
   var $387=HEAP32[(($386)>>2)];
   var $388=((($387)-(4))|0);
   var $389=(($385)|(0)) <= (($388)|(0));
   if ($389) { label = 58; break; } else { label = 60; break; }
  case 58: 
   var $391=$i18;
   var $392=$_src17;
   var $393=(($392+($391<<2))|0);
   var $394=HEAPF32[(($393)>>2)];
   var $395=$394;
   var $396=__Z7cvRoundd($395);
   $t019=$396;
   var $397=$i18;
   var $398=((($397)+(1))|0);
   var $399=$_src17;
   var $400=(($399+($398<<2))|0);
   var $401=HEAPF32[(($400)>>2)];
   var $402=$401;
   var $403=__Z7cvRoundd($402);
   $t120=$403;
   var $404=$t019;
   var $405=$i18;
   var $406=$3;
   var $407=(($406+($405<<2))|0);
   HEAP32[(($407)>>2)]=$404;
   var $408=$t120;
   var $409=$i18;
   var $410=((($409)+(1))|0);
   var $411=$3;
   var $412=(($411+($410<<2))|0);
   HEAP32[(($412)>>2)]=$408;
   var $413=$i18;
   var $414=((($413)+(2))|0);
   var $415=$_src17;
   var $416=(($415+($414<<2))|0);
   var $417=HEAPF32[(($416)>>2)];
   var $418=$417;
   var $419=__Z7cvRoundd($418);
   $t019=$419;
   var $420=$i18;
   var $421=((($420)+(3))|0);
   var $422=$_src17;
   var $423=(($422+($421<<2))|0);
   var $424=HEAPF32[(($423)>>2)];
   var $425=$424;
   var $426=__Z7cvRoundd($425);
   $t120=$426;
   var $427=$t019;
   var $428=$i18;
   var $429=((($428)+(2))|0);
   var $430=$3;
   var $431=(($430+($429<<2))|0);
   HEAP32[(($431)>>2)]=$427;
   var $432=$t120;
   var $433=$i18;
   var $434=((($433)+(3))|0);
   var $435=$3;
   var $436=(($435+($434<<2))|0);
   HEAP32[(($436)>>2)]=$432;
   label = 59; break;
  case 59: 
   var $438=$i18;
   var $439=((($438)+(4))|0);
   $i18=$439;
   label = 57; break;
  case 60: 
   label = 61; break;
  case 61: 
   var $442=$i18;
   var $443=(($size)|0);
   var $444=HEAP32[(($443)>>2)];
   var $445=(($442)|(0)) < (($444)|(0));
   if ($445) { label = 62; break; } else { label = 64; break; }
  case 62: 
   var $447=$i18;
   var $448=$_src17;
   var $449=(($448+($447<<2))|0);
   var $450=HEAPF32[(($449)>>2)];
   var $451=$450;
   var $452=__Z7cvRoundd($451);
   $t021=$452;
   var $453=$t021;
   var $454=$i18;
   var $455=$3;
   var $456=(($455+($454<<2))|0);
   HEAP32[(($456)>>2)]=$453;
   label = 63; break;
  case 63: 
   var $458=$i18;
   var $459=((($458)+(1))|0);
   $i18=$459;
   label = 61; break;
  case 64: 
   label = 65; break;
  case 65: 
   var $462=$2;
   var $463=$_src17;
   var $464=(($463+($462<<2))|0);
   $_src17=$464;
   var $465=$4;
   var $466=$3;
   var $467=(($466+($465<<2))|0);
   $3=$467;
   label = 55; break;
  case 66: 
   label = 80; break;
  case 67: 
   var $470=$1;
   var $471=$470;
   $_src22=$471;
   var $472=$2;
   var $473=((((($472)>>>(0)))/(8))&-1);
   $2=$473;
   label = 68; break;
  case 68: 
   var $475=(($size+4)|0);
   var $476=HEAP32[(($475)>>2)];
   var $477=((($476)-(1))|0);
   HEAP32[(($475)>>2)]=$477;
   var $478=(($476)|(0))!=0;
   if ($478) { label = 69; break; } else { label = 79; break; }
  case 69: 
   $i23=0;
   label = 70; break;
  case 70: 
   var $481=$i23;
   var $482=(($size)|0);
   var $483=HEAP32[(($482)>>2)];
   var $484=((($483)-(4))|0);
   var $485=(($481)|(0)) <= (($484)|(0));
   if ($485) { label = 71; break; } else { label = 73; break; }
  case 71: 
   var $487=$i23;
   var $488=$_src22;
   var $489=(($488+($487<<3))|0);
   var $490=HEAPF64[(($489)>>3)];
   var $491=__Z7cvRoundd($490);
   $t024=$491;
   var $492=$i23;
   var $493=((($492)+(1))|0);
   var $494=$_src22;
   var $495=(($494+($493<<3))|0);
   var $496=HEAPF64[(($495)>>3)];
   var $497=__Z7cvRoundd($496);
   $t125=$497;
   var $498=$t024;
   var $499=$i23;
   var $500=$3;
   var $501=(($500+($499<<2))|0);
   HEAP32[(($501)>>2)]=$498;
   var $502=$t125;
   var $503=$i23;
   var $504=((($503)+(1))|0);
   var $505=$3;
   var $506=(($505+($504<<2))|0);
   HEAP32[(($506)>>2)]=$502;
   var $507=$i23;
   var $508=((($507)+(2))|0);
   var $509=$_src22;
   var $510=(($509+($508<<3))|0);
   var $511=HEAPF64[(($510)>>3)];
   var $512=__Z7cvRoundd($511);
   $t024=$512;
   var $513=$i23;
   var $514=((($513)+(3))|0);
   var $515=$_src22;
   var $516=(($515+($514<<3))|0);
   var $517=HEAPF64[(($516)>>3)];
   var $518=__Z7cvRoundd($517);
   $t125=$518;
   var $519=$t024;
   var $520=$i23;
   var $521=((($520)+(2))|0);
   var $522=$3;
   var $523=(($522+($521<<2))|0);
   HEAP32[(($523)>>2)]=$519;
   var $524=$t125;
   var $525=$i23;
   var $526=((($525)+(3))|0);
   var $527=$3;
   var $528=(($527+($526<<2))|0);
   HEAP32[(($528)>>2)]=$524;
   label = 72; break;
  case 72: 
   var $530=$i23;
   var $531=((($530)+(4))|0);
   $i23=$531;
   label = 70; break;
  case 73: 
   label = 74; break;
  case 74: 
   var $534=$i23;
   var $535=(($size)|0);
   var $536=HEAP32[(($535)>>2)];
   var $537=(($534)|(0)) < (($536)|(0));
   if ($537) { label = 75; break; } else { label = 77; break; }
  case 75: 
   var $539=$i23;
   var $540=$_src22;
   var $541=(($540+($539<<3))|0);
   var $542=HEAPF64[(($541)>>3)];
   var $543=__Z7cvRoundd($542);
   $t026=$543;
   var $544=$t026;
   var $545=$i23;
   var $546=$3;
   var $547=(($546+($545<<2))|0);
   HEAP32[(($547)>>2)]=$544;
   label = 76; break;
  case 76: 
   var $549=$i23;
   var $550=((($549)+(1))|0);
   $i23=$550;
   label = 74; break;
  case 77: 
   label = 78; break;
  case 78: 
   var $553=$2;
   var $554=$_src22;
   var $555=(($554+($553<<3))|0);
   $_src22=$555;
   var $556=$4;
   var $557=$3;
   var $558=(($557+($556<<2))|0);
   $3=$558;
   label = 68; break;
  case 79: 
   label = 80; break;
  case 80: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvCvtTo_32f_C1RPKhiPfi6CvSizei($src, $srcstep, $dst, $dststep, $size, $param) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $srctype;
   var $_src;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $i3;
   var $t04;
   var $t15;
   var $t06;
   var $_src7;
   var $i8;
   var $t09;
   var $t110;
   var $t011;
   var $_src12;
   var $i13;
   var $t014;
   var $t115;
   var $t016;
   var $_src17;
   var $i18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $i23;
   var $t024;
   var $t125;
   var $t026;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$param;
   var $6=$5;
   $srctype=$6;
   var $7=$4;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $4=$8;
   var $9=$srctype;
   var $10=$9 & 7;
   if ((($10)|(0))==0) {
    label = 2; break;
   }
   else if ((($10)|(0))==1) {
    label = 15; break;
   }
   else if ((($10)|(0))==2) {
    label = 28; break;
   }
   else if ((($10)|(0))==3) {
    label = 41; break;
   }
   else if ((($10)|(0))==4) {
    label = 54; break;
   }
   else if ((($10)|(0))==6) {
    label = 67; break;
   }
   else {
   label = 80; break;
   }
  case 2: 
   var $12=$1;
   $_src=$12;
   var $13=$2;
   var $14=(((($13)>>>(0)))&-1);
   $2=$14;
   label = 3; break;
  case 3: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 14; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $22=$i;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $28=$i;
   var $29=$_src;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   var $33=((($32)+(128))|0);
   var $34=((4224+($33<<2))|0);
   var $35=(copyTempFloat($34),HEAPF32[((tempDoublePtr)>>2)]);
   $t0=$35;
   var $36=$i;
   var $37=((($36)+(1))|0);
   var $38=$_src;
   var $39=(($38+$37)|0);
   var $40=HEAP8[($39)];
   var $41=(($40)&(255));
   var $42=((($41)+(128))|0);
   var $43=((4224+($42<<2))|0);
   var $44=(copyTempFloat($43),HEAPF32[((tempDoublePtr)>>2)]);
   $t1=$44;
   var $45=$t0;
   var $46=$i;
   var $47=$3;
   var $48=(($47+($46<<2))|0);
   HEAPF32[(($48)>>2)]=$45;
   var $49=$t1;
   var $50=$i;
   var $51=((($50)+(1))|0);
   var $52=$3;
   var $53=(($52+($51<<2))|0);
   HEAPF32[(($53)>>2)]=$49;
   var $54=$i;
   var $55=((($54)+(2))|0);
   var $56=$_src;
   var $57=(($56+$55)|0);
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=((($59)+(128))|0);
   var $61=((4224+($60<<2))|0);
   var $62=(copyTempFloat($61),HEAPF32[((tempDoublePtr)>>2)]);
   $t0=$62;
   var $63=$i;
   var $64=((($63)+(3))|0);
   var $65=$_src;
   var $66=(($65+$64)|0);
   var $67=HEAP8[($66)];
   var $68=(($67)&(255));
   var $69=((($68)+(128))|0);
   var $70=((4224+($69<<2))|0);
   var $71=(copyTempFloat($70),HEAPF32[((tempDoublePtr)>>2)]);
   $t1=$71;
   var $72=$t0;
   var $73=$i;
   var $74=((($73)+(2))|0);
   var $75=$3;
   var $76=(($75+($74<<2))|0);
   HEAPF32[(($76)>>2)]=$72;
   var $77=$t1;
   var $78=$i;
   var $79=((($78)+(3))|0);
   var $80=$3;
   var $81=(($80+($79<<2))|0);
   HEAPF32[(($81)>>2)]=$77;
   label = 7; break;
  case 7: 
   var $83=$i;
   var $84=((($83)+(4))|0);
   $i=$84;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $87=$i;
   var $88=(($size)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($87)|(0)) < (($89)|(0));
   if ($90) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $92=$i;
   var $93=$_src;
   var $94=(($93+$92)|0);
   var $95=HEAP8[($94)];
   var $96=(($95)&(255));
   var $97=((($96)+(128))|0);
   var $98=((4224+($97<<2))|0);
   var $99=(copyTempFloat($98),HEAPF32[((tempDoublePtr)>>2)]);
   $t01=$99;
   var $100=$t01;
   var $101=$i;
   var $102=$3;
   var $103=(($102+($101<<2))|0);
   HEAPF32[(($103)>>2)]=$100;
   label = 11; break;
  case 11: 
   var $105=$i;
   var $106=((($105)+(1))|0);
   $i=$106;
   label = 9; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $109=$2;
   var $110=$_src;
   var $111=(($110+$109)|0);
   $_src=$111;
   var $112=$4;
   var $113=$3;
   var $114=(($113+($112<<2))|0);
   $3=$114;
   label = 3; break;
  case 14: 
   label = 80; break;
  case 15: 
   var $117=$1;
   $_src2=$117;
   var $118=$2;
   var $119=(((($118)>>>(0)))&-1);
   $2=$119;
   label = 16; break;
  case 16: 
   var $121=(($size+4)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=((($122)-(1))|0);
   HEAP32[(($121)>>2)]=$123;
   var $124=(($122)|(0))!=0;
   if ($124) { label = 17; break; } else { label = 27; break; }
  case 17: 
   $i3=0;
   label = 18; break;
  case 18: 
   var $127=$i3;
   var $128=(($size)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=((($129)-(4))|0);
   var $131=(($127)|(0)) <= (($130)|(0));
   if ($131) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $133=$i3;
   var $134=$_src2;
   var $135=(($134+$133)|0);
   var $136=HEAP8[($135)];
   var $137=(($136 << 24) >> 24);
   var $138=((($137)+(128))|0);
   var $139=((4224+($138<<2))|0);
   var $140=(copyTempFloat($139),HEAPF32[((tempDoublePtr)>>2)]);
   $t04=$140;
   var $141=$i3;
   var $142=((($141)+(1))|0);
   var $143=$_src2;
   var $144=(($143+$142)|0);
   var $145=HEAP8[($144)];
   var $146=(($145 << 24) >> 24);
   var $147=((($146)+(128))|0);
   var $148=((4224+($147<<2))|0);
   var $149=(copyTempFloat($148),HEAPF32[((tempDoublePtr)>>2)]);
   $t15=$149;
   var $150=$t04;
   var $151=$i3;
   var $152=$3;
   var $153=(($152+($151<<2))|0);
   HEAPF32[(($153)>>2)]=$150;
   var $154=$t15;
   var $155=$i3;
   var $156=((($155)+(1))|0);
   var $157=$3;
   var $158=(($157+($156<<2))|0);
   HEAPF32[(($158)>>2)]=$154;
   var $159=$i3;
   var $160=((($159)+(2))|0);
   var $161=$_src2;
   var $162=(($161+$160)|0);
   var $163=HEAP8[($162)];
   var $164=(($163 << 24) >> 24);
   var $165=((($164)+(128))|0);
   var $166=((4224+($165<<2))|0);
   var $167=(copyTempFloat($166),HEAPF32[((tempDoublePtr)>>2)]);
   $t04=$167;
   var $168=$i3;
   var $169=((($168)+(3))|0);
   var $170=$_src2;
   var $171=(($170+$169)|0);
   var $172=HEAP8[($171)];
   var $173=(($172 << 24) >> 24);
   var $174=((($173)+(128))|0);
   var $175=((4224+($174<<2))|0);
   var $176=(copyTempFloat($175),HEAPF32[((tempDoublePtr)>>2)]);
   $t15=$176;
   var $177=$t04;
   var $178=$i3;
   var $179=((($178)+(2))|0);
   var $180=$3;
   var $181=(($180+($179<<2))|0);
   HEAPF32[(($181)>>2)]=$177;
   var $182=$t15;
   var $183=$i3;
   var $184=((($183)+(3))|0);
   var $185=$3;
   var $186=(($185+($184<<2))|0);
   HEAPF32[(($186)>>2)]=$182;
   label = 20; break;
  case 20: 
   var $188=$i3;
   var $189=((($188)+(4))|0);
   $i3=$189;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $192=$i3;
   var $193=(($size)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=(($192)|(0)) < (($194)|(0));
   if ($195) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $197=$i3;
   var $198=$_src2;
   var $199=(($198+$197)|0);
   var $200=HEAP8[($199)];
   var $201=(($200 << 24) >> 24);
   var $202=((($201)+(128))|0);
   var $203=((4224+($202<<2))|0);
   var $204=(copyTempFloat($203),HEAPF32[((tempDoublePtr)>>2)]);
   $t06=$204;
   var $205=$t06;
   var $206=$i3;
   var $207=$3;
   var $208=(($207+($206<<2))|0);
   HEAPF32[(($208)>>2)]=$205;
   label = 24; break;
  case 24: 
   var $210=$i3;
   var $211=((($210)+(1))|0);
   $i3=$211;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $214=$2;
   var $215=$_src2;
   var $216=(($215+$214)|0);
   $_src2=$216;
   var $217=$4;
   var $218=$3;
   var $219=(($218+($217<<2))|0);
   $3=$219;
   label = 16; break;
  case 27: 
   label = 80; break;
  case 28: 
   var $222=$1;
   var $223=$222;
   $_src7=$223;
   var $224=$2;
   var $225=((((($224)>>>(0)))/(2))&-1);
   $2=$225;
   label = 29; break;
  case 29: 
   var $227=(($size+4)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=((($228)-(1))|0);
   HEAP32[(($227)>>2)]=$229;
   var $230=(($228)|(0))!=0;
   if ($230) { label = 30; break; } else { label = 40; break; }
  case 30: 
   $i8=0;
   label = 31; break;
  case 31: 
   var $233=$i8;
   var $234=(($size)|0);
   var $235=HEAP32[(($234)>>2)];
   var $236=((($235)-(4))|0);
   var $237=(($233)|(0)) <= (($236)|(0));
   if ($237) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $239=$i8;
   var $240=$_src7;
   var $241=(($240+($239<<1))|0);
   var $242=HEAP16[(($241)>>1)];
   var $243=(($242)&(65535));
   $t09=$243;
   var $244=$i8;
   var $245=((($244)+(1))|0);
   var $246=$_src7;
   var $247=(($246+($245<<1))|0);
   var $248=HEAP16[(($247)>>1)];
   var $249=(($248)&(65535));
   $t110=$249;
   var $250=$t09;
   var $251=$i8;
   var $252=$3;
   var $253=(($252+($251<<2))|0);
   HEAPF32[(($253)>>2)]=$250;
   var $254=$t110;
   var $255=$i8;
   var $256=((($255)+(1))|0);
   var $257=$3;
   var $258=(($257+($256<<2))|0);
   HEAPF32[(($258)>>2)]=$254;
   var $259=$i8;
   var $260=((($259)+(2))|0);
   var $261=$_src7;
   var $262=(($261+($260<<1))|0);
   var $263=HEAP16[(($262)>>1)];
   var $264=(($263)&(65535));
   $t09=$264;
   var $265=$i8;
   var $266=((($265)+(3))|0);
   var $267=$_src7;
   var $268=(($267+($266<<1))|0);
   var $269=HEAP16[(($268)>>1)];
   var $270=(($269)&(65535));
   $t110=$270;
   var $271=$t09;
   var $272=$i8;
   var $273=((($272)+(2))|0);
   var $274=$3;
   var $275=(($274+($273<<2))|0);
   HEAPF32[(($275)>>2)]=$271;
   var $276=$t110;
   var $277=$i8;
   var $278=((($277)+(3))|0);
   var $279=$3;
   var $280=(($279+($278<<2))|0);
   HEAPF32[(($280)>>2)]=$276;
   label = 33; break;
  case 33: 
   var $282=$i8;
   var $283=((($282)+(4))|0);
   $i8=$283;
   label = 31; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $286=$i8;
   var $287=(($size)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=(($286)|(0)) < (($288)|(0));
   if ($289) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $291=$i8;
   var $292=$_src7;
   var $293=(($292+($291<<1))|0);
   var $294=HEAP16[(($293)>>1)];
   var $295=(($294)&(65535));
   $t011=$295;
   var $296=$t011;
   var $297=$i8;
   var $298=$3;
   var $299=(($298+($297<<2))|0);
   HEAPF32[(($299)>>2)]=$296;
   label = 37; break;
  case 37: 
   var $301=$i8;
   var $302=((($301)+(1))|0);
   $i8=$302;
   label = 35; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $305=$2;
   var $306=$_src7;
   var $307=(($306+($305<<1))|0);
   $_src7=$307;
   var $308=$4;
   var $309=$3;
   var $310=(($309+($308<<2))|0);
   $3=$310;
   label = 29; break;
  case 40: 
   label = 80; break;
  case 41: 
   var $313=$1;
   var $314=$313;
   $_src12=$314;
   var $315=$2;
   var $316=((((($315)>>>(0)))/(2))&-1);
   $2=$316;
   label = 42; break;
  case 42: 
   var $318=(($size+4)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=((($319)-(1))|0);
   HEAP32[(($318)>>2)]=$320;
   var $321=(($319)|(0))!=0;
   if ($321) { label = 43; break; } else { label = 53; break; }
  case 43: 
   $i13=0;
   label = 44; break;
  case 44: 
   var $324=$i13;
   var $325=(($size)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327=((($326)-(4))|0);
   var $328=(($324)|(0)) <= (($327)|(0));
   if ($328) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $330=$i13;
   var $331=$_src12;
   var $332=(($331+($330<<1))|0);
   var $333=HEAP16[(($332)>>1)];
   var $334=(($333 << 16) >> 16);
   $t014=$334;
   var $335=$i13;
   var $336=((($335)+(1))|0);
   var $337=$_src12;
   var $338=(($337+($336<<1))|0);
   var $339=HEAP16[(($338)>>1)];
   var $340=(($339 << 16) >> 16);
   $t115=$340;
   var $341=$t014;
   var $342=$i13;
   var $343=$3;
   var $344=(($343+($342<<2))|0);
   HEAPF32[(($344)>>2)]=$341;
   var $345=$t115;
   var $346=$i13;
   var $347=((($346)+(1))|0);
   var $348=$3;
   var $349=(($348+($347<<2))|0);
   HEAPF32[(($349)>>2)]=$345;
   var $350=$i13;
   var $351=((($350)+(2))|0);
   var $352=$_src12;
   var $353=(($352+($351<<1))|0);
   var $354=HEAP16[(($353)>>1)];
   var $355=(($354 << 16) >> 16);
   $t014=$355;
   var $356=$i13;
   var $357=((($356)+(3))|0);
   var $358=$_src12;
   var $359=(($358+($357<<1))|0);
   var $360=HEAP16[(($359)>>1)];
   var $361=(($360 << 16) >> 16);
   $t115=$361;
   var $362=$t014;
   var $363=$i13;
   var $364=((($363)+(2))|0);
   var $365=$3;
   var $366=(($365+($364<<2))|0);
   HEAPF32[(($366)>>2)]=$362;
   var $367=$t115;
   var $368=$i13;
   var $369=((($368)+(3))|0);
   var $370=$3;
   var $371=(($370+($369<<2))|0);
   HEAPF32[(($371)>>2)]=$367;
   label = 46; break;
  case 46: 
   var $373=$i13;
   var $374=((($373)+(4))|0);
   $i13=$374;
   label = 44; break;
  case 47: 
   label = 48; break;
  case 48: 
   var $377=$i13;
   var $378=(($size)|0);
   var $379=HEAP32[(($378)>>2)];
   var $380=(($377)|(0)) < (($379)|(0));
   if ($380) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $382=$i13;
   var $383=$_src12;
   var $384=(($383+($382<<1))|0);
   var $385=HEAP16[(($384)>>1)];
   var $386=(($385 << 16) >> 16);
   $t016=$386;
   var $387=$t016;
   var $388=$i13;
   var $389=$3;
   var $390=(($389+($388<<2))|0);
   HEAPF32[(($390)>>2)]=$387;
   label = 50; break;
  case 50: 
   var $392=$i13;
   var $393=((($392)+(1))|0);
   $i13=$393;
   label = 48; break;
  case 51: 
   label = 52; break;
  case 52: 
   var $396=$2;
   var $397=$_src12;
   var $398=(($397+($396<<1))|0);
   $_src12=$398;
   var $399=$4;
   var $400=$3;
   var $401=(($400+($399<<2))|0);
   $3=$401;
   label = 42; break;
  case 53: 
   label = 80; break;
  case 54: 
   var $404=$1;
   var $405=$404;
   $_src17=$405;
   var $406=$2;
   var $407=((((($406)>>>(0)))/(4))&-1);
   $2=$407;
   label = 55; break;
  case 55: 
   var $409=(($size+4)|0);
   var $410=HEAP32[(($409)>>2)];
   var $411=((($410)-(1))|0);
   HEAP32[(($409)>>2)]=$411;
   var $412=(($410)|(0))!=0;
   if ($412) { label = 56; break; } else { label = 66; break; }
  case 56: 
   $i18=0;
   label = 57; break;
  case 57: 
   var $415=$i18;
   var $416=(($size)|0);
   var $417=HEAP32[(($416)>>2)];
   var $418=((($417)-(4))|0);
   var $419=(($415)|(0)) <= (($418)|(0));
   if ($419) { label = 58; break; } else { label = 60; break; }
  case 58: 
   var $421=$i18;
   var $422=$_src17;
   var $423=(($422+($421<<2))|0);
   var $424=HEAP32[(($423)>>2)];
   var $425=(($424)|(0));
   $t019=$425;
   var $426=$i18;
   var $427=((($426)+(1))|0);
   var $428=$_src17;
   var $429=(($428+($427<<2))|0);
   var $430=HEAP32[(($429)>>2)];
   var $431=(($430)|(0));
   $t120=$431;
   var $432=$t019;
   var $433=$i18;
   var $434=$3;
   var $435=(($434+($433<<2))|0);
   HEAPF32[(($435)>>2)]=$432;
   var $436=$t120;
   var $437=$i18;
   var $438=((($437)+(1))|0);
   var $439=$3;
   var $440=(($439+($438<<2))|0);
   HEAPF32[(($440)>>2)]=$436;
   var $441=$i18;
   var $442=((($441)+(2))|0);
   var $443=$_src17;
   var $444=(($443+($442<<2))|0);
   var $445=HEAP32[(($444)>>2)];
   var $446=(($445)|(0));
   $t019=$446;
   var $447=$i18;
   var $448=((($447)+(3))|0);
   var $449=$_src17;
   var $450=(($449+($448<<2))|0);
   var $451=HEAP32[(($450)>>2)];
   var $452=(($451)|(0));
   $t120=$452;
   var $453=$t019;
   var $454=$i18;
   var $455=((($454)+(2))|0);
   var $456=$3;
   var $457=(($456+($455<<2))|0);
   HEAPF32[(($457)>>2)]=$453;
   var $458=$t120;
   var $459=$i18;
   var $460=((($459)+(3))|0);
   var $461=$3;
   var $462=(($461+($460<<2))|0);
   HEAPF32[(($462)>>2)]=$458;
   label = 59; break;
  case 59: 
   var $464=$i18;
   var $465=((($464)+(4))|0);
   $i18=$465;
   label = 57; break;
  case 60: 
   label = 61; break;
  case 61: 
   var $468=$i18;
   var $469=(($size)|0);
   var $470=HEAP32[(($469)>>2)];
   var $471=(($468)|(0)) < (($470)|(0));
   if ($471) { label = 62; break; } else { label = 64; break; }
  case 62: 
   var $473=$i18;
   var $474=$_src17;
   var $475=(($474+($473<<2))|0);
   var $476=HEAP32[(($475)>>2)];
   var $477=(($476)|(0));
   $t021=$477;
   var $478=$t021;
   var $479=$i18;
   var $480=$3;
   var $481=(($480+($479<<2))|0);
   HEAPF32[(($481)>>2)]=$478;
   label = 63; break;
  case 63: 
   var $483=$i18;
   var $484=((($483)+(1))|0);
   $i18=$484;
   label = 61; break;
  case 64: 
   label = 65; break;
  case 65: 
   var $487=$2;
   var $488=$_src17;
   var $489=(($488+($487<<2))|0);
   $_src17=$489;
   var $490=$4;
   var $491=$3;
   var $492=(($491+($490<<2))|0);
   $3=$492;
   label = 55; break;
  case 66: 
   label = 80; break;
  case 67: 
   var $495=$1;
   var $496=$495;
   $_src22=$496;
   var $497=$2;
   var $498=((((($497)>>>(0)))/(8))&-1);
   $2=$498;
   label = 68; break;
  case 68: 
   var $500=(($size+4)|0);
   var $501=HEAP32[(($500)>>2)];
   var $502=((($501)-(1))|0);
   HEAP32[(($500)>>2)]=$502;
   var $503=(($501)|(0))!=0;
   if ($503) { label = 69; break; } else { label = 79; break; }
  case 69: 
   $i23=0;
   label = 70; break;
  case 70: 
   var $506=$i23;
   var $507=(($size)|0);
   var $508=HEAP32[(($507)>>2)];
   var $509=((($508)-(4))|0);
   var $510=(($506)|(0)) <= (($509)|(0));
   if ($510) { label = 71; break; } else { label = 73; break; }
  case 71: 
   var $512=$i23;
   var $513=$_src22;
   var $514=(($513+($512<<3))|0);
   var $515=HEAPF64[(($514)>>3)];
   var $516=$515;
   $t024=$516;
   var $517=$i23;
   var $518=((($517)+(1))|0);
   var $519=$_src22;
   var $520=(($519+($518<<3))|0);
   var $521=HEAPF64[(($520)>>3)];
   var $522=$521;
   $t125=$522;
   var $523=$t024;
   var $524=$i23;
   var $525=$3;
   var $526=(($525+($524<<2))|0);
   HEAPF32[(($526)>>2)]=$523;
   var $527=$t125;
   var $528=$i23;
   var $529=((($528)+(1))|0);
   var $530=$3;
   var $531=(($530+($529<<2))|0);
   HEAPF32[(($531)>>2)]=$527;
   var $532=$i23;
   var $533=((($532)+(2))|0);
   var $534=$_src22;
   var $535=(($534+($533<<3))|0);
   var $536=HEAPF64[(($535)>>3)];
   var $537=$536;
   $t024=$537;
   var $538=$i23;
   var $539=((($538)+(3))|0);
   var $540=$_src22;
   var $541=(($540+($539<<3))|0);
   var $542=HEAPF64[(($541)>>3)];
   var $543=$542;
   $t125=$543;
   var $544=$t024;
   var $545=$i23;
   var $546=((($545)+(2))|0);
   var $547=$3;
   var $548=(($547+($546<<2))|0);
   HEAPF32[(($548)>>2)]=$544;
   var $549=$t125;
   var $550=$i23;
   var $551=((($550)+(3))|0);
   var $552=$3;
   var $553=(($552+($551<<2))|0);
   HEAPF32[(($553)>>2)]=$549;
   label = 72; break;
  case 72: 
   var $555=$i23;
   var $556=((($555)+(4))|0);
   $i23=$556;
   label = 70; break;
  case 73: 
   label = 74; break;
  case 74: 
   var $559=$i23;
   var $560=(($size)|0);
   var $561=HEAP32[(($560)>>2)];
   var $562=(($559)|(0)) < (($561)|(0));
   if ($562) { label = 75; break; } else { label = 77; break; }
  case 75: 
   var $564=$i23;
   var $565=$_src22;
   var $566=(($565+($564<<3))|0);
   var $567=HEAPF64[(($566)>>3)];
   var $568=$567;
   $t026=$568;
   var $569=$t026;
   var $570=$i23;
   var $571=$3;
   var $572=(($571+($570<<2))|0);
   HEAPF32[(($572)>>2)]=$569;
   label = 76; break;
  case 76: 
   var $574=$i23;
   var $575=((($574)+(1))|0);
   $i23=$575;
   label = 74; break;
  case 77: 
   label = 78; break;
  case 78: 
   var $578=$2;
   var $579=$_src22;
   var $580=(($579+($578<<3))|0);
   $_src22=$580;
   var $581=$4;
   var $582=$3;
   var $583=(($582+($581<<2))|0);
   $3=$583;
   label = 68; break;
  case 79: 
   label = 80; break;
  case 80: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvCvtTo_64f_C1RPKhiPdi6CvSizei($src, $srcstep, $dst, $dststep, $size, $param) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $srctype;
   var $_src;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   var $_src2;
   var $i3;
   var $t04;
   var $t15;
   var $t06;
   var $_src7;
   var $i8;
   var $t09;
   var $t110;
   var $t011;
   var $_src12;
   var $i13;
   var $t014;
   var $t115;
   var $t016;
   var $_src17;
   var $i18;
   var $t019;
   var $t120;
   var $t021;
   var $_src22;
   var $i23;
   var $t024;
   var $t125;
   var $t026;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$param;
   var $6=$5;
   $srctype=$6;
   var $7=$4;
   var $8=((((($7)>>>(0)))/(8))&-1);
   $4=$8;
   var $9=$srctype;
   var $10=$9 & 7;
   if ((($10)|(0))==0) {
    label = 2; break;
   }
   else if ((($10)|(0))==1) {
    label = 15; break;
   }
   else if ((($10)|(0))==2) {
    label = 28; break;
   }
   else if ((($10)|(0))==3) {
    label = 41; break;
   }
   else if ((($10)|(0))==4) {
    label = 54; break;
   }
   else if ((($10)|(0))==5) {
    label = 67; break;
   }
   else {
   label = 80; break;
   }
  case 2: 
   var $12=$1;
   $_src=$12;
   var $13=$2;
   var $14=(((($13)>>>(0)))&-1);
   $2=$14;
   label = 3; break;
  case 3: 
   var $16=(($size+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=(($17)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 14; break; }
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $22=$i;
   var $23=(($size)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((($24)-(4))|0);
   var $26=(($22)|(0)) <= (($25)|(0));
   if ($26) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $28=$i;
   var $29=$_src;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   var $33=((($32)+(128))|0);
   var $34=((4224+($33<<2))|0);
   var $35=(copyTempFloat($34),HEAPF32[((tempDoublePtr)>>2)]);
   var $36=$35;
   $t0=$36;
   var $37=$i;
   var $38=((($37)+(1))|0);
   var $39=$_src;
   var $40=(($39+$38)|0);
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   var $43=((($42)+(128))|0);
   var $44=((4224+($43<<2))|0);
   var $45=(copyTempFloat($44),HEAPF32[((tempDoublePtr)>>2)]);
   var $46=$45;
   $t1=$46;
   var $47=$t0;
   var $48=$i;
   var $49=$3;
   var $50=(($49+($48<<3))|0);
   HEAPF64[(($50)>>3)]=$47;
   var $51=$t1;
   var $52=$i;
   var $53=((($52)+(1))|0);
   var $54=$3;
   var $55=(($54+($53<<3))|0);
   HEAPF64[(($55)>>3)]=$51;
   var $56=$i;
   var $57=((($56)+(2))|0);
   var $58=$_src;
   var $59=(($58+$57)|0);
   var $60=HEAP8[($59)];
   var $61=(($60)&(255));
   var $62=((($61)+(128))|0);
   var $63=((4224+($62<<2))|0);
   var $64=(copyTempFloat($63),HEAPF32[((tempDoublePtr)>>2)]);
   var $65=$64;
   $t0=$65;
   var $66=$i;
   var $67=((($66)+(3))|0);
   var $68=$_src;
   var $69=(($68+$67)|0);
   var $70=HEAP8[($69)];
   var $71=(($70)&(255));
   var $72=((($71)+(128))|0);
   var $73=((4224+($72<<2))|0);
   var $74=(copyTempFloat($73),HEAPF32[((tempDoublePtr)>>2)]);
   var $75=$74;
   $t1=$75;
   var $76=$t0;
   var $77=$i;
   var $78=((($77)+(2))|0);
   var $79=$3;
   var $80=(($79+($78<<3))|0);
   HEAPF64[(($80)>>3)]=$76;
   var $81=$t1;
   var $82=$i;
   var $83=((($82)+(3))|0);
   var $84=$3;
   var $85=(($84+($83<<3))|0);
   HEAPF64[(($85)>>3)]=$81;
   label = 7; break;
  case 7: 
   var $87=$i;
   var $88=((($87)+(4))|0);
   $i=$88;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $91=$i;
   var $92=(($size)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($91)|(0)) < (($93)|(0));
   if ($94) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $96=$i;
   var $97=$_src;
   var $98=(($97+$96)|0);
   var $99=HEAP8[($98)];
   var $100=(($99)&(255));
   var $101=((($100)+(128))|0);
   var $102=((4224+($101<<2))|0);
   var $103=(copyTempFloat($102),HEAPF32[((tempDoublePtr)>>2)]);
   var $104=$103;
   $t01=$104;
   var $105=$t01;
   var $106=$i;
   var $107=$3;
   var $108=(($107+($106<<3))|0);
   HEAPF64[(($108)>>3)]=$105;
   label = 11; break;
  case 11: 
   var $110=$i;
   var $111=((($110)+(1))|0);
   $i=$111;
   label = 9; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $114=$2;
   var $115=$_src;
   var $116=(($115+$114)|0);
   $_src=$116;
   var $117=$4;
   var $118=$3;
   var $119=(($118+($117<<3))|0);
   $3=$119;
   label = 3; break;
  case 14: 
   label = 80; break;
  case 15: 
   var $122=$1;
   $_src2=$122;
   var $123=$2;
   var $124=(((($123)>>>(0)))&-1);
   $2=$124;
   label = 16; break;
  case 16: 
   var $126=(($size+4)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=((($127)-(1))|0);
   HEAP32[(($126)>>2)]=$128;
   var $129=(($127)|(0))!=0;
   if ($129) { label = 17; break; } else { label = 27; break; }
  case 17: 
   $i3=0;
   label = 18; break;
  case 18: 
   var $132=$i3;
   var $133=(($size)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=((($134)-(4))|0);
   var $136=(($132)|(0)) <= (($135)|(0));
   if ($136) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $138=$i3;
   var $139=$_src2;
   var $140=(($139+$138)|0);
   var $141=HEAP8[($140)];
   var $142=(($141 << 24) >> 24);
   var $143=((($142)+(128))|0);
   var $144=((4224+($143<<2))|0);
   var $145=(copyTempFloat($144),HEAPF32[((tempDoublePtr)>>2)]);
   var $146=$145;
   $t04=$146;
   var $147=$i3;
   var $148=((($147)+(1))|0);
   var $149=$_src2;
   var $150=(($149+$148)|0);
   var $151=HEAP8[($150)];
   var $152=(($151 << 24) >> 24);
   var $153=((($152)+(128))|0);
   var $154=((4224+($153<<2))|0);
   var $155=(copyTempFloat($154),HEAPF32[((tempDoublePtr)>>2)]);
   var $156=$155;
   $t15=$156;
   var $157=$t04;
   var $158=$i3;
   var $159=$3;
   var $160=(($159+($158<<3))|0);
   HEAPF64[(($160)>>3)]=$157;
   var $161=$t15;
   var $162=$i3;
   var $163=((($162)+(1))|0);
   var $164=$3;
   var $165=(($164+($163<<3))|0);
   HEAPF64[(($165)>>3)]=$161;
   var $166=$i3;
   var $167=((($166)+(2))|0);
   var $168=$_src2;
   var $169=(($168+$167)|0);
   var $170=HEAP8[($169)];
   var $171=(($170 << 24) >> 24);
   var $172=((($171)+(128))|0);
   var $173=((4224+($172<<2))|0);
   var $174=(copyTempFloat($173),HEAPF32[((tempDoublePtr)>>2)]);
   var $175=$174;
   $t04=$175;
   var $176=$i3;
   var $177=((($176)+(3))|0);
   var $178=$_src2;
   var $179=(($178+$177)|0);
   var $180=HEAP8[($179)];
   var $181=(($180 << 24) >> 24);
   var $182=((($181)+(128))|0);
   var $183=((4224+($182<<2))|0);
   var $184=(copyTempFloat($183),HEAPF32[((tempDoublePtr)>>2)]);
   var $185=$184;
   $t15=$185;
   var $186=$t04;
   var $187=$i3;
   var $188=((($187)+(2))|0);
   var $189=$3;
   var $190=(($189+($188<<3))|0);
   HEAPF64[(($190)>>3)]=$186;
   var $191=$t15;
   var $192=$i3;
   var $193=((($192)+(3))|0);
   var $194=$3;
   var $195=(($194+($193<<3))|0);
   HEAPF64[(($195)>>3)]=$191;
   label = 20; break;
  case 20: 
   var $197=$i3;
   var $198=((($197)+(4))|0);
   $i3=$198;
   label = 18; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $201=$i3;
   var $202=(($size)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($201)|(0)) < (($203)|(0));
   if ($204) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $206=$i3;
   var $207=$_src2;
   var $208=(($207+$206)|0);
   var $209=HEAP8[($208)];
   var $210=(($209 << 24) >> 24);
   var $211=((($210)+(128))|0);
   var $212=((4224+($211<<2))|0);
   var $213=(copyTempFloat($212),HEAPF32[((tempDoublePtr)>>2)]);
   var $214=$213;
   $t06=$214;
   var $215=$t06;
   var $216=$i3;
   var $217=$3;
   var $218=(($217+($216<<3))|0);
   HEAPF64[(($218)>>3)]=$215;
   label = 24; break;
  case 24: 
   var $220=$i3;
   var $221=((($220)+(1))|0);
   $i3=$221;
   label = 22; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $224=$2;
   var $225=$_src2;
   var $226=(($225+$224)|0);
   $_src2=$226;
   var $227=$4;
   var $228=$3;
   var $229=(($228+($227<<3))|0);
   $3=$229;
   label = 16; break;
  case 27: 
   label = 80; break;
  case 28: 
   var $232=$1;
   var $233=$232;
   $_src7=$233;
   var $234=$2;
   var $235=((((($234)>>>(0)))/(2))&-1);
   $2=$235;
   label = 29; break;
  case 29: 
   var $237=(($size+4)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=((($238)-(1))|0);
   HEAP32[(($237)>>2)]=$239;
   var $240=(($238)|(0))!=0;
   if ($240) { label = 30; break; } else { label = 40; break; }
  case 30: 
   $i8=0;
   label = 31; break;
  case 31: 
   var $243=$i8;
   var $244=(($size)|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=((($245)-(4))|0);
   var $247=(($243)|(0)) <= (($246)|(0));
   if ($247) { label = 32; break; } else { label = 34; break; }
  case 32: 
   var $249=$i8;
   var $250=$_src7;
   var $251=(($250+($249<<1))|0);
   var $252=HEAP16[(($251)>>1)];
   var $253=(($252)&(65535));
   $t09=$253;
   var $254=$i8;
   var $255=((($254)+(1))|0);
   var $256=$_src7;
   var $257=(($256+($255<<1))|0);
   var $258=HEAP16[(($257)>>1)];
   var $259=(($258)&(65535));
   $t110=$259;
   var $260=$t09;
   var $261=$i8;
   var $262=$3;
   var $263=(($262+($261<<3))|0);
   HEAPF64[(($263)>>3)]=$260;
   var $264=$t110;
   var $265=$i8;
   var $266=((($265)+(1))|0);
   var $267=$3;
   var $268=(($267+($266<<3))|0);
   HEAPF64[(($268)>>3)]=$264;
   var $269=$i8;
   var $270=((($269)+(2))|0);
   var $271=$_src7;
   var $272=(($271+($270<<1))|0);
   var $273=HEAP16[(($272)>>1)];
   var $274=(($273)&(65535));
   $t09=$274;
   var $275=$i8;
   var $276=((($275)+(3))|0);
   var $277=$_src7;
   var $278=(($277+($276<<1))|0);
   var $279=HEAP16[(($278)>>1)];
   var $280=(($279)&(65535));
   $t110=$280;
   var $281=$t09;
   var $282=$i8;
   var $283=((($282)+(2))|0);
   var $284=$3;
   var $285=(($284+($283<<3))|0);
   HEAPF64[(($285)>>3)]=$281;
   var $286=$t110;
   var $287=$i8;
   var $288=((($287)+(3))|0);
   var $289=$3;
   var $290=(($289+($288<<3))|0);
   HEAPF64[(($290)>>3)]=$286;
   label = 33; break;
  case 33: 
   var $292=$i8;
   var $293=((($292)+(4))|0);
   $i8=$293;
   label = 31; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $296=$i8;
   var $297=(($size)|0);
   var $298=HEAP32[(($297)>>2)];
   var $299=(($296)|(0)) < (($298)|(0));
   if ($299) { label = 36; break; } else { label = 38; break; }
  case 36: 
   var $301=$i8;
   var $302=$_src7;
   var $303=(($302+($301<<1))|0);
   var $304=HEAP16[(($303)>>1)];
   var $305=(($304)&(65535));
   $t011=$305;
   var $306=$t011;
   var $307=$i8;
   var $308=$3;
   var $309=(($308+($307<<3))|0);
   HEAPF64[(($309)>>3)]=$306;
   label = 37; break;
  case 37: 
   var $311=$i8;
   var $312=((($311)+(1))|0);
   $i8=$312;
   label = 35; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $315=$2;
   var $316=$_src7;
   var $317=(($316+($315<<1))|0);
   $_src7=$317;
   var $318=$4;
   var $319=$3;
   var $320=(($319+($318<<3))|0);
   $3=$320;
   label = 29; break;
  case 40: 
   label = 80; break;
  case 41: 
   var $323=$1;
   var $324=$323;
   $_src12=$324;
   var $325=$2;
   var $326=((((($325)>>>(0)))/(2))&-1);
   $2=$326;
   label = 42; break;
  case 42: 
   var $328=(($size+4)|0);
   var $329=HEAP32[(($328)>>2)];
   var $330=((($329)-(1))|0);
   HEAP32[(($328)>>2)]=$330;
   var $331=(($329)|(0))!=0;
   if ($331) { label = 43; break; } else { label = 53; break; }
  case 43: 
   $i13=0;
   label = 44; break;
  case 44: 
   var $334=$i13;
   var $335=(($size)|0);
   var $336=HEAP32[(($335)>>2)];
   var $337=((($336)-(4))|0);
   var $338=(($334)|(0)) <= (($337)|(0));
   if ($338) { label = 45; break; } else { label = 47; break; }
  case 45: 
   var $340=$i13;
   var $341=$_src12;
   var $342=(($341+($340<<1))|0);
   var $343=HEAP16[(($342)>>1)];
   var $344=(($343 << 16) >> 16);
   $t014=$344;
   var $345=$i13;
   var $346=((($345)+(1))|0);
   var $347=$_src12;
   var $348=(($347+($346<<1))|0);
   var $349=HEAP16[(($348)>>1)];
   var $350=(($349 << 16) >> 16);
   $t115=$350;
   var $351=$t014;
   var $352=$i13;
   var $353=$3;
   var $354=(($353+($352<<3))|0);
   HEAPF64[(($354)>>3)]=$351;
   var $355=$t115;
   var $356=$i13;
   var $357=((($356)+(1))|0);
   var $358=$3;
   var $359=(($358+($357<<3))|0);
   HEAPF64[(($359)>>3)]=$355;
   var $360=$i13;
   var $361=((($360)+(2))|0);
   var $362=$_src12;
   var $363=(($362+($361<<1))|0);
   var $364=HEAP16[(($363)>>1)];
   var $365=(($364 << 16) >> 16);
   $t014=$365;
   var $366=$i13;
   var $367=((($366)+(3))|0);
   var $368=$_src12;
   var $369=(($368+($367<<1))|0);
   var $370=HEAP16[(($369)>>1)];
   var $371=(($370 << 16) >> 16);
   $t115=$371;
   var $372=$t014;
   var $373=$i13;
   var $374=((($373)+(2))|0);
   var $375=$3;
   var $376=(($375+($374<<3))|0);
   HEAPF64[(($376)>>3)]=$372;
   var $377=$t115;
   var $378=$i13;
   var $379=((($378)+(3))|0);
   var $380=$3;
   var $381=(($380+($379<<3))|0);
   HEAPF64[(($381)>>3)]=$377;
   label = 46; break;
  case 46: 
   var $383=$i13;
   var $384=((($383)+(4))|0);
   $i13=$384;
   label = 44; break;
  case 47: 
   label = 48; break;
  case 48: 
   var $387=$i13;
   var $388=(($size)|0);
   var $389=HEAP32[(($388)>>2)];
   var $390=(($387)|(0)) < (($389)|(0));
   if ($390) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $392=$i13;
   var $393=$_src12;
   var $394=(($393+($392<<1))|0);
   var $395=HEAP16[(($394)>>1)];
   var $396=(($395 << 16) >> 16);
   $t016=$396;
   var $397=$t016;
   var $398=$i13;
   var $399=$3;
   var $400=(($399+($398<<3))|0);
   HEAPF64[(($400)>>3)]=$397;
   label = 50; break;
  case 50: 
   var $402=$i13;
   var $403=((($402)+(1))|0);
   $i13=$403;
   label = 48; break;
  case 51: 
   label = 52; break;
  case 52: 
   var $406=$2;
   var $407=$_src12;
   var $408=(($407+($406<<1))|0);
   $_src12=$408;
   var $409=$4;
   var $410=$3;
   var $411=(($410+($409<<3))|0);
   $3=$411;
   label = 42; break;
  case 53: 
   label = 80; break;
  case 54: 
   var $414=$1;
   var $415=$414;
   $_src17=$415;
   var $416=$2;
   var $417=((((($416)>>>(0)))/(4))&-1);
   $2=$417;
   label = 55; break;
  case 55: 
   var $419=(($size+4)|0);
   var $420=HEAP32[(($419)>>2)];
   var $421=((($420)-(1))|0);
   HEAP32[(($419)>>2)]=$421;
   var $422=(($420)|(0))!=0;
   if ($422) { label = 56; break; } else { label = 66; break; }
  case 56: 
   $i18=0;
   label = 57; break;
  case 57: 
   var $425=$i18;
   var $426=(($size)|0);
   var $427=HEAP32[(($426)>>2)];
   var $428=((($427)-(4))|0);
   var $429=(($425)|(0)) <= (($428)|(0));
   if ($429) { label = 58; break; } else { label = 60; break; }
  case 58: 
   var $431=$i18;
   var $432=$_src17;
   var $433=(($432+($431<<2))|0);
   var $434=HEAP32[(($433)>>2)];
   var $435=(($434)|(0));
   $t019=$435;
   var $436=$i18;
   var $437=((($436)+(1))|0);
   var $438=$_src17;
   var $439=(($438+($437<<2))|0);
   var $440=HEAP32[(($439)>>2)];
   var $441=(($440)|(0));
   $t120=$441;
   var $442=$t019;
   var $443=$i18;
   var $444=$3;
   var $445=(($444+($443<<3))|0);
   HEAPF64[(($445)>>3)]=$442;
   var $446=$t120;
   var $447=$i18;
   var $448=((($447)+(1))|0);
   var $449=$3;
   var $450=(($449+($448<<3))|0);
   HEAPF64[(($450)>>3)]=$446;
   var $451=$i18;
   var $452=((($451)+(2))|0);
   var $453=$_src17;
   var $454=(($453+($452<<2))|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=(($455)|(0));
   $t019=$456;
   var $457=$i18;
   var $458=((($457)+(3))|0);
   var $459=$_src17;
   var $460=(($459+($458<<2))|0);
   var $461=HEAP32[(($460)>>2)];
   var $462=(($461)|(0));
   $t120=$462;
   var $463=$t019;
   var $464=$i18;
   var $465=((($464)+(2))|0);
   var $466=$3;
   var $467=(($466+($465<<3))|0);
   HEAPF64[(($467)>>3)]=$463;
   var $468=$t120;
   var $469=$i18;
   var $470=((($469)+(3))|0);
   var $471=$3;
   var $472=(($471+($470<<3))|0);
   HEAPF64[(($472)>>3)]=$468;
   label = 59; break;
  case 59: 
   var $474=$i18;
   var $475=((($474)+(4))|0);
   $i18=$475;
   label = 57; break;
  case 60: 
   label = 61; break;
  case 61: 
   var $478=$i18;
   var $479=(($size)|0);
   var $480=HEAP32[(($479)>>2)];
   var $481=(($478)|(0)) < (($480)|(0));
   if ($481) { label = 62; break; } else { label = 64; break; }
  case 62: 
   var $483=$i18;
   var $484=$_src17;
   var $485=(($484+($483<<2))|0);
   var $486=HEAP32[(($485)>>2)];
   var $487=(($486)|(0));
   $t021=$487;
   var $488=$t021;
   var $489=$i18;
   var $490=$3;
   var $491=(($490+($489<<3))|0);
   HEAPF64[(($491)>>3)]=$488;
   label = 63; break;
  case 63: 
   var $493=$i18;
   var $494=((($493)+(1))|0);
   $i18=$494;
   label = 61; break;
  case 64: 
   label = 65; break;
  case 65: 
   var $497=$2;
   var $498=$_src17;
   var $499=(($498+($497<<2))|0);
   $_src17=$499;
   var $500=$4;
   var $501=$3;
   var $502=(($501+($500<<3))|0);
   $3=$502;
   label = 55; break;
  case 66: 
   label = 80; break;
  case 67: 
   var $505=$1;
   var $506=$505;
   $_src22=$506;
   var $507=$2;
   var $508=((((($507)>>>(0)))/(4))&-1);
   $2=$508;
   label = 68; break;
  case 68: 
   var $510=(($size+4)|0);
   var $511=HEAP32[(($510)>>2)];
   var $512=((($511)-(1))|0);
   HEAP32[(($510)>>2)]=$512;
   var $513=(($511)|(0))!=0;
   if ($513) { label = 69; break; } else { label = 79; break; }
  case 69: 
   $i23=0;
   label = 70; break;
  case 70: 
   var $516=$i23;
   var $517=(($size)|0);
   var $518=HEAP32[(($517)>>2)];
   var $519=((($518)-(4))|0);
   var $520=(($516)|(0)) <= (($519)|(0));
   if ($520) { label = 71; break; } else { label = 73; break; }
  case 71: 
   var $522=$i23;
   var $523=$_src22;
   var $524=(($523+($522<<2))|0);
   var $525=HEAPF32[(($524)>>2)];
   var $526=$525;
   $t024=$526;
   var $527=$i23;
   var $528=((($527)+(1))|0);
   var $529=$_src22;
   var $530=(($529+($528<<2))|0);
   var $531=HEAPF32[(($530)>>2)];
   var $532=$531;
   $t125=$532;
   var $533=$t024;
   var $534=$i23;
   var $535=$3;
   var $536=(($535+($534<<3))|0);
   HEAPF64[(($536)>>3)]=$533;
   var $537=$t125;
   var $538=$i23;
   var $539=((($538)+(1))|0);
   var $540=$3;
   var $541=(($540+($539<<3))|0);
   HEAPF64[(($541)>>3)]=$537;
   var $542=$i23;
   var $543=((($542)+(2))|0);
   var $544=$_src22;
   var $545=(($544+($543<<2))|0);
   var $546=HEAPF32[(($545)>>2)];
   var $547=$546;
   $t024=$547;
   var $548=$i23;
   var $549=((($548)+(3))|0);
   var $550=$_src22;
   var $551=(($550+($549<<2))|0);
   var $552=HEAPF32[(($551)>>2)];
   var $553=$552;
   $t125=$553;
   var $554=$t024;
   var $555=$i23;
   var $556=((($555)+(2))|0);
   var $557=$3;
   var $558=(($557+($556<<3))|0);
   HEAPF64[(($558)>>3)]=$554;
   var $559=$t125;
   var $560=$i23;
   var $561=((($560)+(3))|0);
   var $562=$3;
   var $563=(($562+($561<<3))|0);
   HEAPF64[(($563)>>3)]=$559;
   label = 72; break;
  case 72: 
   var $565=$i23;
   var $566=((($565)+(4))|0);
   $i23=$566;
   label = 70; break;
  case 73: 
   label = 74; break;
  case 74: 
   var $569=$i23;
   var $570=(($size)|0);
   var $571=HEAP32[(($570)>>2)];
   var $572=(($569)|(0)) < (($571)|(0));
   if ($572) { label = 75; break; } else { label = 77; break; }
  case 75: 
   var $574=$i23;
   var $575=$_src22;
   var $576=(($575+($574<<2))|0);
   var $577=HEAPF32[(($576)>>2)];
   var $578=$577;
   $t026=$578;
   var $579=$t026;
   var $580=$i23;
   var $581=$3;
   var $582=(($581+($580<<3))|0);
   HEAPF64[(($582)>>3)]=$579;
   label = 76; break;
  case 76: 
   var $584=$i23;
   var $585=((($584)+(1))|0);
   $i23=$585;
   label = 74; break;
  case 77: 
   label = 78; break;
  case 78: 
   var $588=$2;
   var $589=$_src22;
   var $590=(($589+($588<<2))|0);
   $_src22=$590;
   var $591=$4;
   var $592=$3;
   var $593=(($592+($591<<3))|0);
   $3=$593;
   label = 68; break;
  case 79: 
   label = 80; break;
  case 80: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvCopy_8u_C1R_fPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   label = 2; break;
  case 2: 
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   HEAP32[(($6)>>2)]=$8;
   var $9=(($7)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$3;
   var $12=$1;
   var $13=(($size)|0);
   var $14=HEAP32[(($13)>>2)];
   assert($14 % 1 === 0);(_memcpy($11, $12, $14)|0);
   label = 4; break;
  case 4: 
   var $16=$2;
   var $17=$1;
   var $18=(($17+$16)|0);
   $1=$18;
   var $19=$4;
   var $20=$3;
   var $21=(($20+$19)|0);
   $3=$21;
   label = 2; break;
  case 5: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z14icvCopy_8u_C1RPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 var $6=HEAP32[((880)>>2)];
 var $7=$1;
 var $8=$2;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=$size;
 assert(8 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
 var $13=FUNCTION_TABLE[$6]($7, $8, $9, $10, $5);
 STACKTOP = sp;
 return $13;
}
function __ZL17icvCopy_8u_C1MR_fPKhiPhi6CvSizeS0_i($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=(((($7)>>>(0)))&-1);
   $2=$8;
   var $9=$4;
   var $10=(((($9)>>>(0)))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 19; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(2))|0);
   var $22=(($18)|(0)) <= (($21)|(0));
   if ($22) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $24=$i;
   var $25=$5;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   var $28=(($27 << 24) >> 24)!=0;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $30=$i;
   var $31=$1;
   var $32=(($31+$30)|0);
   var $33=HEAP8[($32)];
   var $34=$i;
   var $35=$3;
   var $36=(($35+$34)|0);
   HEAP8[($36)]=$33;
   label = 7; break;
  case 7: 
   var $38=$i;
   var $39=((($38)+(1))|0);
   var $40=$5;
   var $41=(($40+$39)|0);
   var $42=HEAP8[($41)];
   var $43=(($42 << 24) >> 24)!=0;
   if ($43) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $45=$i;
   var $46=((($45)+(1))|0);
   var $47=$1;
   var $48=(($47+$46)|0);
   var $49=HEAP8[($48)];
   var $50=$i;
   var $51=((($50)+(1))|0);
   var $52=$3;
   var $53=(($52+$51)|0);
   HEAP8[($53)]=$49;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $56=$i;
   var $57=((($56)+(2))|0);
   $i=$57;
   label = 4; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $60=$i;
   var $61=(($size)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($60)|(0)) < (($62)|(0));
   if ($63) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $65=$i;
   var $66=$5;
   var $67=(($66+$65)|0);
   var $68=HEAP8[($67)];
   var $69=(($68 << 24) >> 24)!=0;
   if ($69) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $71=$i;
   var $72=$1;
   var $73=(($72+$71)|0);
   var $74=HEAP8[($73)];
   var $75=$i;
   var $76=$3;
   var $77=(($76+$75)|0);
   HEAP8[($77)]=$74;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $80=$i;
   var $81=((($80)+(1))|0);
   $i=$81;
   label = 12; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $84=$2;
   var $85=$1;
   var $86=(($85+$84)|0);
   $1=$86;
   var $87=$4;
   var $88=$3;
   var $89=(($88+$87)|0);
   $3=$89;
   var $90=$6;
   var $91=$5;
   var $92=(($91+$90)|0);
   $5=$92;
   label = 2; break;
  case 19: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_16s_C1MR_fPKtiPti6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 19; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(2))|0);
   var $22=(($18)|(0)) <= (($21)|(0));
   if ($22) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $24=$i;
   var $25=$5;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   var $28=(($27 << 24) >> 24)!=0;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $30=$i;
   var $31=$1;
   var $32=(($31+($30<<1))|0);
   var $33=HEAP16[(($32)>>1)];
   var $34=$i;
   var $35=$3;
   var $36=(($35+($34<<1))|0);
   HEAP16[(($36)>>1)]=$33;
   label = 7; break;
  case 7: 
   var $38=$i;
   var $39=((($38)+(1))|0);
   var $40=$5;
   var $41=(($40+$39)|0);
   var $42=HEAP8[($41)];
   var $43=(($42 << 24) >> 24)!=0;
   if ($43) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $45=$i;
   var $46=((($45)+(1))|0);
   var $47=$1;
   var $48=(($47+($46<<1))|0);
   var $49=HEAP16[(($48)>>1)];
   var $50=$i;
   var $51=((($50)+(1))|0);
   var $52=$3;
   var $53=(($52+($51<<1))|0);
   HEAP16[(($53)>>1)]=$49;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $56=$i;
   var $57=((($56)+(2))|0);
   $i=$57;
   label = 4; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $60=$i;
   var $61=(($size)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($60)|(0)) < (($62)|(0));
   if ($63) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $65=$i;
   var $66=$5;
   var $67=(($66+$65)|0);
   var $68=HEAP8[($67)];
   var $69=(($68 << 24) >> 24)!=0;
   if ($69) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $71=$i;
   var $72=$1;
   var $73=(($72+($71<<1))|0);
   var $74=HEAP16[(($73)>>1)];
   var $75=$i;
   var $76=$3;
   var $77=(($76+($75<<1))|0);
   HEAP16[(($77)>>1)]=$74;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $80=$i;
   var $81=((($80)+(1))|0);
   $i=$81;
   label = 12; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $84=$2;
   var $85=$1;
   var $86=(($85+($84<<1))|0);
   $1=$86;
   var $87=$4;
   var $88=$3;
   var $89=(($88+($87<<1))|0);
   $3=$89;
   var $90=$6;
   var $91=$5;
   var $92=(($91+$90)|0);
   $5=$92;
   label = 2; break;
  case 19: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvCopy_8u_C3MR_fPKhiPhi6CvSizeS0_i($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=(((($7)>>>(0)))&-1);
   $2=$8;
   var $9=$4;
   var $10=(((($9)>>>(0)))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 11; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($18)|(0)) < (($20)|(0));
   if ($21) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $23=$i;
   var $24=$5;
   var $25=(($24+$23)|0);
   var $26=HEAP8[($25)];
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$i;
   var $30=((($29)*(3))&-1);
   var $31=$1;
   var $32=(($31+$30)|0);
   var $33=HEAP8[($32)];
   $t0=$33;
   var $34=$i;
   var $35=((($34)*(3))&-1);
   var $36=((($35)+(1))|0);
   var $37=$1;
   var $38=(($37+$36)|0);
   var $39=HEAP8[($38)];
   $t1=$39;
   var $40=$i;
   var $41=((($40)*(3))&-1);
   var $42=((($41)+(2))|0);
   var $43=$1;
   var $44=(($43+$42)|0);
   var $45=HEAP8[($44)];
   $t2=$45;
   var $46=$t0;
   var $47=$i;
   var $48=((($47)*(3))&-1);
   var $49=$3;
   var $50=(($49+$48)|0);
   HEAP8[($50)]=$46;
   var $51=$t1;
   var $52=$i;
   var $53=((($52)*(3))&-1);
   var $54=((($53)+(1))|0);
   var $55=$3;
   var $56=(($55+$54)|0);
   HEAP8[($56)]=$51;
   var $57=$t2;
   var $58=$i;
   var $59=((($58)*(3))&-1);
   var $60=((($59)+(2))|0);
   var $61=$3;
   var $62=(($61+$60)|0);
   HEAP8[($62)]=$57;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $65=$i;
   var $66=((($65)+(1))|0);
   $i=$66;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $69=$2;
   var $70=$1;
   var $71=(($70+$69)|0);
   $1=$71;
   var $72=$4;
   var $73=$3;
   var $74=(($73+$72)|0);
   $3=$74;
   var $75=$6;
   var $76=$5;
   var $77=(($76+$75)|0);
   $5=$77;
   label = 2; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvCopy_8u_C4MR_fPKiiPii6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 19; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(2))|0);
   var $22=(($18)|(0)) <= (($21)|(0));
   if ($22) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $24=$i;
   var $25=$5;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   var $28=(($27 << 24) >> 24)!=0;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $30=$i;
   var $31=$1;
   var $32=(($31+($30<<2))|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$i;
   var $35=$3;
   var $36=(($35+($34<<2))|0);
   HEAP32[(($36)>>2)]=$33;
   label = 7; break;
  case 7: 
   var $38=$i;
   var $39=((($38)+(1))|0);
   var $40=$5;
   var $41=(($40+$39)|0);
   var $42=HEAP8[($41)];
   var $43=(($42 << 24) >> 24)!=0;
   if ($43) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $45=$i;
   var $46=((($45)+(1))|0);
   var $47=$1;
   var $48=(($47+($46<<2))|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$i;
   var $51=((($50)+(1))|0);
   var $52=$3;
   var $53=(($52+($51<<2))|0);
   HEAP32[(($53)>>2)]=$49;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $56=$i;
   var $57=((($56)+(2))|0);
   $i=$57;
   label = 4; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $60=$i;
   var $61=(($size)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($60)|(0)) < (($62)|(0));
   if ($63) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $65=$i;
   var $66=$5;
   var $67=(($66+$65)|0);
   var $68=HEAP8[($67)];
   var $69=(($68 << 24) >> 24)!=0;
   if ($69) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $71=$i;
   var $72=$1;
   var $73=(($72+($71<<2))|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$i;
   var $76=$3;
   var $77=(($76+($75<<2))|0);
   HEAP32[(($77)>>2)]=$74;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $80=$i;
   var $81=((($80)+(1))|0);
   $i=$81;
   label = 12; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $84=$2;
   var $85=$1;
   var $86=(($85+($84<<2))|0);
   $1=$86;
   var $87=$4;
   var $88=$3;
   var $89=(($88+($87<<2))|0);
   $3=$89;
   var $90=$6;
   var $91=$5;
   var $92=(($91+$90)|0);
   $5=$92;
   label = 2; break;
  case 19: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_16s_C3MR_fPKtiPti6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 11; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($18)|(0)) < (($20)|(0));
   if ($21) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $23=$i;
   var $24=$5;
   var $25=(($24+$23)|0);
   var $26=HEAP8[($25)];
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$i;
   var $30=((($29)*(3))&-1);
   var $31=$1;
   var $32=(($31+($30<<1))|0);
   var $33=HEAP16[(($32)>>1)];
   $t0=$33;
   var $34=$i;
   var $35=((($34)*(3))&-1);
   var $36=((($35)+(1))|0);
   var $37=$1;
   var $38=(($37+($36<<1))|0);
   var $39=HEAP16[(($38)>>1)];
   $t1=$39;
   var $40=$i;
   var $41=((($40)*(3))&-1);
   var $42=((($41)+(2))|0);
   var $43=$1;
   var $44=(($43+($42<<1))|0);
   var $45=HEAP16[(($44)>>1)];
   $t2=$45;
   var $46=$t0;
   var $47=$i;
   var $48=((($47)*(3))&-1);
   var $49=$3;
   var $50=(($49+($48<<1))|0);
   HEAP16[(($50)>>1)]=$46;
   var $51=$t1;
   var $52=$i;
   var $53=((($52)*(3))&-1);
   var $54=((($53)+(1))|0);
   var $55=$3;
   var $56=(($55+($54<<1))|0);
   HEAP16[(($56)>>1)]=$51;
   var $57=$t2;
   var $58=$i;
   var $59=((($58)*(3))&-1);
   var $60=((($59)+(2))|0);
   var $61=$3;
   var $62=(($61+($60<<1))|0);
   HEAP16[(($62)>>1)]=$57;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $65=$i;
   var $66=((($65)+(1))|0);
   $i=$66;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $69=$2;
   var $70=$1;
   var $71=(($70+($69<<1))|0);
   $1=$71;
   var $72=$4;
   var $73=$3;
   var $74=(($73+($72<<1))|0);
   $3=$74;
   var $75=$6;
   var $76=$5;
   var $77=(($76+$75)|0);
   $5=$77;
   label = 2; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_16s_C4MR_fPKxiPxi6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(8))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(8))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 19; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(2))|0);
   var $22=(($18)|(0)) <= (($21)|(0));
   if ($22) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $24=$i;
   var $25=$5;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   var $28=(($27 << 24) >> 24)!=0;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $30=$i;
   var $31=$1;
   var $32=(($31+($30<<3))|0);
   var $ld$0$0=(($32)|0);
   var $33$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($32+4)|0);
   var $33$1=HEAP32[(($ld$1$1)>>2)];
   var $34=$i;
   var $35=$3;
   var $36=(($35+($34<<3))|0);
   var $st$2$0=(($36)|0);
   HEAP32[(($st$2$0)>>2)]=$33$0;
   var $st$3$1=(($36+4)|0);
   HEAP32[(($st$3$1)>>2)]=$33$1;
   label = 7; break;
  case 7: 
   var $38=$i;
   var $39=((($38)+(1))|0);
   var $40=$5;
   var $41=(($40+$39)|0);
   var $42=HEAP8[($41)];
   var $43=(($42 << 24) >> 24)!=0;
   if ($43) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $45=$i;
   var $46=((($45)+(1))|0);
   var $47=$1;
   var $48=(($47+($46<<3))|0);
   var $ld$4$0=(($48)|0);
   var $49$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($48+4)|0);
   var $49$1=HEAP32[(($ld$5$1)>>2)];
   var $50=$i;
   var $51=((($50)+(1))|0);
   var $52=$3;
   var $53=(($52+($51<<3))|0);
   var $st$6$0=(($53)|0);
   HEAP32[(($st$6$0)>>2)]=$49$0;
   var $st$7$1=(($53+4)|0);
   HEAP32[(($st$7$1)>>2)]=$49$1;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $56=$i;
   var $57=((($56)+(2))|0);
   $i=$57;
   label = 4; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $60=$i;
   var $61=(($size)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($60)|(0)) < (($62)|(0));
   if ($63) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $65=$i;
   var $66=$5;
   var $67=(($66+$65)|0);
   var $68=HEAP8[($67)];
   var $69=(($68 << 24) >> 24)!=0;
   if ($69) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $71=$i;
   var $72=$1;
   var $73=(($72+($71<<3))|0);
   var $ld$8$0=(($73)|0);
   var $74$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($73+4)|0);
   var $74$1=HEAP32[(($ld$9$1)>>2)];
   var $75=$i;
   var $76=$3;
   var $77=(($76+($75<<3))|0);
   var $st$10$0=(($77)|0);
   HEAP32[(($st$10$0)>>2)]=$74$0;
   var $st$11$1=(($77+4)|0);
   HEAP32[(($st$11$1)>>2)]=$74$1;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $80=$i;
   var $81=((($80)+(1))|0);
   $i=$81;
   label = 12; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $84=$2;
   var $85=$1;
   var $86=(($85+($84<<3))|0);
   $1=$86;
   var $87=$4;
   var $88=$3;
   var $89=(($88+($87<<3))|0);
   $3=$89;
   var $90=$6;
   var $91=$5;
   var $92=(($91+$90)|0);
   $5=$92;
   label = 2; break;
  case 19: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z15icvCopy_8u_C1MRPKhiPhi6CvSizeS0_i($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((888)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z16icvCopy_16s_C1MRPKtiPti6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((1136)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z15icvCopy_8u_C3MRPKhiPhi6CvSizeS0_i($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((864)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z15icvCopy_8u_C4MRPKiiPii6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((848)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z16icvCopy_16s_C3MRPKtiPti6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((1120)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __ZL18icvCopy_32f_C3MR_fPKiiPii6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0;
   var $t1;
   var $t2;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 11; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($18)|(0)) < (($20)|(0));
   if ($21) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $23=$i;
   var $24=$5;
   var $25=(($24+$23)|0);
   var $26=HEAP8[($25)];
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$i;
   var $30=((($29)*(3))&-1);
   var $31=$1;
   var $32=(($31+($30<<2))|0);
   var $33=HEAP32[(($32)>>2)];
   $t0=$33;
   var $34=$i;
   var $35=((($34)*(3))&-1);
   var $36=((($35)+(1))|0);
   var $37=$1;
   var $38=(($37+($36<<2))|0);
   var $39=HEAP32[(($38)>>2)];
   $t1=$39;
   var $40=$i;
   var $41=((($40)*(3))&-1);
   var $42=((($41)+(2))|0);
   var $43=$1;
   var $44=(($43+($42<<2))|0);
   var $45=HEAP32[(($44)>>2)];
   $t2=$45;
   var $46=$t0;
   var $47=$i;
   var $48=((($47)*(3))&-1);
   var $49=$3;
   var $50=(($49+($48<<2))|0);
   HEAP32[(($50)>>2)]=$46;
   var $51=$t1;
   var $52=$i;
   var $53=((($52)*(3))&-1);
   var $54=((($53)+(1))|0);
   var $55=$3;
   var $56=(($55+($54<<2))|0);
   HEAP32[(($56)>>2)]=$51;
   var $57=$t2;
   var $58=$i;
   var $59=((($58)*(3))&-1);
   var $60=((($59)+(2))|0);
   var $61=$3;
   var $62=(($61+($60<<2))|0);
   HEAP32[(($62)>>2)]=$57;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $65=$i;
   var $66=((($65)+(1))|0);
   $i=$66;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $69=$2;
   var $70=$1;
   var $71=(($70+($69<<2))|0);
   $1=$71;
   var $72=$4;
   var $73=$3;
   var $74=(($73+($72<<2))|0);
   $3=$74;
   var $75=$6;
   var $76=$5;
   var $77=(($76+$75)|0);
   $5=$77;
   label = 2; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_32f_C4MR_fPKiiPii6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 11; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($18)|(0)) < (($20)|(0));
   if ($21) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $23=$i;
   var $24=$5;
   var $25=(($24+$23)|0);
   var $26=HEAP8[($25)];
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$i;
   var $30=($29<<2);
   var $31=$1;
   var $32=(($31+($30<<2))|0);
   var $33=HEAP32[(($32)>>2)];
   $t0=$33;
   var $34=$i;
   var $35=($34<<2);
   var $36=((($35)+(1))|0);
   var $37=$1;
   var $38=(($37+($36<<2))|0);
   var $39=HEAP32[(($38)>>2)];
   $t1=$39;
   var $40=$t0;
   var $41=$i;
   var $42=($41<<2);
   var $43=$3;
   var $44=(($43+($42<<2))|0);
   HEAP32[(($44)>>2)]=$40;
   var $45=$t1;
   var $46=$i;
   var $47=($46<<2);
   var $48=((($47)+(1))|0);
   var $49=$3;
   var $50=(($49+($48<<2))|0);
   HEAP32[(($50)>>2)]=$45;
   var $51=$i;
   var $52=($51<<2);
   var $53=((($52)+(2))|0);
   var $54=$1;
   var $55=(($54+($53<<2))|0);
   var $56=HEAP32[(($55)>>2)];
   $t0=$56;
   var $57=$i;
   var $58=($57<<2);
   var $59=((($58)+(3))|0);
   var $60=$1;
   var $61=(($60+($59<<2))|0);
   var $62=HEAP32[(($61)>>2)];
   $t1=$62;
   var $63=$t0;
   var $64=$i;
   var $65=($64<<2);
   var $66=((($65)+(2))|0);
   var $67=$3;
   var $68=(($67+($66<<2))|0);
   HEAP32[(($68)>>2)]=$63;
   var $69=$t1;
   var $70=$i;
   var $71=($70<<2);
   var $72=((($71)+(3))|0);
   var $73=$3;
   var $74=(($73+($72<<2))|0);
   HEAP32[(($74)>>2)]=$69;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $77=$i;
   var $78=((($77)+(1))|0);
   $i=$78;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $81=$2;
   var $82=$1;
   var $83=(($82+($81<<2))|0);
   $1=$83;
   var $84=$4;
   var $85=$3;
   var $86=(($85+($84<<2))|0);
   $3=$86;
   var $87=$6;
   var $88=$5;
   var $89=(($88+$87)|0);
   $5=$89;
   label = 2; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_64s_C3MR_fPKxiPxi6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0=sp;
   var $t1=(sp)+(8);
   var $t2=(sp)+(16);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(8))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(8))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 11; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($18)|(0)) < (($20)|(0));
   if ($21) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $23=$i;
   var $24=$5;
   var $25=(($24+$23)|0);
   var $26=HEAP8[($25)];
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$i;
   var $30=((($29)*(3))&-1);
   var $31=$1;
   var $32=(($31+($30<<3))|0);
   var $ld$0$0=(($32)|0);
   var $33$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($32+4)|0);
   var $33$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$33$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$33$1;
   var $34=$i;
   var $35=((($34)*(3))&-1);
   var $36=((($35)+(1))|0);
   var $37=$1;
   var $38=(($37+($36<<3))|0);
   var $ld$4$0=(($38)|0);
   var $39$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($38+4)|0);
   var $39$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$39$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$39$1;
   var $40=$i;
   var $41=((($40)*(3))&-1);
   var $42=((($41)+(2))|0);
   var $43=$1;
   var $44=(($43+($42<<3))|0);
   var $ld$8$0=(($44)|0);
   var $45$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($44+4)|0);
   var $45$1=HEAP32[(($ld$9$1)>>2)];
   var $st$10$0=(($t2)|0);
   HEAP32[(($st$10$0)>>2)]=$45$0;
   var $st$11$1=(($t2+4)|0);
   HEAP32[(($st$11$1)>>2)]=$45$1;
   var $ld$12$0=(($t0)|0);
   var $46$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t0+4)|0);
   var $46$1=HEAP32[(($ld$13$1)>>2)];
   var $47=$i;
   var $48=((($47)*(3))&-1);
   var $49=$3;
   var $50=(($49+($48<<3))|0);
   var $st$14$0=(($50)|0);
   HEAP32[(($st$14$0)>>2)]=$46$0;
   var $st$15$1=(($50+4)|0);
   HEAP32[(($st$15$1)>>2)]=$46$1;
   var $ld$16$0=(($t1)|0);
   var $51$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($t1+4)|0);
   var $51$1=HEAP32[(($ld$17$1)>>2)];
   var $52=$i;
   var $53=((($52)*(3))&-1);
   var $54=((($53)+(1))|0);
   var $55=$3;
   var $56=(($55+($54<<3))|0);
   var $st$18$0=(($56)|0);
   HEAP32[(($st$18$0)>>2)]=$51$0;
   var $st$19$1=(($56+4)|0);
   HEAP32[(($st$19$1)>>2)]=$51$1;
   var $ld$20$0=(($t2)|0);
   var $57$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($t2+4)|0);
   var $57$1=HEAP32[(($ld$21$1)>>2)];
   var $58=$i;
   var $59=((($58)*(3))&-1);
   var $60=((($59)+(2))|0);
   var $61=$3;
   var $62=(($61+($60<<3))|0);
   var $st$22$0=(($62)|0);
   HEAP32[(($st$22$0)>>2)]=$57$0;
   var $st$23$1=(($62+4)|0);
   HEAP32[(($st$23$1)>>2)]=$57$1;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $65=$i;
   var $66=((($65)+(1))|0);
   $i=$66;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $69=$2;
   var $70=$1;
   var $71=(($70+($69<<3))|0);
   $1=$71;
   var $72=$4;
   var $73=$3;
   var $74=(($73+($72<<3))|0);
   $3=$74;
   var $75=$6;
   var $76=$5;
   var $77=(($76+$75)|0);
   $5=$77;
   label = 2; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvCopy_64s_C4MR_fPKxiPxi6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $i;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$mask;
   $6=$maskstep;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(8))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(8))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 11; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($18)|(0)) < (($20)|(0));
   if ($21) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $23=$i;
   var $24=$5;
   var $25=(($24+$23)|0);
   var $26=HEAP8[($25)];
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$i;
   var $30=($29<<2);
   var $31=$1;
   var $32=(($31+($30<<3))|0);
   var $ld$0$0=(($32)|0);
   var $33$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($32+4)|0);
   var $33$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$33$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$33$1;
   var $34=$i;
   var $35=($34<<2);
   var $36=((($35)+(1))|0);
   var $37=$1;
   var $38=(($37+($36<<3))|0);
   var $ld$4$0=(($38)|0);
   var $39$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($38+4)|0);
   var $39$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$39$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$39$1;
   var $ld$8$0=(($t0)|0);
   var $40$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t0+4)|0);
   var $40$1=HEAP32[(($ld$9$1)>>2)];
   var $41=$i;
   var $42=($41<<2);
   var $43=$3;
   var $44=(($43+($42<<3))|0);
   var $st$10$0=(($44)|0);
   HEAP32[(($st$10$0)>>2)]=$40$0;
   var $st$11$1=(($44+4)|0);
   HEAP32[(($st$11$1)>>2)]=$40$1;
   var $ld$12$0=(($t1)|0);
   var $45$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t1+4)|0);
   var $45$1=HEAP32[(($ld$13$1)>>2)];
   var $46=$i;
   var $47=($46<<2);
   var $48=((($47)+(1))|0);
   var $49=$3;
   var $50=(($49+($48<<3))|0);
   var $st$14$0=(($50)|0);
   HEAP32[(($st$14$0)>>2)]=$45$0;
   var $st$15$1=(($50+4)|0);
   HEAP32[(($st$15$1)>>2)]=$45$1;
   var $51=$i;
   var $52=($51<<2);
   var $53=((($52)+(2))|0);
   var $54=$1;
   var $55=(($54+($53<<3))|0);
   var $ld$16$0=(($55)|0);
   var $56$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($55+4)|0);
   var $56$1=HEAP32[(($ld$17$1)>>2)];
   var $st$18$0=(($t0)|0);
   HEAP32[(($st$18$0)>>2)]=$56$0;
   var $st$19$1=(($t0+4)|0);
   HEAP32[(($st$19$1)>>2)]=$56$1;
   var $57=$i;
   var $58=($57<<2);
   var $59=((($58)+(3))|0);
   var $60=$1;
   var $61=(($60+($59<<3))|0);
   var $ld$20$0=(($61)|0);
   var $62$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($61+4)|0);
   var $62$1=HEAP32[(($ld$21$1)>>2)];
   var $st$22$0=(($t1)|0);
   HEAP32[(($st$22$0)>>2)]=$62$0;
   var $st$23$1=(($t1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$62$1;
   var $ld$24$0=(($t0)|0);
   var $63$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($t0+4)|0);
   var $63$1=HEAP32[(($ld$25$1)>>2)];
   var $64=$i;
   var $65=($64<<2);
   var $66=((($65)+(2))|0);
   var $67=$3;
   var $68=(($67+($66<<3))|0);
   var $st$26$0=(($68)|0);
   HEAP32[(($st$26$0)>>2)]=$63$0;
   var $st$27$1=(($68+4)|0);
   HEAP32[(($st$27$1)>>2)]=$63$1;
   var $ld$28$0=(($t1)|0);
   var $69$0=HEAP32[(($ld$28$0)>>2)];
   var $ld$29$1=(($t1+4)|0);
   var $69$1=HEAP32[(($ld$29$1)>>2)];
   var $70=$i;
   var $71=($70<<2);
   var $72=((($71)+(3))|0);
   var $73=$3;
   var $74=(($73+($72<<3))|0);
   var $st$30$0=(($74)|0);
   HEAP32[(($st$30$0)>>2)]=$69$0;
   var $st$31$1=(($74+4)|0);
   HEAP32[(($st$31$1)>>2)]=$69$1;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $77=$i;
   var $78=((($77)+(1))|0);
   $i=$78;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $81=$2;
   var $82=$1;
   var $83=(($82+($81<<3))|0);
   $1=$83;
   var $84=$4;
   var $85=$3;
   var $86=(($85+($84<<3))|0);
   $3=$86;
   var $87=$6;
   var $88=$5;
   var $89=(($88+$87)|0);
   $5=$89;
   label = 2; break;
  case 11: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvInitCopyMRTableP13CvBtFuncTable($table) {
 var label = 0;
 var $1;
 $1=$table;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3+4)|0);
 HEAP32[(($4)>>2)]=(316);
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+8)|0);
 HEAP32[(($7)>>2)]=(232);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+12)|0);
 HEAP32[(($10)>>2)]=(226);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+16)|0);
 HEAP32[(($13)>>2)]=(408);
 var $14=$1;
 var $15=(($14)|0);
 var $16=(($15+24)|0);
 HEAP32[(($16)>>2)]=(540);
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18+32)|0);
 HEAP32[(($19)>>2)]=(570);
 var $20=$1;
 var $21=(($20)|0);
 var $22=(($21+48)|0);
 HEAP32[(($22)>>2)]=(370);
 var $23=$1;
 var $24=(($23)|0);
 var $25=(($24+64)|0);
 HEAP32[(($25)>>2)]=(186);
 var $26=$1;
 var $27=(($26)|0);
 var $28=(($27+96)|0);
 HEAP32[(($28)>>2)]=(432);
 var $29=$1;
 var $30=(($29)|0);
 var $31=(($30+128)|0);
 HEAP32[(($31)>>2)]=(610);
 return;
}
function __Z16icvCopy_16s_C4MRPKxiPxi6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((1104)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z16icvCopy_32f_C3MRPKiiPii6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((1040)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z16icvCopy_32f_C4MRPKiiPii6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((1024)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z16icvCopy_64s_C3MRPKxiPxi6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((912)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z16icvCopy_64s_C4MRPKxiPxi6CvSizePKhi($src, $srcstep, $dst, $dststep, $size, $mask, $maskstep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7=sp;
 $1=$src;
 $2=$srcstep;
 $3=$dst;
 $4=$dststep;
 $5=$mask;
 $6=$maskstep;
 var $8=HEAP32[((904)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=$3;
 var $12=$4;
 var $13=$7;
 var $14=$size;
 assert(8 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];
 var $15=$5;
 var $16=$6;
 var $17=FUNCTION_TABLE[$8]($9, $10, $11, $12, $7, $15, $16);
 STACKTOP = sp;
 return $17;
}
function __Z18icvGetCopyMaskFunci($elem_size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$elem_size;
   var $2=HEAP32[((37552)>>2)];
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   __ZL18icvInitCopyMRTableP13CvBtFuncTable(37416);
   HEAP32[((37552)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$1;
   var $7=((((37416)|0)+($6<<2))|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   return $9;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCopy($srcarr, $dstarr, $maskarr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $pix_size;
   var $srcstub=sp;
   var $src;
   var $dststub=(sp)+(32);
   var $dst;
   var $size=(sp)+(64);
   var $src1;
   var $dst1;
   var $iterator=(sp)+(72);
   var $node;
   var $node_copy;
   var $tabidx;
   var $_icv_memcpy_i_;
   var $_icv_memcpy_len_;
   var $_icv_memcpy_dst_;
   var $_icv_memcpy_src_;
   var $arrs=(sp)+(88);
   var $stubs=(sp)+(96);
   var $iterator1=(sp)+(928);
   var $4=(sp)+(1152);
   var $func;
   var $5=(sp)+(1160);
   var $coi1=(sp)+(1168);
   var $coi2=(sp)+(1176);
   var $planes=(sp)+(1184);
   var $planes2=(sp)+(1200);
   var $6=(sp)+(1216);
   var $src_step;
   var $dst_step;
   var $7=(sp)+(1224);
   var $func3;
   var $maskstub=(sp)+(1232);
   var $mask;
   var $src_step4;
   var $dst_step5;
   var $mask_step;
   var $ippi_call_result;
   var $8=(sp)+(1264);
   $1=$srcarr;
   $2=$dstarr;
   $3=$maskarr;
   var $9=$1;
   var $10=$9;
   $src=$10;
   var $11=$2;
   var $12=$11;
   $dst=$12;
   var $13=$src;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 11; break; }
  case 2: 
   var $16=$src;
   var $17=(($16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18 & -65536;
   var $20=(($19)|(0))==1111621632;
   if ($20) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $22=$src;
   var $23=(($22+24)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0)) > 0;
   if ($26) { label = 4; break; } else { label = 11; break; }
  case 4: 
   var $28=$src;
   var $29=(($28+20)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0)) > 0;
   if ($32) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $34=$src;
   var $35=(($34+16)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))!=0;
   if ($38) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $40=$dst;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $43=$dst;
   var $44=(($43)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$45 & -65536;
   var $47=(($46)|(0))==1111621632;
   if ($47) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $49=$dst;
   var $50=(($49+24)|0);
   var $51=$50;
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0)) > 0;
   if ($53) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $55=$dst;
   var $56=(($55+20)|0);
   var $57=$56;
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0)) > 0;
   if ($59) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $61=$dst;
   var $62=(($61+16)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 83; break; } else { label = 11; break; }
  case 11: 
   var $67=$src;
   var $68=(($67)|(0))!=0;
   if ($68) { label = 12; break; } else { label = 37; break; }
  case 12: 
   var $70=$src;
   var $71=$70;
   var $72=(($71)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$73 & -65536;
   var $75=(($74)|(0))==1111752704;
   if ($75) { label = 13; break; } else { label = 37; break; }
  case 13: 
   var $77=$dst;
   var $78=(($77)|(0))!=0;
   if ($78) { label = 14; break; } else { label = 37; break; }
  case 14: 
   var $80=$dst;
   var $81=$80;
   var $82=(($81)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=$83 & -65536;
   var $85=(($84)|(0))==1111752704;
   if ($85) { label = 15; break; } else { label = 37; break; }
  case 15: 
   var $87=$src;
   var $88=$87;
   $src1=$88;
   var $89=$dst;
   var $90=$89;
   $dst1=$90;
   var $91=$src1;
   var $92=(($91+4)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$dst1;
   var $95=(($94+4)|0);
   HEAP32[(($95)>>2)]=$93;
   var $96=$dst1;
   var $97=(($96+36)|0);
   var $98=$97;
   var $99=$src1;
   var $100=(($99+36)|0);
   var $101=$100;
   var $102=$src1;
   var $103=(($102+4)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=($104<<2);
   assert($105 % 1 === 0);(_memcpy($98, $101, $105)|0);
   var $106=$src1;
   var $107=(($106+28)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=$dst1;
   var $110=(($109+28)|0);
   HEAP32[(($110)>>2)]=$108;
   var $111=$src1;
   var $112=(($111+32)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=$dst1;
   var $115=(($114+32)|0);
   HEAP32[(($115)>>2)]=$113;
   var $116=$dst1;
   var $117=(($116+16)|0);
   var $118=HEAP32[(($117)>>2)];
   _cvClearSet($118);
   var $119=$src1;
   var $120=(($119+16)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+60)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=$dst1;
   var $125=(($124+24)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=((($126)*(3))&-1);
   var $128=(($123)|(0)) >= (($127)|(0));
   if ($128) { label = 16; break; } else { label = 21; break; }
  case 16: 
   var $130=$dst1;
   var $131=(($130+20)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=$132;
   _cvFree_($133);
   var $134=$dst1;
   var $135=(($134+20)|0);
   HEAP32[(($135)>>2)]=0;
   var $136=_cvGetErrStatus();
   var $137=(($136)|(0)) < 0;
   if ($137) { label = 17; break; } else { label = 18; break; }
  case 17: 
   _cvError(-1, ((6680)|0), ((11904)|0), ((15144)|0), 317);
   label = 119; break;
  case 18: 
   var $140=$src1;
   var $141=(($140+24)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=$dst1;
   var $144=(($143+24)|0);
   HEAP32[(($144)>>2)]=$142;
   var $145=$dst1;
   var $146=(($145+24)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=($147<<2);
   var $149=_cvAlloc($148);
   var $150=$149;
   var $151=$dst1;
   var $152=(($151+20)|0);
   HEAP32[(($152)>>2)]=$150;
   var $153=_cvGetErrStatus();
   var $154=(($153)|(0)) < 0;
   if ($154) { label = 19; break; } else { label = 20; break; }
  case 19: 
   _cvError(-1, ((6680)|0), ((11904)|0), ((15144)|0), 320);
   label = 119; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $158=$dst1;
   var $159=(($158+20)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=$160;
   var $162=$dst1;
   var $163=(($162+24)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=($164<<2);
   _memset($161, 0, $165);
   var $166=$src1;
   var $167=_cvInitSparseMatIterator($166, $iterator);
   $node=$167;
   label = 22; break;
  case 22: 
   var $169=$node;
   var $170=(($169)|(0))!=0;
   if ($170) { label = 23; break; } else { label = 36; break; }
  case 23: 
   var $172=$dst1;
   var $173=(($172+16)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=_cvSetNew($174);
   var $176=$175;
   $node_copy=$176;
   var $177=$node;
   var $178=(($177)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=$dst1;
   var $181=(($180+24)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=((($182)-(1))|0);
   var $184=$179 & $183;
   $tabidx=$184;
   var $185=$dst1;
   var $186=(($185+16)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($187+28)|0);
   var $189=HEAP32[(($188)>>2)];
   $_icv_memcpy_len_=$189;
   var $190=$node_copy;
   var $191=$190;
   $_icv_memcpy_dst_=$191;
   var $192=$node;
   var $193=$192;
   $_icv_memcpy_src_=$193;
   var $194=$_icv_memcpy_len_;
   var $195=$194 & 3;
   var $196=(($195)|(0))==0;
   if ($196) { label = 24; break; } else { label = 29; break; }
  case 24: 
   $_icv_memcpy_i_=0;
   label = 25; break;
  case 25: 
   var $199=$_icv_memcpy_i_;
   var $200=$_icv_memcpy_len_;
   var $201=(($199)>>>(0)) < (($200)>>>(0));
   if ($201) { label = 26; break; } else { label = 28; break; }
  case 26: 
   var $203=$_icv_memcpy_src_;
   var $204=$_icv_memcpy_i_;
   var $205=(($203+$204)|0);
   var $206=$205;
   var $207=HEAP32[(($206)>>2)];
   var $208=$_icv_memcpy_dst_;
   var $209=$_icv_memcpy_i_;
   var $210=(($208+$209)|0);
   var $211=$210;
   HEAP32[(($211)>>2)]=$207;
   label = 27; break;
  case 27: 
   var $213=$_icv_memcpy_i_;
   var $214=((($213)+(4))|0);
   $_icv_memcpy_i_=$214;
   label = 25; break;
  case 28: 
   label = 34; break;
  case 29: 
   $_icv_memcpy_i_=0;
   label = 30; break;
  case 30: 
   var $218=$_icv_memcpy_i_;
   var $219=$_icv_memcpy_len_;
   var $220=(($218)>>>(0)) < (($219)>>>(0));
   if ($220) { label = 31; break; } else { label = 33; break; }
  case 31: 
   var $222=$_icv_memcpy_i_;
   var $223=$_icv_memcpy_src_;
   var $224=(($223+$222)|0);
   var $225=HEAP8[($224)];
   var $226=$_icv_memcpy_i_;
   var $227=$_icv_memcpy_dst_;
   var $228=(($227+$226)|0);
   HEAP8[($228)]=$225;
   label = 32; break;
  case 32: 
   var $230=$_icv_memcpy_i_;
   var $231=((($230)+(1))|0);
   $_icv_memcpy_i_=$231;
   label = 30; break;
  case 33: 
   label = 34; break;
  case 34: 
   var $234=$tabidx;
   var $235=$dst1;
   var $236=(($235+20)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=(($237+($234<<2))|0);
   var $239=HEAP32[(($238)>>2)];
   var $240=$239;
   var $241=$node_copy;
   var $242=(($241+4)|0);
   HEAP32[(($242)>>2)]=$240;
   var $243=$node_copy;
   var $244=$243;
   var $245=$tabidx;
   var $246=$dst1;
   var $247=(($246+20)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=(($248+($245<<2))|0);
   HEAP32[(($249)>>2)]=$244;
   label = 35; break;
  case 35: 
   var $251=_cvGetNextSparseNode($iterator);
   $node=$251;
   label = 22; break;
  case 36: 
   label = 119; break;
  case 37: 
   var $254=$src;
   var $255=(($254)|(0))!=0;
   if ($255) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $257=$src;
   var $258=$257;
   var $259=(($258)|0);
   var $260=HEAP32[(($259)>>2)];
   var $261=$260 & -65536;
   var $262=(($261)|(0))==1111687168;
   if ($262) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $264=$src;
   var $265=$264;
   var $266=(($265+16)|0);
   var $267=$266;
   var $268=HEAP32[(($267)>>2)];
   var $269=(($268)|(0))!=0;
   if ($269) { label = 43; break; } else { label = 40; break; }
  case 40: 
   var $271=$dst;
   var $272=(($271)|(0))!=0;
   if ($272) { label = 41; break; } else { label = 63; break; }
  case 41: 
   var $274=$dst;
   var $275=$274;
   var $276=(($275)|0);
   var $277=HEAP32[(($276)>>2)];
   var $278=$277 & -65536;
   var $279=(($278)|(0))==1111687168;
   if ($279) { label = 42; break; } else { label = 63; break; }
  case 42: 
   var $281=$dst;
   var $282=$281;
   var $283=(($282+16)|0);
   var $284=$283;
   var $285=HEAP32[(($284)>>2)];
   var $286=(($285)|(0))!=0;
   if ($286) { label = 43; break; } else { label = 63; break; }
  case 43: 
   var $288=(($arrs)|0);
   var $289=$src;
   var $290=$289;
   HEAP32[(($288)>>2)]=$290;
   var $291=(($288+4)|0);
   var $292=$dst;
   var $293=$292;
   HEAP32[(($291)>>2)]=$293;
   var $294=(($arrs)|0);
   var $295=$3;
   var $296=(($stubs)|0);
   var $297=_cvInitNArrayIterator(2, $294, $295, $296, $iterator1, 0);
   var $298=_cvGetErrStatus();
   var $299=(($298)|(0)) < 0;
   if ($299) { label = 44; break; } else { label = 45; break; }
  case 44: 
   _cvError(-1, ((6680)|0), ((11904)|0), ((15144)|0), 342);
   label = 119; break;
  case 45: 
   var $302=(($iterator1+184)|0);
   var $303=(($302)|0);
   var $304=HEAP32[(($303)>>2)];
   var $305=(($304)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=$306 & 504;
   var $308=$307 >> 3;
   var $309=((($308)+(1))|0);
   var $310=(($iterator1+184)|0);
   var $311=(($310)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=(($312)|0);
   var $314=HEAP32[(($313)>>2)];
   var $315=$314 & 7;
   var $316=($315<<1);
   var $317=47696 >>> (($316)>>>(0));
   var $318=$317 & 3;
   var $319=$309 << $318;
   $pix_size=$319;
   var $320=$3;
   var $321=(($320)|(0))!=0;
   if ($321) { label = 56; break; } else { label = 46; break; }
  case 46: 
   var $323=$pix_size;
   var $324=(($iterator1+8)|0);
   var $325=(($324)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327=(Math.imul($326,$323)|0);
   HEAP32[(($325)>>2)]=$327;
   var $328=(($iterator1+8)|0);
   var $329=(($328)|0);
   var $330=HEAP32[(($329)>>2)];
   var $331=(($330)|(0)) <= 80;
   if ($331) { label = 47; break; } else { label = 51; break; }
  case 47: 
   label = 48; break;
  case 48: 
   var $334=(($iterator1+16)|0);
   var $335=(($334+4)|0);
   var $336=HEAP32[(($335)>>2)];
   var $337=(($iterator1+16)|0);
   var $338=(($337)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($iterator1+8)|0);
   var $341=(($340)|0);
   var $342=HEAP32[(($341)>>2)];
   assert($342 % 1 === 0);(_memcpy($336, $339, $342)|0);
   label = 49; break;
  case 49: 
   var $344=_cvNextNArraySlice($iterator1);
   var $345=(($344)|(0))!=0;
   if ($345) { label = 48; break; } else { label = 50; break; }
  case 50: 
   label = 55; break;
  case 51: 
   label = 52; break;
  case 52: 
   var $349=(($iterator1+16)|0);
   var $350=(($349)|0);
   var $351=HEAP32[(($350)>>2)];
   var $352=(($iterator1+16)|0);
   var $353=(($352+4)|0);
   var $354=HEAP32[(($353)>>2)];
   var $355=(($iterator1+8)|0);
   var $356=$4;
   var $357=$355;
   assert(8 % 1 === 0);HEAP32[(($356)>>2)]=HEAP32[(($357)>>2)];HEAP32[((($356)+(4))>>2)]=HEAP32[((($357)+(4))>>2)];
   var $358=__Z14icvCopy_8u_C1RPKhiPhi6CvSize($351, 1073741824, $354, 1073741824, $4);
   label = 53; break;
  case 53: 
   var $360=_cvNextNArraySlice($iterator1);
   var $361=(($360)|(0))!=0;
   if ($361) { label = 52; break; } else { label = 54; break; }
  case 54: 
   label = 55; break;
  case 55: 
   label = 62; break;
  case 56: 
   var $365=$pix_size;
   var $366=__Z18icvGetCopyMaskFunci($365);
   $func=$366;
   var $367=$func;
   var $368=(($367)|(0))!=0;
   if ($368) { label = 58; break; } else { label = 57; break; }
  case 57: 
   _cvError(-210, ((6680)|0), ((36896)|0), ((15144)|0), 370);
   label = 119; break;
  case 58: 
   label = 59; break;
  case 59: 
   var $372=$func;
   var $373=(($iterator1+16)|0);
   var $374=(($373)|0);
   var $375=HEAP32[(($374)>>2)];
   var $376=(($iterator1+16)|0);
   var $377=(($376+4)|0);
   var $378=HEAP32[(($377)>>2)];
   var $379=(($iterator1+8)|0);
   var $380=$5;
   var $381=$379;
   assert(8 % 1 === 0);HEAP32[(($380)>>2)]=HEAP32[(($381)>>2)];HEAP32[((($380)+(4))>>2)]=HEAP32[((($381)+(4))>>2)];
   var $382=(($iterator1+16)|0);
   var $383=(($382+8)|0);
   var $384=HEAP32[(($383)>>2)];
   var $385=FUNCTION_TABLE[$372]($375, 1073741824, $378, 1073741824, $5, $384, 1073741824);
   label = 60; break;
  case 60: 
   var $387=_cvNextNArraySlice($iterator1);
   var $388=(($387)|(0))!=0;
   if ($388) { label = 59; break; } else { label = 61; break; }
  case 61: 
   label = 62; break;
  case 62: 
   label = 119; break;
  case 63: 
   HEAP32[(($coi1)>>2)]=0;
   HEAP32[(($coi2)>>2)]=0;
   var $392=$src;
   var $393=$392;
   var $394=_cvGetMat($393, $srcstub, $coi1, 0);
   $src=$394;
   var $395=_cvGetErrStatus();
   var $396=(($395)|(0)) < 0;
   if ($396) { label = 64; break; } else { label = 65; break; }
  case 64: 
   _cvError(-1, ((6680)|0), ((11904)|0), ((15144)|0), 386);
   label = 119; break;
  case 65: 
   var $399=$dst;
   var $400=$399;
   var $401=_cvGetMat($400, $dststub, $coi2, 0);
   $dst=$401;
   var $402=_cvGetErrStatus();
   var $403=(($402)|(0)) < 0;
   if ($403) { label = 66; break; } else { label = 67; break; }
  case 66: 
   _cvError(-1, ((6680)|0), ((11904)|0), ((15144)|0), 387);
   label = 119; break;
  case 67: 
   var $406=HEAP32[(($coi1)>>2)];
   var $407=(($406)|(0))!=0;
   if ($407) { label = 68; break; } else { label = 73; break; }
  case 68: 
   var $409=$planes;
   HEAP32[(($409)>>2)]=0; HEAP32[((($409)+(4))>>2)]=0; HEAP32[((($409)+(8))>>2)]=0; HEAP32[((($409)+(12))>>2)]=0;
   var $410=$3;
   var $411=(($410)|(0))!=0;
   if ($411) { label = 69; break; } else { label = 70; break; }
  case 69: 
   _cvError(-5, ((6680)|0), ((11208)|0), ((15144)|0), 394);
   label = 119; break;
  case 70: 
   var $414=$dst;
   var $415=$414;
   var $416=HEAP32[(($coi1)>>2)];
   var $417=((($416)-(1))|0);
   var $418=(($planes+($417<<2))|0);
   HEAP32[(($418)>>2)]=$415;
   var $419=$src;
   var $420=$419;
   var $421=(($planes)|0);
   var $422=HEAP32[(($421)>>2)];
   var $423=(($planes+4)|0);
   var $424=HEAP32[(($423)>>2)];
   var $425=(($planes+8)|0);
   var $426=HEAP32[(($425)>>2)];
   var $427=(($planes+12)|0);
   var $428=HEAP32[(($427)>>2)];
   _cvSplit($420, $422, $424, $426, $428);
   var $429=_cvGetErrStatus();
   var $430=(($429)|(0)) < 0;
   if ($430) { label = 71; break; } else { label = 72; break; }
  case 71: 
   _cvError(-1, ((6680)|0), ((11904)|0), ((15144)|0), 397);
   label = 119; break;
  case 72: 
   label = 119; break;
  case 73: 
   var $434=HEAP32[(($coi2)>>2)];
   var $435=(($434)|(0))!=0;
   if ($435) { label = 74; break; } else { label = 79; break; }
  case 74: 
   var $437=$planes2;
   HEAP32[(($437)>>2)]=0; HEAP32[((($437)+(4))>>2)]=0; HEAP32[((($437)+(8))>>2)]=0; HEAP32[((($437)+(12))>>2)]=0;
   var $438=$3;
   var $439=(($438)|(0))!=0;
   if ($439) { label = 75; break; } else { label = 76; break; }
  case 75: 
   _cvError(-5, ((6680)|0), ((11208)|0), ((15144)|0), 405);
   label = 119; break;
  case 76: 
   var $442=$src;
   var $443=$442;
   var $444=HEAP32[(($coi2)>>2)];
   var $445=((($444)-(1))|0);
   var $446=(($planes2+($445<<2))|0);
   HEAP32[(($446)>>2)]=$443;
   var $447=(($planes2)|0);
   var $448=HEAP32[(($447)>>2)];
   var $449=(($planes2+4)|0);
   var $450=HEAP32[(($449)>>2)];
   var $451=(($planes2+8)|0);
   var $452=HEAP32[(($451)>>2)];
   var $453=(($planes2+12)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455=$dst;
   var $456=$455;
   _cvMerge($448, $450, $452, $454, $456);
   var $457=_cvGetErrStatus();
   var $458=(($457)|(0)) < 0;
   if ($458) { label = 77; break; } else { label = 78; break; }
  case 77: 
   _cvError(-1, ((6680)|0), ((11904)|0), ((15144)|0), 408);
   label = 119; break;
  case 78: 
   label = 119; break;
  case 79: 
   label = 80; break;
  case 80: 
   label = 81; break;
  case 81: 
   label = 82; break;
  case 82: 
   label = 83; break;
  case 83: 
   var $466=$src;
   var $467=(($466)|0);
   var $468=HEAP32[(($467)>>2)];
   var $469=$dst;
   var $470=(($469)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=$468 ^ $471;
   var $473=$472 & 511;
   var $474=(($473)|(0))==0;
   if ($474) { label = 85; break; } else { label = 84; break; }
  case 84: 
   _cvError(-205, ((6680)|0), ((36896)|0), ((15144)|0), 415);
   label = 119; break;
  case 85: 
   var $477=$src;
   var $478=(($477+20)|0);
   var $479=$478;
   var $480=HEAP32[(($479)>>2)];
   var $481=$dst;
   var $482=(($481+20)|0);
   var $483=$482;
   var $484=HEAP32[(($483)>>2)];
   var $485=(($480)|(0))==(($484)|(0));
   if ($485) { label = 86; break; } else { label = 87; break; }
  case 86: 
   var $487=$src;
   var $488=(($487+24)|0);
   var $489=$488;
   var $490=HEAP32[(($489)>>2)];
   var $491=$dst;
   var $492=(($491+24)|0);
   var $493=$492;
   var $494=HEAP32[(($493)>>2)];
   var $495=(($490)|(0))==(($494)|(0));
   if ($495) { label = 88; break; } else { label = 87; break; }
  case 87: 
   _cvError(-209, ((6680)|0), ((36896)|0), ((15144)|0), 418);
   label = 119; break;
  case 88: 
   var $498=$src;
   __Z12cvGetMatSizePK5CvMat($6, $498);
   var $499=$size;
   var $500=$6;
   assert(8 % 1 === 0);HEAP32[(($499)>>2)]=HEAP32[(($500)>>2)];HEAP32[((($499)+(4))>>2)]=HEAP32[((($500)+(4))>>2)];
   var $501=$src;
   var $502=(($501)|0);
   var $503=HEAP32[(($502)>>2)];
   var $504=$503 & 504;
   var $505=$504 >> 3;
   var $506=((($505)+(1))|0);
   var $507=$src;
   var $508=(($507)|0);
   var $509=HEAP32[(($508)>>2)];
   var $510=$509 & 7;
   var $511=($510<<1);
   var $512=47696 >>> (($511)>>>(0));
   var $513=$512 & 3;
   var $514=$506 << $513;
   $pix_size=$514;
   var $515=$3;
   var $516=(($515)|(0))!=0;
   if ($516) { label = 98; break; } else { label = 89; break; }
  case 89: 
   var $518=$src;
   var $519=(($518+4)|0);
   var $520=HEAP32[(($519)>>2)];
   $src_step=$520;
   var $521=$dst;
   var $522=(($521+4)|0);
   var $523=HEAP32[(($522)>>2)];
   $dst_step=$523;
   var $524=$pix_size;
   var $525=(($size)|0);
   var $526=HEAP32[(($525)>>2)];
   var $527=(Math.imul($526,$524)|0);
   HEAP32[(($525)>>2)]=$527;
   var $528=$src;
   var $529=(($528)|0);
   var $530=HEAP32[(($529)>>2)];
   var $531=$dst;
   var $532=(($531)|0);
   var $533=HEAP32[(($532)>>2)];
   var $534=$530 & $533;
   var $535=$534 & 16384;
   var $536=(($535)|(0))!=0;
   if ($536) { label = 90; break; } else { label = 95; break; }
  case 90: 
   var $538=$src_step;
   var $539=$dst_step;
   var $540=(($538)|(0))==(($539)|(0));
   if ($540) { label = 91; break; } else { label = 95; break; }
  case 91: 
   var $542=$src_step;
   var $543=$src;
   var $544=(($543+24)|0);
   var $545=$544;
   var $546=HEAP32[(($545)>>2)];
   var $547=$pix_size;
   var $548=(Math.imul($546,$547)|0);
   var $549=(($542)|(0))==(($548)|(0));
   if ($549) { label = 92; break; } else { label = 95; break; }
  case 92: 
   var $551=(($size+4)|0);
   var $552=HEAP32[(($551)>>2)];
   var $553=(($size)|0);
   var $554=HEAP32[(($553)>>2)];
   var $555=(Math.imul($554,$552)|0);
   HEAP32[(($553)>>2)]=$555;
   var $556=(($size)|0);
   var $557=HEAP32[(($556)>>2)];
   var $558=(($557)|(0)) <= 800;
   if ($558) { label = 93; break; } else { label = 94; break; }
  case 93: 
   var $560=$dst;
   var $561=(($560+16)|0);
   var $562=$561;
   var $563=HEAP32[(($562)>>2)];
   var $564=$src;
   var $565=(($564+16)|0);
   var $566=$565;
   var $567=HEAP32[(($566)>>2)];
   var $568=(($size)|0);
   var $569=HEAP32[(($568)>>2)];
   assert($569 % 1 === 0);(_memcpy($563, $567, $569)|0);
   label = 119; break;
  case 94: 
   var $571=(($size+4)|0);
   HEAP32[(($571)>>2)]=1;
   $dst_step=1073741824;
   $src_step=1073741824;
   label = 95; break;
  case 95: 
   var $573=$src;
   var $574=(($573+16)|0);
   var $575=$574;
   var $576=HEAP32[(($575)>>2)];
   var $577=$dst;
   var $578=(($577+16)|0);
   var $579=$578;
   var $580=HEAP32[(($579)>>2)];
   var $581=(($576)|(0))!=(($580)|(0));
   if ($581) { label = 96; break; } else { label = 97; break; }
  case 96: 
   var $583=$src;
   var $584=(($583+16)|0);
   var $585=$584;
   var $586=HEAP32[(($585)>>2)];
   var $587=$src_step;
   var $588=$dst;
   var $589=(($588+16)|0);
   var $590=$589;
   var $591=HEAP32[(($590)>>2)];
   var $592=$dst_step;
   var $593=$7;
   var $594=$size;
   assert(8 % 1 === 0);HEAP32[(($593)>>2)]=HEAP32[(($594)>>2)];HEAP32[((($593)+(4))>>2)]=HEAP32[((($594)+(4))>>2)];
   var $595=__Z14icvCopy_8u_C1RPKhiPhi6CvSize($586, $587, $591, $592, $7);
   label = 97; break;
  case 97: 
   label = 118; break;
  case 98: 
   var $598=$pix_size;
   var $599=__Z18icvGetCopyMaskFunci($598);
   $func3=$599;
   var $600=$3;
   var $601=$600;
   $mask=$601;
   var $602=$src;
   var $603=(($602+4)|0);
   var $604=HEAP32[(($603)>>2)];
   $src_step4=$604;
   var $605=$dst;
   var $606=(($605+4)|0);
   var $607=HEAP32[(($606)>>2)];
   $dst_step5=$607;
   var $608=$mask;
   var $609=(($608)|(0))!=0;
   if ($609) { label = 99; break; } else { label = 103; break; }
  case 99: 
   var $611=$mask;
   var $612=(($611)|0);
   var $613=HEAP32[(($612)>>2)];
   var $614=$613 & -65536;
   var $615=(($614)|(0))==1111621632;
   if ($615) { label = 100; break; } else { label = 103; break; }
  case 100: 
   var $617=$mask;
   var $618=(($617+24)|0);
   var $619=$618;
   var $620=HEAP32[(($619)>>2)];
   var $621=(($620)|(0)) > 0;
   if ($621) { label = 101; break; } else { label = 103; break; }
  case 101: 
   var $623=$mask;
   var $624=(($623+20)|0);
   var $625=$624;
   var $626=HEAP32[(($625)>>2)];
   var $627=(($626)|(0)) > 0;
   if ($627) { label = 102; break; } else { label = 103; break; }
  case 102: 
   var $629=$mask;
   var $630=(($629+16)|0);
   var $631=$630;
   var $632=HEAP32[(($631)>>2)];
   var $633=(($632)|(0))!=0;
   if ($633) { label = 106; break; } else { label = 103; break; }
  case 103: 
   var $635=$mask;
   var $636=$635;
   var $637=_cvGetMat($636, $maskstub, 0, 0);
   $mask=$637;
   var $638=_cvGetErrStatus();
   var $639=(($638)|(0)) < 0;
   if ($639) { label = 104; break; } else { label = 105; break; }
  case 104: 
   _cvError(-1, ((6680)|0), ((11904)|0), ((15144)|0), 455);
   label = 119; break;
  case 105: 
   label = 106; break;
  case 106: 
   var $643=$mask;
   var $644=(($643)|0);
   var $645=HEAP32[(($644)>>2)];
   var $646=$645 & 510;
   var $647=(($646)|(0))==0;
   if ($647) { label = 108; break; } else { label = 107; break; }
  case 107: 
   _cvError(-208, ((6680)|0), ((36896)|0), ((15144)|0), 457);
   label = 119; break;
  case 108: 
   var $650=$src;
   var $651=(($650+20)|0);
   var $652=$651;
   var $653=HEAP32[(($652)>>2)];
   var $654=$mask;
   var $655=(($654+20)|0);
   var $656=$655;
   var $657=HEAP32[(($656)>>2)];
   var $658=(($653)|(0))==(($657)|(0));
   if ($658) { label = 109; break; } else { label = 110; break; }
  case 109: 
   var $660=$src;
   var $661=(($660+24)|0);
   var $662=$661;
   var $663=HEAP32[(($662)>>2)];
   var $664=$mask;
   var $665=(($664+24)|0);
   var $666=$665;
   var $667=HEAP32[(($666)>>2)];
   var $668=(($663)|(0))==(($667)|(0));
   if ($668) { label = 111; break; } else { label = 110; break; }
  case 110: 
   _cvError(-209, ((6680)|0), ((36896)|0), ((15144)|0), 460);
   label = 119; break;
  case 111: 
   var $671=$mask;
   var $672=(($671+4)|0);
   var $673=HEAP32[(($672)>>2)];
   $mask_step=$673;
   var $674=$src;
   var $675=(($674)|0);
   var $676=HEAP32[(($675)>>2)];
   var $677=$dst;
   var $678=(($677)|0);
   var $679=HEAP32[(($678)>>2)];
   var $680=$676 & $679;
   var $681=$mask;
   var $682=(($681)|0);
   var $683=HEAP32[(($682)>>2)];
   var $684=$680 & $683;
   var $685=$684 & 16384;
   var $686=(($685)|(0))!=0;
   if ($686) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $688=(($size+4)|0);
   var $689=HEAP32[(($688)>>2)];
   var $690=(($size)|0);
   var $691=HEAP32[(($690)>>2)];
   var $692=(Math.imul($691,$689)|0);
   HEAP32[(($690)>>2)]=$692;
   var $693=(($size+4)|0);
   HEAP32[(($693)>>2)]=1;
   $mask_step=1073741824;
   $dst_step5=1073741824;
   $src_step4=1073741824;
   label = 113; break;
  case 113: 
   var $695=$func3;
   var $696=(($695)|(0))!=0;
   if ($696) { label = 115; break; } else { label = 114; break; }
  case 114: 
   _cvError(-210, ((6680)|0), ((36896)|0), ((15144)|0), 472);
   label = 119; break;
  case 115: 
   var $699=$func3;
   var $700=$src;
   var $701=(($700+16)|0);
   var $702=$701;
   var $703=HEAP32[(($702)>>2)];
   var $704=$src_step4;
   var $705=$dst;
   var $706=(($705+16)|0);
   var $707=$706;
   var $708=HEAP32[(($707)>>2)];
   var $709=$dst_step5;
   var $710=$8;
   var $711=$size;
   assert(8 % 1 === 0);HEAP32[(($710)>>2)]=HEAP32[(($711)>>2)];HEAP32[((($710)+(4))>>2)]=HEAP32[((($711)+(4))>>2)];
   var $712=$mask;
   var $713=(($712+16)|0);
   var $714=$713;
   var $715=HEAP32[(($714)>>2)];
   var $716=$mask_step;
   var $717=FUNCTION_TABLE[$699]($703, $704, $708, $709, $8, $715, $716);
   $ippi_call_result=$717;
   var $718=$ippi_call_result;
   var $719=(($718)|(0)) < 0;
   if ($719) { label = 116; break; } else { label = 117; break; }
  case 116: 
   var $721=$ippi_call_result;
   var $722=_cvErrorFromIppStatus($721);
   _cvError($722, ((6680)|0), ((10400)|0), ((15144)|0), 475);
   label = 119; break;
  case 117: 
   label = 118; break;
  case 118: 
   label = 119; break;
  case 119: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL21icvInitFlipHorzRTableP13CvBtFuncTable($table) {
 var label = 0;
 var $1;
 $1=$table;
 var $2=$1;
 var $3=(($2)|0);
 var $4=(($3+4)|0);
 HEAP32[(($4)>>2)]=(582);
 var $5=$1;
 var $6=(($5)|0);
 var $7=(($6+8)|0);
 HEAP32[(($7)>>2)]=(532);
 var $8=$1;
 var $9=(($8)|0);
 var $10=(($9+12)|0);
 HEAP32[(($10)>>2)]=(678);
 var $11=$1;
 var $12=(($11)|0);
 var $13=(($12+16)|0);
 HEAP32[(($13)>>2)]=(682);
 var $14=$1;
 var $15=(($14)|0);
 var $16=(($15+24)|0);
 HEAP32[(($16)>>2)]=(4);
 var $17=$1;
 var $18=(($17)|0);
 var $19=(($18+32)|0);
 HEAP32[(($19)>>2)]=(190);
 var $20=$1;
 var $21=(($20)|0);
 var $22=(($21+48)|0);
 HEAP32[(($22)>>2)]=(652);
 var $23=$1;
 var $24=(($23)|0);
 var $25=(($24+64)|0);
 HEAP32[(($25)>>2)]=(748);
 var $26=$1;
 var $27=(($26)|0);
 var $28=(($27+96)|0);
 HEAP32[(($28)>>2)]=(464);
 var $29=$1;
 var $30=(($29)|0);
 var $31=(($30+128)|0);
 HEAP32[(($31)>>2)]=(250);
 return;
}
function __ZL18icvFlipVert_8u_C1RPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $y;
   var $i;
   var $src1;
   var $dst1;
   var $t0;
   var $t1;
   var $t01;
   var $t12;
   var $t03;
   var $t14;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=$1;
   var $6=(($size+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=((($7)-(1))|0);
   var $9=$2;
   var $10=(Math.imul($8,$9)|0);
   var $11=(($5+$10)|0);
   $src1=$11;
   var $12=$3;
   var $13=(($size+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=((($14)-(1))|0);
   var $16=$4;
   var $17=(Math.imul($15,$16)|0);
   var $18=(($12+$17)|0);
   $dst1=$18;
   $y=0;
   label = 2; break;
  case 2: 
   var $20=$y;
   var $21=(($size+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)+(1))|0);
   var $24=((((($23)|(0)))/(2))&-1);
   var $25=(($20)|(0)) < (($24)|(0));
   if ($25) { label = 3; break; } else { label = 19; break; }
  case 3: 
   $i=0;
   var $27=$1;
   var $28=$27;
   var $29=$3;
   var $30=$29;
   var $31=$28 | $30;
   var $32=$src1;
   var $33=$32;
   var $34=$31 | $33;
   var $35=$dst1;
   var $36=$35;
   var $37=$34 | $36;
   var $38=((((($37)>>>(0)))%(4))&-1);
   var $39=(($38)|(0))==0;
   if ($39) { label = 4; break; } else { label = 13; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $42=$i;
   var $43=(($size)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=((($44)-(16))|0);
   var $46=(($42)|(0)) <= (($45)|(0));
   if ($46) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $48=$1;
   var $49=$i;
   var $50=(($48+$49)|0);
   var $51=$50;
   var $52=(($51)|0);
   var $53=HEAP32[(($52)>>2)];
   $t0=$53;
   var $54=$src1;
   var $55=$i;
   var $56=(($54+$55)|0);
   var $57=$56;
   var $58=(($57)|0);
   var $59=HEAP32[(($58)>>2)];
   $t1=$59;
   var $60=$t1;
   var $61=$3;
   var $62=$i;
   var $63=(($61+$62)|0);
   var $64=$63;
   var $65=(($64)|0);
   HEAP32[(($65)>>2)]=$60;
   var $66=$t0;
   var $67=$dst1;
   var $68=$i;
   var $69=(($67+$68)|0);
   var $70=$69;
   var $71=(($70)|0);
   HEAP32[(($71)>>2)]=$66;
   var $72=$1;
   var $73=$i;
   var $74=(($72+$73)|0);
   var $75=$74;
   var $76=(($75+4)|0);
   var $77=HEAP32[(($76)>>2)];
   $t0=$77;
   var $78=$src1;
   var $79=$i;
   var $80=(($78+$79)|0);
   var $81=$80;
   var $82=(($81+4)|0);
   var $83=HEAP32[(($82)>>2)];
   $t1=$83;
   var $84=$t1;
   var $85=$3;
   var $86=$i;
   var $87=(($85+$86)|0);
   var $88=$87;
   var $89=(($88+4)|0);
   HEAP32[(($89)>>2)]=$84;
   var $90=$t0;
   var $91=$dst1;
   var $92=$i;
   var $93=(($91+$92)|0);
   var $94=$93;
   var $95=(($94+4)|0);
   HEAP32[(($95)>>2)]=$90;
   var $96=$1;
   var $97=$i;
   var $98=(($96+$97)|0);
   var $99=$98;
   var $100=(($99+8)|0);
   var $101=HEAP32[(($100)>>2)];
   $t0=$101;
   var $102=$src1;
   var $103=$i;
   var $104=(($102+$103)|0);
   var $105=$104;
   var $106=(($105+8)|0);
   var $107=HEAP32[(($106)>>2)];
   $t1=$107;
   var $108=$t1;
   var $109=$3;
   var $110=$i;
   var $111=(($109+$110)|0);
   var $112=$111;
   var $113=(($112+8)|0);
   HEAP32[(($113)>>2)]=$108;
   var $114=$t0;
   var $115=$dst1;
   var $116=$i;
   var $117=(($115+$116)|0);
   var $118=$117;
   var $119=(($118+8)|0);
   HEAP32[(($119)>>2)]=$114;
   var $120=$1;
   var $121=$i;
   var $122=(($120+$121)|0);
   var $123=$122;
   var $124=(($123+12)|0);
   var $125=HEAP32[(($124)>>2)];
   $t0=$125;
   var $126=$src1;
   var $127=$i;
   var $128=(($126+$127)|0);
   var $129=$128;
   var $130=(($129+12)|0);
   var $131=HEAP32[(($130)>>2)];
   $t1=$131;
   var $132=$t1;
   var $133=$3;
   var $134=$i;
   var $135=(($133+$134)|0);
   var $136=$135;
   var $137=(($136+12)|0);
   HEAP32[(($137)>>2)]=$132;
   var $138=$t0;
   var $139=$dst1;
   var $140=$i;
   var $141=(($139+$140)|0);
   var $142=$141;
   var $143=(($142+12)|0);
   HEAP32[(($143)>>2)]=$138;
   label = 7; break;
  case 7: 
   var $145=$i;
   var $146=((($145)+(16))|0);
   $i=$146;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $149=$i;
   var $150=(($size)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=((($151)-(4))|0);
   var $153=(($149)|(0)) <= (($152)|(0));
   if ($153) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $155=$1;
   var $156=$i;
   var $157=(($155+$156)|0);
   var $158=$157;
   var $159=(($158)|0);
   var $160=HEAP32[(($159)>>2)];
   $t01=$160;
   var $161=$src1;
   var $162=$i;
   var $163=(($161+$162)|0);
   var $164=$163;
   var $165=(($164)|0);
   var $166=HEAP32[(($165)>>2)];
   $t12=$166;
   var $167=$t12;
   var $168=$3;
   var $169=$i;
   var $170=(($168+$169)|0);
   var $171=$170;
   var $172=(($171)|0);
   HEAP32[(($172)>>2)]=$167;
   var $173=$t01;
   var $174=$dst1;
   var $175=$i;
   var $176=(($174+$175)|0);
   var $177=$176;
   var $178=(($177)|0);
   HEAP32[(($178)>>2)]=$173;
   label = 11; break;
  case 11: 
   var $180=$i;
   var $181=((($180)+(4))|0);
   $i=$181;
   label = 9; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $185=$i;
   var $186=(($size)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($185)|(0)) < (($187)|(0));
   if ($188) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $190=$i;
   var $191=$1;
   var $192=(($191+$190)|0);
   var $193=HEAP8[($192)];
   $t03=$193;
   var $194=$i;
   var $195=$src1;
   var $196=(($195+$194)|0);
   var $197=HEAP8[($196)];
   $t14=$197;
   var $198=$t14;
   var $199=$i;
   var $200=$3;
   var $201=(($200+$199)|0);
   HEAP8[($201)]=$198;
   var $202=$t03;
   var $203=$i;
   var $204=$dst1;
   var $205=(($204+$203)|0);
   HEAP8[($205)]=$202;
   label = 16; break;
  case 16: 
   var $207=$i;
   var $208=((($207)+(1))|0);
   $i=$208;
   label = 14; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $211=$y;
   var $212=((($211)+(1))|0);
   $y=$212;
   var $213=$2;
   var $214=$1;
   var $215=(($214+$213)|0);
   $1=$215;
   var $216=$2;
   var $217=$src1;
   var $218=(((-$216))|0);
   var $219=(($217+$218)|0);
   $src1=$219;
   var $220=$4;
   var $221=$3;
   var $222=(($221+$220)|0);
   $3=$222;
   var $223=$4;
   var $224=$dst1;
   var $225=(((-$223))|0);
   var $226=(($224+$225)|0);
   $dst1=$226;
   label = 2; break;
  case 19: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvFlipHorz_8u_C1RPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=(((($7)>>>(0)))&-1);
   $2=$8;
   var $9=$4;
   var $10=(((($9)>>>(0)))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=$1;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   $t0=$27;
   var $28=$len;
   var $29=$i;
   var $30=((($28)-($29))|0);
   var $31=((($30)-(1))|0);
   var $32=$1;
   var $33=(($32+$31)|0);
   var $34=HEAP8[($33)];
   $t1=$34;
   var $35=$t1;
   var $36=$i;
   var $37=$3;
   var $38=(($37+$36)|0);
   HEAP8[($38)]=$35;
   var $39=$t0;
   var $40=$len;
   var $41=$i;
   var $42=((($40)-($41))|0);
   var $43=((($42)-(1))|0);
   var $44=$3;
   var $45=(($44+$43)|0);
   HEAP8[($45)]=$39;
   label = 6; break;
  case 6: 
   var $47=$i;
   var $48=((($47)+(1))|0);
   $i=$48;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $51=$2;
   var $52=$1;
   var $53=(($52+$51)|0);
   $1=$53;
   var $54=$4;
   var $55=$3;
   var $56=(($55+$54)|0);
   $3=$56;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvFlipHorz_8u_C2RPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=$1;
   var $26=(($25+($24<<1))|0);
   var $27=HEAP16[(($26)>>1)];
   $t0=$27;
   var $28=$len;
   var $29=$i;
   var $30=((($28)-($29))|0);
   var $31=((($30)-(1))|0);
   var $32=$1;
   var $33=(($32+($31<<1))|0);
   var $34=HEAP16[(($33)>>1)];
   $t1=$34;
   var $35=$t1;
   var $36=$i;
   var $37=$3;
   var $38=(($37+($36<<1))|0);
   HEAP16[(($38)>>1)]=$35;
   var $39=$t0;
   var $40=$len;
   var $41=$i;
   var $42=((($40)-($41))|0);
   var $43=((($42)-(1))|0);
   var $44=$3;
   var $45=(($44+($43<<1))|0);
   HEAP16[(($45)>>1)]=$39;
   label = 6; break;
  case 6: 
   var $47=$i;
   var $48=((($47)+(1))|0);
   $i=$48;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $51=$2;
   var $52=$1;
   var $53=(($52+($51<<1))|0);
   $1=$53;
   var $54=$4;
   var $55=$3;
   var $56=(($55+($54<<1))|0);
   $3=$56;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _cvFlip($srcarr, $dstarr, $flip_mode) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $sstub=sp;
   var $src;
   var $dstub=(sp)+(32);
   var $dst;
   var $size=(sp)+(64);
   var $func;
   var $pix_size;
   var $coi=(sp)+(72);
   var $coi1=(sp)+(80);
   var $4=(sp)+(88);
   var $ippi_call_result;
   var $5=(sp)+(96);
   var $inplace;
   var $dst_data;
   var $dst_step;
   var $ippi_call_result2;
   var $6=(sp)+(104);
   var $ippi_call_result3;
   var $7=(sp)+(112);
   $1=$srcarr;
   $2=$dstarr;
   $3=$flip_mode;
   var $8=$1;
   var $9=$8;
   $src=$9;
   var $10=$2;
   var $11=$10;
   $dst=$11;
   $func=0;
   var $12=HEAP32[((27944)>>2)];
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   __ZL21icvInitFlipHorzRTableP13CvBtFuncTable(23568);
   HEAP32[((27944)>>2)]=1;
   label = 3; break;
  case 3: 
   var $16=$src;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $19=$src;
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$21 & -65536;
   var $23=(($22)|(0))==1111621632;
   if ($23) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $25=$src;
   var $26=(($25+24)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0)) > 0;
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $31=$src;
   var $32=(($31+20)|0);
   var $33=$32;
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0)) > 0;
   if ($35) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $37=$src;
   var $38=(($37+16)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0))!=0;
   if ($41) { label = 13; break; } else { label = 8; break; }
  case 8: 
   HEAP32[(($coi)>>2)]=0;
   var $43=$src;
   var $44=$43;
   var $45=_cvGetMat($44, $sstub, $coi, 0);
   $src=$45;
   var $46=_cvGetErrStatus();
   var $47=(($46)|(0)) < 0;
   if ($47) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-1, ((5800)|0), ((11904)|0), ((15144)|0), 926);
   label = 49; break;
  case 10: 
   var $50=HEAP32[(($coi)>>2)];
   var $51=(($50)|(0))!=0;
   if ($51) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-24, ((5800)|0), ((8344)|0), ((15144)|0), 928);
   label = 49; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $55=$dst;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $58=$src;
   $dst=$58;
   label = 26; break;
  case 15: 
   var $60=$dst;
   var $61=(($60)|(0))!=0;
   if ($61) { label = 16; break; } else { label = 20; break; }
  case 16: 
   var $63=$dst;
   var $64=(($63)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$65 & -65536;
   var $67=(($66)|(0))==1111621632;
   if ($67) { label = 17; break; } else { label = 20; break; }
  case 17: 
   var $69=$dst;
   var $70=(($69+24)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0)) > 0;
   if ($73) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $75=$dst;
   var $76=(($75+20)|0);
   var $77=$76;
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78)|(0)) > 0;
   if ($79) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $81=$dst;
   var $82=(($81+16)|0);
   var $83=$82;
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0))!=0;
   if ($85) { label = 25; break; } else { label = 20; break; }
  case 20: 
   HEAP32[(($coi1)>>2)]=0;
   var $87=$dst;
   var $88=$87;
   var $89=_cvGetMat($88, $dstub, $coi1, 0);
   $dst=$89;
   var $90=_cvGetErrStatus();
   var $91=(($90)|(0)) < 0;
   if ($91) { label = 21; break; } else { label = 22; break; }
  case 21: 
   _cvError(-1, ((5800)|0), ((11904)|0), ((15144)|0), 936);
   label = 49; break;
  case 22: 
   var $94=HEAP32[(($coi1)>>2)];
   var $95=(($94)|(0))!=0;
   if ($95) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-24, ((5800)|0), ((8344)|0), ((15144)|0), 938);
   label = 49; break;
  case 24: 
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $100=$src;
   var $101=(($100)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=$dst;
   var $104=(($103)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=$102 ^ $105;
   var $107=$106 & 511;
   var $108=(($107)|(0))==0;
   if ($108) { label = 28; break; } else { label = 27; break; }
  case 27: 
   _cvError(-205, ((5800)|0), ((36896)|0), ((15144)|0), 942);
   label = 49; break;
  case 28: 
   var $111=$src;
   var $112=(($111+20)|0);
   var $113=$112;
   var $114=HEAP32[(($113)>>2)];
   var $115=$dst;
   var $116=(($115+20)|0);
   var $117=$116;
   var $118=HEAP32[(($117)>>2)];
   var $119=(($114)|(0))==(($118)|(0));
   if ($119) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $121=$src;
   var $122=(($121+24)|0);
   var $123=$122;
   var $124=HEAP32[(($123)>>2)];
   var $125=$dst;
   var $126=(($125+24)|0);
   var $127=$126;
   var $128=HEAP32[(($127)>>2)];
   var $129=(($124)|(0))==(($128)|(0));
   if ($129) { label = 31; break; } else { label = 30; break; }
  case 30: 
   _cvError(-209, ((5800)|0), ((36896)|0), ((15144)|0), 945);
   label = 49; break;
  case 31: 
   var $132=$src;
   __Z12cvGetMatSizePK5CvMat($4, $132);
   var $133=$size;
   var $134=$4;
   assert(8 % 1 === 0);HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($133)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];
   var $135=$src;
   var $136=(($135)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=$137 & 504;
   var $139=$138 >> 3;
   var $140=((($139)+(1))|0);
   var $141=$src;
   var $142=(($141)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=$143 & 7;
   var $145=($144<<1);
   var $146=47696 >>> (($145)>>>(0));
   var $147=$146 & 3;
   var $148=$140 << $147;
   $pix_size=$148;
   var $149=$3;
   var $150=(($149)|(0))==0;
   if ($150) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $152=$pix_size;
   var $153=(($size)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(Math.imul($154,$152)|0);
   HEAP32[(($153)>>2)]=$155;
   var $156=$src;
   var $157=(($156+16)|0);
   var $158=$157;
   var $159=HEAP32[(($158)>>2)];
   var $160=$src;
   var $161=(($160+4)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=$dst;
   var $164=(($163+16)|0);
   var $165=$164;
   var $166=HEAP32[(($165)>>2)];
   var $167=$dst;
   var $168=(($167+4)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=$5;
   var $171=$size;
   assert(8 % 1 === 0);HEAP32[(($170)>>2)]=HEAP32[(($171)>>2)];HEAP32[((($170)+(4))>>2)]=HEAP32[((($171)+(4))>>2)];
   var $172=__ZL18icvFlipVert_8u_C1RPKhiPhi6CvSize($159, $162, $166, $169, $5);
   $ippi_call_result=$172;
   var $173=$ippi_call_result;
   var $174=(($173)|(0)) < 0;
   if ($174) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $176=$ippi_call_result;
   var $177=_cvErrorFromIppStatus($176);
   _cvError($177, ((5800)|0), ((10400)|0), ((15144)|0), 955);
   label = 49; break;
  case 34: 
   label = 48; break;
  case 35: 
   var $180=$src;
   var $181=(($180+16)|0);
   var $182=$181;
   var $183=HEAP32[(($182)>>2)];
   var $184=$dst;
   var $185=(($184+16)|0);
   var $186=$185;
   var $187=HEAP32[(($186)>>2)];
   var $188=(($183)|(0))==(($187)|(0));
   var $189=(($188)&(1));
   $inplace=$189;
   var $190=$dst;
   var $191=(($190+16)|0);
   var $192=$191;
   var $193=HEAP32[(($192)>>2)];
   $dst_data=$193;
   var $194=$dst;
   var $195=(($194+4)|0);
   var $196=HEAP32[(($195)>>2)];
   $dst_step=$196;
   var $197=$pix_size;
   var $198=((((23568)|0)+($197<<2))|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=$199;
   $func=$200;
   var $201=$func;
   var $202=(($201)|(0))!=0;
   if ($202) { label = 37; break; } else { label = 36; break; }
  case 36: 
   _cvError(-210, ((5800)|0), ((36896)|0), ((15144)|0), 966);
   label = 49; break;
  case 37: 
   var $205=$3;
   var $206=(($205)|(0)) < 0;
   if ($206) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $208=$inplace;
   var $209=(($208)|(0))!=0;
   if ($209) { label = 40; break; } else { label = 39; break; }
  case 39: 
   var $211=$dst_step;
   var $212=$dst;
   var $213=(($212+20)|0);
   var $214=$213;
   var $215=HEAP32[(($214)>>2)];
   var $216=((($215)-(1))|0);
   var $217=(Math.imul($211,$216)|0);
   var $218=$dst_data;
   var $219=(($218+$217)|0);
   $dst_data=$219;
   var $220=$dst_step;
   var $221=(((-$220))|0);
   $dst_step=$221;
   label = 40; break;
  case 40: 
   var $223=$func;
   var $224=$src;
   var $225=(($224+16)|0);
   var $226=$225;
   var $227=HEAP32[(($226)>>2)];
   var $228=$src;
   var $229=(($228+4)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=$dst_data;
   var $232=$dst_step;
   var $233=$6;
   var $234=$size;
   assert(8 % 1 === 0);HEAP32[(($233)>>2)]=HEAP32[(($234)>>2)];HEAP32[((($233)+(4))>>2)]=HEAP32[((($234)+(4))>>2)];
   var $235=FUNCTION_TABLE[$223]($227, $230, $231, $232, $6);
   $ippi_call_result2=$235;
   var $236=$ippi_call_result2;
   var $237=(($236)|(0)) < 0;
   if ($237) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $239=$ippi_call_result2;
   var $240=_cvErrorFromIppStatus($239);
   _cvError($240, ((5800)|0), ((10400)|0), ((15144)|0), 974);
   label = 49; break;
  case 42: 
   var $242=$3;
   var $243=(($242)|(0)) < 0;
   if ($243) { label = 43; break; } else { label = 47; break; }
  case 43: 
   var $245=$inplace;
   var $246=(($245)|(0))!=0;
   if ($246) { label = 44; break; } else { label = 47; break; }
  case 44: 
   var $248=$pix_size;
   var $249=(($size)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251=(Math.imul($250,$248)|0);
   HEAP32[(($249)>>2)]=$251;
   var $252=$dst;
   var $253=(($252+16)|0);
   var $254=$253;
   var $255=HEAP32[(($254)>>2)];
   var $256=$dst;
   var $257=(($256+4)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=$dst;
   var $260=(($259+16)|0);
   var $261=$260;
   var $262=HEAP32[(($261)>>2)];
   var $263=$dst;
   var $264=(($263+4)|0);
   var $265=HEAP32[(($264)>>2)];
   var $266=$7;
   var $267=$size;
   assert(8 % 1 === 0);HEAP32[(($266)>>2)]=HEAP32[(($267)>>2)];HEAP32[((($266)+(4))>>2)]=HEAP32[((($267)+(4))>>2)];
   var $268=__ZL18icvFlipVert_8u_C1RPKhiPhi6CvSize($255, $258, $262, $265, $7);
   $ippi_call_result3=$268;
   var $269=$ippi_call_result3;
   var $270=(($269)|(0)) < 0;
   if ($270) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $272=$ippi_call_result3;
   var $273=_cvErrorFromIppStatus($272);
   _cvError($273, ((5800)|0), ((10400)|0), ((15144)|0), 980);
   label = 49; break;
  case 46: 
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvFlipHorz_8u_C3RPKhiPhi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=(((($7)>>>(0)))&-1);
   $2=$8;
   var $9=$4;
   var $10=(((($9)>>>(0)))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=((($24)*(3))&-1);
   var $26=$1;
   var $27=(($26+$25)|0);
   var $28=HEAP8[($27)];
   $t0=$28;
   var $29=$len;
   var $30=$i;
   var $31=((($29)-($30))|0);
   var $32=((($31)*(3))&-1);
   var $33=((($32)-(3))|0);
   var $34=$1;
   var $35=(($34+$33)|0);
   var $36=HEAP8[($35)];
   $t1=$36;
   var $37=$t1;
   var $38=$i;
   var $39=((($38)*(3))&-1);
   var $40=$3;
   var $41=(($40+$39)|0);
   HEAP8[($41)]=$37;
   var $42=$t0;
   var $43=$len;
   var $44=$i;
   var $45=((($43)-($44))|0);
   var $46=((($45)*(3))&-1);
   var $47=((($46)-(3))|0);
   var $48=$3;
   var $49=(($48+$47)|0);
   HEAP8[($49)]=$42;
   var $50=$i;
   var $51=((($50)*(3))&-1);
   var $52=((($51)+(1))|0);
   var $53=$1;
   var $54=(($53+$52)|0);
   var $55=HEAP8[($54)];
   $t0=$55;
   var $56=$len;
   var $57=$i;
   var $58=((($56)-($57))|0);
   var $59=((($58)*(3))&-1);
   var $60=((($59)-(2))|0);
   var $61=$1;
   var $62=(($61+$60)|0);
   var $63=HEAP8[($62)];
   $t1=$63;
   var $64=$t1;
   var $65=$i;
   var $66=((($65)*(3))&-1);
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+$67)|0);
   HEAP8[($69)]=$64;
   var $70=$t0;
   var $71=$len;
   var $72=$i;
   var $73=((($71)-($72))|0);
   var $74=((($73)*(3))&-1);
   var $75=((($74)-(2))|0);
   var $76=$3;
   var $77=(($76+$75)|0);
   HEAP8[($77)]=$70;
   var $78=$i;
   var $79=((($78)*(3))&-1);
   var $80=((($79)+(2))|0);
   var $81=$1;
   var $82=(($81+$80)|0);
   var $83=HEAP8[($82)];
   $t0=$83;
   var $84=$len;
   var $85=$i;
   var $86=((($84)-($85))|0);
   var $87=((($86)*(3))&-1);
   var $88=((($87)-(1))|0);
   var $89=$1;
   var $90=(($89+$88)|0);
   var $91=HEAP8[($90)];
   $t1=$91;
   var $92=$t1;
   var $93=$i;
   var $94=((($93)*(3))&-1);
   var $95=((($94)+(2))|0);
   var $96=$3;
   var $97=(($96+$95)|0);
   HEAP8[($97)]=$92;
   var $98=$t0;
   var $99=$len;
   var $100=$i;
   var $101=((($99)-($100))|0);
   var $102=((($101)*(3))&-1);
   var $103=((($102)-(1))|0);
   var $104=$3;
   var $105=(($104+$103)|0);
   HEAP8[($105)]=$98;
   label = 6; break;
  case 6: 
   var $107=$i;
   var $108=((($107)+(1))|0);
   $i=$108;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $111=$2;
   var $112=$1;
   var $113=(($112+$111)|0);
   $1=$113;
   var $114=$4;
   var $115=$3;
   var $116=(($115+$114)|0);
   $3=$116;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvFlipHorz_16u_C2RPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=$1;
   var $26=(($25+($24<<2))|0);
   var $27=HEAP32[(($26)>>2)];
   $t0=$27;
   var $28=$len;
   var $29=$i;
   var $30=((($28)-($29))|0);
   var $31=((($30)-(1))|0);
   var $32=$1;
   var $33=(($32+($31<<2))|0);
   var $34=HEAP32[(($33)>>2)];
   $t1=$34;
   var $35=$t1;
   var $36=$i;
   var $37=$3;
   var $38=(($37+($36<<2))|0);
   HEAP32[(($38)>>2)]=$35;
   var $39=$t0;
   var $40=$len;
   var $41=$i;
   var $42=((($40)-($41))|0);
   var $43=((($42)-(1))|0);
   var $44=$3;
   var $45=(($44+($43<<2))|0);
   HEAP32[(($45)>>2)]=$39;
   label = 6; break;
  case 6: 
   var $47=$i;
   var $48=((($47)+(1))|0);
   $i=$48;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $51=$2;
   var $52=$1;
   var $53=(($52+($51<<2))|0);
   $1=$53;
   var $54=$4;
   var $55=$3;
   var $56=(($55+($54<<2))|0);
   $3=$56;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvFlipHorz_16u_C3RPKtiPti6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(2))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=((($24)*(3))&-1);
   var $26=$1;
   var $27=(($26+($25<<1))|0);
   var $28=HEAP16[(($27)>>1)];
   $t0=$28;
   var $29=$len;
   var $30=$i;
   var $31=((($29)-($30))|0);
   var $32=((($31)*(3))&-1);
   var $33=((($32)-(3))|0);
   var $34=$1;
   var $35=(($34+($33<<1))|0);
   var $36=HEAP16[(($35)>>1)];
   $t1=$36;
   var $37=$t1;
   var $38=$i;
   var $39=((($38)*(3))&-1);
   var $40=$3;
   var $41=(($40+($39<<1))|0);
   HEAP16[(($41)>>1)]=$37;
   var $42=$t0;
   var $43=$len;
   var $44=$i;
   var $45=((($43)-($44))|0);
   var $46=((($45)*(3))&-1);
   var $47=((($46)-(3))|0);
   var $48=$3;
   var $49=(($48+($47<<1))|0);
   HEAP16[(($49)>>1)]=$42;
   var $50=$i;
   var $51=((($50)*(3))&-1);
   var $52=((($51)+(1))|0);
   var $53=$1;
   var $54=(($53+($52<<1))|0);
   var $55=HEAP16[(($54)>>1)];
   $t0=$55;
   var $56=$len;
   var $57=$i;
   var $58=((($56)-($57))|0);
   var $59=((($58)*(3))&-1);
   var $60=((($59)-(2))|0);
   var $61=$1;
   var $62=(($61+($60<<1))|0);
   var $63=HEAP16[(($62)>>1)];
   $t1=$63;
   var $64=$t1;
   var $65=$i;
   var $66=((($65)*(3))&-1);
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+($67<<1))|0);
   HEAP16[(($69)>>1)]=$64;
   var $70=$t0;
   var $71=$len;
   var $72=$i;
   var $73=((($71)-($72))|0);
   var $74=((($73)*(3))&-1);
   var $75=((($74)-(2))|0);
   var $76=$3;
   var $77=(($76+($75<<1))|0);
   HEAP16[(($77)>>1)]=$70;
   var $78=$i;
   var $79=((($78)*(3))&-1);
   var $80=((($79)+(2))|0);
   var $81=$1;
   var $82=(($81+($80<<1))|0);
   var $83=HEAP16[(($82)>>1)];
   $t0=$83;
   var $84=$len;
   var $85=$i;
   var $86=((($84)-($85))|0);
   var $87=((($86)*(3))&-1);
   var $88=((($87)-(1))|0);
   var $89=$1;
   var $90=(($89+($88<<1))|0);
   var $91=HEAP16[(($90)>>1)];
   $t1=$91;
   var $92=$t1;
   var $93=$i;
   var $94=((($93)*(3))&-1);
   var $95=((($94)+(2))|0);
   var $96=$3;
   var $97=(($96+($95<<1))|0);
   HEAP16[(($97)>>1)]=$92;
   var $98=$t0;
   var $99=$len;
   var $100=$i;
   var $101=((($99)-($100))|0);
   var $102=((($101)*(3))&-1);
   var $103=((($102)-(1))|0);
   var $104=$3;
   var $105=(($104+($103<<1))|0);
   HEAP16[(($105)>>1)]=$98;
   label = 6; break;
  case 6: 
   var $107=$i;
   var $108=((($107)+(1))|0);
   $i=$108;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $111=$2;
   var $112=$1;
   var $113=(($112+($111<<1))|0);
   $1=$113;
   var $114=$4;
   var $115=$3;
   var $116=(($115+($114<<1))|0);
   $3=$116;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvFlipHorz_32s_C2RPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(8))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(8))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=$1;
   var $26=(($25+($24<<3))|0);
   var $ld$0$0=(($26)|0);
   var $27$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($26+4)|0);
   var $27$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$27$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$27$1;
   var $28=$len;
   var $29=$i;
   var $30=((($28)-($29))|0);
   var $31=((($30)-(1))|0);
   var $32=$1;
   var $33=(($32+($31<<3))|0);
   var $ld$4$0=(($33)|0);
   var $34$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($33+4)|0);
   var $34$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$34$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$34$1;
   var $ld$8$0=(($t1)|0);
   var $35$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t1+4)|0);
   var $35$1=HEAP32[(($ld$9$1)>>2)];
   var $36=$i;
   var $37=$3;
   var $38=(($37+($36<<3))|0);
   var $st$10$0=(($38)|0);
   HEAP32[(($st$10$0)>>2)]=$35$0;
   var $st$11$1=(($38+4)|0);
   HEAP32[(($st$11$1)>>2)]=$35$1;
   var $ld$12$0=(($t0)|0);
   var $39$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t0+4)|0);
   var $39$1=HEAP32[(($ld$13$1)>>2)];
   var $40=$len;
   var $41=$i;
   var $42=((($40)-($41))|0);
   var $43=((($42)-(1))|0);
   var $44=$3;
   var $45=(($44+($43<<3))|0);
   var $st$14$0=(($45)|0);
   HEAP32[(($st$14$0)>>2)]=$39$0;
   var $st$15$1=(($45+4)|0);
   HEAP32[(($st$15$1)>>2)]=$39$1;
   label = 6; break;
  case 6: 
   var $47=$i;
   var $48=((($47)+(1))|0);
   $i=$48;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $51=$2;
   var $52=$1;
   var $53=(($52+($51<<3))|0);
   $1=$53;
   var $54=$4;
   var $55=$3;
   var $56=(($55+($54<<3))|0);
   $3=$56;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvFlipHorz_32s_C3RPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=((($24)*(3))&-1);
   var $26=$1;
   var $27=(($26+($25<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   $t0=$28;
   var $29=$len;
   var $30=$i;
   var $31=((($29)-($30))|0);
   var $32=((($31)*(3))&-1);
   var $33=((($32)-(3))|0);
   var $34=$1;
   var $35=(($34+($33<<2))|0);
   var $36=HEAP32[(($35)>>2)];
   $t1=$36;
   var $37=$t1;
   var $38=$i;
   var $39=((($38)*(3))&-1);
   var $40=$3;
   var $41=(($40+($39<<2))|0);
   HEAP32[(($41)>>2)]=$37;
   var $42=$t0;
   var $43=$len;
   var $44=$i;
   var $45=((($43)-($44))|0);
   var $46=((($45)*(3))&-1);
   var $47=((($46)-(3))|0);
   var $48=$3;
   var $49=(($48+($47<<2))|0);
   HEAP32[(($49)>>2)]=$42;
   var $50=$i;
   var $51=((($50)*(3))&-1);
   var $52=((($51)+(1))|0);
   var $53=$1;
   var $54=(($53+($52<<2))|0);
   var $55=HEAP32[(($54)>>2)];
   $t0=$55;
   var $56=$len;
   var $57=$i;
   var $58=((($56)-($57))|0);
   var $59=((($58)*(3))&-1);
   var $60=((($59)-(2))|0);
   var $61=$1;
   var $62=(($61+($60<<2))|0);
   var $63=HEAP32[(($62)>>2)];
   $t1=$63;
   var $64=$t1;
   var $65=$i;
   var $66=((($65)*(3))&-1);
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+($67<<2))|0);
   HEAP32[(($69)>>2)]=$64;
   var $70=$t0;
   var $71=$len;
   var $72=$i;
   var $73=((($71)-($72))|0);
   var $74=((($73)*(3))&-1);
   var $75=((($74)-(2))|0);
   var $76=$3;
   var $77=(($76+($75<<2))|0);
   HEAP32[(($77)>>2)]=$70;
   var $78=$i;
   var $79=((($78)*(3))&-1);
   var $80=((($79)+(2))|0);
   var $81=$1;
   var $82=(($81+($80<<2))|0);
   var $83=HEAP32[(($82)>>2)];
   $t0=$83;
   var $84=$len;
   var $85=$i;
   var $86=((($84)-($85))|0);
   var $87=((($86)*(3))&-1);
   var $88=((($87)-(1))|0);
   var $89=$1;
   var $90=(($89+($88<<2))|0);
   var $91=HEAP32[(($90)>>2)];
   $t1=$91;
   var $92=$t1;
   var $93=$i;
   var $94=((($93)*(3))&-1);
   var $95=((($94)+(2))|0);
   var $96=$3;
   var $97=(($96+($95<<2))|0);
   HEAP32[(($97)>>2)]=$92;
   var $98=$t0;
   var $99=$len;
   var $100=$i;
   var $101=((($99)-($100))|0);
   var $102=((($101)*(3))&-1);
   var $103=((($102)-(1))|0);
   var $104=$3;
   var $105=(($104+($103<<2))|0);
   HEAP32[(($105)>>2)]=$98;
   label = 6; break;
  case 6: 
   var $107=$i;
   var $108=((($107)+(1))|0);
   $i=$108;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $111=$2;
   var $112=$1;
   var $113=(($112+($111<<2))|0);
   $1=$113;
   var $114=$4;
   var $115=$3;
   var $116=(($115+($114<<2))|0);
   $3=$116;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvFlipHorz_64s_C2RPKiiPii6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0;
   var $t1;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(4))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=($24<<2);
   var $26=$1;
   var $27=(($26+($25<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   $t0=$28;
   var $29=$len;
   var $30=$i;
   var $31=((($29)-($30))|0);
   var $32=($31<<2);
   var $33=((($32)-(4))|0);
   var $34=$1;
   var $35=(($34+($33<<2))|0);
   var $36=HEAP32[(($35)>>2)];
   $t1=$36;
   var $37=$t1;
   var $38=$i;
   var $39=($38<<2);
   var $40=$3;
   var $41=(($40+($39<<2))|0);
   HEAP32[(($41)>>2)]=$37;
   var $42=$t0;
   var $43=$len;
   var $44=$i;
   var $45=((($43)-($44))|0);
   var $46=($45<<2);
   var $47=((($46)-(4))|0);
   var $48=$3;
   var $49=(($48+($47<<2))|0);
   HEAP32[(($49)>>2)]=$42;
   var $50=$i;
   var $51=($50<<2);
   var $52=((($51)+(1))|0);
   var $53=$1;
   var $54=(($53+($52<<2))|0);
   var $55=HEAP32[(($54)>>2)];
   $t0=$55;
   var $56=$len;
   var $57=$i;
   var $58=((($56)-($57))|0);
   var $59=($58<<2);
   var $60=((($59)-(3))|0);
   var $61=$1;
   var $62=(($61+($60<<2))|0);
   var $63=HEAP32[(($62)>>2)];
   $t1=$63;
   var $64=$t1;
   var $65=$i;
   var $66=($65<<2);
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+($67<<2))|0);
   HEAP32[(($69)>>2)]=$64;
   var $70=$t0;
   var $71=$len;
   var $72=$i;
   var $73=((($71)-($72))|0);
   var $74=($73<<2);
   var $75=((($74)-(3))|0);
   var $76=$3;
   var $77=(($76+($75<<2))|0);
   HEAP32[(($77)>>2)]=$70;
   var $78=$i;
   var $79=($78<<2);
   var $80=((($79)+(2))|0);
   var $81=$1;
   var $82=(($81+($80<<2))|0);
   var $83=HEAP32[(($82)>>2)];
   $t0=$83;
   var $84=$len;
   var $85=$i;
   var $86=((($84)-($85))|0);
   var $87=($86<<2);
   var $88=((($87)-(2))|0);
   var $89=$1;
   var $90=(($89+($88<<2))|0);
   var $91=HEAP32[(($90)>>2)];
   $t1=$91;
   var $92=$t1;
   var $93=$i;
   var $94=($93<<2);
   var $95=((($94)+(2))|0);
   var $96=$3;
   var $97=(($96+($95<<2))|0);
   HEAP32[(($97)>>2)]=$92;
   var $98=$t0;
   var $99=$len;
   var $100=$i;
   var $101=((($99)-($100))|0);
   var $102=($101<<2);
   var $103=((($102)-(2))|0);
   var $104=$3;
   var $105=(($104+($103<<2))|0);
   HEAP32[(($105)>>2)]=$98;
   var $106=$i;
   var $107=($106<<2);
   var $108=((($107)+(3))|0);
   var $109=$1;
   var $110=(($109+($108<<2))|0);
   var $111=HEAP32[(($110)>>2)];
   $t0=$111;
   var $112=$len;
   var $113=$i;
   var $114=((($112)-($113))|0);
   var $115=($114<<2);
   var $116=((($115)-(1))|0);
   var $117=$1;
   var $118=(($117+($116<<2))|0);
   var $119=HEAP32[(($118)>>2)];
   $t1=$119;
   var $120=$t1;
   var $121=$i;
   var $122=($121<<2);
   var $123=((($122)+(3))|0);
   var $124=$3;
   var $125=(($124+($123<<2))|0);
   HEAP32[(($125)>>2)]=$120;
   var $126=$t0;
   var $127=$len;
   var $128=$i;
   var $129=((($127)-($128))|0);
   var $130=($129<<2);
   var $131=((($130)-(1))|0);
   var $132=$3;
   var $133=(($132+($131<<2))|0);
   HEAP32[(($133)>>2)]=$126;
   label = 6; break;
  case 6: 
   var $135=$i;
   var $136=((($135)+(1))|0);
   $i=$136;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $139=$2;
   var $140=$1;
   var $141=(($140+($139<<2))|0);
   $1=$141;
   var $142=$4;
   var $143=$3;
   var $144=(($143+($142<<2))|0);
   $3=$144;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z11cvAlignLeftii($size, $align) {
 var label = 0;
 var $1;
 var $2;
 $1=$size;
 $2=$align;
 var $3=$1;
 var $4=$2;
 var $5=(((-$4))|0);
 var $6=$3 & $5;
 return $6;
}
function __ZL19icvFlipHorz_64s_C3RPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(8))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(8))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=((($24)*(3))&-1);
   var $26=$1;
   var $27=(($26+($25<<3))|0);
   var $ld$0$0=(($27)|0);
   var $28$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($27+4)|0);
   var $28$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$28$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$28$1;
   var $29=$len;
   var $30=$i;
   var $31=((($29)-($30))|0);
   var $32=((($31)*(3))&-1);
   var $33=((($32)-(3))|0);
   var $34=$1;
   var $35=(($34+($33<<3))|0);
   var $ld$4$0=(($35)|0);
   var $36$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($35+4)|0);
   var $36$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$36$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$36$1;
   var $ld$8$0=(($t1)|0);
   var $37$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t1+4)|0);
   var $37$1=HEAP32[(($ld$9$1)>>2)];
   var $38=$i;
   var $39=((($38)*(3))&-1);
   var $40=$3;
   var $41=(($40+($39<<3))|0);
   var $st$10$0=(($41)|0);
   HEAP32[(($st$10$0)>>2)]=$37$0;
   var $st$11$1=(($41+4)|0);
   HEAP32[(($st$11$1)>>2)]=$37$1;
   var $ld$12$0=(($t0)|0);
   var $42$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t0+4)|0);
   var $42$1=HEAP32[(($ld$13$1)>>2)];
   var $43=$len;
   var $44=$i;
   var $45=((($43)-($44))|0);
   var $46=((($45)*(3))&-1);
   var $47=((($46)-(3))|0);
   var $48=$3;
   var $49=(($48+($47<<3))|0);
   var $st$14$0=(($49)|0);
   HEAP32[(($st$14$0)>>2)]=$42$0;
   var $st$15$1=(($49+4)|0);
   HEAP32[(($st$15$1)>>2)]=$42$1;
   var $50=$i;
   var $51=((($50)*(3))&-1);
   var $52=((($51)+(1))|0);
   var $53=$1;
   var $54=(($53+($52<<3))|0);
   var $ld$16$0=(($54)|0);
   var $55$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($54+4)|0);
   var $55$1=HEAP32[(($ld$17$1)>>2)];
   var $st$18$0=(($t0)|0);
   HEAP32[(($st$18$0)>>2)]=$55$0;
   var $st$19$1=(($t0+4)|0);
   HEAP32[(($st$19$1)>>2)]=$55$1;
   var $56=$len;
   var $57=$i;
   var $58=((($56)-($57))|0);
   var $59=((($58)*(3))&-1);
   var $60=((($59)-(2))|0);
   var $61=$1;
   var $62=(($61+($60<<3))|0);
   var $ld$20$0=(($62)|0);
   var $63$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($62+4)|0);
   var $63$1=HEAP32[(($ld$21$1)>>2)];
   var $st$22$0=(($t1)|0);
   HEAP32[(($st$22$0)>>2)]=$63$0;
   var $st$23$1=(($t1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$63$1;
   var $ld$24$0=(($t1)|0);
   var $64$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($t1+4)|0);
   var $64$1=HEAP32[(($ld$25$1)>>2)];
   var $65=$i;
   var $66=((($65)*(3))&-1);
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+($67<<3))|0);
   var $st$26$0=(($69)|0);
   HEAP32[(($st$26$0)>>2)]=$64$0;
   var $st$27$1=(($69+4)|0);
   HEAP32[(($st$27$1)>>2)]=$64$1;
   var $ld$28$0=(($t0)|0);
   var $70$0=HEAP32[(($ld$28$0)>>2)];
   var $ld$29$1=(($t0+4)|0);
   var $70$1=HEAP32[(($ld$29$1)>>2)];
   var $71=$len;
   var $72=$i;
   var $73=((($71)-($72))|0);
   var $74=((($73)*(3))&-1);
   var $75=((($74)-(2))|0);
   var $76=$3;
   var $77=(($76+($75<<3))|0);
   var $st$30$0=(($77)|0);
   HEAP32[(($st$30$0)>>2)]=$70$0;
   var $st$31$1=(($77+4)|0);
   HEAP32[(($st$31$1)>>2)]=$70$1;
   var $78=$i;
   var $79=((($78)*(3))&-1);
   var $80=((($79)+(2))|0);
   var $81=$1;
   var $82=(($81+($80<<3))|0);
   var $ld$32$0=(($82)|0);
   var $83$0=HEAP32[(($ld$32$0)>>2)];
   var $ld$33$1=(($82+4)|0);
   var $83$1=HEAP32[(($ld$33$1)>>2)];
   var $st$34$0=(($t0)|0);
   HEAP32[(($st$34$0)>>2)]=$83$0;
   var $st$35$1=(($t0+4)|0);
   HEAP32[(($st$35$1)>>2)]=$83$1;
   var $84=$len;
   var $85=$i;
   var $86=((($84)-($85))|0);
   var $87=((($86)*(3))&-1);
   var $88=((($87)-(1))|0);
   var $89=$1;
   var $90=(($89+($88<<3))|0);
   var $ld$36$0=(($90)|0);
   var $91$0=HEAP32[(($ld$36$0)>>2)];
   var $ld$37$1=(($90+4)|0);
   var $91$1=HEAP32[(($ld$37$1)>>2)];
   var $st$38$0=(($t1)|0);
   HEAP32[(($st$38$0)>>2)]=$91$0;
   var $st$39$1=(($t1+4)|0);
   HEAP32[(($st$39$1)>>2)]=$91$1;
   var $ld$40$0=(($t1)|0);
   var $92$0=HEAP32[(($ld$40$0)>>2)];
   var $ld$41$1=(($t1+4)|0);
   var $92$1=HEAP32[(($ld$41$1)>>2)];
   var $93=$i;
   var $94=((($93)*(3))&-1);
   var $95=((($94)+(2))|0);
   var $96=$3;
   var $97=(($96+($95<<3))|0);
   var $st$42$0=(($97)|0);
   HEAP32[(($st$42$0)>>2)]=$92$0;
   var $st$43$1=(($97+4)|0);
   HEAP32[(($st$43$1)>>2)]=$92$1;
   var $ld$44$0=(($t0)|0);
   var $98$0=HEAP32[(($ld$44$0)>>2)];
   var $ld$45$1=(($t0+4)|0);
   var $98$1=HEAP32[(($ld$45$1)>>2)];
   var $99=$len;
   var $100=$i;
   var $101=((($99)-($100))|0);
   var $102=((($101)*(3))&-1);
   var $103=((($102)-(1))|0);
   var $104=$3;
   var $105=(($104+($103<<3))|0);
   var $st$46$0=(($105)|0);
   HEAP32[(($st$46$0)>>2)]=$98$0;
   var $st$47$1=(($105+4)|0);
   HEAP32[(($st$47$1)>>2)]=$98$1;
   label = 6; break;
  case 6: 
   var $107=$i;
   var $108=((($107)+(1))|0);
   $i=$108;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $111=$2;
   var $112=$1;
   var $113=(($112+($111<<3))|0);
   $1=$113;
   var $114=$4;
   var $115=$3;
   var $116=(($115+($114<<3))|0);
   $3=$116;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL19icvFlipHorz_64s_C4RPKxiPxi6CvSize($src, $srcstep, $dst, $dststep, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $len;
   var $t0=sp;
   var $t1=(sp)+(8);
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   var $5=(($size)|0);
   var $6=HEAP32[(($5)>>2)];
   $len=$6;
   var $7=$2;
   var $8=((((($7)>>>(0)))/(8))&-1);
   $2=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(8))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 9; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=$len;
   var $20=((($19)+(1))|0);
   var $21=((((($20)|(0)))/(2))&-1);
   var $22=(($18)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=($24<<2);
   var $26=$1;
   var $27=(($26+($25<<3))|0);
   var $ld$0$0=(($27)|0);
   var $28$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($27+4)|0);
   var $28$1=HEAP32[(($ld$1$1)>>2)];
   var $st$2$0=(($t0)|0);
   HEAP32[(($st$2$0)>>2)]=$28$0;
   var $st$3$1=(($t0+4)|0);
   HEAP32[(($st$3$1)>>2)]=$28$1;
   var $29=$len;
   var $30=$i;
   var $31=((($29)-($30))|0);
   var $32=($31<<2);
   var $33=((($32)-(4))|0);
   var $34=$1;
   var $35=(($34+($33<<3))|0);
   var $ld$4$0=(($35)|0);
   var $36$0=HEAP32[(($ld$4$0)>>2)];
   var $ld$5$1=(($35+4)|0);
   var $36$1=HEAP32[(($ld$5$1)>>2)];
   var $st$6$0=(($t1)|0);
   HEAP32[(($st$6$0)>>2)]=$36$0;
   var $st$7$1=(($t1+4)|0);
   HEAP32[(($st$7$1)>>2)]=$36$1;
   var $ld$8$0=(($t1)|0);
   var $37$0=HEAP32[(($ld$8$0)>>2)];
   var $ld$9$1=(($t1+4)|0);
   var $37$1=HEAP32[(($ld$9$1)>>2)];
   var $38=$i;
   var $39=($38<<2);
   var $40=$3;
   var $41=(($40+($39<<3))|0);
   var $st$10$0=(($41)|0);
   HEAP32[(($st$10$0)>>2)]=$37$0;
   var $st$11$1=(($41+4)|0);
   HEAP32[(($st$11$1)>>2)]=$37$1;
   var $ld$12$0=(($t0)|0);
   var $42$0=HEAP32[(($ld$12$0)>>2)];
   var $ld$13$1=(($t0+4)|0);
   var $42$1=HEAP32[(($ld$13$1)>>2)];
   var $43=$len;
   var $44=$i;
   var $45=((($43)-($44))|0);
   var $46=($45<<2);
   var $47=((($46)-(4))|0);
   var $48=$3;
   var $49=(($48+($47<<3))|0);
   var $st$14$0=(($49)|0);
   HEAP32[(($st$14$0)>>2)]=$42$0;
   var $st$15$1=(($49+4)|0);
   HEAP32[(($st$15$1)>>2)]=$42$1;
   var $50=$i;
   var $51=($50<<2);
   var $52=((($51)+(1))|0);
   var $53=$1;
   var $54=(($53+($52<<3))|0);
   var $ld$16$0=(($54)|0);
   var $55$0=HEAP32[(($ld$16$0)>>2)];
   var $ld$17$1=(($54+4)|0);
   var $55$1=HEAP32[(($ld$17$1)>>2)];
   var $st$18$0=(($t0)|0);
   HEAP32[(($st$18$0)>>2)]=$55$0;
   var $st$19$1=(($t0+4)|0);
   HEAP32[(($st$19$1)>>2)]=$55$1;
   var $56=$len;
   var $57=$i;
   var $58=((($56)-($57))|0);
   var $59=($58<<2);
   var $60=((($59)-(3))|0);
   var $61=$1;
   var $62=(($61+($60<<3))|0);
   var $ld$20$0=(($62)|0);
   var $63$0=HEAP32[(($ld$20$0)>>2)];
   var $ld$21$1=(($62+4)|0);
   var $63$1=HEAP32[(($ld$21$1)>>2)];
   var $st$22$0=(($t1)|0);
   HEAP32[(($st$22$0)>>2)]=$63$0;
   var $st$23$1=(($t1+4)|0);
   HEAP32[(($st$23$1)>>2)]=$63$1;
   var $ld$24$0=(($t1)|0);
   var $64$0=HEAP32[(($ld$24$0)>>2)];
   var $ld$25$1=(($t1+4)|0);
   var $64$1=HEAP32[(($ld$25$1)>>2)];
   var $65=$i;
   var $66=($65<<2);
   var $67=((($66)+(1))|0);
   var $68=$3;
   var $69=(($68+($67<<3))|0);
   var $st$26$0=(($69)|0);
   HEAP32[(($st$26$0)>>2)]=$64$0;
   var $st$27$1=(($69+4)|0);
   HEAP32[(($st$27$1)>>2)]=$64$1;
   var $ld$28$0=(($t0)|0);
   var $70$0=HEAP32[(($ld$28$0)>>2)];
   var $ld$29$1=(($t0+4)|0);
   var $70$1=HEAP32[(($ld$29$1)>>2)];
   var $71=$len;
   var $72=$i;
   var $73=((($71)-($72))|0);
   var $74=($73<<2);
   var $75=((($74)-(3))|0);
   var $76=$3;
   var $77=(($76+($75<<3))|0);
   var $st$30$0=(($77)|0);
   HEAP32[(($st$30$0)>>2)]=$70$0;
   var $st$31$1=(($77+4)|0);
   HEAP32[(($st$31$1)>>2)]=$70$1;
   var $78=$i;
   var $79=($78<<2);
   var $80=((($79)+(2))|0);
   var $81=$1;
   var $82=(($81+($80<<3))|0);
   var $ld$32$0=(($82)|0);
   var $83$0=HEAP32[(($ld$32$0)>>2)];
   var $ld$33$1=(($82+4)|0);
   var $83$1=HEAP32[(($ld$33$1)>>2)];
   var $st$34$0=(($t0)|0);
   HEAP32[(($st$34$0)>>2)]=$83$0;
   var $st$35$1=(($t0+4)|0);
   HEAP32[(($st$35$1)>>2)]=$83$1;
   var $84=$len;
   var $85=$i;
   var $86=((($84)-($85))|0);
   var $87=($86<<2);
   var $88=((($87)-(2))|0);
   var $89=$1;
   var $90=(($89+($88<<3))|0);
   var $ld$36$0=(($90)|0);
   var $91$0=HEAP32[(($ld$36$0)>>2)];
   var $ld$37$1=(($90+4)|0);
   var $91$1=HEAP32[(($ld$37$1)>>2)];
   var $st$38$0=(($t1)|0);
   HEAP32[(($st$38$0)>>2)]=$91$0;
   var $st$39$1=(($t1+4)|0);
   HEAP32[(($st$39$1)>>2)]=$91$1;
   var $ld$40$0=(($t1)|0);
   var $92$0=HEAP32[(($ld$40$0)>>2)];
   var $ld$41$1=(($t1+4)|0);
   var $92$1=HEAP32[(($ld$41$1)>>2)];
   var $93=$i;
   var $94=($93<<2);
   var $95=((($94)+(2))|0);
   var $96=$3;
   var $97=(($96+($95<<3))|0);
   var $st$42$0=(($97)|0);
   HEAP32[(($st$42$0)>>2)]=$92$0;
   var $st$43$1=(($97+4)|0);
   HEAP32[(($st$43$1)>>2)]=$92$1;
   var $ld$44$0=(($t0)|0);
   var $98$0=HEAP32[(($ld$44$0)>>2)];
   var $ld$45$1=(($t0+4)|0);
   var $98$1=HEAP32[(($ld$45$1)>>2)];
   var $99=$len;
   var $100=$i;
   var $101=((($99)-($100))|0);
   var $102=($101<<2);
   var $103=((($102)-(2))|0);
   var $104=$3;
   var $105=(($104+($103<<3))|0);
   var $st$46$0=(($105)|0);
   HEAP32[(($st$46$0)>>2)]=$98$0;
   var $st$47$1=(($105+4)|0);
   HEAP32[(($st$47$1)>>2)]=$98$1;
   var $106=$i;
   var $107=($106<<2);
   var $108=((($107)+(3))|0);
   var $109=$1;
   var $110=(($109+($108<<3))|0);
   var $ld$48$0=(($110)|0);
   var $111$0=HEAP32[(($ld$48$0)>>2)];
   var $ld$49$1=(($110+4)|0);
   var $111$1=HEAP32[(($ld$49$1)>>2)];
   var $st$50$0=(($t0)|0);
   HEAP32[(($st$50$0)>>2)]=$111$0;
   var $st$51$1=(($t0+4)|0);
   HEAP32[(($st$51$1)>>2)]=$111$1;
   var $112=$len;
   var $113=$i;
   var $114=((($112)-($113))|0);
   var $115=($114<<2);
   var $116=((($115)-(1))|0);
   var $117=$1;
   var $118=(($117+($116<<3))|0);
   var $ld$52$0=(($118)|0);
   var $119$0=HEAP32[(($ld$52$0)>>2)];
   var $ld$53$1=(($118+4)|0);
   var $119$1=HEAP32[(($ld$53$1)>>2)];
   var $st$54$0=(($t1)|0);
   HEAP32[(($st$54$0)>>2)]=$119$0;
   var $st$55$1=(($t1+4)|0);
   HEAP32[(($st$55$1)>>2)]=$119$1;
   var $ld$56$0=(($t1)|0);
   var $120$0=HEAP32[(($ld$56$0)>>2)];
   var $ld$57$1=(($t1+4)|0);
   var $120$1=HEAP32[(($ld$57$1)>>2)];
   var $121=$i;
   var $122=($121<<2);
   var $123=((($122)+(3))|0);
   var $124=$3;
   var $125=(($124+($123<<3))|0);
   var $st$58$0=(($125)|0);
   HEAP32[(($st$58$0)>>2)]=$120$0;
   var $st$59$1=(($125+4)|0);
   HEAP32[(($st$59$1)>>2)]=$120$1;
   var $ld$60$0=(($t0)|0);
   var $126$0=HEAP32[(($ld$60$0)>>2)];
   var $ld$61$1=(($t0+4)|0);
   var $126$1=HEAP32[(($ld$61$1)>>2)];
   var $127=$len;
   var $128=$i;
   var $129=((($127)-($128))|0);
   var $130=($129<<2);
   var $131=((($130)-(1))|0);
   var $132=$3;
   var $133=(($132+($131<<3))|0);
   var $st$62$0=(($133)|0);
   HEAP32[(($st$62$0)>>2)]=$126$0;
   var $st$63$1=(($133+4)|0);
   HEAP32[(($st$63$1)>>2)]=$126$1;
   label = 6; break;
  case 6: 
   var $135=$i;
   var $136=((($135)+(1))|0);
   $i=$136;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $139=$2;
   var $140=$1;
   var $141=(($140+($139<<3))|0);
   $1=$141;
   var $142=$4;
   var $143=$3;
   var $144=(($143+($142<<3))|0);
   $3=$144;
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateMemStorage($block_size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $storage;
   $1=$block_size;
   $storage=0;
   var $2=_cvAlloc(24);
   var $3=$2;
   $storage=$3;
   var $4=_cvGetErrStatus();
   var $5=(($4)|(0)) < 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((6608)|0), ((11720)|0), ((15112)|0), 116);
   label = 6; break;
  case 3: 
   var $8=$storage;
   var $9=$1;
   __ZL17icvInitMemStorageP12CvMemStoragei($8, $9);
   var $10=_cvGetErrStatus();
   var $11=(($10)|(0)) < 0;
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((6608)|0), ((11720)|0), ((15112)|0), 117);
   label = 6; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $15=_cvGetErrStatus();
   var $16=(($15)|(0)) < 0;
   if ($16) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $18=$storage;
   var $19=$18;
   _cvFree_($19);
   $storage=0;
   label = 8; break;
  case 8: 
   var $21=$storage;
   return $21;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvInitMemStorageP12CvMemStoragei($storage, $block_size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$storage;
   $2=$block_size;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((17920)|0), ((36880)|0), ((15112)|0), 90);
   label = 6; break;
  case 3: 
   var $7=$2;
   var $8=(($7)|(0)) <= 0;
   if ($8) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $2=65408;
   label = 5; break;
  case 5: 
   var $11=$2;
   var $12=__Z7cvAlignii($11, 8);
   $2=$12;
   var $13=$1;
   var $14=$13;
   HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0; HEAP32[((($14)+(12))>>2)]=0; HEAP32[((($14)+(16))>>2)]=0; HEAP32[((($14)+(20))>>2)]=0;
   var $15=$1;
   var $16=(($15)|0);
   HEAP32[(($16)>>2)]=1116274688;
   var $17=$2;
   var $18=$1;
   var $19=(($18+16)|0);
   HEAP32[(($19)>>2)]=$17;
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReleaseMemStorage($storage) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $st;
   $1=$storage;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6256)|0), ((36880)|0), ((15112)|0), 216);
   label = 8; break;
  case 3: 
   var $6=$1;
   var $7=HEAP32[(($6)>>2)];
   $st=$7;
   var $8=$1;
   HEAP32[(($8)>>2)]=0;
   var $9=$st;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $12=$st;
   __ZL20icvDestroyMemStorageP12CvMemStorage($12);
   var $13=_cvGetErrStatus();
   var $14=(($13)|(0)) < 0;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((6256)|0), ((11720)|0), ((15112)|0), 223);
   label = 8; break;
  case 6: 
   var $17=$st;
   var $18=$17;
   _cvFree_($18);
   $st=0;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL20icvDestroyMemStorageP12CvMemStorage($storage) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $k;
   var $block;
   var $dst_top;
   var $temp;
   $1=$storage;
   $k=0;
   $dst_top=0;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((16712)|0), ((36880)|0), ((15112)|0), 166);
   label = 18; break;
  case 3: 
   var $6=$1;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $11=$1;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+8)|0);
   var $15=HEAP32[(($14)>>2)];
   $dst_top=$15;
   label = 5; break;
  case 5: 
   var $17=$1;
   var $18=(($17+4)|0);
   var $19=HEAP32[(($18)>>2)];
   $block=$19;
   label = 6; break;
  case 6: 
   var $21=$block;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 7; break; } else { label = 17; break; }
  case 7: 
   var $24=$block;
   $temp=$24;
   var $25=$block;
   var $26=(($25+4)|0);
   var $27=HEAP32[(($26)>>2)];
   $block=$27;
   var $28=$1;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))!=0;
   if ($31) { label = 8; break; } else { label = 14; break; }
  case 8: 
   var $33=$dst_top;
   var $34=(($33)|(0))!=0;
   if ($34) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $36=$dst_top;
   var $37=$temp;
   var $38=(($37)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$dst_top;
   var $40=(($39+4)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$temp;
   var $43=(($42+4)|0);
   HEAP32[(($43)>>2)]=$41;
   var $44=$temp;
   var $45=(($44+4)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46)|(0))!=0;
   if ($47) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $49=$temp;
   var $50=$temp;
   var $51=(($50+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|0);
   HEAP32[(($53)>>2)]=$49;
   label = 11; break;
  case 11: 
   var $55=$temp;
   var $56=$dst_top;
   var $57=(($56+4)|0);
   HEAP32[(($57)>>2)]=$55;
   $dst_top=$55;
   label = 13; break;
  case 12: 
   var $59=$temp;
   var $60=$1;
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+8)|0);
   HEAP32[(($63)>>2)]=$59;
   var $64=$1;
   var $65=(($64+12)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66+4)|0);
   HEAP32[(($67)>>2)]=$59;
   $dst_top=$59;
   var $68=$temp;
   var $69=(($68+4)|0);
   HEAP32[(($69)>>2)]=0;
   var $70=$temp;
   var $71=(($70)|0);
   HEAP32[(($71)>>2)]=0;
   var $72=$1;
   var $73=(($72+16)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=((($74)-(8))|0);
   var $76=$1;
   var $77=(($76+20)|0);
   HEAP32[(($77)>>2)]=$75;
   label = 13; break;
  case 13: 
   label = 15; break;
  case 14: 
   var $80=$temp;
   var $81=$80;
   _cvFree_($81);
   $temp=0;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $84=$k;
   var $85=((($84)+(1))|0);
   $k=$85;
   label = 6; break;
  case 17: 
   var $87=$1;
   var $88=(($87+4)|0);
   HEAP32[(($88)>>2)]=0;
   var $89=$1;
   var $90=(($89+8)|0);
   HEAP32[(($90)>>2)]=0;
   var $91=$1;
   var $92=(($91+20)|0);
   HEAP32[(($92)>>2)]=0;
   label = 18; break;
  case 18: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSaveMemStoragePos($storage, $pos) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$storage;
   $2=$pos;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$2;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-27, ((6048)|0), ((36880)|0), ((15112)|0), 330);
   label = 5; break;
  case 4: 
   var $10=$1;
   var $11=(($10+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$2;
   var $14=(($13)|0);
   HEAP32[(($14)>>2)]=$12;
   var $15=$1;
   var $16=(($15+20)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$2;
   var $19=(($18+4)|0);
   HEAP32[(($19)>>2)]=$17;
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvRestoreMemStoragePos($storage, $pos) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$storage;
   $2=$pos;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$2;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-27, ((5896)|0), ((36880)|0), ((15112)|0), 348);
   label = 12; break;
  case 4: 
   var $10=$2;
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$1;
   var $14=(($13+16)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($12)|(0)) > (($15)|(0));
   if ($16) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-201, ((5896)|0), ((36880)|0), ((15112)|0), 350);
   label = 12; break;
  case 6: 
   var $19=$2;
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$1;
   var $23=(($22+8)|0);
   HEAP32[(($23)>>2)]=$21;
   var $24=$2;
   var $25=(($24+4)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$1;
   var $28=(($27+20)|0);
   HEAP32[(($28)>>2)]=$26;
   var $29=$1;
   var $30=(($29+8)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0))!=0;
   if ($32) { label = 11; break; } else { label = 7; break; }
  case 7: 
   var $34=$1;
   var $35=(($34+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$1;
   var $38=(($37+8)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$1;
   var $40=(($39+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))!=0;
   if ($42) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $44=$1;
   var $45=(($44+16)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=((($46)-(8))|0);
   var $50 = $47;label = 10; break;
  case 9: 
   var $50 = 0;label = 10; break;
  case 10: 
   var $50;
   var $51=$1;
   var $52=(($51+20)|0);
   HEAP32[(($52)>>2)]=$50;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvMemStorageAlloc($storage, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $max_free_space;
   $1=$storage;
   $2=$size;
   $ptr=0;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((5840)|0), ((7560)|0), ((15112)|0), 394);
   label = 12; break;
  case 3: 
   var $7=$2;
   var $8=(($7)>>>(0)) > 2147483647;
   if ($8) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-211, ((5840)|0), ((15976)|0), ((15112)|0), 397);
   label = 12; break;
  case 5: 
   var $11=$1;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$2;
   var $15=(($13)>>>(0)) < (($14)>>>(0));
   if ($15) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $17=$1;
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=((($19)-(8))|0);
   var $21=__Z11cvAlignLeftii($20, 8);
   $max_free_space=$21;
   var $22=$max_free_space;
   var $23=$2;
   var $24=(($22)>>>(0)) < (($23)>>>(0));
   if ($24) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-211, ((5840)|0), ((15752)|0), ((15112)|0), 405);
   label = 12; break;
  case 8: 
   var $27=$1;
   __ZL17icvGoNextMemBlockP12CvMemStorage($27);
   var $28=_cvGetErrStatus();
   var $29=(($28)|(0)) < 0;
   if ($29) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-1, ((5840)|0), ((11720)|0), ((15112)|0), 407);
   label = 12; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $33=$1;
   var $34=(($33+8)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$35;
   var $37=$1;
   var $38=(($37+16)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($36+$39)|0);
   var $41=$1;
   var $42=(($41+20)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(((-$43))|0);
   var $45=(($40+$44)|0);
   $ptr=$45;
   var $46=$1;
   var $47=(($46+20)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$2;
   var $50=((($48)-($49))|0);
   var $51=__Z11cvAlignLeftii($50, 8);
   var $52=$1;
   var $53=(($52+20)|0);
   HEAP32[(($53)>>2)]=$51;
   label = 12; break;
  case 12: 
   var $55=$ptr;
   return $55;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetSeqElem($seq, $index) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $block;
   var $count;
   var $total;
   $2=$seq;
   $3=$index;
   var $4=$2;
   var $5=(($4+24)|0);
   var $6=HEAP32[(($5)>>2)];
   $total=$6;
   var $7=$3;
   var $8=$total;
   var $9=(($7)>>>(0)) >= (($8)>>>(0));
   if ($9) { label = 2; break; } else { label = 11; break; }
  case 2: 
   var $11=$3;
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14=$total;
   var $17 = $14;label = 5; break;
  case 4: 
   var $17 = 0;label = 5; break;
  case 5: 
   var $17;
   var $18=$3;
   var $19=((($18)+($17))|0);
   $3=$19;
   var $20=$3;
   var $21=$total;
   var $22=(($20)|(0)) >= (($21)|(0));
   if ($22) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $24=$total;
   var $27 = $24;label = 8; break;
  case 7: 
   var $27 = 0;label = 8; break;
  case 8: 
   var $27;
   var $28=$3;
   var $29=((($28)-($27))|0);
   $3=$29;
   var $30=$3;
   var $31=$total;
   var $32=(($30)>>>(0)) >= (($31)>>>(0));
   if ($32) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $1=0;
   label = 21; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $36=$2;
   var $37=(($36+52)|0);
   var $38=HEAP32[(($37)>>2)];
   $block=$38;
   var $39=$3;
   var $40=$3;
   var $41=((($39)+($40))|0);
   var $42=$total;
   var $43=(($41)|(0)) <= (($42)|(0));
   if ($43) { label = 12; break; } else { label = 16; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $46=$3;
   var $47=$block;
   var $48=(($47+12)|0);
   var $49=HEAP32[(($48)>>2)];
   $count=$49;
   var $50=(($46)|(0)) >= (($49)|(0));
   if ($50) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $52=$block;
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   $block=$54;
   var $55=$count;
   var $56=$3;
   var $57=((($56)-($55))|0);
   $3=$57;
   label = 13; break;
  case 15: 
   label = 20; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $61=$block;
   var $62=(($61)|0);
   var $63=HEAP32[(($62)>>2)];
   $block=$63;
   var $64=$block;
   var $65=(($64+12)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$total;
   var $68=((($67)-($66))|0);
   $total=$68;
   label = 18; break;
  case 18: 
   var $70=$3;
   var $71=$total;
   var $72=(($70)|(0)) < (($71)|(0));
   if ($72) { label = 17; break; } else { label = 19; break; }
  case 19: 
   var $74=$total;
   var $75=$3;
   var $76=((($75)-($74))|0);
   $3=$76;
   label = 20; break;
  case 20: 
   var $78=$block;
   var $79=(($78+16)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$3;
   var $82=$2;
   var $83=(($82+28)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(Math.imul($81,$84)|0);
   var $86=(($80+$85)|0);
   $1=$86;
   label = 21; break;
  case 21: 
   var $88=$1;
   return $88;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSliceLength($slice, $seq) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $slice; $slice = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($slice)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($slice)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $total;
   var $length;
   $1=$seq;
   var $2=$1;
   var $3=(($2+24)|0);
   var $4=HEAP32[(($3)>>2)];
   $total=$4;
   var $5=(($slice+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($slice)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=((($6)-($8))|0);
   $length=$9;
   var $10=$length;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $13=(($slice)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0)) < 0;
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=$total;
   var $18=(($slice)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=((($19)+($17))|0);
   HEAP32[(($18)>>2)]=$20;
   label = 4; break;
  case 4: 
   var $22=(($slice+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0)) <= 0;
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $26=$total;
   var $27=(($slice+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=((($28)+($26))|0);
   HEAP32[(($27)>>2)]=$29;
   label = 6; break;
  case 6: 
   var $31=(($slice+4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($slice)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=((($32)-($34))|0);
   $length=$35;
   label = 7; break;
  case 7: 
   var $37=$length;
   var $38=(($37)|(0)) < 0;
   if ($38) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $40=$total;
   var $41=$length;
   var $42=((($41)+($40))|0);
   $length=$42;
   label = 12; break;
  case 9: 
   var $44=$length;
   var $45=$total;
   var $46=(($44)|(0)) > (($45)|(0));
   if ($46) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $48=$total;
   $length=$48;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $51=$length;
   STACKTOP = sp;
   return $51;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvGoNextMemBlockP12CvMemStorage($storage) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $block;
   var $parent;
   var $parent_pos=sp;
   $1=$storage;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((17944)|0), ((36880)|0), ((15112)|0), 266);
   label = 24; break;
  case 3: 
   var $6=$1;
   var $7=(($6+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 21; break; } else { label = 5; break; }
  case 5: 
   var $18=$1;
   var $19=(($18+12)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 9; break; } else { label = 6; break; }
  case 6: 
   var $23=$1;
   var $24=(($23+16)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=_cvAlloc($25);
   var $27=$26;
   $block=$27;
   var $28=_cvGetErrStatus();
   var $29=(($28)|(0)) < 0;
   if ($29) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((17944)|0), ((11720)|0), ((15112)|0), 274);
   label = 24; break;
  case 8: 
   label = 17; break;
  case 9: 
   var $33=$1;
   var $34=(($33+12)|0);
   var $35=HEAP32[(($34)>>2)];
   $parent=$35;
   var $36=$parent;
   _cvSaveMemStoragePos($36, $parent_pos);
   var $37=$parent;
   __ZL17icvGoNextMemBlockP12CvMemStorage($37);
   var $38=_cvGetErrStatus();
   var $39=(($38)|(0)) < 0;
   if ($39) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-1, ((17944)|0), ((11720)|0), ((15112)|0), 282);
   label = 24; break;
  case 11: 
   var $42=$parent;
   var $43=(($42+8)|0);
   var $44=HEAP32[(($43)>>2)];
   $block=$44;
   var $45=$parent;
   _cvRestoreMemStoragePos($45, $parent_pos);
   var $46=$block;
   var $47=$parent;
   var $48=(($47+8)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($46)|(0))==(($49)|(0));
   if ($50) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $52=$parent;
   var $53=(($52+4)|0);
   HEAP32[(($53)>>2)]=0;
   var $54=$parent;
   var $55=(($54+8)|0);
   HEAP32[(($55)>>2)]=0;
   var $56=$parent;
   var $57=(($56+20)|0);
   HEAP32[(($57)>>2)]=0;
   label = 16; break;
  case 13: 
   var $59=$block;
   var $60=(($59+4)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$parent;
   var $63=(($62+8)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+4)|0);
   HEAP32[(($65)>>2)]=$61;
   var $66=$block;
   var $67=(($66+4)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68)|(0))!=0;
   if ($69) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $71=$parent;
   var $72=(($71+8)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$block;
   var $75=(($74+4)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76)|0);
   HEAP32[(($77)>>2)]=$73;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $81=$block;
   var $82=(($81+4)|0);
   HEAP32[(($82)>>2)]=0;
   var $83=$1;
   var $84=(($83+8)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$block;
   var $87=(($86)|0);
   HEAP32[(($87)>>2)]=$85;
   var $88=$1;
   var $89=(($88+8)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))!=0;
   if ($91) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $93=$block;
   var $94=$1;
   var $95=(($94+8)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96+4)|0);
   HEAP32[(($97)>>2)]=$93;
   label = 20; break;
  case 19: 
   var $99=$block;
   var $100=$1;
   var $101=(($100+4)|0);
   HEAP32[(($101)>>2)]=$99;
   var $102=$1;
   var $103=(($102+8)|0);
   HEAP32[(($103)>>2)]=$99;
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $106=$1;
   var $107=(($106+8)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108+4)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110)|(0))!=0;
   if ($111) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $113=$1;
   var $114=(($113+8)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115+4)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=$1;
   var $119=(($118+8)|0);
   HEAP32[(($119)>>2)]=$117;
   label = 23; break;
  case 23: 
   var $121=$1;
   var $122=(($121+16)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=((($123)-(8))|0);
   var $125=$1;
   var $126=(($125+20)|0);
   HEAP32[(($126)>>2)]=$124;
   label = 24; break;
  case 24: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateSeq($seq_flags, $header_size, $elem_size, $storage) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $seq;
   var $elemtype;
   var $typesize;
   $1=$seq_flags;
   $2=$header_size;
   $3=$elem_size;
   $4=$storage;
   $seq=0;
   var $5=$4;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6888)|0), ((36880)|0), ((15112)|0), 454);
   label = 15; break;
  case 3: 
   var $9=$2;
   var $10=(($9)|(0)) < 56;
   if ($10) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $12=$3;
   var $13=(($12)|(0)) <= 0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-201, ((6888)|0), ((36880)|0), ((15112)|0), 456);
   label = 15; break;
  case 6: 
   var $16=$4;
   var $17=$2;
   var $18=_cvMemStorageAlloc($16, $17);
   var $19=$18;
   $seq=$19;
   var $20=_cvGetErrStatus();
   var $21=(($20)|(0)) < 0;
   if ($21) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((6888)|0), ((11720)|0), ((15112)|0), 459);
   label = 15; break;
  case 8: 
   var $24=$seq;
   var $25=$24;
   var $26=$2;
   _memset($25, 0, $26);
   var $27=$2;
   var $28=$seq;
   var $29=(($28+4)|0);
   HEAP32[(($29)>>2)]=$27;
   var $30=$1;
   var $31=$30 & 65535;
   var $32=$31 | 1117323264;
   var $33=$seq;
   var $34=(($33)|0);
   HEAP32[(($34)>>2)]=$32;
   var $35=$1;
   var $36=$35 & 511;
   $elemtype=$36;
   var $37=$elemtype;
   var $38=$37 & 504;
   var $39=$38 >> 3;
   var $40=((($39)+(1))|0);
   var $41=$elemtype;
   var $42=$41 & 7;
   var $43=($42<<1);
   var $44=47696 >>> (($43)>>>(0));
   var $45=$44 & 3;
   var $46=$40 << $45;
   $typesize=$46;
   var $47=$elemtype;
   var $48=(($47)|(0))!=0;
   if ($48) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $50=$typesize;
   var $51=(($50)|(0))!=0;
   if ($51) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $53=$typesize;
   var $54=$3;
   var $55=(($53)|(0))!=(($54)|(0));
   if ($55) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-201, ((6888)|0), ((14392)|0), ((15112)|0), 472);
   label = 15; break;
  case 12: 
   var $58=$3;
   var $59=$seq;
   var $60=(($59+28)|0);
   HEAP32[(($60)>>2)]=$58;
   var $61=$4;
   var $62=$seq;
   var $63=(($62+44)|0);
   HEAP32[(($63)>>2)]=$61;
   var $64=$seq;
   var $65=$3;
   var $66=(((1024)/((($65)|(0))))&-1);
   _cvSetSeqBlockSize($64, $66);
   var $67=_cvGetErrStatus();
   var $68=(($67)|(0)) < 0;
   if ($68) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-1, ((6888)|0), ((11720)|0), ((15112)|0), 477);
   label = 15; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $72=$seq;
   return $72;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSetSeqBlockSize($seq, $delta_elements) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $elem_size;
   var $useful_block_size;
   $1=$seq;
   $2=$delta_elements;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=(($6+44)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-27, ((6864)|0), ((36880)|0), ((15112)|0), 498);
   label = 16; break;
  case 4: 
   var $12=$2;
   var $13=(($12)|(0)) < 0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-211, ((6864)|0), ((36880)|0), ((15112)|0), 500);
   label = 16; break;
  case 6: 
   var $16=$1;
   var $17=(($16+44)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+16)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(8))|0);
   var $22=((($21)-(20))|0);
   var $23=__Z11cvAlignLeftii($22, 8);
   $useful_block_size=$23;
   var $24=$1;
   var $25=(($24+28)|0);
   var $26=HEAP32[(($25)>>2)];
   $elem_size=$26;
   var $27=$2;
   var $28=(($27)|(0))==0;
   if ($28) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $30=$elem_size;
   var $31=(((1024)/((($30)|(0))))&-1);
   $2=$31;
   var $32=$2;
   var $33=(($32)|(0)) < 1;
   if ($33) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $38 = 1;label = 10; break;
  case 9: 
   var $36=$2;
   var $38 = $36;label = 10; break;
  case 10: 
   var $38;
   $2=$38;
   label = 11; break;
  case 11: 
   var $40=$2;
   var $41=$elem_size;
   var $42=(Math.imul($40,$41)|0);
   var $43=$useful_block_size;
   var $44=(($42)|(0)) > (($43)|(0));
   if ($44) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $46=$useful_block_size;
   var $47=$elem_size;
   var $48=((((($46)|(0)))/((($47)|(0))))&-1);
   $2=$48;
   var $49=$2;
   var $50=(($49)|(0))==0;
   if ($50) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-211, ((6864)|0), ((13432)|0), ((15112)|0), 516);
   label = 16; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $54=$2;
   var $55=$1;
   var $56=(($55+40)|0);
   HEAP32[(($56)>>2)]=$54;
   label = 16; break;
  case 16: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvStartReadSeq($seq, $reader, $reverse) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $first_block;
   var $last_block;
   var $temp;
   $1=$seq;
   $2=$reader;
   $3=$reverse;
   var $4=$2;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$2;
   var $8=(($7+4)|0);
   HEAP32[(($8)>>2)]=0;
   var $9=$2;
   var $10=(($9+8)|0);
   HEAP32[(($10)>>2)]=0;
   var $11=$2;
   var $12=(($11+16)|0);
   HEAP32[(($12)>>2)]=0;
   var $13=$2;
   var $14=(($13+20)|0);
   HEAP32[(($14)>>2)]=0;
   var $15=$2;
   var $16=(($15+12)|0);
   HEAP32[(($16)>>2)]=0;
   label = 3; break;
  case 3: 
   var $18=$1;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$2;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-27, ((6712)|0), ((36880)|0), ((15112)|0), 1104);
   label = 13; break;
  case 6: 
   var $25=$2;
   var $26=(($25)|0);
   HEAP32[(($26)>>2)]=32;
   var $27=$1;
   var $28=$2;
   var $29=(($28+4)|0);
   HEAP32[(($29)>>2)]=$27;
   var $30=$1;
   var $31=(($30+52)|0);
   var $32=HEAP32[(($31)>>2)];
   $first_block=$32;
   var $33=$first_block;
   var $34=(($33)|(0))!=0;
   if ($34) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $36=$first_block;
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   $last_block=$38;
   var $39=$first_block;
   var $40=(($39+16)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$2;
   var $43=(($42+12)|0);
   HEAP32[(($43)>>2)]=$41;
   var $44=$last_block;
   var $45=(($44+16)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$last_block;
   var $48=(($47+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=((($49)-(1))|0);
   var $51=$1;
   var $52=(($51+28)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(Math.imul($50,$53)|0);
   var $55=(($46+$54)|0);
   var $56=$2;
   var $57=(($56+28)|0);
   HEAP32[(($57)>>2)]=$55;
   var $58=$1;
   var $59=(($58+52)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60+8)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$2;
   var $64=(($63+24)|0);
   HEAP32[(($64)>>2)]=$62;
   var $65=$3;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $68=$2;
   var $69=(($68+12)|0);
   var $70=HEAP32[(($69)>>2)];
   $temp=$70;
   var $71=$2;
   var $72=(($71+28)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$2;
   var $75=(($74+12)|0);
   HEAP32[(($75)>>2)]=$73;
   var $76=$temp;
   var $77=$2;
   var $78=(($77+28)|0);
   HEAP32[(($78)>>2)]=$76;
   var $79=$last_block;
   var $80=$2;
   var $81=(($80+8)|0);
   HEAP32[(($81)>>2)]=$79;
   label = 10; break;
  case 9: 
   var $83=$first_block;
   var $84=$2;
   var $85=(($84+8)|0);
   HEAP32[(($85)>>2)]=$83;
   label = 10; break;
  case 10: 
   var $87=$2;
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89+16)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$2;
   var $93=(($92+16)|0);
   HEAP32[(($93)>>2)]=$91;
   var $94=$2;
   var $95=(($94+16)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$2;
   var $98=(($97+8)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=$1;
   var $103=(($102+28)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(Math.imul($101,$104)|0);
   var $106=(($96+$105)|0);
   var $107=$2;
   var $108=(($107+20)|0);
   HEAP32[(($108)>>2)]=$106;
   label = 12; break;
  case 11: 
   var $110=$2;
   var $111=(($110+24)|0);
   HEAP32[(($111)>>2)]=0;
   var $112=$2;
   var $113=(($112+8)|0);
   HEAP32[(($113)>>2)]=0;
   var $114=$2;
   var $115=(($114+20)|0);
   HEAP32[(($115)>>2)]=0;
   var $116=$2;
   var $117=(($116+16)|0);
   HEAP32[(($117)>>2)]=0;
   var $118=$2;
   var $119=(($118+28)|0);
   HEAP32[(($119)>>2)]=0;
   var $120=$2;
   var $121=(($120+12)|0);
   HEAP32[(($121)>>2)]=0;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSetSeqReaderPos($reader, $index, $is_relative) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $block;
   var $elem_size;
   var $count;
   var $total;
   var $ptr;
   var $delta;
   var $delta1;
   $1=$reader;
   $2=$index;
   $3=$is_relative;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-27, ((6632)|0), ((36880)|0), ((15112)|0), 1218);
   label = 39; break;
  case 4: 
   var $13=$1;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+24)|0);
   var $17=HEAP32[(($16)>>2)];
   $total=$17;
   var $18=$1;
   var $19=(($18+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+28)|0);
   var $22=HEAP32[(($21)>>2)];
   $elem_size=$22;
   var $23=$3;
   var $24=(($23)|(0))!=0;
   if ($24) { label = 28; break; } else { label = 5; break; }
  case 5: 
   var $26=$2;
   var $27=(($26)|(0)) < 0;
   if ($27) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $29=$2;
   var $30=$total;
   var $31=(((-$30))|0);
   var $32=(($29)|(0)) < (($31)|(0));
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-211, ((6632)|0), ((36880)|0), ((15112)|0), 1228);
   label = 39; break;
  case 8: 
   var $35=$total;
   var $36=$2;
   var $37=((($36)+($35))|0);
   $2=$37;
   label = 14; break;
  case 9: 
   var $39=$2;
   var $40=$total;
   var $41=(($39)|(0)) >= (($40)|(0));
   if ($41) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $43=$total;
   var $44=$2;
   var $45=((($44)-($43))|0);
   $2=$45;
   var $46=$2;
   var $47=$total;
   var $48=(($46)|(0)) >= (($47)|(0));
   if ($48) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-211, ((6632)|0), ((36880)|0), ((15112)|0), 1235);
   label = 39; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $53=$1;
   var $54=(($53+4)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+52)|0);
   var $57=HEAP32[(($56)>>2)];
   $block=$57;
   var $58=$2;
   var $59=$block;
   var $60=(($59+12)|0);
   var $61=HEAP32[(($60)>>2)];
   $count=$61;
   var $62=(($58)|(0)) >= (($61)|(0));
   if ($62) { label = 15; break; } else { label = 25; break; }
  case 15: 
   var $64=$2;
   var $65=$2;
   var $66=((($64)+($65))|0);
   var $67=$total;
   var $68=(($66)|(0)) <= (($67)|(0));
   if ($68) { label = 16; break; } else { label = 20; break; }
  case 16: 
   label = 17; break;
  case 17: 
   var $71=$block;
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   $block=$73;
   var $74=$count;
   var $75=$2;
   var $76=((($75)-($74))|0);
   $2=$76;
   label = 18; break;
  case 18: 
   var $78=$2;
   var $79=$block;
   var $80=(($79+12)|0);
   var $81=HEAP32[(($80)>>2)];
   $count=$81;
   var $82=(($78)|(0)) >= (($81)|(0));
   if ($82) { label = 17; break; } else { label = 19; break; }
  case 19: 
   label = 24; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $86=$block;
   var $87=(($86)|0);
   var $88=HEAP32[(($87)>>2)];
   $block=$88;
   var $89=$block;
   var $90=(($89+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$total;
   var $93=((($92)-($91))|0);
   $total=$93;
   label = 22; break;
  case 22: 
   var $95=$2;
   var $96=$total;
   var $97=(($95)|(0)) < (($96)|(0));
   if ($97) { label = 21; break; } else { label = 23; break; }
  case 23: 
   var $99=$total;
   var $100=$2;
   var $101=((($100)-($99))|0);
   $2=$101;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $104=$block;
   var $105=(($104+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$2;
   var $108=$elem_size;
   var $109=(Math.imul($107,$108)|0);
   var $110=(($106+$109)|0);
   var $111=$1;
   var $112=(($111+12)|0);
   HEAP32[(($112)>>2)]=$110;
   var $113=$1;
   var $114=(($113+8)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$block;
   var $117=(($115)|(0))!=(($116)|(0));
   if ($117) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $119=$block;
   var $120=$1;
   var $121=(($120+8)|0);
   HEAP32[(($121)>>2)]=$119;
   var $122=$block;
   var $123=(($122+16)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=$1;
   var $126=(($125+16)|0);
   HEAP32[(($126)>>2)]=$124;
   var $127=$block;
   var $128=(($127+16)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$block;
   var $131=(($130+12)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=$elem_size;
   var $134=(Math.imul($132,$133)|0);
   var $135=(($129+$134)|0);
   var $136=$1;
   var $137=(($136+20)|0);
   HEAP32[(($137)>>2)]=$135;
   label = 27; break;
  case 27: 
   label = 38; break;
  case 28: 
   var $140=$1;
   var $141=(($140+12)|0);
   var $142=HEAP32[(($141)>>2)];
   $ptr=$142;
   var $143=$elem_size;
   var $144=$2;
   var $145=(Math.imul($144,$143)|0);
   $2=$145;
   var $146=$1;
   var $147=(($146+8)|0);
   var $148=HEAP32[(($147)>>2)];
   $block=$148;
   var $149=$2;
   var $150=(($149)|(0)) > 0;
   if ($150) { label = 29; break; } else { label = 33; break; }
  case 29: 
   label = 30; break;
  case 30: 
   var $153=$ptr;
   var $154=$2;
   var $155=(($153+$154)|0);
   var $156=$1;
   var $157=(($156+20)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($155)>>>(0)) >= (($158)>>>(0));
   if ($159) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $161=$1;
   var $162=(($161+20)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=$ptr;
   var $165=$163;
   var $166=$164;
   var $167=((($165)-($166))|0);
   $delta=$167;
   var $168=$delta;
   var $169=$2;
   var $170=((($169)-($168))|0);
   $2=$170;
   var $171=$block;
   var $172=(($171+4)|0);
   var $173=HEAP32[(($172)>>2)];
   $block=$173;
   var $174=$1;
   var $175=(($174+8)|0);
   HEAP32[(($175)>>2)]=$173;
   var $176=$block;
   var $177=(($176+16)|0);
   var $178=HEAP32[(($177)>>2)];
   $ptr=$178;
   var $179=$1;
   var $180=(($179+16)|0);
   HEAP32[(($180)>>2)]=$178;
   var $181=$block;
   var $182=(($181+16)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=$block;
   var $185=(($184+12)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=$elem_size;
   var $188=(Math.imul($186,$187)|0);
   var $189=(($183+$188)|0);
   var $190=$1;
   var $191=(($190+20)|0);
   HEAP32[(($191)>>2)]=$189;
   label = 30; break;
  case 32: 
   var $193=$ptr;
   var $194=$2;
   var $195=(($193+$194)|0);
   var $196=$1;
   var $197=(($196+12)|0);
   HEAP32[(($197)>>2)]=$195;
   label = 37; break;
  case 33: 
   label = 34; break;
  case 34: 
   var $200=$ptr;
   var $201=$2;
   var $202=(($200+$201)|0);
   var $203=$1;
   var $204=(($203+16)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=(($202)>>>(0)) < (($205)>>>(0));
   if ($206) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $208=$ptr;
   var $209=$1;
   var $210=(($209+16)|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=$208;
   var $213=$211;
   var $214=((($212)-($213))|0);
   $delta1=$214;
   var $215=$delta1;
   var $216=$2;
   var $217=((($216)+($215))|0);
   $2=$217;
   var $218=$block;
   var $219=(($218)|0);
   var $220=HEAP32[(($219)>>2)];
   $block=$220;
   var $221=$1;
   var $222=(($221+8)|0);
   HEAP32[(($222)>>2)]=$220;
   var $223=$block;
   var $224=(($223+16)|0);
   var $225=HEAP32[(($224)>>2)];
   var $226=$1;
   var $227=(($226+16)|0);
   HEAP32[(($227)>>2)]=$225;
   var $228=$block;
   var $229=(($228+16)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=$block;
   var $232=(($231+12)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=$elem_size;
   var $235=(Math.imul($233,$234)|0);
   var $236=(($230+$235)|0);
   $ptr=$236;
   var $237=$1;
   var $238=(($237+20)|0);
   HEAP32[(($238)>>2)]=$236;
   label = 34; break;
  case 36: 
   var $240=$ptr;
   var $241=$2;
   var $242=(($240+$241)|0);
   var $243=$1;
   var $244=(($243+12)|0);
   HEAP32[(($244)>>2)]=$242;
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL10icvGrowSeqP5CvSeqi($seq, $in_front_of) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $block;
   var $elem_size;
   var $delta_elems;
   var $storage;
   var $delta;
   var $delta1;
   var $small_block_size;
   var $delta2;
   $1=$seq;
   $2=$in_front_of;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((18392)|0), ((36880)|0), ((15112)|0), 748);
   label = 44; break;
  case 3: 
   var $7=$1;
   var $8=(($7+48)|0);
   var $9=HEAP32[(($8)>>2)];
   $block=$9;
   var $10=$block;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 26; break; } else { label = 4; break; }
  case 4: 
   var $13=$1;
   var $14=(($13+28)|0);
   var $15=HEAP32[(($14)>>2)];
   $elem_size=$15;
   var $16=$1;
   var $17=(($16+40)|0);
   var $18=HEAP32[(($17)>>2)];
   $delta_elems=$18;
   var $19=$1;
   var $20=(($19+44)|0);
   var $21=HEAP32[(($20)>>2)];
   $storage=$21;
   var $22=$1;
   var $23=(($22+24)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$delta_elems;
   var $26=($25<<2);
   var $27=(($24)|(0)) >= (($26)|(0));
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$1;
   var $30=$delta_elems;
   var $31=($30<<1);
   _cvSetSeqBlockSize($29, $31);
   label = 6; break;
  case 6: 
   var $33=$storage;
   var $34=(($33)|(0))!=0;
   if ($34) { label = 8; break; } else { label = 7; break; }
  case 7: 
   _cvError(-27, ((18392)|0), ((7448)|0), ((15112)|0), 761);
   label = 44; break;
  case 8: 
   var $37=$storage;
   var $38=(($37+8)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$39;
   var $41=$storage;
   var $42=(($41+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($40+$43)|0);
   var $45=$storage;
   var $46=(($45+20)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(((-$47))|0);
   var $49=(($44+$48)|0);
   var $50=$1;
   var $51=(($50+32)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$49;
   var $54=$52;
   var $55=((($53)-($54))|0);
   var $56=(($55)>>>(0)) < 8;
   if ($56) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $58=$storage;
   var $59=(($58+20)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$1;
   var $62=(($61+28)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($60)|(0)) >= (($63)|(0));
   if ($64) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $66=$2;
   var $67=(($66)|(0))!=0;
   if ($67) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $69=$storage;
   var $70=(($69+20)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=$elem_size;
   var $73=((((($71)|(0)))/((($72)|(0))))&-1);
   $delta=$73;
   var $74=$delta;
   var $75=$delta_elems;
   var $76=(($74)|(0)) > (($75)|(0));
   var $77=$delta_elems;
   var $78=$delta;
   var $79=$76 ? $77 : $78;
   var $80=$elem_size;
   var $81=(Math.imul($79,$80)|0);
   $delta=$81;
   var $82=$delta;
   var $83=$1;
   var $84=(($83+32)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+$82)|0);
   HEAP32[(($84)>>2)]=$86;
   var $87=$storage;
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=$89;
   var $91=$storage;
   var $92=(($91+16)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($90+$93)|0);
   var $95=$1;
   var $96=(($95+32)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=$94;
   var $99=$97;
   var $100=((($98)-($99))|0);
   var $101=__Z11cvAlignLeftii($100, 8);
   var $102=$storage;
   var $103=(($102+20)|0);
   HEAP32[(($103)>>2)]=$101;
   label = 44; break;
  case 12: 
   var $105=$elem_size;
   var $106=$delta_elems;
   var $107=(Math.imul($105,$106)|0);
   var $108=__Z7cvAlignii(20, 8);
   var $109=((($107)+($108))|0);
   $delta1=$109;
   var $110=$storage;
   var $111=(($110+20)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=$delta1;
   var $114=(($112)|(0)) < (($113)|(0));
   if ($114) { label = 13; break; } else { label = 22; break; }
  case 13: 
   var $116=$delta_elems;
   var $117=((((($116)|(0)))/(3))&-1);
   var $118=1 < (($117)|(0));
   if ($118) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $120=$delta_elems;
   var $121=((((($120)|(0)))/(3))&-1);
   var $124 = $121;label = 16; break;
  case 15: 
   var $124 = 1;label = 16; break;
  case 16: 
   var $124;
   var $125=$elem_size;
   var $126=(Math.imul($124,$125)|0);
   var $127=__Z7cvAlignii(20, 8);
   var $128=((($126)+($127))|0);
   $small_block_size=$128;
   var $129=$storage;
   var $130=(($129+20)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=$small_block_size;
   var $133=((($132)+(8))|0);
   var $134=(($131)|(0)) >= (($133)|(0));
   if ($134) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $136=$storage;
   var $137=(($136+20)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=__Z7cvAlignii(20, 8);
   var $140=((($138)-($139))|0);
   var $141=$1;
   var $142=(($141+28)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=((((($140)|(0)))/((($143)|(0))))&-1);
   $delta1=$144;
   var $145=$delta1;
   var $146=$1;
   var $147=(($146+28)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(Math.imul($145,$148)|0);
   var $150=__Z7cvAlignii(20, 8);
   var $151=((($149)+($150))|0);
   $delta1=$151;
   label = 21; break;
  case 18: 
   var $153=$storage;
   __ZL17icvGoNextMemBlockP12CvMemStorage($153);
   var $154=_cvGetErrStatus();
   var $155=(($154)|(0)) < 0;
   if ($155) { label = 19; break; } else { label = 20; break; }
  case 19: 
   _cvError(-1, ((18392)|0), ((11720)|0), ((15112)|0), 794);
   label = 44; break;
  case 20: 
   label = 21; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $160=$storage;
   var $161=$delta1;
   var $162=_cvMemStorageAlloc($160, $161);
   var $163=$162;
   $block=$163;
   var $164=_cvGetErrStatus();
   var $165=(($164)|(0)) < 0;
   if ($165) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-1, ((18392)|0), ((11720)|0), ((15112)|0), 799);
   label = 44; break;
  case 24: 
   var $168=$block;
   var $169=(($168+20)|0);
   var $170=$169;
   var $171=__Z10cvAlignPtrPKvi($170, 8);
   var $172=$block;
   var $173=(($172+16)|0);
   HEAP32[(($173)>>2)]=$171;
   var $174=$delta1;
   var $175=__Z7cvAlignii(20, 8);
   var $176=((($174)-($175))|0);
   var $177=$block;
   var $178=(($177+12)|0);
   HEAP32[(($178)>>2)]=$176;
   var $179=$block;
   var $180=(($179+4)|0);
   HEAP32[(($180)>>2)]=0;
   var $181=$block;
   var $182=(($181)|0);
   HEAP32[(($182)>>2)]=0;
   label = 25; break;
  case 25: 
   label = 27; break;
  case 26: 
   var $185=$block;
   var $186=(($185+4)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$1;
   var $189=(($188+48)|0);
   HEAP32[(($189)>>2)]=$187;
   label = 27; break;
  case 27: 
   var $191=$1;
   var $192=(($191+52)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193)|(0))!=0;
   if ($194) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $196=$block;
   var $197=$1;
   var $198=(($197+52)|0);
   HEAP32[(($198)>>2)]=$196;
   var $199=$block;
   var $200=$block;
   var $201=(($200+4)|0);
   HEAP32[(($201)>>2)]=$199;
   var $202=$block;
   var $203=(($202)|0);
   HEAP32[(($203)>>2)]=$199;
   label = 30; break;
  case 29: 
   var $205=$1;
   var $206=(($205+52)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=(($207)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=$block;
   var $211=(($210)|0);
   HEAP32[(($211)>>2)]=$209;
   var $212=$1;
   var $213=(($212+52)|0);
   var $214=HEAP32[(($213)>>2)];
   var $215=$block;
   var $216=(($215+4)|0);
   HEAP32[(($216)>>2)]=$214;
   var $217=$block;
   var $218=$block;
   var $219=(($218+4)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=(($220)|0);
   HEAP32[(($221)>>2)]=$217;
   var $222=$block;
   var $223=(($222)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=(($224+4)|0);
   HEAP32[(($225)>>2)]=$217;
   label = 30; break;
  case 30: 
   var $227=$2;
   var $228=(($227)|(0))!=0;
   if ($228) { label = 35; break; } else { label = 31; break; }
  case 31: 
   var $230=$block;
   var $231=(($230+16)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=$1;
   var $234=(($233+36)|0);
   HEAP32[(($234)>>2)]=$232;
   var $235=$block;
   var $236=(($235+16)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=$block;
   var $239=(($238+12)|0);
   var $240=HEAP32[(($239)>>2)];
   var $241=(($237+$240)|0);
   var $242=$1;
   var $243=(($242+32)|0);
   HEAP32[(($243)>>2)]=$241;
   var $244=$block;
   var $245=$block;
   var $246=(($245)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=(($244)|(0))==(($247)|(0));
   if ($248) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $263 = 0;label = 34; break;
  case 33: 
   var $251=$block;
   var $252=(($251)|0);
   var $253=HEAP32[(($252)>>2)];
   var $254=(($253+8)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=$block;
   var $257=(($256)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=(($258+12)|0);
   var $260=HEAP32[(($259)>>2)];
   var $261=((($255)+($260))|0);
   var $263 = $261;label = 34; break;
  case 34: 
   var $263;
   var $264=$block;
   var $265=(($264+8)|0);
   HEAP32[(($265)>>2)]=$263;
   label = 43; break;
  case 35: 
   var $267=$block;
   var $268=(($267+12)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=$1;
   var $271=(($270+28)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=((((($269)|(0)))/((($272)|(0))))&-1);
   $delta2=$273;
   var $274=$block;
   var $275=(($274+12)|0);
   var $276=HEAP32[(($275)>>2)];
   var $277=$block;
   var $278=(($277+16)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($279+$276)|0);
   HEAP32[(($278)>>2)]=$280;
   var $281=$block;
   var $282=$block;
   var $283=(($282)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($281)|(0))!=(($284)|(0));
   if ($285) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $287=$block;
   var $288=$1;
   var $289=(($288+52)|0);
   HEAP32[(($289)>>2)]=$287;
   label = 38; break;
  case 37: 
   var $291=$block;
   var $292=(($291+16)|0);
   var $293=HEAP32[(($292)>>2)];
   var $294=$1;
   var $295=(($294+36)|0);
   HEAP32[(($295)>>2)]=$293;
   var $296=$1;
   var $297=(($296+32)|0);
   HEAP32[(($297)>>2)]=$293;
   label = 38; break;
  case 38: 
   var $299=$block;
   var $300=(($299+8)|0);
   HEAP32[(($300)>>2)]=0;
   label = 39; break;
  case 39: 
   var $302=$delta2;
   var $303=$block;
   var $304=(($303+8)|0);
   var $305=HEAP32[(($304)>>2)];
   var $306=((($305)+($302))|0);
   HEAP32[(($304)>>2)]=$306;
   var $307=$block;
   var $308=(($307+4)|0);
   var $309=HEAP32[(($308)>>2)];
   $block=$309;
   var $310=$block;
   var $311=$1;
   var $312=(($311+52)|0);
   var $313=HEAP32[(($312)>>2)];
   var $314=(($310)|(0))==(($313)|(0));
   if ($314) { label = 40; break; } else { label = 41; break; }
  case 40: 
   label = 42; break;
  case 41: 
   label = 39; break;
  case 42: 
   label = 43; break;
  case 43: 
   var $319=$block;
   var $320=(($319+12)|0);
   HEAP32[(($320)>>2)]=0;
   label = 44; break;
  case 44: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvChangeSeqBlock($_reader, $direction) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $reader;
   $1=$_reader;
   $2=$direction;
   var $3=$1;
   var $4=$3;
   $reader=$4;
   var $5=$reader;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6688)|0), ((36880)|0), ((15112)|0), 1158);
   label = 7; break;
  case 3: 
   var $9=$2;
   var $10=(($9)|(0)) > 0;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $12=$reader;
   var $13=(($12+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$reader;
   var $18=(($17+8)|0);
   HEAP32[(($18)>>2)]=$16;
   var $19=$reader;
   var $20=(($19+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+16)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$reader;
   var $25=(($24+12)|0);
   HEAP32[(($25)>>2)]=$23;
   label = 6; break;
  case 5: 
   var $27=$reader;
   var $28=(($27+8)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$reader;
   var $33=(($32+8)|0);
   HEAP32[(($33)>>2)]=$31;
   var $34=$reader;
   var $35=(($34+8)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+16)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$reader;
   var $40=(($39+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=((($43)-(1))|0);
   var $45=$reader;
   var $46=(($45+4)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+28)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(Math.imul($44,$49)|0);
   var $51=(($38+$50)|0);
   var $52=$reader;
   var $53=(($52+12)|0);
   HEAP32[(($53)>>2)]=$51;
   label = 6; break;
  case 6: 
   var $55=$reader;
   var $56=(($55+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+16)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$reader;
   var $61=(($60+16)|0);
   HEAP32[(($61)>>2)]=$59;
   var $62=$reader;
   var $63=(($62+16)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$reader;
   var $66=(($65+8)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+12)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$reader;
   var $71=(($70+4)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72+28)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(Math.imul($69,$74)|0);
   var $76=(($64+$75)|0);
   var $77=$reader;
   var $78=(($77+20)|0);
   HEAP32[(($78)>>2)]=$76;
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetSeqReaderPos($reader) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $elem_size;
   var $index;
   $1=$reader;
   $index=-1;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-27, ((6656)|0), ((36880)|0), ((15112)|0), 1189);
   label = 9; break;
  case 4: 
   var $11=$1;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+28)|0);
   var $15=HEAP32[(($14)>>2)];
   $elem_size=$15;
   var $16=$elem_size;
   var $17=(($16)|(0)) <= 32;
   if ($17) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $19=$elem_size;
   var $20=((($19)-(1))|0);
   var $21=((21112+$20)|0);
   var $22=HEAP8[($21)];
   var $23=(($22 << 24) >> 24);
   $index=$23;
   var $24=(($23)|(0)) >= 0;
   if ($24) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $26=$1;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$1;
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$28;
   var $33=$31;
   var $34=((($32)-($33))|0);
   var $35=$index;
   var $36=$34 >> (($35)|(0));
   $index=$36;
   label = 8; break;
  case 7: 
   var $38=$1;
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$1;
   var $42=(($41+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$40;
   var $45=$43;
   var $46=((($44)-($45))|0);
   var $47=$elem_size;
   var $48=((((($46)|(0)))/((($47)|(0))))&-1);
   $index=$48;
   label = 8; break;
  case 8: 
   var $50=$1;
   var $51=(($50+8)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+8)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$1;
   var $56=(($55+24)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=((($54)-($57))|0);
   var $59=$index;
   var $60=((($59)+($58))|0);
   $index=$60;
   label = 9; break;
  case 9: 
   var $62=$index;
   return $62;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL15icvFreeSeqBlockP5CvSeqi($seq, $in_front_of) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $block;
   var $delta;
   $1=$seq;
   $2=$in_front_of;
   var $3=$1;
   var $4=(($3+52)|0);
   var $5=HEAP32[(($4)>>2)];
   $block=$5;
   var $6=$block;
   var $7=$block;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)|(0))==(($9)|(0));
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   var $13=(($12+32)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$block;
   var $16=(($15+16)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$14;
   var $19=$17;
   var $20=((($18)-($19))|0);
   var $21=$block;
   var $22=(($21+8)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$1;
   var $25=(($24+28)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(Math.imul($23,$26)|0);
   var $28=((($20)+($27))|0);
   var $29=$block;
   var $30=(($29+12)|0);
   HEAP32[(($30)>>2)]=$28;
   var $31=$1;
   var $32=(($31+32)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$block;
   var $35=(($34+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(((-$36))|0);
   var $38=(($33+$37)|0);
   var $39=$block;
   var $40=(($39+16)|0);
   HEAP32[(($40)>>2)]=$38;
   var $41=$1;
   var $42=(($41+52)|0);
   HEAP32[(($42)>>2)]=0;
   var $43=$1;
   var $44=(($43+32)|0);
   HEAP32[(($44)>>2)]=0;
   var $45=$1;
   var $46=(($45+36)|0);
   HEAP32[(($46)>>2)]=0;
   var $47=$1;
   var $48=(($47+24)|0);
   HEAP32[(($48)>>2)]=0;
   label = 11; break;
  case 3: 
   var $50=$2;
   var $51=(($50)|(0))!=0;
   if ($51) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $53=$block;
   var $54=(($53)|0);
   var $55=HEAP32[(($54)>>2)];
   $block=$55;
   var $56=$1;
   var $57=(($56+32)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$1;
   var $60=(($59+36)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$58;
   var $63=$61;
   var $64=((($62)-($63))|0);
   var $65=$block;
   var $66=(($65+12)|0);
   HEAP32[(($66)>>2)]=$64;
   var $67=$block;
   var $68=(($67)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+16)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=$block;
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74+12)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$1;
   var $78=(($77+28)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(Math.imul($76,$79)|0);
   var $81=(($71+$80)|0);
   var $82=$1;
   var $83=(($82+36)|0);
   HEAP32[(($83)>>2)]=$81;
   var $84=$1;
   var $85=(($84+32)|0);
   HEAP32[(($85)>>2)]=$81;
   label = 10; break;
  case 5: 
   var $87=$block;
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   $delta=$89;
   var $90=$delta;
   var $91=$1;
   var $92=(($91+28)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(Math.imul($90,$93)|0);
   var $95=$block;
   var $96=(($95+12)|0);
   HEAP32[(($96)>>2)]=$94;
   var $97=$block;
   var $98=(($97+12)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$block;
   var $101=(($100+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(((-$99))|0);
   var $104=(($102+$103)|0);
   HEAP32[(($101)>>2)]=$104;
   label = 6; break;
  case 6: 
   var $106=$delta;
   var $107=$block;
   var $108=(($107+8)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=((($109)-($106))|0);
   HEAP32[(($108)>>2)]=$110;
   var $111=$block;
   var $112=(($111+4)|0);
   var $113=HEAP32[(($112)>>2)];
   $block=$113;
   var $114=$block;
   var $115=$1;
   var $116=(($115+52)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($114)|(0))==(($117)|(0));
   if ($118) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 9; break;
  case 8: 
   label = 6; break;
  case 9: 
   var $122=$block;
   var $123=(($122+4)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=$1;
   var $126=(($125+52)|0);
   HEAP32[(($126)>>2)]=$124;
   label = 10; break;
  case 10: 
   var $128=$block;
   var $129=(($128+4)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=$block;
   var $132=(($131)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+4)|0);
   HEAP32[(($134)>>2)]=$130;
   var $135=$block;
   var $136=(($135)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=$block;
   var $139=(($138+4)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140)|0);
   HEAP32[(($141)>>2)]=$137;
   label = 11; break;
  case 11: 
   var $143=$1;
   var $144=(($143+48)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=$block;
   var $147=(($146+4)|0);
   HEAP32[(($147)>>2)]=$145;
   var $148=$block;
   var $149=$1;
   var $150=(($149+48)|0);
   HEAP32[(($150)>>2)]=$148;
   label = 12; break;
  case 12: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSeqPush($seq, $element) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $elem_size;
   var $_icv_memcpy_i_;
   var $_icv_memcpy_len_;
   var $_icv_memcpy_dst_;
   var $_icv_memcpy_src_;
   $1=$seq;
   $2=$element;
   $ptr=0;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6592)|0), ((36880)|0), ((15112)|0), 1317);
   label = 21; break;
  case 3: 
   var $7=$1;
   var $8=(($7+28)|0);
   var $9=HEAP32[(($8)>>2)];
   $elem_size=$9;
   var $10=$1;
   var $11=(($10+36)|0);
   var $12=HEAP32[(($11)>>2)];
   $ptr=$12;
   var $13=$ptr;
   var $14=$1;
   var $15=(($14+32)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($13)>>>(0)) >= (($16)>>>(0));
   if ($17) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $19=$1;
   __ZL10icvGrowSeqP5CvSeqi($19, 0);
   var $20=_cvGetErrStatus();
   var $21=(($20)|(0)) < 0;
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((6592)|0), ((11720)|0), ((15112)|0), 1324);
   label = 21; break;
  case 6: 
   var $24=$1;
   var $25=(($24+36)|0);
   var $26=HEAP32[(($25)>>2)];
   $ptr=$26;
   label = 7; break;
  case 7: 
   var $28=$2;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 8; break; } else { label = 20; break; }
  case 8: 
   var $31=$elem_size;
   $_icv_memcpy_len_=$31;
   var $32=$ptr;
   $_icv_memcpy_dst_=$32;
   var $33=$2;
   $_icv_memcpy_src_=$33;
   var $34=$_icv_memcpy_len_;
   var $35=$34 & 3;
   var $36=(($35)|(0))==0;
   if ($36) { label = 9; break; } else { label = 14; break; }
  case 9: 
   $_icv_memcpy_i_=0;
   label = 10; break;
  case 10: 
   var $39=$_icv_memcpy_i_;
   var $40=$_icv_memcpy_len_;
   var $41=(($39)>>>(0)) < (($40)>>>(0));
   if ($41) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $43=$_icv_memcpy_src_;
   var $44=$_icv_memcpy_i_;
   var $45=(($43+$44)|0);
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=$_icv_memcpy_dst_;
   var $49=$_icv_memcpy_i_;
   var $50=(($48+$49)|0);
   var $51=$50;
   HEAP32[(($51)>>2)]=$47;
   label = 12; break;
  case 12: 
   var $53=$_icv_memcpy_i_;
   var $54=((($53)+(4))|0);
   $_icv_memcpy_i_=$54;
   label = 10; break;
  case 13: 
   label = 19; break;
  case 14: 
   $_icv_memcpy_i_=0;
   label = 15; break;
  case 15: 
   var $58=$_icv_memcpy_i_;
   var $59=$_icv_memcpy_len_;
   var $60=(($58)>>>(0)) < (($59)>>>(0));
   if ($60) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $62=$_icv_memcpy_i_;
   var $63=$_icv_memcpy_src_;
   var $64=(($63+$62)|0);
   var $65=HEAP8[($64)];
   var $66=$_icv_memcpy_i_;
   var $67=$_icv_memcpy_dst_;
   var $68=(($67+$66)|0);
   HEAP8[($68)]=$65;
   label = 17; break;
  case 17: 
   var $70=$_icv_memcpy_i_;
   var $71=((($70)+(1))|0);
   $_icv_memcpy_i_=$71;
   label = 15; break;
  case 18: 
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $75=$1;
   var $76=(($75+52)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+12)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=((($81)+(1))|0);
   HEAP32[(($80)>>2)]=$82;
   var $83=$1;
   var $84=(($83+24)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=((($85)+(1))|0);
   HEAP32[(($84)>>2)]=$86;
   var $87=$ptr;
   var $88=$elem_size;
   var $89=(($87+$88)|0);
   var $90=$1;
   var $91=(($90+36)|0);
   HEAP32[(($91)>>2)]=$89;
   label = 21; break;
  case 21: 
   var $93=$ptr;
   return $93;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSeqPushMulti($seq, $_elements, $count, $front) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $elements;
   var $elem_size;
   var $delta;
   var $block;
   var $delta1;
   $1=$seq;
   $2=$_elements;
   $3=$count;
   $4=$front;
   var $5=$2;
   $elements=$5;
   var $6=$1;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6432)|0), ((10832)|0), ((15112)|0), 1676);
   label = 33; break;
  case 3: 
   var $10=$3;
   var $11=(($10)|(0)) < 0;
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-201, ((6432)|0), ((10744)|0), ((15112)|0), 1678);
   label = 33; break;
  case 5: 
   var $14=$1;
   var $15=(($14+28)|0);
   var $16=HEAP32[(($15)>>2)];
   $elem_size=$16;
   var $17=$4;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 18; break; } else { label = 6; break; }
  case 6: 
   label = 7; break;
  case 7: 
   var $21=$3;
   var $22=(($21)|(0)) > 0;
   if ($22) { label = 8; break; } else { label = 17; break; }
  case 8: 
   var $24=$1;
   var $25=(($24+32)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$1;
   var $28=(($27+36)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$26;
   var $31=$29;
   var $32=((($30)-($31))|0);
   var $33=$elem_size;
   var $34=((((($32)|(0)))/((($33)|(0))))&-1);
   $delta=$34;
   var $35=$delta;
   var $36=$3;
   var $37=(($35)|(0)) > (($36)|(0));
   var $38=$3;
   var $39=$delta;
   var $40=$37 ? $38 : $39;
   $delta=$40;
   var $41=$delta;
   var $42=(($41)|(0)) > 0;
   if ($42) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $44=$delta;
   var $45=$1;
   var $46=(($45+52)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+12)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=((($51)+($44))|0);
   HEAP32[(($50)>>2)]=$52;
   var $53=$delta;
   var $54=$1;
   var $55=(($54+24)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)+($53))|0);
   HEAP32[(($55)>>2)]=$57;
   var $58=$delta;
   var $59=$3;
   var $60=((($59)-($58))|0);
   $3=$60;
   var $61=$elem_size;
   var $62=$delta;
   var $63=(Math.imul($62,$61)|0);
   $delta=$63;
   var $64=$elements;
   var $65=(($64)|(0))!=0;
   if ($65) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $67=$1;
   var $68=(($67+36)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$elements;
   var $71=$delta;
   assert($71 % 1 === 0);(_memcpy($69, $70, $71)|0);
   var $72=$delta;
   var $73=$elements;
   var $74=(($73+$72)|0);
   $elements=$74;
   label = 11; break;
  case 11: 
   var $76=$delta;
   var $77=$1;
   var $78=(($77+36)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+$76)|0);
   HEAP32[(($78)>>2)]=$80;
   label = 12; break;
  case 12: 
   var $82=$3;
   var $83=(($82)|(0)) > 0;
   if ($83) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $85=$1;
   __ZL10icvGrowSeqP5CvSeqi($85, 0);
   var $86=_cvGetErrStatus();
   var $87=(($86)|(0)) < 0;
   if ($87) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _cvError(-1, ((6432)|0), ((11720)|0), ((15112)|0), 1704);
   label = 33; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 7; break;
  case 17: 
   label = 32; break;
  case 18: 
   var $93=$1;
   var $94=(($93+52)|0);
   var $95=HEAP32[(($94)>>2)];
   $block=$95;
   label = 19; break;
  case 19: 
   var $97=$3;
   var $98=(($97)|(0)) > 0;
   if ($98) { label = 20; break; } else { label = 31; break; }
  case 20: 
   var $100=$block;
   var $101=(($100)|(0))!=0;
   if ($101) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $103=$block;
   var $104=(($103+8)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105)|(0))==0;
   if ($106) { label = 22; break; } else { label = 25; break; }
  case 22: 
   var $108=$1;
   __ZL10icvGrowSeqP5CvSeqi($108, 1);
   var $109=_cvGetErrStatus();
   var $110=(($109)|(0)) < 0;
   if ($110) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-1, ((6432)|0), ((11720)|0), ((15112)|0), 1717);
   label = 33; break;
  case 24: 
   var $113=$1;
   var $114=(($113+52)|0);
   var $115=HEAP32[(($114)>>2)];
   $block=$115;
   label = 25; break;
  case 25: 
   var $117=$block;
   var $118=(($117+8)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=$3;
   var $121=(($119)|(0)) > (($120)|(0));
   if ($121) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $123=$3;
   var $129 = $123;label = 28; break;
  case 27: 
   var $125=$block;
   var $126=(($125+8)|0);
   var $127=HEAP32[(($126)>>2)];
   var $129 = $127;label = 28; break;
  case 28: 
   var $129;
   $delta1=$129;
   var $130=$delta1;
   var $131=$3;
   var $132=((($131)-($130))|0);
   $3=$132;
   var $133=$delta1;
   var $134=$block;
   var $135=(($134+8)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=((($136)-($133))|0);
   HEAP32[(($135)>>2)]=$137;
   var $138=$delta1;
   var $139=$block;
   var $140=(($139+12)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=((($141)+($138))|0);
   HEAP32[(($140)>>2)]=$142;
   var $143=$delta1;
   var $144=$1;
   var $145=(($144+24)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=((($146)+($143))|0);
   HEAP32[(($145)>>2)]=$147;
   var $148=$elem_size;
   var $149=$delta1;
   var $150=(Math.imul($149,$148)|0);
   $delta1=$150;
   var $151=$delta1;
   var $152=$block;
   var $153=(($152+16)|0);
   var $154=HEAP32[(($153)>>2)];
   var $155=(((-$151))|0);
   var $156=(($154+$155)|0);
   HEAP32[(($153)>>2)]=$156;
   var $157=$elements;
   var $158=(($157)|(0))!=0;
   if ($158) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $160=$block;
   var $161=(($160+16)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=$elements;
   var $164=$3;
   var $165=$elem_size;
   var $166=(Math.imul($164,$165)|0);
   var $167=(($163+$166)|0);
   var $168=$delta1;
   assert($168 % 1 === 0);(_memcpy($162, $167, $168)|0);
   label = 30; break;
  case 30: 
   label = 19; break;
  case 31: 
   label = 32; break;
  case 32: 
   label = 33; break;
  case 33: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSeqPopMulti($seq, $_elements, $count, $front) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $elements;
   var $delta;
   var $delta1;
   $1=$seq;
   $2=$_elements;
   $3=$count;
   $4=$front;
   var $5=$2;
   $elements=$5;
   var $6=$1;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6352)|0), ((10832)|0), ((15112)|0), 1751);
   label = 28; break;
  case 3: 
   var $10=$3;
   var $11=(($10)|(0)) < 0;
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-201, ((6352)|0), ((10744)|0), ((15112)|0), 1753);
   label = 28; break;
  case 5: 
   var $14=$3;
   var $15=$1;
   var $16=(($15+24)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($14)|(0)) > (($17)|(0));
   if ($18) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $20=$1;
   var $21=(($20+24)|0);
   var $22=HEAP32[(($21)>>2)];
   var $26 = $22;label = 8; break;
  case 7: 
   var $24=$3;
   var $26 = $24;label = 8; break;
  case 8: 
   var $26;
   $3=$26;
   var $27=$4;
   var $28=(($27)|(0))!=0;
   if ($28) { label = 19; break; } else { label = 9; break; }
  case 9: 
   var $30=$elements;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $33=$3;
   var $34=$1;
   var $35=(($34+28)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(Math.imul($33,$36)|0);
   var $38=$elements;
   var $39=(($38+$37)|0);
   $elements=$39;
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $42=$3;
   var $43=(($42)|(0)) > 0;
   if ($43) { label = 13; break; } else { label = 18; break; }
  case 13: 
   var $45=$1;
   var $46=(($45+52)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+12)|0);
   var $51=HEAP32[(($50)>>2)];
   $delta=$51;
   var $52=$delta;
   var $53=$3;
   var $54=(($52)|(0)) > (($53)|(0));
   var $55=$3;
   var $56=$delta;
   var $57=$54 ? $55 : $56;
   $delta=$57;
   var $58=$delta;
   var $59=$1;
   var $60=(($59+52)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+12)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=((($65)-($58))|0);
   HEAP32[(($64)>>2)]=$66;
   var $67=$delta;
   var $68=$1;
   var $69=(($68+24)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)-($67))|0);
   HEAP32[(($69)>>2)]=$71;
   var $72=$delta;
   var $73=$3;
   var $74=((($73)-($72))|0);
   $3=$74;
   var $75=$1;
   var $76=(($75+28)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=$delta;
   var $79=(Math.imul($78,$77)|0);
   $delta=$79;
   var $80=$delta;
   var $81=$1;
   var $82=(($81+36)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(((-$80))|0);
   var $85=(($83+$84)|0);
   HEAP32[(($82)>>2)]=$85;
   var $86=$elements;
   var $87=(($86)|(0))!=0;
   if ($87) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $89=$delta;
   var $90=$elements;
   var $91=(((-$89))|0);
   var $92=(($90+$91)|0);
   $elements=$92;
   var $93=$elements;
   var $94=$1;
   var $95=(($94+36)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$delta;
   assert($97 % 1 === 0);(_memcpy($93, $96, $97)|0);
   label = 15; break;
  case 15: 
   var $99=$1;
   var $100=(($99+52)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+12)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105)|(0))==0;
   if ($106) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $108=$1;
   __ZL15icvFreeSeqBlockP5CvSeqi($108, 0);
   label = 17; break;
  case 17: 
   label = 12; break;
  case 18: 
   label = 27; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $113=$3;
   var $114=(($113)|(0)) > 0;
   if ($114) { label = 21; break; } else { label = 26; break; }
  case 21: 
   var $116=$1;
   var $117=(($116+52)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=(($118+12)|0);
   var $120=HEAP32[(($119)>>2)];
   $delta1=$120;
   var $121=$delta1;
   var $122=$3;
   var $123=(($121)|(0)) > (($122)|(0));
   var $124=$3;
   var $125=$delta1;
   var $126=$123 ? $124 : $125;
   $delta1=$126;
   var $127=$delta1;
   var $128=$1;
   var $129=(($128+52)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($130+12)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=((($132)-($127))|0);
   HEAP32[(($131)>>2)]=$133;
   var $134=$delta1;
   var $135=$1;
   var $136=(($135+24)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=((($137)-($134))|0);
   HEAP32[(($136)>>2)]=$138;
   var $139=$delta1;
   var $140=$3;
   var $141=((($140)-($139))|0);
   $3=$141;
   var $142=$delta1;
   var $143=$1;
   var $144=(($143+52)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($145+8)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=((($147)+($142))|0);
   HEAP32[(($146)>>2)]=$148;
   var $149=$1;
   var $150=(($149+28)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=$delta1;
   var $153=(Math.imul($152,$151)|0);
   $delta1=$153;
   var $154=$elements;
   var $155=(($154)|(0))!=0;
   if ($155) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $157=$elements;
   var $158=$1;
   var $159=(($158+52)|0);
   var $160=HEAP32[(($159)>>2)];
   var $161=(($160+16)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=$delta1;
   assert($163 % 1 === 0);(_memcpy($157, $162, $163)|0);
   var $164=$delta1;
   var $165=$elements;
   var $166=(($165+$164)|0);
   $elements=$166;
   label = 23; break;
  case 23: 
   var $168=$delta1;
   var $169=$1;
   var $170=(($169+52)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171+16)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($173+$168)|0);
   HEAP32[(($172)>>2)]=$174;
   var $175=$1;
   var $176=(($175+52)|0);
   var $177=HEAP32[(($176)>>2)];
   var $178=(($177+12)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179)|(0))==0;
   if ($180) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $182=$1;
   __ZL15icvFreeSeqBlockP5CvSeqi($182, 1);
   label = 25; break;
  case 25: 
   label = 20; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvClearSeq($seq) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$seq;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6336)|0), ((36880)|0), ((15112)|0), 1825);
   label = 4; break;
  case 3: 
   var $6=$1;
   var $7=$1;
   var $8=(($7+24)|0);
   var $9=HEAP32[(($8)>>2)];
   _cvSeqPopMulti($6, 0, $9, 0);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSeqSlice($seq, $slice, $storage, $copy_data) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $slice; $slice = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($slice)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($slice)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $subseq;
   var $elem_size;
   var $count;
   var $length;
   var $reader=sp;
   var $block;
   var $first_block;
   var $last_block;
   var $4=(sp)+(32);
   var $bl;
   $1=$seq;
   $2=$storage;
   $3=$copy_data;
   $subseq=0;
   $first_block=0;
   $last_block=0;
   var $5=$1;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=(($8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & -65536;
   var $12=(($11)|(0))==1117323264;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-5, ((6280)|0), ((10344)|0), ((15112)|0), 1846);
   label = 31; break;
  case 4: 
   var $15=$2;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 8; break; } else { label = 5; break; }
  case 5: 
   var $18=$1;
   var $19=(($18+44)|0);
   var $20=HEAP32[(($19)>>2)];
   $2=$20;
   var $21=$2;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 7; break; } else { label = 6; break; }
  case 6: 
   _cvError(-27, ((6280)|0), ((7560)|0), ((15112)|0), 1852);
   label = 31; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $26=$1;
   var $27=(($26+28)|0);
   var $28=HEAP32[(($27)>>2)];
   $elem_size=$28;
   var $29=$4;
   var $30=$slice;
   assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
   var $31=$1;
   var $32=_cvSliceLength($4, $31);
   $length=$32;
   var $33=(($slice)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0)) < 0;
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $37=$1;
   var $38=(($37+24)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($slice)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=((($41)+($39))|0);
   HEAP32[(($40)>>2)]=$42;
   label = 13; break;
  case 10: 
   var $44=(($slice)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$1;
   var $47=(($46+24)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($45)|(0)) >= (($48)|(0));
   if ($49) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $51=$1;
   var $52=(($51+24)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($slice)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=((($55)-($53))|0);
   HEAP32[(($54)>>2)]=$56;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $59=$length;
   var $60=$1;
   var $61=(($60+24)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($59)>>>(0)) > (($62)>>>(0));
   if ($63) { label = 16; break; } else { label = 14; break; }
  case 14: 
   var $65=(($slice)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$1;
   var $68=(($67+24)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($66)>>>(0)) >= (($69)>>>(0));
   if ($70) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $72=$length;
   var $73=(($72)|(0))!=0;
   if ($73) { label = 16; break; } else { label = 17; break; }
  case 16: 
   _cvError(-211, ((6280)|0), ((10152)|0), ((15112)|0), 1863);
   label = 31; break;
  case 17: 
   var $76=$1;
   var $77=(($76)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$1;
   var $80=(($79+4)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$elem_size;
   var $83=$2;
   var $84=_cvCreateSeq($78, $81, $82, $83);
   $subseq=$84;
   var $85=_cvGetErrStatus();
   var $86=(($85)|(0)) < 0;
   if ($86) { label = 18; break; } else { label = 19; break; }
  case 18: 
   _cvError(-1, ((6280)|0), ((11720)|0), ((15112)|0), 1865);
   label = 31; break;
  case 19: 
   var $89=$length;
   var $90=(($89)|(0)) > 0;
   if ($90) { label = 20; break; } else { label = 30; break; }
  case 20: 
   var $92=$1;
   _cvStartReadSeq($92, $reader, 0);
   var $93=(($slice)|0);
   var $94=HEAP32[(($93)>>2)];
   _cvSetSeqReaderPos($reader, $94, 0);
   var $95=(($reader+20)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($reader+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$96;
   var $100=$98;
   var $101=((($99)-($100))|0);
   var $102=$elem_size;
   var $103=((((($101)|(0)))/((($102)|(0))))&-1);
   $count=$103;
   label = 21; break;
  case 21: 
   var $105=$count;
   var $106=$length;
   var $107=(($105)|(0)) > (($106)|(0));
   var $108=$length;
   var $109=$count;
   var $110=$107 ? $108 : $109;
   $bl=$110;
   var $111=$3;
   var $112=(($111)|(0))!=0;
   if ($112) { label = 26; break; } else { label = 22; break; }
  case 22: 
   var $114=$2;
   var $115=_cvMemStorageAlloc($114, 20);
   var $116=$115;
   $block=$116;
   var $117=$first_block;
   var $118=(($117)|(0))!=0;
   if ($118) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $120=$block;
   var $121=$block;
   var $122=(($121+4)|0);
   HEAP32[(($122)>>2)]=$120;
   var $123=$block;
   var $124=(($123)|0);
   HEAP32[(($124)>>2)]=$120;
   var $125=$subseq;
   var $126=(($125+52)|0);
   HEAP32[(($126)>>2)]=$120;
   $first_block=$120;
   var $127=$block;
   var $128=(($127+8)|0);
   HEAP32[(($128)>>2)]=0;
   label = 25; break;
  case 24: 
   var $130=$last_block;
   var $131=$block;
   var $132=(($131)|0);
   HEAP32[(($132)>>2)]=$130;
   var $133=$first_block;
   var $134=$block;
   var $135=(($134+4)|0);
   HEAP32[(($135)>>2)]=$133;
   var $136=$block;
   var $137=$first_block;
   var $138=(($137)|0);
   HEAP32[(($138)>>2)]=$136;
   var $139=$last_block;
   var $140=(($139+4)|0);
   HEAP32[(($140)>>2)]=$136;
   var $141=$last_block;
   var $142=(($141+8)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=$last_block;
   var $145=(($144+12)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=((($143)+($146))|0);
   var $148=$block;
   var $149=(($148+8)|0);
   HEAP32[(($149)>>2)]=$147;
   label = 25; break;
  case 25: 
   var $151=$block;
   $last_block=$151;
   var $152=(($reader+12)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$block;
   var $155=(($154+16)|0);
   HEAP32[(($155)>>2)]=$153;
   var $156=$bl;
   var $157=$block;
   var $158=(($157+12)|0);
   HEAP32[(($158)>>2)]=$156;
   var $159=$bl;
   var $160=$subseq;
   var $161=(($160+24)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=((($162)+($159))|0);
   HEAP32[(($161)>>2)]=$163;
   label = 27; break;
  case 26: 
   var $165=$subseq;
   var $166=(($reader+12)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=$bl;
   _cvSeqPushMulti($165, $167, $168, 0);
   label = 27; break;
  case 27: 
   var $170=$bl;
   var $171=$length;
   var $172=((($171)-($170))|0);
   $length=$172;
   var $173=(($reader+8)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=(($174+4)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=(($reader+8)|0);
   HEAP32[(($177)>>2)]=$176;
   var $178=(($reader+8)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+16)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($reader+12)|0);
   HEAP32[(($182)>>2)]=$181;
   var $183=(($reader+8)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($184+12)|0);
   var $186=HEAP32[(($185)>>2)];
   $count=$186;
   label = 28; break;
  case 28: 
   var $188=$length;
   var $189=(($188)|(0)) > 0;
   if ($189) { label = 21; break; } else { label = 29; break; }
  case 29: 
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $193=$subseq;
   STACKTOP = sp;
   return $193;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSeqSort($seq, $cmp_func, $aux) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1856)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $elem_size;
   var $isort_thresh;
   var $left=sp;
   var $right=(sp)+(32);
   var $sp;
   var $stack=(sp)+(64);
   var $i;
   var $n;
   var $m;
   var $ptr=(sp)+(1600);
   var $ptr2=(sp)+(1632);
   var $cur;
   var $k;
   var $t0;
   var $t1;
   var $left0=(sp)+(1664);
   var $left1=(sp)+(1696);
   var $right0=(sp)+(1728);
   var $right1=(sp)+(1760);
   var $tmp0=(sp)+(1792);
   var $tmp1=(sp)+(1824);
   var $m1;
   var $m2;
   var $m3;
   var $pivot;
   var $swap_cnt;
   var $l;
   var $l0;
   var $l1;
   var $r;
   var $r0;
   var $r1;
   var $d;
   var $p1;
   var $p2;
   var $p3;
   var $k1;
   var $t02;
   var $t13;
   var $k4;
   var $t05;
   var $t16;
   var $k7;
   var $t08;
   var $t19;
   var $k10;
   var $t011;
   var $t112;
   var $k13;
   var $t014;
   var $t115;
   var $k16;
   var $t017;
   var $t118;
   var $k19;
   var $t020;
   var $t121;
   $1=$seq;
   $2=$cmp_func;
   $3=$aux;
   $isort_thresh=7;
   $sp=0;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 & -65536;
   var $11=(($10)|(0))==1117323264;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=$1;
   var $14=(($13)|(0))!=0;
   var $15=$14 ^ 1;
   var $16=$15 ? -27 : -5;
   _cvError($16, ((6144)|0), ((9424)|0), ((15112)|0), 2173);
   label = 173; break;
  case 4: 
   var $18=$2;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-27, ((6144)|0), ((9400)|0), ((15112)|0), 2176);
   label = 173; break;
  case 6: 
   var $22=$1;
   var $23=(($22+24)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0)) <= 1;
   if ($25) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 173; break;
  case 8: 
   var $28=$1;
   var $29=(($28+28)|0);
   var $30=HEAP32[(($29)>>2)];
   $elem_size=$30;
   var $31=$elem_size;
   var $32=$isort_thresh;
   var $33=(Math.imul($32,$31)|0);
   $isort_thresh=$33;
   var $34=$1;
   _cvStartReadSeq($34, $left, 0);
   var $35=$right;
   var $36=$left;
   assert(32 % 1 === 0);(_memcpy($35, $36, 32)|0);
   var $37=(($left+8)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($stack)|0);
   var $40=(($39)|0);
   var $41=(($40)|0);
   HEAP32[(($41)>>2)]=$38;
   var $42=(($left+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($stack)|0);
   var $45=(($44)|0);
   var $46=(($45+4)|0);
   HEAP32[(($46)>>2)]=$43;
   var $47=(($left+16)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($stack)|0);
   var $50=(($49)|0);
   var $51=(($50+8)|0);
   HEAP32[(($51)>>2)]=$48;
   var $52=(($left+20)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($stack)|0);
   var $55=(($54)|0);
   var $56=(($55+12)|0);
   HEAP32[(($56)>>2)]=$53;
   var $57=$elem_size;
   var $58=(($right+12)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(((-$57))|0);
   var $61=(($59+$60)|0);
   HEAP32[(($58)>>2)]=$61;
   var $62=(($right+16)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($61)>>>(0)) < (($63)>>>(0));
   if ($64) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $66=$right;
   _cvChangeSeqBlock($66, -1);
   label = 10; break;
  case 10: 
   var $68=(($right+8)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($stack)|0);
   var $71=(($70+16)|0);
   var $72=(($71)|0);
   HEAP32[(($72)>>2)]=$69;
   var $73=(($right+12)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($stack)|0);
   var $76=(($75+16)|0);
   var $77=(($76+4)|0);
   HEAP32[(($77)>>2)]=$74;
   var $78=(($right+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($stack)|0);
   var $81=(($80+16)|0);
   var $82=(($81+8)|0);
   HEAP32[(($82)>>2)]=$79;
   var $83=(($right+20)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($stack)|0);
   var $86=(($85+16)|0);
   var $87=(($86+12)|0);
   HEAP32[(($87)>>2)]=$84;
   label = 11; break;
  case 11: 
   var $89=$sp;
   var $90=(($89)|(0)) >= 0;
   if ($90) { label = 12; break; } else { label = 172; break; }
  case 12: 
   var $92=$sp;
   var $93=(($stack+($92<<5))|0);
   var $94=(($93)|0);
   var $95=(($94)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($left+8)|0);
   HEAP32[(($97)>>2)]=$96;
   var $98=$sp;
   var $99=(($stack+($98<<5))|0);
   var $100=(($99)|0);
   var $101=(($100+4)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($left+12)|0);
   HEAP32[(($103)>>2)]=$102;
   var $104=$sp;
   var $105=(($stack+($104<<5))|0);
   var $106=(($105)|0);
   var $107=(($106+8)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($left+16)|0);
   HEAP32[(($109)>>2)]=$108;
   var $110=$sp;
   var $111=(($stack+($110<<5))|0);
   var $112=(($111)|0);
   var $113=(($112+12)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($left+20)|0);
   HEAP32[(($115)>>2)]=$114;
   var $116=$sp;
   var $117=(($stack+($116<<5))|0);
   var $118=(($117+16)|0);
   var $119=(($118)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($right+8)|0);
   HEAP32[(($121)>>2)]=$120;
   var $122=$sp;
   var $123=(($stack+($122<<5))|0);
   var $124=(($123+16)|0);
   var $125=(($124+4)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($right+12)|0);
   HEAP32[(($127)>>2)]=$126;
   var $128=$sp;
   var $129=(($stack+($128<<5))|0);
   var $130=(($129+16)|0);
   var $131=(($130+8)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($right+16)|0);
   HEAP32[(($133)>>2)]=$132;
   var $134=$sp;
   var $135=(($stack+($134<<5))|0);
   var $136=(($135+16)|0);
   var $137=(($136+12)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($right+20)|0);
   HEAP32[(($139)>>2)]=$138;
   var $140=$sp;
   var $141=((($140)-(1))|0);
   $sp=$141;
   label = 13; break;
  case 13: 
   var $143=(($left+8)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(($right+8)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=(($144)|(0))==(($146)|(0));
   if ($147) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $149=(($right+12)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($left+12)|0);
   var $152=HEAP32[(($151)>>2)];
   var $153=$150;
   var $154=$152;
   var $155=((($153)-($154))|0);
   var $156=$elem_size;
   var $157=((($155)+($156))|0);
   $n=$157;
   label = 16; break;
  case 15: 
   var $159=_cvGetSeqReaderPos($right);
   $n=$159;
   var $160=$n;
   var $161=_cvGetSeqReaderPos($left);
   var $162=((($160)-($161))|0);
   var $163=((($162)+(1))|0);
   var $164=$elem_size;
   var $165=(Math.imul($163,$164)|0);
   $n=$165;
   label = 16; break;
  case 16: 
   var $167=$n;
   var $168=$isort_thresh;
   var $169=(($167)|(0)) <= (($168)|(0));
   if ($169) { label = 17; break; } else { label = 41; break; }
  case 17: 
   label = 18; break;
  case 18: 
   var $172=$ptr2;
   var $173=$left;
   assert(32 % 1 === 0);(_memcpy($172, $173, 32)|0);
   var $174=$ptr;
   var $175=$ptr2;
   assert(32 % 1 === 0);(_memcpy($174, $175, 32)|0);
   var $176=$elem_size;
   var $177=(($ptr+12)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=(($178+$176)|0);
   HEAP32[(($177)>>2)]=$179;
   var $180=(($ptr+20)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($179)>>>(0)) >= (($181)>>>(0));
   if ($182) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $184=$ptr;
   _cvChangeSeqBlock($184, 1);
   label = 20; break;
  case 20: 
   var $186=$elem_size;
   var $187=(($right+12)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=(($188+$186)|0);
   HEAP32[(($187)>>2)]=$189;
   var $190=(($right+20)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($189)>>>(0)) >= (($191)>>>(0));
   if ($192) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $194=$right;
   _cvChangeSeqBlock($194, 1);
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $197=(($ptr+12)|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=(($right+12)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($198)|(0))!=(($200)|(0));
   if ($201) { label = 24; break; } else { label = 40; break; }
  case 24: 
   var $203=(($ptr+12)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($ptr2+12)|0);
   HEAP32[(($205)>>2)]=$204;
   var $206=(($ptr2+8)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=(($ptr+8)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=(($207)|(0))!=(($209)|(0));
   if ($210) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $212=(($ptr+8)|0);
   var $213=HEAP32[(($212)>>2)];
   var $214=(($ptr2+8)|0);
   HEAP32[(($214)>>2)]=$213;
   var $215=(($ptr+16)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($ptr2+16)|0);
   HEAP32[(($217)>>2)]=$216;
   var $218=(($ptr+20)|0);
   var $219=HEAP32[(($218)>>2)];
   var $220=(($ptr2+20)|0);
   HEAP32[(($220)>>2)]=$219;
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $223=(($ptr2+12)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=(($left+12)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=(($224)|(0))!=(($226)|(0));
   if ($227) { label = 28; break; } else { label = 37; break; }
  case 28: 
   var $229=(($ptr2+12)|0);
   var $230=HEAP32[(($229)>>2)];
   $cur=$230;
   var $231=$elem_size;
   var $232=(($ptr2+12)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=(((-$231))|0);
   var $235=(($233+$234)|0);
   HEAP32[(($232)>>2)]=$235;
   var $236=(($ptr2+16)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=(($235)>>>(0)) < (($237)>>>(0));
   if ($238) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $240=$ptr2;
   _cvChangeSeqBlock($240, -1);
   label = 30; break;
  case 30: 
   var $242=$2;
   var $243=(($ptr2+12)|0);
   var $244=HEAP32[(($243)>>2)];
   var $245=$cur;
   var $246=$3;
   var $247=FUNCTION_TABLE[$242]($244, $245, $246);
   var $248=(($247)|(0)) <= 0;
   if ($248) { label = 31; break; } else { label = 32; break; }
  case 31: 
   label = 37; break;
  case 32: 
   $k=0;
   label = 33; break;
  case 33: 
   var $252=$k;
   var $253=$elem_size;
   var $254=(($252)|(0)) < (($253)|(0));
   if ($254) { label = 34; break; } else { label = 36; break; }
  case 34: 
   var $256=$k;
   var $257=(($ptr2+12)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=(($258+$256)|0);
   var $260=HEAP8[($259)];
   $t0=$260;
   var $261=$k;
   var $262=$cur;
   var $263=(($262+$261)|0);
   var $264=HEAP8[($263)];
   $t1=$264;
   var $265=$t1;
   var $266=$k;
   var $267=(($ptr2+12)|0);
   var $268=HEAP32[(($267)>>2)];
   var $269=(($268+$266)|0);
   HEAP8[($269)]=$265;
   var $270=$t0;
   var $271=$k;
   var $272=$cur;
   var $273=(($272+$271)|0);
   HEAP8[($273)]=$270;
   label = 35; break;
  case 35: 
   var $275=$k;
   var $276=((($275)+(1))|0);
   $k=$276;
   label = 33; break;
  case 36: 
   label = 27; break;
  case 37: 
   var $279=$elem_size;
   var $280=(($ptr+12)|0);
   var $281=HEAP32[(($280)>>2)];
   var $282=(($281+$279)|0);
   HEAP32[(($280)>>2)]=$282;
   var $283=(($ptr+20)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($282)>>>(0)) >= (($284)>>>(0));
   if ($285) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $287=$ptr;
   _cvChangeSeqBlock($287, 1);
   label = 39; break;
  case 39: 
   label = 23; break;
  case 40: 
   label = 171; break;
  case 41: 
   $swap_cnt=0;
   var $291=$tmp0;
   var $292=$left;
   assert(32 % 1 === 0);(_memcpy($291, $292, 32)|0);
   var $293=$left0;
   var $294=$tmp0;
   assert(32 % 1 === 0);(_memcpy($293, $294, 32)|0);
   var $295=$right1;
   var $296=$right;
   assert(32 % 1 === 0);(_memcpy($295, $296, 32)|0);
   var $297=$right0;
   var $298=$right1;
   assert(32 % 1 === 0);(_memcpy($297, $298, 32)|0);
   var $299=$elem_size;
   var $300=$n;
   var $301=((((($300)|(0)))/((($299)|(0))))&-1);
   $n=$301;
   var $302=$n;
   var $303=(($302)|(0)) > 40;
   if ($303) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $305=$n;
   var $306=((((($305)|(0)))/(8))&-1);
   $d=$306;
   var $307=(($tmp0+12)|0);
   var $308=HEAP32[(($307)>>2)];
   $p1=$308;
   var $309=$d;
   _cvSetSeqReaderPos($tmp0, $309, 1);
   var $310=(($tmp0+12)|0);
   var $311=HEAP32[(($310)>>2)];
   $p2=$311;
   var $312=$d;
   _cvSetSeqReaderPos($tmp0, $312, 1);
   var $313=(($tmp0+12)|0);
   var $314=HEAP32[(($313)>>2)];
   $p3=$314;
   var $315=$p1;
   var $316=$p2;
   var $317=$p3;
   var $318=$2;
   var $319=$3;
   var $320=__Z7icvMed3PcS_S_PFiPKvS1_PvES2_($315, $316, $317, $318, $319);
   $m1=$320;
   var $321=$n;
   var $322=((((($321)|(0)))/(2))&-1);
   var $323=$d;
   var $324=((($323)*(3))&-1);
   var $325=((($322)-($324))|0);
   _cvSetSeqReaderPos($tmp0, $325, 1);
   var $326=(($tmp0+12)|0);
   var $327=HEAP32[(($326)>>2)];
   $p1=$327;
   var $328=$d;
   _cvSetSeqReaderPos($tmp0, $328, 1);
   var $329=(($tmp0+12)|0);
   var $330=HEAP32[(($329)>>2)];
   $p2=$330;
   var $331=$d;
   _cvSetSeqReaderPos($tmp0, $331, 1);
   var $332=(($tmp0+12)|0);
   var $333=HEAP32[(($332)>>2)];
   $p3=$333;
   var $334=$p1;
   var $335=$p2;
   var $336=$p3;
   var $337=$2;
   var $338=$3;
   var $339=__Z7icvMed3PcS_S_PFiPKvS1_PvES2_($334, $335, $336, $337, $338);
   $m2=$339;
   var $340=$n;
   var $341=((($340)-(1))|0);
   var $342=$d;
   var $343=((($342)*(3))&-1);
   var $344=((($341)-($343))|0);
   var $345=$n;
   var $346=((((($345)|(0)))/(2))&-1);
   var $347=((($344)-($346))|0);
   _cvSetSeqReaderPos($tmp0, $347, 1);
   var $348=(($tmp0+12)|0);
   var $349=HEAP32[(($348)>>2)];
   $p1=$349;
   var $350=$d;
   _cvSetSeqReaderPos($tmp0, $350, 1);
   var $351=(($tmp0+12)|0);
   var $352=HEAP32[(($351)>>2)];
   $p2=$352;
   var $353=$d;
   _cvSetSeqReaderPos($tmp0, $353, 1);
   var $354=(($tmp0+12)|0);
   var $355=HEAP32[(($354)>>2)];
   $p3=$355;
   var $356=$p1;
   var $357=$p2;
   var $358=$p3;
   var $359=$2;
   var $360=$3;
   var $361=__Z7icvMed3PcS_S_PFiPKvS1_PvES2_($356, $357, $358, $359, $360);
   $m3=$361;
   label = 44; break;
  case 43: 
   var $363=(($tmp0+12)|0);
   var $364=HEAP32[(($363)>>2)];
   $m1=$364;
   var $365=$n;
   var $366=((((($365)|(0)))/(2))&-1);
   _cvSetSeqReaderPos($tmp0, $366, 1);
   var $367=(($tmp0+12)|0);
   var $368=HEAP32[(($367)>>2)];
   $m2=$368;
   var $369=$n;
   var $370=((($369)-(1))|0);
   var $371=$n;
   var $372=((((($371)|(0)))/(2))&-1);
   var $373=((($370)-($372))|0);
   _cvSetSeqReaderPos($tmp0, $373, 1);
   var $374=(($tmp0+12)|0);
   var $375=HEAP32[(($374)>>2)];
   $m3=$375;
   label = 44; break;
  case 44: 
   var $377=$m1;
   var $378=$m2;
   var $379=$m3;
   var $380=$2;
   var $381=$3;
   var $382=__Z7icvMed3PcS_S_PFiPKvS1_PvES2_($377, $378, $379, $380, $381);
   $pivot=$382;
   var $383=$left;
   var $384=$left0;
   assert(32 % 1 === 0);(_memcpy($383, $384, 32)|0);
   var $385=$pivot;
   var $386=(($left+12)|0);
   var $387=HEAP32[(($386)>>2)];
   var $388=(($385)|(0))!=(($387)|(0));
   if ($388) { label = 45; break; } else { label = 50; break; }
  case 45: 
   $k1=0;
   label = 46; break;
  case 46: 
   var $391=$k1;
   var $392=$elem_size;
   var $393=(($391)|(0)) < (($392)|(0));
   if ($393) { label = 47; break; } else { label = 49; break; }
  case 47: 
   var $395=$k1;
   var $396=$pivot;
   var $397=(($396+$395)|0);
   var $398=HEAP8[($397)];
   $t02=$398;
   var $399=$k1;
   var $400=(($left+12)|0);
   var $401=HEAP32[(($400)>>2)];
   var $402=(($401+$399)|0);
   var $403=HEAP8[($402)];
   $t13=$403;
   var $404=$t13;
   var $405=$k1;
   var $406=$pivot;
   var $407=(($406+$405)|0);
   HEAP8[($407)]=$404;
   var $408=$t02;
   var $409=$k1;
   var $410=(($left+12)|0);
   var $411=HEAP32[(($410)>>2)];
   var $412=(($411+$409)|0);
   HEAP8[($412)]=$408;
   label = 48; break;
  case 48: 
   var $414=$k1;
   var $415=((($414)+(1))|0);
   $k1=$415;
   label = 46; break;
  case 49: 
   var $417=(($left+12)|0);
   var $418=HEAP32[(($417)>>2)];
   $pivot=$418;
   label = 50; break;
  case 50: 
   var $420=$elem_size;
   var $421=(($left+12)|0);
   var $422=HEAP32[(($421)>>2)];
   var $423=(($422+$420)|0);
   HEAP32[(($421)>>2)]=$423;
   var $424=(($left+20)|0);
   var $425=HEAP32[(($424)>>2)];
   var $426=(($423)>>>(0)) >= (($425)>>>(0));
   if ($426) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $428=$left;
   _cvChangeSeqBlock($428, 1);
   label = 52; break;
  case 52: 
   var $430=$left1;
   var $431=$left;
   assert(32 % 1 === 0);(_memcpy($430, $431, 32)|0);
   label = 53; break;
  case 53: 
   label = 54; break;
  case 54: 
   var $434=(($left+12)|0);
   var $435=HEAP32[(($434)>>2)];
   var $436=(($right+12)|0);
   var $437=HEAP32[(($436)>>2)];
   var $438=(($435)|(0))!=(($437)|(0));
   if ($438) { label = 55; break; } else { var $448 = 0;label = 56; break; }
  case 55: 
   var $440=$2;
   var $441=(($left+12)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=$pivot;
   var $444=$3;
   var $445=FUNCTION_TABLE[$440]($442, $443, $444);
   $r=$445;
   var $446=(($445)|(0)) <= 0;
   var $448 = $446;label = 56; break;
  case 56: 
   var $448;
   if ($448) { label = 57; break; } else { label = 70; break; }
  case 57: 
   var $450=$r;
   var $451=(($450)|(0))==0;
   if ($451) { label = 58; break; } else { label = 67; break; }
  case 58: 
   var $453=(($left1+12)|0);
   var $454=HEAP32[(($453)>>2)];
   var $455=(($left+12)|0);
   var $456=HEAP32[(($455)>>2)];
   var $457=(($454)|(0))!=(($456)|(0));
   if ($457) { label = 59; break; } else { label = 64; break; }
  case 59: 
   $k4=0;
   label = 60; break;
  case 60: 
   var $460=$k4;
   var $461=$elem_size;
   var $462=(($460)|(0)) < (($461)|(0));
   if ($462) { label = 61; break; } else { label = 63; break; }
  case 61: 
   var $464=$k4;
   var $465=(($left1+12)|0);
   var $466=HEAP32[(($465)>>2)];
   var $467=(($466+$464)|0);
   var $468=HEAP8[($467)];
   $t05=$468;
   var $469=$k4;
   var $470=(($left+12)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=(($471+$469)|0);
   var $473=HEAP8[($472)];
   $t16=$473;
   var $474=$t16;
   var $475=$k4;
   var $476=(($left1+12)|0);
   var $477=HEAP32[(($476)>>2)];
   var $478=(($477+$475)|0);
   HEAP8[($478)]=$474;
   var $479=$t05;
   var $480=$k4;
   var $481=(($left+12)|0);
   var $482=HEAP32[(($481)>>2)];
   var $483=(($482+$480)|0);
   HEAP8[($483)]=$479;
   label = 62; break;
  case 62: 
   var $485=$k4;
   var $486=((($485)+(1))|0);
   $k4=$486;
   label = 60; break;
  case 63: 
   label = 64; break;
  case 64: 
   $swap_cnt=1;
   var $489=$elem_size;
   var $490=(($left1+12)|0);
   var $491=HEAP32[(($490)>>2)];
   var $492=(($491+$489)|0);
   HEAP32[(($490)>>2)]=$492;
   var $493=(($left1+20)|0);
   var $494=HEAP32[(($493)>>2)];
   var $495=(($492)>>>(0)) >= (($494)>>>(0));
   if ($495) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $497=$left1;
   _cvChangeSeqBlock($497, 1);
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $500=$elem_size;
   var $501=(($left+12)|0);
   var $502=HEAP32[(($501)>>2)];
   var $503=(($502+$500)|0);
   HEAP32[(($501)>>2)]=$503;
   var $504=(($left+20)|0);
   var $505=HEAP32[(($504)>>2)];
   var $506=(($503)>>>(0)) >= (($505)>>>(0));
   if ($506) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $508=$left;
   _cvChangeSeqBlock($508, 1);
   label = 69; break;
  case 69: 
   label = 54; break;
  case 70: 
   label = 71; break;
  case 71: 
   var $512=(($left+12)|0);
   var $513=HEAP32[(($512)>>2)];
   var $514=(($right+12)|0);
   var $515=HEAP32[(($514)>>2)];
   var $516=(($513)|(0))!=(($515)|(0));
   if ($516) { label = 72; break; } else { var $526 = 0;label = 73; break; }
  case 72: 
   var $518=$2;
   var $519=(($right+12)|0);
   var $520=HEAP32[(($519)>>2)];
   var $521=$pivot;
   var $522=$3;
   var $523=FUNCTION_TABLE[$518]($520, $521, $522);
   $r=$523;
   var $524=(($523)|(0)) >= 0;
   var $526 = $524;label = 73; break;
  case 73: 
   var $526;
   if ($526) { label = 74; break; } else { label = 87; break; }
  case 74: 
   var $528=$r;
   var $529=(($528)|(0))==0;
   if ($529) { label = 75; break; } else { label = 84; break; }
  case 75: 
   var $531=(($right1+12)|0);
   var $532=HEAP32[(($531)>>2)];
   var $533=(($right+12)|0);
   var $534=HEAP32[(($533)>>2)];
   var $535=(($532)|(0))!=(($534)|(0));
   if ($535) { label = 76; break; } else { label = 81; break; }
  case 76: 
   $k7=0;
   label = 77; break;
  case 77: 
   var $538=$k7;
   var $539=$elem_size;
   var $540=(($538)|(0)) < (($539)|(0));
   if ($540) { label = 78; break; } else { label = 80; break; }
  case 78: 
   var $542=$k7;
   var $543=(($right1+12)|0);
   var $544=HEAP32[(($543)>>2)];
   var $545=(($544+$542)|0);
   var $546=HEAP8[($545)];
   $t08=$546;
   var $547=$k7;
   var $548=(($right+12)|0);
   var $549=HEAP32[(($548)>>2)];
   var $550=(($549+$547)|0);
   var $551=HEAP8[($550)];
   $t19=$551;
   var $552=$t19;
   var $553=$k7;
   var $554=(($right1+12)|0);
   var $555=HEAP32[(($554)>>2)];
   var $556=(($555+$553)|0);
   HEAP8[($556)]=$552;
   var $557=$t08;
   var $558=$k7;
   var $559=(($right+12)|0);
   var $560=HEAP32[(($559)>>2)];
   var $561=(($560+$558)|0);
   HEAP8[($561)]=$557;
   label = 79; break;
  case 79: 
   var $563=$k7;
   var $564=((($563)+(1))|0);
   $k7=$564;
   label = 77; break;
  case 80: 
   label = 81; break;
  case 81: 
   $swap_cnt=1;
   var $567=$elem_size;
   var $568=(($right1+12)|0);
   var $569=HEAP32[(($568)>>2)];
   var $570=(((-$567))|0);
   var $571=(($569+$570)|0);
   HEAP32[(($568)>>2)]=$571;
   var $572=(($right1+16)|0);
   var $573=HEAP32[(($572)>>2)];
   var $574=(($571)>>>(0)) < (($573)>>>(0));
   if ($574) { label = 82; break; } else { label = 83; break; }
  case 82: 
   var $576=$right1;
   _cvChangeSeqBlock($576, -1);
   label = 83; break;
  case 83: 
   label = 84; break;
  case 84: 
   var $579=$elem_size;
   var $580=(($right+12)|0);
   var $581=HEAP32[(($580)>>2)];
   var $582=(((-$579))|0);
   var $583=(($581+$582)|0);
   HEAP32[(($580)>>2)]=$583;
   var $584=(($right+16)|0);
   var $585=HEAP32[(($584)>>2)];
   var $586=(($583)>>>(0)) < (($585)>>>(0));
   if ($586) { label = 85; break; } else { label = 86; break; }
  case 85: 
   var $588=$right;
   _cvChangeSeqBlock($588, -1);
   label = 86; break;
  case 86: 
   label = 71; break;
  case 87: 
   var $591=(($left+12)|0);
   var $592=HEAP32[(($591)>>2)];
   var $593=(($right+12)|0);
   var $594=HEAP32[(($593)>>2)];
   var $595=(($592)|(0))==(($594)|(0));
   if ($595) { label = 88; break; } else { label = 106; break; }
  case 88: 
   var $597=$2;
   var $598=(($left+12)|0);
   var $599=HEAP32[(($598)>>2)];
   var $600=$pivot;
   var $601=$3;
   var $602=FUNCTION_TABLE[$597]($599, $600, $601);
   $r=$602;
   var $603=$r;
   var $604=(($603)|(0))==0;
   if ($604) { label = 89; break; } else { label = 98; break; }
  case 89: 
   var $606=(($left1+12)|0);
   var $607=HEAP32[(($606)>>2)];
   var $608=(($left+12)|0);
   var $609=HEAP32[(($608)>>2)];
   var $610=(($607)|(0))!=(($609)|(0));
   if ($610) { label = 90; break; } else { label = 95; break; }
  case 90: 
   $k10=0;
   label = 91; break;
  case 91: 
   var $613=$k10;
   var $614=$elem_size;
   var $615=(($613)|(0)) < (($614)|(0));
   if ($615) { label = 92; break; } else { label = 94; break; }
  case 92: 
   var $617=$k10;
   var $618=(($left1+12)|0);
   var $619=HEAP32[(($618)>>2)];
   var $620=(($619+$617)|0);
   var $621=HEAP8[($620)];
   $t011=$621;
   var $622=$k10;
   var $623=(($left+12)|0);
   var $624=HEAP32[(($623)>>2)];
   var $625=(($624+$622)|0);
   var $626=HEAP8[($625)];
   $t112=$626;
   var $627=$t112;
   var $628=$k10;
   var $629=(($left1+12)|0);
   var $630=HEAP32[(($629)>>2)];
   var $631=(($630+$628)|0);
   HEAP8[($631)]=$627;
   var $632=$t011;
   var $633=$k10;
   var $634=(($left+12)|0);
   var $635=HEAP32[(($634)>>2)];
   var $636=(($635+$633)|0);
   HEAP8[($636)]=$632;
   label = 93; break;
  case 93: 
   var $638=$k10;
   var $639=((($638)+(1))|0);
   $k10=$639;
   label = 91; break;
  case 94: 
   label = 95; break;
  case 95: 
   $swap_cnt=1;
   var $642=$elem_size;
   var $643=(($left1+12)|0);
   var $644=HEAP32[(($643)>>2)];
   var $645=(($644+$642)|0);
   HEAP32[(($643)>>2)]=$645;
   var $646=(($left1+20)|0);
   var $647=HEAP32[(($646)>>2)];
   var $648=(($645)>>>(0)) >= (($647)>>>(0));
   if ($648) { label = 96; break; } else { label = 97; break; }
  case 96: 
   var $650=$left1;
   _cvChangeSeqBlock($650, 1);
   label = 97; break;
  case 97: 
   label = 98; break;
  case 98: 
   var $653=$r;
   var $654=(($653)|(0)) <= 0;
   if ($654) { label = 99; break; } else { label = 102; break; }
  case 99: 
   var $656=$elem_size;
   var $657=(($left+12)|0);
   var $658=HEAP32[(($657)>>2)];
   var $659=(($658+$656)|0);
   HEAP32[(($657)>>2)]=$659;
   var $660=(($left+20)|0);
   var $661=HEAP32[(($660)>>2)];
   var $662=(($659)>>>(0)) >= (($661)>>>(0));
   if ($662) { label = 100; break; } else { label = 101; break; }
  case 100: 
   var $664=$left;
   _cvChangeSeqBlock($664, 1);
   label = 101; break;
  case 101: 
   label = 105; break;
  case 102: 
   var $667=$elem_size;
   var $668=(($right+12)|0);
   var $669=HEAP32[(($668)>>2)];
   var $670=(((-$667))|0);
   var $671=(($669+$670)|0);
   HEAP32[(($668)>>2)]=$671;
   var $672=(($right+16)|0);
   var $673=HEAP32[(($672)>>2)];
   var $674=(($671)>>>(0)) < (($673)>>>(0));
   if ($674) { label = 103; break; } else { label = 104; break; }
  case 103: 
   var $676=$right;
   _cvChangeSeqBlock($676, -1);
   label = 104; break;
  case 104: 
   label = 105; break;
  case 105: 
   label = 117; break;
  case 106: 
   $k13=0;
   label = 107; break;
  case 107: 
   var $681=$k13;
   var $682=$elem_size;
   var $683=(($681)|(0)) < (($682)|(0));
   if ($683) { label = 108; break; } else { label = 110; break; }
  case 108: 
   var $685=$k13;
   var $686=(($left+12)|0);
   var $687=HEAP32[(($686)>>2)];
   var $688=(($687+$685)|0);
   var $689=HEAP8[($688)];
   $t014=$689;
   var $690=$k13;
   var $691=(($right+12)|0);
   var $692=HEAP32[(($691)>>2)];
   var $693=(($692+$690)|0);
   var $694=HEAP8[($693)];
   $t115=$694;
   var $695=$t115;
   var $696=$k13;
   var $697=(($left+12)|0);
   var $698=HEAP32[(($697)>>2)];
   var $699=(($698+$696)|0);
   HEAP8[($699)]=$695;
   var $700=$t014;
   var $701=$k13;
   var $702=(($right+12)|0);
   var $703=HEAP32[(($702)>>2)];
   var $704=(($703+$701)|0);
   HEAP8[($704)]=$700;
   label = 109; break;
  case 109: 
   var $706=$k13;
   var $707=((($706)+(1))|0);
   $k13=$707;
   label = 107; break;
  case 110: 
   var $709=$elem_size;
   var $710=(($left+12)|0);
   var $711=HEAP32[(($710)>>2)];
   var $712=(($711+$709)|0);
   HEAP32[(($710)>>2)]=$712;
   var $713=(($left+20)|0);
   var $714=HEAP32[(($713)>>2)];
   var $715=(($712)>>>(0)) >= (($714)>>>(0));
   if ($715) { label = 111; break; } else { label = 112; break; }
  case 111: 
   var $717=$left;
   _cvChangeSeqBlock($717, 1);
   label = 112; break;
  case 112: 
   var $719=(($left+12)|0);
   var $720=HEAP32[(($719)>>2)];
   var $721=(($right+12)|0);
   var $722=HEAP32[(($721)>>2)];
   var $723=(($720)|(0))==(($722)|(0));
   var $724=(($723)&(1));
   $r=$724;
   var $725=$elem_size;
   var $726=(($right+12)|0);
   var $727=HEAP32[(($726)>>2)];
   var $728=(((-$725))|0);
   var $729=(($727+$728)|0);
   HEAP32[(($726)>>2)]=$729;
   var $730=(($right+16)|0);
   var $731=HEAP32[(($730)>>2)];
   var $732=(($729)>>>(0)) < (($731)>>>(0));
   if ($732) { label = 113; break; } else { label = 114; break; }
  case 113: 
   var $734=$right;
   _cvChangeSeqBlock($734, -1);
   label = 114; break;
  case 114: 
   $swap_cnt=1;
   var $736=$r;
   var $737=(($736)|(0))!=0;
   if ($737) { label = 115; break; } else { label = 116; break; }
  case 115: 
   label = 117; break;
  case 116: 
   label = 53; break;
  case 117: 
   var $741=$swap_cnt;
   var $742=(($741)|(0))==0;
   if ($742) { label = 118; break; } else { label = 119; break; }
  case 118: 
   var $744=$left;
   var $745=$left0;
   assert(32 % 1 === 0);(_memcpy($744, $745, 32)|0);
   var $746=$right;
   var $747=$right0;
   assert(32 % 1 === 0);(_memcpy($746, $747, 32)|0);
   label = 18; break;
  case 119: 
   var $749=_cvGetSeqReaderPos($left);
   $l=$749;
   var $750=$l;
   var $751=(($750)|(0))==0;
   if ($751) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $753=$1;
   var $754=(($753+24)|0);
   var $755=HEAP32[(($754)>>2)];
   $l=$755;
   label = 121; break;
  case 121: 
   var $757=_cvGetSeqReaderPos($left0);
   $l0=$757;
   var $758=_cvGetSeqReaderPos($left1);
   $l1=$758;
   var $759=$l1;
   var $760=(($759)|(0))==0;
   if ($760) { label = 122; break; } else { label = 123; break; }
  case 122: 
   var $762=$1;
   var $763=(($762+24)|0);
   var $764=HEAP32[(($763)>>2)];
   $l1=$764;
   label = 123; break;
  case 123: 
   var $766=$l;
   var $767=$l1;
   var $768=((($766)-($767))|0);
   var $769=$l1;
   var $770=$l0;
   var $771=((($769)-($770))|0);
   var $772=(($768)|(0)) > (($771)|(0));
   if ($772) { label = 124; break; } else { label = 125; break; }
  case 124: 
   var $774=$l1;
   var $775=$l0;
   var $776=((($774)-($775))|0);
   var $782 = $776;label = 126; break;
  case 125: 
   var $778=$l;
   var $779=$l1;
   var $780=((($778)-($779))|0);
   var $782 = $780;label = 126; break;
  case 126: 
   var $782;
   $n=$782;
   var $783=$n;
   var $784=(($783)|(0)) > 0;
   if ($784) { label = 127; break; } else { label = 140; break; }
  case 127: 
   var $786=$tmp0;
   var $787=$left0;
   assert(32 % 1 === 0);(_memcpy($786, $787, 32)|0);
   var $788=$tmp1;
   var $789=$left;
   assert(32 % 1 === 0);(_memcpy($788, $789, 32)|0);
   var $790=$n;
   var $791=(((-$790))|0);
   _cvSetSeqReaderPos($tmp1, $791, 1);
   $i=0;
   label = 128; break;
  case 128: 
   var $793=$i;
   var $794=$n;
   var $795=(($793)|(0)) < (($794)|(0));
   if ($795) { label = 129; break; } else { label = 139; break; }
  case 129: 
   $k16=0;
   label = 130; break;
  case 130: 
   var $798=$k16;
   var $799=$elem_size;
   var $800=(($798)|(0)) < (($799)|(0));
   if ($800) { label = 131; break; } else { label = 133; break; }
  case 131: 
   var $802=$k16;
   var $803=(($tmp0+12)|0);
   var $804=HEAP32[(($803)>>2)];
   var $805=(($804+$802)|0);
   var $806=HEAP8[($805)];
   $t017=$806;
   var $807=$k16;
   var $808=(($tmp1+12)|0);
   var $809=HEAP32[(($808)>>2)];
   var $810=(($809+$807)|0);
   var $811=HEAP8[($810)];
   $t118=$811;
   var $812=$t118;
   var $813=$k16;
   var $814=(($tmp0+12)|0);
   var $815=HEAP32[(($814)>>2)];
   var $816=(($815+$813)|0);
   HEAP8[($816)]=$812;
   var $817=$t017;
   var $818=$k16;
   var $819=(($tmp1+12)|0);
   var $820=HEAP32[(($819)>>2)];
   var $821=(($820+$818)|0);
   HEAP8[($821)]=$817;
   label = 132; break;
  case 132: 
   var $823=$k16;
   var $824=((($823)+(1))|0);
   $k16=$824;
   label = 130; break;
  case 133: 
   var $826=$elem_size;
   var $827=(($tmp0+12)|0);
   var $828=HEAP32[(($827)>>2)];
   var $829=(($828+$826)|0);
   HEAP32[(($827)>>2)]=$829;
   var $830=(($tmp0+20)|0);
   var $831=HEAP32[(($830)>>2)];
   var $832=(($829)>>>(0)) >= (($831)>>>(0));
   if ($832) { label = 134; break; } else { label = 135; break; }
  case 134: 
   var $834=$tmp0;
   _cvChangeSeqBlock($834, 1);
   label = 135; break;
  case 135: 
   var $836=$elem_size;
   var $837=(($tmp1+12)|0);
   var $838=HEAP32[(($837)>>2)];
   var $839=(($838+$836)|0);
   HEAP32[(($837)>>2)]=$839;
   var $840=(($tmp1+20)|0);
   var $841=HEAP32[(($840)>>2)];
   var $842=(($839)>>>(0)) >= (($841)>>>(0));
   if ($842) { label = 136; break; } else { label = 137; break; }
  case 136: 
   var $844=$tmp1;
   _cvChangeSeqBlock($844, 1);
   label = 137; break;
  case 137: 
   label = 138; break;
  case 138: 
   var $847=$i;
   var $848=((($847)+(1))|0);
   $i=$848;
   label = 128; break;
  case 139: 
   label = 140; break;
  case 140: 
   var $851=_cvGetSeqReaderPos($right);
   $r=$851;
   var $852=_cvGetSeqReaderPos($right0);
   $r0=$852;
   var $853=_cvGetSeqReaderPos($right1);
   $r1=$853;
   var $854=$r0;
   var $855=$r1;
   var $856=((($854)-($855))|0);
   var $857=$r1;
   var $858=$r;
   var $859=((($857)-($858))|0);
   var $860=(($856)|(0)) > (($859)|(0));
   if ($860) { label = 141; break; } else { label = 142; break; }
  case 141: 
   var $862=$r1;
   var $863=$r;
   var $864=((($862)-($863))|0);
   var $870 = $864;label = 143; break;
  case 142: 
   var $866=$r0;
   var $867=$r1;
   var $868=((($866)-($867))|0);
   var $870 = $868;label = 143; break;
  case 143: 
   var $870;
   $m=$870;
   var $871=$m;
   var $872=(($871)|(0)) > 0;
   if ($872) { label = 144; break; } else { label = 157; break; }
  case 144: 
   var $874=$tmp0;
   var $875=$left;
   assert(32 % 1 === 0);(_memcpy($874, $875, 32)|0);
   var $876=$tmp1;
   var $877=$right0;
   assert(32 % 1 === 0);(_memcpy($876, $877, 32)|0);
   var $878=$m;
   var $879=(((1)-($878))|0);
   _cvSetSeqReaderPos($tmp1, $879, 1);
   $i=0;
   label = 145; break;
  case 145: 
   var $881=$i;
   var $882=$m;
   var $883=(($881)|(0)) < (($882)|(0));
   if ($883) { label = 146; break; } else { label = 156; break; }
  case 146: 
   $k19=0;
   label = 147; break;
  case 147: 
   var $886=$k19;
   var $887=$elem_size;
   var $888=(($886)|(0)) < (($887)|(0));
   if ($888) { label = 148; break; } else { label = 150; break; }
  case 148: 
   var $890=$k19;
   var $891=(($tmp0+12)|0);
   var $892=HEAP32[(($891)>>2)];
   var $893=(($892+$890)|0);
   var $894=HEAP8[($893)];
   $t020=$894;
   var $895=$k19;
   var $896=(($tmp1+12)|0);
   var $897=HEAP32[(($896)>>2)];
   var $898=(($897+$895)|0);
   var $899=HEAP8[($898)];
   $t121=$899;
   var $900=$t121;
   var $901=$k19;
   var $902=(($tmp0+12)|0);
   var $903=HEAP32[(($902)>>2)];
   var $904=(($903+$901)|0);
   HEAP8[($904)]=$900;
   var $905=$t020;
   var $906=$k19;
   var $907=(($tmp1+12)|0);
   var $908=HEAP32[(($907)>>2)];
   var $909=(($908+$906)|0);
   HEAP8[($909)]=$905;
   label = 149; break;
  case 149: 
   var $911=$k19;
   var $912=((($911)+(1))|0);
   $k19=$912;
   label = 147; break;
  case 150: 
   var $914=$elem_size;
   var $915=(($tmp0+12)|0);
   var $916=HEAP32[(($915)>>2)];
   var $917=(($916+$914)|0);
   HEAP32[(($915)>>2)]=$917;
   var $918=(($tmp0+20)|0);
   var $919=HEAP32[(($918)>>2)];
   var $920=(($917)>>>(0)) >= (($919)>>>(0));
   if ($920) { label = 151; break; } else { label = 152; break; }
  case 151: 
   var $922=$tmp0;
   _cvChangeSeqBlock($922, 1);
   label = 152; break;
  case 152: 
   var $924=$elem_size;
   var $925=(($tmp1+12)|0);
   var $926=HEAP32[(($925)>>2)];
   var $927=(($926+$924)|0);
   HEAP32[(($925)>>2)]=$927;
   var $928=(($tmp1+20)|0);
   var $929=HEAP32[(($928)>>2)];
   var $930=(($927)>>>(0)) >= (($929)>>>(0));
   if ($930) { label = 153; break; } else { label = 154; break; }
  case 153: 
   var $932=$tmp1;
   _cvChangeSeqBlock($932, 1);
   label = 154; break;
  case 154: 
   label = 155; break;
  case 155: 
   var $935=$i;
   var $936=((($935)+(1))|0);
   $i=$936;
   label = 145; break;
  case 156: 
   label = 157; break;
  case 157: 
   var $939=$l;
   var $940=$l1;
   var $941=((($939)-($940))|0);
   $n=$941;
   var $942=$r1;
   var $943=$r;
   var $944=((($942)-($943))|0);
   $m=$944;
   var $945=$n;
   var $946=(($945)|(0)) > 1;
   if ($946) { label = 158; break; } else { label = 165; break; }
  case 158: 
   var $948=$m;
   var $949=(($948)|(0)) > 1;
   if ($949) { label = 159; break; } else { label = 163; break; }
  case 159: 
   var $951=$n;
   var $952=$m;
   var $953=(($951)|(0)) > (($952)|(0));
   if ($953) { label = 160; break; } else { label = 161; break; }
  case 160: 
   var $955=$sp;
   var $956=((($955)+(1))|0);
   $sp=$956;
   var $957=(($left0+8)|0);
   var $958=HEAP32[(($957)>>2)];
   var $959=$sp;
   var $960=(($stack+($959<<5))|0);
   var $961=(($960)|0);
   var $962=(($961)|0);
   HEAP32[(($962)>>2)]=$958;
   var $963=(($left0+12)|0);
   var $964=HEAP32[(($963)>>2)];
   var $965=$sp;
   var $966=(($stack+($965<<5))|0);
   var $967=(($966)|0);
   var $968=(($967+4)|0);
   HEAP32[(($968)>>2)]=$964;
   var $969=(($left0+16)|0);
   var $970=HEAP32[(($969)>>2)];
   var $971=$sp;
   var $972=(($stack+($971<<5))|0);
   var $973=(($972)|0);
   var $974=(($973+8)|0);
   HEAP32[(($974)>>2)]=$970;
   var $975=(($left0+20)|0);
   var $976=HEAP32[(($975)>>2)];
   var $977=$sp;
   var $978=(($stack+($977<<5))|0);
   var $979=(($978)|0);
   var $980=(($979+12)|0);
   HEAP32[(($980)>>2)]=$976;
   var $981=$n;
   var $982=((($981)-(1))|0);
   _cvSetSeqReaderPos($left0, $982, 1);
   var $983=(($left0+8)|0);
   var $984=HEAP32[(($983)>>2)];
   var $985=$sp;
   var $986=(($stack+($985<<5))|0);
   var $987=(($986+16)|0);
   var $988=(($987)|0);
   HEAP32[(($988)>>2)]=$984;
   var $989=(($left0+12)|0);
   var $990=HEAP32[(($989)>>2)];
   var $991=$sp;
   var $992=(($stack+($991<<5))|0);
   var $993=(($992+16)|0);
   var $994=(($993+4)|0);
   HEAP32[(($994)>>2)]=$990;
   var $995=(($left0+16)|0);
   var $996=HEAP32[(($995)>>2)];
   var $997=$sp;
   var $998=(($stack+($997<<5))|0);
   var $999=(($998+16)|0);
   var $1000=(($999+8)|0);
   HEAP32[(($1000)>>2)]=$996;
   var $1001=(($left0+20)|0);
   var $1002=HEAP32[(($1001)>>2)];
   var $1003=$sp;
   var $1004=(($stack+($1003<<5))|0);
   var $1005=(($1004+16)|0);
   var $1006=(($1005+12)|0);
   HEAP32[(($1006)>>2)]=$1002;
   var $1007=$right;
   var $1008=$right0;
   assert(32 % 1 === 0);(_memcpy($1007, $1008, 32)|0);
   var $1009=$left;
   var $1010=$right;
   assert(32 % 1 === 0);(_memcpy($1009, $1010, 32)|0);
   var $1011=$m;
   var $1012=(((1)-($1011))|0);
   _cvSetSeqReaderPos($left, $1012, 1);
   label = 162; break;
  case 161: 
   var $1014=$sp;
   var $1015=((($1014)+(1))|0);
   $sp=$1015;
   var $1016=(($right0+8)|0);
   var $1017=HEAP32[(($1016)>>2)];
   var $1018=$sp;
   var $1019=(($stack+($1018<<5))|0);
   var $1020=(($1019+16)|0);
   var $1021=(($1020)|0);
   HEAP32[(($1021)>>2)]=$1017;
   var $1022=(($right0+12)|0);
   var $1023=HEAP32[(($1022)>>2)];
   var $1024=$sp;
   var $1025=(($stack+($1024<<5))|0);
   var $1026=(($1025+16)|0);
   var $1027=(($1026+4)|0);
   HEAP32[(($1027)>>2)]=$1023;
   var $1028=(($right0+16)|0);
   var $1029=HEAP32[(($1028)>>2)];
   var $1030=$sp;
   var $1031=(($stack+($1030<<5))|0);
   var $1032=(($1031+16)|0);
   var $1033=(($1032+8)|0);
   HEAP32[(($1033)>>2)]=$1029;
   var $1034=(($right0+20)|0);
   var $1035=HEAP32[(($1034)>>2)];
   var $1036=$sp;
   var $1037=(($stack+($1036<<5))|0);
   var $1038=(($1037+16)|0);
   var $1039=(($1038+12)|0);
   HEAP32[(($1039)>>2)]=$1035;
   var $1040=$m;
   var $1041=(((1)-($1040))|0);
   _cvSetSeqReaderPos($right0, $1041, 1);
   var $1042=(($right0+8)|0);
   var $1043=HEAP32[(($1042)>>2)];
   var $1044=$sp;
   var $1045=(($stack+($1044<<5))|0);
   var $1046=(($1045)|0);
   var $1047=(($1046)|0);
   HEAP32[(($1047)>>2)]=$1043;
   var $1048=(($right0+12)|0);
   var $1049=HEAP32[(($1048)>>2)];
   var $1050=$sp;
   var $1051=(($stack+($1050<<5))|0);
   var $1052=(($1051)|0);
   var $1053=(($1052+4)|0);
   HEAP32[(($1053)>>2)]=$1049;
   var $1054=(($right0+16)|0);
   var $1055=HEAP32[(($1054)>>2)];
   var $1056=$sp;
   var $1057=(($stack+($1056<<5))|0);
   var $1058=(($1057)|0);
   var $1059=(($1058+8)|0);
   HEAP32[(($1059)>>2)]=$1055;
   var $1060=(($right0+20)|0);
   var $1061=HEAP32[(($1060)>>2)];
   var $1062=$sp;
   var $1063=(($stack+($1062<<5))|0);
   var $1064=(($1063)|0);
   var $1065=(($1064+12)|0);
   HEAP32[(($1065)>>2)]=$1061;
   var $1066=$right;
   var $1067=$left0;
   assert(32 % 1 === 0);(_memcpy($1066, $1067, 32)|0);
   var $1068=$left;
   var $1069=$right;
   assert(32 % 1 === 0);(_memcpy($1068, $1069, 32)|0);
   var $1070=$n;
   var $1071=((($1070)-(1))|0);
   _cvSetSeqReaderPos($right, $1071, 1);
   label = 162; break;
  case 162: 
   label = 164; break;
  case 163: 
   var $1074=$right;
   var $1075=$left0;
   assert(32 % 1 === 0);(_memcpy($1074, $1075, 32)|0);
   var $1076=$left;
   var $1077=$right;
   assert(32 % 1 === 0);(_memcpy($1076, $1077, 32)|0);
   var $1078=$n;
   var $1079=((($1078)-(1))|0);
   _cvSetSeqReaderPos($right, $1079, 1);
   label = 164; break;
  case 164: 
   label = 169; break;
  case 165: 
   var $1082=$m;
   var $1083=(($1082)|(0)) > 1;
   if ($1083) { label = 166; break; } else { label = 167; break; }
  case 166: 
   var $1085=$right;
   var $1086=$right0;
   assert(32 % 1 === 0);(_memcpy($1085, $1086, 32)|0);
   var $1087=$left;
   var $1088=$right;
   assert(32 % 1 === 0);(_memcpy($1087, $1088, 32)|0);
   var $1089=$m;
   var $1090=(((1)-($1089))|0);
   _cvSetSeqReaderPos($left, $1090, 1);
   label = 168; break;
  case 167: 
   label = 171; break;
  case 168: 
   label = 169; break;
  case 169: 
   label = 170; break;
  case 170: 
   label = 13; break;
  case 171: 
   label = 11; break;
  case 172: 
   label = 173; break;
  case 173: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z7icvMed3PcS_S_PFiPKvS1_PvES2_($a, $b, $c, $cmp_func, $aux) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $1=$a;
   $2=$b;
   $3=$c;
   $4=$cmp_func;
   $5=$aux;
   var $6=$4;
   var $7=$1;
   var $8=$2;
   var $9=$5;
   var $10=FUNCTION_TABLE[$6]($7, $8, $9);
   var $11=(($10)|(0)) < 0;
   if ($11) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $13=$4;
   var $14=$2;
   var $15=$3;
   var $16=$5;
   var $17=FUNCTION_TABLE[$13]($14, $15, $16);
   var $18=(($17)|(0)) < 0;
   if ($18) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $20=$2;
   var $32 = $20;label = 5; break;
  case 4: 
   var $22=$4;
   var $23=$1;
   var $24=$3;
   var $25=$5;
   var $26=FUNCTION_TABLE[$22]($23, $24, $25);
   var $27=(($26)|(0)) < 0;
   var $28=$3;
   var $29=$1;
   var $30=$27 ? $28 : $29;
   var $32 = $30;label = 5; break;
  case 5: 
   var $32;
   var $55 = $32;label = 10; break;
  case 6: 
   var $34=$4;
   var $35=$2;
   var $36=$3;
   var $37=$5;
   var $38=FUNCTION_TABLE[$34]($35, $36, $37);
   var $39=(($38)|(0)) > 0;
   if ($39) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $41=$2;
   var $53 = $41;label = 9; break;
  case 8: 
   var $43=$4;
   var $44=$1;
   var $45=$3;
   var $46=$5;
   var $47=FUNCTION_TABLE[$43]($44, $45, $46);
   var $48=(($47)|(0)) < 0;
   var $49=$1;
   var $50=$3;
   var $51=$48 ? $49 : $50;
   var $53 = $51;label = 9; break;
  case 9: 
   var $53;
   var $55 = $53;label = 10; break;
  case 10: 
   var $55;
   return $55;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateSet($set_flags, $header_size, $elem_size, $storage) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $set;
   $1=$set_flags;
   $2=$header_size;
   $3=$elem_size;
   $4=$storage;
   $set=0;
   var $5=$4;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6112)|0), ((36880)|0), ((15112)|0), 2760);
   label = 8; break;
  case 3: 
   var $9=$2;
   var $10=(($9)|(0)) < 64;
   if ($10) { label = 6; break; } else { label = 4; break; }
  case 4: 
   var $12=$3;
   var $13=(($12)|(0)) < 8;
   if ($13) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $15=$3;
   var $16=$15 & 3;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-201, ((6112)|0), ((36880)|0), ((15112)|0), 2764);
   label = 8; break;
  case 7: 
   var $20=$1;
   var $21=$2;
   var $22=$3;
   var $23=$4;
   var $24=_cvCreateSeq($20, $21, $22, $23);
   var $25=$24;
   $set=$25;
   var $26=$set;
   var $27=(($26)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$28 & 65535;
   var $30=$29 | 1117257728;
   var $31=$set;
   var $32=(($31)|0);
   HEAP32[(($32)>>2)]=$30;
   label = 8; break;
  case 8: 
   var $34=$set;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSetAdd($set, $element, $inserted_element) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $id;
   var $free_elem;
   var $count;
   var $elem_size;
   var $ptr;
   var $_icv_memcpy_i_;
   var $_icv_memcpy_len_;
   var $_icv_memcpy_dst_;
   var $_icv_memcpy_src_;
   $1=$set;
   $2=$element;
   $3=$inserted_element;
   $id=-1;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6088)|0), ((36880)|0), ((15112)|0), 2788);
   label = 20; break;
  case 3: 
   var $8=$1;
   var $9=(($8+56)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 11; break; } else { label = 4; break; }
  case 4: 
   var $13=$1;
   var $14=(($13+24)|0);
   var $15=HEAP32[(($14)>>2)];
   $count=$15;
   var $16=$1;
   var $17=(($16+28)|0);
   var $18=HEAP32[(($17)>>2)];
   $elem_size=$18;
   var $19=$1;
   var $20=$19;
   __ZL10icvGrowSeqP5CvSeqi($20, 0);
   var $21=_cvGetErrStatus();
   var $22=(($21)|(0)) < 0;
   if ($22) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((6088)|0), ((11720)|0), ((15112)|0), 2795);
   label = 20; break;
  case 6: 
   var $25=$1;
   var $26=(($25+36)|0);
   var $27=HEAP32[(($26)>>2)];
   $ptr=$27;
   var $28=$27;
   var $29=$1;
   var $30=(($29+56)|0);
   HEAP32[(($30)>>2)]=$28;
   label = 7; break;
  case 7: 
   var $32=$ptr;
   var $33=$elem_size;
   var $34=(($32+$33)|0);
   var $35=$1;
   var $36=(($35+32)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($34)>>>(0)) <= (($37)>>>(0));
   if ($38) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $40=$count;
   var $41=$40 | -2147483648;
   var $42=$ptr;
   var $43=$42;
   var $44=(($43)|0);
   HEAP32[(($44)>>2)]=$41;
   var $45=$ptr;
   var $46=$elem_size;
   var $47=(($45+$46)|0);
   var $48=$47;
   var $49=$ptr;
   var $50=$49;
   var $51=(($50+4)|0);
   HEAP32[(($51)>>2)]=$48;
   label = 9; break;
  case 9: 
   var $53=$elem_size;
   var $54=$ptr;
   var $55=(($54+$53)|0);
   $ptr=$55;
   var $56=$count;
   var $57=((($56)+(1))|0);
   $count=$57;
   label = 7; break;
  case 10: 
   var $59=$ptr;
   var $60=$elem_size;
   var $61=(((-$60))|0);
   var $62=(($59+$61)|0);
   var $63=$62;
   var $64=(($63+4)|0);
   HEAP32[(($64)>>2)]=0;
   var $65=$count;
   var $66=$1;
   var $67=(($66+24)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=((($65)-($68))|0);
   var $70=$1;
   var $71=(($70+52)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74+12)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=((($76)+($69))|0);
   HEAP32[(($75)>>2)]=$77;
   var $78=$count;
   var $79=$1;
   var $80=(($79+24)|0);
   HEAP32[(($80)>>2)]=$78;
   var $81=$1;
   var $82=(($81+32)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=$1;
   var $85=(($84+36)|0);
   HEAP32[(($85)>>2)]=$83;
   label = 11; break;
  case 11: 
   var $87=$1;
   var $88=(($87+56)|0);
   var $89=HEAP32[(($88)>>2)];
   $free_elem=$89;
   var $90=$free_elem;
   var $91=(($90+4)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$1;
   var $94=(($93+56)|0);
   HEAP32[(($94)>>2)]=$92;
   var $95=$free_elem;
   var $96=(($95)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=$97 & 67108863;
   $id=$98;
   var $99=$2;
   var $100=(($99)|(0))!=0;
   if ($100) { label = 12; break; } else { label = 17; break; }
  case 12: 
   var $102=$1;
   var $103=(($102+28)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=((((($104)>>>(0)))/(4))&-1);
   $_icv_memcpy_len_=$105;
   var $106=$free_elem;
   var $107=$106;
   $_icv_memcpy_dst_=$107;
   var $108=$2;
   var $109=$108;
   $_icv_memcpy_src_=$109;
   $_icv_memcpy_i_=0;
   label = 13; break;
  case 13: 
   var $111=$_icv_memcpy_i_;
   var $112=$_icv_memcpy_len_;
   var $113=(($111)>>>(0)) < (($112)>>>(0));
   if ($113) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $115=$_icv_memcpy_i_;
   var $116=$_icv_memcpy_src_;
   var $117=(($116+($115<<2))|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=$_icv_memcpy_i_;
   var $120=$_icv_memcpy_dst_;
   var $121=(($120+($119<<2))|0);
   HEAP32[(($121)>>2)]=$118;
   label = 15; break;
  case 15: 
   var $123=$_icv_memcpy_i_;
   var $124=((($123)+(1))|0);
   $_icv_memcpy_i_=$124;
   label = 13; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $127=$id;
   var $128=$free_elem;
   var $129=(($128)|0);
   HEAP32[(($129)>>2)]=$127;
   var $130=$1;
   var $131=(($130+60)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=((($132)+(1))|0);
   HEAP32[(($131)>>2)]=$133;
   var $134=$3;
   var $135=(($134)|(0))!=0;
   if ($135) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $137=$free_elem;
   var $138=$3;
   HEAP32[(($138)>>2)]=$137;
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $141=$id;
   return $141;
  default: assert(0, "bad label: " + label);
 }
}
function _cvClearSet($set) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$set;
   var $2=$1;
   var $3=$2;
   _cvClearSeq($3);
   var $4=_cvGetErrStatus();
   var $5=(($4)|(0)) < 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((6072)|0), ((11720)|0), ((15112)|0), 2855);
   label = 4; break;
  case 3: 
   var $8=$1;
   var $9=(($8+56)|0);
   HEAP32[(($9)>>2)]=0;
   var $10=$1;
   var $11=(($10+60)|0);
   HEAP32[(($11)>>2)]=0;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCreateGraph($graph_type, $header_size, $vtx_size, $edge_size, $storage) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $graph;
   var $edges;
   var $vertices;
   $1=$graph_type;
   $2=$header_size;
   $3=$vtx_size;
   $4=$edge_size;
   $5=$storage;
   $graph=0;
   $edges=0;
   $vertices=0;
   var $6=$2;
   var $7=(($6)|(0)) < 68;
   if ($7) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $9=$4;
   var $10=(($9)|(0)) < 24;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $12=$3;
   var $13=(($12)|(0)) < 8;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-201, ((6032)|0), ((36880)|0), ((15112)|0), 2884);
   label = 10; break;
  case 5: 
   var $16=$1;
   var $17=$2;
   var $18=$3;
   var $19=$5;
   var $20=_cvCreateSet($16, $17, $18, $19);
   $vertices=$20;
   var $21=_cvGetErrStatus();
   var $22=(($21)|(0)) < 0;
   if ($22) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-1, ((6032)|0), ((11720)|0), ((15112)|0), 2886);
   label = 10; break;
  case 7: 
   var $25=$4;
   var $26=$5;
   var $27=_cvCreateSet(0, 64, $25, $26);
   $edges=$27;
   var $28=_cvGetErrStatus();
   var $29=(($28)|(0)) < 0;
   if ($29) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _cvError(-1, ((6032)|0), ((11720)|0), ((15112)|0), 2888);
   label = 10; break;
  case 9: 
   var $32=$vertices;
   var $33=$32;
   $graph=$33;
   var $34=$edges;
   var $35=$graph;
   var $36=(($35+64)|0);
   HEAP32[(($36)>>2)]=$34;
   label = 10; break;
  case 10: 
   var $38=$graph;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGraphAddVtx($graph, $_vertex, $_inserted_vertex) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $vertex;
   var $index;
   var $_icv_memcpy_i_;
   var $_icv_memcpy_len_;
   var $_icv_memcpy_dst_;
   var $_icv_memcpy_src_;
   $1=$graph;
   $2=$_vertex;
   $3=$_inserted_vertex;
   $vertex=0;
   $index=-1;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((6008)|0), ((36880)|0), ((15112)|0), 2929);
   label = 14; break;
  case 3: 
   var $8=$1;
   var $9=$8;
   var $10=_cvSetNew($9);
   var $11=$10;
   $vertex=$11;
   var $12=$vertex;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 4; break; } else { label = 11; break; }
  case 4: 
   var $15=$2;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $18=$1;
   var $19=(($18+28)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(8))|0);
   var $22=((((($21)>>>(0)))/(4))&-1);
   $_icv_memcpy_len_=$22;
   var $23=$vertex;
   var $24=(($23+8)|0);
   var $25=$24;
   $_icv_memcpy_dst_=$25;
   var $26=$2;
   var $27=(($26+8)|0);
   var $28=$27;
   $_icv_memcpy_src_=$28;
   $_icv_memcpy_i_=0;
   label = 6; break;
  case 6: 
   var $30=$_icv_memcpy_i_;
   var $31=$_icv_memcpy_len_;
   var $32=(($30)>>>(0)) < (($31)>>>(0));
   if ($32) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $34=$_icv_memcpy_i_;
   var $35=$_icv_memcpy_src_;
   var $36=(($35+($34<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$_icv_memcpy_i_;
   var $39=$_icv_memcpy_dst_;
   var $40=(($39+($38<<2))|0);
   HEAP32[(($40)>>2)]=$37;
   label = 8; break;
  case 8: 
   var $42=$_icv_memcpy_i_;
   var $43=((($42)+(1))|0);
   $_icv_memcpy_i_=$43;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $46=$vertex;
   var $47=(($46+4)|0);
   HEAP32[(($47)>>2)]=0;
   var $48=$vertex;
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   $index=$50;
   label = 11; break;
  case 11: 
   var $52=$3;
   var $53=(($52)|(0))!=0;
   if ($53) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $55=$vertex;
   var $56=$3;
   HEAP32[(($56)>>2)]=$55;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $59=$index;
   return $59;
  default: assert(0, "bad label: " + label);
 }
}
function _cvFindGraphEdgeByPtr($graph, $start_vtx, $end_vtx) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $edge;
   var $ofs;
   var $t;
   $1=$graph;
   $2=$start_vtx;
   $3=$end_vtx;
   $edge=0;
   $ofs=0;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $7=$2;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $10=$3;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 5; break; } else { label = 4; break; }
  case 4: 
   _cvError(-27, ((5960)|0), ((36880)|0), ((15112)|0), 3034);
   label = 17; break;
  case 5: 
   var $14=$2;
   var $15=$3;
   var $16=(($14)|(0))==(($15)|(0));
   if ($16) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 17; break;
  case 7: 
   var $19=$1;
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$21 & 4096;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $25=$2;
   var $26=(($25)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$27 & 67108863;
   var $29=$3;
   var $30=(($29)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$31 & 67108863;
   var $33=(($28)|(0)) > (($32)|(0));
   if ($33) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $35=$2;
   $t=$35;
   var $36=$3;
   $2=$36;
   var $37=$t;
   $3=$37;
   label = 10; break;
  case 10: 
   var $39=$2;
   var $40=(($39+4)|0);
   var $41=HEAP32[(($40)>>2)];
   $edge=$41;
   label = 11; break;
  case 11: 
   var $43=$edge;
   var $44=(($43)|(0))!=0;
   if ($44) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $46=$2;
   var $47=$edge;
   var $48=(($47+16)|0);
   var $49=(($48+4)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($46)|(0))==(($50)|(0));
   var $52=(($51)&(1));
   $ofs=$52;
   var $53=$edge;
   var $54=(($53+16)|0);
   var $55=(($54+4)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$3;
   var $58=(($56)|(0))==(($57)|(0));
   if ($58) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 16; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $62=$ofs;
   var $63=$edge;
   var $64=(($63+8)|0);
   var $65=(($64+($62<<2))|0);
   var $66=HEAP32[(($65)>>2)];
   $edge=$66;
   label = 11; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $69=$edge;
   return $69;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGraphAddEdgeByPtr($graph, $start_vtx, $end_vtx, $_edge, $_inserted_edge) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $edge;
   var $result;
   var $delta;
   var $t;
   var $_icv_memcpy_i_;
   var $_icv_memcpy_len_;
   var $_icv_memcpy_dst_;
   var $_icv_memcpy_src_;
   var $_icv_memcpy_i_1;
   var $_icv_memcpy_len_2;
   var $_icv_memcpy_dst_3;
   $1=$graph;
   $2=$start_vtx;
   $3=$end_vtx;
   $4=$_edge;
   $5=$_inserted_edge;
   $edge=0;
   $result=-1;
   var $6=$1;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((5872)|0), ((8464)|0), ((15112)|0), 3105);
   label = 30; break;
  case 3: 
   var $10=$1;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12 & 4096;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 6; break; } else { label = 4; break; }
  case 4: 
   var $16=$2;
   var $17=(($16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18 & 67108863;
   var $20=$3;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22 & 67108863;
   var $24=(($19)|(0)) > (($23)|(0));
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $26=$2;
   $t=$26;
   var $27=$3;
   $2=$27;
   var $28=$t;
   $3=$28;
   label = 6; break;
  case 6: 
   var $30=$1;
   var $31=$2;
   var $32=$3;
   var $33=_cvFindGraphEdgeByPtr($30, $31, $32);
   $edge=$33;
   var $34=_cvGetErrStatus();
   var $35=(($34)|(0)) < 0;
   if ($35) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((5872)|0), ((11720)|0), ((15112)|0), 3114);
   label = 30; break;
  case 8: 
   var $38=$edge;
   var $39=(($38)|(0))!=0;
   if ($39) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $result=0;
   label = 30; break;
  case 10: 
   var $42=$2;
   var $43=$3;
   var $44=(($42)|(0))==(($43)|(0));
   if ($44) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $46=$2;
   var $47=(($46)|(0))!=0;
   var $48=$47 ? -5 : -27;
   _cvError($48, ((5872)|0), ((8280)|0), ((15112)|0), 3123);
   label = 30; break;
  case 12: 
   var $50=$1;
   var $51=(($50+64)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=_cvSetNew($52);
   var $54=$53;
   $edge=$54;
   var $55=_cvGetErrStatus();
   var $56=(($55)|(0)) < 0;
   if ($56) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-1, ((5872)|0), ((11720)|0), ((15112)|0), 3125);
   label = 30; break;
  case 14: 
   var $59=$2;
   var $60=$edge;
   var $61=(($60+16)|0);
   var $62=(($61)|0);
   HEAP32[(($62)>>2)]=$59;
   var $63=$3;
   var $64=$edge;
   var $65=(($64+16)|0);
   var $66=(($65+4)|0);
   HEAP32[(($66)>>2)]=$63;
   var $67=$2;
   var $68=(($67+4)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$edge;
   var $71=(($70+8)|0);
   var $72=(($71)|0);
   HEAP32[(($72)>>2)]=$69;
   var $73=$3;
   var $74=(($73+4)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$edge;
   var $77=(($76+8)|0);
   var $78=(($77+4)|0);
   HEAP32[(($78)>>2)]=$75;
   var $79=$edge;
   var $80=$3;
   var $81=(($80+4)|0);
   HEAP32[(($81)>>2)]=$79;
   var $82=$2;
   var $83=(($82+4)|0);
   HEAP32[(($83)>>2)]=$79;
   var $84=$1;
   var $85=(($84+64)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+28)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=((($88)-(24))|0);
   var $90=((((($89)>>>(0)))/(4))&-1);
   $delta=$90;
   var $91=$4;
   var $92=(($91)|(0))!=0;
   if ($92) { label = 15; break; } else { label = 22; break; }
  case 15: 
   var $94=$delta;
   var $95=(($94)|(0)) > 0;
   if ($95) { label = 16; break; } else { label = 21; break; }
  case 16: 
   var $97=$delta;
   $_icv_memcpy_len_=$97;
   var $98=$edge;
   var $99=(($98+24)|0);
   var $100=$99;
   $_icv_memcpy_dst_=$100;
   var $101=$4;
   var $102=(($101+24)|0);
   var $103=$102;
   $_icv_memcpy_src_=$103;
   $_icv_memcpy_i_=0;
   label = 17; break;
  case 17: 
   var $105=$_icv_memcpy_i_;
   var $106=$_icv_memcpy_len_;
   var $107=(($105)>>>(0)) < (($106)>>>(0));
   if ($107) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $109=$_icv_memcpy_i_;
   var $110=$_icv_memcpy_src_;
   var $111=(($110+($109<<2))|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=$_icv_memcpy_i_;
   var $114=$_icv_memcpy_dst_;
   var $115=(($114+($113<<2))|0);
   HEAP32[(($115)>>2)]=$112;
   label = 19; break;
  case 19: 
   var $117=$_icv_memcpy_i_;
   var $118=((($117)+(1))|0);
   $_icv_memcpy_i_=$118;
   label = 17; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $121=$4;
   var $122=(($121+4)|0);
   var $123=HEAPF32[(($122)>>2)];
   var $124=$edge;
   var $125=(($124+4)|0);
   HEAPF32[(($125)>>2)]=$123;
   label = 29; break;
  case 22: 
   var $127=$delta;
   var $128=(($127)|(0)) > 0;
   if ($128) { label = 23; break; } else { label = 28; break; }
  case 23: 
   var $130=$delta;
   $_icv_memcpy_len_2=$130;
   var $131=$edge;
   var $132=(($131+24)|0);
   var $133=$132;
   $_icv_memcpy_dst_3=$133;
   $_icv_memcpy_i_1=0;
   label = 24; break;
  case 24: 
   var $135=$_icv_memcpy_i_1;
   var $136=$_icv_memcpy_len_2;
   var $137=(($135)>>>(0)) < (($136)>>>(0));
   if ($137) { label = 25; break; } else { label = 27; break; }
  case 25: 
   var $139=$_icv_memcpy_i_1;
   var $140=$_icv_memcpy_dst_3;
   var $141=(($140+($139<<2))|0);
   HEAP32[(($141)>>2)]=0;
   label = 26; break;
  case 26: 
   var $143=$_icv_memcpy_i_1;
   var $144=((($143)+(1))|0);
   $_icv_memcpy_i_1=$144;
   label = 24; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $147=$edge;
   var $148=(($147+4)|0);
   HEAPF32[(($148)>>2)]=1;
   label = 29; break;
  case 29: 
   $result=1;
   label = 30; break;
  case 30: 
   var $151=$5;
   var $152=(($151)|(0))!=0;
   if ($152) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $154=$edge;
   var $155=$5;
   HEAP32[(($155)>>2)]=$154;
   label = 32; break;
  case 32: 
   var $157=$result;
   return $157;
  default: assert(0, "bad label: " + label);
 }
}
function _cvCloneGraph($graph, $storage) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $flag_buffer;
   var $ptr_buffer;
   var $result;
   var $i;
   var $k;
   var $vtx_size;
   var $edge_size;
   var $reader=sp;
   var $vtx;
   var $dstvtx=(sp)+(32);
   var $edge;
   var $dstedge=(sp)+(40);
   var $new_org;
   var $new_dst;
   var $vtx1;
   $1=$graph;
   $2=$storage;
   $flag_buffer=0;
   $ptr_buffer=0;
   $result=0;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $6=$1;
   var $7=$6;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 & -65536;
   var $11=(($10)|(0))==1117257728;
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $13=$1;
   var $14=$13;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & 3584;
   var $18=(($17)|(0))==1536;
   if ($18) { label = 5; break; } else { label = 4; break; }
  case 4: 
   _cvError(-5, ((5808)|0), ((7872)|0), ((15112)|0), 3680);
   label = 44; break;
  case 5: 
   var $21=$2;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $24=$1;
   var $25=(($24+44)|0);
   var $26=HEAP32[(($25)>>2)];
   $2=$26;
   label = 7; break;
  case 7: 
   var $28=$2;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 9; break; } else { label = 8; break; }
  case 8: 
   _cvError(-27, ((5808)|0), ((7560)|0), ((15112)|0), 3686);
   label = 44; break;
  case 9: 
   var $32=$1;
   var $33=(($32+28)|0);
   var $34=HEAP32[(($33)>>2)];
   $vtx_size=$34;
   var $35=$1;
   var $36=(($35+64)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+28)|0);
   var $39=HEAP32[(($38)>>2)];
   $edge_size=$39;
   var $40=$1;
   var $41=(($40+24)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=($42<<2);
   var $44=_cvAlloc($43);
   var $45=$44;
   $flag_buffer=$45;
   var $46=_cvGetErrStatus();
   var $47=(($46)|(0)) < 0;
   if ($47) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-1, ((5808)|0), ((11720)|0), ((15112)|0), 3691);
   label = 44; break;
  case 11: 
   var $50=$1;
   var $51=(($50+24)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=($52<<2);
   var $54=_cvAlloc($53);
   var $55=$54;
   $ptr_buffer=$55;
   var $56=_cvGetErrStatus();
   var $57=(($56)|(0)) < 0;
   if ($57) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _cvError(-1, ((5808)|0), ((11720)|0), ((15112)|0), 3692);
   label = 44; break;
  case 13: 
   var $60=$1;
   var $61=(($60)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$1;
   var $64=(($63+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$vtx_size;
   var $67=$edge_size;
   var $68=$2;
   var $69=_cvCreateGraph($62, $65, $66, $67, $68);
   $result=$69;
   var $70=_cvGetErrStatus();
   var $71=(($70)|(0)) < 0;
   if ($71) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _cvError(-1, ((5808)|0), ((11720)|0), ((15112)|0), 3694);
   label = 44; break;
  case 15: 
   var $74=$result;
   var $75=(($74+4624)|0);
   var $76=$75;
   var $77=$1;
   var $78=(($77+4624)|0);
   var $79=$78;
   var $80=$1;
   var $81=(($80+4)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=((($82)-(68))|0);
   assert($83 % 1 === 0);(_memcpy($76, $79, $83)|0);
   var $84=$1;
   var $85=$84;
   _cvStartReadSeq($85, $reader, 0);
   $i=0;
   $k=0;
   label = 16; break;
  case 16: 
   var $87=$i;
   var $88=$1;
   var $89=(($88+24)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($87)|(0)) < (($90)|(0));
   if ($91) { label = 17; break; } else { label = 25; break; }
  case 17: 
   var $93=(($reader+12)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=$94;
   var $96=(($95)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97)|(0)) >= 0;
   if ($98) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $100=(($reader+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=$101;
   $vtx=$102;
   HEAP32[(($dstvtx)>>2)]=0;
   var $103=$result;
   var $104=$vtx;
   var $105=_cvGraphAddVtx($103, $104, $dstvtx);
   var $106=_cvGetErrStatus();
   var $107=(($106)|(0)) < 0;
   if ($107) { label = 19; break; } else { label = 20; break; }
  case 19: 
   _cvError(-1, ((5808)|0), ((11720)|0), ((15112)|0), 3706);
   label = 44; break;
  case 20: 
   var $110=$vtx;
   var $111=(($110)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=HEAP32[(($dstvtx)>>2)];
   var $114=(($113)|0);
   HEAP32[(($114)>>2)]=$112;
   var $115=$k;
   var $116=$flag_buffer;
   var $117=(($116+($115<<2))|0);
   HEAP32[(($117)>>2)]=$112;
   var $118=$k;
   var $119=$vtx;
   var $120=(($119)|0);
   HEAP32[(($120)>>2)]=$118;
   var $121=HEAP32[(($dstvtx)>>2)];
   var $122=$k;
   var $123=((($122)+(1))|0);
   $k=$123;
   var $124=$ptr_buffer;
   var $125=(($124+($122<<2))|0);
   HEAP32[(($125)>>2)]=$121;
   label = 21; break;
  case 21: 
   var $127=$vtx_size;
   var $128=(($reader+12)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+$127)|0);
   HEAP32[(($128)>>2)]=$130;
   var $131=(($reader+20)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($130)>>>(0)) >= (($132)>>>(0));
   if ($133) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $135=$reader;
   _cvChangeSeqBlock($135, 1);
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $138=$i;
   var $139=((($138)+(1))|0);
   $i=$139;
   label = 16; break;
  case 25: 
   var $141=$1;
   var $142=(($141+64)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=$143;
   _cvStartReadSeq($144, $reader, 0);
   $i=0;
   label = 26; break;
  case 26: 
   var $146=$i;
   var $147=$1;
   var $148=(($147+64)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=(($149+24)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=(($146)|(0)) < (($151)|(0));
   if ($152) { label = 27; break; } else { label = 35; break; }
  case 27: 
   var $154=(($reader+12)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=$155;
   var $157=(($156)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($158)|(0)) >= 0;
   if ($159) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $161=(($reader+12)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=$162;
   $edge=$163;
   HEAP32[(($dstedge)>>2)]=0;
   var $164=$edge;
   var $165=(($164+16)|0);
   var $166=(($165)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167)|0);
   var $169=HEAP32[(($168)>>2)];
   var $170=$ptr_buffer;
   var $171=(($170+($169<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   $new_org=$172;
   var $173=$edge;
   var $174=(($173+16)|0);
   var $175=(($174+4)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=(($176)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=$ptr_buffer;
   var $180=(($179+($178<<2))|0);
   var $181=HEAP32[(($180)>>2)];
   $new_dst=$181;
   var $182=$result;
   var $183=$new_org;
   var $184=$new_dst;
   var $185=$edge;
   var $186=_cvGraphAddEdgeByPtr($182, $183, $184, $185, $dstedge);
   var $187=_cvGetErrStatus();
   var $188=(($187)|(0)) < 0;
   if ($188) { label = 29; break; } else { label = 30; break; }
  case 29: 
   _cvError(-1, ((5808)|0), ((11720)|0), ((15112)|0), 3724);
   label = 44; break;
  case 30: 
   var $191=$edge;
   var $192=(($191)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=HEAP32[(($dstedge)>>2)];
   var $195=(($194)|0);
   HEAP32[(($195)>>2)]=$193;
   label = 31; break;
  case 31: 
   var $197=$edge_size;
   var $198=(($reader+12)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=(($199+$197)|0);
   HEAP32[(($198)>>2)]=$200;
   var $201=(($reader+20)|0);
   var $202=HEAP32[(($201)>>2)];
   var $203=(($200)>>>(0)) >= (($202)>>>(0));
   if ($203) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $205=$reader;
   _cvChangeSeqBlock($205, 1);
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   var $208=$i;
   var $209=((($208)+(1))|0);
   $i=$209;
   label = 26; break;
  case 35: 
   var $211=$1;
   var $212=$211;
   _cvStartReadSeq($212, $reader, 0);
   $i=0;
   $k=0;
   label = 36; break;
  case 36: 
   var $214=$i;
   var $215=$1;
   var $216=(($215+64)|0);
   var $217=HEAP32[(($216)>>2)];
   var $218=(($217+24)|0);
   var $219=HEAP32[(($218)>>2)];
   var $220=(($214)|(0)) < (($219)|(0));
   if ($220) { label = 37; break; } else { label = 43; break; }
  case 37: 
   var $222=(($reader+12)|0);
   var $223=HEAP32[(($222)>>2)];
   var $224=$223;
   var $225=(($224)|0);
   var $226=HEAP32[(($225)>>2)];
   var $227=(($226)|(0)) >= 0;
   if ($227) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $229=(($reader+12)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=$230;
   $vtx1=$231;
   var $232=$k;
   var $233=((($232)+(1))|0);
   $k=$233;
   var $234=$flag_buffer;
   var $235=(($234+($232<<2))|0);
   var $236=HEAP32[(($235)>>2)];
   var $237=$vtx1;
   var $238=(($237)|0);
   HEAP32[(($238)>>2)]=$236;
   label = 39; break;
  case 39: 
   var $240=$vtx_size;
   var $241=(($reader+12)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242+$240)|0);
   HEAP32[(($241)>>2)]=$243;
   var $244=(($reader+20)|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=(($243)>>>(0)) >= (($245)>>>(0));
   if ($246) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $248=$reader;
   _cvChangeSeqBlock($248, 1);
   label = 41; break;
  case 41: 
   label = 42; break;
  case 42: 
   var $251=$i;
   var $252=((($251)+(1))|0);
   $i=$252;
   label = 36; break;
  case 43: 
   label = 44; break;
  case 44: 
   var $255=$flag_buffer;
   var $256=$255;
   _cvFree_($256);
   $flag_buffer=0;
   var $257=$ptr_buffer;
   var $258=$257;
   _cvFree_($258);
   $ptr_buffer=0;
   var $259=_cvGetErrStatus();
   var $260=(($259)|(0)) < 0;
   if ($260) { label = 45; break; } else { label = 46; break; }
  case 45: 
   $result=0;
   label = 46; break;
  case 46: 
   var $263=$result;
   STACKTOP = sp;
   return $263;
  default: assert(0, "bad label: " + label);
 }
}
function _cvInitTreeNodeIterator($treeIterator, $first, $max_level) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$treeIterator;
   $2=$first;
   $3=$max_level;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$2;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-27, ((5776)|0), ((36880)|0), ((15112)|0), 3884);
   label = 7; break;
  case 4: 
   var $11=$3;
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-211, ((5776)|0), ((36880)|0), ((15112)|0), 3887);
   label = 7; break;
  case 6: 
   var $15=$2;
   var $16=$1;
   var $17=(($16)|0);
   HEAP32[(($17)>>2)]=$15;
   var $18=$1;
   var $19=(($18+4)|0);
   HEAP32[(($19)>>2)]=0;
   var $20=$3;
   var $21=$1;
   var $22=(($21+8)|0);
   HEAP32[(($22)>>2)]=$20;
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvNextTreeNode($treeIterator) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $prevNode;
   var $node;
   var $level;
   $1=$treeIterator;
   $prevNode=0;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((5760)|0), ((7504)|0), ((15112)|0), 3910);
   label = 19; break;
  case 3: 
   var $6=$1;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   $node=$9;
   $prevNode=$9;
   var $10=$1;
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   $level=$12;
   var $13=$node;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 18; break; }
  case 4: 
   var $16=$node;
   var $17=(($16+20)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $21=$level;
   var $22=((($21)+(1))|0);
   var $23=$1;
   var $24=(($23+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($22)|(0)) < (($25)|(0));
   if ($26) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $28=$node;
   var $29=(($28+20)|0);
   var $30=HEAP32[(($29)>>2)];
   $node=$30;
   var $31=$level;
   var $32=((($31)+(1))|0);
   $level=$32;
   label = 17; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $35=$node;
   var $36=(($35+12)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))==0;
   if ($38) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $40=$node;
   var $41=(($40+16)|0);
   var $42=HEAP32[(($41)>>2)];
   $node=$42;
   var $43=$level;
   var $44=((($43)-(1))|0);
   $level=$44;
   var $45=(($44)|(0)) < 0;
   if ($45) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $node=0;
   label = 12; break;
  case 11: 
   label = 8; break;
  case 12: 
   var $49=$node;
   var $50=(($49)|(0))!=0;
   if ($50) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $52=$1;
   var $53=(($52+8)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54)|(0))!=0;
   if ($55) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $57=$node;
   var $58=(($57+12)|0);
   var $59=HEAP32[(($58)>>2)];
   var $62 = $59;label = 16; break;
  case 15: 
   var $62 = 0;label = 16; break;
  case 16: 
   var $62;
   $node=$62;
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $65=$node;
   var $66=$65;
   var $67=$1;
   var $68=(($67)|0);
   HEAP32[(($68)>>2)]=$66;
   var $69=$level;
   var $70=$1;
   var $71=(($70+4)|0);
   HEAP32[(($71)>>2)]=$69;
   label = 19; break;
  case 19: 
   var $73=$prevNode;
   var $74=$73;
   return $74;
  default: assert(0, "bad label: " + label);
 }
}
function _cvStdErrReport($code, $func_name, $err_msg, $file, $line, $0) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   $3=$code;
   $4=$func_name;
   $5=$err_msg;
   $6=$file;
   $7=$line;
   $8=$0;
   var $9=$3;
   var $10=(($9)|(0))==-1;
   if ($10) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $12=$3;
   var $13=(($12)|(0))==-8;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=HEAP32[((_stderr)>>2)];
   var $16=_fprintf($15, ((10968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 8; break;
  case 4: 
   var $18=HEAP32[((_stderr)>>2)];
   var $19=$3;
   var $20=_cvErrorStr($19);
   var $21=$5;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=$5;
   var $27 = $24;label = 7; break;
  case 6: 
   var $27 = ((12272)|0);label = 7; break;
  case 7: 
   var $27;
   var $28=_fprintf($18, ((14880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$20,HEAP32[(((tempInt)+(8))>>2)]=$27,tempInt));
   label = 8; break;
  case 8: 
   var $30=HEAP32[((_stderr)>>2)];
   var $31=$4;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $34=$4;
   var $37 = $34;label = 11; break;
  case 10: 
   var $37 = ((10264)|0);label = 11; break;
  case 11: 
   var $37;
   var $38=$6;
   var $39=(($38)|(0))!=0;
   if ($39) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $41=$6;
   var $44 = $41;label = 14; break;
  case 13: 
   var $44 = ((36864)|0);label = 14; break;
  case 14: 
   var $44;
   var $45=$7;
   var $46=_fprintf($30, ((11120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(8))>>2)]=$44,HEAP32[(((tempInt)+(16))>>2)]=$45,tempInt));
   var $47=_cvGetErrMode();
   var $48=(($47)|(0))==0;
   if ($48) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $50=HEAP32[((_stderr)>>2)];
   var $51=_fprintf($50, ((8968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   $2=1;
   label = 17; break;
  case 16: 
   $2=0;
   label = 17; break;
  case 17: 
   var $54=$2;
   STACKTOP = sp;
   return $54;
  default: assert(0, "bad label: " + label);
 }
}
function _cvErrorStr($status) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$status;
   var $3=$2;
   if ((($3)|(0))==0) {
    label = 2; break;
   }
   else if ((($3)|(0))==-1) {
    label = 3; break;
   }
   else if ((($3)|(0))==-2) {
    label = 4; break;
   }
   else if ((($3)|(0))==-3) {
    label = 5; break;
   }
   else if ((($3)|(0))==-4) {
    label = 6; break;
   }
   else if ((($3)|(0))==-5) {
    label = 7; break;
   }
   else if ((($3)|(0))==-7) {
    label = 8; break;
   }
   else if ((($3)|(0))==-8) {
    label = 9; break;
   }
   else if ((($3)|(0))==-201) {
    label = 10; break;
   }
   else if ((($3)|(0))==-27) {
    label = 11; break;
   }
   else if ((($3)|(0))==-202) {
    label = 12; break;
   }
   else if ((($3)|(0))==-13) {
    label = 13; break;
   }
   else if ((($3)|(0))==-203) {
    label = 14; break;
   }
   else if ((($3)|(0))==-204) {
    label = 15; break;
   }
   else if ((($3)|(0))==-17) {
    label = 16; break;
   }
   else if ((($3)|(0))==-205) {
    label = 17; break;
   }
   else if ((($3)|(0))==-209) {
    label = 18; break;
   }
   else if ((($3)|(0))==-211) {
    label = 19; break;
   }
   else if ((($3)|(0))==-210) {
    label = 20; break;
   }
   else if ((($3)|(0))==-24) {
    label = 21; break;
   }
   else if ((($3)|(0))==-15) {
    label = 22; break;
   }
   else if ((($3)|(0))==-206) {
    label = 23; break;
   }
   else if ((($3)|(0))==-207) {
    label = 24; break;
   }
   else if ((($3)|(0))==-208) {
    label = 25; break;
   }
   else if ((($3)|(0))==-212) {
    label = 26; break;
   }
   else if ((($3)|(0))==-213) {
    label = 27; break;
   }
   else if ((($3)|(0))==-214) {
    label = 28; break;
   }
   else {
   label = 29; break;
   }
  case 2: 
   $1=((8328)|0);
   label = 30; break;
  case 3: 
   $1=((8120)|0);
   label = 30; break;
  case 4: 
   $1=((7536)|0);
   label = 30; break;
  case 5: 
   $1=((15952)|0);
   label = 30; break;
  case 6: 
   $1=((15720)|0);
   label = 30; break;
  case 7: 
   $1=((15232)|0);
   label = 30; break;
  case 8: 
   $1=((14936)|0);
   label = 30; break;
  case 9: 
   $1=((14296)|0);
   label = 30; break;
  case 10: 
   $1=((13760)|0);
   label = 30; break;
  case 11: 
   $1=((13416)|0);
   label = 30; break;
  case 12: 
   $1=((12864)|0);
   label = 30; break;
  case 13: 
   $1=((12608)|0);
   label = 30; break;
  case 14: 
   $1=((12504)|0);
   label = 30; break;
  case 15: 
   $1=((12456)|0);
   label = 30; break;
  case 16: 
   $1=((12408)|0);
   label = 30; break;
  case 17: 
   $1=((12368)|0);
   label = 30; break;
  case 18: 
   $1=((12288)|0);
   label = 30; break;
  case 19: 
   $1=((12176)|0);
   label = 30; break;
  case 20: 
   $1=((12040)|0);
   label = 30; break;
  case 21: 
   $1=((11968)|0);
   label = 30; break;
  case 22: 
   $1=((11880)|0);
   label = 30; break;
  case 23: 
   $1=((11800)|0);
   label = 30; break;
  case 24: 
   $1=((11680)|0);
   label = 30; break;
  case 25: 
   $1=((11584)|0);
   label = 30; break;
  case 26: 
   $1=((11512)|0);
   label = 30; break;
  case 27: 
   $1=((11288)|0);
   label = 30; break;
  case 28: 
   $1=((11136)|0);
   label = 30; break;
  case 29: 
   var $32=$2;
   var $33=(($32)|(0)) >= 0;
   var $34=$33 ? (((11008)|0)) : (((10928)|0));
   var $35=$2;
   var $36=_sprintf(((36456)|0), ((11016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$34,HEAP32[(((tempInt)+(8))>>2)]=$35,tempInt));
   $1=((36456)|0);
   label = 30; break;
  case 30: 
   var $38=$1;
   STACKTOP = sp;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetErrMode() {
 var label = 0;
 var $1=__ZL13icvGetContextv();
 var $2=(($1+4)|0);
 var $3=HEAP32[(($2)>>2)];
 return $3;
}
function __ZL13icvGetContextv() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((37400)>>2)];
   var $2=(($1)|(0))!=0;
   if ($2) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $4=__ZL16icvCreateContextv();
   HEAP32[((37400)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $6=HEAP32[((37400)>>2)];
   return $6;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetErrStatus() {
 var label = 0;
 var $1=__ZL13icvGetContextv();
 var $2=(($1)|0);
 var $3=HEAP32[(($2)>>2)];
 return $3;
}
function _cvSetErrStatus($code) {
 var label = 0;
 var $1;
 $1=$code;
 var $2=$1;
 var $3=__ZL13icvGetContextv();
 var $4=(($3)|0);
 HEAP32[(($4)>>2)]=$2;
 return;
}
function _cvError($code, $func_name, $err_msg, $file_name, $line) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $context;
   var $message;
   var $terminate;
   $1=$code;
   $2=$func_name;
   $3=$err_msg;
   $4=$file_name;
   $5=$line;
   var $6=$1;
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   _cvSetErrStatus($9);
   label = 11; break;
  case 3: 
   var $11=__ZL13icvGetContextv();
   $context=$11;
   var $12=$1;
   var $13=(($12)|(0))!=-1;
   if ($13) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $15=$1;
   var $16=(($15)|(0))!=-8;
   if ($16) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $18=$context;
   var $19=(($18+16)|0);
   var $20=(($19)|0);
   $message=$20;
   var $21=$1;
   var $22=$context;
   var $23=(($22)|0);
   HEAP32[(($23)>>2)]=$21;
   var $24=$message;
   var $25=$3;
   var $26=_strcpy($24, $25);
   var $27=$4;
   var $28=$context;
   var $29=(($28+4112)|0);
   var $30=(($29)|0);
   HEAP32[(($30)>>2)]=$27;
   var $31=$5;
   var $32=$context;
   var $33=(($32+4112)|0);
   var $34=(($33+4)|0);
   HEAP32[(($34)>>2)]=$31;
   label = 6; break;
  case 6: 
   var $36=$context;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))!=2;
   if ($39) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $41=$context;
   var $42=(($41+8)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$1;
   var $45=$2;
   var $46=$3;
   var $47=$4;
   var $48=$5;
   var $49=$context;
   var $50=(($49+12)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=FUNCTION_TABLE[$43]($44, $45, $46, $47, $48, $51);
   $terminate=$52;
   var $53=$terminate;
   var $54=(($53)|(0))!=0;
   if ($54) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $56=$terminate;
   var $57=Math.abs($56);
   var $58=(((-$57))|0);
   _exit($58);
   throw "Reached an unreachable!";
  case 9: 
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvErrorFromIppStatus($status) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$status;
   var $3=$2;
   if ((($3)|(0))==-1) {
    label = 2; break;
   }
   else if ((($3)|(0))==-113) {
    label = 3; break;
   }
   else if ((($3)|(0))==-2) {
    label = 4; break;
   }
   else if ((($3)|(0))==-11) {
    label = 5; break;
   }
   else if ((($3)|(0))==-29) {
    label = 6; break;
   }
   else if ((($3)|(0))==-3) {
    label = 7; break;
   }
   else if ((($3)|(0))==-49) {
    label = 8; break;
   }
   else if ((($3)|(0))==-48) {
    label = 9; break;
   }
   else if ((($3)|(0))==-112) {
    label = 10; break;
   }
   else if ((($3)|(0))==-110) {
    label = 11; break;
   }
   else if ((($3)|(0))==-109) {
    label = 12; break;
   }
   else if ((($3)|(0))==-107) {
    label = 13; break;
   }
   else if ((($3)|(0))==-104) {
    label = 14; break;
   }
   else if ((($3)|(0))==-103) {
    label = 15; break;
   }
   else if ((($3)|(0))==-102) {
    label = 16; break;
   }
   else if ((($3)|(0))==-12) {
    label = 17; break;
   }
   else if ((($3)|(0))==-44) {
    label = 18; break;
   }
   else if ((($3)|(0))==-10) {
    label = 19; break;
   }
   else if ((($3)|(0))==-7) {
    label = 20; break;
   }
   else if ((($3)|(0))==-6) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 2: 
   $1=-201;
   label = 23; break;
  case 3: 
   $1=-214;
   label = 23; break;
  case 4: 
   $1=-27;
   label = 23; break;
  case 5: 
   $1=-202;
   label = 23; break;
  case 6: 
   $1=-13;
   label = 23; break;
  case 7: 
   $1=-4;
   label = 23; break;
  case 8: 
   $1=-5;
   label = 23; break;
  case 9: 
   $1=-2;
   label = 23; break;
  case 10: 
   $1=-203;
   label = 23; break;
  case 11: 
   $1=-204;
   label = 23; break;
  case 12: 
   $1=-7;
   label = 23; break;
  case 13: 
   $1=-17;
   label = 23; break;
  case 14: 
   $1=-205;
   label = 23; break;
  case 15: 
   $1=-24;
   label = 23; break;
  case 16: 
   $1=-15;
   label = 23; break;
  case 17: 
   $1=-206;
   label = 23; break;
  case 18: 
   $1=-5;
   label = 23; break;
  case 19: 
   $1=-5;
   label = 23; break;
  case 20: 
   $1=-5;
   label = 23; break;
  case 21: 
   $1=-207;
   label = 23; break;
  case 22: 
   $1=-2;
   label = 23; break;
  case 23: 
   var $26=$1;
   return $26;
  default: assert(0, "bad label: " + label);
 }
}
function _cvSetImageIOFunctions($_load_image, $_load_image_m, $_save_image, $_show_image) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$_load_image;
 $2=$_load_image_m;
 $3=$_save_image;
 $4=$_show_image;
 var $5=$1;
 HEAP32[((38936)>>2)]=$5;
 var $6=$2;
 HEAP32[((38912)>>2)]=$6;
 var $7=$3;
 HEAP32[((38928)>>2)]=$7;
 var $8=$4;
 HEAP32[((38920)>>2)]=$8;
 return 1;
}
function _cvCbrt($value) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $fr;
 var $v=sp;
 var $m=(sp)+(8);
 var $ix;
 var $s;
 var $ex;
 var $shx;
 $1=$value;
 var $2=$1;
 var $3=$v;
 HEAPF32[(($3)>>2)]=$2;
 var $4=$v;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5 & 2147483647;
 $ix=$6;
 var $7=$v;
 var $8=HEAP32[(($7)>>2)];
 var $9=$8 & -2147483648;
 $s=$9;
 var $10=$ix;
 var $11=$10 >> 23;
 var $12=((($11)-(127))|0);
 $ex=$12;
 var $13=$ex;
 var $14=((((($13)|(0)))%(3))&-1);
 $shx=$14;
 var $15=$shx;
 var $16=(($15)|(0)) >= 0;
 var $17=$16 ? 3 : 0;
 var $18=$shx;
 var $19=((($18)-($17))|0);
 $shx=$19;
 var $20=$ex;
 var $21=$shx;
 var $22=((($20)-($21))|0);
 var $23=((((($22)|(0)))/(3))&-1);
 $ex=$23;
 var $24=$ix;
 var $25=$24 & 8388607;
 var $26=$shx;
 var $27=((($26)+(127))|0);
 var $28=$27 << 23;
 var $29=$25 | $28;
 var $30=$v;
 HEAP32[(($30)>>2)]=$29;
 var $31=$v;
 var $32=HEAPF32[(($31)>>2)];
 $fr=$32;
 var $33=$fr;
 var $34=$33;
 var $35=($34)*(45.2548339756803);
 var $36=($35)+(192.2798368355061);
 var $37=$fr;
 var $38=$37;
 var $39=($36)*($38);
 var $40=($39)+(119.16548242855816);
 var $41=$fr;
 var $42=$41;
 var $43=($40)*($42);
 var $44=($43)+(13.432501390862399);
 var $45=$fr;
 var $46=$45;
 var $47=($44)*($46);
 var $48=($47)+(0.16361612265857542);
 var $49=$fr;
 var $50=$49;
 var $51=($50)*(14.808840932191346);
 var $52=($51)+(151.97140510444356);
 var $53=$fr;
 var $54=$53;
 var $55=($52)*($54);
 var $56=($55)+(168.52544141015682);
 var $57=$fr;
 var $58=$57;
 var $59=($56)*($58);
 var $60=($59)+(33.99059413502156);
 var $61=$fr;
 var $62=$61;
 var $63=($60)*($62);
 var $64=($63)+(1);
 var $65=($48)/($64);
 var $66=$65;
 $fr=$66;
 var $67=$1;
 var $68=$m;
 HEAPF32[(($68)>>2)]=$67;
 var $69=$fr;
 var $70=$v;
 HEAPF32[(($70)>>2)]=$69;
 var $71=$v;
 var $72=HEAP32[(($71)>>2)];
 var $73=$ex;
 var $74=$73 << 23;
 var $75=((($72)+($74))|0);
 var $76=$s;
 var $77=((($75)+($76))|0);
 var $78=$m;
 var $79=HEAP32[(($78)>>2)];
 var $80=($79<<1);
 var $81=(($80)|(0))!=0;
 var $82=$81 ? -1 : 0;
 var $83=$77 & $82;
 var $84=$v;
 HEAP32[(($84)>>2)]=$83;
 var $85=$v;
 var $86=HEAPF32[(($85)>>2)];
 STACKTOP = sp;
 return $86;
}
function __Z10cvAttrListPPKcP10CvAttrList($agg_result, $attr, $next) {
 var label = 0;
 var $1;
 var $2;
 $1=$attr;
 $2=$next;
 var $3=$1;
 var $4=(($agg_result)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=$2;
 var $6=(($agg_result+4)|0);
 HEAP32[(($6)>>2)]=$5;
 return;
}
function __Z25icvLUT_Transform8u_8u_C1RPKhiPhi6CvSizeS0_($src, $srcstep, $dst, $dststep, $size, $lut) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$lut;
   var $6=(($size)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   HEAP32[(($6)>>2)]=$8;
   var $9=$4;
   var $10=(((($9)>>>(0)))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(4))|0);
   var $22=(($18)|(0)) <= (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=$1;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   var $28=(($27)&(255));
   var $29=$5;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   $t0=$31;
   var $32=$i;
   var $33=((($32)+(1))|0);
   var $34=$1;
   var $35=(($34+$33)|0);
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=$5;
   var $39=(($38+$37)|0);
   var $40=HEAP8[($39)];
   $t1=$40;
   var $41=$t0;
   var $42=$i;
   var $43=$3;
   var $44=(($43+$42)|0);
   HEAP8[($44)]=$41;
   var $45=$t1;
   var $46=$i;
   var $47=((($46)+(1))|0);
   var $48=$3;
   var $49=(($48+$47)|0);
   HEAP8[($49)]=$45;
   var $50=$i;
   var $51=((($50)+(2))|0);
   var $52=$1;
   var $53=(($52+$51)|0);
   var $54=HEAP8[($53)];
   var $55=(($54)&(255));
   var $56=$5;
   var $57=(($56+$55)|0);
   var $58=HEAP8[($57)];
   $t0=$58;
   var $59=$i;
   var $60=((($59)+(3))|0);
   var $61=$1;
   var $62=(($61+$60)|0);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$5;
   var $66=(($65+$64)|0);
   var $67=HEAP8[($66)];
   $t1=$67;
   var $68=$t0;
   var $69=$i;
   var $70=((($69)+(2))|0);
   var $71=$3;
   var $72=(($71+$70)|0);
   HEAP8[($72)]=$68;
   var $73=$t1;
   var $74=$i;
   var $75=((($74)+(3))|0);
   var $76=$3;
   var $77=(($76+$75)|0);
   HEAP8[($77)]=$73;
   label = 6; break;
  case 6: 
   var $79=$i;
   var $80=((($79)+(4))|0);
   $i=$80;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $83=$i;
   var $84=(($size)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($83)|(0)) < (($85)|(0));
   if ($86) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $88=$i;
   var $89=$1;
   var $90=(($89+$88)|0);
   var $91=HEAP8[($90)];
   var $92=(($91)&(255));
   var $93=$5;
   var $94=(($93+$92)|0);
   var $95=HEAP8[($94)];
   $t01=$95;
   var $96=$t01;
   var $97=$i;
   var $98=$3;
   var $99=(($98+$97)|0);
   HEAP8[($99)]=$96;
   label = 10; break;
  case 10: 
   var $101=$i;
   var $102=((($101)+(1))|0);
   $i=$102;
   label = 8; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $105=$2;
   var $106=$1;
   var $107=(($106+$105)|0);
   $1=$107;
   var $108=$4;
   var $109=$3;
   var $110=(($109+$108)|0);
   $3=$110;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z26icvLUT_Transform8u_16u_C1RPKhiPti6CvSizePKt($src, $srcstep, $dst, $dststep, $size, $lut) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$lut;
   var $6=(($size)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   HEAP32[(($6)>>2)]=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(2))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(4))|0);
   var $22=(($18)|(0)) <= (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=$1;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   var $28=(($27)&(255));
   var $29=$5;
   var $30=(($29+($28<<1))|0);
   var $31=HEAP16[(($30)>>1)];
   $t0=$31;
   var $32=$i;
   var $33=((($32)+(1))|0);
   var $34=$1;
   var $35=(($34+$33)|0);
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=$5;
   var $39=(($38+($37<<1))|0);
   var $40=HEAP16[(($39)>>1)];
   $t1=$40;
   var $41=$t0;
   var $42=$i;
   var $43=$3;
   var $44=(($43+($42<<1))|0);
   HEAP16[(($44)>>1)]=$41;
   var $45=$t1;
   var $46=$i;
   var $47=((($46)+(1))|0);
   var $48=$3;
   var $49=(($48+($47<<1))|0);
   HEAP16[(($49)>>1)]=$45;
   var $50=$i;
   var $51=((($50)+(2))|0);
   var $52=$1;
   var $53=(($52+$51)|0);
   var $54=HEAP8[($53)];
   var $55=(($54)&(255));
   var $56=$5;
   var $57=(($56+($55<<1))|0);
   var $58=HEAP16[(($57)>>1)];
   $t0=$58;
   var $59=$i;
   var $60=((($59)+(3))|0);
   var $61=$1;
   var $62=(($61+$60)|0);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$5;
   var $66=(($65+($64<<1))|0);
   var $67=HEAP16[(($66)>>1)];
   $t1=$67;
   var $68=$t0;
   var $69=$i;
   var $70=((($69)+(2))|0);
   var $71=$3;
   var $72=(($71+($70<<1))|0);
   HEAP16[(($72)>>1)]=$68;
   var $73=$t1;
   var $74=$i;
   var $75=((($74)+(3))|0);
   var $76=$3;
   var $77=(($76+($75<<1))|0);
   HEAP16[(($77)>>1)]=$73;
   label = 6; break;
  case 6: 
   var $79=$i;
   var $80=((($79)+(4))|0);
   $i=$80;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $83=$i;
   var $84=(($size)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($83)|(0)) < (($85)|(0));
   if ($86) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $88=$i;
   var $89=$1;
   var $90=(($89+$88)|0);
   var $91=HEAP8[($90)];
   var $92=(($91)&(255));
   var $93=$5;
   var $94=(($93+($92<<1))|0);
   var $95=HEAP16[(($94)>>1)];
   $t01=$95;
   var $96=$t01;
   var $97=$i;
   var $98=$3;
   var $99=(($98+($97<<1))|0);
   HEAP16[(($99)>>1)]=$96;
   label = 10; break;
  case 10: 
   var $101=$i;
   var $102=((($101)+(1))|0);
   $i=$102;
   label = 8; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $105=$2;
   var $106=$1;
   var $107=(($106+$105)|0);
   $1=$107;
   var $108=$4;
   var $109=$3;
   var $110=(($109+($108<<1))|0);
   $3=$110;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z26icvLUT_Transform8u_32s_C1RPKhiPii6CvSizePKi($src, $srcstep, $dst, $dststep, $size, $lut) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$lut;
   var $6=(($size)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   HEAP32[(($6)>>2)]=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(4))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(4))|0);
   var $22=(($18)|(0)) <= (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=$1;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   var $28=(($27)&(255));
   var $29=$5;
   var $30=(($29+($28<<2))|0);
   var $31=HEAP32[(($30)>>2)];
   $t0=$31;
   var $32=$i;
   var $33=((($32)+(1))|0);
   var $34=$1;
   var $35=(($34+$33)|0);
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=$5;
   var $39=(($38+($37<<2))|0);
   var $40=HEAP32[(($39)>>2)];
   $t1=$40;
   var $41=$t0;
   var $42=$i;
   var $43=$3;
   var $44=(($43+($42<<2))|0);
   HEAP32[(($44)>>2)]=$41;
   var $45=$t1;
   var $46=$i;
   var $47=((($46)+(1))|0);
   var $48=$3;
   var $49=(($48+($47<<2))|0);
   HEAP32[(($49)>>2)]=$45;
   var $50=$i;
   var $51=((($50)+(2))|0);
   var $52=$1;
   var $53=(($52+$51)|0);
   var $54=HEAP8[($53)];
   var $55=(($54)&(255));
   var $56=$5;
   var $57=(($56+($55<<2))|0);
   var $58=HEAP32[(($57)>>2)];
   $t0=$58;
   var $59=$i;
   var $60=((($59)+(3))|0);
   var $61=$1;
   var $62=(($61+$60)|0);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$5;
   var $66=(($65+($64<<2))|0);
   var $67=HEAP32[(($66)>>2)];
   $t1=$67;
   var $68=$t0;
   var $69=$i;
   var $70=((($69)+(2))|0);
   var $71=$3;
   var $72=(($71+($70<<2))|0);
   HEAP32[(($72)>>2)]=$68;
   var $73=$t1;
   var $74=$i;
   var $75=((($74)+(3))|0);
   var $76=$3;
   var $77=(($76+($75<<2))|0);
   HEAP32[(($77)>>2)]=$73;
   label = 6; break;
  case 6: 
   var $79=$i;
   var $80=((($79)+(4))|0);
   $i=$80;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $83=$i;
   var $84=(($size)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($83)|(0)) < (($85)|(0));
   if ($86) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $88=$i;
   var $89=$1;
   var $90=(($89+$88)|0);
   var $91=HEAP8[($90)];
   var $92=(($91)&(255));
   var $93=$5;
   var $94=(($93+($92<<2))|0);
   var $95=HEAP32[(($94)>>2)];
   $t01=$95;
   var $96=$t01;
   var $97=$i;
   var $98=$3;
   var $99=(($98+($97<<2))|0);
   HEAP32[(($99)>>2)]=$96;
   label = 10; break;
  case 10: 
   var $101=$i;
   var $102=((($101)+(1))|0);
   $i=$102;
   label = 8; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $105=$2;
   var $106=$1;
   var $107=(($106+$105)|0);
   $1=$107;
   var $108=$4;
   var $109=$3;
   var $110=(($109+($108<<2))|0);
   $3=$110;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z26icvLUT_Transform8u_64f_C1RPKhiPdi6CvSizePKd($src, $srcstep, $dst, $dststep, $size, $lut) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $size; $size = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($size)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($size)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $i;
   var $t0;
   var $t1;
   var $t01;
   $1=$src;
   $2=$srcstep;
   $3=$dst;
   $4=$dststep;
   $5=$lut;
   var $6=(($size)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   HEAP32[(($6)>>2)]=$8;
   var $9=$4;
   var $10=((((($9)>>>(0)))/(8))&-1);
   $4=$10;
   label = 2; break;
  case 2: 
   var $12=(($size+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 13; break; }
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($size)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(4))|0);
   var $22=(($18)|(0)) <= (($21)|(0));
   if ($22) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $24=$i;
   var $25=$1;
   var $26=(($25+$24)|0);
   var $27=HEAP8[($26)];
   var $28=(($27)&(255));
   var $29=$5;
   var $30=(($29+($28<<3))|0);
   var $31=HEAPF64[(($30)>>3)];
   $t0=$31;
   var $32=$i;
   var $33=((($32)+(1))|0);
   var $34=$1;
   var $35=(($34+$33)|0);
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=$5;
   var $39=(($38+($37<<3))|0);
   var $40=HEAPF64[(($39)>>3)];
   $t1=$40;
   var $41=$t0;
   var $42=$i;
   var $43=$3;
   var $44=(($43+($42<<3))|0);
   HEAPF64[(($44)>>3)]=$41;
   var $45=$t1;
   var $46=$i;
   var $47=((($46)+(1))|0);
   var $48=$3;
   var $49=(($48+($47<<3))|0);
   HEAPF64[(($49)>>3)]=$45;
   var $50=$i;
   var $51=((($50)+(2))|0);
   var $52=$1;
   var $53=(($52+$51)|0);
   var $54=HEAP8[($53)];
   var $55=(($54)&(255));
   var $56=$5;
   var $57=(($56+($55<<3))|0);
   var $58=HEAPF64[(($57)>>3)];
   $t0=$58;
   var $59=$i;
   var $60=((($59)+(3))|0);
   var $61=$1;
   var $62=(($61+$60)|0);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$5;
   var $66=(($65+($64<<3))|0);
   var $67=HEAPF64[(($66)>>3)];
   $t1=$67;
   var $68=$t0;
   var $69=$i;
   var $70=((($69)+(2))|0);
   var $71=$3;
   var $72=(($71+($70<<3))|0);
   HEAPF64[(($72)>>3)]=$68;
   var $73=$t1;
   var $74=$i;
   var $75=((($74)+(3))|0);
   var $76=$3;
   var $77=(($76+($75<<3))|0);
   HEAPF64[(($77)>>3)]=$73;
   label = 6; break;
  case 6: 
   var $79=$i;
   var $80=((($79)+(4))|0);
   $i=$80;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $83=$i;
   var $84=(($size)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($83)|(0)) < (($85)|(0));
   if ($86) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $88=$i;
   var $89=$1;
   var $90=(($89+$88)|0);
   var $91=HEAP8[($90)];
   var $92=(($91)&(255));
   var $93=$5;
   var $94=(($93+($92<<3))|0);
   var $95=HEAPF64[(($94)>>3)];
   $t01=$95;
   var $96=$t01;
   var $97=$i;
   var $98=$3;
   var $99=(($98+($97<<3))|0);
   HEAPF64[(($99)>>3)]=$96;
   label = 10; break;
  case 10: 
   var $101=$i;
   var $102=((($101)+(1))|0);
   $i=$102;
   label = 8; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $105=$2;
   var $106=$1;
   var $107=(($106+$105)|0);
   $1=$107;
   var $108=$4;
   var $109=$3;
   var $110=(($109+($108<<3))|0);
   $3=$110;
   label = 2; break;
  case 13: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __Z20icvPthreadDestructorPv($key_val) {
 var label = 0;
 var $1;
 var $context;
 $1=$key_val;
 var $2=$1;
 var $3=$2;
 $context=$3;
 var $4=$context;
 __ZL17icvDestroyContextP9CvContext($4);
 return;
}
function __ZL17icvDestroyContextP9CvContext($context) {
 var label = 0;
 var $1;
 $1=$context;
 var $2=$1;
 var $3=$2;
 _free($3);
 return;
}
function ___cxx_global_var_init400() {
 var label = 0;
 var $1=_pthread_key_create(38944, 90);
 HEAP32[((25816)>>2)]=$1;
 return;
}
function __ZL16icvCreateContextv() {
 var label = 0;
 var $context;
 var $1=_malloc(4120);
 var $2=$1;
 $context=$2;
 var $3=$context;
 var $4=(($3+4)|0);
 HEAP32[(($4)>>2)]=0;
 var $5=$context;
 var $6=(($5)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=$context;
 var $8=(($7+8)|0);
 HEAP32[(($8)>>2)]=578;
 var $9=$context;
 var $10=(($9+12)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=$context;
 return $11;
}
function __GLOBAL__I_a403() {
 var label = 0;
 ___cxx_global_var_init400();
 return;
}
function _cvAttrValue($attr, $attr_name) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   $2=$attr;
   $3=$attr_name;
   label = 2; break;
  case 2: 
   var $5=$2;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { var $13 = 0;label = 4; break; }
  case 3: 
   var $8=$2;
   var $9=(($8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   var $13 = $11;label = 4; break;
  case 4: 
   var $13;
   if ($13) { label = 5; break; } else { label = 12; break; }
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $16=$i;
   var $17=($16<<1);
   var $18=$2;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+($17<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))!=0;
   if ($23) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $25=$3;
   var $26=$i;
   var $27=($26<<1);
   var $28=$2;
   var $29=(($28)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+($27<<2))|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=_strcmp($25, $32);
   var $34=(($33)|(0))==0;
   if ($34) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $36=$i;
   var $37=($36<<1);
   var $38=((($37)+(1))|0);
   var $39=$2;
   var $40=(($39)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41+($38<<2))|0);
   var $43=HEAP32[(($42)>>2)];
   $1=$43;
   label = 13; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $46=$i;
   var $47=((($46)+(1))|0);
   $i=$47;
   label = 6; break;
  case 11: 
   var $49=$2;
   var $50=(($49+4)|0);
   var $51=HEAP32[(($50)>>2)];
   $2=$51;
   label = 2; break;
  case 12: 
   $1=0;
   label = 13; break;
  case 13: 
   var $54=$1;
   return $54;
  default: assert(0, "bad label: " + label);
 }
}
function _cvEndWriteStruct($fs) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$fs;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==1280131417;
   if ($8) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $10=$1;
   var $11=(($10)|(0))!=0;
   var $12=$11 ? -5 : -27;
   _cvError($12, ((6544)|0), ((8856)|0), ((13712)|0), 2877);
   label = 9; break;
  case 4: 
   var $14=$1;
   var $15=(($14+8)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-2, ((6544)|0), ((11448)|0), ((13712)|0), 2877);
   label = 9; break;
  case 6: 
   var $20=$1;
   var $21=(($20+228)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$1;
   FUNCTION_TABLE[$22]($23);
   var $24=_cvGetErrStatus();
   var $25=(($24)|(0)) < 0;
   if ($25) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((6544)|0), ((10080)|0), ((13712)|0), 2878);
   label = 9; break;
  case 8: 
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL10icvFSFlushP13CvFileStorage($fs) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ptr;
   var $indent;
   $1=$fs;
   var $2=$1;
   var $3=(($2+68)|0);
   var $4=HEAP32[(($3)>>2)];
   $ptr=$4;
   var $5=$ptr;
   var $6=$1;
   var $7=(($6+72)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$1;
   var $10=(($9+56)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($8+$11)|0);
   var $13=(($5)>>>(0)) > (($12)>>>(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=$ptr;
   var $16=(($15)|0);
   HEAP8[($16)]=10;
   var $17=$ptr;
   var $18=(($17+1)|0);
   HEAP8[($18)]=0;
   var $19=$1;
   var $20=(($19+72)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$1;
   var $23=(($22+64)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=_fputs($21, $24);
   var $26=$1;
   var $27=(($26+72)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$1;
   var $30=(($29+68)|0);
   HEAP32[(($30)>>2)]=$28;
   label = 3; break;
  case 3: 
   var $32=$1;
   var $33=(($32+40)|0);
   var $34=HEAP32[(($33)>>2)];
   $indent=$34;
   var $35=$1;
   var $36=(($35+56)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$indent;
   var $39=(($37)|(0))!=(($38)|(0));
   if ($39) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $41=$1;
   var $42=(($41+56)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$indent;
   var $45=(($43)|(0)) < (($44)|(0));
   if ($45) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $47=$1;
   var $48=(($47+72)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$1;
   var $51=(($50+56)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($49+$52)|0);
   var $54=$indent;
   var $55=$1;
   var $56=(($55+56)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=((($54)-($57))|0);
   _memset($53, 32, $58);
   label = 6; break;
  case 6: 
   var $60=$indent;
   var $61=$1;
   var $62=(($61+56)|0);
   HEAP32[(($62)>>2)]=$60;
   label = 7; break;
  case 7: 
   var $64=$1;
   var $65=(($64+72)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$1;
   var $68=(($67+56)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($66+$69)|0);
   var $71=$1;
   var $72=(($71+68)|0);
   HEAP32[(($72)>>2)]=$70;
   $ptr=$70;
   var $73=$ptr;
   return $73;
  default: assert(0, "bad label: " + label);
 }
}
function _cvGetFileNodeByName($fs, $_map_node, $str) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $value;
   var $i;
   var $len;
   var $tab_size;
   var $hashval;
   var $k;
   var $attempts;
   var $map;
   var $map_node;
   var $another;
   var $key;
   $1=$fs;
   $2=$_map_node;
   $3=$str;
   $value=0;
   $hashval=0;
   $k=0;
   $attempts=1;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 40; break;
  case 3: 
   var $8=$1;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $11=$1;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==1280131417;
   if ($14) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $16=$1;
   var $17=(($16)|(0))!=0;
   var $18=$17 ? -5 : -27;
   _cvError($18, ((7112)|0), ((8856)|0), ((13712)|0), 572);
   label = 40; break;
  case 6: 
   var $20=$3;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 8; break; } else { label = 7; break; }
  case 7: 
   _cvError(-27, ((7112)|0), ((15680)|0), ((13712)|0), 575);
   label = 40; break;
  case 8: 
   $i=0;
   label = 9; break;
  case 9: 
   var $25=$i;
   var $26=$3;
   var $27=(($26+$25)|0);
   var $28=HEAP8[($27)];
   var $29=(($28 << 24) >> 24);
   var $30=(($29)|(0))!=0;
   if ($30) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $32=$hashval;
   var $33=((($32)*(33))&-1);
   var $34=$i;
   var $35=$3;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   var $39=((($33)+($38))|0);
   $hashval=$39;
   label = 11; break;
  case 11: 
   var $41=$i;
   var $42=((($41)+(1))|0);
   $i=$42;
   label = 9; break;
  case 12: 
   var $44=$hashval;
   var $45=$44 & 2147483647;
   $hashval=$45;
   var $46=$i;
   $len=$46;
   var $47=$2;
   var $48=(($47)|(0))!=0;
   if ($48) { label = 16; break; } else { label = 13; break; }
  case 13: 
   var $50=$1;
   var $51=(($50+32)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|(0))!=0;
   if ($53) { label = 15; break; } else { label = 14; break; }
  case 14: 
   label = 40; break;
  case 15: 
   var $56=$1;
   var $57=(($56+32)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+24)|0);
   var $60=HEAP32[(($59)>>2)];
   $attempts=$60;
   label = 16; break;
  case 16: 
   $k=0;
   label = 17; break;
  case 17: 
   var $63=$k;
   var $64=$attempts;
   var $65=(($63)|(0)) < (($64)|(0));
   if ($65) { label = 18; break; } else { label = 39; break; }
  case 18: 
   var $67=$2;
   $map_node=$67;
   var $68=$map_node;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 20; break; } else { label = 19; break; }
  case 19: 
   var $71=$1;
   var $72=(($71+32)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$k;
   var $75=_cvGetSeqElem($73, $74);
   var $76=$75;
   $map_node=$76;
   label = 20; break;
  case 20: 
   var $78=$map_node;
   var $79=(($78)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$80 & 7;
   var $82=(($81)|(0))==6;
   if ($82) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $84=$map_node;
   var $85=(($84)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$86 & 7;
   var $88=(($87)|(0))==5;
   if ($88) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $90=$map_node;
   var $91=(($90+8)|0);
   var $92=$91;
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93+24)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))!=0;
   if ($96) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $98=$map_node;
   var $99=(($98)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$100 & 7;
   var $102=(($101)|(0))!=0;
   if ($102) { label = 24; break; } else { label = 25; break; }
  case 24: 
   _cvError(-2, ((7112)|0), ((8032)|0), ((13712)|0), 602);
   label = 40; break;
  case 25: 
   label = 40; break;
  case 26: 
   var $106=$map_node;
   var $107=(($106+8)|0);
   var $108=$107;
   var $109=HEAP32[(($108)>>2)];
   $map=$109;
   var $110=$map;
   var $111=(($110+64)|0);
   var $112=HEAP32[(($111)>>2)];
   $tab_size=$112;
   var $113=$tab_size;
   var $114=$tab_size;
   var $115=((($114)-(1))|0);
   var $116=$113 & $115;
   var $117=(($116)|(0))==0;
   if ($117) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $119=$hashval;
   var $120=$tab_size;
   var $121=((($120)-(1))|0);
   var $122=$119 & $121;
   $i=$122;
   label = 29; break;
  case 28: 
   var $124=$hashval;
   var $125=$tab_size;
   var $126=((((($124)>>>(0)))%((($125)>>>(0))))&-1);
   $i=$126;
   label = 29; break;
  case 29: 
   var $128=$i;
   var $129=$map;
   var $130=(($129+68)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($131+($128<<2))|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$133;
   $another=$134;
   label = 30; break;
  case 30: 
   var $136=$another;
   var $137=(($136)|(0))!=0;
   if ($137) { label = 31; break; } else { label = 37; break; }
  case 31: 
   var $139=$another;
   var $140=(($139+16)|0);
   var $141=HEAP32[(($140)>>2)];
   $key=$141;
   var $142=$key;
   var $143=(($142)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=$hashval;
   var $146=(($144)|(0))==(($145)|(0));
   if ($146) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $148=$key;
   var $149=(($148+4)|0);
   var $150=(($149)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=$len;
   var $153=(($151)|(0))==(($152)|(0));
   if ($153) { label = 33; break; } else { label = 35; break; }
  case 33: 
   var $155=$key;
   var $156=(($155+4)|0);
   var $157=(($156+4)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=$3;
   var $160=$len;
   var $161=_memcmp($158, $159, $160);
   var $162=(($161)|(0))==0;
   if ($162) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $164=$another;
   var $165=(($164)|0);
   $value=$165;
   label = 40; break;
  case 35: 
   label = 36; break;
  case 36: 
   var $168=$another;
   var $169=(($168+20)|0);
   var $170=HEAP32[(($169)>>2)];
   $another=$170;
   label = 30; break;
  case 37: 
   label = 38; break;
  case 38: 
   var $173=$k;
   var $174=((($173)+(1))|0);
   $k=$174;
   label = 17; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $177=$value;
   return $177;
  default: assert(0, "bad label: " + label);
 }
}
function _cvStartWriteStruct($fs, $key, $struct_flags, $type_name, $0) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $5;
   $2=$fs;
   $3=$key;
   $4=$struct_flags;
   $5=$type_name;
   var $6=$2;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$2;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==1280131417;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $14=$2;
   var $15=(($14)|(0))!=0;
   var $16=$15 ? -5 : -27;
   _cvError($16, ((6568)|0), ((8856)|0), ((13712)|0), 2863);
   label = 9; break;
  case 4: 
   var $18=$2;
   var $19=(($18+8)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-2, ((6568)|0), ((11448)|0), ((13712)|0), 2863);
   label = 9; break;
  case 6: 
   var $24=$2;
   var $25=(($24+224)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$2;
   var $28=$3;
   var $29=$4;
   var $30=$5;
   FUNCTION_TABLE[$26]($27, $28, $29, $30);
   var $31=_cvGetErrStatus();
   var $32=(($31)|(0)) < 0;
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((6568)|0), ((10080)|0), ((13712)|0), 2864);
   label = 9; break;
  case 8: 
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvWriteInt($fs, $key, $value) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$fs;
   $2=$key;
   $3=$value;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==1280131417;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $12=$1;
   var $13=(($12)|(0))!=0;
   var $14=$13 ? -5 : -27;
   _cvError($14, ((6528)|0), ((8856)|0), ((13712)|0), 2891);
   label = 9; break;
  case 4: 
   var $16=$1;
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-2, ((6528)|0), ((11448)|0), ((13712)|0), 2891);
   label = 9; break;
  case 6: 
   var $22=$1;
   var $23=(($22+232)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$1;
   var $26=$2;
   var $27=$3;
   FUNCTION_TABLE[$24]($25, $26, $27);
   var $28=_cvGetErrStatus();
   var $29=(($28)|(0)) < 0;
   if ($29) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((6528)|0), ((10080)|0), ((13712)|0), 2892);
   label = 9; break;
  case 8: 
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvWriteString($fs, $key, $value, $quote) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$fs;
   $2=$key;
   $3=$value;
   $4=$quote;
   var $5=$1;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=(($8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==1280131417;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=$1;
   var $14=(($13)|(0))!=0;
   var $15=$14 ? -5 : -27;
   _cvError($15, ((6472)|0), ((8856)|0), ((13712)|0), 2919);
   label = 9; break;
  case 4: 
   var $17=$1;
   var $18=(($17+8)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))!=0;
   if ($20) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-2, ((6472)|0), ((11448)|0), ((13712)|0), 2919);
   label = 9; break;
  case 6: 
   var $23=$1;
   var $24=(($23+240)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$1;
   var $27=$2;
   var $28=$3;
   var $29=$4;
   FUNCTION_TABLE[$25]($26, $27, $28, $29);
   var $30=_cvGetErrStatus();
   var $31=(($30)|(0)) < 0;
   if ($31) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((6472)|0), ((10080)|0), ((13712)|0), 2920);
   label = 9; break;
  case 8: 
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvWriteRawData($fs, $_data, $len, $dt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $data0;
   var $offset;
   var $fmt_pairs=sp;
   var $k;
   var $fmt_pair_count;
   var $buf=(sp)+(1024);
   var $i;
   var $count;
   var $elem_type;
   var $elem_size;
   var $data;
   var $ptr;
   var $buf_len;
   $1=$fs;
   $2=$_data;
   $3=$len;
   $4=$dt;
   var $5=$2;
   $data0=$5;
   $offset=0;
   var $6=$buf;
   _memset($6, 0, 256);
   var $7=$1;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==1280131417;
   if ($13) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $15=$1;
   var $16=(($15)|(0))!=0;
   var $17=$16 ? -5 : -27;
   _cvError($17, ((6392)|0), ((8856)|0), ((13712)|0), 3095);
   label = 45; break;
  case 4: 
   var $19=$1;
   var $20=(($19+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0))!=0;
   if ($22) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-2, ((6392)|0), ((11448)|0), ((13712)|0), 3095);
   label = 45; break;
  case 6: 
   var $25=$data0;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 8; break; } else { label = 7; break; }
  case 7: 
   _cvError(-27, ((6392)|0), ((10720)|0), ((13712)|0), 3098);
   label = 45; break;
  case 8: 
   var $29=$3;
   var $30=(($29)|(0)) < 0;
   if ($30) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-211, ((6392)|0), ((10632)|0), ((13712)|0), 3101);
   label = 45; break;
  case 10: 
   var $33=$4;
   var $34=(($fmt_pairs)|0);
   var $35=__ZL15icvDecodeFormatPKcPii($33, $34, 128);
   $fmt_pair_count=$35;
   var $36=_cvGetErrStatus();
   var $37=(($36)|(0)) < 0;
   if ($37) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-1, ((6392)|0), ((10080)|0), ((13712)|0), 3103);
   label = 45; break;
  case 12: 
   var $40=$3;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 14; break; } else { label = 13; break; }
  case 13: 
   label = 45; break;
  case 14: 
   var $44=$fmt_pair_count;
   var $45=(($44)|(0))==1;
   if ($45) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $47=$3;
   var $48=(($fmt_pairs)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(Math.imul($49,$47)|0);
   HEAP32[(($48)>>2)]=$50;
   $3=1;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $53=$3;
   var $54=((($53)-(1))|0);
   $3=$54;
   var $55=(($53)|(0))!=0;
   if ($55) { label = 18; break; } else { label = 44; break; }
  case 18: 
   $k=0;
   label = 19; break;
  case 19: 
   var $58=$k;
   var $59=$fmt_pair_count;
   var $60=(($58)|(0)) < (($59)|(0));
   if ($60) { label = 20; break; } else { label = 43; break; }
  case 20: 
   var $62=$k;
   var $63=($62<<1);
   var $64=(($fmt_pairs+($63<<2))|0);
   var $65=HEAP32[(($64)>>2)];
   $count=$65;
   var $66=$k;
   var $67=($66<<1);
   var $68=((($67)+(1))|0);
   var $69=(($fmt_pairs+($68<<2))|0);
   var $70=HEAP32[(($69)>>2)];
   $elem_type=$70;
   var $71=$elem_type;
   var $72=$71 & 504;
   var $73=$72 >> 3;
   var $74=((($73)+(1))|0);
   var $75=$elem_type;
   var $76=$75 & 7;
   var $77=($76<<1);
   var $78=47696 >>> (($77)>>>(0));
   var $79=$78 & 3;
   var $80=$74 << $79;
   $elem_size=$80;
   var $81=$offset;
   var $82=$elem_size;
   var $83=__Z7cvAlignii($81, $82);
   $offset=$83;
   var $84=$data0;
   var $85=$offset;
   var $86=(($84+$85)|0);
   $data=$86;
   $i=0;
   label = 21; break;
  case 21: 
   var $88=$i;
   var $89=$count;
   var $90=(($88)|(0)) < (($89)|(0));
   if ($90) { label = 22; break; } else { label = 41; break; }
  case 22: 
   var $92=$elem_type;
   if ((($92)|(0))==0) {
    label = 23; break;
   }
   else if ((($92)|(0))==1) {
    label = 24; break;
   }
   else if ((($92)|(0))==2) {
    label = 25; break;
   }
   else if ((($92)|(0))==3) {
    label = 26; break;
   }
   else if ((($92)|(0))==4) {
    label = 27; break;
   }
   else if ((($92)|(0))==5) {
    label = 28; break;
   }
   else if ((($92)|(0))==6) {
    label = 29; break;
   }
   else if ((($92)|(0))==7) {
    label = 30; break;
   }
   else {
   label = 31; break;
   }
  case 23: 
   var $94=$data;
   var $95=HEAP8[($94)];
   var $96=(($95)&(255));
   var $97=(($buf)|0);
   var $98=__ZL8icv_itoaiPci($96, $97, 10);
   $ptr=$98;
   var $99=$data;
   var $100=(($99+1)|0);
   $data=$100;
   label = 32; break;
  case 24: 
   var $102=$data;
   var $103=HEAP8[($102)];
   var $104=(($103 << 24) >> 24);
   var $105=(($buf)|0);
   var $106=__ZL8icv_itoaiPci($104, $105, 10);
   $ptr=$106;
   var $107=$data;
   var $108=(($107+1)|0);
   $data=$108;
   label = 32; break;
  case 25: 
   var $110=$data;
   var $111=$110;
   var $112=HEAP16[(($111)>>1)];
   var $113=(($112)&(65535));
   var $114=(($buf)|0);
   var $115=__ZL8icv_itoaiPci($113, $114, 10);
   $ptr=$115;
   var $116=$data;
   var $117=(($116+2)|0);
   $data=$117;
   label = 32; break;
  case 26: 
   var $119=$data;
   var $120=$119;
   var $121=HEAP16[(($120)>>1)];
   var $122=(($121 << 16) >> 16);
   var $123=(($buf)|0);
   var $124=__ZL8icv_itoaiPci($122, $123, 10);
   $ptr=$124;
   var $125=$data;
   var $126=(($125+2)|0);
   $data=$126;
   label = 32; break;
  case 27: 
   var $128=$data;
   var $129=$128;
   var $130=HEAP32[(($129)>>2)];
   var $131=(($buf)|0);
   var $132=__ZL8icv_itoaiPci($130, $131, 10);
   $ptr=$132;
   var $133=$data;
   var $134=(($133+4)|0);
   $data=$134;
   label = 32; break;
  case 28: 
   var $136=(($buf)|0);
   var $137=$data;
   var $138=$137;
   var $139=HEAPF32[(($138)>>2)];
   var $140=__ZL16icvFloatToStringPcf($136, $139);
   $ptr=$140;
   var $141=$data;
   var $142=(($141+4)|0);
   $data=$142;
   label = 32; break;
  case 29: 
   var $144=(($buf)|0);
   var $145=$data;
   var $146=$145;
   var $147=HEAPF64[(($146)>>3)];
   var $148=__ZL17icvDoubleToStringPcd($144, $147);
   $ptr=$148;
   var $149=$data;
   var $150=(($149+8)|0);
   $data=$150;
   label = 32; break;
  case 30: 
   var $152=$data;
   var $153=$152;
   var $154=HEAP32[(($153)>>2)];
   var $155=(($buf)|0);
   var $156=__ZL8icv_itoaiPci($154, $155, 10);
   $ptr=$156;
   var $157=$data;
   var $158=(($157+4)|0);
   $data=$158;
   label = 32; break;
  case 31: 
   label = 45; break;
  case 32: 
   var $161=$1;
   var $162=(($161+4)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163)|(0))!=0;
   if ($164) { label = 33; break; } else { label = 36; break; }
  case 33: 
   var $166=$ptr;
   var $167=_strlen($166);
   $buf_len=$167;
   var $168=$1;
   var $169=$ptr;
   var $170=$buf_len;
   __ZL17icvXMLWriteScalarP13CvFileStoragePKcS2_i($168, 0, $169, $170);
   var $171=_cvGetErrStatus();
   var $172=(($171)|(0)) < 0;
   if ($172) { label = 34; break; } else { label = 35; break; }
  case 34: 
   _cvError(-1, ((6392)|0), ((10080)|0), ((13712)|0), 3170);
   label = 45; break;
  case 35: 
   label = 39; break;
  case 36: 
   var $176=$1;
   var $177=$ptr;
   __ZL11icvYMLWriteP13CvFileStoragePKcS2_S2_($176, 0, $177, ((6392)|0));
   var $178=_cvGetErrStatus();
   var $179=(($178)|(0)) < 0;
   if ($179) { label = 37; break; } else { label = 38; break; }
  case 37: 
   _cvError(-1, ((6392)|0), ((10080)|0), ((13712)|0), 3173);
   label = 45; break;
  case 38: 
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $184=$i;
   var $185=((($184)+(1))|0);
   $i=$185;
   label = 21; break;
  case 41: 
   var $187=$data;
   var $188=$data0;
   var $189=$187;
   var $190=$188;
   var $191=((($189)-($190))|0);
   $offset=$191;
   label = 42; break;
  case 42: 
   var $193=$k;
   var $194=((($193)+(1))|0);
   $k=$194;
   label = 19; break;
  case 43: 
   label = 17; break;
  case 44: 
   label = 45; break;
  case 45: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL15icvDecodeFormatPKcPii($dt, $fmt_pairs, $max_len) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $fmt_pair_count;
   var $i;
   var $k;
   var $len;
   var $c;
   var $count;
   var $endptr=sp;
   var $pos;
   $1=$dt;
   $2=$fmt_pairs;
   $3=$max_len;
   $fmt_pair_count=0;
   $i=0;
   $k=0;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=_strlen($7);
   var $11 = $8;label = 4; break;
  case 3: 
   var $11 = 0;label = 4; break;
  case 4: 
   var $11;
   $len=$11;
   var $12=$1;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $15=$len;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 7; break; } else { label = 6; break; }
  case 6: 
   label = 29; break;
  case 7: 
   var $19=$2;
   var $20=(($19)|0);
   HEAP32[(($20)>>2)]=0;
   var $21=$3;
   var $22=($21<<1);
   $3=$22;
   label = 8; break;
  case 8: 
   var $24=$k;
   var $25=$len;
   var $26=(($24)|(0)) < (($25)|(0));
   if ($26) { label = 9; break; } else { label = 28; break; }
  case 9: 
   var $28=$k;
   var $29=$1;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   $c=$31;
   var $32=$c;
   var $33=(($32 << 24) >> 24);
   var $34=_isdigit($33);
   var $35=(($34)|(0))!=0;
   if ($35) { label = 10; break; } else { label = 15; break; }
  case 10: 
   var $37=$c;
   var $38=(($37 << 24) >> 24);
   var $39=((($38)-(48))|0);
   $count=$39;
   var $40=$k;
   var $41=((($40)+(1))|0);
   var $42=$1;
   var $43=(($42+$41)|0);
   var $44=HEAP8[($43)];
   var $45=(($44 << 24) >> 24);
   var $46=_isdigit($45);
   var $47=(($46)|(0))!=0;
   if ($47) { label = 11; break; } else { label = 12; break; }
  case 11: 
   HEAP32[(($endptr)>>2)]=0;
   var $49=$1;
   var $50=$k;
   var $51=(($49+$50)|0);
   var $52=_strtol($51, $endptr, 10);
   $count=$52;
   var $53=HEAP32[(($endptr)>>2)];
   var $54=$1;
   var $55=$53;
   var $56=$54;
   var $57=((($55)-($56))|0);
   var $58=((($57)-(1))|0);
   $k=$58;
   label = 12; break;
  case 12: 
   var $60=$count;
   var $61=(($60)|(0)) <= 0;
   if ($61) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-5, ((18072)|0), ((12712)|0), ((13712)|0), 2996);
   label = 29; break;
  case 14: 
   var $64=$count;
   var $65=$i;
   var $66=$2;
   var $67=(($66+($65<<2))|0);
   HEAP32[(($67)>>2)]=$64;
   label = 26; break;
  case 15: 
   var $69=$c;
   var $70=(($69 << 24) >> 24);
   var $71=_strchr(((23064)|0), $70);
   $pos=$71;
   var $72=$pos;
   var $73=(($72)|(0))!=0;
   if ($73) { label = 17; break; } else { label = 16; break; }
  case 16: 
   _cvError(-5, ((18072)|0), ((12712)|0), ((13712)|0), 3004);
   label = 29; break;
  case 17: 
   var $76=$i;
   var $77=$2;
   var $78=(($77+($76<<2))|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))==0;
   if ($80) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $82=$i;
   var $83=$2;
   var $84=(($83+($82<<2))|0);
   HEAP32[(($84)>>2)]=1;
   label = 19; break;
  case 19: 
   var $86=$pos;
   var $87=$86;
   var $88=((($87)-(23064))|0);
   var $89=$i;
   var $90=((($89)+(1))|0);
   var $91=$2;
   var $92=(($91+($90<<2))|0);
   HEAP32[(($92)>>2)]=$88;
   var $93=$i;
   var $94=(($93)|(0)) > 0;
   if ($94) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $96=$i;
   var $97=((($96)+(1))|0);
   var $98=$2;
   var $99=(($98+($97<<2))|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$i;
   var $102=((($101)-(1))|0);
   var $103=$2;
   var $104=(($103+($102<<2))|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($100)|(0))==(($105)|(0));
   if ($106) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $108=$i;
   var $109=$2;
   var $110=(($109+($108<<2))|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=$i;
   var $113=((($112)-(2))|0);
   var $114=$2;
   var $115=(($114+($113<<2))|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=((($116)+($111))|0);
   HEAP32[(($115)>>2)]=$117;
   label = 25; break;
  case 22: 
   var $119=$i;
   var $120=((($119)+(2))|0);
   $i=$120;
   var $121=$i;
   var $122=$3;
   var $123=(($121)|(0)) >= (($122)|(0));
   if ($123) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-5, ((18072)|0), ((12632)|0), ((13712)|0), 3014);
   label = 29; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $127=$i;
   var $128=$2;
   var $129=(($128+($127<<2))|0);
   HEAP32[(($129)>>2)]=0;
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $132=$k;
   var $133=((($132)+(1))|0);
   $k=$133;
   label = 8; break;
  case 28: 
   var $135=$i;
   var $136=((((($135)|(0)))/(2))&-1);
   $fmt_pair_count=$136;
   label = 29; break;
  case 29: 
   var $138=$fmt_pair_count;
   STACKTOP = sp;
   return $138;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL8icv_itoaiPci($_val, $buffer, $0) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $radix;
   var $ptr;
   var $val;
   var $r;
   $2=$_val;
   $3=$buffer;
   $4=$0;
   $radix=10;
   var $5=$3;
   var $6=(($5+23)|0);
   $ptr=$6;
   var $7=$2;
   var $8=Math.abs($7);
   $val=$8;
   var $9=$ptr;
   HEAP8[($9)]=0;
   label = 2; break;
  case 2: 
   var $11=$val;
   var $12=((((($11)>>>(0)))/(10))&-1);
   $r=$12;
   var $13=$val;
   var $14=$r;
   var $15=((($14)*(10))&-1);
   var $16=((($13)-($15))|0);
   var $17=((($16)+(48))|0);
   var $18=(($17) & 255);
   var $19=$ptr;
   var $20=((($19)-(1))|0);
   $ptr=$20;
   HEAP8[($20)]=$18;
   var $21=$r;
   $val=$21;
   label = 3; break;
  case 3: 
   var $23=$val;
   var $24=(($23)|(0))!=0;
   if ($24) { label = 2; break; } else { label = 4; break; }
  case 4: 
   var $26=$2;
   var $27=(($26)|(0)) < 0;
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$ptr;
   var $30=((($29)-(1))|0);
   $ptr=$30;
   HEAP8[($30)]=45;
   label = 6; break;
  case 6: 
   var $32=$ptr;
   return $32;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvFloatToStringPcf($buf, $value) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $val=sp;
   var $ieee754;
   var $ivalue;
   var $avalue;
   var $ptr;
   $1=$buf;
   $2=$value;
   var $3=$2;
   var $4=$val;
   HEAPF32[(($4)>>2)]=$3;
   var $5=$val;
   var $6=HEAP32[(($5)>>2)];
   $ieee754=$6;
   var $7=$ieee754;
   var $8=$7 & 2139095040;
   var $9=(($8)|(0))!=2139095040;
   if ($9) { label = 2; break; } else { label = 17; break; }
  case 2: 
   var $11=$2;
   var $12=$11;
   var $13=__Z7cvRoundd($12);
   $ivalue=$13;
   var $14=$ivalue;
   var $15=(($14)|(0));
   var $16=$2;
   var $17=$15 == $16;
   if ($17) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $19=$1;
   var $20=$ivalue;
   var $21=_sprintf($19, ((12856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$20,tempInt));
   label = 16; break;
  case 4: 
   var $23=$2;
   var $24=$23;
   var $25=Math.abs($24);
   $avalue=$25;
   var $26=$1;
   $ptr=$26;
   var $27=$1;
   var $28=$avalue;
   var $29=0.01 <= $28;
   if ($29) { label = 5; break; } else { var $34 = 0;label = 6; break; }
  case 5: 
   var $31=$avalue;
   var $32=$31 < 1000;
   var $34 = $32;label = 6; break;
  case 6: 
   var $34;
   var $35=(($34)&(1));
   var $36=((18032+($35<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$2;
   var $39=$38;
   var $40=_sprintf($27, $37, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$39,tempInt));
   var $41=$ptr;
   var $42=HEAP8[($41)];
   var $43=(($42 << 24) >> 24);
   var $44=(($43)|(0))==43;
   if ($44) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $46=$ptr;
   var $47=HEAP8[($46)];
   var $48=(($47 << 24) >> 24);
   var $49=(($48)|(0))==45;
   if ($49) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $51=$ptr;
   var $52=(($51+1)|0);
   $ptr=$52;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $55=$ptr;
   var $56=HEAP8[($55)];
   var $57=(($56 << 24) >> 24);
   var $58=_isdigit($57);
   var $59=(($58)|(0))!=0;
   if ($59) { label = 11; break; } else { label = 13; break; }
  case 11: 
   label = 12; break;
  case 12: 
   var $62=$ptr;
   var $63=(($62+1)|0);
   $ptr=$63;
   label = 10; break;
  case 13: 
   var $65=$ptr;
   var $66=HEAP8[($65)];
   var $67=(($66 << 24) >> 24);
   var $68=(($67)|(0))==44;
   if ($68) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $70=$ptr;
   HEAP8[($70)]=46;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 21; break;
  case 17: 
   var $74=$ieee754;
   var $75=$74 & 2147483647;
   var $76=(($75)|(0))!=2139095040;
   if ($76) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $78=$1;
   var $79=_strcpy($78, ((12784)|0));
   label = 20; break;
  case 19: 
   var $81=$1;
   var $82=$ieee754;
   var $83=(($82)|(0)) < 0;
   var $84=$83 ? (((12776)|0)) : (((12768)|0));
   var $85=_strcpy($81, $84);
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $88=$1;
   STACKTOP = sp;
   return $88;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvDoubleToStringPcd($buf, $value) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $val=sp;
   var $ieee754_hi;
   var $ivalue;
   var $avalue;
   var $ptr;
   var $ieee754_lo;
   $1=$buf;
   $2=$value;
   var $3=$2;
   var $4=$val;
   HEAPF64[(($4)>>3)]=$3;
   var $5=$val;
   var $ld$0$0=(($5)|0);
   var $6$0=HEAP32[(($ld$0$0)>>2)];
   var $ld$1$1=(($5+4)|0);
   var $6$1=HEAP32[(($ld$1$1)>>2)];
   var $7$0=$6$1;
   var $7$1=0;
   var $8$0=$7$0;
   var $8=$8$0;
   $ieee754_hi=$8;
   var $9=$ieee754_hi;
   var $10=$9 & 2146435072;
   var $11=(($10)|(0))!=2146435072;
   if ($11) { label = 2; break; } else { label = 17; break; }
  case 2: 
   var $13=$2;
   var $14=__Z7cvRoundd($13);
   $ivalue=$14;
   var $15=$ivalue;
   var $16=(($15)|(0));
   var $17=$2;
   var $18=$16 == $17;
   if ($18) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $20=$1;
   var $21=$ivalue;
   var $22=_sprintf($20, ((12856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$21,tempInt));
   label = 16; break;
  case 4: 
   var $24=$2;
   var $25=Math.abs($24);
   $avalue=$25;
   var $26=$1;
   $ptr=$26;
   var $27=$1;
   var $28=$avalue;
   var $29=0.01 <= $28;
   if ($29) { label = 5; break; } else { var $34 = 0;label = 6; break; }
  case 5: 
   var $31=$avalue;
   var $32=$31 < 1000;
   var $34 = $32;label = 6; break;
  case 6: 
   var $34;
   var $35=(($34)&(1));
   var $36=((17968+($35<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$2;
   var $39=_sprintf($27, $37, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$38,tempInt));
   var $40=$ptr;
   var $41=HEAP8[($40)];
   var $42=(($41 << 24) >> 24);
   var $43=(($42)|(0))==43;
   if ($43) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $45=$ptr;
   var $46=HEAP8[($45)];
   var $47=(($46 << 24) >> 24);
   var $48=(($47)|(0))==45;
   if ($48) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $50=$ptr;
   var $51=(($50+1)|0);
   $ptr=$51;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $54=$ptr;
   var $55=HEAP8[($54)];
   var $56=(($55 << 24) >> 24);
   var $57=_isdigit($56);
   var $58=(($57)|(0))!=0;
   if ($58) { label = 11; break; } else { label = 13; break; }
  case 11: 
   label = 12; break;
  case 12: 
   var $61=$ptr;
   var $62=(($61+1)|0);
   $ptr=$62;
   label = 10; break;
  case 13: 
   var $64=$ptr;
   var $65=HEAP8[($64)];
   var $66=(($65 << 24) >> 24);
   var $67=(($66)|(0))==44;
   if ($67) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $69=$ptr;
   HEAP8[($69)]=46;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 21; break;
  case 17: 
   var $73=$val;
   var $ld$2$0=(($73)|0);
   var $74$0=HEAP32[(($ld$2$0)>>2)];
   var $ld$3$1=(($73+4)|0);
   var $74$1=HEAP32[(($ld$3$1)>>2)];
   var $75$0=$74$0;
   var $75=$75$0;
   $ieee754_lo=$75;
   var $76=$ieee754_hi;
   var $77=$76 & 2147483647;
   var $78=$ieee754_lo;
   var $79=(($78)|(0))!=0;
   var $80=(($79)&(1));
   var $81=((($77)+($80))|0);
   var $82=(($81)>>>(0)) > 2146435072;
   if ($82) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $84=$1;
   var $85=_strcpy($84, ((12784)|0));
   label = 20; break;
  case 19: 
   var $87=$1;
   var $88=$ieee754_hi;
   var $89=(($88)|(0)) < 0;
   var $90=$89 ? (((12776)|0)) : (((12768)|0));
   var $91=_strcpy($87, $90);
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $94=$1;
   STACKTOP = sp;
   return $94;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvXMLWriteScalarP13CvFileStoragePKcS2_i($fs, $key, $data, $len) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5=sp;
   var $ptr;
   var $6=(sp)+(8);
   var $ptr1;
   var $new_offset;
   $1=$fs;
   $2=$key;
   $3=$data;
   $4=$len;
   var $7=$1;
   var $8=(($7+44)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 & 7;
   var $11=(($10)|(0))==6;
   if ($11) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $13=$1;
   var $14=(($13+44)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 7;
   var $17=(($16)|(0)) >= 5;
   if ($17) { label = 5; break; } else { label = 3; break; }
  case 3: 
   var $19=$2;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $22=$1;
   var $23=$2;
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   __ZL14icvXMLWriteTagP13CvFileStoragePKci10CvAttrList($22, $23, 1, $5);
   var $24=$1;
   var $25=$1;
   var $26=(($25+68)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$4;
   var $29=__Z22icvFSResizeWriteBufferP13CvFileStoragePci($24, $27, $28);
   $ptr=$29;
   var $30=$ptr;
   var $31=$3;
   var $32=$4;
   assert($32 % 1 === 0);(_memcpy($30, $31, $32)|0);
   var $33=$ptr;
   var $34=$4;
   var $35=(($33+$34)|0);
   var $36=$1;
   var $37=(($36+68)|0);
   HEAP32[(($37)>>2)]=$35;
   var $38=$1;
   var $39=$2;
   __Z10cvAttrListPPKcP10CvAttrList($6, 0, 0);
   __ZL14icvXMLWriteTagP13CvFileStoragePKci10CvAttrList($38, $39, 2, $6);
   label = 18; break;
  case 5: 
   var $41=$1;
   var $42=(($41+68)|0);
   var $43=HEAP32[(($42)>>2)];
   $ptr1=$43;
   var $44=$ptr1;
   var $45=$1;
   var $46=(($45+72)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$44;
   var $49=$47;
   var $50=((($48)-($49))|0);
   var $51=$4;
   var $52=((($50)+($51))|0);
   $new_offset=$52;
   var $53=$2;
   var $54=(($53)|(0))!=0;
   if ($54) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-5, ((17872)|0), ((13136)|0), ((13712)|0), 2456);
   label = 19; break;
  case 7: 
   var $57=$1;
   var $58=(($57+44)|0);
   HEAP32[(($58)>>2)]=5;
   var $59=$new_offset;
   var $60=$1;
   var $61=(($60+80)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($59)|(0)) > (($62)|(0));
   if ($63) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $65=$new_offset;
   var $66=$1;
   var $67=(($66+40)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=((($65)-($68))|0);
   var $70=(($69)|(0)) > 10;
   if ($70) { label = 12; break; } else { label = 9; break; }
  case 9: 
   var $72=$ptr1;
   var $73=$1;
   var $74=(($73+72)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($72)>>>(0)) > (($75)>>>(0));
   if ($76) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $78=$ptr1;
   var $79=((($78)-(1))|0);
   var $80=HEAP8[($79)];
   var $81=(($80 << 24) >> 24);
   var $82=(($81)|(0))==62;
   if ($82) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $84=$1;
   var $85=(($84+44)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$86 & 32;
   var $88=(($87)|(0))!=0;
   if ($88) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $90=$1;
   var $91=__ZL10icvFSFlushP13CvFileStorage($90);
   $ptr1=$91;
   label = 17; break;
  case 13: 
   var $93=$ptr1;
   var $94=$1;
   var $95=(($94+72)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$1;
   var $98=(($97+40)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($96+$99)|0);
   var $101=(($93)>>>(0)) > (($100)>>>(0));
   if ($101) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $103=$ptr1;
   var $104=((($103)-(1))|0);
   var $105=HEAP8[($104)];
   var $106=(($105 << 24) >> 24);
   var $107=(($106)|(0))!=62;
   if ($107) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $109=$ptr1;
   var $110=(($109+1)|0);
   $ptr1=$110;
   HEAP8[($109)]=32;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $113=$ptr1;
   var $114=$3;
   var $115=$4;
   assert($115 % 1 === 0);(_memcpy($113, $114, $115)|0);
   var $116=$ptr1;
   var $117=$4;
   var $118=(($116+$117)|0);
   var $119=$1;
   var $120=(($119+68)|0);
   HEAP32[(($120)>>2)]=$118;
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL11icvYMLWriteP13CvFileStoragePKcS2_S2_($fs, $key, $data, $cvFuncName) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $keylen;
   var $datalen;
   var $struct_flags;
   var $ptr;
   var $new_offset;
   var $c;
   $1=$fs;
   $2=$key;
   $3=$data;
   $4=$cvFuncName;
   $keylen=0;
   $datalen=0;
   var $5=$1;
   var $6=(($5+44)|0);
   var $7=HEAP32[(($6)>>2)];
   $struct_flags=$7;
   var $8=$2;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $11=$2;
   var $12=(($11)|0);
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24);
   var $15=(($14)|(0))==0;
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $2=0;
   label = 4; break;
  case 4: 
   var $18=$struct_flags;
   var $19=$18 & 7;
   var $20=(($19)|(0)) >= 5;
   if ($20) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $22=$struct_flags;
   var $23=$22 & 7;
   var $24=(($23)|(0))==6;
   var $25=(($24)&(1));
   var $26=$2;
   var $27=(($26)|(0))!=0;
   var $28=(($27)&(1));
   var $29=$25 ^ $28;
   var $30=(($29)|(0))!=0;
   if ($30) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $32=$4;
   _cvError(-5, $32, ((13328)|0), ((13712)|0), 1340);
   label = 50; break;
  case 7: 
   label = 9; break;
  case 8: 
   var $35=$1;
   var $36=(($35+12)|0);
   HEAP32[(($36)>>2)]=0;
   var $37=$2;
   var $38=(($37)|(0))!=0;
   var $39=$38 ? 6 : 5;
   var $40=32 | $39;
   $struct_flags=$40;
   label = 9; break;
  case 9: 
   var $42=$2;
   var $43=(($42)|(0))!=0;
   if ($43) { label = 10; break; } else { label = 15; break; }
  case 10: 
   var $45=$2;
   var $46=_strlen($45);
   $keylen=$46;
   var $47=$keylen;
   var $48=(($47)|(0))==0;
   if ($48) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $50=$4;
   _cvError(-5, $50, ((13304)|0), ((13712)|0), 1352);
   label = 50; break;
  case 12: 
   var $52=$keylen;
   var $53=(($52)|(0)) > 4096;
   if ($53) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $55=$4;
   _cvError(-5, $55, ((13272)|0), ((13712)|0), 1355);
   label = 50; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $58=$3;
   var $59=(($58)|(0))!=0;
   if ($59) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $61=$3;
   var $62=_strlen($61);
   $datalen=$62;
   label = 17; break;
  case 17: 
   var $64=$struct_flags;
   var $65=$64 & 8;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 18; break; } else { label = 25; break; }
  case 18: 
   var $68=$1;
   var $69=(($68+68)|0);
   var $70=HEAP32[(($69)>>2)];
   $ptr=$70;
   var $71=$struct_flags;
   var $72=$71 & 32;
   var $73=(($72)|(0))!=0;
   if ($73) { label = 20; break; } else { label = 19; break; }
  case 19: 
   var $75=$ptr;
   var $76=(($75+1)|0);
   $ptr=$76;
   HEAP8[($75)]=44;
   label = 20; break;
  case 20: 
   var $78=$ptr;
   var $79=$1;
   var $80=(($79+72)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$78;
   var $83=$81;
   var $84=((($82)-($83))|0);
   var $85=$keylen;
   var $86=((($84)+($85))|0);
   var $87=$datalen;
   var $88=((($86)+($87))|0);
   $new_offset=$88;
   var $89=$new_offset;
   var $90=$1;
   var $91=(($90+80)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($89)|(0)) > (($92)|(0));
   if ($93) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $95=$new_offset;
   var $96=$1;
   var $97=(($96+40)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=((($95)-($98))|0);
   var $100=(($99)|(0)) > 10;
   if ($100) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $102=$ptr;
   var $103=$1;
   var $104=(($103+68)|0);
   HEAP32[(($104)>>2)]=$102;
   var $105=$1;
   var $106=__ZL10icvFSFlushP13CvFileStorage($105);
   $ptr=$106;
   label = 24; break;
  case 23: 
   var $108=$ptr;
   var $109=(($108+1)|0);
   $ptr=$109;
   HEAP8[($108)]=32;
   label = 24; break;
  case 24: 
   label = 30; break;
  case 25: 
   var $112=$1;
   var $113=__ZL10icvFSFlushP13CvFileStorage($112);
   $ptr=$113;
   var $114=$struct_flags;
   var $115=$114 & 7;
   var $116=(($115)|(0))==6;
   if ($116) { label = 29; break; } else { label = 26; break; }
  case 26: 
   var $118=$ptr;
   var $119=(($118+1)|0);
   $ptr=$119;
   HEAP8[($118)]=45;
   var $120=$3;
   var $121=(($120)|(0))!=0;
   if ($121) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $123=$ptr;
   var $124=(($123+1)|0);
   $ptr=$124;
   HEAP8[($123)]=32;
   label = 28; break;
  case 28: 
   label = 29; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $128=$2;
   var $129=(($128)|(0))!=0;
   if ($129) { label = 31; break; } else { label = 47; break; }
  case 31: 
   var $131=$2;
   var $132=(($131)|0);
   var $133=HEAP8[($132)];
   var $134=(($133 << 24) >> 24);
   var $135=_isalpha($134);
   var $136=(($135)|(0))!=0;
   if ($136) { label = 34; break; } else { label = 32; break; }
  case 32: 
   var $138=$2;
   var $139=(($138)|0);
   var $140=HEAP8[($139)];
   var $141=(($140 << 24) >> 24);
   var $142=(($141)|(0))!=95;
   if ($142) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $144=$4;
   _cvError(-5, $144, ((13232)|0), ((13712)|0), 1390);
   label = 50; break;
  case 34: 
   var $146=$1;
   var $147=$ptr;
   var $148=$keylen;
   var $149=__Z22icvFSResizeWriteBufferP13CvFileStoragePci($146, $147, $148);
   $ptr=$149;
   $i=0;
   label = 35; break;
  case 35: 
   var $151=$i;
   var $152=$keylen;
   var $153=(($151)|(0)) < (($152)|(0));
   if ($153) { label = 36; break; } else { label = 43; break; }
  case 36: 
   var $155=$i;
   var $156=$2;
   var $157=(($156+$155)|0);
   var $158=HEAP8[($157)];
   var $159=(($158 << 24) >> 24);
   $c=$159;
   var $160=$c;
   var $161=(($160) & 255);
   var $162=$i;
   var $163=$ptr;
   var $164=(($163+$162)|0);
   HEAP8[($164)]=$161;
   var $165=$c;
   var $166=_isalnum($165);
   var $167=(($166)|(0))!=0;
   if ($167) { label = 41; break; } else { label = 37; break; }
  case 37: 
   var $169=$c;
   var $170=(($169)|(0))!=45;
   if ($170) { label = 38; break; } else { label = 41; break; }
  case 38: 
   var $172=$c;
   var $173=(($172)|(0))!=95;
   if ($173) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $175=$c;
   var $176=(($175)|(0))!=32;
   if ($176) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $178=$4;
   _cvError(-5, $178, ((13192)|0), ((13712)|0), 1400);
   label = 50; break;
  case 41: 
   label = 42; break;
  case 42: 
   var $181=$i;
   var $182=((($181)+(1))|0);
   $i=$182;
   label = 35; break;
  case 43: 
   var $184=$keylen;
   var $185=$ptr;
   var $186=(($185+$184)|0);
   $ptr=$186;
   var $187=$ptr;
   var $188=(($187+1)|0);
   $ptr=$188;
   HEAP8[($187)]=58;
   var $189=$struct_flags;
   var $190=$189 & 8;
   var $191=(($190)|(0))!=0;
   if ($191) { label = 46; break; } else { label = 44; break; }
  case 44: 
   var $193=$3;
   var $194=(($193)|(0))!=0;
   if ($194) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $196=$ptr;
   var $197=(($196+1)|0);
   $ptr=$197;
   HEAP8[($196)]=32;
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   var $200=$3;
   var $201=(($200)|(0))!=0;
   if ($201) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $203=$1;
   var $204=$ptr;
   var $205=$datalen;
   var $206=__Z22icvFSResizeWriteBufferP13CvFileStoragePci($203, $204, $205);
   $ptr=$206;
   var $207=$ptr;
   var $208=$3;
   var $209=$datalen;
   assert($209 % 1 === 0);(_memcpy($207, $208, $209)|0);
   var $210=$datalen;
   var $211=$ptr;
   var $212=(($211+$210)|0);
   $ptr=$212;
   label = 49; break;
  case 49: 
   var $214=$ptr;
   var $215=$1;
   var $216=(($215+68)|0);
   HEAP32[(($216)>>2)]=$214;
   var $217=$struct_flags;
   var $218=$217 & -33;
   var $219=$1;
   var $220=(($219+44)|0);
   HEAP32[(($220)>>2)]=$218;
   label = 50; break;
  case 50: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvStartReadRawData($fs, $src, $reader) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $node_type;
   $1=$fs;
   $2=$src;
   $3=$reader;
   var $4=$1;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==1280131417;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $12=$1;
   var $13=(($12)|(0))!=0;
   var $14=$13 ? -5 : -27;
   _cvError($14, ((6312)|0), ((8856)|0), ((13712)|0), 3192);
   label = 20; break;
  case 4: 
   var $16=$2;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $19=$3;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 7; break; } else { label = 6; break; }
  case 6: 
   _cvError(-27, ((6312)|0), ((10424)|0), ((13712)|0), 3195);
   label = 20; break;
  case 7: 
   var $23=$2;
   var $24=(($23)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25 & 7;
   $node_type=$26;
   var $27=$node_type;
   var $28=(($27)|(0))==1;
   if ($28) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $30=$node_type;
   var $31=(($30)|(0))==2;
   if ($31) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $33=$2;
   var $34=$33;
   var $35=$3;
   var $36=(($35+12)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=$3;
   var $38=(($37+12)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+32)|0);
   var $41=$3;
   var $42=(($41+20)|0);
   HEAP32[(($42)>>2)]=$40;
   var $43=$3;
   var $44=(($43+12)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$3;
   var $47=(($46+16)|0);
   HEAP32[(($47)>>2)]=$45;
   var $48=$3;
   var $49=(($48+4)|0);
   HEAP32[(($49)>>2)]=0;
   label = 19; break;
  case 10: 
   var $51=$node_type;
   var $52=(($51)|(0))==5;
   if ($52) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $54=$2;
   var $55=(($54+8)|0);
   var $56=$55;
   var $57=HEAP32[(($56)>>2)];
   var $58=$3;
   _cvStartReadSeq($57, $58, 0);
   var $59=_cvGetErrStatus();
   var $60=(($59)|(0)) < 0;
   if ($60) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _cvError(-1, ((6312)|0), ((10080)|0), ((13712)|0), 3208);
   label = 20; break;
  case 13: 
   label = 18; break;
  case 14: 
   var $64=$node_type;
   var $65=(($64)|(0))==0;
   if ($65) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $67=$3;
   var $68=$67;
   _memset($68, 0, 32);
   label = 17; break;
  case 16: 
   _cvError(-5, ((6312)|0), ((10280)|0), ((13712)|0), 3215);
   label = 20; break;
  case 17: 
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReadRawDataSlice($fs, $reader, $len, $_data, $dt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $data0;
   var $fmt_pairs=sp;
   var $k;
   var $fmt_pair_count;
   var $i;
   var $offset;
   var $count;
   var $elem_type;
   var $elem_size;
   var $data;
   var $node;
   var $ival;
   var $fval;
   var $ival1;
   $1=$fs;
   $2=$reader;
   $3=$len;
   $4=$_data;
   $5=$dt;
   var $6=$4;
   $data0=$6;
   $k=0;
   $i=0;
   $offset=0;
   $count=0;
   var $7=$1;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==1280131417;
   if ($13) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $15=$1;
   var $16=(($15)|(0))!=0;
   var $17=$16 ? -5 : -27;
   _cvError($17, ((6232)|0), ((8856)|0), ((13712)|0), 3233);
   label = 82; break;
  case 4: 
   var $19=$2;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $22=$data0;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 7; break; } else { label = 6; break; }
  case 6: 
   _cvError(-27, ((6232)|0), ((10104)|0), ((13712)|0), 3236);
   label = 82; break;
  case 7: 
   var $26=$2;
   var $27=(($26+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))!=0;
   if ($29) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $31=$3;
   var $32=(($31)|(0))!=1;
   if ($32) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-201, ((6232)|0), ((10024)|0), ((13712)|0), 3239);
   label = 82; break;
  case 10: 
   var $35=$5;
   var $36=(($fmt_pairs)|0);
   var $37=__ZL15icvDecodeFormatPKcPii($35, $36, 128);
   $fmt_pair_count=$37;
   var $38=_cvGetErrStatus();
   var $39=(($38)|(0)) < 0;
   if ($39) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-1, ((6232)|0), ((10080)|0), ((13712)|0), 3241);
   label = 82; break;
  case 12: 
   label = 13; break;
  case 13: 
   $k=0;
   label = 14; break;
  case 14: 
   var $44=$k;
   var $45=$fmt_pair_count;
   var $46=(($44)|(0)) < (($45)|(0));
   if ($46) { label = 15; break; } else { label = 75; break; }
  case 15: 
   var $48=$k;
   var $49=($48<<1);
   var $50=((($49)+(1))|0);
   var $51=(($fmt_pairs+($50<<2))|0);
   var $52=HEAP32[(($51)>>2)];
   $elem_type=$52;
   var $53=$elem_type;
   var $54=$53 & 504;
   var $55=$54 >> 3;
   var $56=((($55)+(1))|0);
   var $57=$elem_type;
   var $58=$57 & 7;
   var $59=($58<<1);
   var $60=47696 >>> (($59)>>>(0));
   var $61=$60 & 3;
   var $62=$56 << $61;
   $elem_size=$62;
   var $63=$k;
   var $64=($63<<1);
   var $65=(($fmt_pairs+($64<<2))|0);
   var $66=HEAP32[(($65)>>2)];
   $count=$66;
   var $67=$offset;
   var $68=$elem_size;
   var $69=__Z7cvAlignii($67, $68);
   $offset=$69;
   var $70=$data0;
   var $71=$offset;
   var $72=(($70+$71)|0);
   $data=$72;
   $i=0;
   label = 16; break;
  case 16: 
   var $74=$i;
   var $75=$count;
   var $76=(($74)|(0)) < (($75)|(0));
   if ($76) { label = 17; break; } else { label = 73; break; }
  case 17: 
   var $78=$2;
   var $79=(($78+12)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$80;
   $node=$81;
   var $82=$node;
   var $83=(($82)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$84 & 7;
   var $86=(($85)|(0))==1;
   if ($86) { label = 18; break; } else { label = 41; break; }
  case 18: 
   var $88=$node;
   var $89=(($88+8)|0);
   var $90=$89;
   var $91=HEAP32[(($90)>>2)];
   $ival=$91;
   var $92=$elem_type;
   if ((($92)|(0))==0) {
    label = 19; break;
   }
   else if ((($92)|(0))==1) {
    label = 23; break;
   }
   else if ((($92)|(0))==2) {
    label = 27; break;
   }
   else if ((($92)|(0))==3) {
    label = 31; break;
   }
   else if ((($92)|(0))==4) {
    label = 35; break;
   }
   else if ((($92)|(0))==5) {
    label = 36; break;
   }
   else if ((($92)|(0))==6) {
    label = 37; break;
   }
   else if ((($92)|(0))==7) {
    label = 38; break;
   }
   else {
   label = 39; break;
   }
  case 19: 
   var $94=$ival;
   var $95=$94 & -256;
   var $96=(($95)|(0))!=0;
   if ($96) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $98=$ival;
   var $104 = $98;label = 22; break;
  case 21: 
   var $100=$ival;
   var $101=(($100)|(0)) > 0;
   var $102=$101 ? 255 : 0;
   var $104 = $102;label = 22; break;
  case 22: 
   var $104;
   var $105=(($104) & 255);
   var $106=$data;
   HEAP8[($106)]=$105;
   var $107=$data;
   var $108=(($107+1)|0);
   $data=$108;
   label = 40; break;
  case 23: 
   var $110=$ival;
   var $111=((($110)+(128))|0);
   var $112=$111 & -256;
   var $113=(($112)|(0))!=0;
   if ($113) { label = 25; break; } else { label = 24; break; }
  case 24: 
   var $115=$ival;
   var $121 = $115;label = 26; break;
  case 25: 
   var $117=$ival;
   var $118=(($117)|(0)) > 0;
   var $119=$118 ? 127 : -128;
   var $121 = $119;label = 26; break;
  case 26: 
   var $121;
   var $122=(($121) & 255);
   var $123=$data;
   HEAP8[($123)]=$122;
   label = 40; break;
  case 27: 
   var $125=$ival;
   var $126=$125 & -65536;
   var $127=(($126)|(0))!=0;
   if ($127) { label = 29; break; } else { label = 28; break; }
  case 28: 
   var $129=$ival;
   var $135 = $129;label = 30; break;
  case 29: 
   var $131=$ival;
   var $132=(($131)|(0)) > 0;
   var $133=$132 ? 65535 : 0;
   var $135 = $133;label = 30; break;
  case 30: 
   var $135;
   var $136=(($135) & 65535);
   var $137=$data;
   var $138=$137;
   HEAP16[(($138)>>1)]=$136;
   var $139=$data;
   var $140=(($139+2)|0);
   $data=$140;
   label = 40; break;
  case 31: 
   var $142=$ival;
   var $143=((($142)+(32768))|0);
   var $144=$143 & -65536;
   var $145=(($144)|(0))!=0;
   if ($145) { label = 33; break; } else { label = 32; break; }
  case 32: 
   var $147=$ival;
   var $153 = $147;label = 34; break;
  case 33: 
   var $149=$ival;
   var $150=(($149)|(0)) > 0;
   var $151=$150 ? 32767 : -32768;
   var $153 = $151;label = 34; break;
  case 34: 
   var $153;
   var $154=(($153) & 65535);
   var $155=$data;
   var $156=$155;
   HEAP16[(($156)>>1)]=$154;
   var $157=$data;
   var $158=(($157+2)|0);
   $data=$158;
   label = 40; break;
  case 35: 
   var $160=$ival;
   var $161=$data;
   var $162=$161;
   HEAP32[(($162)>>2)]=$160;
   var $163=$data;
   var $164=(($163+4)|0);
   $data=$164;
   label = 40; break;
  case 36: 
   var $166=$ival;
   var $167=(($166)|(0));
   var $168=$data;
   var $169=$168;
   HEAPF32[(($169)>>2)]=$167;
   var $170=$data;
   var $171=(($170+4)|0);
   $data=$171;
   label = 40; break;
  case 37: 
   var $173=$ival;
   var $174=(($173)|(0));
   var $175=$data;
   var $176=$175;
   HEAPF64[(($176)>>3)]=$174;
   var $177=$data;
   var $178=(($177+8)|0);
   $data=$178;
   label = 40; break;
  case 38: 
   var $180=$ival;
   var $181=$data;
   var $182=$181;
   HEAP32[(($182)>>2)]=$180;
   var $183=$data;
   var $184=(($183+4)|0);
   $data=$184;
   label = 40; break;
  case 39: 
   label = 82; break;
  case 40: 
   label = 67; break;
  case 41: 
   var $188=$node;
   var $189=(($188)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=$190 & 7;
   var $192=(($191)|(0))==2;
   if ($192) { label = 42; break; } else { label = 65; break; }
  case 42: 
   var $194=$node;
   var $195=(($194+8)|0);
   var $196=$195;
   var $197=HEAPF64[(($196)>>3)];
   $fval=$197;
   var $198=$elem_type;
   if ((($198)|(0))==0) {
    label = 43; break;
   }
   else if ((($198)|(0))==1) {
    label = 47; break;
   }
   else if ((($198)|(0))==2) {
    label = 51; break;
   }
   else if ((($198)|(0))==3) {
    label = 55; break;
   }
   else if ((($198)|(0))==4) {
    label = 59; break;
   }
   else if ((($198)|(0))==5) {
    label = 60; break;
   }
   else if ((($198)|(0))==6) {
    label = 61; break;
   }
   else if ((($198)|(0))==7) {
    label = 62; break;
   }
   else {
   label = 63; break;
   }
  case 43: 
   var $200=$fval;
   var $201=__Z7cvRoundd($200);
   $ival1=$201;
   var $202=$ival1;
   var $203=$202 & -256;
   var $204=(($203)|(0))!=0;
   if ($204) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $206=$ival1;
   var $212 = $206;label = 46; break;
  case 45: 
   var $208=$ival1;
   var $209=(($208)|(0)) > 0;
   var $210=$209 ? 255 : 0;
   var $212 = $210;label = 46; break;
  case 46: 
   var $212;
   var $213=(($212) & 255);
   var $214=$data;
   HEAP8[($214)]=$213;
   var $215=$data;
   var $216=(($215+1)|0);
   $data=$216;
   label = 64; break;
  case 47: 
   var $218=$fval;
   var $219=__Z7cvRoundd($218);
   $ival1=$219;
   var $220=$ival1;
   var $221=((($220)+(128))|0);
   var $222=$221 & -256;
   var $223=(($222)|(0))!=0;
   if ($223) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $225=$ival1;
   var $231 = $225;label = 50; break;
  case 49: 
   var $227=$ival1;
   var $228=(($227)|(0)) > 0;
   var $229=$228 ? 127 : -128;
   var $231 = $229;label = 50; break;
  case 50: 
   var $231;
   var $232=(($231) & 255);
   var $233=$data;
   HEAP8[($233)]=$232;
   label = 64; break;
  case 51: 
   var $235=$fval;
   var $236=__Z7cvRoundd($235);
   $ival1=$236;
   var $237=$ival1;
   var $238=$237 & -65536;
   var $239=(($238)|(0))!=0;
   if ($239) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $241=$ival1;
   var $247 = $241;label = 54; break;
  case 53: 
   var $243=$ival1;
   var $244=(($243)|(0)) > 0;
   var $245=$244 ? 65535 : 0;
   var $247 = $245;label = 54; break;
  case 54: 
   var $247;
   var $248=(($247) & 65535);
   var $249=$data;
   var $250=$249;
   HEAP16[(($250)>>1)]=$248;
   var $251=$data;
   var $252=(($251+2)|0);
   $data=$252;
   label = 64; break;
  case 55: 
   var $254=$fval;
   var $255=__Z7cvRoundd($254);
   $ival1=$255;
   var $256=$ival1;
   var $257=((($256)+(32768))|0);
   var $258=$257 & -65536;
   var $259=(($258)|(0))!=0;
   if ($259) { label = 57; break; } else { label = 56; break; }
  case 56: 
   var $261=$ival1;
   var $267 = $261;label = 58; break;
  case 57: 
   var $263=$ival1;
   var $264=(($263)|(0)) > 0;
   var $265=$264 ? 32767 : -32768;
   var $267 = $265;label = 58; break;
  case 58: 
   var $267;
   var $268=(($267) & 65535);
   var $269=$data;
   var $270=$269;
   HEAP16[(($270)>>1)]=$268;
   var $271=$data;
   var $272=(($271+2)|0);
   $data=$272;
   label = 64; break;
  case 59: 
   var $274=$fval;
   var $275=__Z7cvRoundd($274);
   $ival1=$275;
   var $276=$ival1;
   var $277=$data;
   var $278=$277;
   HEAP32[(($278)>>2)]=$276;
   var $279=$data;
   var $280=(($279+4)|0);
   $data=$280;
   label = 64; break;
  case 60: 
   var $282=$fval;
   var $283=$282;
   var $284=$data;
   var $285=$284;
   HEAPF32[(($285)>>2)]=$283;
   var $286=$data;
   var $287=(($286+4)|0);
   $data=$287;
   label = 64; break;
  case 61: 
   var $289=$fval;
   var $290=$data;
   var $291=$290;
   HEAPF64[(($291)>>3)]=$289;
   var $292=$data;
   var $293=(($292+8)|0);
   $data=$293;
   label = 64; break;
  case 62: 
   var $295=$fval;
   var $296=__Z7cvRoundd($295);
   $ival1=$296;
   var $297=$ival1;
   var $298=$data;
   var $299=$298;
   HEAP32[(($299)>>2)]=$297;
   var $300=$data;
   var $301=(($300+4)|0);
   $data=$301;
   label = 64; break;
  case 63: 
   label = 82; break;
  case 64: 
   label = 66; break;
  case 65: 
   _cvError(-2, ((6232)|0), ((9976)|0), ((13712)|0), 3351);
   label = 82; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $307=$2;
   var $308=(($307+12)|0);
   var $309=HEAP32[(($308)>>2)];
   var $310=(($309+16)|0);
   HEAP32[(($308)>>2)]=$310;
   var $311=$2;
   var $312=(($311+20)|0);
   var $313=HEAP32[(($312)>>2)];
   var $314=(($310)>>>(0)) >= (($313)>>>(0));
   if ($314) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $316=$2;
   var $317=$316;
   _cvChangeSeqBlock($317, 1);
   label = 69; break;
  case 69: 
   var $319=$3;
   var $320=((($319)-(1))|0);
   $3=$320;
   var $321=(($320)|(0))!=0;
   if ($321) { label = 71; break; } else { label = 70; break; }
  case 70: 
   label = 76; break;
  case 71: 
   label = 72; break;
  case 72: 
   var $325=$i;
   var $326=((($325)+(1))|0);
   $i=$326;
   label = 16; break;
  case 73: 
   var $328=$data;
   var $329=$data0;
   var $330=$328;
   var $331=$329;
   var $332=((($330)-($331))|0);
   $offset=$332;
   label = 74; break;
  case 74: 
   var $334=$k;
   var $335=((($334)+(1))|0);
   $k=$335;
   label = 14; break;
  case 75: 
   label = 13; break;
  case 76: 
   var $338=$i;
   var $339=$count;
   var $340=((($339)-(1))|0);
   var $341=(($338)|(0))!=(($340)|(0));
   if ($341) { label = 78; break; } else { label = 77; break; }
  case 77: 
   var $343=$k;
   var $344=$fmt_pair_count;
   var $345=((($344)-(1))|0);
   var $346=(($343)|(0))!=(($345)|(0));
   if ($346) { label = 78; break; } else { label = 79; break; }
  case 78: 
   _cvError(-201, ((6232)|0), ((9784)|0), ((13712)|0), 3365);
   label = 82; break;
  case 79: 
   var $349=$2;
   var $350=(($349+4)|0);
   var $351=HEAP32[(($350)>>2)];
   var $352=(($351)|(0))!=0;
   if ($352) { label = 81; break; } else { label = 80; break; }
  case 80: 
   var $354=$2;
   var $355=(($354+12)|0);
   var $356=HEAP32[(($355)>>2)];
   var $357=((($356)-(16))|0);
   HEAP32[(($355)>>2)]=$357;
   label = 81; break;
  case 81: 
   label = 82; break;
  case 82: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReadRawData($fs, $src, $data, $dt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $reader=sp;
   $1=$fs;
   $2=$src;
   $3=$data;
   $4=$dt;
   var $5=$2;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$3;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-27, ((6200)|0), ((9552)|0), ((13712)|0), 3385);
   label = 10; break;
  case 4: 
   var $12=$1;
   var $13=$2;
   _cvStartReadRawData($12, $13, $reader);
   var $14=_cvGetErrStatus();
   var $15=(($14)|(0)) < 0;
   if ($15) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((6200)|0), ((10080)|0), ((13712)|0), 3387);
   label = 10; break;
  case 6: 
   var $18=$1;
   var $19=$2;
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$21 & 7;
   var $23=(($22)|(0))==5;
   if ($23) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $25=$2;
   var $26=(($25+8)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+24)|0);
   var $30=HEAP32[(($29)>>2)];
   var $33 = $30;label = 9; break;
  case 8: 
   var $33 = 1;label = 9; break;
  case 9: 
   var $33;
   var $34=$3;
   var $35=$4;
   _cvReadRawDataSlice($18, $reader, $33, $34, $35);
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E($this, $type_name, $is_instance, $release, $read, $write, $clone) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $_info=sp;
 $1=$this;
 $2=$type_name;
 $3=$is_instance;
 $4=$release;
 $5=$read;
 $6=$write;
 $7=$clone;
 var $8=$1;
 var $9=(($_info)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=(($_info+4)|0);
 HEAP32[(($10)>>2)]=40;
 var $11=$2;
 var $12=(($_info+16)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=(($_info+12)|0);
 HEAP32[(($13)>>2)]=0;
 var $14=(($_info+8)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$3;
 var $16=(($_info+20)|0);
 HEAP32[(($16)>>2)]=$15;
 var $17=$4;
 var $18=(($_info+24)|0);
 HEAP32[(($18)>>2)]=$17;
 var $19=$7;
 var $20=(($_info+36)|0);
 HEAP32[(($20)>>2)]=$19;
 var $21=$5;
 var $22=(($_info+28)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=$6;
 var $24=(($_info+32)|0);
 HEAP32[(($24)>>2)]=$23;
 _cvRegisterType($_info);
 var $25=HEAP32[((37560)>>2)];
 var $26=(($8)|0);
 HEAP32[(($26)>>2)]=$25;
 STACKTOP = sp;
 return;
}
function _cvRegisterType($_info) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $info;
   var $i;
   var $len;
   var $c;
   $1=$_info;
   $info=0;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=40;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-201, ((5992)|0), ((8784)|0), ((13712)|0), 4883);
   label = 26; break;
  case 4: 
   var $11=$1;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $16=$1;
   var $17=(($16+24)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $21=$1;
   var $22=(($21+28)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))!=0;
   if ($24) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $26=$1;
   var $27=(($26+32)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))!=0;
   if ($29) { label = 9; break; } else { label = 8; break; }
  case 8: 
   _cvError(-27, ((5992)|0), ((8696)|0), ((13712)|0), 4889);
   label = 26; break;
  case 9: 
   var $32=$1;
   var $33=(($32+16)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|0);
   var $36=HEAP8[($35)];
   $c=$36;
   var $37=$c;
   var $38=(($37 << 24) >> 24);
   var $39=_isalpha($38);
   var $40=(($39)|(0))!=0;
   if ($40) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $42=$c;
   var $43=(($42 << 24) >> 24);
   var $44=(($43)|(0))!=95;
   if ($44) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-5, ((5992)|0), ((8648)|0), ((13712)|0), 4893);
   label = 26; break;
  case 12: 
   var $47=$1;
   var $48=(($47+16)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=_strlen($49);
   $len=$50;
   $i=0;
   label = 13; break;
  case 13: 
   var $52=$i;
   var $53=$len;
   var $54=(($52)|(0)) < (($53)|(0));
   if ($54) { label = 14; break; } else { label = 20; break; }
  case 14: 
   var $56=$i;
   var $57=$1;
   var $58=(($57+16)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59+$56)|0);
   var $61=HEAP8[($60)];
   $c=$61;
   var $62=$c;
   var $63=(($62 << 24) >> 24);
   var $64=_isalnum($63);
   var $65=(($64)|(0))!=0;
   if ($65) { label = 18; break; } else { label = 15; break; }
  case 15: 
   var $67=$c;
   var $68=(($67 << 24) >> 24);
   var $69=(($68)|(0))!=45;
   if ($69) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $71=$c;
   var $72=(($71 << 24) >> 24);
   var $73=(($72)|(0))!=95;
   if ($73) { label = 17; break; } else { label = 18; break; }
  case 17: 
   _cvError(-5, ((5992)|0), ((8560)|0), ((13712)|0), 4902);
   label = 26; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $77=$i;
   var $78=((($77)+(1))|0);
   $i=$78;
   label = 13; break;
  case 20: 
   var $80=$len;
   var $81=((($80)+(40))|0);
   var $82=((($81)+(1))|0);
   var $83=_cvAlloc($82);
   var $84=$83;
   $info=$84;
   var $85=_cvGetErrStatus();
   var $86=(($85)|(0)) < 0;
   if ($86) { label = 21; break; } else { label = 22; break; }
  case 21: 
   _cvError(-1, ((5992)|0), ((10080)|0), ((13712)|0), 4905);
   label = 26; break;
  case 22: 
   var $89=$info;
   var $90=$1;
   var $91=$89;
   var $92=$90;
   assert(40 % 1 === 0);(_memcpy($91, $92, 40)|0);
   var $93=$info;
   var $94=(($93+40)|0);
   var $95=$94;
   var $96=$info;
   var $97=(($96+16)|0);
   HEAP32[(($97)>>2)]=$95;
   var $98=$info;
   var $99=(($98+16)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=$1;
   var $102=(($101+16)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$len;
   var $105=((($104)+(1))|0);
   assert($105 % 1 === 0);(_memcpy($100, $103, $105)|0);
   var $106=$info;
   var $107=(($106)|0);
   HEAP32[(($107)>>2)]=0;
   var $108=HEAP32[((37560)>>2)];
   var $109=$info;
   var $110=(($109+12)|0);
   HEAP32[(($110)>>2)]=$108;
   var $111=$info;
   var $112=(($111+8)|0);
   HEAP32[(($112)>>2)]=0;
   var $113=HEAP32[((37560)>>2)];
   var $114=(($113)|(0))!=0;
   if ($114) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $116=$info;
   var $117=HEAP32[((37560)>>2)];
   var $118=(($117+8)|0);
   HEAP32[(($118)>>2)]=$116;
   label = 25; break;
  case 24: 
   var $120=$info;
   HEAP32[((37568)>>2)]=$120;
   label = 25; break;
  case 25: 
   var $122=$info;
   HEAP32[((37560)>>2)]=$122;
   label = 26; break;
  case 26: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN6CvTypeD2Ev($this) {
 var label = 0;
 var $1;
 $1=$this;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+16)|0);
 var $6=HEAP32[(($5)>>2)];
 _cvUnregisterType($6);
 return;
}
function __ZL8icvIsSeqPKv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { var $12 = 0;label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1117323264;
   var $12 = $10;label = 3; break;
  case 3: 
   var $12;
   var $13=(($12)&(1));
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _cvUnregisterType($type_name) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $info;
   $1=$type_name;
   var $2=$1;
   var $3=_cvFindType($2);
   $info=$3;
   var $4=_cvGetErrStatus();
   var $5=(($4)|(0)) < 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((5936)|0), ((10080)|0), ((13712)|0), 4933);
   label = 15; break;
  case 3: 
   var $8=$info;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 14; break; }
  case 4: 
   var $11=$info;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $16=$info;
   var $17=(($16+12)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$info;
   var $20=(($19+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+12)|0);
   HEAP32[(($22)>>2)]=$18;
   label = 7; break;
  case 6: 
   var $24=$info;
   var $25=(($24+12)|0);
   var $26=HEAP32[(($25)>>2)];
   HEAP32[((37560)>>2)]=$26;
   label = 7; break;
  case 7: 
   var $28=$info;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))!=0;
   if ($31) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $33=$info;
   var $34=(($33+8)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$info;
   var $37=(($36+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+8)|0);
   HEAP32[(($39)>>2)]=$35;
   label = 10; break;
  case 9: 
   var $41=$info;
   var $42=(($41+8)|0);
   var $43=HEAP32[(($42)>>2)];
   HEAP32[((37568)>>2)]=$43;
   label = 10; break;
  case 10: 
   var $45=HEAP32[((37560)>>2)];
   var $46=(($45)|(0))!=0;
   if ($46) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $48=HEAP32[((37568)>>2)];
   var $49=(($48)|(0))!=0;
   if ($49) { label = 13; break; } else { label = 12; break; }
  case 12: 
   HEAP32[((37568)>>2)]=0;
   HEAP32[((37560)>>2)]=0;
   label = 13; break;
  case 13: 
   var $52=$info;
   var $53=$52;
   _cvFree_($53);
   $info=0;
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_var_init681() {
 var label = 0;
 __ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E(23712, ((9536)|0), 344, 256, 708, 14, 52);
 var $1=_atexit((298), 23712, ___dso_handle);
 return;
}
function __ZL13icvReleaseSeqPPv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((18184)|0), ((8368)|0), ((13712)|0), 4059);
   label = 4; break;
  case 3: 
   var $6=$1;
   HEAP32[(($6)>>2)]=0;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL10icvReadSeqP13CvFileStorageP10CvFileNode($fs, $node) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 552)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $seq;
   var $block;
   var $data;
   var $header_node;
   var $rect_node;
   var $origin_node;
   var $reader=sp;
   var $total;
   var $flags;
   var $elem_size;
   var $header_size;
   var $fmt_pairs=(sp)+(32);
   var $i;
   var $fmt_pair_count;
   var $items_per_elem;
   var $flags_str;
   var $header_dt;
   var $dt;
   var $endptr=(sp)+(544);
   var $point_seq;
   var $chain;
   var $delta;
   $1=$fs;
   $2=$node;
   $ptr=0;
   $header_size=56;
   $items_per_elem=0;
   HEAP32[(($endptr)>>2)]=0;
   var $3=$1;
   var $4=$2;
   var $5=_cvReadStringByName($3, $4, ((15248)|0), 0);
   $flags_str=$5;
   var $6=_cvGetErrStatus();
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18360)|0), ((10080)|0), ((13712)|0), 4300);
   label = 55; break;
  case 3: 
   var $10=$1;
   var $11=$2;
   var $12=_cvReadIntByName($10, $11, ((13680)|0), -1);
   $total=$12;
   var $13=$1;
   var $14=$2;
   var $15=_cvReadStringByName($13, $14, ((7528)|0), 0);
   $dt=$15;
   var $16=$flags_str;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $19=$total;
   var $20=(($19)|(0))==-1;
   if ($20) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $22=$dt;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 7; break; } else { label = 6; break; }
  case 6: 
   _cvError(-2, ((18360)|0), ((14600)|0), ((13712)|0), 4305);
   label = 55; break;
  case 7: 
   var $26=$flags_str;
   var $27=_strtol($26, $endptr, 16);
   $flags=$27;
   var $28=HEAP32[(($endptr)>>2)];
   var $29=$flags_str;
   var $30=(($28)|(0))==(($29)|(0));
   if ($30) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $32=$flags;
   var $33=$32 & -65536;
   var $34=(($33)|(0))!=1117323264;
   if ($34) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-2, ((18360)|0), ((13648)|0), ((13712)|0), 4309);
   label = 55; break;
  case 10: 
   var $37=$1;
   var $38=$2;
   var $39=_cvReadStringByName($37, $38, ((15072)|0), 0);
   $header_dt=$39;
   var $40=$1;
   var $41=$2;
   var $42=_cvGetFileNodeByName($40, $41, ((14824)|0));
   $header_node=$42;
   var $43=$header_dt;
   var $44=(($43)|(0))!=0;
   var $45=(($44)&(1));
   var $46=$header_node;
   var $47=(($46)|(0))!=0;
   var $48=(($47)&(1));
   var $49=$45 ^ $48;
   var $50=(($49)|(0))!=0;
   if ($50) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-2, ((18360)|0), ((14312)|0), ((13712)|0), 4316);
   label = 55; break;
  case 12: 
   var $53=$1;
   var $54=$2;
   var $55=_cvGetFileNodeByName($53, $54, ((14928)|0));
   $rect_node=$55;
   var $56=$1;
   var $57=$2;
   var $58=_cvGetFileNodeByName($56, $57, ((15872)|0));
   $origin_node=$58;
   var $59=$header_node;
   var $60=(($59)|(0))!=0;
   var $61=(($60)&(1));
   var $62=$rect_node;
   var $63=(($62)|(0))!=0;
   var $64=(($63)&(1));
   var $65=((($61)+($64))|0);
   var $66=$origin_node;
   var $67=(($66)|(0))!=0;
   var $68=(($67)&(1));
   var $69=((($65)+($68))|0);
   var $70=(($69)|(0)) > 1;
   if ($70) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-2, ((18360)|0), ((13576)|0), ((13712)|0), 4322);
   label = 55; break;
  case 14: 
   var $73=$header_dt;
   var $74=(($73)|(0))!=0;
   if ($74) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $76=$header_dt;
   var $77=$header_size;
   var $78=__ZL15icvCalcElemSizePKci($76, $77);
   $header_size=$78;
   var $79=_cvGetErrStatus();
   var $80=(($79)|(0)) < 0;
   if ($80) { label = 16; break; } else { label = 17; break; }
  case 16: 
   _cvError(-1, ((18360)|0), ((10080)|0), ((13712)|0), 4326);
   label = 55; break;
  case 17: 
   label = 24; break;
  case 18: 
   var $84=$rect_node;
   var $85=(($84)|(0))!=0;
   if ($85) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $header_size=88;
   label = 23; break;
  case 20: 
   var $88=$origin_node;
   var $89=(($88)|(0))!=0;
   if ($89) { label = 21; break; } else { label = 22; break; }
  case 21: 
   $header_size=64;
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $94=$dt;
   var $95=__ZL15icvCalcElemSizePKci($94, 0);
   $elem_size=$95;
   var $96=_cvGetErrStatus();
   var $97=(($96)|(0)) < 0;
   if ($97) { label = 25; break; } else { label = 26; break; }
  case 25: 
   _cvError(-1, ((18360)|0), ((10080)|0), ((13712)|0), 4333);
   label = 55; break;
  case 26: 
   var $100=$flags;
   var $101=$header_size;
   var $102=$elem_size;
   var $103=$1;
   var $104=(($103+20)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=_cvCreateSeq($100, $101, $102, $105);
   $seq=$106;
   var $107=_cvGetErrStatus();
   var $108=(($107)|(0)) < 0;
   if ($108) { label = 27; break; } else { label = 28; break; }
  case 27: 
   _cvError(-1, ((18360)|0), ((10080)|0), ((13712)|0), 4334);
   label = 55; break;
  case 28: 
   var $111=$header_node;
   var $112=(($111)|(0))!=0;
   if ($112) { label = 29; break; } else { label = 32; break; }
  case 29: 
   var $114=$1;
   var $115=$header_node;
   var $116=$seq;
   var $117=$116;
   var $118=(($117+56)|0);
   var $119=$header_dt;
   _cvReadRawData($114, $115, $118, $119);
   var $120=_cvGetErrStatus();
   var $121=(($120)|(0)) < 0;
   if ($121) { label = 30; break; } else { label = 31; break; }
  case 30: 
   _cvError(-1, ((18360)|0), ((10080)|0), ((13712)|0), 4338);
   label = 55; break;
  case 31: 
   label = 38; break;
  case 32: 
   var $125=$rect_node;
   var $126=(($125)|(0))!=0;
   if ($126) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $128=$seq;
   var $129=$128;
   $point_seq=$129;
   var $130=$1;
   var $131=$rect_node;
   var $132=_cvReadIntByName($130, $131, ((15712)|0), 0);
   var $133=$point_seq;
   var $134=(($133+56)|0);
   var $135=(($134)|0);
   HEAP32[(($135)>>2)]=$132;
   var $136=$1;
   var $137=$rect_node;
   var $138=_cvReadIntByName($136, $137, ((15704)|0), 0);
   var $139=$point_seq;
   var $140=(($139+56)|0);
   var $141=(($140+4)|0);
   HEAP32[(($141)>>2)]=$138;
   var $142=$1;
   var $143=$rect_node;
   var $144=_cvReadIntByName($142, $143, ((15888)|0), 0);
   var $145=$point_seq;
   var $146=(($145+56)|0);
   var $147=(($146+8)|0);
   HEAP32[(($147)>>2)]=$144;
   var $148=$1;
   var $149=$rect_node;
   var $150=_cvReadIntByName($148, $149, ((15880)|0), 0);
   var $151=$point_seq;
   var $152=(($151+56)|0);
   var $153=(($152+12)|0);
   HEAP32[(($153)>>2)]=$150;
   var $154=$1;
   var $155=$2;
   var $156=_cvReadIntByName($154, $155, ((14920)|0), 0);
   var $157=$point_seq;
   var $158=(($157+72)|0);
   HEAP32[(($158)>>2)]=$156;
   label = 37; break;
  case 34: 
   var $160=$origin_node;
   var $161=(($160)|(0))!=0;
   if ($161) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $163=$seq;
   var $164=$163;
   $chain=$164;
   var $165=$1;
   var $166=$origin_node;
   var $167=_cvReadIntByName($165, $166, ((15712)|0), 0);
   var $168=$chain;
   var $169=(($168+56)|0);
   var $170=(($169)|0);
   HEAP32[(($170)>>2)]=$167;
   var $171=$1;
   var $172=$origin_node;
   var $173=_cvReadIntByName($171, $172, ((15704)|0), 0);
   var $174=$chain;
   var $175=(($174+56)|0);
   var $176=(($175+4)|0);
   HEAP32[(($176)>>2)]=$173;
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   var $180=$seq;
   var $181=$total;
   _cvSeqPushMulti($180, 0, $181, 0);
   var $182=$dt;
   var $183=(($fmt_pairs)|0);
   var $184=__ZL15icvDecodeFormatPKcPii($182, $183, 128);
   $fmt_pair_count=$184;
   var $185=_cvGetErrStatus();
   var $186=(($185)|(0)) < 0;
   if ($186) { label = 39; break; } else { label = 40; break; }
  case 39: 
   _cvError(-1, ((18360)|0), ((10080)|0), ((13712)|0), 4357);
   label = 55; break;
  case 40: 
   var $189=$fmt_pair_count;
   var $190=($189<<1);
   $fmt_pair_count=$190;
   $i=0;
   label = 41; break;
  case 41: 
   var $192=$i;
   var $193=$fmt_pair_count;
   var $194=(($192)|(0)) < (($193)|(0));
   if ($194) { label = 42; break; } else { label = 44; break; }
  case 42: 
   var $196=$i;
   var $197=(($fmt_pairs+($196<<2))|0);
   var $198=HEAP32[(($197)>>2)];
   var $199=$items_per_elem;
   var $200=((($199)+($198))|0);
   $items_per_elem=$200;
   label = 43; break;
  case 43: 
   var $202=$i;
   var $203=((($202)+(2))|0);
   $i=$203;
   label = 41; break;
  case 44: 
   var $205=$1;
   var $206=$2;
   var $207=_cvGetFileNodeByName($205, $206, ((7496)|0));
   $data=$207;
   var $208=$data;
   var $209=(($208)|(0))!=0;
   if ($209) { label = 46; break; } else { label = 45; break; }
  case 45: 
   _cvError(-2, ((18360)|0), ((15496)|0), ((13712)|0), 4364);
   label = 55; break;
  case 46: 
   var $212=$data;
   var $213=__ZL17icvFileNodeSeqLenP10CvFileNode($212);
   var $214=$total;
   var $215=$items_per_elem;
   var $216=(Math.imul($214,$215)|0);
   var $217=(($213)|(0))!=(($216)|(0));
   if ($217) { label = 47; break; } else { label = 48; break; }
  case 47: 
   _cvError(-2, ((18360)|0), ((13520)|0), ((13712)|0), 4367);
   label = 55; break;
  case 48: 
   var $220=$1;
   var $221=$data;
   _cvStartReadRawData($220, $221, $reader);
   var $222=$seq;
   var $223=(($222+52)|0);
   var $224=HEAP32[(($223)>>2)];
   $block=$224;
   label = 49; break;
  case 49: 
   var $226=$block;
   var $227=(($226)|(0))!=0;
   if ($227) { label = 50; break; } else { label = 54; break; }
  case 50: 
   var $229=$block;
   var $230=(($229+12)|0);
   var $231=HEAP32[(($230)>>2)];
   var $232=$items_per_elem;
   var $233=(Math.imul($231,$232)|0);
   $delta=$233;
   var $234=$1;
   var $235=$delta;
   var $236=$block;
   var $237=(($236+16)|0);
   var $238=HEAP32[(($237)>>2)];
   var $239=$dt;
   _cvReadRawDataSlice($234, $reader, $235, $238, $239);
   var $240=$block;
   var $241=$seq;
   var $242=(($241+52)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=(($243)|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=(($240)|(0))==(($245)|(0));
   if ($246) { label = 51; break; } else { label = 52; break; }
  case 51: 
   label = 54; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $250=$block;
   var $251=(($250+4)|0);
   var $252=HEAP32[(($251)>>2)];
   $block=$252;
   label = 49; break;
  case 54: 
   var $254=$seq;
   var $255=$254;
   $ptr=$255;
   label = 55; break;
  case 55: 
   var $257=$ptr;
   STACKTOP = sp;
   return $257;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL15icvWriteSeqTreeP13CvFileStoragePKcPKv10CvAttrList($fs, $name, $struct_ptr, $attr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $attr; $attr = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($attr)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($attr)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $seq;
   var $recursive_value;
   var $is_recursive;
   var $4=sp;
   var $tree_iterator=(sp)+(8);
   var $5=(sp)+(24);
   var $6=(sp)+(32);
   var $7=(sp)+(40);
   $1=$fs;
   $2=$name;
   $3=$struct_ptr;
   var $8=$3;
   var $9=$8;
   $seq=$9;
   var $10=_cvAttrValue($attr, ((13744)|0));
   $recursive_value=$10;
   var $11=$recursive_value;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 2; break; } else { var $38 = 1;label = 9; break; }
  case 2: 
   var $14=$recursive_value;
   var $15=_strcmp($14, ((13736)|0));
   var $16=(($15)|(0))==0;
   if ($16) { var $38 = 1;label = 9; break; } else { label = 3; break; }
  case 3: 
   var $18=$recursive_value;
   var $19=_strlen($18);
   var $20=(($19)|(0))==5;
   if ($20) { label = 4; break; } else { var $36 = 0;label = 8; break; }
  case 4: 
   var $22=$recursive_value;
   var $23=_strcmp($22, ((13704)|0));
   var $24=(($23)|(0))==0;
   if ($24) { var $34 = 1;label = 7; break; } else { label = 5; break; }
  case 5: 
   var $26=$recursive_value;
   var $27=_strcmp($26, ((13696)|0));
   var $28=(($27)|(0))==0;
   if ($28) { var $34 = 1;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $30=$recursive_value;
   var $31=_strcmp($30, ((13688)|0));
   var $32=(($31)|(0))==0;
   var $34 = $32;label = 7; break;
  case 7: 
   var $34;
   var $36 = $34;label = 8; break;
  case 8: 
   var $36;
   var $38 = $36;label = 9; break;
  case 9: 
   var $38;
   var $39=$38 ^ 1;
   var $40=(($39)&(1));
   $is_recursive=$40;
   var $41=$is_recursive;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 13; break; } else { label = 10; break; }
  case 10: 
   var $44=$1;
   var $45=$2;
   var $46=$seq;
   var $47=$46;
   var $48=$4;
   var $49=$attr;
   assert(8 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];
   __ZL11icvWriteSeqP13CvFileStoragePKcPKv10CvAttrListi($44, $45, $47, $4, -1);
   var $50=_cvGetErrStatus();
   var $51=(($50)|(0)) < 0;
   if ($51) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-1, ((18040)|0), ((10080)|0), ((13712)|0), 4253);
   label = 25; break;
  case 12: 
   label = 24; break;
  case 13: 
   var $55=$1;
   var $56=$2;
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   _cvStartWriteStruct($55, $56, 6, ((9328)|0), $5);
   var $57=_cvGetErrStatus();
   var $58=(($57)|(0)) < 0;
   if ($58) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _cvError(-1, ((18040)|0), ((10080)|0), ((13712)|0), 4259);
   label = 25; break;
  case 15: 
   var $61=$1;
   __Z10cvAttrListPPKcP10CvAttrList($6, 0, 0);
   _cvStartWriteStruct($61, ((13984)|0), 5, 0, $6);
   var $62=_cvGetErrStatus();
   var $63=(($62)|(0)) < 0;
   if ($63) { label = 16; break; } else { label = 17; break; }
  case 16: 
   _cvError(-1, ((18040)|0), ((10080)|0), ((13712)|0), 4260);
   label = 25; break;
  case 17: 
   var $66=$seq;
   var $67=$66;
   _cvInitTreeNodeIterator($tree_iterator, $67, 2147483647);
   label = 18; break;
  case 18: 
   var $69=(($tree_iterator)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 20; break; } else { label = 19; break; }
  case 19: 
   label = 23; break;
  case 20: 
   var $74=$1;
   var $75=(($tree_iterator)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$7;
   var $78=$attr;
   assert(8 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];
   var $79=(($tree_iterator+4)|0);
   var $80=HEAP32[(($79)>>2)];
   __ZL11icvWriteSeqP13CvFileStoragePKcPKv10CvAttrListi($74, 0, $76, $7, $80);
   var $81=_cvGetErrStatus();
   var $82=(($81)|(0)) < 0;
   if ($82) { label = 21; break; } else { label = 22; break; }
  case 21: 
   _cvError(-1, ((18040)|0), ((10080)|0), ((13712)|0), 4267);
   label = 25; break;
  case 22: 
   var $85=_cvNextTreeNode($tree_iterator);
   label = 18; break;
  case 23: 
   var $87=$1;
   _cvEndWriteStruct($87);
   var $88=$1;
   _cvEndWriteStruct($88);
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL11icvCloneSeqPKv($ptr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2=sp;
 $1=$ptr;
 var $3=$1;
 var $4=$3;
 __Z7cvSliceii($2, 0, 1073741823);
 var $5=_cvSeqSlice($4, $2, 0, 1);
 var $6=$5;
 STACKTOP = sp;
 return $6;
}
function ___cxx_global_var_init53() {
 var label = 0;
 __ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E(23720, ((9328)|0), 344, 256, 538, 14, 52);
 var $1=_atexit((298), 23720, ___dso_handle);
 return;
}
function __ZL10icvIsGraphPKv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { var $19 = 0;label = 4; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1117257728;
   if ($10) { label = 3; break; } else { var $19 = 0;label = 4; break; }
  case 3: 
   var $12=$1;
   var $13=$12;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 3584;
   var $17=(($16)|(0))==1536;
   var $19 = $17;label = 4; break;
  case 4: 
   var $19;
   var $20=(($19)&(1));
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL14icvReadSeqTreeP13CvFileStorageP10CvFileNode($fs, $node) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $sequences_node;
   var $sequences;
   var $root;
   var $parent;
   var $prev_seq;
   var $reader=sp;
   var $i;
   var $total;
   var $prev_level;
   var $elem;
   var $seq;
   var $level;
   $1=$fs;
   $2=$node;
   $ptr=0;
   var $3=$1;
   var $4=$2;
   var $5=_cvGetFileNodeByName($3, $4, ((13984)|0));
   $sequences_node=$5;
   $root=0;
   $parent=0;
   $prev_seq=0;
   $prev_level=0;
   var $6=$sequences_node;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$sequences_node;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11 & 7;
   var $13=(($12)|(0))==5;
   if ($13) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _cvError(-212, ((18120)|0), ((13888)|0), ((13712)|0), 4405);
   label = 32; break;
  case 4: 
   var $16=$sequences_node;
   var $17=(($16+8)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   $sequences=$19;
   var $20=$sequences;
   var $21=(($20+24)|0);
   var $22=HEAP32[(($21)>>2)];
   $total=$22;
   var $23=$sequences;
   _cvStartReadSeq($23, $reader, 0);
   $i=0;
   label = 5; break;
  case 5: 
   var $25=$i;
   var $26=$total;
   var $27=(($25)|(0)) < (($26)|(0));
   if ($27) { label = 6; break; } else { label = 31; break; }
  case 6: 
   var $29=(($reader+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   $elem=$31;
   var $32=$1;
   var $33=$elem;
   var $34=_cvRead($32, $33, 0);
   var $35=$34;
   $seq=$35;
   var $36=_cvGetErrStatus();
   var $37=(($36)|(0)) < 0;
   if ($37) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-1, ((18120)|0), ((10080)|0), ((13712)|0), 4416);
   label = 32; break;
  case 8: 
   var $40=$1;
   var $41=$elem;
   var $42=_cvReadIntByName($40, $41, ((13880)|0), -1);
   $level=$42;
   var $43=_cvGetErrStatus();
   var $44=(($43)|(0)) < 0;
   if ($44) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-1, ((18120)|0), ((10080)|0), ((13712)|0), 4417);
   label = 32; break;
  case 10: 
   var $47=$level;
   var $48=(($47)|(0)) < 0;
   if ($48) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-212, ((18120)|0), ((13792)|0), ((13712)|0), 4419);
   label = 32; break;
  case 12: 
   var $51=$root;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $54=$seq;
   $root=$54;
   label = 14; break;
  case 14: 
   var $56=$level;
   var $57=$prev_level;
   var $58=(($56)|(0)) > (($57)|(0));
   if ($58) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $60=$prev_seq;
   $parent=$60;
   $prev_seq=0;
   var $61=$parent;
   var $62=(($61)|(0))!=0;
   if ($62) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $64=$seq;
   var $65=$parent;
   var $66=(($65+20)|0);
   HEAP32[(($66)>>2)]=$64;
   label = 17; break;
  case 17: 
   label = 25; break;
  case 18: 
   var $69=$level;
   var $70=$prev_level;
   var $71=(($69)|(0)) < (($70)|(0));
   if ($71) { label = 19; break; } else { label = 24; break; }
  case 19: 
   label = 20; break;
  case 20: 
   var $74=$prev_level;
   var $75=$level;
   var $76=(($74)|(0)) > (($75)|(0));
   if ($76) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $78=$prev_seq;
   var $79=(($78+16)|0);
   var $80=HEAP32[(($79)>>2)];
   $prev_seq=$80;
   label = 22; break;
  case 22: 
   var $82=$prev_level;
   var $83=((($82)-(1))|0);
   $prev_level=$83;
   label = 20; break;
  case 23: 
   var $85=$prev_seq;
   var $86=(($85+16)|0);
   var $87=HEAP32[(($86)>>2)];
   $parent=$87;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $90=$prev_seq;
   var $91=$seq;
   var $92=(($91+8)|0);
   HEAP32[(($92)>>2)]=$90;
   var $93=$prev_seq;
   var $94=(($93)|(0))!=0;
   if ($94) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $96=$seq;
   var $97=$prev_seq;
   var $98=(($97+12)|0);
   HEAP32[(($98)>>2)]=$96;
   label = 27; break;
  case 27: 
   var $100=$parent;
   var $101=$seq;
   var $102=(($101+16)|0);
   HEAP32[(($102)>>2)]=$100;
   var $103=$seq;
   $prev_seq=$103;
   var $104=$level;
   $prev_level=$104;
   var $105=$sequences;
   var $106=(($105+28)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($reader+12)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109+$107)|0);
   HEAP32[(($108)>>2)]=$110;
   var $111=(($reader+20)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(($110)>>>(0)) >= (($112)>>>(0));
   if ($113) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $115=$reader;
   _cvChangeSeqBlock($115, 1);
   label = 29; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $118=$i;
   var $119=((($118)+(1))|0);
   $i=$119;
   label = 5; break;
  case 31: 
   var $121=$root;
   var $122=$121;
   $ptr=$122;
   label = 32; break;
  case 32: 
   var $124=$ptr;
   STACKTOP = sp;
   return $124;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_var_init55() {
 var label = 0;
 __ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E(23728, ((9256)|0), 54, 608, 542, 544, 378);
 var $1=_atexit((298), 23728, ___dso_handle);
 return;
}
function __ZL15icvReleaseGraphPPv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _cvError(-27, ((18056)|0), ((8368)|0), ((13712)|0), 4469);
   label = 4; break;
  case 3: 
   var $6=$1;
   HEAP32[(($6)>>2)]=0;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL12icvReadGraphP13CvFileStorageP10CvFileNode($fs, $node) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 696)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $read_buf;
   var $vtx_buf;
   var $graph;
   var $header_node;
   var $vtx_node;
   var $edge_node;
   var $flags;
   var $vtx_count;
   var $edge_count;
   var $vtx_size;
   var $edge_size;
   var $header_size;
   var $src_vtx_size;
   var $src_edge_size;
   var $fmt_pairs=sp;
   var $fmt_pair_count;
   var $vtx_items_per_elem;
   var $edge_items_per_elem;
   var $edge_user_align;
   var $read_buf_size;
   var $i;
   var $k;
   var $flags_str;
   var $header_dt;
   var $vtx_dt;
   var $edge_dt;
   var $endptr=(sp)+(512);
   var $dst_edge_dt_buf=(sp)+(520);
   var $dst_edge_dt;
   var $val;
   var $dt;
   var $elem_size;
   var $src_elem_size;
   var $items_per_elem;
   var $elem_count;
   var $dst_ptr;
   var $read_max;
   var $read_count;
   var $reader=(sp)+(648);
   var $count;
   var $vtx=(sp)+(680);
   var $edge=(sp)+(688);
   var $vtx1;
   var $vtx2;
   var $result;
   var $dst_ptr2;
   $1=$fs;
   $2=$node;
   $ptr=0;
   $read_buf=0;
   $vtx_buf=0;
   $vtx_size=8;
   $header_size=68;
   $src_vtx_size=0;
   $vtx_items_per_elem=0;
   $edge_items_per_elem=0;
   $edge_user_align=4;
   HEAP32[(($endptr)>>2)]=0;
   var $3=$1;
   var $4=$2;
   var $5=_cvReadStringByName($3, $4, ((15248)|0), 0);
   $flags_str=$5;
   var $6=_cvGetErrStatus();
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4654);
   label = 106; break;
  case 3: 
   var $10=$1;
   var $11=$2;
   var $12=_cvReadStringByName($10, $11, ((15200)|0), 0);
   $vtx_dt=$12;
   var $13=$1;
   var $14=$2;
   var $15=_cvReadStringByName($13, $14, ((15160)|0), 0);
   $edge_dt=$15;
   var $16=$1;
   var $17=$2;
   var $18=_cvReadIntByName($16, $17, ((15216)|0), -1);
   $vtx_count=$18;
   var $19=$1;
   var $20=$2;
   var $21=_cvReadIntByName($19, $20, ((15168)|0), -1);
   $edge_count=$21;
   var $22=$flags_str;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $25=$vtx_count;
   var $26=(($25)|(0))==-1;
   if ($26) { label = 7; break; } else { label = 5; break; }
  case 5: 
   var $28=$edge_count;
   var $29=(($28)|(0))==-1;
   if ($29) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $31=$edge_dt;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 8; break; } else { label = 7; break; }
  case 7: 
   _cvError(-2, ((18264)|0), ((14600)|0), ((13712)|0), 4661);
   label = 106; break;
  case 8: 
   var $35=$flags_str;
   var $36=_strtol($35, $endptr, 16);
   $flags=$36;
   var $37=HEAP32[(($endptr)>>2)];
   var $38=$flags_str;
   var $39=(($37)|(0))==(($38)|(0));
   if ($39) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $41=$flags;
   var $42=$41 & -61952;
   var $43=(($42)|(0))!=1117259264;
   if ($43) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-2, ((18264)|0), ((14536)|0), ((13712)|0), 4666);
   label = 106; break;
  case 11: 
   var $46=$1;
   var $47=$2;
   var $48=_cvReadStringByName($46, $47, ((15072)|0), 0);
   $header_dt=$48;
   var $49=$1;
   var $50=$2;
   var $51=_cvGetFileNodeByName($49, $50, ((14824)|0));
   $header_node=$51;
   var $52=$header_dt;
   var $53=(($52)|(0))!=0;
   var $54=(($53)&(1));
   var $55=$header_node;
   var $56=(($55)|(0))!=0;
   var $57=(($56)&(1));
   var $58=$54 ^ $57;
   var $59=(($58)|(0))!=0;
   if ($59) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _cvError(-2, ((18264)|0), ((14312)|0), ((13712)|0), 4673);
   label = 106; break;
  case 13: 
   var $62=$header_dt;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 14; break; } else { label = 17; break; }
  case 14: 
   var $65=$header_dt;
   var $66=$header_size;
   var $67=__ZL15icvCalcElemSizePKci($65, $66);
   $header_size=$67;
   var $68=_cvGetErrStatus();
   var $69=(($68)|(0)) < 0;
   if ($69) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4676);
   label = 106; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $73=$vtx_dt;
   var $74=(($73)>>>(0)) > 0;
   if ($74) { label = 18; break; } else { label = 29; break; }
  case 18: 
   var $76=$vtx_dt;
   var $77=__ZL15icvCalcElemSizePKci($76, 0);
   $src_vtx_size=$77;
   var $78=_cvGetErrStatus();
   var $79=(($78)|(0)) < 0;
   if ($79) { label = 19; break; } else { label = 20; break; }
  case 19: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4680);
   label = 106; break;
  case 20: 
   var $82=$vtx_dt;
   var $83=$vtx_size;
   var $84=__ZL15icvCalcElemSizePKci($82, $83);
   $vtx_size=$84;
   var $85=_cvGetErrStatus();
   var $86=(($85)|(0)) < 0;
   if ($86) { label = 21; break; } else { label = 22; break; }
  case 21: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4681);
   label = 106; break;
  case 22: 
   var $89=$edge_dt;
   var $90=(($fmt_pairs)|0);
   var $91=__ZL15icvDecodeFormatPKcPii($89, $90, 128);
   $fmt_pair_count=$91;
   var $92=_cvGetErrStatus();
   var $93=(($92)|(0)) < 0;
   if ($93) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4683);
   label = 106; break;
  case 24: 
   var $96=$fmt_pair_count;
   var $97=($96<<1);
   $fmt_pair_count=$97;
   $i=0;
   label = 25; break;
  case 25: 
   var $99=$i;
   var $100=$fmt_pair_count;
   var $101=(($99)|(0)) < (($100)|(0));
   if ($101) { label = 26; break; } else { label = 28; break; }
  case 26: 
   var $103=$i;
   var $104=(($fmt_pairs+($103<<2))|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=$vtx_items_per_elem;
   var $107=((($106)+($105))|0);
   $vtx_items_per_elem=$107;
   label = 27; break;
  case 27: 
   var $109=$i;
   var $110=((($109)+(2))|0);
   $i=$110;
   label = 25; break;
  case 28: 
   label = 29; break;
  case 29: 
   $dst_edge_dt=0;
   var $113=$edge_dt;
   var $114=(($fmt_pairs)|0);
   var $115=__ZL15icvDecodeFormatPKcPii($113, $114, 128);
   $fmt_pair_count=$115;
   var $116=_cvGetErrStatus();
   var $117=(($116)|(0)) < 0;
   if ($117) { label = 30; break; } else { label = 31; break; }
  case 30: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4694);
   label = 106; break;
  case 31: 
   var $120=$fmt_pair_count;
   var $121=(($120)|(0)) < 2;
   if ($121) { label = 36; break; } else { label = 32; break; }
  case 32: 
   var $123=(($fmt_pairs)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=(($124)|(0))!=2;
   if ($125) { label = 36; break; } else { label = 33; break; }
  case 33: 
   var $127=(($fmt_pairs+4)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($128)|(0))!=4;
   if ($129) { label = 36; break; } else { label = 34; break; }
  case 34: 
   var $131=(($fmt_pairs+8)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132)|(0)) < 1;
   if ($133) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $135=(($fmt_pairs+12)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136)|(0))!=5;
   if ($137) { label = 36; break; } else { label = 37; break; }
  case 36: 
   _cvError(-5, ((18264)|0), ((14240)|0), ((13712)|0), 4699);
   label = 106; break;
  case 37: 
   var $140=$fmt_pair_count;
   var $141=(($140)|(0)) > 2;
   if ($141) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $143=(($fmt_pairs+20)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=$144 & 504;
   var $146=$145 >> 3;
   var $147=((($146)+(1))|0);
   var $148=(($fmt_pairs+20)|0);
   var $149=HEAP32[(($148)>>2)];
   var $150=$149 & 7;
   var $151=($150<<1);
   var $152=47696 >>> (($151)>>>(0));
   var $153=$152 & 3;
   var $154=$147 << $153;
   var $155=(($154)|(0)) >= 8;
   if ($155) { label = 39; break; } else { label = 40; break; }
  case 39: 
   $edge_user_align=8;
   label = 40; break;
  case 40: 
   var $158=$fmt_pair_count;
   var $159=($158<<1);
   $fmt_pair_count=$159;
   $i=0;
   label = 41; break;
  case 41: 
   var $161=$i;
   var $162=$fmt_pair_count;
   var $163=(($161)|(0)) < (($162)|(0));
   if ($163) { label = 42; break; } else { label = 44; break; }
  case 42: 
   var $165=$i;
   var $166=(($fmt_pairs+($165<<2))|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=$edge_items_per_elem;
   var $169=((($168)+($167))|0);
   $edge_items_per_elem=$169;
   label = 43; break;
  case 43: 
   var $171=$i;
   var $172=((($171)+(2))|0);
   $i=$172;
   label = 41; break;
  case 44: 
   var $174=$edge_dt;
   var $175=(($174+2)|0);
   var $176=HEAP8[($175)];
   var $177=(($176 << 24) >> 24);
   var $178=(($177)|(0))==102;
   if ($178) { label = 47; break; } else { label = 45; break; }
  case 45: 
   var $180=$edge_dt;
   var $181=(($180+2)|0);
   var $182=HEAP8[($181)];
   var $183=(($182 << 24) >> 24);
   var $184=(($183)|(0))==49;
   if ($184) { label = 46; break; } else { label = 48; break; }
  case 46: 
   var $186=$edge_dt;
   var $187=(($186+3)|0);
   var $188=HEAP8[($187)];
   var $189=(($188 << 24) >> 24);
   var $190=(($189)|(0))==102;
   if ($190) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $192=$edge_dt;
   var $193=(($192+3)|0);
   var $194=$edge_dt;
   var $195=(($194+2)|0);
   var $196=HEAP8[($195)];
   var $197=(($196 << 24) >> 24);
   var $198=_isdigit($197);
   var $199=(($193+$198)|0);
   $dst_edge_dt=$199;
   label = 49; break;
  case 48: 
   var $201=$edge_dt;
   var $202=(($201+2)|0);
   var $203=_strtol($202, $endptr, 10);
   $val=$203;
   var $204=(($dst_edge_dt_buf)|0);
   var $205=$val;
   var $206=((($205)-(1))|0);
   var $207=HEAP32[(($endptr)>>2)];
   var $208=_sprintf($204, ((14136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$206,HEAP32[(((tempInt)+(8))>>2)]=$207,tempInt));
   var $209=(($dst_edge_dt_buf)|0);
   $dst_edge_dt=$209;
   label = 49; break;
  case 49: 
   var $211=$dst_edge_dt;
   var $212=__ZL15icvCalcElemSizePKci($211, 24);
   $edge_size=$212;
   var $213=_cvGetErrStatus();
   var $214=(($213)|(0)) < 0;
   if ($214) { label = 50; break; } else { label = 51; break; }
  case 50: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4718);
   label = 106; break;
  case 51: 
   var $217=$edge_dt;
   var $218=__ZL15icvCalcElemSizePKci($217, 0);
   $src_edge_size=$218;
   var $219=_cvGetErrStatus();
   var $220=(($219)|(0)) < 0;
   if ($220) { label = 52; break; } else { label = 53; break; }
  case 52: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4719);
   label = 106; break;
  case 53: 
   var $223=$flags;
   var $224=$header_size;
   var $225=$vtx_size;
   var $226=$edge_size;
   var $227=$1;
   var $228=(($227+20)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=_cvCreateGraph($223, $224, $225, $226, $229);
   $graph=$230;
   var $231=_cvGetErrStatus();
   var $232=(($231)|(0)) < 0;
   if ($232) { label = 54; break; } else { label = 55; break; }
  case 54: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4722);
   label = 106; break;
  case 55: 
   var $235=$header_node;
   var $236=(($235)|(0))!=0;
   if ($236) { label = 56; break; } else { label = 59; break; }
  case 56: 
   var $238=$1;
   var $239=$header_node;
   var $240=$graph;
   var $241=$240;
   var $242=(($241+68)|0);
   var $243=$header_dt;
   _cvReadRawData($238, $239, $242, $243);
   var $244=_cvGetErrStatus();
   var $245=(($244)|(0)) < 0;
   if ($245) { label = 57; break; } else { label = 58; break; }
  case 57: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4725);
   label = 106; break;
  case 58: 
   label = 59; break;
  case 59: 
   var $249=$src_vtx_size;
   var $250=((($249)*(3))&-1);
   var $251=(($250)|(0)) < 65536;
   if ($251) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $257 = 65536;label = 62; break;
  case 61: 
   var $254=$src_vtx_size;
   var $255=((($254)*(3))&-1);
   var $257 = $255;label = 62; break;
  case 62: 
   var $257;
   $read_buf_size=$257;
   var $258=$src_edge_size;
   var $259=((($258)*(3))&-1);
   var $260=$read_buf_size;
   var $261=(($259)|(0)) < (($260)|(0));
   if ($261) { label = 63; break; } else { label = 64; break; }
  case 63: 
   var $263=$read_buf_size;
   var $268 = $263;label = 65; break;
  case 64: 
   var $265=$src_edge_size;
   var $266=((($265)*(3))&-1);
   var $268 = $266;label = 65; break;
  case 65: 
   var $268;
   $read_buf_size=$268;
   var $269=$read_buf_size;
   var $270=_cvAlloc($269);
   $read_buf=$270;
   var $271=_cvGetErrStatus();
   var $272=(($271)|(0)) < 0;
   if ($272) { label = 66; break; } else { label = 67; break; }
  case 66: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4729);
   label = 106; break;
  case 67: 
   var $275=$vtx_count;
   var $276=($275<<2);
   var $277=_cvAlloc($276);
   var $278=$277;
   $vtx_buf=$278;
   var $279=_cvGetErrStatus();
   var $280=(($279)|(0)) < 0;
   if ($280) { label = 68; break; } else { label = 69; break; }
  case 68: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4730);
   label = 106; break;
  case 69: 
   var $283=$1;
   var $284=$2;
   var $285=_cvGetFileNodeByName($283, $284, ((15096)|0));
   $vtx_node=$285;
   var $286=$1;
   var $287=$2;
   var $288=_cvGetFileNodeByName($286, $287, ((15088)|0));
   $edge_node=$288;
   var $289=$edge_node;
   var $290=(($289)|(0))!=0;
   if ($290) { label = 71; break; } else { label = 70; break; }
  case 70: 
   _cvError(-5, ((18264)|0), ((14120)|0), ((13712)|0), 4735);
   label = 106; break;
  case 71: 
   var $293=$vtx_dt;
   var $294=(($293)|(0))!=0;
   if ($294) { label = 72; break; } else { label = 74; break; }
  case 72: 
   var $296=$vtx_node;
   var $297=(($296)|(0))!=0;
   if ($297) { label = 74; break; } else { label = 73; break; }
  case 73: 
   _cvError(-5, ((18264)|0), ((14096)|0), ((13712)|0), 4737);
   label = 106; break;
  case 74: 
   $k=0;
   label = 75; break;
  case 75: 
   var $301=$k;
   var $302=(($301)|(0)) < 2;
   if ($302) { label = 76; break; } else { label = 105; break; }
  case 76: 
   var $304=$k;
   var $305=(($304)|(0))==0;
   var $306=$vtx_dt;
   var $307=$edge_dt;
   var $308=$305 ? $306 : $307;
   $dt=$308;
   var $309=$k;
   var $310=(($309)|(0))==0;
   var $311=$vtx_size;
   var $312=$edge_size;
   var $313=$310 ? $311 : $312;
   $elem_size=$313;
   var $314=$k;
   var $315=(($314)|(0))==0;
   var $316=$src_vtx_size;
   var $317=$src_edge_size;
   var $318=$315 ? $316 : $317;
   $src_elem_size=$318;
   var $319=$k;
   var $320=(($319)|(0))==0;
   var $321=$vtx_items_per_elem;
   var $322=$edge_items_per_elem;
   var $323=$320 ? $321 : $322;
   $items_per_elem=$323;
   var $324=$k;
   var $325=(($324)|(0))==0;
   var $326=$vtx_count;
   var $327=$edge_count;
   var $328=$325 ? $326 : $327;
   $elem_count=$328;
   var $329=$read_buf;
   $dst_ptr=$329;
   var $330=$read_buf_size;
   var $331=$src_elem_size;
   var $332=(($331)|(0)) < 1;
   if ($332) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $337 = 1;label = 79; break;
  case 78: 
   var $335=$src_elem_size;
   var $337 = $335;label = 79; break;
  case 79: 
   var $337;
   var $338=((((($330)|(0)))/((($337)|(0))))&-1);
   $read_max=$338;
   $read_count=0;
   var $339=$1;
   var $340=$k;
   var $341=(($340)|(0))==0;
   var $342=$vtx_node;
   var $343=$edge_node;
   var $344=$341 ? $342 : $343;
   _cvStartReadRawData($339, $344, $reader);
   $i=0;
   label = 80; break;
  case 80: 
   var $346=$i;
   var $347=$elem_count;
   var $348=(($346)|(0)) < (($347)|(0));
   if ($348) { label = 81; break; } else { label = 103; break; }
  case 81: 
   var $350=$read_count;
   var $351=(($350)|(0))==0;
   if ($351) { label = 82; break; } else { label = 87; break; }
  case 82: 
   var $353=$dt;
   var $354=(($353)|(0))!=0;
   if ($354) { label = 83; break; } else { label = 87; break; }
  case 83: 
   var $356=$elem_count;
   var $357=$i;
   var $358=((($356)-($357))|0);
   var $359=$read_max;
   var $360=(($358)|(0)) > (($359)|(0));
   if ($360) { label = 84; break; } else { label = 85; break; }
  case 84: 
   var $362=$read_max;
   var $368 = $362;label = 86; break;
  case 85: 
   var $364=$elem_count;
   var $365=$i;
   var $366=((($364)-($365))|0);
   var $368 = $366;label = 86; break;
  case 86: 
   var $368;
   var $369=$items_per_elem;
   var $370=(Math.imul($368,$369)|0);
   $count=$370;
   var $371=$1;
   var $372=$count;
   var $373=$read_buf;
   var $374=$dt;
   _cvReadRawDataSlice($371, $reader, $372, $373, $374);
   var $375=$count;
   $read_count=$375;
   var $376=$read_buf;
   $dst_ptr=$376;
   label = 87; break;
  case 87: 
   var $378=$k;
   var $379=(($378)|(0))==0;
   if ($379) { label = 88; break; } else { label = 91; break; }
  case 88: 
   var $381=$graph;
   var $382=_cvGraphAddVtx($381, 0, $vtx);
   var $383=HEAP32[(($vtx)>>2)];
   var $384=$i;
   var $385=$vtx_buf;
   var $386=(($385+($384<<2))|0);
   HEAP32[(($386)>>2)]=$383;
   var $387=$dt;
   var $388=(($387)|(0))!=0;
   if ($388) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $390=HEAP32[(($vtx)>>2)];
   var $391=(($390+8)|0);
   var $392=$391;
   var $393=$dst_ptr;
   var $394=$src_elem_size;
   assert($394 % 1 === 0);(_memcpy($392, $393, $394)|0);
   label = 90; break;
  case 90: 
   label = 101; break;
  case 91: 
   HEAP32[(($edge)>>2)]=0;
   var $397=$dst_ptr;
   var $398=$397;
   var $399=(($398)|0);
   var $400=HEAP32[(($399)>>2)];
   $vtx1=$400;
   var $401=$dst_ptr;
   var $402=$401;
   var $403=(($402+4)|0);
   var $404=HEAP32[(($403)>>2)];
   $vtx2=$404;
   var $405=$vtx1;
   var $406=$vtx_count;
   var $407=(($405)>>>(0)) >= (($406)>>>(0));
   if ($407) { label = 93; break; } else { label = 92; break; }
  case 92: 
   var $409=$vtx2;
   var $410=$vtx_count;
   var $411=(($409)>>>(0)) >= (($410)>>>(0));
   if ($411) { label = 93; break; } else { label = 94; break; }
  case 93: 
   _cvError(-211, ((18264)|0), ((14048)|0), ((13712)|0), 4781);
   label = 106; break;
  case 94: 
   var $414=$graph;
   var $415=$vtx1;
   var $416=$vtx_buf;
   var $417=(($416+($415<<2))|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=$vtx2;
   var $420=$vtx_buf;
   var $421=(($420+($419<<2))|0);
   var $422=HEAP32[(($421)>>2)];
   var $423=_cvGraphAddEdgeByPtr($414, $418, $422, 0, $edge);
   $result=$423;
   var $424=_cvGetErrStatus();
   var $425=(($424)|(0)) < 0;
   if ($425) { label = 95; break; } else { label = 96; break; }
  case 95: 
   _cvError(-1, ((18264)|0), ((10080)|0), ((13712)|0), 4784);
   label = 106; break;
  case 96: 
   var $428=$result;
   var $429=(($428)|(0))==0;
   if ($429) { label = 97; break; } else { label = 98; break; }
  case 97: 
   _cvError(-5, ((18264)|0), ((14016)|0), ((13712)|0), 4787);
   label = 106; break;
  case 98: 
   var $432=$dst_ptr;
   var $433=(($432+8)|0);
   var $434=$433;
   var $435=HEAPF32[(($434)>>2)];
   var $436=HEAP32[(($edge)>>2)];
   var $437=(($436+4)|0);
   HEAPF32[(($437)>>2)]=$435;
   var $438=$elem_size;
   var $439=(($438)|(0)) > 24;
   if ($439) { label = 99; break; } else { label = 100; break; }
  case 99: 
   var $441=$dst_ptr;
   var $442=(($441+8)|0);
   var $443=(($442+4)|0);
   var $444=$edge_user_align;
   var $445=__Z10cvAlignPtrPKvi($443, $444);
   $dst_ptr2=$445;
   var $446=HEAP32[(($edge)>>2)];
   var $447=(($446+24)|0);
   var $448=$447;
   var $449=$dst_ptr2;
   var $450=$elem_size;
   var $451=((($450)-(24))|0);
   assert($451 % 1 === 0);(_memcpy($448, $449, $451)|0);
   label = 100; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $454=$src_elem_size;
   var $455=$dst_ptr;
   var $456=(($455+$454)|0);
   $dst_ptr=$456;
   var $457=$read_count;
   var $458=((($457)-(1))|0);
   $read_count=$458;
   label = 102; break;
  case 102: 
   var $460=$i;
   var $461=((($460)+(1))|0);
   $i=$461;
   label = 80; break;
  case 103: 
   label = 104; break;
  case 104: 
   var $464=$k;
   var $465=((($464)+(1))|0);
   $k=$465;
   label = 75; break;
  case 105: 
   var $467=$graph;
   var $468=$467;
   $ptr=$468;
   label = 106; break;
  case 106: 
   var $470=$read_buf;
   _cvFree_($470);
   $read_buf=0;
   var $471=$vtx_buf;
   var $472=$471;
   _cvFree_($472);
   $vtx_buf=0;
   var $473=$ptr;
   STACKTOP = sp;
   return $473;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL14icvIsSparseMatPKv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { var $12 = 0;label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1111752704;
   var $12 = $10;label = 3; break;
  case 3: 
   var $12;
   var $13=(($12)&(1));
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL13icvWriteGraphP13CvFileStoragePKcPKv10CvAttrList($fs, $name, $struct_ptr, $attr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 944)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $attr; $attr = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($attr)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($attr)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $flag_buf;
   var $write_buf;
   var $graph;
   var $reader=sp;
   var $buf=(sp)+(32);
   var $i;
   var $k;
   var $vtx_count;
   var $edge_count;
   var $vtx_dt_buf=(sp)+(160);
   var $vtx_dt;
   var $edge_dt_buf=(sp)+(288);
   var $edge_dt;
   var $write_buf_size;
   var $vtx;
   var $4=(sp)+(416);
   var $dt;
   var $data;
   var $elem_size;
   var $write_elem_size;
   var $src_ptr;
   var $write_max;
   var $write_count;
   var $edge_user_align;
   var $fmt_pairs=(sp)+(424);
   var $fmt_pair_count;
   var $5=(sp)+(936);
   var $edge;
   var $src_ptr2;
   $1=$fs;
   $2=$name;
   $3=$struct_ptr;
   $flag_buf=0;
   $write_buf=0;
   var $6=$3;
   var $7=$6;
   $graph=$7;
   var $8=$graph;
   var $9=(($8+60)|0);
   var $10=HEAP32[(($9)>>2)];
   $vtx_count=$10;
   var $11=$graph;
   var $12=(($11+64)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+60)|0);
   var $15=HEAP32[(($14)>>2)];
   $edge_count=$15;
   var $16=$vtx_count;
   var $17=($16<<2);
   var $18=_cvAlloc($17);
   var $19=$18;
   $flag_buf=$19;
   var $20=_cvGetErrStatus();
   var $21=(($20)|(0)) < 0;
   if ($21) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18168)|0), ((10080)|0), ((13712)|0), 4505);
   label = 72; break;
  case 3: 
   var $24=$graph;
   var $25=$24;
   _cvStartReadSeq($25, $reader, 0);
   $i=0;
   $k=0;
   label = 4; break;
  case 4: 
   var $27=$i;
   var $28=$graph;
   var $29=(($28+24)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($27)|(0)) < (($30)|(0));
   if ($31) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $33=(($reader+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$34;
   var $36=(($35)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0)) >= 0;
   if ($38) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $40=(($reader+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   $vtx=$42;
   var $43=$vtx;
   var $44=(($43)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$k;
   var $47=$flag_buf;
   var $48=(($47+($46<<2))|0);
   HEAP32[(($48)>>2)]=$45;
   var $49=$k;
   var $50=((($49)+(1))|0);
   $k=$50;
   var $51=$vtx;
   var $52=(($51)|0);
   HEAP32[(($52)>>2)]=$49;
   label = 7; break;
  case 7: 
   var $54=$graph;
   var $55=(($54+28)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($reader+12)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+$56)|0);
   HEAP32[(($57)>>2)]=$59;
   var $60=(($reader+20)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($59)>>>(0)) >= (($61)>>>(0));
   if ($62) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $64=$reader;
   _cvChangeSeqBlock($64, 1);
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $67=$i;
   var $68=((($67)+(1))|0);
   $i=$68;
   label = 4; break;
  case 11: 
   var $70=$1;
   var $71=$2;
   __Z10cvAttrListPPKcP10CvAttrList($4, 0, 0);
   _cvStartWriteStruct($70, $71, 6, ((9256)|0), $4);
   var $72=_cvGetErrStatus();
   var $73=(($72)|(0)) < 0;
   if ($73) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _cvError(-1, ((18168)|0), ((10080)|0), ((13712)|0), 4521);
   label = 72; break;
  case 13: 
   var $76=(($buf)|0);
   var $77=$graph;
   var $78=(($77)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=_sprintf($76, ((15272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$79,tempInt));
   var $81=$1;
   var $82=(($buf)|0);
   _cvWriteString($81, ((15248)|0), $82, 1);
   var $83=$1;
   var $84=$vtx_count;
   _cvWriteInt($83, ((15216)|0), $84);
   var $85=$graph;
   var $86=$85;
   var $87=(($vtx_dt_buf)|0);
   var $88=__ZL12icvGetFormatPK5CvSeqPKcP10CvAttrListiPc($86, ((15200)|0), $attr, 8, $87);
   $vtx_dt=$88;
   var $89=_cvGetErrStatus();
   var $90=(($89)|(0)) < 0;
   if ($90) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _cvError(-1, ((18168)|0), ((10080)|0), ((13712)|0), 4528);
   label = 72; break;
  case 15: 
   var $93=$vtx_dt;
   var $94=(($93)|(0))!=0;
   if ($94) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $96=$1;
   var $97=$vtx_dt;
   _cvWriteString($96, ((15200)|0), $97, 0);
   label = 17; break;
  case 17: 
   var $99=$1;
   var $100=$edge_count;
   _cvWriteInt($99, ((15168)|0), $100);
   var $101=$graph;
   var $102=(($101+64)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$103;
   var $105=(($buf)|0);
   var $106=__ZL12icvGetFormatPK5CvSeqPKcP10CvAttrListiPc($104, ((15160)|0), $attr, 24, $105);
   $edge_dt=$106;
   var $107=_cvGetErrStatus();
   var $108=(($107)|(0)) < 0;
   if ($108) { label = 18; break; } else { label = 19; break; }
  case 18: 
   _cvError(-1, ((18168)|0), ((10080)|0), ((13712)|0), 4534);
   label = 72; break;
  case 19: 
   var $111=(($edge_dt_buf)|0);
   var $112=$edge_dt;
   var $113=(($112)|(0))!=0;
   if ($113) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $115=$edge_dt;
   var $118 = $115;label = 22; break;
  case 21: 
   var $118 = ((36920)|0);label = 22; break;
  case 22: 
   var $118;
   var $119=_sprintf($111, ((15136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$118,tempInt));
   var $120=(($edge_dt_buf)|0);
   $edge_dt=$120;
   var $121=$1;
   var $122=$edge_dt;
   _cvWriteString($121, ((15160)|0), $122, 0);
   var $123=$1;
   var $124=$graph;
   var $125=$124;
   __ZL18icvWriteHeaderDataP13CvFileStoragePK5CvSeqP10CvAttrListi($123, $125, $attr, 68);
   var $126=_cvGetErrStatus();
   var $127=(($126)|(0)) < 0;
   if ($127) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-1, ((18168)|0), ((10080)|0), ((13712)|0), 4539);
   label = 72; break;
  case 24: 
   var $130=$graph;
   var $131=(($130+28)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=((($132)*(3))&-1);
   var $134=(($133)|(0)) < 65536;
   if ($134) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $142 = 65536;label = 27; break;
  case 26: 
   var $137=$graph;
   var $138=(($137+28)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=((($139)*(3))&-1);
   var $142 = $140;label = 27; break;
  case 27: 
   var $142;
   $write_buf_size=$142;
   var $143=$graph;
   var $144=(($143+64)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($145+28)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=((($147)*(3))&-1);
   var $149=$write_buf_size;
   var $150=(($148)|(0)) < (($149)|(0));
   if ($150) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $152=$write_buf_size;
   var $161 = $152;label = 30; break;
  case 29: 
   var $154=$graph;
   var $155=(($154+64)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+28)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=((($158)*(3))&-1);
   var $161 = $159;label = 30; break;
  case 30: 
   var $161;
   $write_buf_size=$161;
   var $162=$write_buf_size;
   var $163=_cvAlloc($162);
   $write_buf=$163;
   var $164=_cvGetErrStatus();
   var $165=(($164)|(0)) < 0;
   if ($165) { label = 31; break; } else { label = 32; break; }
  case 31: 
   _cvError(-1, ((18168)|0), ((10080)|0), ((13712)|0), 4543);
   label = 72; break;
  case 32: 
   $k=0;
   label = 33; break;
  case 33: 
   var $169=$k;
   var $170=(($169)|(0)) < 2;
   if ($170) { label = 34; break; } else { label = 63; break; }
  case 34: 
   var $172=$k;
   var $173=(($172)|(0))==0;
   var $174=$vtx_dt;
   var $175=$edge_dt;
   var $176=$173 ? $174 : $175;
   $dt=$176;
   var $177=$dt;
   var $178=(($177)|(0))!=0;
   if ($178) { label = 35; break; } else { label = 61; break; }
  case 35: 
   var $180=$k;
   var $181=(($180)|(0))==0;
   if ($181) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $183=$graph;
   var $184=$183;
   var $190 = $184;label = 38; break;
  case 37: 
   var $186=$graph;
   var $187=(($186+64)|0);
   var $188=HEAP32[(($187)>>2)];
   var $190 = $188;label = 38; break;
  case 38: 
   var $190;
   $data=$190;
   var $191=$data;
   var $192=(($191+28)|0);
   var $193=HEAP32[(($192)>>2)];
   $elem_size=$193;
   var $194=$dt;
   var $195=__ZL15icvCalcElemSizePKci($194, 0);
   $write_elem_size=$195;
   var $196=$write_buf;
   $src_ptr=$196;
   var $197=$write_buf_size;
   var $198=$write_elem_size;
   var $199=((((($197)|(0)))/((($198)|(0))))&-1);
   $write_max=$199;
   $write_count=0;
   $edge_user_align=4;
   var $200=$k;
   var $201=(($200)|(0))==1;
   if ($201) { label = 39; break; } else { label = 43; break; }
  case 39: 
   var $203=$dt;
   var $204=(($fmt_pairs)|0);
   var $205=__ZL15icvDecodeFormatPKcPii($203, $204, 128);
   $fmt_pair_count=$205;
   var $206=$fmt_pair_count;
   var $207=(($206)|(0)) > 2;
   if ($207) { label = 41; break; } else { label = 40; break; }
  case 40: 
   var $209=(($fmt_pairs+20)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=$210 & 504;
   var $212=$211 >> 3;
   var $213=((($212)+(1))|0);
   var $214=(($fmt_pairs+20)|0);
   var $215=HEAP32[(($214)>>2)];
   var $216=$215 & 7;
   var $217=($216<<1);
   var $218=47696 >>> (($217)>>>(0));
   var $219=$218 & 3;
   var $220=$213 << $219;
   var $221=(($220)|(0)) >= 8;
   if ($221) { label = 41; break; } else { label = 42; break; }
  case 41: 
   $edge_user_align=8;
   label = 42; break;
  case 42: 
   label = 43; break;
  case 43: 
   var $225=$1;
   var $226=$k;
   var $227=(($226)|(0))==0;
   var $228=$227 ? (((15096)|0)) : (((15088)|0));
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   _cvStartWriteStruct($225, $228, 13, 0, $5);
   var $229=$data;
   var $230=$229;
   _cvStartReadSeq($230, $reader, 0);
   $i=0;
   label = 44; break;
  case 44: 
   var $232=$i;
   var $233=$data;
   var $234=(($233+24)|0);
   var $235=HEAP32[(($234)>>2)];
   var $236=(($232)|(0)) < (($235)|(0));
   if ($236) { label = 45; break; } else { label = 58; break; }
  case 45: 
   var $238=(($reader+12)|0);
   var $239=HEAP32[(($238)>>2)];
   var $240=$239;
   var $241=(($240)|0);
   var $242=HEAP32[(($241)>>2)];
   var $243=(($242)|(0)) >= 0;
   if ($243) { label = 46; break; } else { label = 54; break; }
  case 46: 
   var $245=$k;
   var $246=(($245)|(0))==0;
   if ($246) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $248=$src_ptr;
   var $249=(($reader+12)|0);
   var $250=HEAP32[(($249)>>2)];
   var $251=(($250+8)|0);
   var $252=$write_elem_size;
   assert($252 % 1 === 0);(_memcpy($248, $251, $252)|0);
   label = 51; break;
  case 48: 
   var $254=(($reader+12)|0);
   var $255=HEAP32[(($254)>>2)];
   var $256=$255;
   $edge=$256;
   var $257=$src_ptr;
   var $258=__Z10cvAlignPtrPKvi($257, 4);
   $src_ptr=$258;
   var $259=$edge;
   var $260=(($259+16)|0);
   var $261=(($260)|0);
   var $262=HEAP32[(($261)>>2)];
   var $263=(($262)|0);
   var $264=HEAP32[(($263)>>2)];
   var $265=$src_ptr;
   var $266=$265;
   var $267=(($266)|0);
   HEAP32[(($267)>>2)]=$264;
   var $268=$edge;
   var $269=(($268+16)|0);
   var $270=(($269+4)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271)|0);
   var $273=HEAP32[(($272)>>2)];
   var $274=$src_ptr;
   var $275=$274;
   var $276=(($275+4)|0);
   HEAP32[(($276)>>2)]=$273;
   var $277=$edge;
   var $278=(($277+4)|0);
   var $279=HEAPF32[(($278)>>2)];
   var $280=$src_ptr;
   var $281=(($280+8)|0);
   var $282=$281;
   HEAPF32[(($282)>>2)]=$279;
   var $283=$elem_size;
   var $284=(($283)|(0)) > 24;
   if ($284) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $286=$src_ptr;
   var $287=(($286+8)|0);
   var $288=(($287+4)|0);
   var $289=$edge_user_align;
   var $290=__Z10cvAlignPtrPKvi($288, $289);
   $src_ptr2=$290;
   var $291=$src_ptr2;
   var $292=$edge;
   var $293=(($292+24)|0);
   var $294=$293;
   var $295=$elem_size;
   var $296=((($295)-(24))|0);
   assert($296 % 1 === 0);(_memcpy($291, $294, $296)|0);
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $299=$write_elem_size;
   var $300=$src_ptr;
   var $301=(($300+$299)|0);
   $src_ptr=$301;
   var $302=$write_count;
   var $303=((($302)+(1))|0);
   $write_count=$303;
   var $304=$write_max;
   var $305=(($303)|(0)) >= (($304)|(0));
   if ($305) { label = 52; break; } else { label = 53; break; }
  case 52: 
   var $307=$1;
   var $308=$write_buf;
   var $309=$write_count;
   var $310=$dt;
   _cvWriteRawData($307, $308, $309, $310);
   $write_count=0;
   var $311=$write_buf;
   $src_ptr=$311;
   label = 53; break;
  case 53: 
   label = 54; break;
  case 54: 
   var $314=$data;
   var $315=(($314+28)|0);
   var $316=HEAP32[(($315)>>2)];
   var $317=(($reader+12)|0);
   var $318=HEAP32[(($317)>>2)];
   var $319=(($318+$316)|0);
   HEAP32[(($317)>>2)]=$319;
   var $320=(($reader+20)|0);
   var $321=HEAP32[(($320)>>2)];
   var $322=(($319)>>>(0)) >= (($321)>>>(0));
   if ($322) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $324=$reader;
   _cvChangeSeqBlock($324, 1);
   label = 56; break;
  case 56: 
   label = 57; break;
  case 57: 
   var $327=$i;
   var $328=((($327)+(1))|0);
   $i=$328;
   label = 44; break;
  case 58: 
   var $330=$write_count;
   var $331=(($330)|(0)) > 0;
   if ($331) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $333=$1;
   var $334=$write_buf;
   var $335=$write_count;
   var $336=$dt;
   _cvWriteRawData($333, $334, $335, $336);
   label = 60; break;
  case 60: 
   var $338=$1;
   _cvEndWriteStruct($338);
   label = 61; break;
  case 61: 
   label = 62; break;
  case 62: 
   var $341=$k;
   var $342=((($341)+(1))|0);
   $k=$342;
   label = 33; break;
  case 63: 
   var $344=$1;
   _cvEndWriteStruct($344);
   var $345=$graph;
   var $346=$345;
   _cvStartReadSeq($346, $reader, 0);
   $vtx_count=0;
   $i=0;
   label = 64; break;
  case 64: 
   var $348=$i;
   var $349=$graph;
   var $350=(($349+24)|0);
   var $351=HEAP32[(($350)>>2)];
   var $352=(($348)|(0)) < (($351)|(0));
   if ($352) { label = 65; break; } else { label = 71; break; }
  case 65: 
   var $354=(($reader+12)|0);
   var $355=HEAP32[(($354)>>2)];
   var $356=$355;
   var $357=(($356)|0);
   var $358=HEAP32[(($357)>>2)];
   var $359=(($358)|(0)) >= 0;
   if ($359) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $361=$vtx_count;
   var $362=((($361)+(1))|0);
   $vtx_count=$362;
   var $363=$flag_buf;
   var $364=(($363+($361<<2))|0);
   var $365=HEAP32[(($364)>>2)];
   var $366=(($reader+12)|0);
   var $367=HEAP32[(($366)>>2)];
   var $368=$367;
   var $369=(($368)|0);
   HEAP32[(($369)>>2)]=$365;
   label = 67; break;
  case 67: 
   var $371=$graph;
   var $372=(($371+28)|0);
   var $373=HEAP32[(($372)>>2)];
   var $374=(($reader+12)|0);
   var $375=HEAP32[(($374)>>2)];
   var $376=(($375+$373)|0);
   HEAP32[(($374)>>2)]=$376;
   var $377=(($reader+20)|0);
   var $378=HEAP32[(($377)>>2)];
   var $379=(($376)>>>(0)) >= (($378)>>>(0));
   if ($379) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $381=$reader;
   _cvChangeSeqBlock($381, 1);
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   var $384=$i;
   var $385=((($384)+(1))|0);
   $i=$385;
   label = 64; break;
  case 71: 
   label = 72; break;
  case 72: 
   var $388=$write_buf;
   _cvFree_($388);
   $write_buf=0;
   var $389=$flag_buf;
   var $390=$389;
   _cvFree_($390);
   $flag_buf=0;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL13icvCloneGraphPKv($ptr) {
 var label = 0;
 var $1;
 $1=$ptr;
 var $2=$1;
 var $3=$2;
 var $4=_cvCloneGraph($3, 0);
 var $5=$4;
 return $5;
}
function ___cxx_global_var_init57() {
 var label = 0;
 __ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E(23704, ((9232)|0), 550, (218), 290, 126, (210));
 var $1=_atexit((298), 23704, ___dso_handle);
 return;
}
function __ZL10icvIsImagePKv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { var $11 = 0;label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==112;
   var $11 = $9;label = 3; break;
  case 3: 
   var $11;
   var $12=(($11)&(1));
   return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL16icvReadSparseMatP13CvFileStorageP10CvFileNode($fs, $node) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $mat;
   var $dt;
   var $data;
   var $sizes_node;
   var $reader=sp;
   var $elements;
   var $idx;
   var $sizes;
   var $dims;
   var $elem_type;
   var $cn;
   var $i;
   var $elem;
   var $val;
   var $k;
   $1=$fs;
   $2=$node;
   $ptr=0;
   $sizes=0;
   var $3=$1;
   var $4=$2;
   var $5=_cvGetFileNodeByName($3, $4, ((7592)|0));
   $sizes_node=$5;
   var $6=_cvGetErrStatus();
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((17976)|0), ((10080)|0), ((13712)|0), 3831);
   label = 49; break;
  case 3: 
   var $10=$1;
   var $11=$2;
   var $12=_cvReadStringByName($10, $11, ((7528)|0), 0);
   $dt=$12;
   var $13=$sizes_node;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $16=$dt;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-2, ((17976)|0), ((7400)|0), ((13712)|0), 3835);
   label = 49; break;
  case 6: 
   var $20=$sizes_node;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22 & 7;
   var $24=(($23)|(0))==5;
   if ($24) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $26=$sizes_node;
   var $27=(($26+8)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+24)|0);
   var $31=HEAP32[(($30)>>2)];
   var $40 = $31;label = 9; break;
  case 8: 
   var $33=$sizes_node;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$35 & 7;
   var $37=(($36)|(0))==1;
   var $38=$37 ? 1 : -1;
   var $40 = $38;label = 9; break;
  case 9: 
   var $40;
   $dims=$40;
   var $41=$dims;
   var $42=(($41)|(0)) <= 0;
   if ($42) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $44=$dims;
   var $45=(($44)|(0)) > 65536;
   if ($45) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-212, ((17976)|0), ((15384)|0), ((13712)|0), 3841);
   label = 49; break;
  case 12: 
   var $48=$dims;
   var $49=($48<<2);
   var $50=STACKTOP;STACKTOP = (STACKTOP + $49)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $51=$50;
   $sizes=$51;
   var $52=$1;
   var $53=$sizes_node;
   var $54=$sizes;
   var $55=$54;
   _cvReadRawData($52, $53, $55, ((7584)|0));
   var $56=_cvGetErrStatus();
   var $57=(($56)|(0)) < 0;
   if ($57) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-1, ((17976)|0), ((10080)|0), ((13712)|0), 3844);
   label = 49; break;
  case 14: 
   var $60=$dt;
   var $61=__ZL21icvDecodeSimpleFormatPKc($60);
   $elem_type=$61;
   var $62=_cvGetErrStatus();
   var $63=(($62)|(0)) < 0;
   if ($63) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _cvError(-1, ((17976)|0), ((10080)|0), ((13712)|0), 3845);
   label = 49; break;
  case 16: 
   var $66=$1;
   var $67=$2;
   var $68=_cvGetFileNodeByName($66, $67, ((7496)|0));
   $data=$68;
   var $69=$data;
   var $70=(($69)|(0))!=0;
   if ($70) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $72=$data;
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=$74 & 7;
   var $76=(($75)|(0))==5;
   if ($76) { label = 19; break; } else { label = 18; break; }
  case 18: 
   _cvError(-2, ((17976)|0), ((7304)|0), ((13712)|0), 3849);
   label = 49; break;
  case 19: 
   var $79=$dims;
   var $80=$sizes;
   var $81=$elem_type;
   var $82=_cvCreateSparseMat($79, $80, $81);
   $mat=$82;
   var $83=_cvGetErrStatus();
   var $84=(($83)|(0)) < 0;
   if ($84) { label = 20; break; } else { label = 21; break; }
  case 20: 
   _cvError(-1, ((17976)|0), ((10080)|0), ((13712)|0), 3851);
   label = 49; break;
  case 21: 
   var $87=$elem_type;
   var $88=$87 & 504;
   var $89=$88 >> 3;
   var $90=((($89)+(1))|0);
   $cn=$90;
   var $91=$dims;
   var $92=($91<<2);
   var $93=STACKTOP;STACKTOP = (STACKTOP + $92)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
   var $94=$93;
   $idx=$94;
   var $95=$data;
   var $96=(($95+8)|0);
   var $97=$96;
   var $98=HEAP32[(($97)>>2)];
   $elements=$98;
   var $99=$1;
   var $100=$data;
   _cvStartReadRawData($99, $100, $reader);
   $i=0;
   label = 22; break;
  case 22: 
   var $102=$i;
   var $103=$elements;
   var $104=(($103+24)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($102)|(0)) < (($105)|(0));
   if ($106) { label = 23; break; } else { label = 48; break; }
  case 23: 
   var $108=(($reader+12)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$109;
   $elem=$110;
   var $111=$elem;
   var $112=(($111)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=$113 & 7;
   var $115=(($114)|(0))==1;
   if ($115) { label = 25; break; } else { label = 24; break; }
  case 24: 
   _cvError(-212, ((17976)|0), ((15328)|0), ((13712)|0), 3864);
   label = 49; break;
  case 25: 
   var $118=$elem;
   var $119=(($118+8)|0);
   var $120=$119;
   var $121=HEAP32[(($120)>>2)];
   $k=$121;
   var $122=$i;
   var $123=(($122)|(0)) > 0;
   if ($123) { label = 26; break; } else { label = 28; break; }
  case 26: 
   var $125=$k;
   var $126=(($125)|(0)) >= 0;
   if ($126) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $128=$k;
   var $129=$dims;
   var $130=((($129)-(1))|0);
   var $131=$idx;
   var $132=(($131+($130<<2))|0);
   HEAP32[(($132)>>2)]=$128;
   label = 41; break;
  case 28: 
   var $134=$i;
   var $135=(($134)|(0)) > 0;
   if ($135) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $137=$dims;
   var $138=$k;
   var $139=((($137)+($138))|0);
   var $140=((($139)-(1))|0);
   $k=$140;
   label = 31; break;
  case 30: 
   var $142=$k;
   var $143=$idx;
   var $144=(($143)|0);
   HEAP32[(($144)>>2)]=$142;
   $k=1;
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $147=$k;
   var $148=$dims;
   var $149=(($147)|(0)) < (($148)|(0));
   if ($149) { label = 33; break; } else { label = 40; break; }
  case 33: 
   var $151=$elements;
   var $152=(($151+28)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=(($reader+12)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155+$153)|0);
   HEAP32[(($154)>>2)]=$156;
   var $157=(($reader+20)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($156)>>>(0)) >= (($158)>>>(0));
   if ($159) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $161=$reader;
   _cvChangeSeqBlock($161, 1);
   label = 35; break;
  case 35: 
   var $163=$i;
   var $164=((($163)+(1))|0);
   $i=$164;
   var $165=(($reader+12)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=$166;
   $elem=$167;
   var $168=$elem;
   var $169=(($168)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=$170 & 7;
   var $172=(($171)|(0))==1;
   if ($172) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $174=$elem;
   var $175=(($174+8)|0);
   var $176=$175;
   var $177=HEAP32[(($176)>>2)];
   var $178=(($177)|(0)) < 0;
   if ($178) { label = 37; break; } else { label = 38; break; }
  case 37: 
   _cvError(-212, ((17976)|0), ((15328)|0), ((13712)|0), 3880);
   label = 49; break;
  case 38: 
   var $181=$elem;
   var $182=(($181+8)|0);
   var $183=$182;
   var $184=HEAP32[(($183)>>2)];
   var $185=$k;
   var $186=$idx;
   var $187=(($186+($185<<2))|0);
   HEAP32[(($187)>>2)]=$184;
   label = 39; break;
  case 39: 
   var $189=$k;
   var $190=((($189)+(1))|0);
   $k=$190;
   label = 32; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $193=$elements;
   var $194=(($193+28)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($reader+12)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($197+$195)|0);
   HEAP32[(($196)>>2)]=$198;
   var $199=(($reader+20)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($198)>>>(0)) >= (($200)>>>(0));
   if ($201) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $203=$reader;
   _cvChangeSeqBlock($203, 1);
   label = 43; break;
  case 43: 
   var $205=$i;
   var $206=((($205)+(1))|0);
   $i=$206;
   var $207=$mat;
   var $208=$207;
   var $209=$idx;
   var $210=_cvPtrND($208, $209, 0, 1, 0);
   $val=$210;
   var $211=_cvGetErrStatus();
   var $212=(($211)|(0)) < 0;
   if ($212) { label = 44; break; } else { label = 45; break; }
  case 44: 
   _cvError(-1, ((17976)|0), ((10080)|0), ((13712)|0), 3886);
   label = 49; break;
  case 45: 
   var $215=$1;
   var $216=$cn;
   var $217=$val;
   var $218=$dt;
   _cvReadRawDataSlice($215, $reader, $216, $217, $218);
   var $219=_cvGetErrStatus();
   var $220=(($219)|(0)) < 0;
   if ($220) { label = 46; break; } else { label = 47; break; }
  case 46: 
   _cvError(-1, ((17976)|0), ((10080)|0), ((13712)|0), 3887);
   label = 49; break;
  case 47: 
   var $223=$cn;
   var $224=$i;
   var $225=((($224)+($223))|0);
   $i=$225;
   label = 22; break;
  case 48: 
   var $227=$mat;
   var $228=$227;
   $ptr=$228;
   label = 49; break;
  case 49: 
   var $230=$ptr;
   STACKTOP = sp;
   return $230;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvWriteSparseMatP13CvFileStoragePKcPKv10CvAttrList($fs, $name, $struct_ptr, $0) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $memstorage=sp;
   var $mat;
   var $iterator=(sp)+(8);
   var $node;
   var $elements;
   var $reader=(sp)+(24);
   var $i;
   var $dims=(sp)+(56);
   var $prev_idx;
   var $dt=(sp)+(64);
   var $5=(sp)+(80);
   var $6=(sp)+(88);
   var $7=(sp)+(96);
   var $idx=(sp)+(104);
   var $idx1=(sp)+(112);
   var $val;
   var $k;
   $2=$fs;
   $3=$name;
   $4=$struct_ptr;
   HEAP32[(($memstorage)>>2)]=0;
   var $8=$4;
   var $9=$8;
   $mat=$9;
   $prev_idx=0;
   var $10=_cvCreateMemStorage(0);
   HEAP32[(($memstorage)>>2)]=$10;
   var $11=_cvGetErrStatus();
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((17896)|0), ((10080)|0), ((13712)|0), 3756);
   label = 27; break;
  case 3: 
   var $15=$2;
   var $16=$3;
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   _cvStartWriteStruct($15, $16, 6, ((9232)|0), $5);
   var $17=_cvGetErrStatus();
   var $18=(($17)|(0)) < 0;
   if ($18) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((17896)|0), ((10080)|0), ((13712)|0), 3758);
   label = 27; break;
  case 5: 
   var $21=$mat;
   var $22=$21;
   var $23=_cvGetDims($22, 0);
   HEAP32[(($dims)>>2)]=$23;
   var $24=$2;
   __Z10cvAttrListPPKcP10CvAttrList($6, 0, 0);
   _cvStartWriteStruct($24, ((7592)|0), 13, 0, $6);
   var $25=$2;
   var $26=$mat;
   var $27=(($26+36)|0);
   var $28=(($27)|0);
   var $29=$28;
   var $30=HEAP32[(($dims)>>2)];
   _cvWriteRawData($25, $29, $30, ((7584)|0));
   var $31=$2;
   _cvEndWriteStruct($31);
   var $32=$2;
   var $33=$mat;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$35 & 511;
   var $37=(($dt)|0);
   var $38=__ZL15icvEncodeFormatiPc($36, $37);
   _cvWriteString($32, ((7528)|0), $38, 0);
   var $39=$2;
   __Z10cvAttrListPPKcP10CvAttrList($7, 0, 0);
   _cvStartWriteStruct($39, ((7496)|0), 13, 0, $7);
   var $40=HEAP32[(($memstorage)>>2)];
   var $41=_cvCreateSeq(7, 56, 4, $40);
   $elements=$41;
   var $42=$mat;
   var $43=_cvInitSparseMatIterator($42, $iterator);
   $node=$43;
   label = 6; break;
  case 6: 
   var $45=$node;
   var $46=(($45)|(0))!=0;
   if ($46) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $48=$node;
   var $49=$48;
   var $50=$mat;
   var $51=(($50+32)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($49+$52)|0);
   var $54=$53;
   HEAP32[(($idx)>>2)]=$54;
   var $55=$elements;
   var $56=$idx;
   var $57=_cvSeqPush($55, $56);
   var $58=_cvGetNextSparseNode($iterator);
   $node=$58;
   label = 6; break;
  case 8: 
   var $60=$elements;
   var $61=$dims;
   _cvSeqSort($60, 484, $61);
   var $62=$elements;
   _cvStartReadSeq($62, $reader, 0);
   $i=0;
   label = 9; break;
  case 9: 
   var $64=$i;
   var $65=$elements;
   var $66=(($65+24)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($64)|(0)) < (($67)|(0));
   if ($68) { label = 10; break; } else { label = 26; break; }
  case 10: 
   $k=0;
   var $70=$idx1;
   var $71=(($reader+12)|0);
   var $72=HEAP32[(($71)>>2)];
   assert(4 % 1 === 0);HEAP8[($70)]=HEAP8[($72)];HEAP8[((($70)+(1))|0)]=HEAP8[((($72)+(1))|0)];HEAP8[((($70)+(2))|0)]=HEAP8[((($72)+(2))|0)];HEAP8[((($70)+(3))|0)]=HEAP8[((($72)+(3))|0)];
   var $73=(($reader+12)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74+4)|0);
   HEAP32[(($73)>>2)]=$75;
   var $76=(($reader+20)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($75)>>>(0)) >= (($77)>>>(0));
   if ($78) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $80=$reader;
   _cvChangeSeqBlock($80, 1);
   label = 12; break;
  case 12: 
   var $82=$i;
   var $83=(($82)|(0)) > 0;
   if ($83) { label = 13; break; } else { label = 20; break; }
  case 13: 
   label = 14; break;
  case 14: 
   var $86=$k;
   var $87=HEAP32[(($idx1)>>2)];
   var $88=(($87+($86<<2))|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=$k;
   var $91=$prev_idx;
   var $92=(($91+($90<<2))|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($89)|(0))==(($93)|(0));
   if ($94) { label = 15; break; } else { label = 17; break; }
  case 15: 
   label = 16; break;
  case 16: 
   var $97=$k;
   var $98=((($97)+(1))|0);
   $k=$98;
   label = 14; break;
  case 17: 
   var $100=$k;
   var $101=HEAP32[(($dims)>>2)];
   var $102=((($101)-(1))|0);
   var $103=(($100)|(0)) < (($102)|(0));
   if ($103) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $105=$2;
   var $106=(($105+232)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=$2;
   var $109=$k;
   var $110=HEAP32[(($dims)>>2)];
   var $111=((($109)-($110))|0);
   var $112=((($111)+(1))|0);
   FUNCTION_TABLE[$107]($108, 0, $112);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $116=$k;
   var $117=HEAP32[(($dims)>>2)];
   var $118=(($116)|(0)) < (($117)|(0));
   if ($118) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $120=$2;
   var $121=(($120+232)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$2;
   var $124=$k;
   var $125=HEAP32[(($idx1)>>2)];
   var $126=(($125+($124<<2))|0);
   var $127=HEAP32[(($126)>>2)];
   FUNCTION_TABLE[$122]($123, 0, $127);
   label = 23; break;
  case 23: 
   var $129=$k;
   var $130=((($129)+(1))|0);
   $k=$130;
   label = 21; break;
  case 24: 
   var $132=HEAP32[(($idx1)>>2)];
   $prev_idx=$132;
   var $133=HEAP32[(($idx1)>>2)];
   var $134=$133;
   var $135=$mat;
   var $136=(($135+32)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=(((-$137))|0);
   var $139=(($134+$138)|0);
   var $140=$139;
   $node=$140;
   var $141=$node;
   var $142=$141;
   var $143=$mat;
   var $144=(($143+28)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($142+$145)|0);
   $val=$146;
   var $147=$2;
   var $148=$val;
   var $149=(($dt)|0);
   _cvWriteRawData($147, $148, 1, $149);
   label = 25; break;
  case 25: 
   var $151=$i;
   var $152=((($151)+(1))|0);
   $i=$152;
   label = 9; break;
  case 26: 
   var $154=$2;
   _cvEndWriteStruct($154);
   var $155=$2;
   _cvEndWriteStruct($155);
   label = 27; break;
  case 27: 
   _cvReleaseMemStorage($memstorage);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_var_init59() {
 var label = 0;
 __ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E(27984, ((9096)|0), 482, (400), 598, 634, (416));
 var $1=_atexit((298), 27984, ___dso_handle);
 return;
}
function __ZL12icvReadImageP13CvFileStorageP10CvFileNode($fs, $node) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $image;
   var $dt;
   var $data;
   var $roi_node;
   var $reader=sp;
   var $roi=(sp)+(32);
   var $y;
   var $width;
   var $height;
   var $elem_type;
   var $coi;
   var $depth;
   var $origin;
   var $data_order;
   var $3=(sp)+(48);
   var $4=(sp)+(56);
   $1=$fs;
   $2=$node;
   $ptr=0;
   var $5=$1;
   var $6=$2;
   var $7=_cvReadIntByName($5, $6, ((15888)|0), 0);
   $width=$7;
   var $8=_cvGetErrStatus();
   var $9=(($8)|(0)) < 0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18248)|0), ((10080)|0), ((13712)|0), 3983);
   label = 29; break;
  case 3: 
   var $12=$1;
   var $13=$2;
   var $14=_cvReadIntByName($12, $13, ((15880)|0), 0);
   $height=$14;
   var $15=$1;
   var $16=$2;
   var $17=_cvReadStringByName($15, $16, ((7528)|0), 0);
   $dt=$17;
   var $18=$1;
   var $19=$2;
   var $20=_cvReadStringByName($18, $19, ((15872)|0), 0);
   $origin=$20;
   var $21=$width;
   var $22=(($21)|(0))==0;
   if ($22) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $24=$height;
   var $25=(($24)|(0))==0;
   if ($25) { label = 7; break; } else { label = 5; break; }
  case 5: 
   var $27=$dt;
   var $28=(($27)|(0))==0;
   if ($28) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $30=$origin;
   var $31=(($30)|(0))==0;
   if ($31) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _cvError(-2, ((18248)|0), ((15624)|0), ((13712)|0), 3989);
   label = 29; break;
  case 8: 
   var $34=$dt;
   var $35=__ZL21icvDecodeSimpleFormatPKc($34);
   $elem_type=$35;
   var $36=_cvGetErrStatus();
   var $37=(($36)|(0)) < 0;
   if ($37) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _cvError(-1, ((18248)|0), ((10080)|0), ((13712)|0), 3991);
   label = 29; break;
  case 10: 
   var $40=$1;
   var $41=$2;
   var $42=_cvReadStringByName($40, $41, ((15832)|0), ((15808)|0));
   $data_order=$42;
   var $43=$data_order;
   var $44=_strcmp($43, ((15808)|0));
   var $45=(($44)|(0))!=0;
   if ($45) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-2, ((18248)|0), ((15584)|0), ((13712)|0), 3994);
   label = 29; break;
  case 12: 
   var $48=$1;
   var $49=$2;
   var $50=_cvGetFileNodeByName($48, $49, ((7496)|0));
   $data=$50;
   var $51=$data;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 14; break; } else { label = 13; break; }
  case 13: 
   _cvError(-2, ((18248)|0), ((15496)|0), ((13712)|0), 3998);
   label = 29; break;
  case 14: 
   var $55=$data;
   var $56=__ZL17icvFileNodeSeqLenP10CvFileNode($55);
   var $57=$width;
   var $58=$height;
   var $59=(Math.imul($57,$58)|0);
   var $60=$elem_type;
   var $61=$60 & 504;
   var $62=$61 >> 3;
   var $63=((($62)+(1))|0);
   var $64=(Math.imul($59,$63)|0);
   var $65=(($56)|(0))!=(($64)|(0));
   if ($65) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _cvError(-209, ((18248)|0), ((16064)|0), ((13712)|0), 4002);
   label = 29; break;
  case 16: 
   var $68=$elem_type;
   var $69=__Z14cvCvToIplDepthi($68);
   $depth=$69;
   var $70=$width;
   var $71=$height;
   __Z6cvSizeii($3, $70, $71);
   var $72=$depth;
   var $73=$elem_type;
   var $74=$73 & 504;
   var $75=$74 >> 3;
   var $76=((($75)+(1))|0);
   var $77=_cvCreateImage($3, $72, $76);
   $image=$77;
   var $78=_cvGetErrStatus();
   var $79=(($78)|(0)) < 0;
   if ($79) { label = 17; break; } else { label = 18; break; }
  case 17: 
   _cvError(-1, ((18248)|0), ((10080)|0), ((13712)|0), 4005);
   label = 29; break;
  case 18: 
   var $82=$1;
   var $83=$2;
   var $84=_cvGetFileNodeByName($82, $83, ((15744)|0));
   $roi_node=$84;
   var $85=$roi_node;
   var $86=(($85)|(0))!=0;
   if ($86) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $88=$1;
   var $89=$roi_node;
   var $90=_cvReadIntByName($88, $89, ((15712)|0), 0);
   var $91=(($roi)|0);
   HEAP32[(($91)>>2)]=$90;
   var $92=$1;
   var $93=$roi_node;
   var $94=_cvReadIntByName($92, $93, ((15704)|0), 0);
   var $95=(($roi+4)|0);
   HEAP32[(($95)>>2)]=$94;
   var $96=$1;
   var $97=$roi_node;
   var $98=_cvReadIntByName($96, $97, ((15888)|0), 0);
   var $99=(($roi+8)|0);
   HEAP32[(($99)>>2)]=$98;
   var $100=$1;
   var $101=$roi_node;
   var $102=_cvReadIntByName($100, $101, ((15880)|0), 0);
   var $103=(($roi+12)|0);
   HEAP32[(($103)>>2)]=$102;
   var $104=$1;
   var $105=$roi_node;
   var $106=_cvReadIntByName($104, $105, ((15672)|0), 0);
   $coi=$106;
   var $107=$image;
   var $108=$4;
   var $109=$roi;
   assert(16 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];HEAP32[((($108)+(8))>>2)]=HEAP32[((($109)+(8))>>2)];HEAP32[((($108)+(12))>>2)]=HEAP32[((($109)+(12))>>2)];
   _cvSetImageROI($107, $4);
   var $110=$image;
   var $111=$coi;
   _cvSetImageCOI($110, $111);
   label = 20; break;
  case 20: 
   var $113=$width;
   var $114=$elem_type;
   var $115=$114 & 504;
   var $116=$115 >> 3;
   var $117=((($116)+(1))|0);
   var $118=$elem_type;
   var $119=$118 & 7;
   var $120=($119<<1);
   var $121=47696 >>> (($120)>>>(0));
   var $122=$121 & 3;
   var $123=$117 << $122;
   var $124=(Math.imul($113,$123)|0);
   var $125=$image;
   var $126=(($125+72)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($124)|(0))==(($127)|(0));
   if ($128) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $130=$height;
   var $131=$width;
   var $132=(Math.imul($131,$130)|0);
   $width=$132;
   $height=1;
   label = 22; break;
  case 22: 
   var $134=$elem_type;
   var $135=$134 & 504;
   var $136=$135 >> 3;
   var $137=((($136)+(1))|0);
   var $138=$width;
   var $139=(Math.imul($138,$137)|0);
   $width=$139;
   var $140=$1;
   var $141=$data;
   _cvStartReadRawData($140, $141, $reader);
   $y=0;
   label = 23; break;
  case 23: 
   var $143=$y;
   var $144=$height;
   var $145=(($143)|(0)) < (($144)|(0));
   if ($145) { label = 24; break; } else { label = 28; break; }
  case 24: 
   var $147=$1;
   var $148=$width;
   var $149=$image;
   var $150=(($149+68)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=$y;
   var $153=$image;
   var $154=(($153+72)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(Math.imul($152,$155)|0);
   var $157=(($151+$156)|0);
   var $158=$dt;
   _cvReadRawDataSlice($147, $reader, $148, $157, $158);
   var $159=_cvGetErrStatus();
   var $160=(($159)|(0)) < 0;
   if ($160) { label = 25; break; } else { label = 26; break; }
  case 25: 
   _cvError(-1, ((18248)|0), ((10080)|0), ((13712)|0), 4031);
   label = 29; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $164=$y;
   var $165=((($164)+(1))|0);
   $y=$165;
   label = 23; break;
  case 28: 
   var $167=$image;
   var $168=$167;
   $ptr=$168;
   label = 29; break;
  case 29: 
   var $170=$ptr;
   STACKTOP = sp;
   return $170;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL8icvIsMatPKv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { var $26 = 0;label = 5; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1111621632;
   if ($10) { label = 3; break; } else { var $26 = 0;label = 5; break; }
  case 3: 
   var $12=$1;
   var $13=$12;
   var $14=(($13+24)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0)) > 0;
   if ($17) { label = 4; break; } else { var $26 = 0;label = 5; break; }
  case 4: 
   var $19=$1;
   var $20=$19;
   var $21=(($20+20)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0)) > 0;
   var $26 = $24;label = 5; break;
  case 5: 
   var $26;
   var $27=(($26)&(1));
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL10icvIsMatNDPKv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$ptr;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { var $19 = 0;label = 4; break; }
  case 2: 
   var $5=$1;
   var $6=$5;
   var $7=(($6)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & -65536;
   var $10=(($9)|(0))==1111687168;
   if ($10) { label = 3; break; } else { var $19 = 0;label = 4; break; }
  case 3: 
   var $12=$1;
   var $13=$12;
   var $14=(($13+16)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   var $19 = $17;label = 4; break;
  case 4: 
   var $19;
   var $20=(($19)&(1));
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL13icvWriteImageP13CvFileStoragePKcPKv10CvAttrList($fs, $name, $struct_ptr, $0) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $image;
   var $dt_buf=sp;
   var $dt;
   var $size=(sp)+(16);
   var $y;
   var $depth;
   var $5=(sp)+(24);
   var $6=(sp)+(32);
   var $7=(sp)+(40);
   var $8=(sp)+(48);
   $2=$fs;
   $3=$name;
   $4=$struct_ptr;
   var $9=$4;
   var $10=$9;
   $image=$10;
   var $11=$image;
   var $12=(($11+28)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==1;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-210, ((18152)|0), ((15896)|0), ((13712)|0), 3924);
   label = 16; break;
  case 3: 
   var $17=$2;
   var $18=$3;
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   _cvStartWriteStruct($17, $18, 6, ((9096)|0), $5);
   var $19=_cvGetErrStatus();
   var $20=(($19)|(0)) < 0;
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((18152)|0), ((10080)|0), ((13712)|0), 3926);
   label = 16; break;
  case 5: 
   var $23=$2;
   var $24=$image;
   var $25=(($24+40)|0);
   var $26=HEAP32[(($25)>>2)];
   _cvWriteInt($23, ((15888)|0), $26);
   var $27=$2;
   var $28=$image;
   var $29=(($28+44)|0);
   var $30=HEAP32[(($29)>>2)];
   _cvWriteInt($27, ((15880)|0), $30);
   var $31=$2;
   var $32=$image;
   var $33=(($32+32)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34)|(0))==0;
   var $36=$35 ? (((15856)|0)) : (((15840)|0));
   _cvWriteString($31, ((15872)|0), $36, 0);
   var $37=$2;
   var $38=$image;
   var $39=(($38+28)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0))==1;
   var $42=$41 ? (((15824)|0)) : (((15808)|0));
   _cvWriteString($37, ((15832)|0), $42, 0);
   var $43=$image;
   var $44=(($43+48)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0))!=0;
   if ($46) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $48=$2;
   __Z10cvAttrListPPKcP10CvAttrList($6, 0, 0);
   _cvStartWriteStruct($48, ((15744)|0), 14, 0, $6);
   var $49=$2;
   var $50=$image;
   var $51=(($50+48)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   _cvWriteInt($49, ((15712)|0), $54);
   var $55=$2;
   var $56=$image;
   var $57=(($56+48)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+8)|0);
   var $60=HEAP32[(($59)>>2)];
   _cvWriteInt($55, ((15704)|0), $60);
   var $61=$2;
   var $62=$image;
   var $63=(($62+48)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+12)|0);
   var $66=HEAP32[(($65)>>2)];
   _cvWriteInt($61, ((15888)|0), $66);
   var $67=$2;
   var $68=$image;
   var $69=(($68+48)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+16)|0);
   var $72=HEAP32[(($71)>>2)];
   _cvWriteInt($67, ((15880)|0), $72);
   var $73=$2;
   var $74=$image;
   var $75=(($74+48)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76)|0);
   var $78=HEAP32[(($77)>>2)];
   _cvWriteInt($73, ((15672)|0), $78);
   var $79=$2;
   _cvEndWriteStruct($79);
   label = 7; break;
  case 7: 
   var $81=$image;
   var $82=(($81+16)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=$83 & 255;
   var $85=$84 >> 2;
   var $86=$image;
   var $87=(($86+16)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88)|(0)) < 0;
   var $90=(($89)&(1));
   var $91=((($85)+($90))|0);
   var $92=((784+$91)|0);
   var $93=HEAP8[($92)];
   var $94=(($93 << 24) >> 24);
   $depth=$94;
   var $95=(($dt_buf)|0);
   var $96=$image;
   var $97=(($96+8)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$depth;
   var $100=((23064+$99)|0);
   var $101=HEAP8[($100)];
   var $102=(($101 << 24) >> 24);
   var $103=_sprintf($95, ((7488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$98,HEAP32[(((tempInt)+(8))>>2)]=$102,tempInt));
   var $104=(($dt_buf)|0);
   var $105=(($dt_buf+2)|0);
   var $106=HEAP8[($105)];
   var $107=(($106 << 24) >> 24);
   var $108=(($107)|(0))==0;
   if ($108) { label = 8; break; } else { var $115 = 0;label = 9; break; }
  case 8: 
   var $110=(($dt_buf)|0);
   var $111=HEAP8[($110)];
   var $112=(($111 << 24) >> 24);
   var $113=(($112)|(0))==49;
   var $115 = $113;label = 9; break;
  case 9: 
   var $115;
   var $116=(($115)&(1));
   var $117=(($104+$116)|0);
   $dt=$117;
   var $118=$2;
   var $119=$dt;
   _cvWriteString($118, ((7528)|0), $119, 0);
   var $120=$image;
   var $121=(($120+40)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$image;
   var $124=(($123+44)|0);
   var $125=HEAP32[(($124)>>2)];
   __Z6cvSizeii($7, $122, $125);
   var $126=$size;
   var $127=$7;
   assert(8 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];
   var $128=(($size)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$image;
   var $131=(($130+8)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(Math.imul($129,$132)|0);
   var $134=$depth;
   var $135=$134 & 504;
   var $136=$135 >> 3;
   var $137=((($136)+(1))|0);
   var $138=$depth;
   var $139=$138 & 7;
   var $140=($139<<1);
   var $141=47696 >>> (($140)>>>(0));
   var $142=$141 & 3;
   var $143=$137 << $142;
   var $144=(Math.imul($133,$143)|0);
   var $145=$image;
   var $146=(($145+72)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=(($144)|(0))==(($147)|(0));
   if ($148) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $150=(($size+4)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=(($size)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=(Math.imul($153,$151)|0);
   HEAP32[(($152)>>2)]=$154;
   var $155=(($size+4)|0);
   HEAP32[(($155)>>2)]=1;
   label = 11; break;
  case 11: 
   var $157=$2;
   __Z10cvAttrListPPKcP10CvAttrList($8, 0, 0);
   _cvStartWriteStruct($157, ((7496)|0), 13, 0, $8);
   $y=0;
   label = 12; break;
  case 12: 
   var $159=$y;
   var $160=(($size+4)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($159)|(0)) < (($161)|(0));
   if ($162) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $164=$2;
   var $165=$image;
   var $166=(($165+68)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=$y;
   var $169=$image;
   var $170=(($169+72)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(Math.imul($168,$171)|0);
   var $173=(($167+$172)|0);
   var $174=(($size)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=$dt;
   _cvWriteRawData($164, $173, $175, $176);
   label = 14; break;
  case 14: 
   var $178=$y;
   var $179=((($178)+(1))|0);
   $y=$179;
   label = 12; break;
  case 15: 
   var $181=$2;
   _cvEndWriteStruct($181);
   var $182=$2;
   _cvEndWriteStruct($182);
   label = 16; break;
  case 16: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_var_init61() {
 var label = 0;
 __ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E(27936, ((9056)|0), 46, (280), 720, 510, (166));
 var $1=_atexit((298), 27936, ___dso_handle);
 return;
}
function __ZL10icvReadMatP13CvFileStorageP10CvFileNode($fs, $node) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $mat;
   var $dt;
   var $data;
   var $rows;
   var $cols;
   var $elem_type;
   $1=$fs;
   $2=$node;
   $ptr=0;
   var $3=$1;
   var $4=$2;
   var $5=_cvReadIntByName($3, $4, ((16016)|0), 0);
   $rows=$5;
   var $6=_cvGetErrStatus();
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18376)|0), ((10080)|0), ((13712)|0), 3583);
   label = 18; break;
  case 3: 
   var $10=$1;
   var $11=$2;
   var $12=_cvReadIntByName($10, $11, ((15968)|0), 0);
   $cols=$12;
   var $13=$1;
   var $14=$2;
   var $15=_cvReadStringByName($13, $14, ((7528)|0), 0);
   $dt=$15;
   var $16=$rows;
   var $17=(($16)|(0))==0;
   if ($17) { label = 6; break; } else { label = 4; break; }
  case 4: 
   var $19=$cols;
   var $20=(($19)|(0))==0;
   if ($20) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $22=$dt;
   var $23=(($22)|(0))==0;
   if ($23) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-2, ((18376)|0), ((7400)|0), ((13712)|0), 3588);
   label = 18; break;
  case 7: 
   var $26=$dt;
   var $27=__ZL21icvDecodeSimpleFormatPKc($26);
   $elem_type=$27;
   var $28=_cvGetErrStatus();
   var $29=(($28)|(0)) < 0;
   if ($29) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _cvError(-1, ((18376)|0), ((10080)|0), ((13712)|0), 3590);
   label = 18; break;
  case 9: 
   var $32=$1;
   var $33=$2;
   var $34=_cvGetFileNodeByName($32, $33, ((7496)|0));
   $data=$34;
   var $35=$data;
   var $36=(($35)|(0))!=0;
   if ($36) { label = 11; break; } else { label = 10; break; }
  case 10: 
   _cvError(-2, ((18376)|0), ((7304)|0), ((13712)|0), 3594);
   label = 18; break;
  case 11: 
   var $39=$data;
   var $40=__ZL17icvFileNodeSeqLenP10CvFileNode($39);
   var $41=$rows;
   var $42=$cols;
   var $43=(Math.imul($41,$42)|0);
   var $44=$elem_type;
   var $45=$44 & 504;
   var $46=$45 >> 3;
   var $47=((($46)+(1))|0);
   var $48=(Math.imul($43,$47)|0);
   var $49=(($40)|(0))!=(($48)|(0));
   if ($49) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _cvError(-209, ((18376)|0), ((16064)|0), ((13712)|0), 3598);
   label = 18; break;
  case 13: 
   var $52=$rows;
   var $53=$cols;
   var $54=$elem_type;
   var $55=_cvCreateMat($52, $53, $54);
   $mat=$55;
   var $56=_cvGetErrStatus();
   var $57=(($56)|(0)) < 0;
   if ($57) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _cvError(-1, ((18376)|0), ((10080)|0), ((13712)|0), 3600);
   label = 18; break;
  case 15: 
   var $60=$1;
   var $61=$data;
   var $62=$mat;
   var $63=(($62+16)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=$dt;
   _cvReadRawData($60, $61, $65, $66);
   var $67=_cvGetErrStatus();
   var $68=(($67)|(0)) < 0;
   if ($68) { label = 16; break; } else { label = 17; break; }
  case 16: 
   _cvError(-1, ((18376)|0), ((10080)|0), ((13712)|0), 3601);
   label = 18; break;
  case 17: 
   var $71=$mat;
   var $72=$71;
   $ptr=$72;
   label = 18; break;
  case 18: 
   var $74=$ptr;
   return $74;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL11icvWriteMatP13CvFileStoragePKcPKv10CvAttrList($fs, $name, $struct_ptr, $0) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $mat;
   var $dt=sp;
   var $size=(sp)+(16);
   var $y;
   var $5=(sp)+(24);
   var $6=(sp)+(32);
   var $7=(sp)+(40);
   $2=$fs;
   $3=$name;
   $4=$struct_ptr;
   var $8=$4;
   var $9=$8;
   $mat=$9;
   var $10=$2;
   var $11=$3;
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   _cvStartWriteStruct($10, $11, 6, ((9056)|0), $5);
   var $12=_cvGetErrStatus();
   var $13=(($12)|(0)) < 0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18344)|0), ((10080)|0), ((13712)|0), 3540);
   label = 10; break;
  case 3: 
   var $16=$2;
   var $17=$mat;
   var $18=(($17+20)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   _cvWriteInt($16, ((16016)|0), $20);
   var $21=$2;
   var $22=$mat;
   var $23=(($22+24)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   _cvWriteInt($21, ((15968)|0), $25);
   var $26=$2;
   var $27=$mat;
   var $28=(($27)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 & 511;
   var $31=(($dt)|0);
   var $32=__ZL15icvEncodeFormatiPc($30, $31);
   _cvWriteString($26, ((7528)|0), $32, 0);
   var $33=$2;
   __Z10cvAttrListPPKcP10CvAttrList($6, 0, 0);
   _cvStartWriteStruct($33, ((7496)|0), 13, 0, $6);
   var $34=$mat;
   var $35=$34;
   _cvGetSize($7, $35);
   var $36=$size;
   var $37=$7;
   assert(8 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];
   var $38=$mat;
   var $39=(($38)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$40 & 16384;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $44=(($size+4)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($size)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(Math.imul($47,$45)|0);
   HEAP32[(($46)>>2)]=$48;
   var $49=(($size+4)|0);
   HEAP32[(($49)>>2)]=1;
   label = 5; break;
  case 5: 
   $y=0;
   label = 6; break;
  case 6: 
   var $52=$y;
   var $53=(($size+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($52)|(0)) < (($54)|(0));
   if ($55) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $57=$2;
   var $58=$mat;
   var $59=(($58+16)|0);
   var $60=$59;
   var $61=HEAP32[(($60)>>2)];
   var $62=$y;
   var $63=$mat;
   var $64=(($63+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(Math.imul($62,$65)|0);
   var $67=(($61+$66)|0);
   var $68=(($size)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($dt)|0);
   _cvWriteRawData($57, $67, $69, $70);
   label = 8; break;
  case 8: 
   var $72=$y;
   var $73=((($72)+(1))|0);
   $y=$73;
   label = 6; break;
  case 9: 
   var $75=$2;
   _cvEndWriteStruct($75);
   var $76=$2;
   _cvEndWriteStruct($76);
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_var_init63() {
 var label = 0;
 __ZN6CvTypeC2EPKcPFiPKvEPFvPPvEPFS6_P13CvFileStorageP10CvFileNodeEPFvSB_S1_S3_10CvAttrListEPFS6_S3_E(27928, ((8920)|0), 222, (170), 420, 594, (124));
 var $1=_atexit((298), 27928, ___dso_handle);
 return;
}
function __ZL12icvReadMatNDP13CvFileStorageP10CvFileNode($fs, $node) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $mat;
   var $dt;
   var $data;
   var $sizes_node;
   var $sizes=sp;
   var $dims;
   var $elem_type;
   var $i;
   var $total_size;
   $1=$fs;
   $2=$node;
   $ptr=0;
   var $3=$1;
   var $4=$2;
   var $5=_cvGetFileNodeByName($3, $4, ((7592)|0));
   $sizes_node=$5;
   var $6=_cvGetErrStatus();
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18232)|0), ((10080)|0), ((13712)|0), 3671);
   label = 29; break;
  case 3: 
   var $10=$1;
   var $11=$2;
   var $12=_cvReadStringByName($10, $11, ((7528)|0), 0);
   $dt=$12;
   var $13=$sizes_node;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $16=$dt;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _cvError(-2, ((18232)|0), ((7400)|0), ((13712)|0), 3675);
   label = 29; break;
  case 6: 
   var $20=$sizes_node;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22 & 7;
   var $24=(($23)|(0))==5;
   if ($24) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $26=$sizes_node;
   var $27=(($26+8)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+24)|0);
   var $31=HEAP32[(($30)>>2)];
   var $40 = $31;label = 9; break;
  case 8: 
   var $33=$sizes_node;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$35 & 7;
   var $37=(($36)|(0))==1;
   var $38=$37 ? 1 : -1;
   var $40 = $38;label = 9; break;
  case 9: 
   var $40;
   $dims=$40;
   var $41=$dims;
   var $42=(($41)|(0)) <= 0;
   if ($42) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $44=$dims;
   var $45=(($44)|(0)) > 32;
   if ($45) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _cvError(-212, ((18232)|0), ((7352)|0), ((13712)|0), 3681);
   label = 29; break;
  case 12: 
   var $48=$1;
   var $49=$sizes_node;
   var $50=(($sizes)|0);
   var $51=$50;
   _cvReadRawData($48, $49, $51, ((7584)|0));
   var $52=_cvGetErrStatus();
   var $53=(($52)|(0)) < 0;
   if ($53) { label = 13; break; } else { label = 14; break; }
  case 13: 
   _cvError(-1, ((18232)|0), ((10080)|0), ((13712)|0), 3683);
   label = 29; break;
  case 14: 
   var $56=$dt;
   var $57=__ZL21icvDecodeSimpleFormatPKc($56);
   $elem_type=$57;
   var $58=_cvGetErrStatus();
   var $59=(($58)|(0)) < 0;
   if ($59) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _cvError(-1, ((18232)|0), ((10080)|0), ((13712)|0), 3684);
   label = 29; break;
  case 16: 
   var $62=$1;
   var $63=$2;
   var $64=_cvGetFileNodeByName($62, $63, ((7496)|0));
   $data=$64;
   var $65=$data;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 18; break; } else { label = 17; break; }
  case 17: 
   _cvError(-2, ((18232)|0), ((7304)|0), ((13712)|0), 3688);
   label = 29; break;
  case 18: 
   var $69=$elem_type;
   var $70=$69 & 504;
   var $71=$70 >> 3;
   var $72=((($71)+(1))|0);
   $total_size=$72;
   $i=0;
   label = 19; break;
  case 19: 
   var $74=$i;
   var $75=$dims;
   var $76=(($74)|(0)) < (($75)|(0));
   if ($76) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $78=$i;
   var $79=(($sizes+($78<<2))|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$total_size;
   var $82=(Math.imul($81,$80)|0);
   $total_size=$82;
   label = 21; break;
  case 21: 
   var $84=$i;
   var $85=((($84)+(1))|0);
   $i=$85;
   label = 19; break;
  case 22: 
   var $87=$data;
   var $88=__ZL17icvFileNodeSeqLenP10CvFileNode($87);
   var $89=$total_size;
   var $90=(($88)|(0))!=(($89)|(0));
   if ($90) { label = 23; break; } else { label = 24; break; }
  case 23: 
   _cvError(-209, ((18232)|0), ((16064)|0), ((13712)|0), 3695);
   label = 29; break;
  case 24: 
   var $93=$dims;
   var $94=(($sizes)|0);
   var $95=$elem_type;
   var $96=_cvCreateMatND($93, $94, $95);
   $mat=$96;
   var $97=_cvGetErrStatus();
   var $98=(($97)|(0)) < 0;
   if ($98) { label = 25; break; } else { label = 26; break; }
  case 25: 
   _cvError(-1, ((18232)|0), ((10080)|0), ((13712)|0), 3697);
   label = 29; break;
  case 26: 
   var $101=$1;
   var $102=$data;
   var $103=$mat;
   var $104=(($103+16)|0);
   var $105=$104;
   var $106=HEAP32[(($105)>>2)];
   var $107=$dt;
   _cvReadRawData($101, $102, $106, $107);
   var $108=_cvGetErrStatus();
   var $109=(($108)|(0)) < 0;
   if ($109) { label = 27; break; } else { label = 28; break; }
  case 27: 
   _cvError(-1, ((18232)|0), ((10080)|0), ((13712)|0), 3698);
   label = 29; break;
  case 28: 
   var $112=$mat;
   var $113=$112;
   $ptr=$113;
   label = 29; break;
  case 29: 
   var $115=$ptr;
   STACKTOP = sp;
   return $115;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL13icvWriteMatNDP13CvFileStoragePKcPKv10CvAttrList($fs, $name, $struct_ptr, $0) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 680)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0 = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $2;
   var $3;
   var $4;
   var $mat=sp;
   var $stub=(sp)+(8);
   var $iterator=(sp)+(288);
   var $dims;
   var $sizes=(sp)+(512);
   var $dt=(sp)+(640);
   var $5=(sp)+(656);
   var $6=(sp)+(664);
   var $7=(sp)+(672);
   $2=$fs;
   $3=$name;
   $4=$struct_ptr;
   var $8=$4;
   HEAP32[(($mat)>>2)]=$8;
   var $9=$2;
   var $10=$3;
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   _cvStartWriteStruct($9, $10, 6, ((8920)|0), $5);
   var $11=_cvGetErrStatus();
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18136)|0), ((10080)|0), ((13712)|0), 3636);
   label = 9; break;
  case 3: 
   var $15=HEAP32[(($mat)>>2)];
   var $16=(($sizes)|0);
   var $17=_cvGetDims($15, $16);
   $dims=$17;
   var $18=$2;
   __Z10cvAttrListPPKcP10CvAttrList($6, 0, 0);
   _cvStartWriteStruct($18, ((7592)|0), 13, 0, $6);
   var $19=$2;
   var $20=(($sizes)|0);
   var $21=$20;
   var $22=$dims;
   _cvWriteRawData($19, $21, $22, ((7584)|0));
   var $23=$2;
   _cvEndWriteStruct($23);
   var $24=$2;
   var $25=HEAP32[(($mat)>>2)];
   var $26=_cvGetElemType($25);
   var $27=(($dt)|0);
   var $28=__ZL15icvEncodeFormatiPc($26, $27);
   _cvWriteString($24, ((7528)|0), $28, 0);
   var $29=$2;
   __Z10cvAttrListPPKcP10CvAttrList($7, 0, 0);
   _cvStartWriteStruct($29, ((7496)|0), 13, 0, $7);
   var $30=_cvInitNArrayIterator(1, $mat, 0, $stub, $iterator, 0);
   var $31=_cvGetErrStatus();
   var $32=(($31)|(0)) < 0;
   if ($32) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _cvError(-1, ((18136)|0), ((10080)|0), ((13712)|0), 3644);
   label = 9; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $36=$2;
   var $37=(($iterator+16)|0);
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($iterator+8)|0);
   var $41=(($40)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($dt)|0);
   _cvWriteRawData($36, $39, $42, $43);
   label = 7; break;
  case 7: 
   var $45=_cvNextNArraySlice($iterator);
   var $46=(($45)|(0))!=0;
   if ($46) { label = 6; break; } else { label = 8; break; }
  case 8: 
   var $48=$2;
   _cvEndWriteStruct($48);
   var $49=$2;
   _cvEndWriteStruct($49);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cvFindType($type_name) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $info;
   $1=$type_name;
   $info=0;
   var $2=HEAP32[((37560)>>2)];
   $info=$2;
   label = 2; break;
  case 2: 
   var $4=$info;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $7=$info;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$1;
   var $11=_strcmp($9, $10);
   var $12=(($11)|(0))==0;
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 7; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $16=$info;
   var $17=(($16+12)|0);
   var $18=HEAP32[(($17)>>2)];
   $info=$18;
   label = 2; break;
  case 7: 
   var $20=$info;
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvFileNodeSeqLenP10CvFileNode($node) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$node;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$4 & 7;
   var $6=(($5)|(0)) >= 5;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=(($8+8)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+24)|0);
   var $13=HEAP32[(($12)>>2)];
   var $22 = $13;label = 4; break;
  case 3: 
   var $15=$1;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$17 & 7;
   var $19=(($18)|(0))!=0;
   var $20=(($19)&(1));
   var $22 = $20;label = 4; break;
  case 4: 
   var $22;
   return $22;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReadString($node, $default_value) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$node;
   $2=$default_value;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=$2;
   var $23 = $6;label = 7; break;
  case 3: 
   var $8=$1;
   var $9=(($8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & 7;
   var $12=(($11)|(0))==3;
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $14=$1;
   var $15=(($14+8)|0);
   var $16=$15;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $21 = $18;label = 6; break;
  case 5: 
   var $21 = 0;label = 6; break;
  case 6: 
   var $21;
   var $23 = $21;label = 7; break;
  case 7: 
   var $23;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL17icvSortIdxCmpFuncPKvS0_Pv($_a, $_b, $userdata) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $dims;
   var $a;
   var $b;
   var $delta;
   $2=$_a;
   $3=$_b;
   $4=$userdata;
   var $5=$4;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   $dims=$7;
   var $8=$2;
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   $a=$10;
   var $11=$3;
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   $b=$13;
   $i=0;
   label = 2; break;
  case 2: 
   var $15=$i;
   var $16=$dims;
   var $17=(($15)|(0)) < (($16)|(0));
   if ($17) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $19=$i;
   var $20=$a;
   var $21=(($20+($19<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$i;
   var $24=$b;
   var $25=(($24+($23<<2))|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=((($22)-($26))|0);
   $delta=$27;
   var $28=$delta;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $31=$delta;
   $1=$31;
   label = 8; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $34=$i;
   var $35=((($34)+(1))|0);
   $i=$35;
   label = 2; break;
  case 7: 
   $1=0;
   label = 8; break;
  case 8: 
   var $38=$1;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function __Z7cvSliceii($agg_result, $start, $end) {
 var label = 0;
 var $1;
 var $2;
 $1=$start;
 $2=$end;
 var $3=$1;
 var $4=(($agg_result)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=$2;
 var $6=(($agg_result+4)|0);
 HEAP32[(($6)>>2)]=$5;
 return;
}
function _cvRead($fs, $node, $list) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $obj;
   var $4=sp;
   $1=$fs;
   $2=$node;
   $3=$list;
   $obj=0;
   var $5=$1;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=(($8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==1280131417;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=$1;
   var $14=(($13)|(0))!=0;
   var $15=$14 ? -5 : -27;
   _cvError($15, ((5864)|0), ((8856)|0), ((13712)|0), 5055);
   label = 12; break;
  case 4: 
   var $17=$2;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 6; break; } else { label = 5; break; }
  case 5: 
   label = 12; break;
  case 6: 
   var $21=$2;
   var $22=(($21)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$23 & 16;
   var $25=(($24)|(0))!=0;
   if ($25) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $27=$2;
   var $28=(($27+4)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))!=0;
   if ($30) { label = 9; break; } else { label = 8; break; }
  case 8: 
   _cvError(-2, ((5864)|0), ((8216)|0), ((13712)|0), 5061);
   label = 12; break;
  case 9: 
   var $33=$2;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+28)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$1;
   var $39=$2;
   var $40=FUNCTION_TABLE[$37]($38, $39);
   $obj=$40;
   var $41=_cvGetErrStatus();
   var $42=(($41)|(0)) < 0;
   if ($42) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-1, ((5864)|0), ((10080)|0), ((13712)|0), 5063);
   label = 12; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $46=$3;
   var $47=(($46)|(0))!=0;
   if ($47) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $49=$3;
   __Z10cvAttrListPPKcP10CvAttrList($4, 0, 0);
   var $50=$49;
   var $51=$4;
   assert(8 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];
   label = 14; break;
  case 14: 
   var $53=$obj;
   STACKTOP = sp;
   return $53;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL15icvEncodeFormatiPc($elem_type, $dt) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$elem_type;
   $2=$dt;
   var $3=$2;
   var $4=$1;
   var $5=$4 & 504;
   var $6=$5 >> 3;
   var $7=((($6)+(1))|0);
   var $8=$1;
   var $9=$8 & 7;
   var $10=((23064+$9)|0);
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=_sprintf($3, ((7488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(8))>>2)]=$12,tempInt));
   var $14=$2;
   var $15=$2;
   var $16=(($15+2)|0);
   var $17=HEAP8[($16)];
   var $18=(($17 << 24) >> 24);
   var $19=(($18)|(0))==0;
   if ($19) { label = 2; break; } else { var $27 = 0;label = 3; break; }
  case 2: 
   var $21=$2;
   var $22=(($21)|0);
   var $23=HEAP8[($22)];
   var $24=(($23 << 24) >> 24);
   var $25=(($24)|(0))==49;
   var $27 = $25;label = 3; break;
  case 3: 
   var $27;
   var $28=(($27)&(1));
   var $29=(($14+$28)|0);
   STACKTOP = sp;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReadStringByName($fs, $map, $name, $default_value) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$fs;
 $2=$map;
 $3=$name;
 $4=$default_value;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cvGetFileNodeByName($5, $6, $7);
 var $9=$4;
 var $10=_cvReadString($8, $9);
 return $10;
}
function __ZL21icvDecodeSimpleFormatPKc($dt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $elem_type;
   var $fmt_pairs=sp;
   var $fmt_pair_count;
   $1=$dt;
   $elem_type=-1;
   var $2=$1;
   var $3=(($fmt_pairs)|0);
   var $4=__ZL15icvDecodeFormatPKcPii($2, $3, 128);
   $fmt_pair_count=$4;
   var $5=_cvGetErrStatus();
   var $6=(($5)|(0)) < 0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((16472)|0), ((10080)|0), ((13712)|0), 3070);
   label = 7; break;
  case 3: 
   var $9=$fmt_pair_count;
   var $10=(($9)|(0))!=1;
   if ($10) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $12=(($fmt_pairs)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0)) > 4;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-2, ((16472)|0), ((16024)|0), ((13712)|0), 3072);
   label = 7; break;
  case 6: 
   var $17=(($fmt_pairs+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($fmt_pairs)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)-(1))|0);
   var $22=$21 << 3;
   var $23=((($18)+($22))|0);
   $elem_type=$23;
   label = 7; break;
  case 7: 
   var $25=$elem_type;
   STACKTOP = sp;
   return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _cvReadIntByName($fs, $map, $name, $default_value) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$fs;
 $2=$map;
 $3=$name;
 $4=$default_value;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cvGetFileNodeByName($5, $6, $7);
 var $9=$4;
 var $10=_cvReadInt($8, $9);
 return $10;
}
function _cvReadInt($node, $default_value) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$node;
   $2=$default_value;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $6=$2;
   var $36 = $6;label = 10; break;
  case 3: 
   var $8=$1;
   var $9=(($8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & 7;
   var $12=(($11)|(0))==1;
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $14=$1;
   var $15=(($14+8)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $34 = $17;label = 9; break;
  case 5: 
   var $19=$1;
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$21 & 7;
   var $23=(($22)|(0))==2;
   if ($23) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $25=$1;
   var $26=(($25+8)|0);
   var $27=$26;
   var $28=HEAPF64[(($27)>>3)];
   var $29=__Z7cvRoundd($28);
   var $32 = $29;label = 8; break;
  case 7: 
   var $32 = 2147483647;label = 8; break;
  case 8: 
   var $32;
   var $34 = $32;label = 9; break;
  case 9: 
   var $34;
   var $36 = $34;label = 10; break;
  case 10: 
   var $36;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL12icvGetFormatPK5CvSeqPKcP10CvAttrListiPc($seq, $dt_key, $attr, $initial_elem_size, $dt_buf) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $dt;
   var $dt_elem_size;
   var $align;
   var $full_elem_size;
   var $extra_elem_size;
   $1=$seq;
   $2=$dt_key;
   $3=$attr;
   $4=$initial_elem_size;
   $5=$dt_buf;
   $dt=0;
   var $6=$3;
   var $7=$2;
   var $8=_cvAttrValue($6, $7);
   $dt=$8;
   var $9=$dt;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $12=$dt;
   var $13=$4;
   var $14=__ZL15icvCalcElemSizePKci($12, $13);
   $dt_elem_size=$14;
   var $15=_cvGetErrStatus();
   var $16=(($15)|(0)) < 0;
   if ($16) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-1, ((18296)|0), ((10080)|0), ((13712)|0), 4159);
   label = 20; break;
  case 4: 
   var $19=$dt_elem_size;
   var $20=$1;
   var $21=(($20+28)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($19)|(0))!=(($22)|(0));
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-209, ((18296)|0), ((14744)|0), ((13712)|0), 4163);
   label = 20; break;
  case 6: 
   label = 19; break;
  case 7: 
   var $27=$1;
   var $28=(($27)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 & 511;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $33=$1;
   var $34=(($33+28)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==1;
   if ($36) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $38=$1;
   var $39=(($38)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$40 & 7;
   var $42=(($41)|(0))==6;
   var $43=$42 ? 8 : 4;
   $align=$43;
   var $44=$1;
   var $45=(($44)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 & 504;
   var $48=$47 >> 3;
   var $49=((($48)+(1))|0);
   var $50=$1;
   var $51=(($50)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$52 & 7;
   var $54=($53<<1);
   var $55=47696 >>> (($54)>>>(0));
   var $56=$55 & 3;
   var $57=$49 << $56;
   var $58=$4;
   var $59=((($57)+($58))|0);
   var $60=$align;
   var $61=__Z7cvAlignii($59, $60);
   $full_elem_size=$61;
   var $62=$1;
   var $63=(($62+28)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$full_elem_size;
   var $66=(($64)|(0))!=(($65)|(0));
   if ($66) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _cvError(-209, ((18296)|0), ((14664)|0), ((13712)|0), 4171);
   label = 20; break;
  case 11: 
   var $69=$1;
   var $70=(($69)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=$71 & 511;
   var $73=$5;
   var $74=__ZL15icvEncodeFormatiPc($72, $73);
   $dt=$74;
   label = 18; break;
  case 12: 
   var $76=$1;
   var $77=(($76+28)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$4;
   var $80=(($78)|(0)) > (($79)|(0));
   if ($80) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $82=$1;
   var $83=(($82+28)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$4;
   var $86=((($84)-($85))|0);
   $extra_elem_size=$86;
   var $87=$extra_elem_size;
   var $88=((((($87)>>>(0)))%(4))&-1);
   var $89=(($88)|(0))==0;
   if ($89) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $91=$5;
   var $92=$extra_elem_size;
   var $93=((((($92)>>>(0)))/(4))&-1);
   var $94=_sprintf($91, ((14872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$93,tempInt));
   label = 16; break;
  case 15: 
   var $96=$5;
   var $97=$extra_elem_size;
   var $98=_sprintf($96, ((14848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$97,tempInt));
   label = 16; break;
  case 16: 
   var $100=$5;
   $dt=$100;
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $105=$dt;
   STACKTOP = sp;
   return $105;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL18icvWriteHeaderDataP13CvFileStoragePK5CvSeqP10CvAttrListi($fs, $seq, $attr, $initial_header_size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $header_dt_buf=sp;
   var $header_dt;
   var $dt_header_size;
   var $point_seq;
   var $5=(sp)+(128);
   var $chain;
   var $6=(sp)+(136);
   var $extra_size;
   var $7=(sp)+(144);
   $1=$fs;
   $2=$seq;
   $3=$attr;
   $4=$initial_header_size;
   var $8=$3;
   var $9=_cvAttrValue($8, ((15072)|0));
   $header_dt=$9;
   var $10=$header_dt;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $13=$header_dt;
   var $14=$4;
   var $15=__ZL15icvCalcElemSizePKci($13, $14);
   $dt_header_size=$15;
   var $16=_cvGetErrStatus();
   var $17=(($16)|(0)) < 0;
   if ($17) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _cvError(-1, ((17848)|0), ((10080)|0), ((13712)|0), 4089);
   label = 31; break;
  case 4: 
   var $20=$dt_header_size;
   var $21=$2;
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($20)|(0)) > (($23)|(0));
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-209, ((17848)|0), ((14968)|0), ((13712)|0), 4092);
   label = 31; break;
  case 6: 
   label = 28; break;
  case 7: 
   var $28=$2;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$4;
   var $32=(($30)|(0)) > (($31)|(0));
   if ($32) { label = 8; break; } else { label = 27; break; }
  case 8: 
   var $34=$2;
   var $35=(($34)|(0))!=0;
   if ($35) { label = 9; break; } else { label = 15; break; }
  case 9: 
   var $37=$2;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$39 & -65536;
   var $41=(($40)|(0))==1117323264;
   if ($41) { label = 10; break; } else { label = 15; break; }
  case 10: 
   var $43=$2;
   var $44=(($43)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$45 & 511;
   var $47=(($46)|(0))==12;
   if ($47) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $49=$2;
   var $50=(($49)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$51 & 511;
   var $53=(($52)|(0))==13;
   if ($53) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $55=$2;
   var $56=(($55+4)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|(0))==88;
   if ($58) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $60=$2;
   var $61=(($60+28)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))==8;
   if ($63) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $65=$2;
   var $66=$65;
   $point_seq=$66;
   var $67=$1;
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   _cvStartWriteStruct($67, ((14928)|0), 14, 0, $5);
   var $68=$1;
   var $69=$point_seq;
   var $70=(($69+56)|0);
   var $71=(($70)|0);
   var $72=HEAP32[(($71)>>2)];
   _cvWriteInt($68, ((15712)|0), $72);
   var $73=$1;
   var $74=$point_seq;
   var $75=(($74+56)|0);
   var $76=(($75+4)|0);
   var $77=HEAP32[(($76)>>2)];
   _cvWriteInt($73, ((15704)|0), $77);
   var $78=$1;
   var $79=$point_seq;
   var $80=(($79+56)|0);
   var $81=(($80+8)|0);
   var $82=HEAP32[(($81)>>2)];
   _cvWriteInt($78, ((15888)|0), $82);
   var $83=$1;
   var $84=$point_seq;
   var $85=(($84+56)|0);
   var $86=(($85+12)|0);
   var $87=HEAP32[(($86)>>2)];
   _cvWriteInt($83, ((15880)|0), $87);
   var $88=$1;
   _cvEndWriteStruct($88);
   var $89=$1;
   var $90=$point_seq;
   var $91=(($90+72)|0);
   var $92=HEAP32[(($91)>>2)];
   _cvWriteInt($89, ((14920)|0), $92);
   label = 26; break;
  case 15: 
   var $94=$2;
   var $95=(($94)|(0))!=0;
   if ($95) { label = 16; break; } else { label = 21; break; }
  case 16: 
   var $97=$2;
   var $98=(($97)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$99 & -65536;
   var $101=(($100)|(0))==1117323264;
   if ($101) { label = 17; break; } else { label = 21; break; }
  case 17: 
   var $103=$2;
   var $104=(($103)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=$105 & 3584;
   var $107=(($106)|(0))==512;
   if ($107) { label = 18; break; } else { label = 21; break; }
  case 18: 
   var $109=$2;
   var $110=(($109+28)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($111)|(0))==1;
   if ($112) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $114=$2;
   var $115=(($114)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=$116 & 511;
   var $118=(($117)|(0))==0;
   if ($118) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $120=$2;
   var $121=$120;
   $chain=$121;
   var $122=$1;
   __Z10cvAttrListPPKcP10CvAttrList($6, 0, 0);
   _cvStartWriteStruct($122, ((15872)|0), 14, 0, $6);
   var $123=$1;
   var $124=$chain;
   var $125=(($124+56)|0);
   var $126=(($125)|0);
   var $127=HEAP32[(($126)>>2)];
   _cvWriteInt($123, ((15712)|0), $127);
   var $128=$1;
   var $129=$chain;
   var $130=(($129+56)|0);
   var $131=(($130+4)|0);
   var $132=HEAP32[(($131)>>2)];
   _cvWriteInt($128, ((15704)|0), $132);
   var $133=$1;
   _cvEndWriteStruct($133);
   label = 25; break;
  case 21: 
   var $135=$2;
   var $136=(($135+4)|0);
   var $137=HEAP32[(($136)>>2)];
   var $138=$4;
   var $139=((($137)-($138))|0);
   $extra_size=$139;
   var $140=$extra_size;
   var $141=((((($140)>>>(0)))%(4))&-1);
   var $142=(($141)|(0))==0;
   if ($142) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $144=(($header_dt_buf)|0);
   var $145=$extra_size;
   var $146=((((($145)>>>(0)))/(4))&-1);
   var $147=_sprintf($144, ((14872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$146,tempInt));
   label = 24; break;
  case 23: 
   var $149=(($header_dt_buf)|0);
   var $150=$extra_size;
   var $151=_sprintf($149, ((14848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$150,tempInt));
   label = 24; break;
  case 24: 
   var $153=(($header_dt_buf)|0);
   $header_dt=$153;
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $158=$header_dt;
   var $159=(($158)|(0))!=0;
   if ($159) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $161=$1;
   var $162=$header_dt;
   _cvWriteString($161, ((15072)|0), $162, 0);
   var $163=$1;
   __Z10cvAttrListPPKcP10CvAttrList($7, 0, 0);
   _cvStartWriteStruct($163, ((14824)|0), 13, 0, $7);
   var $164=$1;
   var $165=$2;
   var $166=$165;
   var $167=(($166+56)|0);
   var $168=$header_dt;
   _cvWriteRawData($164, $167, 1, $168);
   var $169=$1;
   _cvEndWriteStruct($169);
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL15icvCalcElemSizePKci($dt, $initial_size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $size;
   var $fmt_pairs=sp;
   var $i;
   var $fmt_pair_count;
   var $comp_size;
   $1=$dt;
   $2=$initial_size;
   $size=0;
   var $3=$1;
   var $4=(($fmt_pairs)|0);
   var $5=__ZL15icvDecodeFormatPKcPii($3, $4, 128);
   $fmt_pair_count=$5;
   var $6=_cvGetErrStatus();
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18088)|0), ((10080)|0), ((13712)|0), 3039);
   label = 10; break;
  case 3: 
   var $10=$fmt_pair_count;
   var $11=($10<<1);
   $fmt_pair_count=$11;
   $i=0;
   var $12=$2;
   $size=$12;
   label = 4; break;
  case 4: 
   var $14=$i;
   var $15=$fmt_pair_count;
   var $16=(($14)|(0)) < (($15)|(0));
   if ($16) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $18=$i;
   var $19=((($18)+(1))|0);
   var $20=(($fmt_pairs+($19<<2))|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$21 & 504;
   var $23=$22 >> 3;
   var $24=((($23)+(1))|0);
   var $25=$i;
   var $26=((($25)+(1))|0);
   var $27=(($fmt_pairs+($26<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$28 & 7;
   var $30=($29<<1);
   var $31=47696 >>> (($30)>>>(0));
   var $32=$31 & 3;
   var $33=$24 << $32;
   $comp_size=$33;
   var $34=$size;
   var $35=$comp_size;
   var $36=__Z7cvAlignii($34, $35);
   $size=$36;
   var $37=$comp_size;
   var $38=$i;
   var $39=(($fmt_pairs+($38<<2))|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(Math.imul($37,$40)|0);
   var $42=$size;
   var $43=((($42)+($41))|0);
   $size=$43;
   label = 6; break;
  case 6: 
   var $45=$i;
   var $46=((($45)+(2))|0);
   $i=$46;
   label = 4; break;
  case 7: 
   var $48=$2;
   var $49=(($48)|(0))==0;
   if ($49) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $51=(($fmt_pairs+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$52 & 504;
   var $54=$53 >> 3;
   var $55=((($54)+(1))|0);
   var $56=(($fmt_pairs+4)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$57 & 7;
   var $59=($58<<1);
   var $60=47696 >>> (($59)>>>(0));
   var $61=$60 & 3;
   var $62=$55 << $61;
   $comp_size=$62;
   var $63=$size;
   var $64=$comp_size;
   var $65=__Z7cvAlignii($63, $64);
   $size=$65;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $68=$size;
   STACKTOP = sp;
   return $68;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9type_infoD2Ev($this) {
 var label = 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 var label = 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 var label = 0;
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($info+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==(($this)|(0));
   if ($3) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $5=(($info+16)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($5)>>2)]=$adjustedPtr;
   var $9=(($info+24)|0);
   HEAP32[(($9)>>2)]=$path_below;
   var $10=(($info+36)|0);
   HEAP32[(($10)>>2)]=1;
   label = 8; break;
  case 4: 
   var $12=(($6)|(0))==(($adjustedPtr)|(0));
   if ($12) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $14=(($info+24)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==2;
   if ($16) { label = 6; break; } else { label = 8; break; }
  case 6: 
   HEAP32[(($14)>>2)]=$path_below;
   label = 8; break;
  case 7: 
   var $19=(($info+36)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=((($20)+(1))|0);
   HEAP32[(($19)>>2)]=$21;
   var $22=(($info+24)|0);
   HEAP32[(($22)>>2)]=2;
   var $23=(($info+54)|0);
   HEAP8[($23)]=1;
   label = 8; break;
  case 8: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL11icvWriteSeqP13CvFileStoragePKcPKv10CvAttrListi($fs, $name, $struct_ptr, $attr, $level) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $attr; $attr = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($attr)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($attr)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $seq;
   var $block;
   var $buf=sp;
   var $dt_buf=(sp)+(128);
   var $dt;
   var $5=(sp)+(256);
   var $6=(sp)+(264);
   $1=$fs;
   $2=$name;
   $3=$struct_ptr;
   $4=$level;
   var $7=$3;
   var $8=$7;
   $seq=$8;
   var $9=$1;
   var $10=$2;
   __Z10cvAttrListPPKcP10CvAttrList($5, 0, 0);
   _cvStartWriteStruct($9, $10, 6, ((9536)|0), $5);
   var $11=_cvGetErrStatus();
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _cvError(-1, ((18328)|0), ((10080)|0), ((13712)|0), 4206);
   label = 16; break;
  case 3: 
   var $15=$4;
   var $16=(($15)|(0)) >= 0;
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $18=$1;
   var $19=$4;
   _cvWriteInt($18, ((13880)|0), $19);
   label = 5; break;
  case 5: 
   var $21=(($buf)|0);
   var $22=$seq;
   var $23=(($22)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=_sprintf($21, ((15272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$24,tempInt));
   var $26=$1;
   var $27=(($buf)|0);
   _cvWriteString($26, ((15248)|0), $27, 1);
   var $28=$1;
   var $29=$seq;
   var $30=(($29+24)|0);
   var $31=HEAP32[(($30)>>2)];
   _cvWriteInt($28, ((13680)|0), $31);
   var $32=$seq;
   var $33=(($dt_buf)|0);
   var $34=__ZL12icvGetFormatPK5CvSeqPKcP10CvAttrListiPc($32, ((7528)|0), $attr, 0, $33);
   $dt=$34;
   var $35=_cvGetErrStatus();
   var $36=(($35)|(0)) < 0;
   if ($36) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _cvError(-1, ((18328)|0), ((10080)|0), ((13712)|0), 4214);
   label = 16; break;
  case 7: 
   var $39=$1;
   var $40=$dt;
   _cvWriteString($39, ((7528)|0), $40, 0);
   var $41=$1;
   var $42=$seq;
   __ZL18icvWriteHeaderDataP13CvFileStoragePK5CvSeqP10CvAttrListi($41, $42, $attr, 56);
   var $43=_cvGetErrStatus();
   var $44=(($43)|(0)) < 0;
   if ($44) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _cvError(-1, ((18328)|0), ((10080)|0), ((13712)|0), 4217);
   label = 16; break;
  case 9: 
   var $47=$1;
   __Z10cvAttrListPPKcP10CvAttrList($6, 0, 0);
   _cvStartWriteStruct($47, ((7496)|0), 13, 0, $6);
   var $48=$seq;
   var $49=(($48+52)|0);
   var $50=HEAP32[(($49)>>2)];
   $block=$50;
   label = 10; break;
  case 10: 
   var $52=$block;
   var $53=(($52)|(0))!=0;
   if ($53) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $55=$1;
   var $56=$block;
   var $57=(($56+16)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$block;
   var $60=(($59+12)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$dt;
   _cvWriteRawData($55, $58, $61, $62);
   var $63=$block;
   var $64=$seq;
   var $65=(($64+52)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($63)|(0))==(($68)|(0));
   if ($69) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 15; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $73=$block;
   var $74=(($73+4)|0);
   var $75=HEAP32[(($74)>>2)];
   $block=$75;
   label = 10; break;
  case 15: 
   var $77=$1;
   _cvEndWriteStruct($77);
   var $78=$1;
   _cvEndWriteStruct($78);
   label = 16; break;
  case 16: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z22icvFSResizeWriteBufferP13CvFileStoragePci($fs, $ptr, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$fs;
   $2=$ptr;
   $3=$len;
   var $4=$2;
   var $5=$3;
   var $6=(($4+$5)|0);
   var $7=$1;
   var $8=(($7+76)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)>>>(0)) < (($9)>>>(0));
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$2;
   var $19 = $12;label = 4; break;
  case 3: 
   var $14=$1;
   var $15=$2;
   var $16=$3;
   var $17=__ZL13icvFSDoResizeP13CvFileStoragePci($14, $15, $16);
   var $19 = $17;label = 4; break;
  case 4: 
   var $19;
   return $19;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL13icvFSDoResizeP13CvFileStoragePci($fs, $ptr, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $new_ptr;
   var $written_len;
   var $new_size;
   $1=$fs;
   $2=$ptr;
   $3=$len;
   $new_ptr=0;
   var $4=$2;
   var $5=$1;
   var $6=(($5+72)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$4;
   var $9=$7;
   var $10=((($8)-($9))|0);
   $written_len=$10;
   var $11=$1;
   var $12=(($11+76)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$1;
   var $15=(($14+72)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$13;
   var $18=$16;
   var $19=((($17)-($18))|0);
   var $20=((($19)*(3))&-1);
   var $21=((((($20)|(0)))/(2))&-1);
   $new_size=$21;
   var $22=$written_len;
   var $23=$3;
   var $24=((($22)+($23))|0);
   var $25=$new_size;
   var $26=(($24)|(0)) < (($25)|(0));
   if ($26) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $28=$new_size;
   var $34 = $28;label = 4; break;
  case 3: 
   var $30=$written_len;
   var $31=$3;
   var $32=((($30)+($31))|0);
   var $34 = $32;label = 4; break;
  case 4: 
   var $34;
   $new_size=$34;
   var $35=$new_size;
   var $36=((($35)+(256))|0);
   var $37=_cvAlloc($36);
   $new_ptr=$37;
   var $38=_cvGetErrStatus();
   var $39=(($38)|(0)) < 0;
   if ($39) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _cvError(-1, ((18216)|0), ((10080)|0), ((13712)|0), 321);
   label = 9; break;
  case 6: 
   var $42=$new_ptr;
   var $43=$1;
   var $44=(($43+68)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$1;
   var $47=(($46+72)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$45;
   var $50=$48;
   var $51=((($49)-($50))|0);
   var $52=(($42+$51)|0);
   var $53=$1;
   var $54=(($53+68)|0);
   HEAP32[(($54)>>2)]=$52;
   var $55=$written_len;
   var $56=(($55)|(0)) > 0;
   if ($56) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $58=$new_ptr;
   var $59=$1;
   var $60=(($59+72)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$written_len;
   assert($62 % 1 === 0);(_memcpy($58, $61, $62)|0);
   label = 8; break;
  case 8: 
   var $64=$new_ptr;
   var $65=$1;
   var $66=(($65+72)|0);
   HEAP32[(($66)>>2)]=$64;
   var $67=$1;
   var $68=(($67+72)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$new_size;
   var $71=(($69+$70)|0);
   var $72=$1;
   var $73=(($72+76)|0);
   HEAP32[(($73)>>2)]=$71;
   var $74=$written_len;
   var $75=$new_ptr;
   var $76=(($75+$74)|0);
   $new_ptr=$76;
   label = 9; break;
  case 9: 
   var $78=$new_ptr;
   return $78;
  default: assert(0, "bad label: " + label);
 }
}
function __ZL14icvXMLWriteTagP13CvFileStoragePKci10CvAttrList($fs, $key, $tag_type, $list) {
 var label = 0;
 var sp  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $list; $list = STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($list)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($list)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ptr;
   var $i;
   var $len;
   var $struct_flags;
   var $c;
   var $attr;
   var $len0;
   var $len1;
   $1=$fs;
   $2=$key;
   $3=$tag_type;
   var $4=$1;
   var $5=(($4+68)|0);
   var $6=HEAP32[(($5)>>2)];
   $ptr=$6;
   $len=0;
   var $7=$1;
   var $8=(($7+44)|0);
   var $9=HEAP32[(($8)>>2)];
   $struct_flags=$9;
   var $10=$2;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $13=$2;
   var $14=(($13)|0);
   var $15=HEAP8[($14)];
   var $16=(($15 << 24) >> 24);
   var $17=(($16)|(0))==0;
   if ($17) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $2=0;
   label = 4; break;
  case 4: 
   var $20=$3;
   var $21=(($20)|(0))==1;
   if ($21) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $23=$3;
   var $24=(($23)|(0))==3;
   if ($24) { label = 6; break; } else { label = 14; break; }
  case 6: 
   var $26=$struct_flags;
   var $27=$26 & 7;
   var $28=(($27)|(0)) >= 5;
   if ($28) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $30=$struct_flags;
   var $31=$30 & 7;
   var $32=(($31)|(0))==6;
   var $33=(($32)&(1));
   var $34=$2;
   var $35=(($34)|(0))!=0;
   var $36=(($35)&(1));
   var $37=$33 ^ $36;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _cvError(-5, ((18104)|0), ((13328)|0), ((13712)|0), 2259);
   label = 48; break;
  case 9: 
   label = 11; break;
  case 10: 
   var $42=$2;
   var $43=(($42)|(0))!=0;
   var $44=$43 ? 6 : 5;
   var $45=((($44)+(32))|0);
   $struct_flags=$45;
   var $46=$1;
   var $47=(($46+12)|0);
   HEAP32[(($47)>>2)]=0;
   label = 11; break;
  case 11: 
   var $49=$struct_flags;
   var $50=$49 & 32;
   var $51=(($50)|(0))!=0;
   if ($51) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $53=$1;
   var $54=__ZL10icvFSFlushP13CvFileStorage($53);
   $ptr=$54;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $57=$2;
   var $58=(($57)|(0))!=0;
   if ($58) { label = 16; break; } else { label = 15; break; }
  case 15: 
   $2=((7864)|0);
   label = 20; break;
  case 16: 
   var $61=$2;
   var $62=(($61)|0);
   var $63=HEAP8[($62)];
   var $64=(($63 << 24) >> 24);
   var $65=(($64)|(0))==95;
   if ($65) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $67=$2;
   var $68=(($67+1)|0);
   var $69=HEAP8[($68)];
   var $70=(($69 << 24) >> 24);
   var $71=(($70)|(0))==0;
   if ($71) { label = 18; break; } else { label = 19; break; }
  case 18: 
   _cvError(-5, ((18104)|0), ((13016)|0), ((13712)|0), 2274);
   label = 48; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $75=$2;
   var $76=_strlen($75);
   $len=$76;
   var $77=$ptr;
   var $78=(($77+1)|0);
   $ptr=$78;
   HEAP8[($77)]=60;
   var $79=$3;
   var $80=(($79)|(0))==2;
   if ($80) { label = 21; break; } else { label = 24; break; }
  case 21: 
   var $82=(($list)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83)|(0))!=0;
   if ($84) { label = 22; break; } else { label = 23; break; }
  case 22: 
   _cvError(-5, ((18104)|0), ((12968)|0), ((13712)|0), 2281);
   label = 48; break;
  case 23: 
   var $87=$ptr;
   var $88=(($87+1)|0);
   $ptr=$88;
   HEAP8[($87)]=47;
   label = 24; break;
  case 24: 
   var $90=$2;
   var $91=(($90)|0);
   var $92=HEAP8[($91)];
   var $93=(($92 << 24) >> 24);
   var $94=_isalpha($93);
   var $95=(($94)|(0))!=0;
   if ($95) { label = 27; break; } else { label = 25; break; }
  case 25: 
   var $97=$2;
   var $98=(($97)|0);
   var $99=HEAP8[($98)];
   var $100=(($99 << 24) >> 24);
   var $101=(($100)|(0))!=95;
   if ($101) { label = 26; break; } else { label = 27; break; }
  case 26: 
   _cvError(-5, ((18104)|0), ((12928)|0), ((13712)|0), 2286);
   label = 48; break;
  case 27: 
   var $104=$1;
   var $105=$ptr;
   var $106=$len;
   var $107=__Z22icvFSResizeWriteBufferP13CvFileStoragePci($104, $105, $106);
   $ptr=$107;
   $i=0;
   label = 28; break;
  case 28: 
   var $109=$i;
   var $110=$len;
   var $111=(($109)|(0)) < (($110)|(0));
   if ($111) { label = 29; break; } else { label = 35; break; }
  case 29: 
   var $113=$i;
   var $114=$2;
   var $115=(($114+$113)|0);
   var $116=HEAP8[($115)];
   $c=$116;
   var $117=$c;
   var $118=(($117 << 24) >> 24);
   var $119=_isalnum($118);
   var $120=(($119)|(0))!=0;
   if ($120) { label = 33; break; } else { label = 30; break; }
  case 30: 
   var $122=$c;
   var $123=(($122 << 24) >> 24);
   var $124=(($123)|(0))!=95;
   if ($124) { label = 31; break; } else { label = 33; break; }
  case 31: 
   var $126=$c;
   var $127=(($126 << 24) >> 24);
   var $128=(($127)|(0))!=45;
   if ($128) { label = 32; break; } else { label = 33; break; }
  case 32: 
   _cvError(-5, ((18104)|0), ((12896)|0), ((13712)|0), 2293);
   label = 48; break;
  case 33: 
   var $131=$c;
   var $132=$i;
   var $133=$ptr;
   var $134=(($133+$132)|0);
   HEAP8[($134)]=$131;
   label = 34; break;
  case 34: 
   var $136=$i;
   var $137=((($136)+(1))|0);
   $i=$137;
   label = 28; break;
  case 35: 
   var $139=$len;
   var $140=$ptr;
   var $141=(($140+$139)|0);
   $ptr=$141;
   label = 36; break;
  case 36: 
   var $143=(($list)|0);
   var $144=HEAP32[(($143)>>2)];
   $attr=$144;
   label = 37; break;
  case 37: 
   var $146=$attr;
   var $147=(($146)|(0))!=0;
   if ($147) { label = 38; break; } else { var $154 = 0;label = 39; break; }
  case 38: 
   var $149=$attr;
   var $150=(($149)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151)|(0))!=0;
   var $154 = $152;label = 39; break;
  case 39: 
   var $154;
   if ($154) { label = 40; break; } else { label = 42; break; }
  case 40: 
   var $156=$attr;
   var $157=(($156)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=_strlen($158);
   $len0=$159;
   var $160=$attr;
   var $161=(($160+4)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=_strlen($162);
   $len1=$163;
   var $164=$1;
   var $165=$ptr;
   var $166=$len0;
   var $167=$len1;
   var $168=((($166)+($167))|0);
   var $169=((($168)+(4))|0);
   var $170=__Z22icvFSResizeWriteBufferP13CvFileStoragePci($164, $165, $169);
   $ptr=$170;
   var $171=$ptr;
   var $172=(($171+1)|0);
   $ptr=$172;
   HEAP8[($171)]=32;
   var $173=$ptr;
   var $174=$attr;
   var $175=(($174)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=$len0;
   assert($177 % 1 === 0);(_memcpy($173, $176, $177)|0);
   var $178=$len0;
   var $179=$ptr;
   var $180=(($179+$178)|0);
   $ptr=$180;
   var $181=$ptr;
   var $182=(($181+1)|0);
   $ptr=$182;
   HEAP8[($181)]=61;
   var $183=$ptr;
   var $184=(($183+1)|0);
   $ptr=$184;
   HEAP8[($183)]=34;
   var $185=$ptr;
   var $186=$attr;
   var $187=(($186+4)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=$len1;
   assert($189 % 1 === 0);(_memcpy($185, $188, $189)|0);
   var $190=$len1;
   var $191=$ptr;
   var $192=(($191+$190)|0);
   $ptr=$192;
   var $193=$ptr;
   var $194=(($193+1)|0);
   $ptr=$194;
   HEAP8[($193)]=34;
   label = 41; break;
  case 41: 
   var $196=$attr;
   var $197=(($196+8)|0);
   $attr=$197;
   label = 37; break;
  case 42: 
   var $199=(($list+4)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($200)|(0))!=0;
   if ($201) { label = 44; break; } else { label = 43; break; }
  case 43: 
   label = 45; break;
  case 44: 
   var $204=(($list+4)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=$list;
   var $207=$205;
   assert(8 % 1 === 0);HEAP32[(($206)>>2)]=HEAP32[(($207)>>2)];HEAP32[((($206)+(4))>>2)]=HEAP32[((($207)+(4))>>2)];
   label = 36; break;
  case 45: 
   var $209=$3;
   var $210=(($209)|(0))==3;
   if ($210) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $212=$ptr;
   var $213=(($212+1)|0);
   $ptr=$213;
   HEAP8[($212)]=47;
   label = 47; break;
  case 47: 
   var $215=$ptr;
   var $216=(($215+1)|0);
   $ptr=$216;
   HEAP8[($215)]=62;
   var $217=$ptr;
   var $218=$1;
   var $219=(($218+68)|0);
   HEAP32[(($219)>>2)]=$217;
   var $220=$struct_flags;
   var $221=$220 & -33;
   var $222=$1;
   var $223=(($222+44)|0);
   HEAP32[(($223)>>2)]=$221;
   label = 48; break;
  case 48: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a692() {
 var label = 0;
 ___cxx_global_var_init681();
 ___cxx_global_var_init53();
 ___cxx_global_var_init55();
 ___cxx_global_var_init57();
 ___cxx_global_var_init59();
 ___cxx_global_var_init61();
 ___cxx_global_var_init63();
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 var label = 0;
 var $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $info=sp;
   var $1=(($this)|0);
   var $2=(($thrown_type)|0);
   var $3=(($1)|(0))==(($2)|(0));
   if ($3) { var $_0 = 1;label = 6; break; } else { label = 2; break; }
  case 2: 
   var $5=(($thrown_type)|(0))==0;
   if ($5) { var $_0 = 0;label = 6; break; } else { label = 3; break; }
  case 3: 
   var $7=$thrown_type;
   var $8=___dynamic_cast($7, 20544, 20528, -1);
   var $9=$8;
   var $10=(($8)|(0))==0;
   if ($10) { var $_0 = 0;label = 6; break; } else { label = 4; break; }
  case 4: 
   var $12=$info;
   _memset($12, 0, 56);
   var $13=(($info)|0);
   HEAP32[(($13)>>2)]=$9;
   var $14=(($info+8)|0);
   HEAP32[(($14)>>2)]=$this;
   var $15=(($info+12)|0);
   HEAP32[(($15)>>2)]=-1;
   var $16=(($info+48)|0);
   HEAP32[(($16)>>2)]=1;
   var $17=$8;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+28)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=HEAP32[(($adjustedPtr)>>2)];
   FUNCTION_TABLE[$20]($9, $info, $21, 1);
   var $22=(($info+24)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==1;
   if ($24) { label = 5; break; } else { var $_0 = 0;label = 6; break; }
  case 5: 
   var $26=(($info+16)|0);
   var $27=HEAP32[(($26)>>2)];
   HEAP32[(($adjustedPtr)>>2)]=$27;
   var $_0 = 1;label = 6; break;
  case 6: 
   var $_0;
   STACKTOP = sp;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $7=(($info+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   HEAP32[(($7)>>2)]=$adjustedPtr;
   var $11=(($info+24)|0);
   HEAP32[(($11)>>2)]=$path_below;
   var $12=(($info+36)|0);
   HEAP32[(($12)>>2)]=1;
   label = 9; break;
  case 4: 
   var $14=(($8)|(0))==(($adjustedPtr)|(0));
   if ($14) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $16=(($info+24)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==2;
   if ($18) { label = 6; break; } else { label = 9; break; }
  case 6: 
   HEAP32[(($16)>>2)]=$path_below;
   label = 9; break;
  case 7: 
   var $21=(($info+36)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($22)+(1))|0);
   HEAP32[(($21)>>2)]=$23;
   var $24=(($info+24)|0);
   HEAP32[(($24)>>2)]=2;
   var $25=(($info+54)|0);
   HEAP8[($25)]=1;
   label = 9; break;
  case 8: 
   var $27=(($this+8)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+28)|0);
   var $32=HEAP32[(($31)>>2)];
   FUNCTION_TABLE[$32]($28, $info, $adjustedPtr, $path_below);
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $info=sp;
   var $1=$static_ptr;
   var $2=HEAP32[(($1)>>2)];
   var $3=((($2)-(8))|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($static_ptr+$5)|0);
   var $7=((($2)-(4))|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   var $10=(($info)|0);
   HEAP32[(($10)>>2)]=$dst_type;
   var $11=(($info+4)|0);
   HEAP32[(($11)>>2)]=$static_ptr;
   var $12=(($info+8)|0);
   HEAP32[(($12)>>2)]=$static_type;
   var $13=(($info+12)|0);
   HEAP32[(($13)>>2)]=$src2dst_offset;
   var $14=(($info+16)|0);
   var $15=(($info+20)|0);
   var $16=(($info+24)|0);
   var $17=(($info+28)|0);
   var $18=(($info+32)|0);
   var $19=(($info+40)|0);
   var $20=$8;
   var $21=(($dst_type)|0);
   var $22=(($20)|(0))==(($21)|(0));
   var $23=$14;
   _memset($23, 0, 39);
   if ($22) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $25=(($info+48)|0);
   HEAP32[(($25)>>2)]=1;
   var $26=$8;
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   FUNCTION_TABLE[$29]($9, $info, $6, $6, 1, 0);
   var $30=HEAP32[(($16)>>2)];
   var $31=(($30)|(0))==1;
   var $_=$31 ? $6 : 0;
   STACKTOP = sp;
   return $_;
  case 3: 
   var $33=(($info+36)|0);
   var $34=$8;
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+24)|0);
   var $37=HEAP32[(($36)>>2)];
   FUNCTION_TABLE[$37]($9, $info, $6, 1, 0);
   var $38=HEAP32[(($33)>>2)];
   if ((($38)|(0))==0) {
    label = 4; break;
   }
   else if ((($38)|(0))==1) {
    label = 7; break;
   }
   else {
   var $dst_ptr_0 = 0;label = 12; break;
   }
  case 4: 
   var $40=HEAP32[(($19)>>2)];
   var $41=(($40)|(0))==1;
   if ($41) { label = 5; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 5: 
   var $43=HEAP32[(($17)>>2)];
   var $44=(($43)|(0))==1;
   if ($44) { label = 6; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 6: 
   var $46=HEAP32[(($18)>>2)];
   var $47=(($46)|(0))==1;
   var $48=HEAP32[(($15)>>2)];
   var $_13=$47 ? $48 : 0;
   var $dst_ptr_0 = $_13;label = 12; break;
  case 7: 
   var $50=HEAP32[(($16)>>2)];
   var $51=(($50)|(0))==1;
   if ($51) { label = 11; break; } else { label = 8; break; }
  case 8: 
   var $53=HEAP32[(($19)>>2)];
   var $54=(($53)|(0))==0;
   if ($54) { label = 9; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 9: 
   var $56=HEAP32[(($17)>>2)];
   var $57=(($56)|(0))==1;
   if ($57) { label = 10; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 10: 
   var $59=HEAP32[(($18)>>2)];
   var $60=(($59)|(0))==1;
   if ($60) { label = 11; break; } else { var $dst_ptr_0 = 0;label = 12; break; }
  case 11: 
   var $62=HEAP32[(($14)>>2)];
   var $dst_ptr_0 = $62;label = 12; break;
  case 12: 
   var $dst_ptr_0;
   STACKTOP = sp;
   return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($info+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==(($this)|(0));
   if ($3) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $5=(($info+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==(($current_ptr)|(0));
   if ($7) { label = 3; break; } else { label = 14; break; }
  case 3: 
   var $9=(($info+28)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==1;
   if ($11) { label = 14; break; } else { label = 4; break; }
  case 4: 
   HEAP32[(($9)>>2)]=$path_below;
   label = 14; break;
  case 5: 
   var $14=(($info)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==(($this)|(0));
   if ($16) { label = 6; break; } else { label = 14; break; }
  case 6: 
   var $18=(($info+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))==(($current_ptr)|(0));
   if ($20) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $22=(($info+20)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==(($current_ptr)|(0));
   if ($24) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $26=(($path_below)|(0))==1;
   if ($26) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $28=(($info+32)|0);
   HEAP32[(($28)>>2)]=1;
   label = 14; break;
  case 10: 
   var $30=(($info+32)|0);
   HEAP32[(($30)>>2)]=$path_below;
   HEAP32[(($22)>>2)]=$current_ptr;
   var $31=(($info+40)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=((($32)+(1))|0);
   HEAP32[(($31)>>2)]=$33;
   var $34=(($info+36)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==1;
   if ($36) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $38=(($info+24)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0))==2;
   if ($40) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $42=(($info+54)|0);
   HEAP8[($42)]=1;
   label = 13; break;
  case 13: 
   var $44=(($info+44)|0);
   HEAP32[(($44)>>2)]=4;
   label = 14; break;
  case 14: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($info+8)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=(($2)|(0))==(($this)|(0));
   if ($3) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $5=(($info+53)|0);
   HEAP8[($5)]=1;
   var $6=(($info+4)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==(($current_ptr)|(0));
   if ($8) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $10=(($info+52)|0);
   HEAP8[($10)]=1;
   var $11=(($info+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==0;
   if ($13) { label = 4; break; } else { label = 6; break; }
  case 4: 
   HEAP32[(($11)>>2)]=$dst_ptr;
   var $15=(($info+24)|0);
   HEAP32[(($15)>>2)]=$path_below;
   var $16=(($info+36)|0);
   HEAP32[(($16)>>2)]=1;
   var $17=(($info+48)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))==1;
   var $20=(($path_below)|(0))==1;
   var $or_cond_i=$19 & $20;
   if ($or_cond_i) { label = 5; break; } else { label = 12; break; }
  case 5: 
   var $22=(($info+54)|0);
   HEAP8[($22)]=1;
   label = 12; break;
  case 6: 
   var $24=(($12)|(0))==(($dst_ptr)|(0));
   if ($24) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $26=(($info+24)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|(0))==2;
   if ($28) { label = 8; break; } else { var $31 = $27;label = 9; break; }
  case 8: 
   HEAP32[(($26)>>2)]=$path_below;
   var $31 = $path_below;label = 9; break;
  case 9: 
   var $31;
   var $32=(($info+48)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))==1;
   var $35=(($31)|(0))==1;
   var $or_cond23_i=$34 & $35;
   if ($or_cond23_i) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $37=(($info+54)|0);
   HEAP8[($37)]=1;
   label = 12; break;
  case 11: 
   var $39=(($info+36)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=((($40)+(1))|0);
   HEAP32[(($39)>>2)]=$41;
   var $42=(($info+54)|0);
   HEAP8[($42)]=1;
   label = 12; break;
  case 12: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $7=(($info+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==(($current_ptr)|(0));
   if ($9) { label = 3; break; } else { label = 20; break; }
  case 3: 
   var $11=(($info+28)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==1;
   if ($13) { label = 20; break; } else { label = 4; break; }
  case 4: 
   HEAP32[(($11)>>2)]=$path_below;
   label = 20; break;
  case 5: 
   var $16=(($info)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|0);
   var $19=(($1)|(0))==(($18)|(0));
   if ($19) { label = 6; break; } else { label = 19; break; }
  case 6: 
   var $21=(($info+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==(($current_ptr)|(0));
   if ($23) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $25=(($info+20)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))==(($current_ptr)|(0));
   if ($27) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $29=(($path_below)|(0))==1;
   if ($29) { label = 9; break; } else { label = 20; break; }
  case 9: 
   var $31=(($info+32)|0);
   HEAP32[(($31)>>2)]=1;
   label = 20; break;
  case 10: 
   var $33=(($info+32)|0);
   HEAP32[(($33)>>2)]=$path_below;
   var $34=(($info+44)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==4;
   if ($36) { label = 20; break; } else { label = 11; break; }
  case 11: 
   var $38=(($info+52)|0);
   HEAP8[($38)]=0;
   var $39=(($info+53)|0);
   HEAP8[($39)]=0;
   var $40=(($this+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+20)|0);
   var $45=HEAP32[(($44)>>2)];
   FUNCTION_TABLE[$45]($41, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
   var $46=HEAP8[($39)];
   var $47=$46 & 1;
   var $48=(($47 << 24) >> 24)==0;
   if ($48) { var $is_dst_type_derived_from_static_type_0_off036 = 0;label = 13; break; } else { label = 12; break; }
  case 12: 
   var $50=HEAP8[($38)];
   var $51=$50 & 1;
   var $not_=(($51 << 24) >> 24)==0;
   if ($not_) { var $is_dst_type_derived_from_static_type_0_off036 = 1;label = 13; break; } else { label = 17; break; }
  case 13: 
   var $is_dst_type_derived_from_static_type_0_off036;
   HEAP32[(($25)>>2)]=$current_ptr;
   var $52=(($info+40)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=((($53)+(1))|0);
   HEAP32[(($52)>>2)]=$54;
   var $55=(($info+36)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|(0))==1;
   if ($57) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $59=(($info+24)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60)|(0))==2;
   if ($61) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $63=(($info+54)|0);
   HEAP8[($63)]=1;
   if ($is_dst_type_derived_from_static_type_0_off036) { label = 17; break; } else { label = 18; break; }
  case 16: 
   if ($is_dst_type_derived_from_static_type_0_off036) { label = 17; break; } else { label = 18; break; }
  case 17: 
   HEAP32[(($34)>>2)]=3;
   label = 20; break;
  case 18: 
   HEAP32[(($34)>>2)]=4;
   label = 20; break;
  case 19: 
   var $67=(($this+8)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$68;
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+24)|0);
   var $72=HEAP32[(($71)>>2)];
   FUNCTION_TABLE[$72]($68, $info, $current_ptr, $path_below, $use_strcmp);
   label = 20; break;
  case 20: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($this)|0);
   var $2=(($info+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|0);
   var $5=(($1)|(0))==(($4)|(0));
   if ($5) { label = 2; break; } else { label = 12; break; }
  case 2: 
   var $7=(($info+53)|0);
   HEAP8[($7)]=1;
   var $8=(($info+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==(($current_ptr)|(0));
   if ($10) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $12=(($info+52)|0);
   HEAP8[($12)]=1;
   var $13=(($info+16)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))==0;
   if ($15) { label = 4; break; } else { label = 6; break; }
  case 4: 
   HEAP32[(($13)>>2)]=$dst_ptr;
   var $17=(($info+24)|0);
   HEAP32[(($17)>>2)]=$path_below;
   var $18=(($info+36)|0);
   HEAP32[(($18)>>2)]=1;
   var $19=(($info+48)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))==1;
   var $22=(($path_below)|(0))==1;
   var $or_cond_i=$21 & $22;
   if ($or_cond_i) { label = 5; break; } else { label = 13; break; }
  case 5: 
   var $24=(($info+54)|0);
   HEAP8[($24)]=1;
   label = 13; break;
  case 6: 
   var $26=(($14)|(0))==(($dst_ptr)|(0));
   if ($26) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $28=(($info+24)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))==2;
   if ($30) { label = 8; break; } else { var $33 = $29;label = 9; break; }
  case 8: 
   HEAP32[(($28)>>2)]=$path_below;
   var $33 = $path_below;label = 9; break;
  case 9: 
   var $33;
   var $34=(($info+48)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==1;
   var $37=(($33)|(0))==1;
   var $or_cond23_i=$36 & $37;
   if ($or_cond23_i) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $39=(($info+54)|0);
   HEAP8[($39)]=1;
   label = 13; break;
  case 11: 
   var $41=(($info+36)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=((($42)+(1))|0);
   HEAP32[(($41)>>2)]=$43;
   var $44=(($info+54)|0);
   HEAP8[($44)]=1;
   label = 13; break;
  case 12: 
   var $46=(($this+8)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   FUNCTION_TABLE[$51]($47, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
   label = 13; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($bytes)>>>(0)) < 245;
   if ($1) { label = 2; break; } else { label = 78; break; }
  case 2: 
   var $3=(($bytes)>>>(0)) < 11;
   if ($3) { var $8 = 16;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $5=((($bytes)+(11))|0);
   var $6=$5 & -8;
   var $8 = $6;label = 4; break;
  case 4: 
   var $8;
   var $9=$8 >>> 3;
   var $10=HEAP32[((((36928)|0))>>2)];
   var $11=$10 >>> (($9)>>>(0));
   var $12=$11 & 3;
   var $13=(($12)|(0))==0;
   if ($13) { label = 12; break; } else { label = 5; break; }
  case 5: 
   var $15=$11 & 1;
   var $16=$15 ^ 1;
   var $17=((($16)+($9))|0);
   var $18=$17 << 1;
   var $19=((36968+($18<<2))|0);
   var $20=$19;
   var $_sum111=((($18)+(2))|0);
   var $21=((36968+($_sum111<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($20)|(0))==(($24)|(0));
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $27=1 << $17;
   var $28=$27 ^ -1;
   var $29=$10 & $28;
   HEAP32[((((36928)|0))>>2)]=$29;
   label = 11; break;
  case 7: 
   var $31=$24;
   var $32=HEAP32[((((36944)|0))>>2)];
   var $33=(($31)>>>(0)) < (($32)>>>(0));
   if ($33) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $35=(($24+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0))==(($22)|(0));
   if ($37) { label = 9; break; } else { label = 10; break; }
  case 9: 
   HEAP32[(($35)>>2)]=$20;
   HEAP32[(($21)>>2)]=$24;
   label = 11; break;
  case 10: 
   _abort();
   throw "Reached an unreachable!";
  case 11: 
   var $40=$17 << 3;
   var $41=$40 | 3;
   var $42=(($22+4)|0);
   HEAP32[(($42)>>2)]=$41;
   var $43=$22;
   var $_sum113114=$40 | 4;
   var $44=(($43+$_sum113114)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 | 1;
   HEAP32[(($45)>>2)]=$47;
   var $48=$23;
   var $mem_0 = $48;label = 341; break;
  case 12: 
   var $50=HEAP32[((((36936)|0))>>2)];
   var $51=(($8)>>>(0)) > (($50)>>>(0));
   if ($51) { label = 13; break; } else { var $nb_0 = $8;label = 160; break; }
  case 13: 
   var $53=(($11)|(0))==0;
   if ($53) { label = 27; break; } else { label = 14; break; }
  case 14: 
   var $55=$11 << $9;
   var $56=2 << $9;
   var $57=(((-$56))|0);
   var $58=$56 | $57;
   var $59=$55 & $58;
   var $60=(((-$59))|0);
   var $61=$59 & $60;
   var $62=((($61)-(1))|0);
   var $63=$62 >>> 12;
   var $64=$63 & 16;
   var $65=$62 >>> (($64)>>>(0));
   var $66=$65 >>> 5;
   var $67=$66 & 8;
   var $68=$67 | $64;
   var $69=$65 >>> (($67)>>>(0));
   var $70=$69 >>> 2;
   var $71=$70 & 4;
   var $72=$68 | $71;
   var $73=$69 >>> (($71)>>>(0));
   var $74=$73 >>> 1;
   var $75=$74 & 2;
   var $76=$72 | $75;
   var $77=$73 >>> (($75)>>>(0));
   var $78=$77 >>> 1;
   var $79=$78 & 1;
   var $80=$76 | $79;
   var $81=$77 >>> (($79)>>>(0));
   var $82=((($80)+($81))|0);
   var $83=$82 << 1;
   var $84=((36968+($83<<2))|0);
   var $85=$84;
   var $_sum104=((($83)+(2))|0);
   var $86=((36968+($_sum104<<2))|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($85)|(0))==(($89)|(0));
   if ($90) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $92=1 << $82;
   var $93=$92 ^ -1;
   var $94=$10 & $93;
   HEAP32[((((36928)|0))>>2)]=$94;
   label = 20; break;
  case 16: 
   var $96=$89;
   var $97=HEAP32[((((36944)|0))>>2)];
   var $98=(($96)>>>(0)) < (($97)>>>(0));
   if ($98) { label = 19; break; } else { label = 17; break; }
  case 17: 
   var $100=(($89+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==(($87)|(0));
   if ($102) { label = 18; break; } else { label = 19; break; }
  case 18: 
   HEAP32[(($100)>>2)]=$85;
   HEAP32[(($86)>>2)]=$89;
   label = 20; break;
  case 19: 
   _abort();
   throw "Reached an unreachable!";
  case 20: 
   var $105=$82 << 3;
   var $106=((($105)-($8))|0);
   var $107=$8 | 3;
   var $108=(($87+4)|0);
   HEAP32[(($108)>>2)]=$107;
   var $109=$87;
   var $110=(($109+$8)|0);
   var $111=$110;
   var $112=$106 | 1;
   var $_sum106107=$8 | 4;
   var $113=(($109+$_sum106107)|0);
   var $114=$113;
   HEAP32[(($114)>>2)]=$112;
   var $115=(($109+$105)|0);
   var $116=$115;
   HEAP32[(($116)>>2)]=$106;
   var $117=HEAP32[((((36936)|0))>>2)];
   var $118=(($117)|(0))==0;
   if ($118) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $120=HEAP32[((((36948)|0))>>2)];
   var $121=$117 >>> 3;
   var $122=$121 << 1;
   var $123=((36968+($122<<2))|0);
   var $124=$123;
   var $125=HEAP32[((((36928)|0))>>2)];
   var $126=1 << $121;
   var $127=$125 & $126;
   var $128=(($127)|(0))==0;
   if ($128) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $130=$125 | $126;
   HEAP32[((((36928)|0))>>2)]=$130;
   var $_sum109_pre=((($122)+(2))|0);
   var $_pre=((36968+($_sum109_pre<<2))|0);
   var $F4_0 = $124;var $_pre_phi = $_pre;label = 25; break;
  case 23: 
   var $_sum110=((($122)+(2))|0);
   var $132=((36968+($_sum110<<2))|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$133;
   var $135=HEAP32[((((36944)|0))>>2)];
   var $136=(($134)>>>(0)) < (($135)>>>(0));
   if ($136) { label = 24; break; } else { var $F4_0 = $133;var $_pre_phi = $132;label = 25; break; }
  case 24: 
   _abort();
   throw "Reached an unreachable!";
  case 25: 
   var $_pre_phi;
   var $F4_0;
   HEAP32[(($_pre_phi)>>2)]=$120;
   var $139=(($F4_0+12)|0);
   HEAP32[(($139)>>2)]=$120;
   var $140=(($120+8)|0);
   HEAP32[(($140)>>2)]=$F4_0;
   var $141=(($120+12)|0);
   HEAP32[(($141)>>2)]=$124;
   label = 26; break;
  case 26: 
   HEAP32[((((36936)|0))>>2)]=$106;
   HEAP32[((((36948)|0))>>2)]=$111;
   var $143=$88;
   var $mem_0 = $143;label = 341; break;
  case 27: 
   var $145=HEAP32[((((36932)|0))>>2)];
   var $146=(($145)|(0))==0;
   if ($146) { var $nb_0 = $8;label = 160; break; } else { label = 28; break; }
  case 28: 
   var $148=(((-$145))|0);
   var $149=$145 & $148;
   var $150=((($149)-(1))|0);
   var $151=$150 >>> 12;
   var $152=$151 & 16;
   var $153=$150 >>> (($152)>>>(0));
   var $154=$153 >>> 5;
   var $155=$154 & 8;
   var $156=$155 | $152;
   var $157=$153 >>> (($155)>>>(0));
   var $158=$157 >>> 2;
   var $159=$158 & 4;
   var $160=$156 | $159;
   var $161=$157 >>> (($159)>>>(0));
   var $162=$161 >>> 1;
   var $163=$162 & 2;
   var $164=$160 | $163;
   var $165=$161 >>> (($163)>>>(0));
   var $166=$165 >>> 1;
   var $167=$166 & 1;
   var $168=$164 | $167;
   var $169=$165 >>> (($167)>>>(0));
   var $170=((($168)+($169))|0);
   var $171=((37232+($170<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($172+4)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=$174 & -8;
   var $176=((($175)-($8))|0);
   var $t_0_i = $172;var $v_0_i = $172;var $rsize_0_i = $176;label = 29; break;
  case 29: 
   var $rsize_0_i;
   var $v_0_i;
   var $t_0_i;
   var $178=(($t_0_i+16)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179)|(0))==0;
   if ($180) { label = 30; break; } else { var $185 = $179;label = 31; break; }
  case 30: 
   var $182=(($t_0_i+20)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183)|(0))==0;
   if ($184) { label = 32; break; } else { var $185 = $183;label = 31; break; }
  case 31: 
   var $185;
   var $186=(($185+4)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$187 & -8;
   var $189=((($188)-($8))|0);
   var $190=(($189)>>>(0)) < (($rsize_0_i)>>>(0));
   var $_rsize_0_i=$190 ? $189 : $rsize_0_i;
   var $_v_0_i=$190 ? $185 : $v_0_i;
   var $t_0_i = $185;var $v_0_i = $_v_0_i;var $rsize_0_i = $_rsize_0_i;label = 29; break;
  case 32: 
   var $192=$v_0_i;
   var $193=HEAP32[((((36944)|0))>>2)];
   var $194=(($192)>>>(0)) < (($193)>>>(0));
   if ($194) { label = 76; break; } else { label = 33; break; }
  case 33: 
   var $196=(($192+$8)|0);
   var $197=$196;
   var $198=(($192)>>>(0)) < (($196)>>>(0));
   if ($198) { label = 34; break; } else { label = 76; break; }
  case 34: 
   var $200=(($v_0_i+24)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($v_0_i+12)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($203)|(0))==(($v_0_i)|(0));
   if ($204) { label = 40; break; } else { label = 35; break; }
  case 35: 
   var $206=(($v_0_i+8)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=$207;
   var $209=(($208)>>>(0)) < (($193)>>>(0));
   if ($209) { label = 39; break; } else { label = 36; break; }
  case 36: 
   var $211=(($207+12)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=(($212)|(0))==(($v_0_i)|(0));
   if ($213) { label = 37; break; } else { label = 39; break; }
  case 37: 
   var $215=(($203+8)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($216)|(0))==(($v_0_i)|(0));
   if ($217) { label = 38; break; } else { label = 39; break; }
  case 38: 
   HEAP32[(($211)>>2)]=$203;
   HEAP32[(($215)>>2)]=$207;
   var $R_1_i = $203;label = 47; break;
  case 39: 
   _abort();
   throw "Reached an unreachable!";
  case 40: 
   var $220=(($v_0_i+20)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=(($221)|(0))==0;
   if ($222) { label = 41; break; } else { var $R_0_i = $221;var $RP_0_i = $220;label = 42; break; }
  case 41: 
   var $224=(($v_0_i+16)|0);
   var $225=HEAP32[(($224)>>2)];
   var $226=(($225)|(0))==0;
   if ($226) { var $R_1_i = 0;label = 47; break; } else { var $R_0_i = $225;var $RP_0_i = $224;label = 42; break; }
  case 42: 
   var $RP_0_i;
   var $R_0_i;
   var $227=(($R_0_i+20)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=(($228)|(0))==0;
   if ($229) { label = 43; break; } else { var $R_0_i = $228;var $RP_0_i = $227;label = 42; break; }
  case 43: 
   var $231=(($R_0_i+16)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232)|(0))==0;
   if ($233) { label = 44; break; } else { var $R_0_i = $232;var $RP_0_i = $231;label = 42; break; }
  case 44: 
   var $235=$RP_0_i;
   var $236=(($235)>>>(0)) < (($193)>>>(0));
   if ($236) { label = 46; break; } else { label = 45; break; }
  case 45: 
   HEAP32[(($RP_0_i)>>2)]=0;
   var $R_1_i = $R_0_i;label = 47; break;
  case 46: 
   _abort();
   throw "Reached an unreachable!";
  case 47: 
   var $R_1_i;
   var $240=(($201)|(0))==0;
   if ($240) { label = 67; break; } else { label = 48; break; }
  case 48: 
   var $242=(($v_0_i+28)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=((37232+($243<<2))|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=(($v_0_i)|(0))==(($245)|(0));
   if ($246) { label = 49; break; } else { label = 51; break; }
  case 49: 
   HEAP32[(($244)>>2)]=$R_1_i;
   var $cond_i=(($R_1_i)|(0))==0;
   if ($cond_i) { label = 50; break; } else { label = 57; break; }
  case 50: 
   var $248=HEAP32[(($242)>>2)];
   var $249=1 << $248;
   var $250=$249 ^ -1;
   var $251=HEAP32[((((36932)|0))>>2)];
   var $252=$251 & $250;
   HEAP32[((((36932)|0))>>2)]=$252;
   label = 67; break;
  case 51: 
   var $254=$201;
   var $255=HEAP32[((((36944)|0))>>2)];
   var $256=(($254)>>>(0)) < (($255)>>>(0));
   if ($256) { label = 55; break; } else { label = 52; break; }
  case 52: 
   var $258=(($201+16)|0);
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259)|(0))==(($v_0_i)|(0));
   if ($260) { label = 53; break; } else { label = 54; break; }
  case 53: 
   HEAP32[(($258)>>2)]=$R_1_i;
   label = 56; break;
  case 54: 
   var $263=(($201+20)|0);
   HEAP32[(($263)>>2)]=$R_1_i;
   label = 56; break;
  case 55: 
   _abort();
   throw "Reached an unreachable!";
  case 56: 
   var $266=(($R_1_i)|(0))==0;
   if ($266) { label = 67; break; } else { label = 57; break; }
  case 57: 
   var $268=$R_1_i;
   var $269=HEAP32[((((36944)|0))>>2)];
   var $270=(($268)>>>(0)) < (($269)>>>(0));
   if ($270) { label = 66; break; } else { label = 58; break; }
  case 58: 
   var $272=(($R_1_i+24)|0);
   HEAP32[(($272)>>2)]=$201;
   var $273=(($v_0_i+16)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($274)|(0))==0;
   if ($275) { label = 62; break; } else { label = 59; break; }
  case 59: 
   var $277=$274;
   var $278=HEAP32[((((36944)|0))>>2)];
   var $279=(($277)>>>(0)) < (($278)>>>(0));
   if ($279) { label = 61; break; } else { label = 60; break; }
  case 60: 
   var $281=(($R_1_i+16)|0);
   HEAP32[(($281)>>2)]=$274;
   var $282=(($274+24)|0);
   HEAP32[(($282)>>2)]=$R_1_i;
   label = 62; break;
  case 61: 
   _abort();
   throw "Reached an unreachable!";
  case 62: 
   var $285=(($v_0_i+20)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($286)|(0))==0;
   if ($287) { label = 67; break; } else { label = 63; break; }
  case 63: 
   var $289=$286;
   var $290=HEAP32[((((36944)|0))>>2)];
   var $291=(($289)>>>(0)) < (($290)>>>(0));
   if ($291) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $293=(($R_1_i+20)|0);
   HEAP32[(($293)>>2)]=$286;
   var $294=(($286+24)|0);
   HEAP32[(($294)>>2)]=$R_1_i;
   label = 67; break;
  case 65: 
   _abort();
   throw "Reached an unreachable!";
  case 66: 
   _abort();
   throw "Reached an unreachable!";
  case 67: 
   var $298=(($rsize_0_i)>>>(0)) < 16;
   if ($298) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $300=((($rsize_0_i)+($8))|0);
   var $301=$300 | 3;
   var $302=(($v_0_i+4)|0);
   HEAP32[(($302)>>2)]=$301;
   var $_sum4_i=((($300)+(4))|0);
   var $303=(($192+$_sum4_i)|0);
   var $304=$303;
   var $305=HEAP32[(($304)>>2)];
   var $306=$305 | 1;
   HEAP32[(($304)>>2)]=$306;
   label = 77; break;
  case 69: 
   var $308=$8 | 3;
   var $309=(($v_0_i+4)|0);
   HEAP32[(($309)>>2)]=$308;
   var $310=$rsize_0_i | 1;
   var $_sum_i137=$8 | 4;
   var $311=(($192+$_sum_i137)|0);
   var $312=$311;
   HEAP32[(($312)>>2)]=$310;
   var $_sum1_i=((($rsize_0_i)+($8))|0);
   var $313=(($192+$_sum1_i)|0);
   var $314=$313;
   HEAP32[(($314)>>2)]=$rsize_0_i;
   var $315=HEAP32[((((36936)|0))>>2)];
   var $316=(($315)|(0))==0;
   if ($316) { label = 75; break; } else { label = 70; break; }
  case 70: 
   var $318=HEAP32[((((36948)|0))>>2)];
   var $319=$315 >>> 3;
   var $320=$319 << 1;
   var $321=((36968+($320<<2))|0);
   var $322=$321;
   var $323=HEAP32[((((36928)|0))>>2)];
   var $324=1 << $319;
   var $325=$323 & $324;
   var $326=(($325)|(0))==0;
   if ($326) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $328=$323 | $324;
   HEAP32[((((36928)|0))>>2)]=$328;
   var $_sum2_pre_i=((($320)+(2))|0);
   var $_pre_i=((36968+($_sum2_pre_i<<2))|0);
   var $F1_0_i = $322;var $_pre_phi_i = $_pre_i;label = 74; break;
  case 72: 
   var $_sum3_i=((($320)+(2))|0);
   var $330=((36968+($_sum3_i<<2))|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=$331;
   var $333=HEAP32[((((36944)|0))>>2)];
   var $334=(($332)>>>(0)) < (($333)>>>(0));
   if ($334) { label = 73; break; } else { var $F1_0_i = $331;var $_pre_phi_i = $330;label = 74; break; }
  case 73: 
   _abort();
   throw "Reached an unreachable!";
  case 74: 
   var $_pre_phi_i;
   var $F1_0_i;
   HEAP32[(($_pre_phi_i)>>2)]=$318;
   var $337=(($F1_0_i+12)|0);
   HEAP32[(($337)>>2)]=$318;
   var $338=(($318+8)|0);
   HEAP32[(($338)>>2)]=$F1_0_i;
   var $339=(($318+12)|0);
   HEAP32[(($339)>>2)]=$322;
   label = 75; break;
  case 75: 
   HEAP32[((((36936)|0))>>2)]=$rsize_0_i;
   HEAP32[((((36948)|0))>>2)]=$197;
   label = 77; break;
  case 76: 
   _abort();
   throw "Reached an unreachable!";
  case 77: 
   var $342=(($v_0_i+8)|0);
   var $343=$342;
   var $344=(($342)|(0))==0;
   if ($344) { var $nb_0 = $8;label = 160; break; } else { var $mem_0 = $343;label = 341; break; }
  case 78: 
   var $346=(($bytes)>>>(0)) > 4294967231;
   if ($346) { var $nb_0 = -1;label = 160; break; } else { label = 79; break; }
  case 79: 
   var $348=((($bytes)+(11))|0);
   var $349=$348 & -8;
   var $350=HEAP32[((((36932)|0))>>2)];
   var $351=(($350)|(0))==0;
   if ($351) { var $nb_0 = $349;label = 160; break; } else { label = 80; break; }
  case 80: 
   var $353=(((-$349))|0);
   var $354=$348 >>> 8;
   var $355=(($354)|(0))==0;
   if ($355) { var $idx_0_i = 0;label = 83; break; } else { label = 81; break; }
  case 81: 
   var $357=(($349)>>>(0)) > 16777215;
   if ($357) { var $idx_0_i = 31;label = 83; break; } else { label = 82; break; }
  case 82: 
   var $359=((($354)+(1048320))|0);
   var $360=$359 >>> 16;
   var $361=$360 & 8;
   var $362=$354 << $361;
   var $363=((($362)+(520192))|0);
   var $364=$363 >>> 16;
   var $365=$364 & 4;
   var $366=$365 | $361;
   var $367=$362 << $365;
   var $368=((($367)+(245760))|0);
   var $369=$368 >>> 16;
   var $370=$369 & 2;
   var $371=$366 | $370;
   var $372=(((14)-($371))|0);
   var $373=$367 << $370;
   var $374=$373 >>> 15;
   var $375=((($372)+($374))|0);
   var $376=$375 << 1;
   var $377=((($375)+(7))|0);
   var $378=$349 >>> (($377)>>>(0));
   var $379=$378 & 1;
   var $380=$379 | $376;
   var $idx_0_i = $380;label = 83; break;
  case 83: 
   var $idx_0_i;
   var $382=((37232+($idx_0_i<<2))|0);
   var $383=HEAP32[(($382)>>2)];
   var $384=(($383)|(0))==0;
   if ($384) { var $v_2_i = 0;var $rsize_2_i = $353;var $t_1_i = 0;label = 90; break; } else { label = 84; break; }
  case 84: 
   var $386=(($idx_0_i)|(0))==31;
   if ($386) { var $391 = 0;label = 86; break; } else { label = 85; break; }
  case 85: 
   var $388=$idx_0_i >>> 1;
   var $389=(((25)-($388))|0);
   var $391 = $389;label = 86; break;
  case 86: 
   var $391;
   var $392=$349 << $391;
   var $v_0_i118 = 0;var $rsize_0_i117 = $353;var $t_0_i116 = $383;var $sizebits_0_i = $392;var $rst_0_i = 0;label = 87; break;
  case 87: 
   var $rst_0_i;
   var $sizebits_0_i;
   var $t_0_i116;
   var $rsize_0_i117;
   var $v_0_i118;
   var $394=(($t_0_i116+4)|0);
   var $395=HEAP32[(($394)>>2)];
   var $396=$395 & -8;
   var $397=((($396)-($349))|0);
   var $398=(($397)>>>(0)) < (($rsize_0_i117)>>>(0));
   if ($398) { label = 88; break; } else { var $v_1_i = $v_0_i118;var $rsize_1_i = $rsize_0_i117;label = 89; break; }
  case 88: 
   var $400=(($396)|(0))==(($349)|(0));
   if ($400) { var $v_2_i = $t_0_i116;var $rsize_2_i = $397;var $t_1_i = $t_0_i116;label = 90; break; } else { var $v_1_i = $t_0_i116;var $rsize_1_i = $397;label = 89; break; }
  case 89: 
   var $rsize_1_i;
   var $v_1_i;
   var $402=(($t_0_i116+20)|0);
   var $403=HEAP32[(($402)>>2)];
   var $404=$sizebits_0_i >>> 31;
   var $405=(($t_0_i116+16+($404<<2))|0);
   var $406=HEAP32[(($405)>>2)];
   var $407=(($403)|(0))==0;
   var $408=(($403)|(0))==(($406)|(0));
   var $or_cond_i=$407 | $408;
   var $rst_1_i=$or_cond_i ? $rst_0_i : $403;
   var $409=(($406)|(0))==0;
   var $410=$sizebits_0_i << 1;
   if ($409) { var $v_2_i = $v_1_i;var $rsize_2_i = $rsize_1_i;var $t_1_i = $rst_1_i;label = 90; break; } else { var $v_0_i118 = $v_1_i;var $rsize_0_i117 = $rsize_1_i;var $t_0_i116 = $406;var $sizebits_0_i = $410;var $rst_0_i = $rst_1_i;label = 87; break; }
  case 90: 
   var $t_1_i;
   var $rsize_2_i;
   var $v_2_i;
   var $411=(($t_1_i)|(0))==0;
   var $412=(($v_2_i)|(0))==0;
   var $or_cond21_i=$411 & $412;
   if ($or_cond21_i) { label = 91; break; } else { var $t_2_ph_i = $t_1_i;label = 93; break; }
  case 91: 
   var $414=2 << $idx_0_i;
   var $415=(((-$414))|0);
   var $416=$414 | $415;
   var $417=$350 & $416;
   var $418=(($417)|(0))==0;
   if ($418) { var $nb_0 = $349;label = 160; break; } else { label = 92; break; }
  case 92: 
   var $420=(((-$417))|0);
   var $421=$417 & $420;
   var $422=((($421)-(1))|0);
   var $423=$422 >>> 12;
   var $424=$423 & 16;
   var $425=$422 >>> (($424)>>>(0));
   var $426=$425 >>> 5;
   var $427=$426 & 8;
   var $428=$427 | $424;
   var $429=$425 >>> (($427)>>>(0));
   var $430=$429 >>> 2;
   var $431=$430 & 4;
   var $432=$428 | $431;
   var $433=$429 >>> (($431)>>>(0));
   var $434=$433 >>> 1;
   var $435=$434 & 2;
   var $436=$432 | $435;
   var $437=$433 >>> (($435)>>>(0));
   var $438=$437 >>> 1;
   var $439=$438 & 1;
   var $440=$436 | $439;
   var $441=$437 >>> (($439)>>>(0));
   var $442=((($440)+($441))|0);
   var $443=((37232+($442<<2))|0);
   var $444=HEAP32[(($443)>>2)];
   var $t_2_ph_i = $444;label = 93; break;
  case 93: 
   var $t_2_ph_i;
   var $445=(($t_2_ph_i)|(0))==0;
   if ($445) { var $rsize_3_lcssa_i = $rsize_2_i;var $v_3_lcssa_i = $v_2_i;label = 96; break; } else { var $t_228_i = $t_2_ph_i;var $rsize_329_i = $rsize_2_i;var $v_330_i = $v_2_i;label = 94; break; }
  case 94: 
   var $v_330_i;
   var $rsize_329_i;
   var $t_228_i;
   var $446=(($t_228_i+4)|0);
   var $447=HEAP32[(($446)>>2)];
   var $448=$447 & -8;
   var $449=((($448)-($349))|0);
   var $450=(($449)>>>(0)) < (($rsize_329_i)>>>(0));
   var $_rsize_3_i=$450 ? $449 : $rsize_329_i;
   var $t_2_v_3_i=$450 ? $t_228_i : $v_330_i;
   var $451=(($t_228_i+16)|0);
   var $452=HEAP32[(($451)>>2)];
   var $453=(($452)|(0))==0;
   if ($453) { label = 95; break; } else { var $t_228_i = $452;var $rsize_329_i = $_rsize_3_i;var $v_330_i = $t_2_v_3_i;label = 94; break; }
  case 95: 
   var $454=(($t_228_i+20)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=(($455)|(0))==0;
   if ($456) { var $rsize_3_lcssa_i = $_rsize_3_i;var $v_3_lcssa_i = $t_2_v_3_i;label = 96; break; } else { var $t_228_i = $455;var $rsize_329_i = $_rsize_3_i;var $v_330_i = $t_2_v_3_i;label = 94; break; }
  case 96: 
   var $v_3_lcssa_i;
   var $rsize_3_lcssa_i;
   var $457=(($v_3_lcssa_i)|(0))==0;
   if ($457) { var $nb_0 = $349;label = 160; break; } else { label = 97; break; }
  case 97: 
   var $459=HEAP32[((((36936)|0))>>2)];
   var $460=((($459)-($349))|0);
   var $461=(($rsize_3_lcssa_i)>>>(0)) < (($460)>>>(0));
   if ($461) { label = 98; break; } else { var $nb_0 = $349;label = 160; break; }
  case 98: 
   var $463=$v_3_lcssa_i;
   var $464=HEAP32[((((36944)|0))>>2)];
   var $465=(($463)>>>(0)) < (($464)>>>(0));
   if ($465) { label = 158; break; } else { label = 99; break; }
  case 99: 
   var $467=(($463+$349)|0);
   var $468=$467;
   var $469=(($463)>>>(0)) < (($467)>>>(0));
   if ($469) { label = 100; break; } else { label = 158; break; }
  case 100: 
   var $471=(($v_3_lcssa_i+24)|0);
   var $472=HEAP32[(($471)>>2)];
   var $473=(($v_3_lcssa_i+12)|0);
   var $474=HEAP32[(($473)>>2)];
   var $475=(($474)|(0))==(($v_3_lcssa_i)|(0));
   if ($475) { label = 106; break; } else { label = 101; break; }
  case 101: 
   var $477=(($v_3_lcssa_i+8)|0);
   var $478=HEAP32[(($477)>>2)];
   var $479=$478;
   var $480=(($479)>>>(0)) < (($464)>>>(0));
   if ($480) { label = 105; break; } else { label = 102; break; }
  case 102: 
   var $482=(($478+12)|0);
   var $483=HEAP32[(($482)>>2)];
   var $484=(($483)|(0))==(($v_3_lcssa_i)|(0));
   if ($484) { label = 103; break; } else { label = 105; break; }
  case 103: 
   var $486=(($474+8)|0);
   var $487=HEAP32[(($486)>>2)];
   var $488=(($487)|(0))==(($v_3_lcssa_i)|(0));
   if ($488) { label = 104; break; } else { label = 105; break; }
  case 104: 
   HEAP32[(($482)>>2)]=$474;
   HEAP32[(($486)>>2)]=$478;
   var $R_1_i122 = $474;label = 113; break;
  case 105: 
   _abort();
   throw "Reached an unreachable!";
  case 106: 
   var $491=(($v_3_lcssa_i+20)|0);
   var $492=HEAP32[(($491)>>2)];
   var $493=(($492)|(0))==0;
   if ($493) { label = 107; break; } else { var $R_0_i120 = $492;var $RP_0_i119 = $491;label = 108; break; }
  case 107: 
   var $495=(($v_3_lcssa_i+16)|0);
   var $496=HEAP32[(($495)>>2)];
   var $497=(($496)|(0))==0;
   if ($497) { var $R_1_i122 = 0;label = 113; break; } else { var $R_0_i120 = $496;var $RP_0_i119 = $495;label = 108; break; }
  case 108: 
   var $RP_0_i119;
   var $R_0_i120;
   var $498=(($R_0_i120+20)|0);
   var $499=HEAP32[(($498)>>2)];
   var $500=(($499)|(0))==0;
   if ($500) { label = 109; break; } else { var $R_0_i120 = $499;var $RP_0_i119 = $498;label = 108; break; }
  case 109: 
   var $502=(($R_0_i120+16)|0);
   var $503=HEAP32[(($502)>>2)];
   var $504=(($503)|(0))==0;
   if ($504) { label = 110; break; } else { var $R_0_i120 = $503;var $RP_0_i119 = $502;label = 108; break; }
  case 110: 
   var $506=$RP_0_i119;
   var $507=(($506)>>>(0)) < (($464)>>>(0));
   if ($507) { label = 112; break; } else { label = 111; break; }
  case 111: 
   HEAP32[(($RP_0_i119)>>2)]=0;
   var $R_1_i122 = $R_0_i120;label = 113; break;
  case 112: 
   _abort();
   throw "Reached an unreachable!";
  case 113: 
   var $R_1_i122;
   var $511=(($472)|(0))==0;
   if ($511) { label = 133; break; } else { label = 114; break; }
  case 114: 
   var $513=(($v_3_lcssa_i+28)|0);
   var $514=HEAP32[(($513)>>2)];
   var $515=((37232+($514<<2))|0);
   var $516=HEAP32[(($515)>>2)];
   var $517=(($v_3_lcssa_i)|(0))==(($516)|(0));
   if ($517) { label = 115; break; } else { label = 117; break; }
  case 115: 
   HEAP32[(($515)>>2)]=$R_1_i122;
   var $cond_i123=(($R_1_i122)|(0))==0;
   if ($cond_i123) { label = 116; break; } else { label = 123; break; }
  case 116: 
   var $519=HEAP32[(($513)>>2)];
   var $520=1 << $519;
   var $521=$520 ^ -1;
   var $522=HEAP32[((((36932)|0))>>2)];
   var $523=$522 & $521;
   HEAP32[((((36932)|0))>>2)]=$523;
   label = 133; break;
  case 117: 
   var $525=$472;
   var $526=HEAP32[((((36944)|0))>>2)];
   var $527=(($525)>>>(0)) < (($526)>>>(0));
   if ($527) { label = 121; break; } else { label = 118; break; }
  case 118: 
   var $529=(($472+16)|0);
   var $530=HEAP32[(($529)>>2)];
   var $531=(($530)|(0))==(($v_3_lcssa_i)|(0));
   if ($531) { label = 119; break; } else { label = 120; break; }
  case 119: 
   HEAP32[(($529)>>2)]=$R_1_i122;
   label = 122; break;
  case 120: 
   var $534=(($472+20)|0);
   HEAP32[(($534)>>2)]=$R_1_i122;
   label = 122; break;
  case 121: 
   _abort();
   throw "Reached an unreachable!";
  case 122: 
   var $537=(($R_1_i122)|(0))==0;
   if ($537) { label = 133; break; } else { label = 123; break; }
  case 123: 
   var $539=$R_1_i122;
   var $540=HEAP32[((((36944)|0))>>2)];
   var $541=(($539)>>>(0)) < (($540)>>>(0));
   if ($541) { label = 132; break; } else { label = 124; break; }
  case 124: 
   var $543=(($R_1_i122+24)|0);
   HEAP32[(($543)>>2)]=$472;
   var $544=(($v_3_lcssa_i+16)|0);
   var $545=HEAP32[(($544)>>2)];
   var $546=(($545)|(0))==0;
   if ($546) { label = 128; break; } else { label = 125; break; }
  case 125: 
   var $548=$545;
   var $549=HEAP32[((((36944)|0))>>2)];
   var $550=(($548)>>>(0)) < (($549)>>>(0));
   if ($550) { label = 127; break; } else { label = 126; break; }
  case 126: 
   var $552=(($R_1_i122+16)|0);
   HEAP32[(($552)>>2)]=$545;
   var $553=(($545+24)|0);
   HEAP32[(($553)>>2)]=$R_1_i122;
   label = 128; break;
  case 127: 
   _abort();
   throw "Reached an unreachable!";
  case 128: 
   var $556=(($v_3_lcssa_i+20)|0);
   var $557=HEAP32[(($556)>>2)];
   var $558=(($557)|(0))==0;
   if ($558) { label = 133; break; } else { label = 129; break; }
  case 129: 
   var $560=$557;
   var $561=HEAP32[((((36944)|0))>>2)];
   var $562=(($560)>>>(0)) < (($561)>>>(0));
   if ($562) { label = 131; break; } else { label = 130; break; }
  case 130: 
   var $564=(($R_1_i122+20)|0);
   HEAP32[(($564)>>2)]=$557;
   var $565=(($557+24)|0);
   HEAP32[(($565)>>2)]=$R_1_i122;
   label = 133; break;
  case 131: 
   _abort();
   throw "Reached an unreachable!";
  case 132: 
   _abort();
   throw "Reached an unreachable!";
  case 133: 
   var $569=(($rsize_3_lcssa_i)>>>(0)) < 16;
   if ($569) { label = 134; break; } else { label = 135; break; }
  case 134: 
   var $571=((($rsize_3_lcssa_i)+($349))|0);
   var $572=$571 | 3;
   var $573=(($v_3_lcssa_i+4)|0);
   HEAP32[(($573)>>2)]=$572;
   var $_sum19_i=((($571)+(4))|0);
   var $574=(($463+$_sum19_i)|0);
   var $575=$574;
   var $576=HEAP32[(($575)>>2)];
   var $577=$576 | 1;
   HEAP32[(($575)>>2)]=$577;
   label = 159; break;
  case 135: 
   var $579=$349 | 3;
   var $580=(($v_3_lcssa_i+4)|0);
   HEAP32[(($580)>>2)]=$579;
   var $581=$rsize_3_lcssa_i | 1;
   var $_sum_i125136=$349 | 4;
   var $582=(($463+$_sum_i125136)|0);
   var $583=$582;
   HEAP32[(($583)>>2)]=$581;
   var $_sum1_i126=((($rsize_3_lcssa_i)+($349))|0);
   var $584=(($463+$_sum1_i126)|0);
   var $585=$584;
   HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
   var $586=$rsize_3_lcssa_i >>> 3;
   var $587=(($rsize_3_lcssa_i)>>>(0)) < 256;
   if ($587) { label = 136; break; } else { label = 141; break; }
  case 136: 
   var $589=$586 << 1;
   var $590=((36968+($589<<2))|0);
   var $591=$590;
   var $592=HEAP32[((((36928)|0))>>2)];
   var $593=1 << $586;
   var $594=$592 & $593;
   var $595=(($594)|(0))==0;
   if ($595) { label = 137; break; } else { label = 138; break; }
  case 137: 
   var $597=$592 | $593;
   HEAP32[((((36928)|0))>>2)]=$597;
   var $_sum15_pre_i=((($589)+(2))|0);
   var $_pre_i127=((36968+($_sum15_pre_i<<2))|0);
   var $F5_0_i = $591;var $_pre_phi_i128 = $_pre_i127;label = 140; break;
  case 138: 
   var $_sum18_i=((($589)+(2))|0);
   var $599=((36968+($_sum18_i<<2))|0);
   var $600=HEAP32[(($599)>>2)];
   var $601=$600;
   var $602=HEAP32[((((36944)|0))>>2)];
   var $603=(($601)>>>(0)) < (($602)>>>(0));
   if ($603) { label = 139; break; } else { var $F5_0_i = $600;var $_pre_phi_i128 = $599;label = 140; break; }
  case 139: 
   _abort();
   throw "Reached an unreachable!";
  case 140: 
   var $_pre_phi_i128;
   var $F5_0_i;
   HEAP32[(($_pre_phi_i128)>>2)]=$468;
   var $606=(($F5_0_i+12)|0);
   HEAP32[(($606)>>2)]=$468;
   var $_sum16_i=((($349)+(8))|0);
   var $607=(($463+$_sum16_i)|0);
   var $608=$607;
   HEAP32[(($608)>>2)]=$F5_0_i;
   var $_sum17_i=((($349)+(12))|0);
   var $609=(($463+$_sum17_i)|0);
   var $610=$609;
   HEAP32[(($610)>>2)]=$591;
   label = 159; break;
  case 141: 
   var $612=$467;
   var $613=$rsize_3_lcssa_i >>> 8;
   var $614=(($613)|(0))==0;
   if ($614) { var $I7_0_i = 0;label = 144; break; } else { label = 142; break; }
  case 142: 
   var $616=(($rsize_3_lcssa_i)>>>(0)) > 16777215;
   if ($616) { var $I7_0_i = 31;label = 144; break; } else { label = 143; break; }
  case 143: 
   var $618=((($613)+(1048320))|0);
   var $619=$618 >>> 16;
   var $620=$619 & 8;
   var $621=$613 << $620;
   var $622=((($621)+(520192))|0);
   var $623=$622 >>> 16;
   var $624=$623 & 4;
   var $625=$624 | $620;
   var $626=$621 << $624;
   var $627=((($626)+(245760))|0);
   var $628=$627 >>> 16;
   var $629=$628 & 2;
   var $630=$625 | $629;
   var $631=(((14)-($630))|0);
   var $632=$626 << $629;
   var $633=$632 >>> 15;
   var $634=((($631)+($633))|0);
   var $635=$634 << 1;
   var $636=((($634)+(7))|0);
   var $637=$rsize_3_lcssa_i >>> (($636)>>>(0));
   var $638=$637 & 1;
   var $639=$638 | $635;
   var $I7_0_i = $639;label = 144; break;
  case 144: 
   var $I7_0_i;
   var $641=((37232+($I7_0_i<<2))|0);
   var $_sum2_i=((($349)+(28))|0);
   var $642=(($463+$_sum2_i)|0);
   var $643=$642;
   HEAP32[(($643)>>2)]=$I7_0_i;
   var $_sum3_i129=((($349)+(16))|0);
   var $644=(($463+$_sum3_i129)|0);
   var $_sum4_i130=((($349)+(20))|0);
   var $645=(($463+$_sum4_i130)|0);
   var $646=$645;
   HEAP32[(($646)>>2)]=0;
   var $647=$644;
   HEAP32[(($647)>>2)]=0;
   var $648=HEAP32[((((36932)|0))>>2)];
   var $649=1 << $I7_0_i;
   var $650=$648 & $649;
   var $651=(($650)|(0))==0;
   if ($651) { label = 145; break; } else { label = 146; break; }
  case 145: 
   var $653=$648 | $649;
   HEAP32[((((36932)|0))>>2)]=$653;
   HEAP32[(($641)>>2)]=$612;
   var $654=$641;
   var $_sum5_i=((($349)+(24))|0);
   var $655=(($463+$_sum5_i)|0);
   var $656=$655;
   HEAP32[(($656)>>2)]=$654;
   var $_sum6_i=((($349)+(12))|0);
   var $657=(($463+$_sum6_i)|0);
   var $658=$657;
   HEAP32[(($658)>>2)]=$612;
   var $_sum7_i=((($349)+(8))|0);
   var $659=(($463+$_sum7_i)|0);
   var $660=$659;
   HEAP32[(($660)>>2)]=$612;
   label = 159; break;
  case 146: 
   var $662=HEAP32[(($641)>>2)];
   var $663=(($I7_0_i)|(0))==31;
   if ($663) { var $668 = 0;label = 148; break; } else { label = 147; break; }
  case 147: 
   var $665=$I7_0_i >>> 1;
   var $666=(((25)-($665))|0);
   var $668 = $666;label = 148; break;
  case 148: 
   var $668;
   var $669=$rsize_3_lcssa_i << $668;
   var $K12_0_i = $669;var $T_0_i = $662;label = 149; break;
  case 149: 
   var $T_0_i;
   var $K12_0_i;
   var $671=(($T_0_i+4)|0);
   var $672=HEAP32[(($671)>>2)];
   var $673=$672 & -8;
   var $674=(($673)|(0))==(($rsize_3_lcssa_i)|(0));
   if ($674) { label = 154; break; } else { label = 150; break; }
  case 150: 
   var $676=$K12_0_i >>> 31;
   var $677=(($T_0_i+16+($676<<2))|0);
   var $678=HEAP32[(($677)>>2)];
   var $679=(($678)|(0))==0;
   var $680=$K12_0_i << 1;
   if ($679) { label = 151; break; } else { var $K12_0_i = $680;var $T_0_i = $678;label = 149; break; }
  case 151: 
   var $682=$677;
   var $683=HEAP32[((((36944)|0))>>2)];
   var $684=(($682)>>>(0)) < (($683)>>>(0));
   if ($684) { label = 153; break; } else { label = 152; break; }
  case 152: 
   HEAP32[(($677)>>2)]=$612;
   var $_sum12_i=((($349)+(24))|0);
   var $686=(($463+$_sum12_i)|0);
   var $687=$686;
   HEAP32[(($687)>>2)]=$T_0_i;
   var $_sum13_i=((($349)+(12))|0);
   var $688=(($463+$_sum13_i)|0);
   var $689=$688;
   HEAP32[(($689)>>2)]=$612;
   var $_sum14_i=((($349)+(8))|0);
   var $690=(($463+$_sum14_i)|0);
   var $691=$690;
   HEAP32[(($691)>>2)]=$612;
   label = 159; break;
  case 153: 
   _abort();
   throw "Reached an unreachable!";
  case 154: 
   var $694=(($T_0_i+8)|0);
   var $695=HEAP32[(($694)>>2)];
   var $696=$T_0_i;
   var $697=HEAP32[((((36944)|0))>>2)];
   var $698=(($696)>>>(0)) < (($697)>>>(0));
   if ($698) { label = 157; break; } else { label = 155; break; }
  case 155: 
   var $700=$695;
   var $701=(($700)>>>(0)) < (($697)>>>(0));
   if ($701) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $703=(($695+12)|0);
   HEAP32[(($703)>>2)]=$612;
   HEAP32[(($694)>>2)]=$612;
   var $_sum9_i=((($349)+(8))|0);
   var $704=(($463+$_sum9_i)|0);
   var $705=$704;
   HEAP32[(($705)>>2)]=$695;
   var $_sum10_i=((($349)+(12))|0);
   var $706=(($463+$_sum10_i)|0);
   var $707=$706;
   HEAP32[(($707)>>2)]=$T_0_i;
   var $_sum11_i=((($349)+(24))|0);
   var $708=(($463+$_sum11_i)|0);
   var $709=$708;
   HEAP32[(($709)>>2)]=0;
   label = 159; break;
  case 157: 
   _abort();
   throw "Reached an unreachable!";
  case 158: 
   _abort();
   throw "Reached an unreachable!";
  case 159: 
   var $711=(($v_3_lcssa_i+8)|0);
   var $712=$711;
   var $713=(($711)|(0))==0;
   if ($713) { var $nb_0 = $349;label = 160; break; } else { var $mem_0 = $712;label = 341; break; }
  case 160: 
   var $nb_0;
   var $714=HEAP32[((((36936)|0))>>2)];
   var $715=(($nb_0)>>>(0)) > (($714)>>>(0));
   if ($715) { label = 165; break; } else { label = 161; break; }
  case 161: 
   var $717=((($714)-($nb_0))|0);
   var $718=HEAP32[((((36948)|0))>>2)];
   var $719=(($717)>>>(0)) > 15;
   if ($719) { label = 162; break; } else { label = 163; break; }
  case 162: 
   var $721=$718;
   var $722=(($721+$nb_0)|0);
   var $723=$722;
   HEAP32[((((36948)|0))>>2)]=$723;
   HEAP32[((((36936)|0))>>2)]=$717;
   var $724=$717 | 1;
   var $_sum102=((($nb_0)+(4))|0);
   var $725=(($721+$_sum102)|0);
   var $726=$725;
   HEAP32[(($726)>>2)]=$724;
   var $727=(($721+$714)|0);
   var $728=$727;
   HEAP32[(($728)>>2)]=$717;
   var $729=$nb_0 | 3;
   var $730=(($718+4)|0);
   HEAP32[(($730)>>2)]=$729;
   label = 164; break;
  case 163: 
   HEAP32[((((36936)|0))>>2)]=0;
   HEAP32[((((36948)|0))>>2)]=0;
   var $732=$714 | 3;
   var $733=(($718+4)|0);
   HEAP32[(($733)>>2)]=$732;
   var $734=$718;
   var $_sum101=((($714)+(4))|0);
   var $735=(($734+$_sum101)|0);
   var $736=$735;
   var $737=HEAP32[(($736)>>2)];
   var $738=$737 | 1;
   HEAP32[(($736)>>2)]=$738;
   label = 164; break;
  case 164: 
   var $740=(($718+8)|0);
   var $741=$740;
   var $mem_0 = $741;label = 341; break;
  case 165: 
   var $743=HEAP32[((((36940)|0))>>2)];
   var $744=(($nb_0)>>>(0)) < (($743)>>>(0));
   if ($744) { label = 166; break; } else { label = 167; break; }
  case 166: 
   var $746=((($743)-($nb_0))|0);
   HEAP32[((((36940)|0))>>2)]=$746;
   var $747=HEAP32[((((36952)|0))>>2)];
   var $748=$747;
   var $749=(($748+$nb_0)|0);
   var $750=$749;
   HEAP32[((((36952)|0))>>2)]=$750;
   var $751=$746 | 1;
   var $_sum=((($nb_0)+(4))|0);
   var $752=(($748+$_sum)|0);
   var $753=$752;
   HEAP32[(($753)>>2)]=$751;
   var $754=$nb_0 | 3;
   var $755=(($747+4)|0);
   HEAP32[(($755)>>2)]=$754;
   var $756=(($747+8)|0);
   var $757=$756;
   var $mem_0 = $757;label = 341; break;
  case 167: 
   var $759=HEAP32[((((27904)|0))>>2)];
   var $760=(($759)|(0))==0;
   if ($760) { label = 168; break; } else { label = 171; break; }
  case 168: 
   var $762=_sysconf(8);
   var $763=((($762)-(1))|0);
   var $764=$763 & $762;
   var $765=(($764)|(0))==0;
   if ($765) { label = 170; break; } else { label = 169; break; }
  case 169: 
   _abort();
   throw "Reached an unreachable!";
  case 170: 
   HEAP32[((((27912)|0))>>2)]=$762;
   HEAP32[((((27908)|0))>>2)]=$762;
   HEAP32[((((27916)|0))>>2)]=-1;
   HEAP32[((((27920)|0))>>2)]=2097152;
   HEAP32[((((27924)|0))>>2)]=0;
   HEAP32[((((37372)|0))>>2)]=0;
   var $767=_time(0);
   var $768=$767 & -16;
   var $769=$768 ^ 1431655768;
   HEAP32[((((27904)|0))>>2)]=$769;
   label = 171; break;
  case 171: 
   var $771=((($nb_0)+(48))|0);
   var $772=HEAP32[((((27912)|0))>>2)];
   var $773=((($nb_0)+(47))|0);
   var $774=((($772)+($773))|0);
   var $775=(((-$772))|0);
   var $776=$774 & $775;
   var $777=(($776)>>>(0)) > (($nb_0)>>>(0));
   if ($777) { label = 172; break; } else { var $mem_0 = 0;label = 341; break; }
  case 172: 
   var $779=HEAP32[((((37368)|0))>>2)];
   var $780=(($779)|(0))==0;
   if ($780) { label = 174; break; } else { label = 173; break; }
  case 173: 
   var $782=HEAP32[((((37360)|0))>>2)];
   var $783=((($782)+($776))|0);
   var $784=(($783)>>>(0)) <= (($782)>>>(0));
   var $785=(($783)>>>(0)) > (($779)>>>(0));
   var $or_cond1_i=$784 | $785;
   if ($or_cond1_i) { var $mem_0 = 0;label = 341; break; } else { label = 174; break; }
  case 174: 
   var $787=HEAP32[((((37372)|0))>>2)];
   var $788=$787 & 4;
   var $789=(($788)|(0))==0;
   if ($789) { label = 175; break; } else { var $tsize_1_i = 0;label = 198; break; }
  case 175: 
   var $791=HEAP32[((((36952)|0))>>2)];
   var $792=(($791)|(0))==0;
   if ($792) { label = 181; break; } else { label = 176; break; }
  case 176: 
   var $794=$791;
   var $sp_0_i_i = ((37376)|0);label = 177; break;
  case 177: 
   var $sp_0_i_i;
   var $796=(($sp_0_i_i)|0);
   var $797=HEAP32[(($796)>>2)];
   var $798=(($797)>>>(0)) > (($794)>>>(0));
   if ($798) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $800=(($sp_0_i_i+4)|0);
   var $801=HEAP32[(($800)>>2)];
   var $802=(($797+$801)|0);
   var $803=(($802)>>>(0)) > (($794)>>>(0));
   if ($803) { label = 180; break; } else { label = 179; break; }
  case 179: 
   var $805=(($sp_0_i_i+8)|0);
   var $806=HEAP32[(($805)>>2)];
   var $807=(($806)|(0))==0;
   if ($807) { label = 181; break; } else { var $sp_0_i_i = $806;label = 177; break; }
  case 180: 
   var $808=(($sp_0_i_i)|(0))==0;
   if ($808) { label = 181; break; } else { label = 188; break; }
  case 181: 
   var $809=_sbrk(0);
   var $810=(($809)|(0))==-1;
   if ($810) { var $tsize_0303639_i = 0;label = 197; break; } else { label = 182; break; }
  case 182: 
   var $812=$809;
   var $813=HEAP32[((((27908)|0))>>2)];
   var $814=((($813)-(1))|0);
   var $815=$814 & $812;
   var $816=(($815)|(0))==0;
   if ($816) { var $ssize_0_i = $776;label = 184; break; } else { label = 183; break; }
  case 183: 
   var $818=((($814)+($812))|0);
   var $819=(((-$813))|0);
   var $820=$818 & $819;
   var $821=((($776)-($812))|0);
   var $822=((($821)+($820))|0);
   var $ssize_0_i = $822;label = 184; break;
  case 184: 
   var $ssize_0_i;
   var $824=HEAP32[((((37360)|0))>>2)];
   var $825=((($824)+($ssize_0_i))|0);
   var $826=(($ssize_0_i)>>>(0)) > (($nb_0)>>>(0));
   var $827=(($ssize_0_i)>>>(0)) < 2147483647;
   var $or_cond_i131=$826 & $827;
   if ($or_cond_i131) { label = 185; break; } else { var $tsize_0303639_i = 0;label = 197; break; }
  case 185: 
   var $829=HEAP32[((((37368)|0))>>2)];
   var $830=(($829)|(0))==0;
   if ($830) { label = 187; break; } else { label = 186; break; }
  case 186: 
   var $832=(($825)>>>(0)) <= (($824)>>>(0));
   var $833=(($825)>>>(0)) > (($829)>>>(0));
   var $or_cond2_i=$832 | $833;
   if ($or_cond2_i) { var $tsize_0303639_i = 0;label = 197; break; } else { label = 187; break; }
  case 187: 
   var $835=_sbrk($ssize_0_i);
   var $836=(($835)|(0))==(($809)|(0));
   var $ssize_0__i=$836 ? $ssize_0_i : 0;
   var $__i=$836 ? $809 : -1;
   var $tbase_0_i = $__i;var $tsize_0_i = $ssize_0__i;var $br_0_i = $835;var $ssize_1_i = $ssize_0_i;label = 190; break;
  case 188: 
   var $838=HEAP32[((((36940)|0))>>2)];
   var $839=((($774)-($838))|0);
   var $840=$839 & $775;
   var $841=(($840)>>>(0)) < 2147483647;
   if ($841) { label = 189; break; } else { var $tsize_0303639_i = 0;label = 197; break; }
  case 189: 
   var $843=_sbrk($840);
   var $844=HEAP32[(($796)>>2)];
   var $845=HEAP32[(($800)>>2)];
   var $846=(($844+$845)|0);
   var $847=(($843)|(0))==(($846)|(0));
   var $_3_i=$847 ? $840 : 0;
   var $_4_i=$847 ? $843 : -1;
   var $tbase_0_i = $_4_i;var $tsize_0_i = $_3_i;var $br_0_i = $843;var $ssize_1_i = $840;label = 190; break;
  case 190: 
   var $ssize_1_i;
   var $br_0_i;
   var $tsize_0_i;
   var $tbase_0_i;
   var $849=(((-$ssize_1_i))|0);
   var $850=(($tbase_0_i)|(0))==-1;
   if ($850) { label = 191; break; } else { var $tsize_244_i = $tsize_0_i;var $tbase_245_i = $tbase_0_i;label = 201; break; }
  case 191: 
   var $852=(($br_0_i)|(0))!=-1;
   var $853=(($ssize_1_i)>>>(0)) < 2147483647;
   var $or_cond5_i=$852 & $853;
   var $854=(($ssize_1_i)>>>(0)) < (($771)>>>(0));
   var $or_cond6_i=$or_cond5_i & $854;
   if ($or_cond6_i) { label = 192; break; } else { var $ssize_2_i = $ssize_1_i;label = 196; break; }
  case 192: 
   var $856=HEAP32[((((27912)|0))>>2)];
   var $857=((($773)-($ssize_1_i))|0);
   var $858=((($857)+($856))|0);
   var $859=(((-$856))|0);
   var $860=$858 & $859;
   var $861=(($860)>>>(0)) < 2147483647;
   if ($861) { label = 193; break; } else { var $ssize_2_i = $ssize_1_i;label = 196; break; }
  case 193: 
   var $863=_sbrk($860);
   var $864=(($863)|(0))==-1;
   if ($864) { label = 195; break; } else { label = 194; break; }
  case 194: 
   var $866=((($860)+($ssize_1_i))|0);
   var $ssize_2_i = $866;label = 196; break;
  case 195: 
   var $868=_sbrk($849);
   var $tsize_0303639_i = $tsize_0_i;label = 197; break;
  case 196: 
   var $ssize_2_i;
   var $870=(($br_0_i)|(0))==-1;
   if ($870) { var $tsize_0303639_i = $tsize_0_i;label = 197; break; } else { var $tsize_244_i = $ssize_2_i;var $tbase_245_i = $br_0_i;label = 201; break; }
  case 197: 
   var $tsize_0303639_i;
   var $871=HEAP32[((((37372)|0))>>2)];
   var $872=$871 | 4;
   HEAP32[((((37372)|0))>>2)]=$872;
   var $tsize_1_i = $tsize_0303639_i;label = 198; break;
  case 198: 
   var $tsize_1_i;
   var $874=(($776)>>>(0)) < 2147483647;
   if ($874) { label = 199; break; } else { label = 340; break; }
  case 199: 
   var $876=_sbrk($776);
   var $877=_sbrk(0);
   var $notlhs_i=(($876)|(0))!=-1;
   var $notrhs_i=(($877)|(0))!=-1;
   var $or_cond8_not_i=$notrhs_i & $notlhs_i;
   var $878=(($876)>>>(0)) < (($877)>>>(0));
   var $or_cond9_i=$or_cond8_not_i & $878;
   if ($or_cond9_i) { label = 200; break; } else { label = 340; break; }
  case 200: 
   var $879=$877;
   var $880=$876;
   var $881=((($879)-($880))|0);
   var $882=((($nb_0)+(40))|0);
   var $883=(($881)>>>(0)) > (($882)>>>(0));
   var $_tsize_1_i=$883 ? $881 : $tsize_1_i;
   var $_tbase_1_i=$883 ? $876 : -1;
   var $884=(($_tbase_1_i)|(0))==-1;
   if ($884) { label = 340; break; } else { var $tsize_244_i = $_tsize_1_i;var $tbase_245_i = $_tbase_1_i;label = 201; break; }
  case 201: 
   var $tbase_245_i;
   var $tsize_244_i;
   var $885=HEAP32[((((37360)|0))>>2)];
   var $886=((($885)+($tsize_244_i))|0);
   HEAP32[((((37360)|0))>>2)]=$886;
   var $887=HEAP32[((((37364)|0))>>2)];
   var $888=(($886)>>>(0)) > (($887)>>>(0));
   if ($888) { label = 202; break; } else { label = 203; break; }
  case 202: 
   HEAP32[((((37364)|0))>>2)]=$886;
   label = 203; break;
  case 203: 
   var $890=HEAP32[((((36952)|0))>>2)];
   var $891=(($890)|(0))==0;
   if ($891) { label = 204; break; } else { var $sp_067_i = ((37376)|0);label = 211; break; }
  case 204: 
   var $893=HEAP32[((((36944)|0))>>2)];
   var $894=(($893)|(0))==0;
   var $895=(($tbase_245_i)>>>(0)) < (($893)>>>(0));
   var $or_cond10_i=$894 | $895;
   if ($or_cond10_i) { label = 205; break; } else { label = 206; break; }
  case 205: 
   HEAP32[((((36944)|0))>>2)]=$tbase_245_i;
   label = 206; break;
  case 206: 
   HEAP32[((((37376)|0))>>2)]=$tbase_245_i;
   HEAP32[((((37380)|0))>>2)]=$tsize_244_i;
   HEAP32[((((37388)|0))>>2)]=0;
   var $897=HEAP32[((((27904)|0))>>2)];
   HEAP32[((((36964)|0))>>2)]=$897;
   HEAP32[((((36960)|0))>>2)]=-1;
   var $i_02_i_i = 0;label = 207; break;
  case 207: 
   var $i_02_i_i;
   var $899=$i_02_i_i << 1;
   var $900=((36968+($899<<2))|0);
   var $901=$900;
   var $_sum_i_i=((($899)+(3))|0);
   var $902=((36968+($_sum_i_i<<2))|0);
   HEAP32[(($902)>>2)]=$901;
   var $_sum1_i_i=((($899)+(2))|0);
   var $903=((36968+($_sum1_i_i<<2))|0);
   HEAP32[(($903)>>2)]=$901;
   var $904=((($i_02_i_i)+(1))|0);
   var $905=(($904)>>>(0)) < 32;
   if ($905) { var $i_02_i_i = $904;label = 207; break; } else { label = 208; break; }
  case 208: 
   var $906=((($tsize_244_i)-(40))|0);
   var $907=(($tbase_245_i+8)|0);
   var $908=$907;
   var $909=$908 & 7;
   var $910=(($909)|(0))==0;
   if ($910) { var $914 = 0;label = 210; break; } else { label = 209; break; }
  case 209: 
   var $912=(((-$908))|0);
   var $913=$912 & 7;
   var $914 = $913;label = 210; break;
  case 210: 
   var $914;
   var $915=(($tbase_245_i+$914)|0);
   var $916=$915;
   var $917=((($906)-($914))|0);
   HEAP32[((((36952)|0))>>2)]=$916;
   HEAP32[((((36940)|0))>>2)]=$917;
   var $918=$917 | 1;
   var $_sum_i14_i=((($914)+(4))|0);
   var $919=(($tbase_245_i+$_sum_i14_i)|0);
   var $920=$919;
   HEAP32[(($920)>>2)]=$918;
   var $_sum2_i_i=((($tsize_244_i)-(36))|0);
   var $921=(($tbase_245_i+$_sum2_i_i)|0);
   var $922=$921;
   HEAP32[(($922)>>2)]=40;
   var $923=HEAP32[((((27920)|0))>>2)];
   HEAP32[((((36956)|0))>>2)]=$923;
   label = 338; break;
  case 211: 
   var $sp_067_i;
   var $924=(($sp_067_i)|0);
   var $925=HEAP32[(($924)>>2)];
   var $926=(($sp_067_i+4)|0);
   var $927=HEAP32[(($926)>>2)];
   var $928=(($925+$927)|0);
   var $929=(($tbase_245_i)|(0))==(($928)|(0));
   if ($929) { label = 213; break; } else { label = 212; break; }
  case 212: 
   var $931=(($sp_067_i+8)|0);
   var $932=HEAP32[(($931)>>2)];
   var $933=(($932)|(0))==0;
   if ($933) { label = 218; break; } else { var $sp_067_i = $932;label = 211; break; }
  case 213: 
   var $934=(($sp_067_i+12)|0);
   var $935=HEAP32[(($934)>>2)];
   var $936=$935 & 8;
   var $937=(($936)|(0))==0;
   if ($937) { label = 214; break; } else { label = 218; break; }
  case 214: 
   var $939=$890;
   var $940=(($939)>>>(0)) >= (($925)>>>(0));
   var $941=(($939)>>>(0)) < (($tbase_245_i)>>>(0));
   var $or_cond47_i=$940 & $941;
   if ($or_cond47_i) { label = 215; break; } else { label = 218; break; }
  case 215: 
   var $943=((($927)+($tsize_244_i))|0);
   HEAP32[(($926)>>2)]=$943;
   var $944=HEAP32[((((36952)|0))>>2)];
   var $945=HEAP32[((((36940)|0))>>2)];
   var $946=((($945)+($tsize_244_i))|0);
   var $947=$944;
   var $948=(($944+8)|0);
   var $949=$948;
   var $950=$949 & 7;
   var $951=(($950)|(0))==0;
   if ($951) { var $955 = 0;label = 217; break; } else { label = 216; break; }
  case 216: 
   var $953=(((-$949))|0);
   var $954=$953 & 7;
   var $955 = $954;label = 217; break;
  case 217: 
   var $955;
   var $956=(($947+$955)|0);
   var $957=$956;
   var $958=((($946)-($955))|0);
   HEAP32[((((36952)|0))>>2)]=$957;
   HEAP32[((((36940)|0))>>2)]=$958;
   var $959=$958 | 1;
   var $_sum_i18_i=((($955)+(4))|0);
   var $960=(($947+$_sum_i18_i)|0);
   var $961=$960;
   HEAP32[(($961)>>2)]=$959;
   var $_sum2_i19_i=((($946)+(4))|0);
   var $962=(($947+$_sum2_i19_i)|0);
   var $963=$962;
   HEAP32[(($963)>>2)]=40;
   var $964=HEAP32[((((27920)|0))>>2)];
   HEAP32[((((36956)|0))>>2)]=$964;
   label = 338; break;
  case 218: 
   var $965=HEAP32[((((36944)|0))>>2)];
   var $966=(($tbase_245_i)>>>(0)) < (($965)>>>(0));
   if ($966) { label = 219; break; } else { label = 220; break; }
  case 219: 
   HEAP32[((((36944)|0))>>2)]=$tbase_245_i;
   label = 220; break;
  case 220: 
   var $968=(($tbase_245_i+$tsize_244_i)|0);
   var $sp_160_i = ((37376)|0);label = 221; break;
  case 221: 
   var $sp_160_i;
   var $970=(($sp_160_i)|0);
   var $971=HEAP32[(($970)>>2)];
   var $972=(($971)|(0))==(($968)|(0));
   if ($972) { label = 223; break; } else { label = 222; break; }
  case 222: 
   var $974=(($sp_160_i+8)|0);
   var $975=HEAP32[(($974)>>2)];
   var $976=(($975)|(0))==0;
   if ($976) { label = 304; break; } else { var $sp_160_i = $975;label = 221; break; }
  case 223: 
   var $977=(($sp_160_i+12)|0);
   var $978=HEAP32[(($977)>>2)];
   var $979=$978 & 8;
   var $980=(($979)|(0))==0;
   if ($980) { label = 224; break; } else { label = 304; break; }
  case 224: 
   HEAP32[(($970)>>2)]=$tbase_245_i;
   var $982=(($sp_160_i+4)|0);
   var $983=HEAP32[(($982)>>2)];
   var $984=((($983)+($tsize_244_i))|0);
   HEAP32[(($982)>>2)]=$984;
   var $985=(($tbase_245_i+8)|0);
   var $986=$985;
   var $987=$986 & 7;
   var $988=(($987)|(0))==0;
   if ($988) { var $993 = 0;label = 226; break; } else { label = 225; break; }
  case 225: 
   var $990=(((-$986))|0);
   var $991=$990 & 7;
   var $993 = $991;label = 226; break;
  case 226: 
   var $993;
   var $994=(($tbase_245_i+$993)|0);
   var $_sum93_i=((($tsize_244_i)+(8))|0);
   var $995=(($tbase_245_i+$_sum93_i)|0);
   var $996=$995;
   var $997=$996 & 7;
   var $998=(($997)|(0))==0;
   if ($998) { var $1003 = 0;label = 228; break; } else { label = 227; break; }
  case 227: 
   var $1000=(((-$996))|0);
   var $1001=$1000 & 7;
   var $1003 = $1001;label = 228; break;
  case 228: 
   var $1003;
   var $_sum94_i=((($1003)+($tsize_244_i))|0);
   var $1004=(($tbase_245_i+$_sum94_i)|0);
   var $1005=$1004;
   var $1006=$1004;
   var $1007=$994;
   var $1008=((($1006)-($1007))|0);
   var $_sum_i21_i=((($993)+($nb_0))|0);
   var $1009=(($tbase_245_i+$_sum_i21_i)|0);
   var $1010=$1009;
   var $1011=((($1008)-($nb_0))|0);
   var $1012=$nb_0 | 3;
   var $_sum1_i22_i=((($993)+(4))|0);
   var $1013=(($tbase_245_i+$_sum1_i22_i)|0);
   var $1014=$1013;
   HEAP32[(($1014)>>2)]=$1012;
   var $1015=HEAP32[((((36952)|0))>>2)];
   var $1016=(($1005)|(0))==(($1015)|(0));
   if ($1016) { label = 229; break; } else { label = 230; break; }
  case 229: 
   var $1018=HEAP32[((((36940)|0))>>2)];
   var $1019=((($1018)+($1011))|0);
   HEAP32[((((36940)|0))>>2)]=$1019;
   HEAP32[((((36952)|0))>>2)]=$1010;
   var $1020=$1019 | 1;
   var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
   var $1021=(($tbase_245_i+$_sum46_i_i)|0);
   var $1022=$1021;
   HEAP32[(($1022)>>2)]=$1020;
   label = 303; break;
  case 230: 
   var $1024=HEAP32[((((36948)|0))>>2)];
   var $1025=(($1005)|(0))==(($1024)|(0));
   if ($1025) { label = 231; break; } else { label = 232; break; }
  case 231: 
   var $1027=HEAP32[((((36936)|0))>>2)];
   var $1028=((($1027)+($1011))|0);
   HEAP32[((((36936)|0))>>2)]=$1028;
   HEAP32[((((36948)|0))>>2)]=$1010;
   var $1029=$1028 | 1;
   var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
   var $1030=(($tbase_245_i+$_sum44_i_i)|0);
   var $1031=$1030;
   HEAP32[(($1031)>>2)]=$1029;
   var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
   var $1032=(($tbase_245_i+$_sum45_i_i)|0);
   var $1033=$1032;
   HEAP32[(($1033)>>2)]=$1028;
   label = 303; break;
  case 232: 
   var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
   var $_sum95_i=((($_sum2_i23_i)+($1003))|0);
   var $1035=(($tbase_245_i+$_sum95_i)|0);
   var $1036=$1035;
   var $1037=HEAP32[(($1036)>>2)];
   var $1038=$1037 & 3;
   var $1039=(($1038)|(0))==1;
   if ($1039) { label = 233; break; } else { var $oldfirst_0_i_i = $1005;var $qsize_0_i_i = $1011;label = 280; break; }
  case 233: 
   var $1041=$1037 & -8;
   var $1042=$1037 >>> 3;
   var $1043=(($1037)>>>(0)) < 256;
   if ($1043) { label = 234; break; } else { label = 246; break; }
  case 234: 
   var $_sum3940_i_i=$1003 | 8;
   var $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
   var $1045=(($tbase_245_i+$_sum105_i)|0);
   var $1046=$1045;
   var $1047=HEAP32[(($1046)>>2)];
   var $_sum41_i_i=((($tsize_244_i)+(12))|0);
   var $_sum106_i=((($_sum41_i_i)+($1003))|0);
   var $1048=(($tbase_245_i+$_sum106_i)|0);
   var $1049=$1048;
   var $1050=HEAP32[(($1049)>>2)];
   var $1051=$1042 << 1;
   var $1052=((36968+($1051<<2))|0);
   var $1053=$1052;
   var $1054=(($1047)|(0))==(($1053)|(0));
   if ($1054) { label = 237; break; } else { label = 235; break; }
  case 235: 
   var $1056=$1047;
   var $1057=HEAP32[((((36944)|0))>>2)];
   var $1058=(($1056)>>>(0)) < (($1057)>>>(0));
   if ($1058) { label = 245; break; } else { label = 236; break; }
  case 236: 
   var $1060=(($1047+12)|0);
   var $1061=HEAP32[(($1060)>>2)];
   var $1062=(($1061)|(0))==(($1005)|(0));
   if ($1062) { label = 237; break; } else { label = 245; break; }
  case 237: 
   var $1063=(($1050)|(0))==(($1047)|(0));
   if ($1063) { label = 238; break; } else { label = 239; break; }
  case 238: 
   var $1065=1 << $1042;
   var $1066=$1065 ^ -1;
   var $1067=HEAP32[((((36928)|0))>>2)];
   var $1068=$1067 & $1066;
   HEAP32[((((36928)|0))>>2)]=$1068;
   label = 279; break;
  case 239: 
   var $1070=(($1050)|(0))==(($1053)|(0));
   if ($1070) { label = 240; break; } else { label = 241; break; }
  case 240: 
   var $_pre56_i_i=(($1050+8)|0);
   var $_pre_phi57_i_i = $_pre56_i_i;label = 243; break;
  case 241: 
   var $1072=$1050;
   var $1073=HEAP32[((((36944)|0))>>2)];
   var $1074=(($1072)>>>(0)) < (($1073)>>>(0));
   if ($1074) { label = 244; break; } else { label = 242; break; }
  case 242: 
   var $1076=(($1050+8)|0);
   var $1077=HEAP32[(($1076)>>2)];
   var $1078=(($1077)|(0))==(($1005)|(0));
   if ($1078) { var $_pre_phi57_i_i = $1076;label = 243; break; } else { label = 244; break; }
  case 243: 
   var $_pre_phi57_i_i;
   var $1079=(($1047+12)|0);
   HEAP32[(($1079)>>2)]=$1050;
   HEAP32[(($_pre_phi57_i_i)>>2)]=$1047;
   label = 279; break;
  case 244: 
   _abort();
   throw "Reached an unreachable!";
  case 245: 
   _abort();
   throw "Reached an unreachable!";
  case 246: 
   var $1081=$1004;
   var $_sum34_i_i=$1003 | 24;
   var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
   var $1082=(($tbase_245_i+$_sum96_i)|0);
   var $1083=$1082;
   var $1084=HEAP32[(($1083)>>2)];
   var $_sum5_i_i=((($tsize_244_i)+(12))|0);
   var $_sum97_i=((($_sum5_i_i)+($1003))|0);
   var $1085=(($tbase_245_i+$_sum97_i)|0);
   var $1086=$1085;
   var $1087=HEAP32[(($1086)>>2)];
   var $1088=(($1087)|(0))==(($1081)|(0));
   if ($1088) { label = 252; break; } else { label = 247; break; }
  case 247: 
   var $_sum3637_i_i=$1003 | 8;
   var $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
   var $1090=(($tbase_245_i+$_sum98_i)|0);
   var $1091=$1090;
   var $1092=HEAP32[(($1091)>>2)];
   var $1093=$1092;
   var $1094=HEAP32[((((36944)|0))>>2)];
   var $1095=(($1093)>>>(0)) < (($1094)>>>(0));
   if ($1095) { label = 251; break; } else { label = 248; break; }
  case 248: 
   var $1097=(($1092+12)|0);
   var $1098=HEAP32[(($1097)>>2)];
   var $1099=(($1098)|(0))==(($1081)|(0));
   if ($1099) { label = 249; break; } else { label = 251; break; }
  case 249: 
   var $1101=(($1087+8)|0);
   var $1102=HEAP32[(($1101)>>2)];
   var $1103=(($1102)|(0))==(($1081)|(0));
   if ($1103) { label = 250; break; } else { label = 251; break; }
  case 250: 
   HEAP32[(($1097)>>2)]=$1087;
   HEAP32[(($1101)>>2)]=$1092;
   var $R_1_i_i = $1087;label = 259; break;
  case 251: 
   _abort();
   throw "Reached an unreachable!";
  case 252: 
   var $_sum67_i_i=$1003 | 16;
   var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
   var $1106=(($tbase_245_i+$_sum103_i)|0);
   var $1107=$1106;
   var $1108=HEAP32[(($1107)>>2)];
   var $1109=(($1108)|(0))==0;
   if ($1109) { label = 253; break; } else { var $R_0_i_i = $1108;var $RP_0_i_i = $1107;label = 254; break; }
  case 253: 
   var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
   var $1111=(($tbase_245_i+$_sum104_i)|0);
   var $1112=$1111;
   var $1113=HEAP32[(($1112)>>2)];
   var $1114=(($1113)|(0))==0;
   if ($1114) { var $R_1_i_i = 0;label = 259; break; } else { var $R_0_i_i = $1113;var $RP_0_i_i = $1112;label = 254; break; }
  case 254: 
   var $RP_0_i_i;
   var $R_0_i_i;
   var $1115=(($R_0_i_i+20)|0);
   var $1116=HEAP32[(($1115)>>2)];
   var $1117=(($1116)|(0))==0;
   if ($1117) { label = 255; break; } else { var $R_0_i_i = $1116;var $RP_0_i_i = $1115;label = 254; break; }
  case 255: 
   var $1119=(($R_0_i_i+16)|0);
   var $1120=HEAP32[(($1119)>>2)];
   var $1121=(($1120)|(0))==0;
   if ($1121) { label = 256; break; } else { var $R_0_i_i = $1120;var $RP_0_i_i = $1119;label = 254; break; }
  case 256: 
   var $1123=$RP_0_i_i;
   var $1124=HEAP32[((((36944)|0))>>2)];
   var $1125=(($1123)>>>(0)) < (($1124)>>>(0));
   if ($1125) { label = 258; break; } else { label = 257; break; }
  case 257: 
   HEAP32[(($RP_0_i_i)>>2)]=0;
   var $R_1_i_i = $R_0_i_i;label = 259; break;
  case 258: 
   _abort();
   throw "Reached an unreachable!";
  case 259: 
   var $R_1_i_i;
   var $1129=(($1084)|(0))==0;
   if ($1129) { label = 279; break; } else { label = 260; break; }
  case 260: 
   var $_sum31_i_i=((($tsize_244_i)+(28))|0);
   var $_sum99_i=((($_sum31_i_i)+($1003))|0);
   var $1131=(($tbase_245_i+$_sum99_i)|0);
   var $1132=$1131;
   var $1133=HEAP32[(($1132)>>2)];
   var $1134=((37232+($1133<<2))|0);
   var $1135=HEAP32[(($1134)>>2)];
   var $1136=(($1081)|(0))==(($1135)|(0));
   if ($1136) { label = 261; break; } else { label = 263; break; }
  case 261: 
   HEAP32[(($1134)>>2)]=$R_1_i_i;
   var $cond_i_i=(($R_1_i_i)|(0))==0;
   if ($cond_i_i) { label = 262; break; } else { label = 269; break; }
  case 262: 
   var $1138=HEAP32[(($1132)>>2)];
   var $1139=1 << $1138;
   var $1140=$1139 ^ -1;
   var $1141=HEAP32[((((36932)|0))>>2)];
   var $1142=$1141 & $1140;
   HEAP32[((((36932)|0))>>2)]=$1142;
   label = 279; break;
  case 263: 
   var $1144=$1084;
   var $1145=HEAP32[((((36944)|0))>>2)];
   var $1146=(($1144)>>>(0)) < (($1145)>>>(0));
   if ($1146) { label = 267; break; } else { label = 264; break; }
  case 264: 
   var $1148=(($1084+16)|0);
   var $1149=HEAP32[(($1148)>>2)];
   var $1150=(($1149)|(0))==(($1081)|(0));
   if ($1150) { label = 265; break; } else { label = 266; break; }
  case 265: 
   HEAP32[(($1148)>>2)]=$R_1_i_i;
   label = 268; break;
  case 266: 
   var $1153=(($1084+20)|0);
   HEAP32[(($1153)>>2)]=$R_1_i_i;
   label = 268; break;
  case 267: 
   _abort();
   throw "Reached an unreachable!";
  case 268: 
   var $1156=(($R_1_i_i)|(0))==0;
   if ($1156) { label = 279; break; } else { label = 269; break; }
  case 269: 
   var $1158=$R_1_i_i;
   var $1159=HEAP32[((((36944)|0))>>2)];
   var $1160=(($1158)>>>(0)) < (($1159)>>>(0));
   if ($1160) { label = 278; break; } else { label = 270; break; }
  case 270: 
   var $1162=(($R_1_i_i+24)|0);
   HEAP32[(($1162)>>2)]=$1084;
   var $_sum3233_i_i=$1003 | 16;
   var $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
   var $1163=(($tbase_245_i+$_sum100_i)|0);
   var $1164=$1163;
   var $1165=HEAP32[(($1164)>>2)];
   var $1166=(($1165)|(0))==0;
   if ($1166) { label = 274; break; } else { label = 271; break; }
  case 271: 
   var $1168=$1165;
   var $1169=HEAP32[((((36944)|0))>>2)];
   var $1170=(($1168)>>>(0)) < (($1169)>>>(0));
   if ($1170) { label = 273; break; } else { label = 272; break; }
  case 272: 
   var $1172=(($R_1_i_i+16)|0);
   HEAP32[(($1172)>>2)]=$1165;
   var $1173=(($1165+24)|0);
   HEAP32[(($1173)>>2)]=$R_1_i_i;
   label = 274; break;
  case 273: 
   _abort();
   throw "Reached an unreachable!";
  case 274: 
   var $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
   var $1176=(($tbase_245_i+$_sum101_i)|0);
   var $1177=$1176;
   var $1178=HEAP32[(($1177)>>2)];
   var $1179=(($1178)|(0))==0;
   if ($1179) { label = 279; break; } else { label = 275; break; }
  case 275: 
   var $1181=$1178;
   var $1182=HEAP32[((((36944)|0))>>2)];
   var $1183=(($1181)>>>(0)) < (($1182)>>>(0));
   if ($1183) { label = 277; break; } else { label = 276; break; }
  case 276: 
   var $1185=(($R_1_i_i+20)|0);
   HEAP32[(($1185)>>2)]=$1178;
   var $1186=(($1178+24)|0);
   HEAP32[(($1186)>>2)]=$R_1_i_i;
   label = 279; break;
  case 277: 
   _abort();
   throw "Reached an unreachable!";
  case 278: 
   _abort();
   throw "Reached an unreachable!";
  case 279: 
   var $_sum9_i_i=$1041 | $1003;
   var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
   var $1190=(($tbase_245_i+$_sum102_i)|0);
   var $1191=$1190;
   var $1192=((($1041)+($1011))|0);
   var $oldfirst_0_i_i = $1191;var $qsize_0_i_i = $1192;label = 280; break;
  case 280: 
   var $qsize_0_i_i;
   var $oldfirst_0_i_i;
   var $1194=(($oldfirst_0_i_i+4)|0);
   var $1195=HEAP32[(($1194)>>2)];
   var $1196=$1195 & -2;
   HEAP32[(($1194)>>2)]=$1196;
   var $1197=$qsize_0_i_i | 1;
   var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
   var $1198=(($tbase_245_i+$_sum10_i_i)|0);
   var $1199=$1198;
   HEAP32[(($1199)>>2)]=$1197;
   var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
   var $1200=(($tbase_245_i+$_sum11_i_i)|0);
   var $1201=$1200;
   HEAP32[(($1201)>>2)]=$qsize_0_i_i;
   var $1202=$qsize_0_i_i >>> 3;
   var $1203=(($qsize_0_i_i)>>>(0)) < 256;
   if ($1203) { label = 281; break; } else { label = 286; break; }
  case 281: 
   var $1205=$1202 << 1;
   var $1206=((36968+($1205<<2))|0);
   var $1207=$1206;
   var $1208=HEAP32[((((36928)|0))>>2)];
   var $1209=1 << $1202;
   var $1210=$1208 & $1209;
   var $1211=(($1210)|(0))==0;
   if ($1211) { label = 282; break; } else { label = 283; break; }
  case 282: 
   var $1213=$1208 | $1209;
   HEAP32[((((36928)|0))>>2)]=$1213;
   var $_sum27_pre_i_i=((($1205)+(2))|0);
   var $_pre_i24_i=((36968+($_sum27_pre_i_i<<2))|0);
   var $F4_0_i_i = $1207;var $_pre_phi_i25_i = $_pre_i24_i;label = 285; break;
  case 283: 
   var $_sum30_i_i=((($1205)+(2))|0);
   var $1215=((36968+($_sum30_i_i<<2))|0);
   var $1216=HEAP32[(($1215)>>2)];
   var $1217=$1216;
   var $1218=HEAP32[((((36944)|0))>>2)];
   var $1219=(($1217)>>>(0)) < (($1218)>>>(0));
   if ($1219) { label = 284; break; } else { var $F4_0_i_i = $1216;var $_pre_phi_i25_i = $1215;label = 285; break; }
  case 284: 
   _abort();
   throw "Reached an unreachable!";
  case 285: 
   var $_pre_phi_i25_i;
   var $F4_0_i_i;
   HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
   var $1222=(($F4_0_i_i+12)|0);
   HEAP32[(($1222)>>2)]=$1010;
   var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
   var $1223=(($tbase_245_i+$_sum28_i_i)|0);
   var $1224=$1223;
   HEAP32[(($1224)>>2)]=$F4_0_i_i;
   var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
   var $1225=(($tbase_245_i+$_sum29_i_i)|0);
   var $1226=$1225;
   HEAP32[(($1226)>>2)]=$1207;
   label = 303; break;
  case 286: 
   var $1228=$1009;
   var $1229=$qsize_0_i_i >>> 8;
   var $1230=(($1229)|(0))==0;
   if ($1230) { var $I7_0_i_i = 0;label = 289; break; } else { label = 287; break; }
  case 287: 
   var $1232=(($qsize_0_i_i)>>>(0)) > 16777215;
   if ($1232) { var $I7_0_i_i = 31;label = 289; break; } else { label = 288; break; }
  case 288: 
   var $1234=((($1229)+(1048320))|0);
   var $1235=$1234 >>> 16;
   var $1236=$1235 & 8;
   var $1237=$1229 << $1236;
   var $1238=((($1237)+(520192))|0);
   var $1239=$1238 >>> 16;
   var $1240=$1239 & 4;
   var $1241=$1240 | $1236;
   var $1242=$1237 << $1240;
   var $1243=((($1242)+(245760))|0);
   var $1244=$1243 >>> 16;
   var $1245=$1244 & 2;
   var $1246=$1241 | $1245;
   var $1247=(((14)-($1246))|0);
   var $1248=$1242 << $1245;
   var $1249=$1248 >>> 15;
   var $1250=((($1247)+($1249))|0);
   var $1251=$1250 << 1;
   var $1252=((($1250)+(7))|0);
   var $1253=$qsize_0_i_i >>> (($1252)>>>(0));
   var $1254=$1253 & 1;
   var $1255=$1254 | $1251;
   var $I7_0_i_i = $1255;label = 289; break;
  case 289: 
   var $I7_0_i_i;
   var $1257=((37232+($I7_0_i_i<<2))|0);
   var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
   var $1258=(($tbase_245_i+$_sum12_i26_i)|0);
   var $1259=$1258;
   HEAP32[(($1259)>>2)]=$I7_0_i_i;
   var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
   var $1260=(($tbase_245_i+$_sum13_i_i)|0);
   var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
   var $1261=(($tbase_245_i+$_sum14_i_i)|0);
   var $1262=$1261;
   HEAP32[(($1262)>>2)]=0;
   var $1263=$1260;
   HEAP32[(($1263)>>2)]=0;
   var $1264=HEAP32[((((36932)|0))>>2)];
   var $1265=1 << $I7_0_i_i;
   var $1266=$1264 & $1265;
   var $1267=(($1266)|(0))==0;
   if ($1267) { label = 290; break; } else { label = 291; break; }
  case 290: 
   var $1269=$1264 | $1265;
   HEAP32[((((36932)|0))>>2)]=$1269;
   HEAP32[(($1257)>>2)]=$1228;
   var $1270=$1257;
   var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
   var $1271=(($tbase_245_i+$_sum15_i_i)|0);
   var $1272=$1271;
   HEAP32[(($1272)>>2)]=$1270;
   var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
   var $1273=(($tbase_245_i+$_sum16_i_i)|0);
   var $1274=$1273;
   HEAP32[(($1274)>>2)]=$1228;
   var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
   var $1275=(($tbase_245_i+$_sum17_i_i)|0);
   var $1276=$1275;
   HEAP32[(($1276)>>2)]=$1228;
   label = 303; break;
  case 291: 
   var $1278=HEAP32[(($1257)>>2)];
   var $1279=(($I7_0_i_i)|(0))==31;
   if ($1279) { var $1284 = 0;label = 293; break; } else { label = 292; break; }
  case 292: 
   var $1281=$I7_0_i_i >>> 1;
   var $1282=(((25)-($1281))|0);
   var $1284 = $1282;label = 293; break;
  case 293: 
   var $1284;
   var $1285=$qsize_0_i_i << $1284;
   var $K8_0_i_i = $1285;var $T_0_i27_i = $1278;label = 294; break;
  case 294: 
   var $T_0_i27_i;
   var $K8_0_i_i;
   var $1287=(($T_0_i27_i+4)|0);
   var $1288=HEAP32[(($1287)>>2)];
   var $1289=$1288 & -8;
   var $1290=(($1289)|(0))==(($qsize_0_i_i)|(0));
   if ($1290) { label = 299; break; } else { label = 295; break; }
  case 295: 
   var $1292=$K8_0_i_i >>> 31;
   var $1293=(($T_0_i27_i+16+($1292<<2))|0);
   var $1294=HEAP32[(($1293)>>2)];
   var $1295=(($1294)|(0))==0;
   var $1296=$K8_0_i_i << 1;
   if ($1295) { label = 296; break; } else { var $K8_0_i_i = $1296;var $T_0_i27_i = $1294;label = 294; break; }
  case 296: 
   var $1298=$1293;
   var $1299=HEAP32[((((36944)|0))>>2)];
   var $1300=(($1298)>>>(0)) < (($1299)>>>(0));
   if ($1300) { label = 298; break; } else { label = 297; break; }
  case 297: 
   HEAP32[(($1293)>>2)]=$1228;
   var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
   var $1302=(($tbase_245_i+$_sum24_i_i)|0);
   var $1303=$1302;
   HEAP32[(($1303)>>2)]=$T_0_i27_i;
   var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
   var $1304=(($tbase_245_i+$_sum25_i_i)|0);
   var $1305=$1304;
   HEAP32[(($1305)>>2)]=$1228;
   var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
   var $1306=(($tbase_245_i+$_sum26_i_i)|0);
   var $1307=$1306;
   HEAP32[(($1307)>>2)]=$1228;
   label = 303; break;
  case 298: 
   _abort();
   throw "Reached an unreachable!";
  case 299: 
   var $1310=(($T_0_i27_i+8)|0);
   var $1311=HEAP32[(($1310)>>2)];
   var $1312=$T_0_i27_i;
   var $1313=HEAP32[((((36944)|0))>>2)];
   var $1314=(($1312)>>>(0)) < (($1313)>>>(0));
   if ($1314) { label = 302; break; } else { label = 300; break; }
  case 300: 
   var $1316=$1311;
   var $1317=(($1316)>>>(0)) < (($1313)>>>(0));
   if ($1317) { label = 302; break; } else { label = 301; break; }
  case 301: 
   var $1319=(($1311+12)|0);
   HEAP32[(($1319)>>2)]=$1228;
   HEAP32[(($1310)>>2)]=$1228;
   var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
   var $1320=(($tbase_245_i+$_sum21_i_i)|0);
   var $1321=$1320;
   HEAP32[(($1321)>>2)]=$1311;
   var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
   var $1322=(($tbase_245_i+$_sum22_i_i)|0);
   var $1323=$1322;
   HEAP32[(($1323)>>2)]=$T_0_i27_i;
   var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
   var $1324=(($tbase_245_i+$_sum23_i_i)|0);
   var $1325=$1324;
   HEAP32[(($1325)>>2)]=0;
   label = 303; break;
  case 302: 
   _abort();
   throw "Reached an unreachable!";
  case 303: 
   var $_sum1819_i_i=$993 | 8;
   var $1326=(($tbase_245_i+$_sum1819_i_i)|0);
   var $mem_0 = $1326;label = 341; break;
  case 304: 
   var $1327=$890;
   var $sp_0_i_i_i = ((37376)|0);label = 305; break;
  case 305: 
   var $sp_0_i_i_i;
   var $1329=(($sp_0_i_i_i)|0);
   var $1330=HEAP32[(($1329)>>2)];
   var $1331=(($1330)>>>(0)) > (($1327)>>>(0));
   if ($1331) { label = 307; break; } else { label = 306; break; }
  case 306: 
   var $1333=(($sp_0_i_i_i+4)|0);
   var $1334=HEAP32[(($1333)>>2)];
   var $1335=(($1330+$1334)|0);
   var $1336=(($1335)>>>(0)) > (($1327)>>>(0));
   if ($1336) { label = 308; break; } else { label = 307; break; }
  case 307: 
   var $1338=(($sp_0_i_i_i+8)|0);
   var $1339=HEAP32[(($1338)>>2)];
   var $sp_0_i_i_i = $1339;label = 305; break;
  case 308: 
   var $_sum_i15_i=((($1334)-(47))|0);
   var $_sum1_i16_i=((($1334)-(39))|0);
   var $1340=(($1330+$_sum1_i16_i)|0);
   var $1341=$1340;
   var $1342=$1341 & 7;
   var $1343=(($1342)|(0))==0;
   if ($1343) { var $1348 = 0;label = 310; break; } else { label = 309; break; }
  case 309: 
   var $1345=(((-$1341))|0);
   var $1346=$1345 & 7;
   var $1348 = $1346;label = 310; break;
  case 310: 
   var $1348;
   var $_sum2_i17_i=((($_sum_i15_i)+($1348))|0);
   var $1349=(($1330+$_sum2_i17_i)|0);
   var $1350=(($890+16)|0);
   var $1351=$1350;
   var $1352=(($1349)>>>(0)) < (($1351)>>>(0));
   var $1353=$1352 ? $1327 : $1349;
   var $1354=(($1353+8)|0);
   var $1355=$1354;
   var $1356=((($tsize_244_i)-(40))|0);
   var $1357=(($tbase_245_i+8)|0);
   var $1358=$1357;
   var $1359=$1358 & 7;
   var $1360=(($1359)|(0))==0;
   if ($1360) { var $1364 = 0;label = 312; break; } else { label = 311; break; }
  case 311: 
   var $1362=(((-$1358))|0);
   var $1363=$1362 & 7;
   var $1364 = $1363;label = 312; break;
  case 312: 
   var $1364;
   var $1365=(($tbase_245_i+$1364)|0);
   var $1366=$1365;
   var $1367=((($1356)-($1364))|0);
   HEAP32[((((36952)|0))>>2)]=$1366;
   HEAP32[((((36940)|0))>>2)]=$1367;
   var $1368=$1367 | 1;
   var $_sum_i_i_i=((($1364)+(4))|0);
   var $1369=(($tbase_245_i+$_sum_i_i_i)|0);
   var $1370=$1369;
   HEAP32[(($1370)>>2)]=$1368;
   var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
   var $1371=(($tbase_245_i+$_sum2_i_i_i)|0);
   var $1372=$1371;
   HEAP32[(($1372)>>2)]=40;
   var $1373=HEAP32[((((27920)|0))>>2)];
   HEAP32[((((36956)|0))>>2)]=$1373;
   var $1374=(($1353+4)|0);
   var $1375=$1374;
   HEAP32[(($1375)>>2)]=27;
   assert(16 % 1 === 0);HEAP32[(($1354)>>2)]=HEAP32[(((((37376)|0)))>>2)];HEAP32[((($1354)+(4))>>2)]=HEAP32[((((((37376)|0)))+(4))>>2)];HEAP32[((($1354)+(8))>>2)]=HEAP32[((((((37376)|0)))+(8))>>2)];HEAP32[((($1354)+(12))>>2)]=HEAP32[((((((37376)|0)))+(12))>>2)];
   HEAP32[((((37376)|0))>>2)]=$tbase_245_i;
   HEAP32[((((37380)|0))>>2)]=$tsize_244_i;
   HEAP32[((((37388)|0))>>2)]=0;
   HEAP32[((((37384)|0))>>2)]=$1355;
   var $1376=(($1353+28)|0);
   var $1377=$1376;
   HEAP32[(($1377)>>2)]=7;
   var $1378=(($1353+32)|0);
   var $1379=(($1378)>>>(0)) < (($1335)>>>(0));
   if ($1379) { var $1380 = $1377;label = 313; break; } else { label = 314; break; }
  case 313: 
   var $1380;
   var $1381=(($1380+4)|0);
   HEAP32[(($1381)>>2)]=7;
   var $1382=(($1380+8)|0);
   var $1383=$1382;
   var $1384=(($1383)>>>(0)) < (($1335)>>>(0));
   if ($1384) { var $1380 = $1381;label = 313; break; } else { label = 314; break; }
  case 314: 
   var $1385=(($1353)|(0))==(($1327)|(0));
   if ($1385) { label = 338; break; } else { label = 315; break; }
  case 315: 
   var $1387=$1353;
   var $1388=$890;
   var $1389=((($1387)-($1388))|0);
   var $1390=(($1327+$1389)|0);
   var $_sum3_i_i=((($1389)+(4))|0);
   var $1391=(($1327+$_sum3_i_i)|0);
   var $1392=$1391;
   var $1393=HEAP32[(($1392)>>2)];
   var $1394=$1393 & -2;
   HEAP32[(($1392)>>2)]=$1394;
   var $1395=$1389 | 1;
   var $1396=(($890+4)|0);
   HEAP32[(($1396)>>2)]=$1395;
   var $1397=$1390;
   HEAP32[(($1397)>>2)]=$1389;
   var $1398=$1389 >>> 3;
   var $1399=(($1389)>>>(0)) < 256;
   if ($1399) { label = 316; break; } else { label = 321; break; }
  case 316: 
   var $1401=$1398 << 1;
   var $1402=((36968+($1401<<2))|0);
   var $1403=$1402;
   var $1404=HEAP32[((((36928)|0))>>2)];
   var $1405=1 << $1398;
   var $1406=$1404 & $1405;
   var $1407=(($1406)|(0))==0;
   if ($1407) { label = 317; break; } else { label = 318; break; }
  case 317: 
   var $1409=$1404 | $1405;
   HEAP32[((((36928)|0))>>2)]=$1409;
   var $_sum11_pre_i_i=((($1401)+(2))|0);
   var $_pre_i_i=((36968+($_sum11_pre_i_i<<2))|0);
   var $F_0_i_i = $1403;var $_pre_phi_i_i = $_pre_i_i;label = 320; break;
  case 318: 
   var $_sum12_i_i=((($1401)+(2))|0);
   var $1411=((36968+($_sum12_i_i<<2))|0);
   var $1412=HEAP32[(($1411)>>2)];
   var $1413=$1412;
   var $1414=HEAP32[((((36944)|0))>>2)];
   var $1415=(($1413)>>>(0)) < (($1414)>>>(0));
   if ($1415) { label = 319; break; } else { var $F_0_i_i = $1412;var $_pre_phi_i_i = $1411;label = 320; break; }
  case 319: 
   _abort();
   throw "Reached an unreachable!";
  case 320: 
   var $_pre_phi_i_i;
   var $F_0_i_i;
   HEAP32[(($_pre_phi_i_i)>>2)]=$890;
   var $1418=(($F_0_i_i+12)|0);
   HEAP32[(($1418)>>2)]=$890;
   var $1419=(($890+8)|0);
   HEAP32[(($1419)>>2)]=$F_0_i_i;
   var $1420=(($890+12)|0);
   HEAP32[(($1420)>>2)]=$1403;
   label = 338; break;
  case 321: 
   var $1422=$890;
   var $1423=$1389 >>> 8;
   var $1424=(($1423)|(0))==0;
   if ($1424) { var $I1_0_i_i = 0;label = 324; break; } else { label = 322; break; }
  case 322: 
   var $1426=(($1389)>>>(0)) > 16777215;
   if ($1426) { var $I1_0_i_i = 31;label = 324; break; } else { label = 323; break; }
  case 323: 
   var $1428=((($1423)+(1048320))|0);
   var $1429=$1428 >>> 16;
   var $1430=$1429 & 8;
   var $1431=$1423 << $1430;
   var $1432=((($1431)+(520192))|0);
   var $1433=$1432 >>> 16;
   var $1434=$1433 & 4;
   var $1435=$1434 | $1430;
   var $1436=$1431 << $1434;
   var $1437=((($1436)+(245760))|0);
   var $1438=$1437 >>> 16;
   var $1439=$1438 & 2;
   var $1440=$1435 | $1439;
   var $1441=(((14)-($1440))|0);
   var $1442=$1436 << $1439;
   var $1443=$1442 >>> 15;
   var $1444=((($1441)+($1443))|0);
   var $1445=$1444 << 1;
   var $1446=((($1444)+(7))|0);
   var $1447=$1389 >>> (($1446)>>>(0));
   var $1448=$1447 & 1;
   var $1449=$1448 | $1445;
   var $I1_0_i_i = $1449;label = 324; break;
  case 324: 
   var $I1_0_i_i;
   var $1451=((37232+($I1_0_i_i<<2))|0);
   var $1452=(($890+28)|0);
   var $I1_0_c_i_i=$I1_0_i_i;
   HEAP32[(($1452)>>2)]=$I1_0_c_i_i;
   var $1453=(($890+20)|0);
   HEAP32[(($1453)>>2)]=0;
   var $1454=(($890+16)|0);
   HEAP32[(($1454)>>2)]=0;
   var $1455=HEAP32[((((36932)|0))>>2)];
   var $1456=1 << $I1_0_i_i;
   var $1457=$1455 & $1456;
   var $1458=(($1457)|(0))==0;
   if ($1458) { label = 325; break; } else { label = 326; break; }
  case 325: 
   var $1460=$1455 | $1456;
   HEAP32[((((36932)|0))>>2)]=$1460;
   HEAP32[(($1451)>>2)]=$1422;
   var $1461=(($890+24)|0);
   var $_c_i_i=$1451;
   HEAP32[(($1461)>>2)]=$_c_i_i;
   var $1462=(($890+12)|0);
   HEAP32[(($1462)>>2)]=$890;
   var $1463=(($890+8)|0);
   HEAP32[(($1463)>>2)]=$890;
   label = 338; break;
  case 326: 
   var $1465=HEAP32[(($1451)>>2)];
   var $1466=(($I1_0_i_i)|(0))==31;
   if ($1466) { var $1471 = 0;label = 328; break; } else { label = 327; break; }
  case 327: 
   var $1468=$I1_0_i_i >>> 1;
   var $1469=(((25)-($1468))|0);
   var $1471 = $1469;label = 328; break;
  case 328: 
   var $1471;
   var $1472=$1389 << $1471;
   var $K2_0_i_i = $1472;var $T_0_i_i = $1465;label = 329; break;
  case 329: 
   var $T_0_i_i;
   var $K2_0_i_i;
   var $1474=(($T_0_i_i+4)|0);
   var $1475=HEAP32[(($1474)>>2)];
   var $1476=$1475 & -8;
   var $1477=(($1476)|(0))==(($1389)|(0));
   if ($1477) { label = 334; break; } else { label = 330; break; }
  case 330: 
   var $1479=$K2_0_i_i >>> 31;
   var $1480=(($T_0_i_i+16+($1479<<2))|0);
   var $1481=HEAP32[(($1480)>>2)];
   var $1482=(($1481)|(0))==0;
   var $1483=$K2_0_i_i << 1;
   if ($1482) { label = 331; break; } else { var $K2_0_i_i = $1483;var $T_0_i_i = $1481;label = 329; break; }
  case 331: 
   var $1485=$1480;
   var $1486=HEAP32[((((36944)|0))>>2)];
   var $1487=(($1485)>>>(0)) < (($1486)>>>(0));
   if ($1487) { label = 333; break; } else { label = 332; break; }
  case 332: 
   HEAP32[(($1480)>>2)]=$1422;
   var $1489=(($890+24)|0);
   var $T_0_c8_i_i=$T_0_i_i;
   HEAP32[(($1489)>>2)]=$T_0_c8_i_i;
   var $1490=(($890+12)|0);
   HEAP32[(($1490)>>2)]=$890;
   var $1491=(($890+8)|0);
   HEAP32[(($1491)>>2)]=$890;
   label = 338; break;
  case 333: 
   _abort();
   throw "Reached an unreachable!";
  case 334: 
   var $1494=(($T_0_i_i+8)|0);
   var $1495=HEAP32[(($1494)>>2)];
   var $1496=$T_0_i_i;
   var $1497=HEAP32[((((36944)|0))>>2)];
   var $1498=(($1496)>>>(0)) < (($1497)>>>(0));
   if ($1498) { label = 337; break; } else { label = 335; break; }
  case 335: 
   var $1500=$1495;
   var $1501=(($1500)>>>(0)) < (($1497)>>>(0));
   if ($1501) { label = 337; break; } else { label = 336; break; }
  case 336: 
   var $1503=(($1495+12)|0);
   HEAP32[(($1503)>>2)]=$1422;
   HEAP32[(($1494)>>2)]=$1422;
   var $1504=(($890+8)|0);
   var $_c7_i_i=$1495;
   HEAP32[(($1504)>>2)]=$_c7_i_i;
   var $1505=(($890+12)|0);
   var $T_0_c_i_i=$T_0_i_i;
   HEAP32[(($1505)>>2)]=$T_0_c_i_i;
   var $1506=(($890+24)|0);
   HEAP32[(($1506)>>2)]=0;
   label = 338; break;
  case 337: 
   _abort();
   throw "Reached an unreachable!";
  case 338: 
   var $1507=HEAP32[((((36940)|0))>>2)];
   var $1508=(($1507)>>>(0)) > (($nb_0)>>>(0));
   if ($1508) { label = 339; break; } else { label = 340; break; }
  case 339: 
   var $1510=((($1507)-($nb_0))|0);
   HEAP32[((((36940)|0))>>2)]=$1510;
   var $1511=HEAP32[((((36952)|0))>>2)];
   var $1512=$1511;
   var $1513=(($1512+$nb_0)|0);
   var $1514=$1513;
   HEAP32[((((36952)|0))>>2)]=$1514;
   var $1515=$1510 | 1;
   var $_sum_i134=((($nb_0)+(4))|0);
   var $1516=(($1512+$_sum_i134)|0);
   var $1517=$1516;
   HEAP32[(($1517)>>2)]=$1515;
   var $1518=$nb_0 | 3;
   var $1519=(($1511+4)|0);
   HEAP32[(($1519)>>2)]=$1518;
   var $1520=(($1511+8)|0);
   var $1521=$1520;
   var $mem_0 = $1521;label = 341; break;
  case 340: 
   var $1522=___errno_location();
   HEAP32[(($1522)>>2)]=12;
   var $mem_0 = 0;label = 341; break;
  case 341: 
   var $mem_0;
   return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($mem)|(0))==0;
   if ($1) { label = 142; break; } else { label = 2; break; }
  case 2: 
   var $3=((($mem)-(8))|0);
   var $4=$3;
   var $5=HEAP32[((((36944)|0))>>2)];
   var $6=(($3)>>>(0)) < (($5)>>>(0));
   if ($6) { label = 141; break; } else { label = 3; break; }
  case 3: 
   var $8=((($mem)-(4))|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & 3;
   var $12=(($11)|(0))==1;
   if ($12) { label = 141; break; } else { label = 4; break; }
  case 4: 
   var $14=$10 & -8;
   var $_sum=((($14)-(8))|0);
   var $15=(($mem+$_sum)|0);
   var $16=$15;
   var $17=$10 & 1;
   var $18=(($17)|(0))==0;
   if ($18) { label = 5; break; } else { var $p_0 = $4;var $psize_0 = $14;label = 56; break; }
  case 5: 
   var $20=$3;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($11)|(0))==0;
   if ($22) { label = 142; break; } else { label = 6; break; }
  case 6: 
   var $_sum233=(((-8)-($21))|0);
   var $24=(($mem+$_sum233)|0);
   var $25=$24;
   var $26=((($21)+($14))|0);
   var $27=(($24)>>>(0)) < (($5)>>>(0));
   if ($27) { label = 141; break; } else { label = 7; break; }
  case 7: 
   var $29=HEAP32[((((36948)|0))>>2)];
   var $30=(($25)|(0))==(($29)|(0));
   if ($30) { label = 54; break; } else { label = 8; break; }
  case 8: 
   var $32=$21 >>> 3;
   var $33=(($21)>>>(0)) < 256;
   if ($33) { label = 9; break; } else { label = 21; break; }
  case 9: 
   var $_sum277=((($_sum233)+(8))|0);
   var $35=(($mem+$_sum277)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $_sum278=((($_sum233)+(12))|0);
   var $38=(($mem+$_sum278)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=$32 << 1;
   var $42=((36968+($41<<2))|0);
   var $43=$42;
   var $44=(($37)|(0))==(($43)|(0));
   if ($44) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $46=$37;
   var $47=(($46)>>>(0)) < (($5)>>>(0));
   if ($47) { label = 20; break; } else { label = 11; break; }
  case 11: 
   var $49=(($37+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==(($25)|(0));
   if ($51) { label = 12; break; } else { label = 20; break; }
  case 12: 
   var $52=(($40)|(0))==(($37)|(0));
   if ($52) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $54=1 << $32;
   var $55=$54 ^ -1;
   var $56=HEAP32[((((36928)|0))>>2)];
   var $57=$56 & $55;
   HEAP32[((((36928)|0))>>2)]=$57;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 14: 
   var $59=(($40)|(0))==(($43)|(0));
   if ($59) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $_pre306=(($40+8)|0);
   var $_pre_phi307 = $_pre306;label = 18; break;
  case 16: 
   var $61=$40;
   var $62=(($61)>>>(0)) < (($5)>>>(0));
   if ($62) { label = 19; break; } else { label = 17; break; }
  case 17: 
   var $64=(($40+8)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65)|(0))==(($25)|(0));
   if ($66) { var $_pre_phi307 = $64;label = 18; break; } else { label = 19; break; }
  case 18: 
   var $_pre_phi307;
   var $67=(($37+12)|0);
   HEAP32[(($67)>>2)]=$40;
   HEAP32[(($_pre_phi307)>>2)]=$37;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 19: 
   _abort();
   throw "Reached an unreachable!";
  case 20: 
   _abort();
   throw "Reached an unreachable!";
  case 21: 
   var $69=$24;
   var $_sum267=((($_sum233)+(24))|0);
   var $70=(($mem+$_sum267)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $_sum268=((($_sum233)+(12))|0);
   var $73=(($mem+$_sum268)|0);
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75)|(0))==(($69)|(0));
   if ($76) { label = 27; break; } else { label = 22; break; }
  case 22: 
   var $_sum274=((($_sum233)+(8))|0);
   var $78=(($mem+$_sum274)|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=$80;
   var $82=(($81)>>>(0)) < (($5)>>>(0));
   if ($82) { label = 26; break; } else { label = 23; break; }
  case 23: 
   var $84=(($80+12)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))==(($69)|(0));
   if ($86) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $88=(($75+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89)|(0))==(($69)|(0));
   if ($90) { label = 25; break; } else { label = 26; break; }
  case 25: 
   HEAP32[(($84)>>2)]=$75;
   HEAP32[(($88)>>2)]=$80;
   var $R_1 = $75;label = 34; break;
  case 26: 
   _abort();
   throw "Reached an unreachable!";
  case 27: 
   var $_sum270=((($_sum233)+(20))|0);
   var $93=(($mem+$_sum270)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 28; break; } else { var $R_0 = $95;var $RP_0 = $94;label = 29; break; }
  case 28: 
   var $_sum269=((($_sum233)+(16))|0);
   var $98=(($mem+$_sum269)|0);
   var $99=$98;
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100)|(0))==0;
   if ($101) { var $R_1 = 0;label = 34; break; } else { var $R_0 = $100;var $RP_0 = $99;label = 29; break; }
  case 29: 
   var $RP_0;
   var $R_0;
   var $102=(($R_0+20)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0))==0;
   if ($104) { label = 30; break; } else { var $R_0 = $103;var $RP_0 = $102;label = 29; break; }
  case 30: 
   var $106=(($R_0+16)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))==0;
   if ($108) { label = 31; break; } else { var $R_0 = $107;var $RP_0 = $106;label = 29; break; }
  case 31: 
   var $110=$RP_0;
   var $111=(($110)>>>(0)) < (($5)>>>(0));
   if ($111) { label = 33; break; } else { label = 32; break; }
  case 32: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 34; break;
  case 33: 
   _abort();
   throw "Reached an unreachable!";
  case 34: 
   var $R_1;
   var $115=(($72)|(0))==0;
   if ($115) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 35; break; }
  case 35: 
   var $_sum271=((($_sum233)+(28))|0);
   var $117=(($mem+$_sum271)|0);
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=((37232+($119<<2))|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($69)|(0))==(($121)|(0));
   if ($122) { label = 36; break; } else { label = 38; break; }
  case 36: 
   HEAP32[(($120)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 37; break; } else { label = 44; break; }
  case 37: 
   var $124=HEAP32[(($118)>>2)];
   var $125=1 << $124;
   var $126=$125 ^ -1;
   var $127=HEAP32[((((36932)|0))>>2)];
   var $128=$127 & $126;
   HEAP32[((((36932)|0))>>2)]=$128;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 38: 
   var $130=$72;
   var $131=HEAP32[((((36944)|0))>>2)];
   var $132=(($130)>>>(0)) < (($131)>>>(0));
   if ($132) { label = 42; break; } else { label = 39; break; }
  case 39: 
   var $134=(($72+16)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135)|(0))==(($69)|(0));
   if ($136) { label = 40; break; } else { label = 41; break; }
  case 40: 
   HEAP32[(($134)>>2)]=$R_1;
   label = 43; break;
  case 41: 
   var $139=(($72+20)|0);
   HEAP32[(($139)>>2)]=$R_1;
   label = 43; break;
  case 42: 
   _abort();
   throw "Reached an unreachable!";
  case 43: 
   var $142=(($R_1)|(0))==0;
   if ($142) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 44; break; }
  case 44: 
   var $144=$R_1;
   var $145=HEAP32[((((36944)|0))>>2)];
   var $146=(($144)>>>(0)) < (($145)>>>(0));
   if ($146) { label = 53; break; } else { label = 45; break; }
  case 45: 
   var $148=(($R_1+24)|0);
   HEAP32[(($148)>>2)]=$72;
   var $_sum272=((($_sum233)+(16))|0);
   var $149=(($mem+$_sum272)|0);
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151)|(0))==0;
   if ($152) { label = 49; break; } else { label = 46; break; }
  case 46: 
   var $154=$151;
   var $155=HEAP32[((((36944)|0))>>2)];
   var $156=(($154)>>>(0)) < (($155)>>>(0));
   if ($156) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $158=(($R_1+16)|0);
   HEAP32[(($158)>>2)]=$151;
   var $159=(($151+24)|0);
   HEAP32[(($159)>>2)]=$R_1;
   label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   var $_sum273=((($_sum233)+(20))|0);
   var $162=(($mem+$_sum273)|0);
   var $163=$162;
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|(0))==0;
   if ($165) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 50; break; }
  case 50: 
   var $167=$164;
   var $168=HEAP32[((((36944)|0))>>2)];
   var $169=(($167)>>>(0)) < (($168)>>>(0));
   if ($169) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $171=(($R_1+20)|0);
   HEAP32[(($171)>>2)]=$164;
   var $172=(($164+24)|0);
   HEAP32[(($172)>>2)]=$R_1;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 52: 
   _abort();
   throw "Reached an unreachable!";
  case 53: 
   _abort();
   throw "Reached an unreachable!";
  case 54: 
   var $_sum234=((($14)-(4))|0);
   var $176=(($mem+$_sum234)|0);
   var $177=$176;
   var $178=HEAP32[(($177)>>2)];
   var $179=$178 & 3;
   var $180=(($179)|(0))==3;
   if ($180) { label = 55; break; } else { var $p_0 = $25;var $psize_0 = $26;label = 56; break; }
  case 55: 
   HEAP32[((((36936)|0))>>2)]=$26;
   var $182=HEAP32[(($177)>>2)];
   var $183=$182 & -2;
   HEAP32[(($177)>>2)]=$183;
   var $184=$26 | 1;
   var $_sum265=((($_sum233)+(4))|0);
   var $185=(($mem+$_sum265)|0);
   var $186=$185;
   HEAP32[(($186)>>2)]=$184;
   var $187=$15;
   HEAP32[(($187)>>2)]=$26;
   label = 142; break;
  case 56: 
   var $psize_0;
   var $p_0;
   var $189=$p_0;
   var $190=(($189)>>>(0)) < (($15)>>>(0));
   if ($190) { label = 57; break; } else { label = 141; break; }
  case 57: 
   var $_sum264=((($14)-(4))|0);
   var $192=(($mem+$_sum264)|0);
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=$194 & 1;
   var $phitmp=(($195)|(0))==0;
   if ($phitmp) { label = 141; break; } else { label = 58; break; }
  case 58: 
   var $197=$194 & 2;
   var $198=(($197)|(0))==0;
   if ($198) { label = 59; break; } else { label = 114; break; }
  case 59: 
   var $200=HEAP32[((((36952)|0))>>2)];
   var $201=(($16)|(0))==(($200)|(0));
   if ($201) { label = 60; break; } else { label = 64; break; }
  case 60: 
   var $203=HEAP32[((((36940)|0))>>2)];
   var $204=((($203)+($psize_0))|0);
   HEAP32[((((36940)|0))>>2)]=$204;
   HEAP32[((((36952)|0))>>2)]=$p_0;
   var $205=$204 | 1;
   var $206=(($p_0+4)|0);
   HEAP32[(($206)>>2)]=$205;
   var $207=HEAP32[((((36948)|0))>>2)];
   var $208=(($p_0)|(0))==(($207)|(0));
   if ($208) { label = 61; break; } else { label = 62; break; }
  case 61: 
   HEAP32[((((36948)|0))>>2)]=0;
   HEAP32[((((36936)|0))>>2)]=0;
   label = 62; break;
  case 62: 
   var $211=HEAP32[((((36956)|0))>>2)];
   var $212=(($204)>>>(0)) > (($211)>>>(0));
   if ($212) { label = 63; break; } else { label = 142; break; }
  case 63: 
   var $214=_sys_trim(0);
   label = 142; break;
  case 64: 
   var $216=HEAP32[((((36948)|0))>>2)];
   var $217=(($16)|(0))==(($216)|(0));
   if ($217) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $219=HEAP32[((((36936)|0))>>2)];
   var $220=((($219)+($psize_0))|0);
   HEAP32[((((36936)|0))>>2)]=$220;
   HEAP32[((((36948)|0))>>2)]=$p_0;
   var $221=$220 | 1;
   var $222=(($p_0+4)|0);
   HEAP32[(($222)>>2)]=$221;
   var $223=(($189+$220)|0);
   var $224=$223;
   HEAP32[(($224)>>2)]=$220;
   label = 142; break;
  case 66: 
   var $226=$194 & -8;
   var $227=((($226)+($psize_0))|0);
   var $228=$194 >>> 3;
   var $229=(($194)>>>(0)) < 256;
   if ($229) { label = 67; break; } else { label = 79; break; }
  case 67: 
   var $231=(($mem+$14)|0);
   var $232=$231;
   var $233=HEAP32[(($232)>>2)];
   var $_sum258259=$14 | 4;
   var $234=(($mem+$_sum258259)|0);
   var $235=$234;
   var $236=HEAP32[(($235)>>2)];
   var $237=$228 << 1;
   var $238=((36968+($237<<2))|0);
   var $239=$238;
   var $240=(($233)|(0))==(($239)|(0));
   if ($240) { label = 70; break; } else { label = 68; break; }
  case 68: 
   var $242=$233;
   var $243=HEAP32[((((36944)|0))>>2)];
   var $244=(($242)>>>(0)) < (($243)>>>(0));
   if ($244) { label = 78; break; } else { label = 69; break; }
  case 69: 
   var $246=(($233+12)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=(($247)|(0))==(($16)|(0));
   if ($248) { label = 70; break; } else { label = 78; break; }
  case 70: 
   var $249=(($236)|(0))==(($233)|(0));
   if ($249) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $251=1 << $228;
   var $252=$251 ^ -1;
   var $253=HEAP32[((((36928)|0))>>2)];
   var $254=$253 & $252;
   HEAP32[((((36928)|0))>>2)]=$254;
   label = 112; break;
  case 72: 
   var $256=(($236)|(0))==(($239)|(0));
   if ($256) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $_pre304=(($236+8)|0);
   var $_pre_phi305 = $_pre304;label = 76; break;
  case 74: 
   var $258=$236;
   var $259=HEAP32[((((36944)|0))>>2)];
   var $260=(($258)>>>(0)) < (($259)>>>(0));
   if ($260) { label = 77; break; } else { label = 75; break; }
  case 75: 
   var $262=(($236+8)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=(($263)|(0))==(($16)|(0));
   if ($264) { var $_pre_phi305 = $262;label = 76; break; } else { label = 77; break; }
  case 76: 
   var $_pre_phi305;
   var $265=(($233+12)|0);
   HEAP32[(($265)>>2)]=$236;
   HEAP32[(($_pre_phi305)>>2)]=$233;
   label = 112; break;
  case 77: 
   _abort();
   throw "Reached an unreachable!";
  case 78: 
   _abort();
   throw "Reached an unreachable!";
  case 79: 
   var $267=$15;
   var $_sum236=((($14)+(16))|0);
   var $268=(($mem+$_sum236)|0);
   var $269=$268;
   var $270=HEAP32[(($269)>>2)];
   var $_sum237238=$14 | 4;
   var $271=(($mem+$_sum237238)|0);
   var $272=$271;
   var $273=HEAP32[(($272)>>2)];
   var $274=(($273)|(0))==(($267)|(0));
   if ($274) { label = 85; break; } else { label = 80; break; }
  case 80: 
   var $276=(($mem+$14)|0);
   var $277=$276;
   var $278=HEAP32[(($277)>>2)];
   var $279=$278;
   var $280=HEAP32[((((36944)|0))>>2)];
   var $281=(($279)>>>(0)) < (($280)>>>(0));
   if ($281) { label = 84; break; } else { label = 81; break; }
  case 81: 
   var $283=(($278+12)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($284)|(0))==(($267)|(0));
   if ($285) { label = 82; break; } else { label = 84; break; }
  case 82: 
   var $287=(($273+8)|0);
   var $288=HEAP32[(($287)>>2)];
   var $289=(($288)|(0))==(($267)|(0));
   if ($289) { label = 83; break; } else { label = 84; break; }
  case 83: 
   HEAP32[(($283)>>2)]=$273;
   HEAP32[(($287)>>2)]=$278;
   var $R7_1 = $273;label = 92; break;
  case 84: 
   _abort();
   throw "Reached an unreachable!";
  case 85: 
   var $_sum240=((($14)+(12))|0);
   var $292=(($mem+$_sum240)|0);
   var $293=$292;
   var $294=HEAP32[(($293)>>2)];
   var $295=(($294)|(0))==0;
   if ($295) { label = 86; break; } else { var $R7_0 = $294;var $RP9_0 = $293;label = 87; break; }
  case 86: 
   var $_sum239=((($14)+(8))|0);
   var $297=(($mem+$_sum239)|0);
   var $298=$297;
   var $299=HEAP32[(($298)>>2)];
   var $300=(($299)|(0))==0;
   if ($300) { var $R7_1 = 0;label = 92; break; } else { var $R7_0 = $299;var $RP9_0 = $298;label = 87; break; }
  case 87: 
   var $RP9_0;
   var $R7_0;
   var $301=(($R7_0+20)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=(($302)|(0))==0;
   if ($303) { label = 88; break; } else { var $R7_0 = $302;var $RP9_0 = $301;label = 87; break; }
  case 88: 
   var $305=(($R7_0+16)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306)|(0))==0;
   if ($307) { label = 89; break; } else { var $R7_0 = $306;var $RP9_0 = $305;label = 87; break; }
  case 89: 
   var $309=$RP9_0;
   var $310=HEAP32[((((36944)|0))>>2)];
   var $311=(($309)>>>(0)) < (($310)>>>(0));
   if ($311) { label = 91; break; } else { label = 90; break; }
  case 90: 
   HEAP32[(($RP9_0)>>2)]=0;
   var $R7_1 = $R7_0;label = 92; break;
  case 91: 
   _abort();
   throw "Reached an unreachable!";
  case 92: 
   var $R7_1;
   var $315=(($270)|(0))==0;
   if ($315) { label = 112; break; } else { label = 93; break; }
  case 93: 
   var $_sum251=((($14)+(20))|0);
   var $317=(($mem+$_sum251)|0);
   var $318=$317;
   var $319=HEAP32[(($318)>>2)];
   var $320=((37232+($319<<2))|0);
   var $321=HEAP32[(($320)>>2)];
   var $322=(($267)|(0))==(($321)|(0));
   if ($322) { label = 94; break; } else { label = 96; break; }
  case 94: 
   HEAP32[(($320)>>2)]=$R7_1;
   var $cond299=(($R7_1)|(0))==0;
   if ($cond299) { label = 95; break; } else { label = 102; break; }
  case 95: 
   var $324=HEAP32[(($318)>>2)];
   var $325=1 << $324;
   var $326=$325 ^ -1;
   var $327=HEAP32[((((36932)|0))>>2)];
   var $328=$327 & $326;
   HEAP32[((((36932)|0))>>2)]=$328;
   label = 112; break;
  case 96: 
   var $330=$270;
   var $331=HEAP32[((((36944)|0))>>2)];
   var $332=(($330)>>>(0)) < (($331)>>>(0));
   if ($332) { label = 100; break; } else { label = 97; break; }
  case 97: 
   var $334=(($270+16)|0);
   var $335=HEAP32[(($334)>>2)];
   var $336=(($335)|(0))==(($267)|(0));
   if ($336) { label = 98; break; } else { label = 99; break; }
  case 98: 
   HEAP32[(($334)>>2)]=$R7_1;
   label = 101; break;
  case 99: 
   var $339=(($270+20)|0);
   HEAP32[(($339)>>2)]=$R7_1;
   label = 101; break;
  case 100: 
   _abort();
   throw "Reached an unreachable!";
  case 101: 
   var $342=(($R7_1)|(0))==0;
   if ($342) { label = 112; break; } else { label = 102; break; }
  case 102: 
   var $344=$R7_1;
   var $345=HEAP32[((((36944)|0))>>2)];
   var $346=(($344)>>>(0)) < (($345)>>>(0));
   if ($346) { label = 111; break; } else { label = 103; break; }
  case 103: 
   var $348=(($R7_1+24)|0);
   HEAP32[(($348)>>2)]=$270;
   var $_sum252=((($14)+(8))|0);
   var $349=(($mem+$_sum252)|0);
   var $350=$349;
   var $351=HEAP32[(($350)>>2)];
   var $352=(($351)|(0))==0;
   if ($352) { label = 107; break; } else { label = 104; break; }
  case 104: 
   var $354=$351;
   var $355=HEAP32[((((36944)|0))>>2)];
   var $356=(($354)>>>(0)) < (($355)>>>(0));
   if ($356) { label = 106; break; } else { label = 105; break; }
  case 105: 
   var $358=(($R7_1+16)|0);
   HEAP32[(($358)>>2)]=$351;
   var $359=(($351+24)|0);
   HEAP32[(($359)>>2)]=$R7_1;
   label = 107; break;
  case 106: 
   _abort();
   throw "Reached an unreachable!";
  case 107: 
   var $_sum253=((($14)+(12))|0);
   var $362=(($mem+$_sum253)|0);
   var $363=$362;
   var $364=HEAP32[(($363)>>2)];
   var $365=(($364)|(0))==0;
   if ($365) { label = 112; break; } else { label = 108; break; }
  case 108: 
   var $367=$364;
   var $368=HEAP32[((((36944)|0))>>2)];
   var $369=(($367)>>>(0)) < (($368)>>>(0));
   if ($369) { label = 110; break; } else { label = 109; break; }
  case 109: 
   var $371=(($R7_1+20)|0);
   HEAP32[(($371)>>2)]=$364;
   var $372=(($364+24)|0);
   HEAP32[(($372)>>2)]=$R7_1;
   label = 112; break;
  case 110: 
   _abort();
   throw "Reached an unreachable!";
  case 111: 
   _abort();
   throw "Reached an unreachable!";
  case 112: 
   var $376=$227 | 1;
   var $377=(($p_0+4)|0);
   HEAP32[(($377)>>2)]=$376;
   var $378=(($189+$227)|0);
   var $379=$378;
   HEAP32[(($379)>>2)]=$227;
   var $380=HEAP32[((((36948)|0))>>2)];
   var $381=(($p_0)|(0))==(($380)|(0));
   if ($381) { label = 113; break; } else { var $psize_1 = $227;label = 115; break; }
  case 113: 
   HEAP32[((((36936)|0))>>2)]=$227;
   label = 142; break;
  case 114: 
   var $384=$194 & -2;
   HEAP32[(($193)>>2)]=$384;
   var $385=$psize_0 | 1;
   var $386=(($p_0+4)|0);
   HEAP32[(($386)>>2)]=$385;
   var $387=(($189+$psize_0)|0);
   var $388=$387;
   HEAP32[(($388)>>2)]=$psize_0;
   var $psize_1 = $psize_0;label = 115; break;
  case 115: 
   var $psize_1;
   var $390=$psize_1 >>> 3;
   var $391=(($psize_1)>>>(0)) < 256;
   if ($391) { label = 116; break; } else { label = 121; break; }
  case 116: 
   var $393=$390 << 1;
   var $394=((36968+($393<<2))|0);
   var $395=$394;
   var $396=HEAP32[((((36928)|0))>>2)];
   var $397=1 << $390;
   var $398=$396 & $397;
   var $399=(($398)|(0))==0;
   if ($399) { label = 117; break; } else { label = 118; break; }
  case 117: 
   var $401=$396 | $397;
   HEAP32[((((36928)|0))>>2)]=$401;
   var $_sum249_pre=((($393)+(2))|0);
   var $_pre=((36968+($_sum249_pre<<2))|0);
   var $F16_0 = $395;var $_pre_phi = $_pre;label = 120; break;
  case 118: 
   var $_sum250=((($393)+(2))|0);
   var $403=((36968+($_sum250<<2))|0);
   var $404=HEAP32[(($403)>>2)];
   var $405=$404;
   var $406=HEAP32[((((36944)|0))>>2)];
   var $407=(($405)>>>(0)) < (($406)>>>(0));
   if ($407) { label = 119; break; } else { var $F16_0 = $404;var $_pre_phi = $403;label = 120; break; }
  case 119: 
   _abort();
   throw "Reached an unreachable!";
  case 120: 
   var $_pre_phi;
   var $F16_0;
   HEAP32[(($_pre_phi)>>2)]=$p_0;
   var $410=(($F16_0+12)|0);
   HEAP32[(($410)>>2)]=$p_0;
   var $411=(($p_0+8)|0);
   HEAP32[(($411)>>2)]=$F16_0;
   var $412=(($p_0+12)|0);
   HEAP32[(($412)>>2)]=$395;
   label = 142; break;
  case 121: 
   var $414=$p_0;
   var $415=$psize_1 >>> 8;
   var $416=(($415)|(0))==0;
   if ($416) { var $I18_0 = 0;label = 124; break; } else { label = 122; break; }
  case 122: 
   var $418=(($psize_1)>>>(0)) > 16777215;
   if ($418) { var $I18_0 = 31;label = 124; break; } else { label = 123; break; }
  case 123: 
   var $420=((($415)+(1048320))|0);
   var $421=$420 >>> 16;
   var $422=$421 & 8;
   var $423=$415 << $422;
   var $424=((($423)+(520192))|0);
   var $425=$424 >>> 16;
   var $426=$425 & 4;
   var $427=$426 | $422;
   var $428=$423 << $426;
   var $429=((($428)+(245760))|0);
   var $430=$429 >>> 16;
   var $431=$430 & 2;
   var $432=$427 | $431;
   var $433=(((14)-($432))|0);
   var $434=$428 << $431;
   var $435=$434 >>> 15;
   var $436=((($433)+($435))|0);
   var $437=$436 << 1;
   var $438=((($436)+(7))|0);
   var $439=$psize_1 >>> (($438)>>>(0));
   var $440=$439 & 1;
   var $441=$440 | $437;
   var $I18_0 = $441;label = 124; break;
  case 124: 
   var $I18_0;
   var $443=((37232+($I18_0<<2))|0);
   var $444=(($p_0+28)|0);
   var $I18_0_c=$I18_0;
   HEAP32[(($444)>>2)]=$I18_0_c;
   var $445=(($p_0+20)|0);
   HEAP32[(($445)>>2)]=0;
   var $446=(($p_0+16)|0);
   HEAP32[(($446)>>2)]=0;
   var $447=HEAP32[((((36932)|0))>>2)];
   var $448=1 << $I18_0;
   var $449=$447 & $448;
   var $450=(($449)|(0))==0;
   if ($450) { label = 125; break; } else { label = 126; break; }
  case 125: 
   var $452=$447 | $448;
   HEAP32[((((36932)|0))>>2)]=$452;
   HEAP32[(($443)>>2)]=$414;
   var $453=(($p_0+24)|0);
   var $_c=$443;
   HEAP32[(($453)>>2)]=$_c;
   var $454=(($p_0+12)|0);
   HEAP32[(($454)>>2)]=$p_0;
   var $455=(($p_0+8)|0);
   HEAP32[(($455)>>2)]=$p_0;
   label = 138; break;
  case 126: 
   var $457=HEAP32[(($443)>>2)];
   var $458=(($I18_0)|(0))==31;
   if ($458) { var $463 = 0;label = 128; break; } else { label = 127; break; }
  case 127: 
   var $460=$I18_0 >>> 1;
   var $461=(((25)-($460))|0);
   var $463 = $461;label = 128; break;
  case 128: 
   var $463;
   var $464=$psize_1 << $463;
   var $K19_0 = $464;var $T_0 = $457;label = 129; break;
  case 129: 
   var $T_0;
   var $K19_0;
   var $466=(($T_0+4)|0);
   var $467=HEAP32[(($466)>>2)];
   var $468=$467 & -8;
   var $469=(($468)|(0))==(($psize_1)|(0));
   if ($469) { label = 134; break; } else { label = 130; break; }
  case 130: 
   var $471=$K19_0 >>> 31;
   var $472=(($T_0+16+($471<<2))|0);
   var $473=HEAP32[(($472)>>2)];
   var $474=(($473)|(0))==0;
   var $475=$K19_0 << 1;
   if ($474) { label = 131; break; } else { var $K19_0 = $475;var $T_0 = $473;label = 129; break; }
  case 131: 
   var $477=$472;
   var $478=HEAP32[((((36944)|0))>>2)];
   var $479=(($477)>>>(0)) < (($478)>>>(0));
   if ($479) { label = 133; break; } else { label = 132; break; }
  case 132: 
   HEAP32[(($472)>>2)]=$414;
   var $481=(($p_0+24)|0);
   var $T_0_c246=$T_0;
   HEAP32[(($481)>>2)]=$T_0_c246;
   var $482=(($p_0+12)|0);
   HEAP32[(($482)>>2)]=$p_0;
   var $483=(($p_0+8)|0);
   HEAP32[(($483)>>2)]=$p_0;
   label = 138; break;
  case 133: 
   _abort();
   throw "Reached an unreachable!";
  case 134: 
   var $486=(($T_0+8)|0);
   var $487=HEAP32[(($486)>>2)];
   var $488=$T_0;
   var $489=HEAP32[((((36944)|0))>>2)];
   var $490=(($488)>>>(0)) < (($489)>>>(0));
   if ($490) { label = 137; break; } else { label = 135; break; }
  case 135: 
   var $492=$487;
   var $493=(($492)>>>(0)) < (($489)>>>(0));
   if ($493) { label = 137; break; } else { label = 136; break; }
  case 136: 
   var $495=(($487+12)|0);
   HEAP32[(($495)>>2)]=$414;
   HEAP32[(($486)>>2)]=$414;
   var $496=(($p_0+8)|0);
   var $_c245=$487;
   HEAP32[(($496)>>2)]=$_c245;
   var $497=(($p_0+12)|0);
   var $T_0_c=$T_0;
   HEAP32[(($497)>>2)]=$T_0_c;
   var $498=(($p_0+24)|0);
   HEAP32[(($498)>>2)]=0;
   label = 138; break;
  case 137: 
   _abort();
   throw "Reached an unreachable!";
  case 138: 
   var $500=HEAP32[((((36960)|0))>>2)];
   var $501=((($500)-(1))|0);
   HEAP32[((((36960)|0))>>2)]=$501;
   var $502=(($501)|(0))==0;
   if ($502) { var $sp_0_in_i = ((37384)|0);label = 139; break; } else { label = 142; break; }
  case 139: 
   var $sp_0_in_i;
   var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
   var $503=(($sp_0_i)|(0))==0;
   var $504=(($sp_0_i+8)|0);
   if ($503) { label = 140; break; } else { var $sp_0_in_i = $504;label = 139; break; }
  case 140: 
   HEAP32[((((36960)|0))>>2)]=-1;
   label = 142; break;
  case 141: 
   _abort();
   throw "Reached an unreachable!";
  case 142: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function __ZNSt9bad_allocD2Ev($this) {
 var label = 0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 var label = 0;
 return ((10816)|0);
}
function __ZdlPv($ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($ptr)|(0))==0;
   if ($1) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _free($ptr);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZdaPv($ptr) {
 var label = 0;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 var label = 0;
 var $1=$this;
 __ZdlPv($1);
 return;
}
function _sys_trim($pad) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((27904)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((27912)|0))>>2)]=$4;
   HEAP32[((((27908)|0))>>2)]=$4;
   HEAP32[((((27916)|0))>>2)]=-1;
   HEAP32[((((27920)|0))>>2)]=2097152;
   HEAP32[((((27924)|0))>>2)]=0;
   HEAP32[((((37372)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((27904)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=(($pad)>>>(0)) < 4294967232;
   if ($13) { label = 6; break; } else { var $released_2 = 0;label = 21; break; }
  case 6: 
   var $15=HEAP32[((((36952)|0))>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { var $released_2 = 0;label = 21; break; } else { label = 7; break; }
  case 7: 
   var $18=((($pad)+(40))|0);
   var $19=HEAP32[((((36940)|0))>>2)];
   var $20=(($19)>>>(0)) > (($18)>>>(0));
   if ($20) { label = 8; break; } else { label = 19; break; }
  case 8: 
   var $22=HEAP32[((((27912)|0))>>2)];
   var $_neg=(((-40)-($pad))|0);
   var $23=((($_neg)-(1))|0);
   var $24=((($23)+($19))|0);
   var $25=((($24)+($22))|0);
   var $26=((((($25)>>>(0)))/((($22)>>>(0))))&-1);
   var $27=((($26)-(1))|0);
   var $28=(Math.imul($27,$22)|0);
   var $29=$15;
   var $sp_0_i = ((37376)|0);label = 9; break;
  case 9: 
   var $sp_0_i;
   var $31=(($sp_0_i)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)>>>(0)) > (($29)>>>(0));
   if ($33) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $35=(($sp_0_i+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($32+$36)|0);
   var $38=(($37)>>>(0)) > (($29)>>>(0));
   if ($38) { var $_0_i = $sp_0_i;label = 12; break; } else { label = 11; break; }
  case 11: 
   var $40=(($sp_0_i+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))==0;
   if ($42) { var $_0_i = 0;label = 12; break; } else { var $sp_0_i = $41;label = 9; break; }
  case 12: 
   var $_0_i;
   var $43=(($_0_i+12)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$44 & 8;
   var $46=(($45)|(0))==0;
   if ($46) { label = 13; break; } else { label = 19; break; }
  case 13: 
   var $48=_sbrk(0);
   var $49=(($_0_i)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($_0_i+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($50+$52)|0);
   var $54=(($48)|(0))==(($53)|(0));
   if ($54) { label = 14; break; } else { label = 19; break; }
  case 14: 
   var $56=(((-2147483648)-($22))|0);
   var $57=(($28)>>>(0)) > 2147483646;
   var $_=$57 ? $56 : $28;
   var $58=(((-$_))|0);
   var $59=_sbrk($58);
   var $60=_sbrk(0);
   var $61=(($59)|(0))!=-1;
   var $62=(($60)>>>(0)) < (($48)>>>(0));
   var $or_cond=$61 & $62;
   if ($or_cond) { label = 15; break; } else { label = 19; break; }
  case 15: 
   var $64=$48;
   var $65=$60;
   var $66=((($64)-($65))|0);
   var $67=(($48)|(0))==(($60)|(0));
   if ($67) { label = 19; break; } else { label = 16; break; }
  case 16: 
   var $69=HEAP32[(($51)>>2)];
   var $70=((($69)-($66))|0);
   HEAP32[(($51)>>2)]=$70;
   var $71=HEAP32[((((37360)|0))>>2)];
   var $72=((($71)-($66))|0);
   HEAP32[((((37360)|0))>>2)]=$72;
   var $73=HEAP32[((((36952)|0))>>2)];
   var $74=HEAP32[((((36940)|0))>>2)];
   var $75=((($74)-($66))|0);
   var $76=$73;
   var $77=(($73+8)|0);
   var $78=$77;
   var $79=$78 & 7;
   var $80=(($79)|(0))==0;
   if ($80) { var $85 = 0;label = 18; break; } else { label = 17; break; }
  case 17: 
   var $82=(((-$78))|0);
   var $83=$82 & 7;
   var $85 = $83;label = 18; break;
  case 18: 
   var $85;
   var $86=(($76+$85)|0);
   var $87=$86;
   var $88=((($75)-($85))|0);
   HEAP32[((((36952)|0))>>2)]=$87;
   HEAP32[((((36940)|0))>>2)]=$88;
   var $89=$88 | 1;
   var $_sum_i=((($85)+(4))|0);
   var $90=(($76+$_sum_i)|0);
   var $91=$90;
   HEAP32[(($91)>>2)]=$89;
   var $_sum2_i=((($75)+(4))|0);
   var $92=(($76+$_sum2_i)|0);
   var $93=$92;
   HEAP32[(($93)>>2)]=40;
   var $94=HEAP32[((((27920)|0))>>2)];
   HEAP32[((((36956)|0))>>2)]=$94;
   var $phitmp=(($48)|(0))!=(($60)|(0));
   var $phitmp8=(($phitmp)&(1));
   var $released_2 = $phitmp8;label = 21; break;
  case 19: 
   var $95=HEAP32[((((36940)|0))>>2)];
   var $96=HEAP32[((((36956)|0))>>2)];
   var $97=(($95)>>>(0)) > (($96)>>>(0));
   if ($97) { label = 20; break; } else { var $released_2 = 0;label = 21; break; }
  case 20: 
   HEAP32[((((36956)|0))>>2)]=-1;
   var $released_2 = 0;label = 21; break;
  case 21: 
   var $released_2;
   return $released_2;
  default: assert(0, "bad label: " + label);
 }
}
function __Znwj($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($size)|(0))==0;
   var $_size=$1 ? 1 : $size;
   label = 2; break;
  case 2: 
   var $3=_malloc($_size);
   var $4=(($3)|(0))==0;
   if ($4) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $6=(tempValue=HEAP32[((38904)>>2)],HEAP32[((38904)>>2)]=tempValue+0,tempValue);
   var $7=(($6)|(0))==0;
   if ($7) { label = 9; break; } else { label = 4; break; }
  case 4: 
   var $9=$6;
   (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 5; break; }
  case 5: 
   var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_loopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_loopexit$1;var $lpad_phi$0 = $lpad_loopexit$0;label = 7; break;
  case 6: 
   var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); $lpad_nonloopexit$1 = tempRet0;
   var $lpad_phi$1 = $lpad_nonloopexit$1;var $lpad_phi$0 = $lpad_nonloopexit$0;label = 7; break;
  case 7: 
   var $lpad_phi$0;
   var $lpad_phi$1;
   var $11=$lpad_phi$1;
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $14=$lpad_phi$0;
   ___cxa_call_unexpected($14);
   throw "Reached an unreachable!";
  case 9: 
   var $16=___cxa_allocate_exception(4);
   var $17=$16;
   HEAP32[(($17)>>2)]=(((18456)|0));
   (function() { try { __THREW__ = 0; return ___cxa_throw($16, 20496, (62)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 12; break; } else { label = 6; break; }
  case 10: 
   return $3;
  case 11: 
   ___resumeException($lpad_phi$0)
  case 12: 
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Znaj($size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1 = (function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label = 2; break; } else { label = 3; break; }
  case 2: 
   return $1;
  case 3: 
   var $4$0 = ___cxa_find_matching_catch(-1, -1); $4$1 = tempRet0;
   var $5=$4$1;
   var $6=(($5)|(0)) < 0;
   if ($6) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $8=$4$0;
   ___cxa_call_unexpected($8);
   throw "Reached an unreachable!";
  case 5: 
   ___resumeException($4$0)
  default: assert(0, "bad label: " + label);
 }
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    var ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    var ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    var ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    var ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math.imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math.imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math.imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math.imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math.imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math.imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
var initialStackTop;
var inMain;
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  inMain = true;
  var ret;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e && typeof e == 'object' && e.type == 'ExitStatus') {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      Module.print('Exit Status: ' + e.value);
      return e.value;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    inMain = false;
  }
  // if we're not running an evented main loop, it's time to exit
  if (!Module['noExitRuntime']) {
    exit(ret);
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  STACKTOP = initialStackTop;
  // TODO call externally added 'exit' callbacks with the status code.
  // It'd be nice to provide the same interface for all Module events (e.g.
  // prerun, premain, postmain). Perhaps an EventEmitter so we can do:
  // Module.on('exit', function (status) {});
  // exit the runtime
  exitRuntime();
  if (inMain) {
    // if we're still inside the callMain's try/catch, we need to throw an
    // exception in order to immediately terminate execution.
    throw { type: 'ExitStatus', value: status };
  }
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
  }
  ABORT = true;
  throw 'abort() at ' + (new Error().stack);
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=gray.js.map

//ARGUMENTS
Module['arguments'] = [];

if((data.input) && (data.input.argv)){	
	var argv = data.input.argv;
	argv.forEach(function(arg){
		Module['arguments'][arg.pos] = arg.arg;
	});
}


	

Module.callMain(Module['arguments']);



if((data.output) && (data.output.files)){
        var files = data.output.files;
	files.forEach(function(file) {
   
		var dirname = Module['dirname'](file.name);
	
		var basename = Module['basename'](file.name);
		var content = intArrayToString(FS.root.contents[basename].contents);
		content = ((file.compress) || (file.decompress)) ? Module['compress'](content) : content;

		Module['return']['output']['files'][dirname + basename] =  content;
    


	}); 

}


//var fs = require('fs');
Module['arguments'].forEach(function(arg){
  if(arg.arg == "/bin/this.program")
    return;

//console.log(arg.arg);
//console.log(Module['return'].output.stdout)
//var dirname = Module['dirname']('/gray.jpg');
//var basename = Module['basename']('/gray.jpg');
//console.log(arg)
Module['return']['output']['files'][arg+'|gray.jpg'] = intArrayToString(FS.root.contents[arg+'gray.jpg'].contents);
console.log(arg)
//fs.writeFile(basename,Module['return']['output']['files'][dirname + basename ],'binary');


});

return Module['return'];

}

//var results = Run({"input":{"argv":[{"arg":"facebook.jpg","pos":"0"},{"arg":"facebook.jpg","pos":"1"},{"arg":"facebook.jpg","pos":"2"},{"arg":"facebook.jpg","pos":"3"},{"arg":"facebook.jpg","pos":"4"},{"arg":"facebook.jpg","pos":"5"},{"arg":"facebook.jpg","pos":"6"},{"arg":"facebook.jpg","pos":"7"}]}});
/*
var data = require('./data.json');
var fs= require('fs')
data.forEach(function(unit){
  var results = Run(unit);
  fs.writeFileSync("r.jpg",results['output']['files'][unit.input.argv[0].arg],'binary');

});

*/